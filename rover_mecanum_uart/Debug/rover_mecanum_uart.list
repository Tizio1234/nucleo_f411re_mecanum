
rover_mecanum_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08010e50  08010e50  00020e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011658  08011658  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08011658  08011658  00021658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011660  08011660  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011660  08011660  00021660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011664  08011664  00021664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08011668  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005380  20000264  080118cc  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055e4  080118cc  000355e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee5d  00000000  00000000  000302d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004480  00000000  00000000  0004f134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000535b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001523  00000000  00000000  000550a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c6e  00000000  00000000  000565c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bdaf  00000000  00000000  0005c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a003a  00000000  00000000  00077fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ab0  00000000  00000000  0011801c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00120acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010e38 	.word	0x08010e38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08010e38 	.word	0x08010e38

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f001 f9f8 	bl	8002418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f844 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 fa30 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8001030:	f000 fa0e 	bl	8001450 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001034:	f000 f9e2 	bl	80013fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001038:	f000 f8a6 	bl	8001188 <MX_TIM1_Init>
  MX_TIM2_Init();
 800103c:	f000 f95c 	bl	80012f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001040:	f000 f9b2 	bl	80013a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001044:	f005 f83c 	bl	80060c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart_rb_queue */
  uart_rb_queueHandle = osMessageQueueNew (10, sizeof(uint16_t), &uart_rb_queue_attributes);
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <main+0x6c>)
 800104a:	2102      	movs	r1, #2
 800104c:	200a      	movs	r0, #10
 800104e:	f005 fa17 	bl	8006480 <osMessageQueueNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <main+0x70>)
 8001056:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x74>)
 800105a:	2100      	movs	r1, #0
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <main+0x78>)
 800105e:	f005 f879 	bl	8006154 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <main+0x7c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of uart_rb_task */
  uart_rb_taskHandle = osThreadNew(Startuart_rb_task, NULL, &uart_rb_task_attributes);
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0x80>)
 800106a:	2100      	movs	r1, #0
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <main+0x84>)
 800106e:	f005 f871 	bl	8006154 <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <main+0x88>)
 8001076:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of lwpkt_events */
  lwpkt_eventsHandle = osEventFlagsNew(&lwpkt_events_attributes);
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <main+0x8c>)
 800107a:	f005 f918 	bl	80062ae <osEventFlagsNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <main+0x90>)
 8001082:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001084:	f005 f840 	bl	8006108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x68>
 800108a:	bf00      	nop
 800108c:	08011004 	.word	0x08011004
 8001090:	20000408 	.word	0x20000408
 8001094:	08010fbc 	.word	0x08010fbc
 8001098:	08001805 	.word	0x08001805
 800109c:	20000400 	.word	0x20000400
 80010a0:	08010fe0 	.word	0x08010fe0
 80010a4:	08001871 	.word	0x08001871
 80010a8:	20000404 	.word	0x20000404
 80010ac:	0801101c 	.word	0x0801101c
 80010b0:	2000040c 	.word	0x2000040c

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	; 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	; 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00c f8c4 	bl	800d250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <SystemClock_Config+0xcc>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <SystemClock_Config+0xcc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <SystemClock_Config+0xd0>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <SystemClock_Config+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001124:	2310      	movs	r3, #16
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001128:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800112c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800112e:	2304      	movs	r3, #4
 8001130:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001132:	2304      	movs	r3, #4
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f830 	bl	80031a0 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001146:	f000 fc09 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fa92 	bl	8003690 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001172:	f000 fbf3 	bl	800195c <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00c f845 	bl	800d250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011c8:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <MX_TIM1_Init+0x16c>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011ce:	2209      	movs	r2, #9
 80011d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011da:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80011de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f2:	483f      	ldr	r0, [pc, #252]	; (80012f0 <MX_TIM1_Init+0x168>)
 80011f4:	f002 fc9e 	bl	8003b34 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011fe:	f000 fbad 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120c:	4619      	mov	r1, r3
 800120e:	4838      	ldr	r0, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x168>)
 8001210:	f003 f858 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121a:	f000 fb9f 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121e:	4834      	ldr	r0, [pc, #208]	; (80012f0 <MX_TIM1_Init+0x168>)
 8001220:	f002 fd3a 	bl	8003c98 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800122a:	f000 fb97 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123a:	4619      	mov	r1, r3
 800123c:	482c      	ldr	r0, [pc, #176]	; (80012f0 <MX_TIM1_Init+0x168>)
 800123e:	f003 fc09 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001248:	f000 fb88 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x168>)
 8001272:	f002 ff65 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800127c:	f000 fb6e 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	2204      	movs	r2, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <MX_TIM1_Init+0x168>)
 800128a:	f002 ff59 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001294:	f000 fb62 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	2208      	movs	r2, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012a2:	f002 ff4d 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012ac:	f000 fb56 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012d4:	f003 fc2c 	bl	8004b30 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012de:	f000 fb3d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x168>)
 80012e4:	f000 fdd2 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000280 	.word	0x20000280
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_TIM2_Init+0xac>)
 800131c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001324:	2209      	movs	r2, #9
 8001326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM2_Init+0xac>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001330:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM2_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001344:	f002 fca8 	bl	8003c98 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800134e:	f000 fb05 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4619      	mov	r1, r3
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001362:	f003 fb77 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800136c:	f000 faf6 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	; 0x60
 8001372:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001388:	f002 feda 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001392:	f000 fae3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM2_Init+0xac>)
 8001398:	f000 fd78 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200002c8 	.word	0x200002c8

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f003 fc0c 	bl	8004bfc <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 fab7 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000310 	.word	0x20000310
 80013f8:	40011000 	.word	0x40011000

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f003 fbe2 	bl	8004bfc <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 fa8d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000358 	.word	0x20000358
 800144c:	40004400 	.word	0x40004400

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	203a      	movs	r0, #58	; 0x3a
 8001478:	f001 f8c8 	bl	800260c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800147c:	203a      	movs	r0, #58	; 0x3a
 800147e:	f001 f8e1 	bl	8002644 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a40      	ldr	r2, [pc, #256]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <MX_GPIO_Init+0x120>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <MX_GPIO_Init+0x120>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <MX_GPIO_Init+0x120>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <MX_GPIO_Init+0x120>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	21c0      	movs	r1, #192	; 0xc0
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <MX_GPIO_Init+0x124>)
 800151c:	f001 fe26 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001526:	4824      	ldr	r0, [pc, #144]	; (80015b8 <MX_GPIO_Init+0x128>)
 8001528:	f001 fe20 	bl	800316c <HAL_GPIO_WritePin>
                          |ROBOT_IN2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROBOT_IN1_A_GPIO_Port, ROBOT_IN1_A_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <MX_GPIO_Init+0x12c>)
 8001532:	f001 fe1b 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	481b      	ldr	r0, [pc, #108]	; (80015bc <MX_GPIO_Init+0x12c>)
 800154e:	f001 fc89 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_A_Pin ROBOT_IN3_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4812      	ldr	r0, [pc, #72]	; (80015b4 <MX_GPIO_Init+0x124>)
 800156a:	f001 fc7b 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_B_Pin ROBOT_IN1_B_Pin ROBOT_IN3_B_Pin ROBOT_IN2_B_Pin
                           ROBOT_IN2_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 800156e:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001572:	617b      	str	r3, [r7, #20]
                          |ROBOT_IN2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_GPIO_Init+0x128>)
 8001588:	f001 fc6c 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROBOT_IN1_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN1_A_Pin;
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROBOT_IN1_A_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_GPIO_Init+0x12c>)
 80015a4:	f001 fc5e 	bl	8002e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800

080015c0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <_write+0x28>)
 80015d8:	f003 fb60 	bl	8004c9c <HAL_UART_Transmit>
	return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000358 	.word	0x20000358

080015ec <uart_tx_rb_evt_fn>:

void uart_tx_rb_evt_fn(lwrb_t* buff, lwrb_evt_type_t type, size_t len){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	460b      	mov	r3, r1
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	72fb      	strb	r3, [r7, #11]
	switch (type) {
 80015fa:	7afb      	ldrb	r3, [r7, #11]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d129      	bne.n	8001654 <uart_tx_rb_evt_fn+0x68>
		case LWRB_EVT_WRITE:
			lwrb_sz_t size = lwrb_get_linear_block_read_length(buff);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f009 fde7 	bl	800b1d4 <lwrb_get_linear_block_read_length>
 8001606:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart1, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f009 fdc7 	bl	800b19c <lwrb_get_linear_block_read_address>
 800160e:	4601      	mov	r1, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	b29a      	uxth	r2, r3
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <uart_tx_rb_evt_fn+0x74>)
 800161a:	f003 fb3f 	bl	8004c9c <HAL_UART_Transmit>
			lwrb_skip(buff, size);
 800161e:	6979      	ldr	r1, [r7, #20]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f009 fe14 	bl	800b24e <lwrb_skip>
			size = lwrb_get_linear_block_read_length(buff);
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f009 fdd4 	bl	800b1d4 <lwrb_get_linear_block_read_length>
 800162c:	6178      	str	r0, [r7, #20]
			if (size > 0) {
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <uart_tx_rb_evt_fn+0x5e>
					HAL_UART_Transmit(&huart1, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f009 fdb1 	bl	800b19c <lwrb_get_linear_block_read_address>
 800163a:	4601      	mov	r1, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <uart_tx_rb_evt_fn+0x74>)
 8001646:	f003 fb29 	bl	8004c9c <HAL_UART_Transmit>
			}
			lwrb_skip(buff, size);
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f009 fdfe 	bl	800b24e <lwrb_skip>

			break;
 8001652:	e000      	b.n	8001656 <uart_tx_rb_evt_fn+0x6a>
		default:
			break;
 8001654:	bf00      	nop
	}
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000310 	.word	0x20000310

08001664 <uart_lwpkt_evt_fn>:

static void uart_lwpkt_evt_fn(lwpkt_t* pkt, lwpkt_evt_type_t type){
 8001664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001668:	b090      	sub	sp, #64	; 0x40
 800166a:	af04      	add	r7, sp, #16
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
	switch (type) {
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8093 	bne.w	80017a0 <uart_lwpkt_evt_fn+0x13c>
		case LWPKT_EVT_PKT:
			size_t len = lwpkt_get_data_len(pkt);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <uart_lwpkt_evt_fn+0x24>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001686:	e000      	b.n	800168a <uart_lwpkt_evt_fn+0x26>
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
			char* data = (char*)lwpkt_get_data(pkt);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <uart_lwpkt_evt_fn+0x32>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	e000      	b.n	8001698 <uart_lwpkt_evt_fn+0x34>
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
			printf("Packet received, size(%d), data(%.*s)\r\n", len, len, data);
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016a0:	4842      	ldr	r0, [pc, #264]	; (80017ac <uart_lwpkt_evt_fn+0x148>)
 80016a2:	f00b fc6f 	bl	800cf84 <iprintf>

			cJSON* parsed_json = cJSON_ParseWithLength(data, len);
 80016a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016aa:	f008 fdbf 	bl	800a22c <cJSON_ParseWithLength>
 80016ae:	6278      	str	r0, [r7, #36]	; 0x24
			if (cJSON_IsObject(parsed_json)){
 80016b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016b2:	f009 f8e8 	bl	800a886 <cJSON_IsObject>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d06a      	beq.n	8001792 <uart_lwpkt_evt_fn+0x12e>
				printf("A json object\r\n");
 80016bc:	483c      	ldr	r0, [pc, #240]	; (80017b0 <uart_lwpkt_evt_fn+0x14c>)
 80016be:	f00b fcc7 	bl	800d050 <puts>

				cJSON* power_json = cJSON_GetObjectItem(parsed_json, "power");
 80016c2:	493c      	ldr	r1, [pc, #240]	; (80017b4 <uart_lwpkt_evt_fn+0x150>)
 80016c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c6:	f009 f8b8 	bl	800a83a <cJSON_GetObjectItem>
 80016ca:	6238      	str	r0, [r7, #32]
				cJSON* theta_json = cJSON_GetObjectItem(parsed_json, "theta");
 80016cc:	493a      	ldr	r1, [pc, #232]	; (80017b8 <uart_lwpkt_evt_fn+0x154>)
 80016ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016d0:	f009 f8b3 	bl	800a83a <cJSON_GetObjectItem>
 80016d4:	61f8      	str	r0, [r7, #28]
				cJSON* turn_json = cJSON_GetObjectItem(parsed_json, "turn");
 80016d6:	4939      	ldr	r1, [pc, #228]	; (80017bc <uart_lwpkt_evt_fn+0x158>)
 80016d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016da:	f009 f8ae 	bl	800a83a <cJSON_GetObjectItem>
 80016de:	61b8      	str	r0, [r7, #24]

				if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json) && cJSON_IsNumber(turn_json)){
 80016e0:	6a38      	ldr	r0, [r7, #32]
 80016e2:	f009 f8b9 	bl	800a858 <cJSON_IsNumber>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d04e      	beq.n	800178a <uart_lwpkt_evt_fn+0x126>
 80016ec:	69f8      	ldr	r0, [r7, #28]
 80016ee:	f009 f8b3 	bl	800a858 <cJSON_IsNumber>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d048      	beq.n	800178a <uart_lwpkt_evt_fn+0x126>
 80016f8:	69b8      	ldr	r0, [r7, #24]
 80016fa:	f009 f8ad 	bl	800a858 <cJSON_IsNumber>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d042      	beq.n	800178a <uart_lwpkt_evt_fn+0x126>
					float power = cJSON_GetNumberValue(power_json);
 8001704:	6a38      	ldr	r0, [r7, #32]
 8001706:	f007 fff1 	bl	80096ec <cJSON_GetNumberValue>
 800170a:	ec53 2b10 	vmov	r2, r3, d0
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa81 	bl	8000c18 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	617b      	str	r3, [r7, #20]
					float theta = cJSON_GetNumberValue(theta_json);
 800171a:	69f8      	ldr	r0, [r7, #28]
 800171c:	f007 ffe6 	bl	80096ec <cJSON_GetNumberValue>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa76 	bl	8000c18 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	613b      	str	r3, [r7, #16]
					float turn = cJSON_GetNumberValue(turn_json);
 8001730:	69b8      	ldr	r0, [r7, #24]
 8001732:	f007 ffdb 	bl	80096ec <cJSON_GetNumberValue>
 8001736:	ec53 2b10 	vmov	r2, r3, d0
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff fa6b 	bl	8000c18 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	60fb      	str	r3, [r7, #12]

					printf("Power: %f, Theta: %f, Turn: %f\r\n", power, theta, turn);
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7fe ff16 	bl	8000578 <__aeabi_f2d>
 800174c:	4680      	mov	r8, r0
 800174e:	4689      	mov	r9, r1
 8001750:	6938      	ldr	r0, [r7, #16]
 8001752:	f7fe ff11 	bl	8000578 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7fe ff0c 	bl	8000578 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001768:	e9cd 4500 	strd	r4, r5, [sp]
 800176c:	4642      	mov	r2, r8
 800176e:	464b      	mov	r3, r9
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <uart_lwpkt_evt_fn+0x15c>)
 8001772:	f00b fc07 	bl	800cf84 <iprintf>

					mecanum_robot_move(&robot, power, theta, turn);
 8001776:	ed97 1a03 	vldr	s2, [r7, #12]
 800177a:	edd7 0a04 	vldr	s1, [r7, #16]
 800177e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <uart_lwpkt_evt_fn+0x160>)
 8001784:	f000 fa04 	bl	8001b90 <mecanum_robot_move>
				if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json) && cJSON_IsNumber(turn_json)){
 8001788:	e006      	b.n	8001798 <uart_lwpkt_evt_fn+0x134>
				} else {
					printf("One or more key/value pairs missing\r\n");
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <uart_lwpkt_evt_fn+0x164>)
 800178c:	f00b fc60 	bl	800d050 <puts>
 8001790:	e002      	b.n	8001798 <uart_lwpkt_evt_fn+0x134>
				}
			} else {
				printf("Not a json object\r\n");
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <uart_lwpkt_evt_fn+0x168>)
 8001794:	f00b fc5c 	bl	800d050 <puts>
			}

			cJSON_free(parsed_json);
 8001798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800179a:	f009 f88b 	bl	800a8b4 <cJSON_free>
			break;
 800179e:	e000      	b.n	80017a2 <uart_lwpkt_evt_fn+0x13e>
		default:
			break;
 80017a0:	bf00      	nop
	}
}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017ac:	08010e8c 	.word	0x08010e8c
 80017b0:	08010eb4 	.word	0x08010eb4
 80017b4:	08010ec4 	.word	0x08010ec4
 80017b8:	08010ecc 	.word	0x08010ecc
 80017bc:	08010ed4 	.word	0x08010ed4
 80017c0:	08010edc 	.word	0x08010edc
 80017c4:	20000070 	.word	0x20000070
 80017c8:	08010f00 	.word	0x08010f00
 80017cc:	08010f28 	.word	0x08010f28

080017d0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_UARTEx_RxEventCallback+0x2c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d106      	bne.n	80017f4 <HAL_UARTEx_RxEventCallback+0x24>
    osMessageQueuePut(uart_rb_queueHandle, &Size, 0, 0);
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_UARTEx_RxEventCallback+0x30>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	1cb9      	adds	r1, r7, #2
 80017ec:	2300      	movs	r3, #0
 80017ee:	2200      	movs	r2, #0
 80017f0:	f004 feba 	bl	8006568 <osMessageQueuePut>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40011000 	.word	0x40011000
 8001800:	20000408 	.word	0x20000408

08001804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  mecanum_robot_init(&robot);
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <StartDefaultTask+0x50>)
 800180e:	f000 f984 	bl	8001b1a <mecanum_robot_init>

  printf("Start\r\n");
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <StartDefaultTask+0x54>)
 8001814:	f00b fc1c 	bl	800d050 <puts>
	osEventFlagsWait(lwpkt_eventsHandle,
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <StartDefaultTask+0x58>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	2203      	movs	r2, #3
 8001822:	2101      	movs	r1, #1
 8001824:	f004 fdc6 	bl	80063b4 <osEventFlagsWait>
									lwpkt_init_event_flag,
									osFlagsNoClear | osFlagsWaitAll,
									osWaitForever);

	printf("lwpkt initialized\r\n");
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <StartDefaultTask+0x5c>)
 800182a:	f00b fc11 	bl	800d050 <puts>

	cJSON_InitHooks(&cjson_hooks);
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <StartDefaultTask+0x60>)
 8001830:	f007 ffe4 	bl	80097fc <cJSON_InitHooks>

	lwpkt_set_evt_fn(&uart_lwpkt, uart_lwpkt_evt_fn);
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <StartDefaultTask+0x64>)
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <StartDefaultTask+0x68>)
 8001838:	f009 fa80 	bl	800ad3c <lwpkt_set_evt_fn>

	/* Infinite loop */
	for(;;)
	{
		uint32_t current_time = HAL_GetTick();
 800183c:	f000 fe22 	bl	8002484 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]
		lwpkt_process(&uart_lwpkt, current_time);
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <StartDefaultTask+0x68>)
 8001846:	f009 fa17 	bl	800ac78 <lwpkt_process>

		osDelay(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f004 fd14 	bl	8006278 <osDelay>
	{
 8001850:	e7f4      	b.n	800183c <StartDefaultTask+0x38>
 8001852:	bf00      	nop
 8001854:	20000070 	.word	0x20000070
 8001858:	08010f3c 	.word	0x08010f3c
 800185c:	2000040c 	.word	0x2000040c
 8001860:	08010f44 	.word	0x08010f44
 8001864:	0801102c 	.word	0x0801102c
 8001868:	08001665 	.word	0x08001665
 800186c:	20000410 	.word	0x20000410

08001870 <Startuart_rb_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart_rb_task */
void Startuart_rb_task(void *argument)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startuart_rb_task */
	lwrb_init(&uart_rx_buffer, uart_rx_data_buffer, UART_RX_BUFFER_SIZE);
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	4923      	ldr	r1, [pc, #140]	; (800190c <Startuart_rb_task+0x9c>)
 800187e:	4824      	ldr	r0, [pc, #144]	; (8001910 <Startuart_rb_task+0xa0>)
 8001880:	f009 fa6c 	bl	800ad5c <lwrb_init>

	lwrb_init(&uart_tx_buffer, uart_tx_data_buffer, UART_TX_BUFFER_SIZE);
 8001884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001888:	4922      	ldr	r1, [pc, #136]	; (8001914 <Startuart_rb_task+0xa4>)
 800188a:	4823      	ldr	r0, [pc, #140]	; (8001918 <Startuart_rb_task+0xa8>)
 800188c:	f009 fa66 	bl	800ad5c <lwrb_init>
	lwrb_set_evt_fn(&uart_tx_buffer, uart_tx_rb_evt_fn);
 8001890:	4922      	ldr	r1, [pc, #136]	; (800191c <Startuart_rb_task+0xac>)
 8001892:	4821      	ldr	r0, [pc, #132]	; (8001918 <Startuart_rb_task+0xa8>)
 8001894:	f009 fa93 	bl	800adbe <lwrb_set_evt_fn>

	lwpkt_init(&uart_lwpkt, &uart_tx_buffer, &uart_rx_buffer);
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <Startuart_rb_task+0xa0>)
 800189a:	491f      	ldr	r1, [pc, #124]	; (8001918 <Startuart_rb_task+0xa8>)
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <Startuart_rb_task+0xb0>)
 800189e:	f009 f874 	bl	800a98a <lwpkt_init>
	osEventFlagsSet(lwpkt_eventsHandle, lwpkt_init_event_flag);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <Startuart_rb_task+0xb4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fd3f 	bl	800632c <osEventFlagsSet>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	491d      	ldr	r1, [pc, #116]	; (8001928 <Startuart_rb_task+0xb8>)
 80018b4:	481d      	ldr	r0, [pc, #116]	; (800192c <Startuart_rb_task+0xbc>)
 80018b6:	f003 fa7c 	bl	8004db2 <HAL_UARTEx_ReceiveToIdle_DMA>

	/* Infinite loop */
	for(;;)
	{
		uint16_t Size;
		osMessageQueueGet(uart_rb_queueHandle, &Size, NULL, osWaitForever);
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <Startuart_rb_task+0xc0>)
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f107 010e 	add.w	r1, r7, #14
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c6:	2200      	movs	r2, #0
 80018c8:	f004 feae 	bl	8006628 <osMessageQueueGet>

		static uint16_t pos = 0;
		lwrb_write(&uart_rx_buffer, &uart_dma_rx_buffer[pos], Size >= pos ? Size - pos : Size - pos + UART_DMA_RX_BUFFER_SIZE);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <Startuart_rb_task+0xc4>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <Startuart_rb_task+0xb8>)
 80018d4:	18d1      	adds	r1, r2, r3
 80018d6:	89fa      	ldrh	r2, [r7, #14]
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <Startuart_rb_task+0xc4>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d305      	bcc.n	80018ec <Startuart_rb_task+0x7c>
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <Startuart_rb_task+0xc4>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	e006      	b.n	80018fa <Startuart_rb_task+0x8a>
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <Startuart_rb_task+0xc4>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018fa:	461a      	mov	r2, r3
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <Startuart_rb_task+0xa0>)
 80018fe:	f009 fa77 	bl	800adf0 <lwrb_write>
		pos = Size;
 8001902:	89fa      	ldrh	r2, [r7, #14]
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <Startuart_rb_task+0xc4>)
 8001906:	801a      	strh	r2, [r3, #0]
	{
 8001908:	e7d7      	b.n	80018ba <Startuart_rb_task+0x4a>
 800190a:	bf00      	nop
 800190c:	20000640 	.word	0x20000640
 8001910:	2000062c 	.word	0x2000062c
 8001914:	20000854 	.word	0x20000854
 8001918:	20000840 	.word	0x20000840
 800191c:	080015ed 	.word	0x080015ed
 8001920:	20000410 	.word	0x20000410
 8001924:	2000040c 	.word	0x2000040c
 8001928:	2000052c 	.word	0x2000052c
 800192c:	20000310 	.word	0x20000310
 8001930:	20000408 	.word	0x20000408
 8001934:	20000a54 	.word	0x20000a54

08001938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194a:	f000 fd87 	bl	800245c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40014800 	.word	0x40014800

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>

08001966 <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	f001 fbe7 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6898      	ldr	r0, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	899b      	ldrh	r3, [r3, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	4619      	mov	r1, r3
 80019aa:	f001 fbdf 	bl	800316c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	8a9b      	ldrh	r3, [r3, #20]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f002 fa6d 	bl	8003e98 <HAL_TIM_PWM_Stop>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 80019d2:	edd7 7a00 	vldr	s15, [r7]
 80019d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	f000 8095 	beq.w	8001b0c <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 80019e2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80019e6:	ed97 0a00 	vldr	s0, [r7]
 80019ea:	f00e f9e9 	bl	800fdc0 <fmaxf>
 80019ee:	eef0 7a40 	vmov.f32	s15, s0
 80019f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	f00e f9fc 	bl	800fdf6 <fminf>
 80019fe:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 8001a02:	edd7 7a00 	vldr	s15, [r7]
 8001a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	bfcc      	ite	gt
 8001a10:	2301      	movgt	r3, #1
 8001a12:	2300      	movle	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f001 fba3 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6898      	ldr	r0, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8999      	ldrh	r1, [r3, #12]
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	f001 fb98 	bl	800316c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8a9b      	ldrh	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d114      	bne.n	8001a6e <motor_run+0xa8>
 8001a44:	edd7 7a00 	vldr	s15, [r7]
 8001a48:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a66:	ee17 2a90 	vmov	r2, s15
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6c:	e045      	b.n	8001afa <motor_run+0x134>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8a9b      	ldrh	r3, [r3, #20]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d114      	bne.n	8001aa0 <motor_run+0xda>
 8001a76:	edd7 7a00 	vldr	s15, [r7]
 8001a7a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a9e:	e02c      	b.n	8001afa <motor_run+0x134>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8a9b      	ldrh	r3, [r3, #20]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d114      	bne.n	8001ad2 <motor_run+0x10c>
 8001aa8:	edd7 7a00 	vldr	s15, [r7]
 8001aac:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ad0:	e013      	b.n	8001afa <motor_run+0x134>
 8001ad2:	edd7 7a00 	vldr	s15, [r7]
 8001ad6:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af4:	ee17 3a90 	vmov	r3, s15
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8a9b      	ldrh	r3, [r3, #20]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f002 f917 	bl	8003d38 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 8001b0a:	e002      	b.n	8001b12 <motor_run+0x14c>
		motor_stop(motor);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff3a 	bl	8001986 <motor_stop>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <mecanum_robot_init>:

void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot){
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	motor_init(mecanum_robot->fl_motor);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff1d 	bl	8001966 <motor_init>
	motor_init(mecanum_robot->fr_motor);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff18 	bl	8001966 <motor_init>
	motor_init(mecanum_robot->bl_motor);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff13 	bl	8001966 <motor_init>
	motor_init(mecanum_robot->br_motor);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff0e 	bl	8001966 <motor_init>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff11 	bl	8001986 <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff0c 	bl	8001986 <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff07 	bl	8001986 <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff02 	bl	8001986 <motor_stop>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	0000      	movs	r0, r0
 8001b8c:	0000      	movs	r0, r0
	...

08001b90 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ba0:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 8001ba4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d10a      	bne.n	8001bc8 <mecanum_robot_move+0x38>
 8001bb2:	edd7 7a00 	vldr	s15, [r7]
 8001bb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d103      	bne.n	8001bc8 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff ffc6 	bl	8001b52 <mecanum_robot_stop>
		return;
 8001bc6:	e0e4      	b.n	8001d92 <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 8001bc8:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001da0 <mecanum_robot_move+0x210>
 8001bcc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bd0:	f00e f8f6 	bl	800fdc0 <fmaxf>
 8001bd4:	eef0 7a40 	vmov.f32	s15, s0
 8001bd8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00e f909 	bl	800fdf6 <fminf>
 8001be4:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe fcc5 	bl	8000578 <__aeabi_f2d>
 8001bee:	a36a      	add	r3, pc, #424	; (adr r3, 8001d98 <mecanum_robot_move+0x208>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fb60 	bl	80002b8 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff f80a 	bl	8000c18 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 8001c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c0a:	f7fe fcb5 	bl	8000578 <__aeabi_f2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	ec43 2b10 	vmov	d0, r2, r3
 8001c16:	f00e f87b 	bl	800fd10 <sin>
 8001c1a:	ec53 2b10 	vmov	r2, r3, d0
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe fff9 	bl	8000c18 <__aeabi_d2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 8001c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c2c:	f7fe fca4 	bl	8000578 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	ec43 2b10 	vmov	d0, r2, r3
 8001c38:	f00e f816 	bl	800fc68 <cos>
 8001c3c:	ec53 2b10 	vmov	r2, r3, d0
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ffe8 	bl	8000c18 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 8001c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c50:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c58:	eef0 7ae7 	vabs.f32	s15, s15
 8001c5c:	eef0 0a67 	vmov.f32	s1, s15
 8001c60:	eeb0 0a47 	vmov.f32	s0, s14
 8001c64:	f00e f8ac 	bl	800fdc0 <fmaxf>
 8001c68:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 8001c6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c74:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c78:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c80:	ed97 7a00 	vldr	s14, [r7]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 8001c8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c90:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c94:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ca0:	edd7 7a00 	vldr	s15, [r7]
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 8001cac:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cb4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc0:	ed97 7a00 	vldr	s14, [r7]
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 8001ccc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce0:	edd7 7a00 	vldr	s15, [r7]
 8001ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 8001cec:	edd7 7a00 	vldr	s15, [r7]
 8001cf0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001cf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	dd27      	ble.n	8001d5a <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 8001d0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d0e:	edd7 7a00 	vldr	s15, [r7]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 8001d1a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001d1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d26:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 8001d2a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001d2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 8001d3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 8001d4a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe2f 	bl	80019c6 <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe28 	bl	80019c6 <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe21 	bl	80019c6 <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe1a 	bl	80019c6 <motor_run>
}
 8001d92:	3738      	adds	r7, #56	; 0x38
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	54442d18 	.word	0x54442d18
 8001d9c:	3fe921fb 	.word	0x3fe921fb
 8001da0:	00000000 	.word	0x00000000

08001da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_MspInit+0x54>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_MspInit+0x54>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x54>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_MspInit+0x54>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_MspInit+0x54>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_MspInit+0x54>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	210f      	movs	r1, #15
 8001de6:	f06f 0001 	mvn.w	r0, #1
 8001dea:	f000 fc0f 	bl	800260c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d115      	bne.n	8001e3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_Base_MspInit+0x4c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <HAL_TIM_Base_MspInit+0x4c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_TIM_Base_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	201a      	movs	r0, #26
 8001e30:	f000 fbec 	bl	800260c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e34:	201a      	movs	r0, #26
 8001e36:	f000 fc05 	bl	8002644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d10d      	bne.n	8001e7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_TIM_MspPostInit+0xb0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d11f      	bne.n	8001eee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ROBOT_ENB_B_Pin|ROBOT_ENA_A_Pin|ROBOT_ENA_B_Pin;
 8001eca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4817      	ldr	r0, [pc, #92]	; (8001f44 <HAL_TIM_MspPostInit+0xb8>)
 8001ee8:	f000 ffbc 	bl	8002e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eec:	e022      	b.n	8001f34 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d11d      	bne.n	8001f34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_TIM_MspPostInit+0xb4>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROBOT_ENB_A_Pin;
 8001f14:	2320      	movs	r3, #32
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROBOT_ENB_A_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_TIM_MspPostInit+0xb8>)
 8001f30:	f000 ff98 	bl	8002e64 <HAL_GPIO_Init>
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_UART_MspInit+0x194>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f040 8083 	bne.w	8002072 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7c:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6313      	str	r3, [r2, #48]	; 0x30
 8001f98:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4841      	ldr	r0, [pc, #260]	; (80020e4 <HAL_UART_MspInit+0x19c>)
 8001fde:	f000 ff41 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	483a      	ldr	r0, [pc, #232]	; (80020e8 <HAL_UART_MspInit+0x1a0>)
 8001ffe:	f000 ff31 	bl	8002e64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_UART_MspInit+0x1a8>)
 8002006:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 800200a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 800201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002036:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002038:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002046:	f000 fb0b 	bl	8002660 <HAL_DMA_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002050:	f7ff fc84 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_UART_MspInit+0x1a4>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2025      	movs	r0, #37	; 0x25
 8002066:	f000 fad1 	bl	800260c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206a:	2025      	movs	r0, #37	; 0x25
 800206c:	f000 faea 	bl	8002644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002070:	e030      	b.n	80020d4 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_UART_MspInit+0x1ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d12b      	bne.n	80020d4 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_UART_MspInit+0x198>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_UART_MspInit+0x198>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_UART_MspInit+0x198>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_UART_MspInit+0x198>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_UART_MspInit+0x198>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b4:	230c      	movs	r3, #12
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c4:	2307      	movs	r3, #7
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_UART_MspInit+0x19c>)
 80020d0:	f000 fec8 	bl	8002e64 <HAL_GPIO_Init>
}
 80020d4:	bf00      	nop
 80020d6:	3730      	adds	r7, #48	; 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	200003a0 	.word	0x200003a0
 80020f0:	40026440 	.word	0x40026440
 80020f4:	40004400 	.word	0x40004400

080020f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_InitTick+0xd0>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <HAL_InitTick+0xd0>)
 8002112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002116:	6453      	str	r3, [r2, #68]	; 0x44
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_InitTick+0xd0>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002124:	f107 020c 	add.w	r2, r7, #12
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fcce 	bl	8003ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002134:	f001 fcb8 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8002138:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_InitTick+0xd4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	3b01      	subs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_InitTick+0xd8>)
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_InitTick+0xdc>)
 800214c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_InitTick+0xd8>)
 8002150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002154:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_InitTick+0xd8>)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_InitTick+0xd8>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_InitTick+0xd8>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_InitTick+0xd8>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <HAL_InitTick+0xd8>)
 8002170:	f001 fce0 	bl	8003b34 <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800217a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11b      	bne.n	80021ba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002182:	4813      	ldr	r0, [pc, #76]	; (80021d0 <HAL_InitTick+0xd8>)
 8002184:	f001 fd26 	bl	8003bd4 <HAL_TIM_Base_Start_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800218e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002192:	2b00      	cmp	r3, #0
 8002194:	d111      	bne.n	80021ba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002196:	201a      	movs	r0, #26
 8002198:	f000 fa54 	bl	8002644 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	d808      	bhi.n	80021b4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80021a2:	2200      	movs	r2, #0
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	201a      	movs	r0, #26
 80021a8:	f000 fa30 	bl	800260c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_InitTick+0xe0>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e002      	b.n	80021ba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3730      	adds	r7, #48	; 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	20000a58 	.word	0x20000a58
 80021d4:	40014800 	.word	0x40014800
 80021d8:	20000084 	.word	0x20000084

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <NMI_Handler+0x4>

080021e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <MemManage_Handler+0x4>

080021ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800220e:	f001 fea7 	bl	8003f60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002214:	f001 fea4 	bl	8003f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000280 	.word	0x20000280
 8002220:	20000a58 	.word	0x20000a58

08002224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <USART1_IRQHandler+0x10>)
 800222a:	f002 fe1f 	bl	8004e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000310 	.word	0x20000310

08002238 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA2_Stream2_IRQHandler+0x10>)
 800223e:	f000 fba7 	bl	8002990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200003a0 	.word	0x200003a0

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f00b f8bd 	bl	800d3e4 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
  }

  return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f2:	605a      	str	r2, [r3, #4]
  return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_isatty>:

int _isatty(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f00b f83e 	bl	800d3e4 <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20020000 	.word	0x20020000
 8002394:	00000400 	.word	0x00000400
 8002398:	20000aa0 	.word	0x20000aa0
 800239c:	200055e8 	.word	0x200055e8

080023a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <SystemInit+0x20>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <SystemInit+0x20>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e0:	4c0b      	ldr	r4, [pc, #44]	; (8002410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ee:	f7ff ffd7 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f00a fffd 	bl	800d3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7fe fe13 	bl	8001020 <main>
  bx  lr    
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002408:	08011668 	.word	0x08011668
  ldr r2, =_sbss
 800240c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002410:	200055e4 	.word	0x200055e4

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>
	...

08002418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_Init+0x40>)
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_Init+0x40>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x40>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 f8d8 	bl	80025f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	2005      	movs	r0, #5
 8002448:	f7ff fe56 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fcaa 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023c00 	.word	0x40023c00

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000088 	.word	0x20000088
 8002480:	20000aa4 	.word	0x20000aa4

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000aa4 	.word	0x20000aa4

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff4c 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261e:	f7ff ff61 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	f7ff ffb1 	bl	8002590 <NVIC_EncodePriority>
 800262e:	4602      	mov	r2, r0
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff80 	bl	800253c <__NVIC_SetPriority>
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff54 	bl	8002500 <__NVIC_EnableIRQ>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff ff0a 	bl	8002484 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e099      	b.n	80027b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269c:	e00f      	b.n	80026be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800269e:	f7ff fef1 	bl	8002484 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d908      	bls.n	80026be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e078      	b.n	80027b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e8      	bne.n	800269e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_DMA_Init+0x158>)
 80026d8:	4013      	ands	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b04      	cmp	r3, #4
 8002716:	d107      	bne.n	8002728 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4313      	orrs	r3, r2
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f023 0307 	bic.w	r3, r3, #7
 800273e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b04      	cmp	r3, #4
 8002750:	d117      	bne.n	8002782 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00e      	beq.n	8002782 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb01 	bl	8002d6c <DMA_CheckFifoParam>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800277e:	2301      	movs	r3, #1
 8002780:	e016      	b.n	80027b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fab8 	bl	8002d00 <DMA_CalcBaseAndBitshift>
 8002790:	4603      	mov	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	223f      	movs	r2, #63	; 0x3f
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	f010803f 	.word	0xf010803f

080027bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_DMA_Start_IT+0x26>
 80027de:	2302      	movs	r3, #2
 80027e0:	e040      	b.n	8002864 <HAL_DMA_Start_IT+0xa8>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12f      	bne.n	8002856 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa4a 	bl	8002ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	409a      	lsls	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0216 	orr.w	r2, r2, #22
 800282a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0208 	orr.w	r2, r2, #8
 8002842:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e005      	b.n	8002862 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800287a:	f7ff fe03 	bl	8002484 <HAL_GetTick>
 800287e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d008      	beq.n	800289e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e052      	b.n	8002944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0216 	bic.w	r2, r2, #22
 80028ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_DMA_Abort+0x62>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0208 	bic.w	r2, r2, #8
 80028dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ee:	e013      	b.n	8002918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f0:	f7ff fdc8 	bl	8002484 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d90c      	bls.n	8002918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2203      	movs	r2, #3
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e015      	b.n	8002944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e4      	bne.n	80028f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	223f      	movs	r2, #63	; 0x3f
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d004      	beq.n	800296a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00c      	b.n	8002984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2205      	movs	r2, #5
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800299c:	4b8e      	ldr	r3, [pc, #568]	; (8002bd8 <HAL_DMA_IRQHandler+0x248>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a8e      	ldr	r2, [pc, #568]	; (8002bdc <HAL_DMA_IRQHandler+0x24c>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2208      	movs	r2, #8
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2208      	movs	r2, #8
 80029ea:	409a      	lsls	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2201      	movs	r2, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2201      	movs	r2, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2204      	movs	r2, #4
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2204      	movs	r2, #4
 8002a56:	409a      	lsls	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d043      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03c      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d024      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
 8002abe:	e01f      	b.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
 8002ad0:	e016      	b.n	8002b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0208 	bic.w	r2, r2, #8
 8002aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2220      	movs	r2, #32
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 808f 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8087 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2220      	movs	r2, #32
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d136      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0216 	bic.w	r2, r2, #22
 8002b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <HAL_DMA_IRQHandler+0x1da>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0208 	bic.w	r2, r2, #8
 8002b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	223f      	movs	r2, #63	; 0x3f
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d07e      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
        }
        return;
 8002ba6:	e079      	b.n	8002c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d031      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e02c      	b.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
 8002bd6:	bf00      	nop
 8002bd8:	20000080 	.word	0x20000080
 8002bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e01e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0210 	bic.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d032      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2205      	movs	r2, #5
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d307      	bcc.n	8002c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f2      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x2cc>
 8002c76:	e000      	b.n	8002c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e000      	b.n	8002c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c9c:	bf00      	nop
    }
  }
}
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d108      	bne.n	8002ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ce2:	e007      	b.n	8002cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3b10      	subs	r3, #16
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <DMA_CalcBaseAndBitshift+0x64>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <DMA_CalcBaseAndBitshift+0x68>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d909      	bls.n	8002d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d40:	e007      	b.n	8002d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	aaaaaaab 	.word	0xaaaaaaab
 8002d68:	0801104c 	.word	0x0801104c

08002d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11f      	bne.n	8002dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d856      	bhi.n	8002e3a <DMA_CheckFifoParam+0xce>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <DMA_CheckFifoParam+0x28>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002da5 	.word	0x08002da5
 8002d98:	08002db7 	.word	0x08002db7
 8002d9c:	08002da5 	.word	0x08002da5
 8002da0:	08002e3b 	.word	0x08002e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d046      	beq.n	8002e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e043      	b.n	8002e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dbe:	d140      	bne.n	8002e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e03d      	b.n	8002e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d121      	bne.n	8002e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d837      	bhi.n	8002e46 <DMA_CheckFifoParam+0xda>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <DMA_CheckFifoParam+0x70>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002df3 	.word	0x08002df3
 8002de4:	08002ded 	.word	0x08002ded
 8002de8:	08002e05 	.word	0x08002e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e030      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d025      	beq.n	8002e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e02:	e022      	b.n	8002e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e0c:	d11f      	bne.n	8002e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e12:	e01c      	b.n	8002e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d903      	bls.n	8002e22 <DMA_CheckFifoParam+0xb6>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e20:	e018      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      break;
 8002e26:	e015      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e00b      	b.n	8002e52 <DMA_CheckFifoParam+0xe6>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e00a      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e008      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e42:	bf00      	nop
 8002e44:	e006      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
    }
  } 
  
  return status; 
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e159      	b.n	8003134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 8148 	bne.w	800312e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d005      	beq.n	8002eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d130      	bne.n	8002f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 0201 	and.w	r2, r3, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d017      	beq.n	8002f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d123      	bne.n	8002fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a2 	beq.w	800312e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_GPIO_Init+0x2f0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x202>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x1fe>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x1fa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_GPIO_Init+0x2fc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x1f6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_GPIO_Init+0x300>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x1f2>
 8003052:	2304      	movs	r3, #4
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003056:	2307      	movs	r3, #7
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_GPIO_Init+0x304>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f aea2 	bls.w	8002e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e267      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d075      	beq.n	80032aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d00c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b85      	ldr	r3, [pc, #532]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d112      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b82      	ldr	r3, [pc, #520]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e2:	d10b      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	4b7e      	ldr	r3, [pc, #504]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05b      	beq.n	80032a8 <HAL_RCC_OscConfig+0x108>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d157      	bne.n	80032a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e242      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x74>
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b70      	ldr	r3, [pc, #448]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6f      	ldr	r2, [pc, #444]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a68      	ldr	r2, [pc, #416]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff f914 	bl	8002484 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f910 	bl	8002484 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e207      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xc0>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f900 	bl	8002484 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f8fc 	bl	8002484 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1f3      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0xe8>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c7      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4937      	ldr	r1, [pc, #220]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7ff f8b5 	bl	8002484 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff f8b1 	bl	8002484 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a8      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4925      	ldr	r1, [pc, #148]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7ff f894 	bl	8002484 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff f890 	bl	8002484 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e187      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d036      	beq.n	80033f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_RCC_OscConfig+0x248>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7ff f874 	bl	8002484 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a0:	f7ff f870 	bl	8002484 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e167      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_OscConfig+0x240>)
 80033b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x200>
 80033be:	e01b      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_OscConfig+0x248>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7ff f85d 	bl	8002484 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	e00e      	b.n	80033ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ce:	f7ff f859 	bl	8002484 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d907      	bls.n	80033ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e150      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470000 	.word	0x42470000
 80033e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ea      	bne.n	80033ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8097 	beq.w	8003534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b81      	ldr	r3, [pc, #516]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b7d      	ldr	r3, [pc, #500]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a7c      	ldr	r2, [pc, #496]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b77      	ldr	r3, [pc, #476]	; (8003614 <HAL_RCC_OscConfig+0x474>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b74      	ldr	r3, [pc, #464]	; (8003614 <HAL_RCC_OscConfig+0x474>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a73      	ldr	r2, [pc, #460]	; (8003614 <HAL_RCC_OscConfig+0x474>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7ff f819 	bl	8002484 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7ff f815 	bl	8002484 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e10c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_OscConfig+0x474>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x2ea>
 800347c:	4b64      	ldr	r3, [pc, #400]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	4a63      	ldr	r2, [pc, #396]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	; 0x70
 8003488:	e01c      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x30c>
 8003492:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
 800349e:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 80034ac:	4b58      	ldr	r3, [pc, #352]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a57      	ldr	r2, [pc, #348]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	4b55      	ldr	r3, [pc, #340]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 0304 	bic.w	r3, r3, #4
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe ffda 	bl	8002484 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe ffd6 	bl	8002484 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0cb      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ee      	beq.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe ffc4 	bl	8002484 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe ffc0 	bl	8002484 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0b5      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003516:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	4a38      	ldr	r2, [pc, #224]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a1 	beq.w	8003680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d05c      	beq.n	8003604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d141      	bne.n	80035d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCC_OscConfig+0x478>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe ff94 	bl	8002484 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe ff90 	bl	8002484 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e087      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b27      	ldr	r3, [pc, #156]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	491b      	ldr	r1, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x478>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe ff69 	bl	8002484 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe ff65 	bl	8002484 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e05c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x416>
 80035d4:	e054      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_RCC_OscConfig+0x478>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe ff52 	bl	8002484 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe ff4e 	bl	8002484 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e045      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCC_OscConfig+0x470>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
 8003602:	e03d      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e038      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x4ec>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d028      	beq.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d121      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d11a      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0cc      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d90c      	bls.n	80036cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b65      	ldr	r3, [pc, #404]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d044      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d119      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d003      	beq.n	800374e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	2b03      	cmp	r3, #3
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e067      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b37      	ldr	r3, [pc, #220]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4934      	ldr	r1, [pc, #208]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fe80 	bl	8002484 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fe7c 	bl	8002484 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d20c      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc5e 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00
 800384c:	40023800 	.word	0x40023800
 8003850:	08011034 	.word	0x08011034
 8003854:	20000080 	.word	0x20000080
 8003858:	20000084 	.word	0x20000084

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003860:	b094      	sub	sp, #80	; 0x50
 8003862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
 8003868:	2300      	movs	r3, #0
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386c:	2300      	movs	r3, #0
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4b79      	ldr	r3, [pc, #484]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d00d      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x40>
 8003880:	2b08      	cmp	r3, #8
 8003882:	f200 80e1 	bhi.w	8003a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x34>
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x3a>
 800388e:	e0db      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003894:	e0db      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003896:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800389a:	e0d8      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4b6f      	ldr	r3, [pc, #444]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80038bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
 80038c6:	2300      	movs	r3, #0
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e0:	0150      	lsls	r0, r2, #5
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4621      	mov	r1, r4
 80038e8:	1a51      	subs	r1, r2, r1
 80038ea:	6139      	str	r1, [r7, #16]
 80038ec:	4629      	mov	r1, r5
 80038ee:	eb63 0301 	sbc.w	r3, r3, r1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003900:	4659      	mov	r1, fp
 8003902:	018b      	lsls	r3, r1, #6
 8003904:	4651      	mov	r1, sl
 8003906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390a:	4651      	mov	r1, sl
 800390c:	018a      	lsls	r2, r1, #6
 800390e:	4651      	mov	r1, sl
 8003910:	ebb2 0801 	subs.w	r8, r2, r1
 8003914:	4659      	mov	r1, fp
 8003916:	eb63 0901 	sbc.w	r9, r3, r1
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392e:	4690      	mov	r8, r2
 8003930:	4699      	mov	r9, r3
 8003932:	4623      	mov	r3, r4
 8003934:	eb18 0303 	adds.w	r3, r8, r3
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	462b      	mov	r3, r5
 800393c:	eb49 0303 	adc.w	r3, r9, r3
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800394e:	4629      	mov	r1, r5
 8003950:	024b      	lsls	r3, r1, #9
 8003952:	4621      	mov	r1, r4
 8003954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003958:	4621      	mov	r1, r4
 800395a:	024a      	lsls	r2, r1, #9
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
 8003966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800396c:	f7fd f9a4 	bl	8000cb8 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	e058      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	2200      	movs	r2, #0
 8003982:	4618      	mov	r0, r3
 8003984:	4611      	mov	r1, r2
 8003986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003994:	4642      	mov	r2, r8
 8003996:	464b      	mov	r3, r9
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	0159      	lsls	r1, r3, #5
 80039a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a6:	0150      	lsls	r0, r2, #5
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4641      	mov	r1, r8
 80039ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b2:	4649      	mov	r1, r9
 80039b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039cc:	ebb2 040a 	subs.w	r4, r2, sl
 80039d0:	eb63 050b 	sbc.w	r5, r3, fp
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	00eb      	lsls	r3, r5, #3
 80039de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e2:	00e2      	lsls	r2, r4, #3
 80039e4:	4614      	mov	r4, r2
 80039e6:	461d      	mov	r5, r3
 80039e8:	4643      	mov	r3, r8
 80039ea:	18e3      	adds	r3, r4, r3
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	464b      	mov	r3, r9
 80039f0:	eb45 0303 	adc.w	r3, r5, r3
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a02:	4629      	mov	r1, r5
 8003a04:	028b      	lsls	r3, r1, #10
 8003a06:	4621      	mov	r1, r4
 8003a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	028a      	lsls	r2, r1, #10
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a16:	2200      	movs	r2, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	61fa      	str	r2, [r7, #28]
 8003a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a20:	f7fd f94a 	bl	8000cb8 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	3301      	adds	r3, #1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3750      	adds	r7, #80	; 0x50
 8003a54:	46bd      	mov	sp, r7
 8003a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	007a1200 	.word	0x007a1200

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000080 	.word	0x20000080

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08011044 	.word	0x08011044

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aac:	f7ff ffdc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08011044 	.word	0x08011044

08003ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	220f      	movs	r2, #15
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_GetClockConfig+0x5c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_RCC_GetClockConfig+0x5c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_GetClockConfig+0x5c>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_GetClockConfig+0x5c>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	08db      	lsrs	r3, r3, #3
 8003b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_RCC_GetClockConfig+0x60>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0207 	and.w	r2, r3, #7
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40023c00 	.word	0x40023c00

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e041      	b.n	8003bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe f94e 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 fc96 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d001      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e044      	b.n	8003c76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x6c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d013      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x6c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x6c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_TIM_Base_Start_IT+0xb8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x6c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x6c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d010      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	e007      	b.n	8003c74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe f8c4 	bl	8001e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fbe4 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <HAL_TIM_PWM_Start+0x24>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e022      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d109      	bne.n	8003d76 <HAL_TIM_PWM_Start+0x3e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	e015      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d109      	bne.n	8003d90 <HAL_TIM_PWM_Start+0x58>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e008      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e068      	b.n	8003e7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Start+0x82>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start+0x92>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fe0c 	bl	8004a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_TIM_PWM_Start+0x14c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_TIM_PWM_Start+0x14c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x10e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d013      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x10e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_TIM_PWM_Start+0x150>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x10e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_TIM_PWM_Start+0x154>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x10e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_TIM_PWM_Start+0x158>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x10e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_TIM_PWM_Start+0x15c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d111      	bne.n	8003e6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d010      	beq.n	8003e7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	e007      	b.n	8003e7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	6839      	ldr	r1, [r7, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fdac 	bl	8004a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <HAL_TIM_PWM_Stop+0xc4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d117      	bne.n	8003eea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_TIM_PWM_Stop+0x52>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_TIM_PWM_Stop+0x52>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_TIM_PWM_Stop+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	f240 4344 	movw	r3, #1092	; 0x444
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_PWM_Stop+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_PWM_Stop+0x92>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f28:	e013      	b.n	8003f52 <HAL_TIM_PWM_Stop+0xba>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Stop+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	e00b      	b.n	8003f52 <HAL_TIM_PWM_Stop+0xba>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Stop+0xb2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f48:	e003      	b.n	8003f52 <HAL_TIM_PWM_Stop+0xba>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40010000 	.word	0x40010000

08003f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0202 	mvn.w	r2, #2
 8003f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa5b 	bl	8004466 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa4d 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa5e 	bl	800447a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0204 	mvn.w	r2, #4
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa35 	bl	8004466 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa27 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa38 	bl	800447a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0208 	mvn.w	r2, #8
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa0f 	bl	8004466 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa01 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa12 	bl	800447a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d020      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0210 	mvn.w	r2, #16
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9e9 	bl	8004466 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9db 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f9ec 	bl	800447a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0201 	mvn.w	r2, #1
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fc36 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fd7c 	bl	8004be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9bd 	bl	800448e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0220 	mvn.w	r2, #32
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fd4e 	bl	8004bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800415a:	2302      	movs	r3, #2
 800415c:	e0ae      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	f200 809f 	bhi.w	80042ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080042ad 	.word	0x080042ad
 800417c:	080042ad 	.word	0x080042ad
 8004180:	080042ad 	.word	0x080042ad
 8004184:	080041e9 	.word	0x080041e9
 8004188:	080042ad 	.word	0x080042ad
 800418c:	080042ad 	.word	0x080042ad
 8004190:	080042ad 	.word	0x080042ad
 8004194:	0800422b 	.word	0x0800422b
 8004198:	080042ad 	.word	0x080042ad
 800419c:	080042ad 	.word	0x080042ad
 80041a0:	080042ad 	.word	0x080042ad
 80041a4:	0800426b 	.word	0x0800426b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fa04 	bl	80045bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0204 	bic.w	r2, r2, #4
 80041d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6999      	ldr	r1, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	619a      	str	r2, [r3, #24]
      break;
 80041e6:	e064      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fa4a 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	619a      	str	r2, [r3, #24]
      break;
 8004228:	e043      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa95 	bl	8004760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0208 	orr.w	r2, r2, #8
 8004244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	61da      	str	r2, [r3, #28]
      break;
 8004268:	e023      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fadf 	bl	8004834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	021a      	lsls	r2, r3, #8
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	61da      	str	r2, [r3, #28]
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0b4      	b.n	800444a <HAL_TIM_ConfigClockSource+0x186>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d03e      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xd4>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	f200 8087 	bhi.w	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	f000 8086 	beq.w	8004436 <HAL_TIM_ConfigClockSource+0x172>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d87f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b70      	cmp	r3, #112	; 0x70
 8004332:	d01a      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xa6>
 8004334:	2b70      	cmp	r3, #112	; 0x70
 8004336:	d87b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b60      	cmp	r3, #96	; 0x60
 800433a:	d050      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x11a>
 800433c:	2b60      	cmp	r3, #96	; 0x60
 800433e:	d877      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b50      	cmp	r3, #80	; 0x50
 8004342:	d03c      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xfa>
 8004344:	2b50      	cmp	r3, #80	; 0x50
 8004346:	d873      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d058      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x13a>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d86f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d064      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d86b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d060      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d867      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d05a      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	e062      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	f000 fb25 	bl	80049c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800438c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	609a      	str	r2, [r3, #8]
      break;
 8004396:	e04f      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	f000 fb0e 	bl	80049c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ba:	609a      	str	r2, [r3, #8]
      break;
 80043bc:	e03c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 fa82 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2150      	movs	r1, #80	; 0x50
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fadb 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e02c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 faa1 	bl	8004932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2160      	movs	r1, #96	; 0x60
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 facb 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e01c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	461a      	mov	r2, r3
 800440c:	f000 fa62 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fabb 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 800441c:	e00c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 fab2 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 800442e:	e003      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e000      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <TIM_Base_SetConfig+0xfc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00f      	beq.n	80044dc <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d00b      	beq.n	80044dc <TIM_Base_SetConfig+0x38>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a37      	ldr	r2, [pc, #220]	; (80045a4 <TIM_Base_SetConfig+0x100>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0x38>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <TIM_Base_SetConfig+0x104>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0x38>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a35      	ldr	r2, [pc, #212]	; (80045ac <TIM_Base_SetConfig+0x108>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <TIM_Base_SetConfig+0xfc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01b      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d017      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <TIM_Base_SetConfig+0x100>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_Base_SetConfig+0x104>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <TIM_Base_SetConfig+0x108>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <TIM_Base_SetConfig+0x10c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <TIM_Base_SetConfig+0x110>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <TIM_Base_SetConfig+0x114>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <TIM_Base_SetConfig+0xfc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	611a      	str	r2, [r3, #16]
  }
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 0201 	bic.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0302 	bic.w	r3, r3, #2
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <TIM_OC1_SetConfig+0xc8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10c      	bne.n	8004632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0308 	bic.w	r3, r3, #8
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <TIM_OC1_SetConfig+0xc8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d111      	bne.n	800465e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	40010000 	.word	0x40010000

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0210 	bic.w	r2, r3, #16
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0320 	bic.w	r3, r3, #32
 80046d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <TIM_OC2_SetConfig+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10d      	bne.n	8004704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <TIM_OC2_SetConfig+0xd4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d113      	bne.n	8004734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000

08004760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <TIM_OC3_SetConfig+0xd0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10d      	bne.n	80047da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <TIM_OC3_SetConfig+0xd0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d113      	bne.n	800480a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40010000 	.word	0x40010000

08004834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <TIM_OC4_SetConfig+0x9c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d109      	bne.n	80048a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000

080048d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0201 	bic.w	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 030a 	bic.w	r3, r3, #10
 8004910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f023 0210 	bic.w	r2, r3, #16
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800495c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	031b      	lsls	r3, r3, #12
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800496e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f043 0307 	orr.w	r3, r3, #7
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	609a      	str	r2, [r3, #8]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1a      	ldr	r2, [r3, #32]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e050      	b.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10c      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40014000 	.word	0x40014000

08004b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e03d      	b.n	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e042      	b.n	8004c94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd f990 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2224      	movs	r2, #36	; 0x24
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 ff85 	bl	8005b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d175      	bne.n	8004da8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Transmit+0x2c>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e06e      	b.n	8004daa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2221      	movs	r2, #33	; 0x21
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cda:	f7fd fbd3 	bl	8002484 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	88fa      	ldrh	r2, [r7, #6]
 8004cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d108      	bne.n	8004d08 <HAL_UART_Transmit+0x6c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d10:	e02e      	b.n	8004d70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fc5d 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e03a      	b.n	8004daa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e007      	b.n	8004d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1cb      	bne.n	8004d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2140      	movs	r1, #64	; 0x40
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fc29 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08c      	sub	sp, #48	; 0x30
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d14a      	bne.n	8004e62 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e043      	b.n	8004e64 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fc4e 	bl	8005690 <UART_Start_Receive_DMA>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d12c      	bne.n	8004e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d125      	bne.n	8004e56 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f043 0310 	orr.w	r3, r3, #16
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e40:	627a      	str	r2, [r7, #36]	; 0x24
 8004e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004e54:	e002      	b.n	8004e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e60:	e000      	b.n	8004e64 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3730      	adds	r7, #48	; 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b0ba      	sub	sp, #232	; 0xe8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x66>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fd81 	bl	80059d2 <UART_Receive_IT>
      return;
 8004ed0:	e25b      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80de 	beq.w	8005098 <HAL_UART_IRQHandler+0x22c>
 8004edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80d1 	beq.w	8005098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_UART_IRQHandler+0xae>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xd2>
 8004f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f043 0202 	orr.w	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xf6>
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f043 0204 	orr.w	r2, r3, #4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <HAL_UART_IRQHandler+0x126>
 8004f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d105      	bne.n	8004f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 81f2 	beq.w	8005380 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x14e>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fd0c 	bl	80059d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x17a>
 8004fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04f      	beq.n	8005086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fc14 	bl	8005814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d141      	bne.n	800507e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800502a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800503e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1d9      	bne.n	8004ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d013      	beq.n	8005076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	4a7e      	ldr	r2, [pc, #504]	; (800524c <HAL_UART_IRQHandler+0x3e0>)
 8005054:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	4618      	mov	r0, r3
 800505c:	f7fd fc76 	bl	800294c <HAL_DMA_Abort_IT>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00e      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9a8 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e00a      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9a4 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e006      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f9a0 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005092:	e175      	b.n	8005380 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	bf00      	nop
    return;
 8005096:	e173      	b.n	8005380 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	f040 814f 	bne.w	8005340 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8148 	beq.w	8005340 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8141 	beq.w	8005340 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	f040 80b6 	bne.w	8005250 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8145 	beq.w	8005384 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005102:	429a      	cmp	r2, r3
 8005104:	f080 813e 	bcs.w	8005384 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	f000 8088 	beq.w	800522e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800514a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d9      	bne.n	800511e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800517a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800518e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e1      	bne.n	800516a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3314      	adds	r3, #20
 80051ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	f023 0310 	bic.w	r3, r3, #16
 8005202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005210:	65ba      	str	r2, [r7, #88]	; 0x58
 8005212:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e3      	bne.n	80051ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	4618      	mov	r0, r3
 800522a:	f7fd fb1f 	bl	800286c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800523c:	b29b      	uxth	r3, r3
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fac3 	bl	80017d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800524a:	e09b      	b.n	8005384 <HAL_UART_IRQHandler+0x518>
 800524c:	080058db 	.word	0x080058db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 808e 	beq.w	8005388 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800526c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8089 	beq.w	8005388 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800528c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800529a:	647a      	str	r2, [r7, #68]	; 0x44
 800529c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	623b      	str	r3, [r7, #32]
   return(result);
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052d2:	633a      	str	r2, [r7, #48]	; 0x30
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	60fb      	str	r3, [r7, #12]
   return(result);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005318:	61fa      	str	r2, [r7, #28]
 800531a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	617b      	str	r3, [r7, #20]
   return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e3      	bne.n	80052f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc fa49 	bl	80017d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800533e:	e023      	b.n	8005388 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <HAL_UART_IRQHandler+0x4f4>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fad2 	bl	8005902 <UART_Transmit_IT>
    return;
 800535e:	e014      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <HAL_UART_IRQHandler+0x51e>
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb12 	bl	80059a2 <UART_EndTransmit_IT>
    return;
 800537e:	e004      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
    return;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
      return;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
      return;
 8005388:	bf00      	nop
  }
}
 800538a:	37e8      	adds	r7, #232	; 0xe8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b09c      	sub	sp, #112	; 0x70
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d172      	bne.n	80054e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	2200      	movs	r2, #0
 8005400:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	66bb      	str	r3, [r7, #104]	; 0x68
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005422:	65ba      	str	r2, [r7, #88]	; 0x58
 8005424:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	667b      	str	r3, [r7, #100]	; 0x64
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005456:	647a      	str	r2, [r7, #68]	; 0x44
 8005458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800545c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	623b      	str	r3, [r7, #32]
   return(result);
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005480:	663b      	str	r3, [r7, #96]	; 0x60
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800548a:	633a      	str	r2, [r7, #48]	; 0x30
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e5      	bne.n	800546a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d119      	bne.n	80054e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0310 	bic.w	r3, r3, #16
 80054c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ce:	61fa      	str	r2, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	617b      	str	r3, [r7, #20]
   return(result);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e4:	2200      	movs	r2, #0
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054f4:	4619      	mov	r1, r3
 80054f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054f8:	f7fc f96a 	bl	80017d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054fc:	e002      	b.n	8005504 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80054fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005500:	f7ff ff50 	bl	80053a4 <HAL_UART_RxCpltCallback>
}
 8005504:	bf00      	nop
 8005506:	3770      	adds	r7, #112	; 0x70
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d108      	bne.n	800553a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	4619      	mov	r1, r3
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7fc f94c 	bl	80017d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005538:	e002      	b.n	8005540 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff3c 	bl	80053b8 <HAL_UART_RxHalfCpltCallback>
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b21      	cmp	r3, #33	; 0x21
 800557a:	d108      	bne.n	800558e <UART_DMAError+0x46>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2200      	movs	r2, #0
 8005586:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005588:	68b8      	ldr	r0, [r7, #8]
 800558a:	f000 f91b 	bl	80057c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b22      	cmp	r3, #34	; 0x22
 80055ae:	d108      	bne.n	80055c2 <UART_DMAError+0x7a>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2200      	movs	r2, #0
 80055ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f000 f929 	bl	8005814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	f043 0210 	orr.w	r2, r3, #16
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055ce:	68b8      	ldr	r0, [r7, #8]
 80055d0:	f7ff fefc 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	e03b      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f4:	d037      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fc ff45 	bl	8002484 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x30>
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e03a      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d023      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	d020      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d01d      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d116      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f8e0 	bl	8005814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2208      	movs	r2, #8
 8005658:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e00f      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d0b4      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b098      	sub	sp, #96	; 0x60
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2222      	movs	r2, #34	; 0x22
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	4a3e      	ldr	r2, [pc, #248]	; (80057b8 <UART_Start_Receive_DMA+0x128>)
 80056be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c4:	4a3d      	ldr	r2, [pc, #244]	; (80057bc <UART_Start_Receive_DMA+0x12c>)
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	4a3c      	ldr	r2, [pc, #240]	; (80057c0 <UART_Start_Receive_DMA+0x130>)
 80056ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	2200      	movs	r2, #0
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	f7fd f864 	bl	80027bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	65bb      	str	r3, [r7, #88]	; 0x58
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005732:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e5      	bne.n	8005712 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	657b      	str	r3, [r7, #84]	; 0x54
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005766:	63ba      	str	r2, [r7, #56]	; 0x38
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800576c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	617b      	str	r3, [r7, #20]
   return(result);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800579a:	627a      	str	r2, [r7, #36]	; 0x24
 800579c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6a39      	ldr	r1, [r7, #32]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3760      	adds	r7, #96	; 0x60
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	080053e1 	.word	0x080053e1
 80057bc:	0800550d 	.word	0x0800550d
 80057c0:	08005549 	.word	0x08005549

080057c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60bb      	str	r3, [r7, #8]
   return(result);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	61ba      	str	r2, [r7, #24]
 80057ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005808:	bf00      	nop
 800580a:	3724      	adds	r7, #36	; 0x24
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b095      	sub	sp, #84	; 0x54
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800583c:	643a      	str	r2, [r7, #64]	; 0x40
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d119      	bne.n	80058c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60bb      	str	r3, [r7, #8]
   return(result);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ac:	61ba      	str	r2, [r7, #24]
 80058ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058ce:	bf00      	nop
 80058d0:	3754      	adds	r7, #84	; 0x54
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fd69 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b21      	cmp	r3, #33	; 0x21
 8005914:	d13e      	bne.n	8005994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	d114      	bne.n	800594a <UART_Transmit_IT+0x48>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	1c9a      	adds	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]
 8005948:	e008      	b.n	800595c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6211      	str	r1, [r2, #32]
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4619      	mov	r1, r3
 800596a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fce4 	bl	8005390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b08c      	sub	sp, #48	; 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b22      	cmp	r3, #34	; 0x22
 80059e4:	f040 80ae 	bne.w	8005b44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d117      	bne.n	8005a22 <UART_Receive_IT+0x50>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d113      	bne.n	8005a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a20:	e026      	b.n	8005a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d007      	beq.n	8005a46 <UART_Receive_IT+0x74>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <UART_Receive_IT+0x82>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e008      	b.n	8005a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d15d      	bne.n	8005b40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0220 	bic.w	r2, r2, #32
 8005a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d135      	bne.n	8005b36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 0310 	bic.w	r3, r3, #16
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	623a      	str	r2, [r7, #32]
 8005af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d10a      	bne.n	8005b28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fe4e 	bl	80017d0 <HAL_UARTEx_RxEventCallback>
 8005b34:	e002      	b.n	8005b3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fc34 	bl	80053a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e002      	b.n	8005b46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3730      	adds	r7, #48	; 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b54:	b0c0      	sub	sp, #256	; 0x100
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6c:	68d9      	ldr	r1, [r3, #12]
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	ea40 0301 	orr.w	r3, r0, r1
 8005b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ba8:	f021 010c 	bic.w	r1, r1, #12
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	6999      	ldr	r1, [r3, #24]
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	ea40 0301 	orr.w	r3, r0, r1
 8005bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8f      	ldr	r3, [pc, #572]	; (8005e1c <UART_SetConfig+0x2cc>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d005      	beq.n	8005bf0 <UART_SetConfig+0xa0>
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b8d      	ldr	r3, [pc, #564]	; (8005e20 <UART_SetConfig+0x2d0>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d104      	bne.n	8005bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fd ff5a 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bf8:	e003      	b.n	8005c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fd ff41 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	f040 810c 	bne.w	8005e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	1891      	adds	r1, r2, r2
 8005c28:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c2a:	415b      	adcs	r3, r3
 8005c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c32:	4621      	mov	r1, r4
 8005c34:	eb12 0801 	adds.w	r8, r2, r1
 8005c38:	4629      	mov	r1, r5
 8005c3a:	eb43 0901 	adc.w	r9, r3, r1
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c52:	4690      	mov	r8, r2
 8005c54:	4699      	mov	r9, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	eb18 0303 	adds.w	r3, r8, r3
 8005c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c60:	462b      	mov	r3, r5
 8005c62:	eb49 0303 	adc.w	r3, r9, r3
 8005c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c7e:	460b      	mov	r3, r1
 8005c80:	18db      	adds	r3, r3, r3
 8005c82:	653b      	str	r3, [r7, #80]	; 0x50
 8005c84:	4613      	mov	r3, r2
 8005c86:	eb42 0303 	adc.w	r3, r2, r3
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c94:	f7fb f810 	bl	8000cb8 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4b61      	ldr	r3, [pc, #388]	; (8005e24 <UART_SetConfig+0x2d4>)
 8005c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	011c      	lsls	r4, r3, #4
 8005ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cc8:	4641      	mov	r1, r8
 8005cca:	eb12 0a01 	adds.w	sl, r2, r1
 8005cce:	4649      	mov	r1, r9
 8005cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce8:	4692      	mov	sl, r2
 8005cea:	469b      	mov	fp, r3
 8005cec:	4643      	mov	r3, r8
 8005cee:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8005cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d14:	460b      	mov	r3, r1
 8005d16:	18db      	adds	r3, r3, r3
 8005d18:	643b      	str	r3, [r7, #64]	; 0x40
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
 8005d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d2a:	f7fa ffc5 	bl	8000cb8 <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	4b3b      	ldr	r3, [pc, #236]	; (8005e24 <UART_SetConfig+0x2d4>)
 8005d36:	fba3 2301 	umull	r2, r3, r3, r1
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2264      	movs	r2, #100	; 0x64
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	1acb      	subs	r3, r1, r3
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d4a:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <UART_SetConfig+0x2d4>)
 8005d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d58:	441c      	add	r4, r3
 8005d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	1891      	adds	r1, r2, r2
 8005d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d74:	415b      	adcs	r3, r3
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	1851      	adds	r1, r2, r1
 8005d80:	6339      	str	r1, [r7, #48]	; 0x30
 8005d82:	4649      	mov	r1, r9
 8005d84:	414b      	adcs	r3, r1
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d94:	4659      	mov	r1, fp
 8005d96:	00cb      	lsls	r3, r1, #3
 8005d98:	4651      	mov	r1, sl
 8005d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9e:	4651      	mov	r1, sl
 8005da0:	00ca      	lsls	r2, r1, #3
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	4642      	mov	r2, r8
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db0:	464b      	mov	r3, r9
 8005db2:	460a      	mov	r2, r1
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	18db      	adds	r3, r3, r3
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005de6:	f7fa ff67 	bl	8000cb8 <__aeabi_uldivmod>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <UART_SetConfig+0x2d4>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2164      	movs	r1, #100	; 0x64
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	3332      	adds	r3, #50	; 0x32
 8005e02:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <UART_SetConfig+0x2d4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 0207 	and.w	r2, r3, #7
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4422      	add	r2, r4
 8005e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e18:	e106      	b.n	8006028 <UART_SetConfig+0x4d8>
 8005e1a:	bf00      	nop
 8005e1c:	40011000 	.word	0x40011000
 8005e20:	40011400 	.word	0x40011400
 8005e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	1891      	adds	r1, r2, r2
 8005e40:	6239      	str	r1, [r7, #32]
 8005e42:	415b      	adcs	r3, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	1854      	adds	r4, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb43 0501 	adc.w	r5, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	00eb      	lsls	r3, r5, #3
 8005e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e62:	00e2      	lsls	r2, r4, #3
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	4643      	mov	r3, r8
 8005e6a:	18e3      	adds	r3, r4, r3
 8005e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e70:	464b      	mov	r3, r9
 8005e72:	eb45 0303 	adc.w	r3, r5, r3
 8005e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e96:	4629      	mov	r1, r5
 8005e98:	008b      	lsls	r3, r1, #2
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	008a      	lsls	r2, r1, #2
 8005ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ea8:	f7fa ff06 	bl	8000cb8 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4b60      	ldr	r3, [pc, #384]	; (8006034 <UART_SetConfig+0x4e4>)
 8005eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	011c      	lsls	r4, r3, #4
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	61b9      	str	r1, [r7, #24]
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005edc:	4641      	mov	r1, r8
 8005ede:	1851      	adds	r1, r2, r1
 8005ee0:	6139      	str	r1, [r7, #16]
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	414b      	adcs	r3, r1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	00cb      	lsls	r3, r1, #3
 8005ef8:	4651      	mov	r1, sl
 8005efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efe:	4651      	mov	r1, sl
 8005f00:	00ca      	lsls	r2, r1, #3
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	4642      	mov	r2, r8
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f34:	4649      	mov	r1, r9
 8005f36:	008b      	lsls	r3, r1, #2
 8005f38:	4641      	mov	r1, r8
 8005f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3e:	4641      	mov	r1, r8
 8005f40:	008a      	lsls	r2, r1, #2
 8005f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f46:	f7fa feb7 	bl	8000cb8 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <UART_SetConfig+0x4e4>)
 8005f52:	fba3 2301 	umull	r2, r3, r3, r1
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2264      	movs	r2, #100	; 0x64
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	1acb      	subs	r3, r1, r3
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	3332      	adds	r3, #50	; 0x32
 8005f64:	4a33      	ldr	r2, [pc, #204]	; (8006034 <UART_SetConfig+0x4e4>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f70:	441c      	add	r4, r3
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	673b      	str	r3, [r7, #112]	; 0x70
 8005f7a:	677a      	str	r2, [r7, #116]	; 0x74
 8005f7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f90:	4641      	mov	r1, r8
 8005f92:	1851      	adds	r1, r2, r1
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	4649      	mov	r1, r9
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	00cb      	lsls	r3, r1, #3
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	00ca      	lsls	r2, r1, #3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	460a      	mov	r2, r1
 8005fc6:	eb42 0303 	adc.w	r3, r2, r3
 8005fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd6:	667a      	str	r2, [r7, #100]	; 0x64
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	008b      	lsls	r3, r1, #2
 8005fe8:	4641      	mov	r1, r8
 8005fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fee:	4641      	mov	r1, r8
 8005ff0:	008a      	lsls	r2, r1, #2
 8005ff2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ff6:	f7fa fe5f 	bl	8000cb8 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <UART_SetConfig+0x4e4>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <UART_SetConfig+0x4e4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4422      	add	r2, r4
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800602e:	46bd      	mov	sp, r7
 8006030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006034:	51eb851f 	.word	0x51eb851f

08006038 <__NVIC_SetPriority>:
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	6039      	str	r1, [r7, #0]
 8006042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db0a      	blt.n	8006062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	490c      	ldr	r1, [pc, #48]	; (8006084 <__NVIC_SetPriority+0x4c>)
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	440b      	add	r3, r1
 800605c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006060:	e00a      	b.n	8006078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4908      	ldr	r1, [pc, #32]	; (8006088 <__NVIC_SetPriority+0x50>)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3b04      	subs	r3, #4
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	440b      	add	r3, r1
 8006076:	761a      	strb	r2, [r3, #24]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000e100 	.word	0xe000e100
 8006088:	e000ed00 	.word	0xe000ed00

0800608c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <SysTick_Handler+0x1c>)
 8006092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006094:	f002 fa88 	bl	80085a8 <xTaskGetSchedulerState>
 8006098:	4603      	mov	r3, r0
 800609a:	2b01      	cmp	r3, #1
 800609c:	d001      	beq.n	80060a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800609e:	f003 f8ab 	bl	80091f8 <xPortSysTickHandler>
  }
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	e000e010 	.word	0xe000e010

080060ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060b0:	2100      	movs	r1, #0
 80060b2:	f06f 0004 	mvn.w	r0, #4
 80060b6:	f7ff ffbf 	bl	8006038 <__NVIC_SetPriority>
#endif
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	603b      	str	r3, [r7, #0]
  return(result);
 80060cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060d2:	f06f 0305 	mvn.w	r3, #5
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e00c      	b.n	80060f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <osKernelInitialize+0x44>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <osKernelInitialize+0x44>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	e002      	b.n	80060f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060f4:	687b      	ldr	r3, [r7, #4]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000aa8 	.word	0x20000aa8

08006108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	603b      	str	r3, [r7, #0]
  return(result);
 8006114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800611a:	f06f 0305 	mvn.w	r3, #5
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	e010      	b.n	8006144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <osKernelStart+0x48>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d109      	bne.n	800613e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800612a:	f7ff ffbf 	bl	80060ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <osKernelStart+0x48>)
 8006130:	2202      	movs	r2, #2
 8006132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006134:	f001 fd3e 	bl	8007bb4 <vTaskStartScheduler>
      stat = osOK;
 8006138:	2300      	movs	r3, #0
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e002      	b.n	8006144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006144:	687b      	ldr	r3, [r7, #4]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000aa8 	.word	0x20000aa8

08006154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	; 0x38
 8006158:	af04      	add	r7, sp, #16
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006164:	f3ef 8305 	mrs	r3, IPSR
 8006168:	617b      	str	r3, [r7, #20]
  return(result);
 800616a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800616c:	2b00      	cmp	r3, #0
 800616e:	d17e      	bne.n	800626e <osThreadNew+0x11a>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07b      	beq.n	800626e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800617a:	2318      	movs	r3, #24
 800617c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d045      	beq.n	800621a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <osThreadNew+0x48>
        name = attr->name;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <osThreadNew+0x6e>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b38      	cmp	r3, #56	; 0x38
 80061b4:	d805      	bhi.n	80061c2 <osThreadNew+0x6e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <osThreadNew+0x72>
        return (NULL);
 80061c2:	2300      	movs	r3, #0
 80061c4:	e054      	b.n	8006270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <osThreadNew+0xa8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2ba7      	cmp	r3, #167	; 0xa7
 80061e4:	d90a      	bls.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <osThreadNew+0xa8>
        mem = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e010      	b.n	800621e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <osThreadNew+0xca>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <osThreadNew+0xca>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <osThreadNew+0xca>
          mem = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e001      	b.n	800621e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d110      	bne.n	8006246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800622c:	9202      	str	r2, [sp, #8]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 face 	bl	80077dc <xTaskCreateStatic>
 8006240:	4603      	mov	r3, r0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e013      	b.n	800626e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d110      	bne.n	800626e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b29a      	uxth	r2, r3
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 fb19 	bl	8007896 <xTaskCreate>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d001      	beq.n	800626e <osThreadNew+0x11a>
            hTask = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800626e:	693b      	ldr	r3, [r7, #16]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	; 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006280:	f3ef 8305 	mrs	r3, IPSR
 8006284:	60bb      	str	r3, [r7, #8]
  return(result);
 8006286:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <osDelay+0x1c>
    stat = osErrorISR;
 800628c:	f06f 0305 	mvn.w	r3, #5
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e007      	b.n	80062a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fc54 	bl	8007b4c <vTaskDelay>
    }
  }

  return (stat);
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b086      	sub	sp, #24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ba:	f3ef 8305 	mrs	r3, IPSR
 80062be:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d12d      	bne.n	8006322 <osEventFlagsNew+0x74>
    mem = -1;
 80062c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ca:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d015      	beq.n	80062fe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <osEventFlagsNew+0x3a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b1f      	cmp	r3, #31
 80062e0:	d902      	bls.n	80062e8 <osEventFlagsNew+0x3a>
        mem = 1;
 80062e2:	2301      	movs	r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e00c      	b.n	8006302 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <osEventFlagsNew+0x54>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <osEventFlagsNew+0x54>
          mem = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	e001      	b.n	8006302 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d106      	bne.n	8006316 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fa1d 	bl	800674c <xEventGroupCreateStatic>
 8006312:	6178      	str	r0, [r7, #20]
 8006314:	e005      	b.n	8006322 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800631c:	f000 fa4d 	bl	80067ba <xEventGroupCreate>
 8006320:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <osEventFlagsSet+0x1e>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800634a:	f06f 0303 	mvn.w	r3, #3
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e028      	b.n	80063a4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006352:	f3ef 8305 	mrs	r3, IPSR
 8006356:	60fb      	str	r3, [r7, #12]
  return(result);
 8006358:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01d      	beq.n	800639a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	461a      	mov	r2, r3
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6938      	ldr	r0, [r7, #16]
 800636c:	f000 fbc8 	bl	8006b00 <xEventGroupSetBitsFromISR>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006376:	f06f 0302 	mvn.w	r3, #2
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e012      	b.n	80063a4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <osEventFlagsSet+0x78>
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <osEventFlagsSet+0x84>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e004      	b.n	80063a4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6938      	ldr	r0, [r7, #16]
 800639e:	f000 faf5 	bl	800698c <xEventGroupSetBits>
 80063a2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80063a4:	697b      	ldr	r3, [r7, #20]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <osEventFlagsWait+0x22>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80063d6:	f06f 0303 	mvn.w	r3, #3
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e04b      	b.n	8006476 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063de:	f3ef 8305 	mrs	r3, IPSR
 80063e2:	617b      	str	r3, [r7, #20]
  return(result);
 80063e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80063ea:	f06f 0305 	mvn.w	r3, #5
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e041      	b.n	8006476 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	e001      	b.n	8006406 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006410:	2300      	movs	r3, #0
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	e001      	b.n	800641a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006416:	2301      	movs	r3, #1
 8006418:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	69b8      	ldr	r0, [r7, #24]
 8006426:	f000 f9e3 	bl	80067f0 <xEventGroupWaitBits>
 800642a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4013      	ands	r3, r2
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d019      	beq.n	8006476 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8006448:	f06f 0301 	mvn.w	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	e012      	b.n	8006476 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006450:	f06f 0302 	mvn.w	r3, #2
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e00e      	b.n	8006476 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8006468:	f06f 0301 	mvn.w	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e002      	b.n	8006476 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006470:	f06f 0302 	mvn.w	r3, #2
 8006474:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006476:	69fb      	ldr	r3, [r7, #28]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3728      	adds	r7, #40	; 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	; 0x28
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006490:	f3ef 8305 	mrs	r3, IPSR
 8006494:	613b      	str	r3, [r7, #16]
  return(result);
 8006496:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006498:	2b00      	cmp	r3, #0
 800649a:	d15f      	bne.n	800655c <osMessageQueueNew+0xdc>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d05c      	beq.n	800655c <osMessageQueueNew+0xdc>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d059      	beq.n	800655c <osMessageQueueNew+0xdc>
    mem = -1;
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d029      	beq.n	8006508 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d012      	beq.n	80064e2 <osMessageQueueNew+0x62>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b4f      	cmp	r3, #79	; 0x4f
 80064c2:	d90e      	bls.n	80064e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <osMessageQueueNew+0x62>
        mem = 1;
 80064dc:	2301      	movs	r3, #1
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	e014      	b.n	800650c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d110      	bne.n	800650c <osMessageQueueNew+0x8c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10c      	bne.n	800650c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <osMessageQueueNew+0x8c>
          mem = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e001      	b.n	800650c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10b      	bne.n	800652a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2100      	movs	r1, #0
 800651c:	9100      	str	r1, [sp, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fc1d 	bl	8006d60 <xQueueGenericCreateStatic>
 8006526:	61f8      	str	r0, [r7, #28]
 8006528:	e008      	b.n	800653c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006530:	2200      	movs	r2, #0
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fc8b 	bl	8006e50 <xQueueGenericCreate>
 800653a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e001      	b.n	8006554 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006554:	6979      	ldr	r1, [r7, #20]
 8006556:	69f8      	ldr	r0, [r7, #28]
 8006558:	f001 f8e2 	bl	8007720 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800655c:	69fb      	ldr	r3, [r7, #28]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800657c:	2300      	movs	r3, #0
 800657e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006580:	f3ef 8305 	mrs	r3, IPSR
 8006584:	617b      	str	r3, [r7, #20]
  return(result);
 8006586:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006588:	2b00      	cmp	r3, #0
 800658a:	d028      	beq.n	80065de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <osMessageQueuePut+0x36>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <osMessageQueuePut+0x36>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800659e:	f06f 0303 	mvn.w	r3, #3
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e038      	b.n	8006618 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065aa:	f107 0210 	add.w	r2, r7, #16
 80065ae:	2300      	movs	r3, #0
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	69b8      	ldr	r0, [r7, #24]
 80065b4:	f000 fda8 	bl	8007108 <xQueueGenericSendFromISR>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d003      	beq.n	80065c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80065be:	f06f 0302 	mvn.w	r3, #2
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	e028      	b.n	8006618 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d025      	beq.n	8006618 <osMessageQueuePut+0xb0>
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <osMessageQueuePut+0xbc>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	e01c      	b.n	8006618 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <osMessageQueuePut+0x82>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80065ea:	f06f 0303 	mvn.w	r3, #3
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e012      	b.n	8006618 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065f2:	2300      	movs	r3, #0
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	69b8      	ldr	r0, [r7, #24]
 80065fa:	f000 fc87 	bl	8006f0c <xQueueGenericSend>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d009      	beq.n	8006618 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e002      	b.n	8006618 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006612:	f06f 0302 	mvn.w	r3, #2
 8006616:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006618:	69fb      	ldr	r3, [r7, #28]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663e:	f3ef 8305 	mrs	r3, IPSR
 8006642:	617b      	str	r3, [r7, #20]
  return(result);
 8006644:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006646:	2b00      	cmp	r3, #0
 8006648:	d028      	beq.n	800669c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <osMessageQueueGet+0x34>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <osMessageQueueGet+0x34>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800665c:	f06f 0303 	mvn.w	r3, #3
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	e037      	b.n	80066d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006668:	f107 0310 	add.w	r3, r7, #16
 800666c:	461a      	mov	r2, r3
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	69b8      	ldr	r0, [r7, #24]
 8006672:	f000 fec5 	bl	8007400 <xQueueReceiveFromISR>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d003      	beq.n	8006684 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800667c:	f06f 0302 	mvn.w	r3, #2
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	e027      	b.n	80066d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d024      	beq.n	80066d4 <osMessageQueueGet+0xac>
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <osMessageQueueGet+0xb8>)
 800668c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	e01b      	b.n	80066d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <osMessageQueueGet+0x80>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80066a8:	f06f 0303 	mvn.w	r3, #3
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e011      	b.n	80066d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	69b8      	ldr	r0, [r7, #24]
 80066b6:	f000 fdc3 	bl	8007240 <xQueueReceive>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d009      	beq.n	80066d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80066c6:	f06f 0301 	mvn.w	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	e002      	b.n	80066d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80066d4:	69fb      	ldr	r3, [r7, #28]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a07      	ldr	r2, [pc, #28]	; (8006710 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a06      	ldr	r2, [pc, #24]	; (8006714 <vApplicationGetIdleTaskMemory+0x30>)
 80066fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000aac 	.word	0x20000aac
 8006714:	20000b54 	.word	0x20000b54

08006718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <vApplicationGetTimerTaskMemory+0x2c>)
 8006728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	; (8006748 <vApplicationGetTimerTaskMemory+0x30>)
 800672e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000d54 	.word	0x20000d54
 8006748:	20000dfc 	.word	0x20000dfc

0800674c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006770:	2320      	movs	r3, #32
 8006772:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b20      	cmp	r3, #32
 8006778:	d00a      	beq.n	8006790 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	60fb      	str	r3, [r7, #12]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f9bf 	bl	8006b28 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2201      	movs	r2, #1
 80067ae:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80067b0:	697b      	ldr	r3, [r7, #20]
	}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80067c0:	2020      	movs	r0, #32
 80067c2:	f002 fda9 	bl	8009318 <pvPortMalloc>
 80067c6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 f9a5 	bl	8006b28 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80067e4:	687b      	ldr	r3, [r7, #4]
	}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b090      	sub	sp, #64	; 0x40
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61fb      	str	r3, [r7, #28]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xEventGroupWaitBits+0x72>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61bb      	str	r3, [r7, #24]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006862:	f001 fea1 	bl	80085a8 <xTaskGetSchedulerState>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <xEventGroupWaitBits+0x82>
 800686c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <xEventGroupWaitBits+0x86>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <xEventGroupWaitBits+0x88>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	617b      	str	r3, [r7, #20]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006892:	f001 f9ff 	bl	8007c94 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a2:	f000 f90b 	bl	8006abc <prvTestWaitCondition>
 80068a6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d028      	beq.n	800690e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	401a      	ands	r2, r3
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e020      	b.n	800690e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80068cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	633b      	str	r3, [r7, #48]	; 0x30
 80068da:	e018      	b.n	800690e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	1d18      	adds	r0, r3, #4
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	4313      	orrs	r3, r2
 8006902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006904:	4619      	mov	r1, r3
 8006906:	f001 fbc3 	bl	8008090 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800690e:	f001 f9cf 	bl	8007cb0 <xTaskResumeAll>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006916:	2b00      	cmp	r3, #0
 8006918:	d031      	beq.n	800697e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006920:	4b19      	ldr	r3, [pc, #100]	; (8006988 <xEventGroupWaitBits+0x198>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006930:	f001 fec6 	bl	80086c0 <uxTaskResetEventItemValue>
 8006934:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11a      	bne.n	8006976 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006940:	f002 fbc8 	bl	80090d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006950:	f000 f8b4 	bl	8006abc <prvTestWaitCondition>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	43db      	mvns	r3, r3
 8006968:	401a      	ands	r2, r3
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800696e:	2301      	movs	r3, #1
 8006970:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006972:	f002 fbdf 	bl	8009134 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006980:	4618      	mov	r0, r3
 8006982:	3740      	adds	r7, #64	; 0x40
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006996:	2300      	movs	r3, #0
 8006998:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <xEventGroupSetBits+0x32>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	613b      	str	r3, [r7, #16]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <xEventGroupSetBits+0x52>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	3304      	adds	r3, #4
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	3308      	adds	r3, #8
 80069e8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80069ea:	f001 f953 	bl	8007c94 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006a00:	e03c      	b.n	8006a7c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a18:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d108      	bne.n	8006a3e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3c:	e008      	b.n	8006a50 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d101      	bne.n	8006a50 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a70:	4619      	mov	r1, r3
 8006a72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a74:	f001 fbd8 	bl	8008228 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1be      	bne.n	8006a02 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006a92:	f001 f90d 	bl	8007cb0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	681b      	ldr	r3, [r3, #0]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3738      	adds	r7, #56	; 0x38
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff6c 	bl	800698c <xEventGroupSetBits>
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d107      	bne.n	8006ae2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e007      	b.n	8006af2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d101      	bne.n	8006af2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006af2:	697b      	ldr	r3, [r7, #20]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	68f9      	ldr	r1, [r7, #12]
 8006b12:	4804      	ldr	r0, [pc, #16]	; (8006b24 <xEventGroupSetBitsFromISR+0x24>)
 8006b14:	f002 f98e 	bl	8008e34 <xTimerPendFunctionCallFromISR>
 8006b18:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006b1a:	697b      	ldr	r3, [r7, #20]
	}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	08006aa3 	.word	0x08006aa3

08006b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f103 0208 	add.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f103 0208 	add.w	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f103 0208 	add.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be0:	d103      	bne.n	8006bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e00c      	b.n	8006c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3308      	adds	r3, #8
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e002      	b.n	8006bf8 <vListInsert+0x2e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d2f6      	bcs.n	8006bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6892      	ldr	r2, [r2, #8]
 8006c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6852      	ldr	r2, [r2, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d103      	bne.n	8006c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xQueueGenericReset+0x2a>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60bb      	str	r3, [r7, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cba:	f002 fa0b 	bl	80090d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	441a      	add	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	3b01      	subs	r3, #1
 8006cec:	68f9      	ldr	r1, [r7, #12]
 8006cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d114      	bne.n	8006d3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01a      	beq.n	8006d4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3310      	adds	r3, #16
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fa1f 	bl	8008160 <xTaskRemoveFromEventList>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d012      	beq.n	8006d4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <xQueueGenericReset+0xcc>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	e009      	b.n	8006d4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3310      	adds	r3, #16
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fef2 	bl	8006b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff feed 	bl	8006b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d4e:	f002 f9f1 	bl	8009134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d52:	2301      	movs	r3, #1
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	; 0x38
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <xQueueGenericCreateStatic+0x52>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <xQueueGenericCreateStatic+0x56>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueGenericCreateStatic+0x58>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <xQueueGenericCreateStatic+0x7e>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <xQueueGenericCreateStatic+0x82>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <xQueueGenericCreateStatic+0x84>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61fb      	str	r3, [r7, #28]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dfe:	2350      	movs	r3, #80	; 0x50
 8006e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b50      	cmp	r3, #80	; 0x50
 8006e06:	d00a      	beq.n	8006e1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61bb      	str	r3, [r7, #24]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f83f 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3730      	adds	r7, #48	; 0x30
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	613b      	str	r3, [r7, #16]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3350      	adds	r3, #80	; 0x50
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 fa45 	bl	8009318 <pvPortMalloc>
 8006e8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3350      	adds	r3, #80	; 0x50
 8006e9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ea8:	79fa      	ldrb	r2, [r7, #7]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f805 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eba:	69bb      	ldr	r3, [r7, #24]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e002      	b.n	8006ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	69b8      	ldr	r0, [r7, #24]
 8006ef6:	f7ff fecb 	bl	8006c90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08e      	sub	sp, #56	; 0x38
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueGenericSend+0x32>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <xQueueGenericSend+0x40>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <xQueueGenericSend+0x44>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <xQueueGenericSend+0x46>
 8006f50:	2300      	movs	r3, #0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <xQueueGenericSend+0x60>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d103      	bne.n	8006f7a <xQueueGenericSend+0x6e>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <xQueueGenericSend+0x72>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <xQueueGenericSend+0x74>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	623b      	str	r3, [r7, #32]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f9a:	f001 fb05 	bl	80085a8 <xTaskGetSchedulerState>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <xQueueGenericSend+0x9e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <xQueueGenericSend+0xa2>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericSend+0xa4>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericSend+0xbe>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	61fb      	str	r3, [r7, #28]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fca:	f002 f883 	bl	80090d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <xQueueGenericSend+0xd4>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d129      	bne.n	8007034 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe6:	f000 fa8b 	bl	8007500 <prvCopyDataToQueue>
 8006fea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	3324      	adds	r3, #36	; 0x24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f8b1 	bl	8008160 <xTaskRemoveFromEventList>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d013      	beq.n	800702c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007004:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <xQueueGenericSend+0x1f8>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	e00a      	b.n	800702c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800701c:	4b39      	ldr	r3, [pc, #228]	; (8007104 <xQueueGenericSend+0x1f8>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800702c:	f002 f882 	bl	8009134 <vPortExitCritical>
				return pdPASS;
 8007030:	2301      	movs	r3, #1
 8007032:	e063      	b.n	80070fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800703a:	f002 f87b 	bl	8009134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800703e:	2300      	movs	r3, #0
 8007040:	e05c      	b.n	80070fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f94d 	bl	80082ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007056:	f002 f86d 	bl	8009134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800705a:	f000 fe1b 	bl	8007c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705e:	f002 f839 	bl	80090d4 <vPortEnterCritical>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706e:	d103      	bne.n	8007078 <xQueueGenericSend+0x16c>
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800707e:	b25b      	sxtb	r3, r3
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007084:	d103      	bne.n	800708e <xQueueGenericSend+0x182>
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800708e:	f002 f851 	bl	8009134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007092:	1d3a      	adds	r2, r7, #4
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f001 f93c 	bl	8008318 <xTaskCheckForTimeOut>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d124      	bne.n	80070f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a8:	f000 fb22 	bl	80076f0 <prvIsQueueFull>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d018      	beq.n	80070e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	3310      	adds	r3, #16
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 ffc4 	bl	8008048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070c2:	f000 faad 	bl	8007620 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070c6:	f000 fdf3 	bl	8007cb0 <xTaskResumeAll>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af7c 	bne.w	8006fca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <xQueueGenericSend+0x1f8>)
 80070d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	e772      	b.n	8006fca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070e6:	f000 fa9b 	bl	8007620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070ea:	f000 fde1 	bl	8007cb0 <xTaskResumeAll>
 80070ee:	e76c      	b.n	8006fca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f2:	f000 fa95 	bl	8007620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070f6:	f000 fddb 	bl	8007cb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3738      	adds	r7, #56	; 0x38
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b090      	sub	sp, #64	; 0x40
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <xQueueGenericSendFromISR+0x3c>
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <xQueueGenericSendFromISR+0x40>
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <xQueueGenericSendFromISR+0x42>
 8007148:	2300      	movs	r3, #0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <xQueueGenericSendFromISR+0x6a>
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <xQueueGenericSendFromISR+0x6e>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGenericSendFromISR+0x70>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007192:	f002 f881 	bl	8009298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007196:	f3ef 8211 	mrs	r2, BASEPRI
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	61fa      	str	r2, [r7, #28]
 80071ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <xQueueGenericSendFromISR+0xbc>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d12f      	bne.n	8007224 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071da:	f000 f991 	bl	8007500 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e6:	d112      	bne.n	800720e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d016      	beq.n	800721e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 ffb3 	bl	8008160 <xTaskRemoveFromEventList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e007      	b.n	800721e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800720e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007212:	3301      	adds	r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	b25a      	sxtb	r2, r3
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800721e:	2301      	movs	r3, #1
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007222:	e001      	b.n	8007228 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007236:	4618      	mov	r0, r3
 8007238:	3740      	adds	r7, #64	; 0x40
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08c      	sub	sp, #48	; 0x30
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <xQueueReceive+0x30>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	623b      	str	r3, [r7, #32]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <xQueueReceive+0x3e>
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <xQueueReceive+0x42>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <xQueueReceive+0x44>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xQueueReceive+0x5e>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	61fb      	str	r3, [r7, #28]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800729e:	f001 f983 	bl	80085a8 <xTaskGetSchedulerState>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <xQueueReceive+0x6e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <xQueueReceive+0x72>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueReceive+0x74>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueReceive+0x8e>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	61bb      	str	r3, [r7, #24]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072ce:	f001 ff01 	bl	80090d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01f      	beq.n	800731e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e2:	f000 f977 	bl	80075d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00f      	beq.n	8007316 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	3310      	adds	r3, #16
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 ff30 	bl	8008160 <xTaskRemoveFromEventList>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007306:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <xQueueReceive+0x1bc>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007316:	f001 ff0d 	bl	8009134 <vPortExitCritical>
				return pdPASS;
 800731a:	2301      	movs	r3, #1
 800731c:	e069      	b.n	80073f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d103      	bne.n	800732c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007324:	f001 ff06 	bl	8009134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007328:	2300      	movs	r3, #0
 800732a:	e062      	b.n	80073f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007332:	f107 0310 	add.w	r3, r7, #16
 8007336:	4618      	mov	r0, r3
 8007338:	f000 ffd8 	bl	80082ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007340:	f001 fef8 	bl	8009134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007344:	f000 fca6 	bl	8007c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007348:	f001 fec4 	bl	80090d4 <vPortEnterCritical>
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007352:	b25b      	sxtb	r3, r3
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007358:	d103      	bne.n	8007362 <xQueueReceive+0x122>
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007368:	b25b      	sxtb	r3, r3
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800736e:	d103      	bne.n	8007378 <xQueueReceive+0x138>
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007378:	f001 fedc 	bl	8009134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800737c:	1d3a      	adds	r2, r7, #4
 800737e:	f107 0310 	add.w	r3, r7, #16
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f000 ffc7 	bl	8008318 <xTaskCheckForTimeOut>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d123      	bne.n	80073d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007392:	f000 f997 	bl	80076c4 <prvIsQueueEmpty>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d017      	beq.n	80073cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fe4f 	bl	8008048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ac:	f000 f938 	bl	8007620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073b0:	f000 fc7e 	bl	8007cb0 <xTaskResumeAll>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d189      	bne.n	80072ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <xQueueReceive+0x1bc>)
 80073bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	e780      	b.n	80072ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f000 f927 	bl	8007620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073d2:	f000 fc6d 	bl	8007cb0 <xTaskResumeAll>
 80073d6:	e77a      	b.n	80072ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073da:	f000 f921 	bl	8007620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073de:	f000 fc67 	bl	8007cb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e4:	f000 f96e 	bl	80076c4 <prvIsQueueEmpty>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f43f af6f 	beq.w	80072ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3730      	adds	r7, #48	; 0x30
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	623b      	str	r3, [r7, #32]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <xQueueReceiveFromISR+0x3a>
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <xQueueReceiveFromISR+0x3e>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <xQueueReceiveFromISR+0x40>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61fb      	str	r3, [r7, #28]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800745a:	f001 ff1d 	bl	8009298 <vPortValidateInterruptPriority>
	__asm volatile
 800745e:	f3ef 8211 	mrs	r2, BASEPRI
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	61ba      	str	r2, [r7, #24]
 8007474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d02f      	beq.n	80074e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800748c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007494:	f000 f89e 	bl	80075d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	1e5a      	subs	r2, r3, #1
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a8:	d112      	bne.n	80074d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d016      	beq.n	80074e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	3310      	adds	r3, #16
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fe52 	bl	8008160 <xTaskRemoveFromEventList>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e007      	b.n	80074e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d4:	3301      	adds	r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	b25a      	sxtb	r2, r3
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074e0:	2301      	movs	r3, #1
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
 80074e4:	e001      	b.n	80074ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f383 8811 	msr	BASEPRI, r3
}
 80074f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3738      	adds	r7, #56	; 0x38
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d14d      	bne.n	80075c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f85a 	bl	80085e4 <xTaskPriorityDisinherit>
 8007530:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	e043      	b.n	80075c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d119      	bne.n	8007574 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6858      	ldr	r0, [r3, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	461a      	mov	r2, r3
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	f005 ff77 	bl	800d43e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	441a      	add	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	d32b      	bcc.n	80075c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e026      	b.n	80075c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68d8      	ldr	r0, [r3, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	461a      	mov	r2, r3
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	f005 ff5d 	bl	800d43e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	425b      	negs	r3, r3
 800758e:	441a      	add	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d207      	bcs.n	80075b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	425b      	negs	r3, r3
 80075aa:	441a      	add	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d105      	bne.n	80075c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3b01      	subs	r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075ca:	697b      	ldr	r3, [r7, #20]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d018      	beq.n	8007618 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d303      	bcc.n	8007608 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68d9      	ldr	r1, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	461a      	mov	r2, r3
 8007612:	6838      	ldr	r0, [r7, #0]
 8007614:	f005 ff13 	bl	800d43e <memcpy>
	}
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007628:	f001 fd54 	bl	80090d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007632:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007634:	e011      	b.n	800765a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d012      	beq.n	8007664 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3324      	adds	r3, #36	; 0x24
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fd8c 	bl	8008160 <xTaskRemoveFromEventList>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800764e:	f000 fec5 	bl	80083dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	3b01      	subs	r3, #1
 8007656:	b2db      	uxtb	r3, r3
 8007658:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800765a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	dce9      	bgt.n	8007636 <prvUnlockQueue+0x16>
 8007662:	e000      	b.n	8007666 <prvUnlockQueue+0x46>
					break;
 8007664:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	22ff      	movs	r2, #255	; 0xff
 800766a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800766e:	f001 fd61 	bl	8009134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007672:	f001 fd2f 	bl	80090d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800767e:	e011      	b.n	80076a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3310      	adds	r3, #16
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fd67 	bl	8008160 <xTaskRemoveFromEventList>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007698:	f000 fea0 	bl	80083dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	3b01      	subs	r3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dce9      	bgt.n	8007680 <prvUnlockQueue+0x60>
 80076ac:	e000      	b.n	80076b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	22ff      	movs	r2, #255	; 0xff
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076b8:	f001 fd3c 	bl	8009134 <vPortExitCritical>
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076cc:	f001 fd02 	bl	80090d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076d8:	2301      	movs	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e001      	b.n	80076e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e2:	f001 fd27 	bl	8009134 <vPortExitCritical>

	return xReturn;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076f8:	f001 fcec 	bl	80090d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	429a      	cmp	r2, r3
 8007706:	d102      	bne.n	800770e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e001      	b.n	8007712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007712:	f001 fd0f 	bl	8009134 <vPortExitCritical>

	return xReturn;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e014      	b.n	800775a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007730:	4a0f      	ldr	r2, [pc, #60]	; (8007770 <vQueueAddToRegistry+0x50>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10b      	bne.n	8007754 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800773c:	490c      	ldr	r1, [pc, #48]	; (8007770 <vQueueAddToRegistry+0x50>)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007746:	4a0a      	ldr	r2, [pc, #40]	; (8007770 <vQueueAddToRegistry+0x50>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4413      	add	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007752:	e006      	b.n	8007762 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b07      	cmp	r3, #7
 800775e:	d9e7      	bls.n	8007730 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	200011fc 	.word	0x200011fc

08007774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007784:	f001 fca6 	bl	80090d4 <vPortEnterCritical>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778e:	b25b      	sxtb	r3, r3
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007794:	d103      	bne.n	800779e <vQueueWaitForMessageRestricted+0x2a>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077aa:	d103      	bne.n	80077b4 <vQueueWaitForMessageRestricted+0x40>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b4:	f001 fcbe 	bl	8009134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fc9d 	bl	8008108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff ff26 	bl	8007620 <prvUnlockQueue>
	}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af04      	add	r7, sp, #16
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskCreateStatic+0x2a>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	623b      	str	r3, [r7, #32]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xTaskCreateStatic+0x46>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	61fb      	str	r3, [r7, #28]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007822:	23a8      	movs	r3, #168	; 0xa8
 8007824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2ba8      	cmp	r3, #168	; 0xa8
 800782a:	d00a      	beq.n	8007842 <xTaskCreateStatic+0x66>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	61bb      	str	r3, [r7, #24]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007842:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01e      	beq.n	8007888 <xTaskCreateStatic+0xac>
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01b      	beq.n	8007888 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	2202      	movs	r2, #2
 800785e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007862:	2300      	movs	r3, #0
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	f107 0314 	add.w	r3, r7, #20
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f850 	bl	8007920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007882:	f000 f8f3 	bl	8007a6c <prvAddNewTaskToReadyList>
 8007886:	e001      	b.n	800788c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800788c:	697b      	ldr	r3, [r7, #20]
	}
 800788e:	4618      	mov	r0, r3
 8007890:	3728      	adds	r7, #40	; 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007896:	b580      	push	{r7, lr}
 8007898:	b08c      	sub	sp, #48	; 0x30
 800789a:	af04      	add	r7, sp, #16
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fd34 	bl	8009318 <pvPortMalloc>
 80078b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00e      	beq.n	80078d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078b8:	20a8      	movs	r0, #168	; 0xa8
 80078ba:	f001 fd2d 	bl	8009318 <pvPortMalloc>
 80078be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
 80078cc:	e005      	b.n	80078da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078ce:	6978      	ldr	r0, [r7, #20]
 80078d0:	f001 fdee 	bl	80094b0 <vPortFree>
 80078d4:	e001      	b.n	80078da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078e8:	88fa      	ldrh	r2, [r7, #6]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f80e 	bl	8007920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007904:	69f8      	ldr	r0, [r7, #28]
 8007906:	f000 f8b1 	bl	8007a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800790a:	2301      	movs	r3, #1
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	e002      	b.n	8007916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007916:	69bb      	ldr	r3, [r7, #24]
	}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	461a      	mov	r2, r3
 8007938:	21a5      	movs	r1, #165	; 0xa5
 800793a:	f005 fc89 	bl	800d250 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007948:	3b01      	subs	r3, #1
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f023 0307 	bic.w	r3, r3, #7
 8007956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	617b      	str	r3, [r7, #20]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01f      	beq.n	80079be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e012      	b.n	80079aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	7819      	ldrb	r1, [r3, #0]
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	3334      	adds	r3, #52	; 0x34
 8007994:	460a      	mov	r2, r1
 8007996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	3301      	adds	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	2b0f      	cmp	r3, #15
 80079ae:	d9e9      	bls.n	8007984 <prvInitialiseNewTask+0x64>
 80079b0:	e000      	b.n	80079b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80079b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079bc:	e003      	b.n	80079c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	2b37      	cmp	r3, #55	; 0x37
 80079ca:	d901      	bls.n	80079d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079cc:	2337      	movs	r3, #55	; 0x37
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	2200      	movs	r2, #0
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	3304      	adds	r3, #4
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff f8be 	bl	8006b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	3318      	adds	r3, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff f8b9 	bl	8006b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	3354      	adds	r3, #84	; 0x54
 8007a20:	224c      	movs	r2, #76	; 0x4c
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f005 fc13 	bl	800d250 <memset>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <prvInitialiseNewTask+0x140>)
 8007a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <prvInitialiseNewTask+0x144>)
 8007a34:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	4a0b      	ldr	r2, [pc, #44]	; (8007a68 <prvInitialiseNewTask+0x148>)
 8007a3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	69b8      	ldr	r0, [r7, #24]
 8007a42:	f001 fa17 	bl	8008e74 <pxPortInitialiseStack>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a58:	bf00      	nop
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	200054a0 	.word	0x200054a0
 8007a64:	20005508 	.word	0x20005508
 8007a68:	20005570 	.word	0x20005570

08007a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a74:	f001 fb2e 	bl	80090d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a78:	4b2d      	ldr	r3, [pc, #180]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a2c      	ldr	r2, [pc, #176]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a82:	4b2c      	ldr	r3, [pc, #176]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a8a:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d110      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a98:	f000 fcc4 	bl	8008424 <prvInitialiseTaskLists>
 8007a9c:	e00d      	b.n	8007aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <prvAddNewTaskToReadyList+0xcc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aa6:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d802      	bhi.n	8007aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aba:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <prvAddNewTaskToReadyList+0xd4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <prvAddNewTaskToReadyList+0x74>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <prvAddNewTaskToReadyList+0xd4>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <prvAddNewTaskToReadyList+0xd8>)
 8007aee:	441a      	add	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7ff f843 	bl	8006b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007afc:	f001 fb1a 	bl	8009134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b00:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <prvAddNewTaskToReadyList+0xcc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d207      	bcs.n	8007b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvAddNewTaskToReadyList+0xdc>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20001710 	.word	0x20001710
 8007b34:	2000123c 	.word	0x2000123c
 8007b38:	2000171c 	.word	0x2000171c
 8007b3c:	2000172c 	.word	0x2000172c
 8007b40:	20001718 	.word	0x20001718
 8007b44:	20001240 	.word	0x20001240
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <vTaskDelay+0x60>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <vTaskDelay+0x30>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b7c:	f000 f88a 	bl	8007c94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fdb4 	bl	80086f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b88:	f000 f892 	bl	8007cb0 <xTaskResumeAll>
 8007b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <vTaskDelay+0x64>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20001738 	.word	0x20001738
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	1d39      	adds	r1, r7, #4
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fd8a 	bl	80066e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	9202      	str	r2, [sp, #8]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	460a      	mov	r2, r1
 8007be2:	4924      	ldr	r1, [pc, #144]	; (8007c74 <vTaskStartScheduler+0xc0>)
 8007be4:	4824      	ldr	r0, [pc, #144]	; (8007c78 <vTaskStartScheduler+0xc4>)
 8007be6:	f7ff fdf9 	bl	80077dc <xTaskCreateStatic>
 8007bea:	4603      	mov	r3, r0
 8007bec:	4a23      	ldr	r2, [pc, #140]	; (8007c7c <vTaskStartScheduler+0xc8>)
 8007bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bf0:	4b22      	ldr	r3, [pc, #136]	; (8007c7c <vTaskStartScheduler+0xc8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e001      	b.n	8007c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d102      	bne.n	8007c0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c08:	f000 fdc6 	bl	8008798 <xTimerCreateTimerTask>
 8007c0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11b      	bne.n	8007c4c <vTaskStartScheduler+0x98>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	613b      	str	r3, [r7, #16]
}
 8007c26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <vTaskStartScheduler+0xcc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3354      	adds	r3, #84	; 0x54
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <vTaskStartScheduler+0xd0>)
 8007c30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <vTaskStartScheduler+0xd4>)
 8007c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c3a:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <vTaskStartScheduler+0xd8>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <vTaskStartScheduler+0xdc>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c46:	f001 f9a3 	bl	8008f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c4a:	e00e      	b.n	8007c6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c52:	d10a      	bne.n	8007c6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <vTaskStartScheduler+0xb4>
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	08010f58 	.word	0x08010f58
 8007c78:	080083f5 	.word	0x080083f5
 8007c7c:	20001734 	.word	0x20001734
 8007c80:	2000123c 	.word	0x2000123c
 8007c84:	20000260 	.word	0x20000260
 8007c88:	20001730 	.word	0x20001730
 8007c8c:	2000171c 	.word	0x2000171c
 8007c90:	20001714 	.word	0x20001714

08007c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <vTaskSuspendAll+0x18>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4a03      	ldr	r2, [pc, #12]	; (8007cac <vTaskSuspendAll+0x18>)
 8007ca0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ca2:	bf00      	nop
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	20001738 	.word	0x20001738

08007cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cbe:	4b42      	ldr	r3, [pc, #264]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <xTaskResumeAll+0x2c>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	603b      	str	r3, [r7, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cdc:	f001 f9fa 	bl	80090d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ce0:	4b39      	ldr	r3, [pc, #228]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4a38      	ldr	r2, [pc, #224]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007ce8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cea:	4b37      	ldr	r3, [pc, #220]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d162      	bne.n	8007db8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cf2:	4b36      	ldr	r3, [pc, #216]	; (8007dcc <xTaskResumeAll+0x11c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d05e      	beq.n	8007db8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cfa:	e02f      	b.n	8007d5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfc:	4b34      	ldr	r3, [pc, #208]	; (8007dd0 <xTaskResumeAll+0x120>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3318      	adds	r3, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe ff97 	bl	8006c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe ff92 	bl	8006c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <xTaskResumeAll+0x124>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d903      	bls.n	8007d2c <xTaskResumeAll+0x7c>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <xTaskResumeAll+0x124>)
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4a27      	ldr	r2, [pc, #156]	; (8007dd8 <xTaskResumeAll+0x128>)
 8007d3a:	441a      	add	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fe ff1d 	bl	8006b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4b23      	ldr	r3, [pc, #140]	; (8007ddc <xTaskResumeAll+0x12c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d5c:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <xTaskResumeAll+0x120>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1cb      	bne.n	8007cfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d6a:	f000 fbfd 	bl	8008568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <xTaskResumeAll+0x134>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d7a:	f000 f847 	bl	8007e0c <xTaskIncrementTick>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d84:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f1      	bne.n	8007d7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <xTaskResumeAll+0x134>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d9c:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007da8:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <xTaskResumeAll+0x138>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db8:	f001 f9bc 	bl	8009134 <vPortExitCritical>

	return xAlreadyYielded;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001738 	.word	0x20001738
 8007dcc:	20001710 	.word	0x20001710
 8007dd0:	200016d0 	.word	0x200016d0
 8007dd4:	20001718 	.word	0x20001718
 8007dd8:	20001240 	.word	0x20001240
 8007ddc:	2000123c 	.word	0x2000123c
 8007de0:	20001724 	.word	0x20001724
 8007de4:	20001720 	.word	0x20001720
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <xTaskGetTickCount+0x1c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007df8:	687b      	ldr	r3, [r7, #4]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20001714 	.word	0x20001714

08007e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e16:	4b4f      	ldr	r3, [pc, #316]	; (8007f54 <xTaskIncrementTick+0x148>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f040 808f 	bne.w	8007f3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e20:	4b4d      	ldr	r3, [pc, #308]	; (8007f58 <xTaskIncrementTick+0x14c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e28:	4a4b      	ldr	r2, [pc, #300]	; (8007f58 <xTaskIncrementTick+0x14c>)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d120      	bne.n	8007e76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e34:	4b49      	ldr	r3, [pc, #292]	; (8007f5c <xTaskIncrementTick+0x150>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	603b      	str	r3, [r7, #0]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <xTaskIncrementTick+0x46>
 8007e54:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <xTaskIncrementTick+0x150>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	4b41      	ldr	r3, [pc, #260]	; (8007f60 <xTaskIncrementTick+0x154>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a3f      	ldr	r2, [pc, #252]	; (8007f5c <xTaskIncrementTick+0x150>)
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	4a3f      	ldr	r2, [pc, #252]	; (8007f60 <xTaskIncrementTick+0x154>)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	4b3e      	ldr	r3, [pc, #248]	; (8007f64 <xTaskIncrementTick+0x158>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	4a3d      	ldr	r2, [pc, #244]	; (8007f64 <xTaskIncrementTick+0x158>)
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	f000 fb79 	bl	8008568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e76:	4b3c      	ldr	r3, [pc, #240]	; (8007f68 <xTaskIncrementTick+0x15c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d349      	bcc.n	8007f14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e80:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskIncrementTick+0x150>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e8a:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <xTaskIncrementTick+0x15c>)
 8007e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e90:	601a      	str	r2, [r3, #0]
					break;
 8007e92:	e03f      	b.n	8007f14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e94:	4b31      	ldr	r3, [pc, #196]	; (8007f5c <xTaskIncrementTick+0x150>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d203      	bcs.n	8007eb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eac:	4a2e      	ldr	r2, [pc, #184]	; (8007f68 <xTaskIncrementTick+0x15c>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eb2:	e02f      	b.n	8007f14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe febf 	bl	8006c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3318      	adds	r3, #24
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe feb6 	bl	8006c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <xTaskIncrementTick+0x160>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d903      	bls.n	8007ee4 <xTaskIncrementTick+0xd8>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	4a22      	ldr	r2, [pc, #136]	; (8007f6c <xTaskIncrementTick+0x160>)
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <xTaskIncrementTick+0x164>)
 8007ef2:	441a      	add	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7fe fe41 	bl	8006b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <xTaskIncrementTick+0x168>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d3b8      	bcc.n	8007e80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f12:	e7b5      	b.n	8007e80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f14:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <xTaskIncrementTick+0x168>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4915      	ldr	r1, [pc, #84]	; (8007f70 <xTaskIncrementTick+0x164>)
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d901      	bls.n	8007f30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f30:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <xTaskIncrementTick+0x16c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e004      	b.n	8007f48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <xTaskIncrementTick+0x170>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <xTaskIncrementTick+0x170>)
 8007f46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f48:	697b      	ldr	r3, [r7, #20]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20001738 	.word	0x20001738
 8007f58:	20001714 	.word	0x20001714
 8007f5c:	200016c8 	.word	0x200016c8
 8007f60:	200016cc 	.word	0x200016cc
 8007f64:	20001728 	.word	0x20001728
 8007f68:	20001730 	.word	0x20001730
 8007f6c:	20001718 	.word	0x20001718
 8007f70:	20001240 	.word	0x20001240
 8007f74:	2000123c 	.word	0x2000123c
 8007f78:	20001724 	.word	0x20001724
 8007f7c:	20001720 	.word	0x20001720

08007f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f86:	4b2a      	ldr	r3, [pc, #168]	; (8008030 <vTaskSwitchContext+0xb0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <vTaskSwitchContext+0xb4>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f94:	e046      	b.n	8008024 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007f96:	4b27      	ldr	r3, [pc, #156]	; (8008034 <vTaskSwitchContext+0xb4>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	4b26      	ldr	r3, [pc, #152]	; (8008038 <vTaskSwitchContext+0xb8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e010      	b.n	8007fc6 <vTaskSwitchContext+0x46>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	607b      	str	r3, [r7, #4]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vTaskSwitchContext+0x3e>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	491d      	ldr	r1, [pc, #116]	; (800803c <vTaskSwitchContext+0xbc>)
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0e4      	beq.n	8007fa4 <vTaskSwitchContext+0x24>
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4a15      	ldr	r2, [pc, #84]	; (800803c <vTaskSwitchContext+0xbc>)
 8007fe6:	4413      	add	r3, r2
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	605a      	str	r2, [r3, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d104      	bne.n	800800a <vTaskSwitchContext+0x8a>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4a0b      	ldr	r2, [pc, #44]	; (8008040 <vTaskSwitchContext+0xc0>)
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	4a08      	ldr	r2, [pc, #32]	; (8008038 <vTaskSwitchContext+0xb8>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <vTaskSwitchContext+0xc0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3354      	adds	r3, #84	; 0x54
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <vTaskSwitchContext+0xc4>)
 8008022:	6013      	str	r3, [r2, #0]
}
 8008024:	bf00      	nop
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	20001738 	.word	0x20001738
 8008034:	20001724 	.word	0x20001724
 8008038:	20001718 	.word	0x20001718
 800803c:	20001240 	.word	0x20001240
 8008040:	2000123c 	.word	0x2000123c
 8008044:	20000260 	.word	0x20000260

08008048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60fb      	str	r3, [r7, #12]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <vTaskPlaceOnEventList+0x44>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3318      	adds	r3, #24
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fe fda7 	bl	8006bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800807c:	2101      	movs	r1, #1
 800807e:	6838      	ldr	r0, [r7, #0]
 8008080:	f000 fb36 	bl	80086f0 <prvAddCurrentTaskToDelayedList>
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	2000123c 	.word	0x2000123c

08008090 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	617b      	str	r3, [r7, #20]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <vTaskPlaceOnUnorderedEventList+0x70>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <vTaskPlaceOnUnorderedEventList+0x74>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80080e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <vTaskPlaceOnUnorderedEventList+0x74>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3318      	adds	r3, #24
 80080e8:	4619      	mov	r1, r3
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7fe fd49 	bl	8006b82 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080f0:	2101      	movs	r1, #1
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fafc 	bl	80086f0 <prvAddCurrentTaskToDelayedList>
}
 80080f8:	bf00      	nop
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20001738 	.word	0x20001738
 8008104:	2000123c 	.word	0x2000123c

08008108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	617b      	str	r3, [r7, #20]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008130:	4b0a      	ldr	r3, [pc, #40]	; (800815c <vTaskPlaceOnEventListRestricted+0x54>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3318      	adds	r3, #24
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7fe fd22 	bl	8006b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	68b8      	ldr	r0, [r7, #8]
 800814e:	f000 facf 	bl	80086f0 <prvAddCurrentTaskToDelayedList>
	}
 8008152:	bf00      	nop
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000123c 	.word	0x2000123c

08008160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3318      	adds	r3, #24
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fd53 	bl	8006c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008196:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <xTaskRemoveFromEventList+0xb0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d11d      	bne.n	80081da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fd4a 	bl	8006c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ac:	4b19      	ldr	r3, [pc, #100]	; (8008214 <xTaskRemoveFromEventList+0xb4>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d903      	bls.n	80081bc <xTaskRemoveFromEventList+0x5c>
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	4a16      	ldr	r2, [pc, #88]	; (8008214 <xTaskRemoveFromEventList+0xb4>)
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4a13      	ldr	r2, [pc, #76]	; (8008218 <xTaskRemoveFromEventList+0xb8>)
 80081ca:	441a      	add	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f7fe fcd5 	bl	8006b82 <vListInsertEnd>
 80081d8:	e005      	b.n	80081e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	3318      	adds	r3, #24
 80081de:	4619      	mov	r1, r3
 80081e0:	480e      	ldr	r0, [pc, #56]	; (800821c <xTaskRemoveFromEventList+0xbc>)
 80081e2:	f7fe fcce 	bl	8006b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ea:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <xTaskRemoveFromEventList+0xc0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d905      	bls.n	8008200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <xTaskRemoveFromEventList+0xc4>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e001      	b.n	8008204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008204:	697b      	ldr	r3, [r7, #20]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20001738 	.word	0x20001738
 8008214:	20001718 	.word	0x20001718
 8008218:	20001240 	.word	0x20001240
 800821c:	200016d0 	.word	0x200016d0
 8008220:	2000123c 	.word	0x2000123c
 8008224:	20001724 	.word	0x20001724

08008228 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008232:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	613b      	str	r3, [r7, #16]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60fb      	str	r3, [r7, #12]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fe fcdd 	bl	8006c3c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	3304      	adds	r3, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fcd8 	bl	8006c3c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d903      	bls.n	80082a0 <vTaskRemoveFromUnorderedEventList+0x78>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4a0c      	ldr	r2, [pc, #48]	; (80082e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80082ae:	441a      	add	r2, r3
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7fe fc63 	bl	8006b82 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d902      	bls.n	80082d0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80082ca:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
	}
}
 80082d0:	bf00      	nop
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20001738 	.word	0x20001738
 80082dc:	20001718 	.word	0x20001718
 80082e0:	20001240 	.word	0x20001240
 80082e4:	2000123c 	.word	0x2000123c
 80082e8:	20001724 	.word	0x20001724

080082ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <vTaskInternalSetTimeOutState+0x24>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <vTaskInternalSetTimeOutState+0x28>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	605a      	str	r2, [r3, #4]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20001728 	.word	0x20001728
 8008314:	20001714 	.word	0x20001714

08008318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60fb      	str	r3, [r7, #12]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800835a:	f000 febb 	bl	80090d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <xTaskCheckForTimeOut+0xbc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008376:	d102      	bne.n	800837e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	e023      	b.n	80083c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <xTaskCheckForTimeOut+0xc0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d007      	beq.n	800839a <xTaskCheckForTimeOut+0x82>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	429a      	cmp	r2, r3
 8008392:	d302      	bcc.n	800839a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	61fb      	str	r3, [r7, #28]
 8008398:	e015      	b.n	80083c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d20b      	bcs.n	80083bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ff9b 	bl	80082ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e004      	b.n	80083c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083c2:	2301      	movs	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083c6:	f000 feb5 	bl	8009134 <vPortExitCritical>

	return xReturn;
 80083ca:	69fb      	ldr	r3, [r7, #28]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20001714 	.word	0x20001714
 80083d8:	20001728 	.word	0x20001728

080083dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083e0:	4b03      	ldr	r3, [pc, #12]	; (80083f0 <vTaskMissedYield+0x14>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20001724 	.word	0x20001724

080083f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083fc:	f000 f852 	bl	80084a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <prvIdleTask+0x28>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d9f9      	bls.n	80083fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <prvIdleTask+0x2c>)
 800840a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008418:	e7f0      	b.n	80083fc <prvIdleTask+0x8>
 800841a:	bf00      	nop
 800841c:	20001240 	.word	0x20001240
 8008420:	e000ed04 	.word	0xe000ed04

08008424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800842a:	2300      	movs	r3, #0
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	e00c      	b.n	800844a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4a12      	ldr	r2, [pc, #72]	; (8008484 <prvInitialiseTaskLists+0x60>)
 800843c:	4413      	add	r3, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fb72 	bl	8006b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3301      	adds	r3, #1
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b37      	cmp	r3, #55	; 0x37
 800844e:	d9ef      	bls.n	8008430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008450:	480d      	ldr	r0, [pc, #52]	; (8008488 <prvInitialiseTaskLists+0x64>)
 8008452:	f7fe fb69 	bl	8006b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008456:	480d      	ldr	r0, [pc, #52]	; (800848c <prvInitialiseTaskLists+0x68>)
 8008458:	f7fe fb66 	bl	8006b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800845c:	480c      	ldr	r0, [pc, #48]	; (8008490 <prvInitialiseTaskLists+0x6c>)
 800845e:	f7fe fb63 	bl	8006b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008462:	480c      	ldr	r0, [pc, #48]	; (8008494 <prvInitialiseTaskLists+0x70>)
 8008464:	f7fe fb60 	bl	8006b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008468:	480b      	ldr	r0, [pc, #44]	; (8008498 <prvInitialiseTaskLists+0x74>)
 800846a:	f7fe fb5d 	bl	8006b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800846e:	4b0b      	ldr	r3, [pc, #44]	; (800849c <prvInitialiseTaskLists+0x78>)
 8008470:	4a05      	ldr	r2, [pc, #20]	; (8008488 <prvInitialiseTaskLists+0x64>)
 8008472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008474:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <prvInitialiseTaskLists+0x7c>)
 8008476:	4a05      	ldr	r2, [pc, #20]	; (800848c <prvInitialiseTaskLists+0x68>)
 8008478:	601a      	str	r2, [r3, #0]
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001240 	.word	0x20001240
 8008488:	200016a0 	.word	0x200016a0
 800848c:	200016b4 	.word	0x200016b4
 8008490:	200016d0 	.word	0x200016d0
 8008494:	200016e4 	.word	0x200016e4
 8008498:	200016fc 	.word	0x200016fc
 800849c:	200016c8 	.word	0x200016c8
 80084a0:	200016cc 	.word	0x200016cc

080084a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084aa:	e019      	b.n	80084e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084ac:	f000 fe12 	bl	80090d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b0:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <prvCheckTasksWaitingTermination+0x50>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fbbd 	bl	8006c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <prvCheckTasksWaitingTermination+0x54>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	4a0b      	ldr	r2, [pc, #44]	; (80084f8 <prvCheckTasksWaitingTermination+0x54>)
 80084ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <prvCheckTasksWaitingTermination+0x58>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <prvCheckTasksWaitingTermination+0x58>)
 80084d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084d6:	f000 fe2d 	bl	8009134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f810 	bl	8008500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <prvCheckTasksWaitingTermination+0x58>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e1      	bne.n	80084ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200016e4 	.word	0x200016e4
 80084f8:	20001710 	.word	0x20001710
 80084fc:	200016f8 	.word	0x200016f8

08008500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3354      	adds	r3, #84	; 0x54
 800850c:	4618      	mov	r0, r3
 800850e:	f004 fecd 	bl	800d2ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	4618      	mov	r0, r3
 8008522:	f000 ffc5 	bl	80094b0 <vPortFree>
				vPortFree( pxTCB );
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 ffc2 	bl	80094b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800852c:	e018      	b.n	8008560 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008534:	2b01      	cmp	r3, #1
 8008536:	d103      	bne.n	8008540 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 ffb9 	bl	80094b0 <vPortFree>
	}
 800853e:	e00f      	b.n	8008560 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008546:	2b02      	cmp	r3, #2
 8008548:	d00a      	beq.n	8008560 <prvDeleteTCB+0x60>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60fb      	str	r3, [r7, #12]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <prvDeleteTCB+0x5e>
	}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <prvResetNextTaskUnblockTime+0x38>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d104      	bne.n	8008582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <prvResetNextTaskUnblockTime+0x3c>)
 800857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800857e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008580:	e008      	b.n	8008594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008582:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <prvResetNextTaskUnblockTime+0x38>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <prvResetNextTaskUnblockTime+0x3c>)
 8008592:	6013      	str	r3, [r2, #0]
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	200016c8 	.word	0x200016c8
 80085a4:	20001730 	.word	0x20001730

080085a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ae:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <xTaskGetSchedulerState+0x34>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085b6:	2301      	movs	r3, #1
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	e008      	b.n	80085ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <xTaskGetSchedulerState+0x38>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085c4:	2302      	movs	r3, #2
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	e001      	b.n	80085ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085ca:	2300      	movs	r3, #0
 80085cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085ce:	687b      	ldr	r3, [r7, #4]
	}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	2000171c 	.word	0x2000171c
 80085e0:	20001738 	.word	0x20001738

080085e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d056      	beq.n	80086a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085fa:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <xTaskPriorityDisinherit+0xd0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	429a      	cmp	r2, r3
 8008602:	d00a      	beq.n	800861a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60bb      	str	r3, [r7, #8]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	1e5a      	subs	r2, r3, #1
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864a:	429a      	cmp	r2, r3
 800864c:	d02c      	beq.n	80086a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008652:	2b00      	cmp	r3, #0
 8008654:	d128      	bne.n	80086a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	3304      	adds	r3, #4
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe faee 	bl	8006c3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <xTaskPriorityDisinherit+0xd4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d903      	bls.n	8008688 <xTaskPriorityDisinherit+0xa4>
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <xTaskPriorityDisinherit+0xd4>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4a09      	ldr	r2, [pc, #36]	; (80086bc <xTaskPriorityDisinherit+0xd8>)
 8008696:	441a      	add	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7fe fa6f 	bl	8006b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a8:	697b      	ldr	r3, [r7, #20]
	}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000123c 	.word	0x2000123c
 80086b8:	20001718 	.word	0x20001718
 80086bc:	20001240 	.word	0x20001240

080086c0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <uxTaskResetEventItemValue+0x2c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <uxTaskResetEventItemValue+0x2c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <uxTaskResetEventItemValue+0x2c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80086dc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80086de:	687b      	ldr	r3, [r7, #4]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000123c 	.word	0x2000123c

080086f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086fa:	4b21      	ldr	r3, [pc, #132]	; (8008780 <prvAddCurrentTaskToDelayedList+0x90>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008700:	4b20      	ldr	r3, [pc, #128]	; (8008784 <prvAddCurrentTaskToDelayedList+0x94>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3304      	adds	r3, #4
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fa98 	bl	8006c3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008712:	d10a      	bne.n	800872a <prvAddCurrentTaskToDelayedList+0x3a>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871a:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <prvAddCurrentTaskToDelayedList+0x94>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4819      	ldr	r0, [pc, #100]	; (8008788 <prvAddCurrentTaskToDelayedList+0x98>)
 8008724:	f7fe fa2d 	bl	8006b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008728:	e026      	b.n	8008778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4413      	add	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008732:	4b14      	ldr	r3, [pc, #80]	; (8008784 <prvAddCurrentTaskToDelayedList+0x94>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	429a      	cmp	r2, r3
 8008740:	d209      	bcs.n	8008756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008742:	4b12      	ldr	r3, [pc, #72]	; (800878c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <prvAddCurrentTaskToDelayedList+0x94>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fa3b 	bl	8006bca <vListInsert>
}
 8008754:	e010      	b.n	8008778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008756:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <prvAddCurrentTaskToDelayedList+0x94>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fa31 	bl	8006bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	d202      	bcs.n	8008778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008772:	4a08      	ldr	r2, [pc, #32]	; (8008794 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6013      	str	r3, [r2, #0]
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20001714 	.word	0x20001714
 8008784:	2000123c 	.word	0x2000123c
 8008788:	200016fc 	.word	0x200016fc
 800878c:	200016cc 	.word	0x200016cc
 8008790:	200016c8 	.word	0x200016c8
 8008794:	20001730 	.word	0x20001730

08008798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087a2:	f000 fb07 	bl	8008db4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087a6:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <xTimerCreateTimerTask+0x80>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d021      	beq.n	80087f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087b6:	1d3a      	adds	r2, r7, #4
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fd ffa9 	bl	8006718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	9202      	str	r2, [sp, #8]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	2302      	movs	r3, #2
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	460a      	mov	r2, r1
 80087d8:	4910      	ldr	r1, [pc, #64]	; (800881c <xTimerCreateTimerTask+0x84>)
 80087da:	4811      	ldr	r0, [pc, #68]	; (8008820 <xTimerCreateTimerTask+0x88>)
 80087dc:	f7fe fffe 	bl	80077dc <xTaskCreateStatic>
 80087e0:	4603      	mov	r3, r0
 80087e2:	4a10      	ldr	r2, [pc, #64]	; (8008824 <xTimerCreateTimerTask+0x8c>)
 80087e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087e6:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <xTimerCreateTimerTask+0x8c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	613b      	str	r3, [r7, #16]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800880e:	697b      	ldr	r3, [r7, #20]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	2000176c 	.word	0x2000176c
 800881c:	08010f60 	.word	0x08010f60
 8008820:	0800895d 	.word	0x0800895d
 8008824:	20001770 	.word	0x20001770

08008828 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	623b      	str	r3, [r7, #32]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008856:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <xTimerGenericCommand+0x98>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02a      	beq.n	80088b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b05      	cmp	r3, #5
 800886e:	dc18      	bgt.n	80088a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008870:	f7ff fe9a 	bl	80085a8 <xTaskGetSchedulerState>
 8008874:	4603      	mov	r3, r0
 8008876:	2b02      	cmp	r3, #2
 8008878:	d109      	bne.n	800888e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800887a:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <xTimerGenericCommand+0x98>)
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f107 0110 	add.w	r1, r7, #16
 8008882:	2300      	movs	r3, #0
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	f7fe fb41 	bl	8006f0c <xQueueGenericSend>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24
 800888c:	e012      	b.n	80088b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800888e:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <xTimerGenericCommand+0x98>)
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f107 0110 	add.w	r1, r7, #16
 8008896:	2300      	movs	r3, #0
 8008898:	2200      	movs	r2, #0
 800889a:	f7fe fb37 	bl	8006f0c <xQueueGenericSend>
 800889e:	6278      	str	r0, [r7, #36]	; 0x24
 80088a0:	e008      	b.n	80088b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <xTimerGenericCommand+0x98>)
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f107 0110 	add.w	r1, r7, #16
 80088aa:	2300      	movs	r3, #0
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	f7fe fc2b 	bl	8007108 <xQueueGenericSendFromISR>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000176c 	.word	0x2000176c

080088c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ce:	4b22      	ldr	r3, [pc, #136]	; (8008958 <prvProcessExpiredTimer+0x94>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	3304      	adds	r3, #4
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe f9ad 	bl	8006c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d022      	beq.n	8008936 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	18d1      	adds	r1, r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	f000 f8d1 	bl	8008aa4 <prvInsertTimerInActiveList>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01f      	beq.n	8008948 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008908:	2300      	movs	r3, #0
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	2100      	movs	r1, #0
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f7ff ff88 	bl	8008828 <xTimerGenericCommand>
 8008918:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d113      	bne.n	8008948 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	60fb      	str	r3, [r7, #12]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	b2da      	uxtb	r2, r3
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	4798      	blx	r3
}
 8008950:	bf00      	nop
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20001764 	.word	0x20001764

0800895c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4618      	mov	r0, r3
 800896a:	f000 f857 	bl	8008a1c <prvGetNextExpireTime>
 800896e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4619      	mov	r1, r3
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f803 	bl	8008980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800897a:	f000 f8d5 	bl	8008b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800897e:	e7f1      	b.n	8008964 <prvTimerTask+0x8>

08008980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800898a:	f7ff f983 	bl	8007c94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f866 	bl	8008a64 <prvSampleTimeNow>
 8008998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d130      	bne.n	8008a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <prvProcessTimerOrBlockTask+0x3c>
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d806      	bhi.n	80089bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089ae:	f7ff f97f 	bl	8007cb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089b2:	68f9      	ldr	r1, [r7, #12]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ff85 	bl	80088c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089ba:	e024      	b.n	8008a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <prvProcessTimerOrBlockTask+0x90>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <prvProcessTimerOrBlockTask+0x50>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e000      	b.n	80089d2 <prvProcessTimerOrBlockTask+0x52>
 80089d0:	2300      	movs	r3, #0
 80089d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <prvProcessTimerOrBlockTask+0x94>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f7fe fec7 	bl	8007774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089e6:	f7ff f963 	bl	8007cb0 <xTaskResumeAll>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <prvProcessTimerOrBlockTask+0x98>)
 80089f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
}
 8008a00:	e001      	b.n	8008a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a02:	f7ff f955 	bl	8007cb0 <xTaskResumeAll>
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20001768 	.word	0x20001768
 8008a14:	2000176c 	.word	0x2000176c
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a24:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <prvGetNextExpireTime+0x44>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <prvGetNextExpireTime+0x16>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	e000      	b.n	8008a34 <prvGetNextExpireTime+0x18>
 8008a32:	2200      	movs	r2, #0
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <prvGetNextExpireTime+0x44>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	e001      	b.n	8008a50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a50:	68fb      	ldr	r3, [r7, #12]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20001764 	.word	0x20001764

08008a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a6c:	f7ff f9be 	bl	8007dec <xTaskGetTickCount>
 8008a70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <prvSampleTimeNow+0x3c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d205      	bcs.n	8008a88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a7c:	f000 f936 	bl	8008cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	e002      	b.n	8008a8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a8e:	4a04      	ldr	r2, [pc, #16]	; (8008aa0 <prvSampleTimeNow+0x3c>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a94:	68fb      	ldr	r3, [r7, #12]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20001774 	.word	0x20001774

08008aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d812      	bhi.n	8008af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d302      	bcc.n	8008ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	e01b      	b.n	8008b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <prvInsertTimerInActiveList+0x7c>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7fe f86e 	bl	8006bca <vListInsert>
 8008aee:	e012      	b.n	8008b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d206      	bcs.n	8008b06 <prvInsertTimerInActiveList+0x62>
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e007      	b.n	8008b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b06:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <prvInsertTimerInActiveList+0x80>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fe f85a 	bl	8006bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20001768 	.word	0x20001768
 8008b24:	20001764 	.word	0x20001764

08008b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b2e:	e0ca      	b.n	8008cc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	da18      	bge.n	8008b68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	3304      	adds	r3, #4
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	61fb      	str	r3, [r7, #28]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5e:	6850      	ldr	r0, [r2, #4]
 8008b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b62:	6892      	ldr	r2, [r2, #8]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f2c0 80ab 	blt.w	8008cc6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe f85b 	bl	8006c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b86:	463b      	mov	r3, r7
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ff6b 	bl	8008a64 <prvSampleTimeNow>
 8008b8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	f200 8096 	bhi.w	8008cc4 <prvProcessReceivedCommands+0x19c>
 8008b98:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <prvProcessReceivedCommands+0x78>)
 8008b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9e:	bf00      	nop
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008bc9 	.word	0x08008bc9
 8008bac:	08008c3d 	.word	0x08008c3d
 8008bb0:	08008c51 	.word	0x08008c51
 8008bb4:	08008c9b 	.word	0x08008c9b
 8008bb8:	08008bc9 	.word	0x08008bc9
 8008bbc:	08008bc9 	.word	0x08008bc9
 8008bc0:	08008c3d 	.word	0x08008c3d
 8008bc4:	08008c51 	.word	0x08008c51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	18d1      	adds	r1, r2, r3
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be8:	f7ff ff5c 	bl	8008aa4 <prvInsertTimerInActiveList>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d069      	beq.n	8008cc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d05e      	beq.n	8008cc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	441a      	add	r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	2100      	movs	r1, #0
 8008c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1a:	f7ff fe05 	bl	8008828 <xTimerGenericCommand>
 8008c1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d14f      	bne.n	8008cc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	61bb      	str	r3, [r7, #24]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c4e:	e03a      	b.n	8008cc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	617b      	str	r3, [r7, #20]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	18d1      	adds	r1, r2, r3
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c94:	f7ff ff06 	bl	8008aa4 <prvInsertTimerInActiveList>
					break;
 8008c98:	e015      	b.n	8008cc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008caa:	f000 fc01 	bl	80094b0 <vPortFree>
 8008cae:	e00a      	b.n	8008cc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cc2:	e000      	b.n	8008cc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008cc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cc6:	4b08      	ldr	r3, [pc, #32]	; (8008ce8 <prvProcessReceivedCommands+0x1c0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1d39      	adds	r1, r7, #4
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fab6 	bl	8007240 <xQueueReceive>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f47f af2a 	bne.w	8008b30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	3730      	adds	r7, #48	; 0x30
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000176c 	.word	0x2000176c

08008cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf2:	e048      	b.n	8008d86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cf4:	4b2d      	ldr	r3, [pc, #180]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfe:	4b2b      	ldr	r3, [pc, #172]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fd ff95 	bl	8006c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02e      	beq.n	8008d86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d90e      	bls.n	8008d58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d46:	4b19      	ldr	r3, [pc, #100]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7fd ff3a 	bl	8006bca <vListInsert>
 8008d56:	e016      	b.n	8008d86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	2100      	movs	r1, #0
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff fd60 	bl	8008828 <xTimerGenericCommand>
 8008d68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	603b      	str	r3, [r7, #0]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1b1      	bne.n	8008cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d90:	4b06      	ldr	r3, [pc, #24]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d96:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <prvSwitchTimerLists+0xc4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a04      	ldr	r2, [pc, #16]	; (8008dac <prvSwitchTimerLists+0xc0>)
 8008d9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d9e:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <prvSwitchTimerLists+0xc4>)
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	6013      	str	r3, [r2, #0]
}
 8008da4:	bf00      	nop
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20001764 	.word	0x20001764
 8008db0:	20001768 	.word	0x20001768

08008db4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008dba:	f000 f98b 	bl	80090d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008dbe:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <prvCheckForValidListAndQueue+0x60>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d120      	bne.n	8008e08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008dc6:	4814      	ldr	r0, [pc, #80]	; (8008e18 <prvCheckForValidListAndQueue+0x64>)
 8008dc8:	f7fd feae 	bl	8006b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008dcc:	4813      	ldr	r0, [pc, #76]	; (8008e1c <prvCheckForValidListAndQueue+0x68>)
 8008dce:	f7fd feab 	bl	8006b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dd2:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <prvCheckForValidListAndQueue+0x6c>)
 8008dd4:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <prvCheckForValidListAndQueue+0x64>)
 8008dd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008dd8:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <prvCheckForValidListAndQueue+0x70>)
 8008dda:	4a10      	ldr	r2, [pc, #64]	; (8008e1c <prvCheckForValidListAndQueue+0x68>)
 8008ddc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008dde:	2300      	movs	r3, #0
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <prvCheckForValidListAndQueue+0x74>)
 8008de4:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <prvCheckForValidListAndQueue+0x78>)
 8008de6:	2110      	movs	r1, #16
 8008de8:	200a      	movs	r0, #10
 8008dea:	f7fd ffb9 	bl	8006d60 <xQueueGenericCreateStatic>
 8008dee:	4603      	mov	r3, r0
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <prvCheckForValidListAndQueue+0x60>)
 8008df2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <prvCheckForValidListAndQueue+0x60>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <prvCheckForValidListAndQueue+0x60>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	490b      	ldr	r1, [pc, #44]	; (8008e30 <prvCheckForValidListAndQueue+0x7c>)
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fc8c 	bl	8007720 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e08:	f000 f994 	bl	8009134 <vPortExitCritical>
}
 8008e0c:	bf00      	nop
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	2000176c 	.word	0x2000176c
 8008e18:	2000173c 	.word	0x2000173c
 8008e1c:	20001750 	.word	0x20001750
 8008e20:	20001764 	.word	0x20001764
 8008e24:	20001768 	.word	0x20001768
 8008e28:	20001818 	.word	0x20001818
 8008e2c:	20001778 	.word	0x20001778
 8008e30:	08010f68 	.word	0x08010f68

08008e34 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	; 0x28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008e42:	f06f 0301 	mvn.w	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <xTimerPendFunctionCallFromISR+0x3c>)
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	f107 0114 	add.w	r1, r7, #20
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f7fe f952 	bl	8007108 <xQueueGenericSendFromISR>
 8008e64:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3728      	adds	r7, #40	; 0x28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	2000176c 	.word	0x2000176c

08008e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3b04      	subs	r3, #4
 8008e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f023 0201 	bic.w	r2, r3, #1
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ea4:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <pxPortInitialiseStack+0x64>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b14      	subs	r3, #20
 8008eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b04      	subs	r3, #4
 8008eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f06f 0202 	mvn.w	r2, #2
 8008ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b20      	subs	r3, #32
 8008ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008eca:	68fb      	ldr	r3, [r7, #12]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	08008edd 	.word	0x08008edd

08008edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <prvTaskExitError+0x54>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eee:	d00a      	beq.n	8008f06 <prvTaskExitError+0x2a>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60fb      	str	r3, [r7, #12]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <prvTaskExitError+0x28>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
}
 8008f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f1a:	bf00      	nop
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0fc      	beq.n	8008f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	2000008c 	.word	0x2000008c
	...

08008f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <pxCurrentTCBConst2>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	f380 8809 	msr	PSP, r0
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	4770      	bx	lr
 8008f5c:	f3af 8000 	nop.w

08008f60 <pxCurrentTCBConst2>:
 8008f60:	2000123c 	.word	0x2000123c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f68:	4808      	ldr	r0, [pc, #32]	; (8008f8c <prvPortStartFirstTask+0x24>)
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	6800      	ldr	r0, [r0, #0]
 8008f6e:	f380 8808 	msr	MSP, r0
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f380 8814 	msr	CONTROL, r0
 8008f7a:	b662      	cpsie	i
 8008f7c:	b661      	cpsie	f
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	df00      	svc	0
 8008f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f8a:	bf00      	nop
 8008f8c:	e000ed08 	.word	0xe000ed08

08008f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f96:	4b46      	ldr	r3, [pc, #280]	; (80090b0 <xPortStartScheduler+0x120>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a46      	ldr	r2, [pc, #280]	; (80090b4 <xPortStartScheduler+0x124>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10a      	bne.n	8008fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	613b      	str	r3, [r7, #16]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fb6:	4b3e      	ldr	r3, [pc, #248]	; (80090b0 <xPortStartScheduler+0x120>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a3f      	ldr	r2, [pc, #252]	; (80090b8 <xPortStartScheduler+0x128>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d10a      	bne.n	8008fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	60fb      	str	r3, [r7, #12]
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fd6:	4b39      	ldr	r3, [pc, #228]	; (80090bc <xPortStartScheduler+0x12c>)
 8008fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	4b31      	ldr	r3, [pc, #196]	; (80090c0 <xPortStartScheduler+0x130>)
 8008ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ffe:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <xPortStartScheduler+0x134>)
 8009000:	2207      	movs	r2, #7
 8009002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009004:	e009      	b.n	800901a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009006:	4b2f      	ldr	r3, [pc, #188]	; (80090c4 <xPortStartScheduler+0x134>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3b01      	subs	r3, #1
 800900c:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <xPortStartScheduler+0x134>)
 800900e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009022:	2b80      	cmp	r3, #128	; 0x80
 8009024:	d0ef      	beq.n	8009006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009026:	4b27      	ldr	r3, [pc, #156]	; (80090c4 <xPortStartScheduler+0x134>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f1c3 0307 	rsb	r3, r3, #7
 800902e:	2b04      	cmp	r3, #4
 8009030:	d00a      	beq.n	8009048 <xPortStartScheduler+0xb8>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60bb      	str	r3, [r7, #8]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009048:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <xPortStartScheduler+0x134>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	4a1d      	ldr	r2, [pc, #116]	; (80090c4 <xPortStartScheduler+0x134>)
 8009050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009052:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <xPortStartScheduler+0x134>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800905a:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <xPortStartScheduler+0x134>)
 800905c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	b2da      	uxtb	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009066:	4b18      	ldr	r3, [pc, #96]	; (80090c8 <xPortStartScheduler+0x138>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a17      	ldr	r2, [pc, #92]	; (80090c8 <xPortStartScheduler+0x138>)
 800906c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009072:	4b15      	ldr	r3, [pc, #84]	; (80090c8 <xPortStartScheduler+0x138>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a14      	ldr	r2, [pc, #80]	; (80090c8 <xPortStartScheduler+0x138>)
 8009078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800907c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800907e:	f000 f8dd 	bl	800923c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <xPortStartScheduler+0x13c>)
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009088:	f000 f8fc 	bl	8009284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800908c:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <xPortStartScheduler+0x140>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a0f      	ldr	r2, [pc, #60]	; (80090d0 <xPortStartScheduler+0x140>)
 8009092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009098:	f7ff ff66 	bl	8008f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800909c:	f7fe ff70 	bl	8007f80 <vTaskSwitchContext>
	prvTaskExitError();
 80090a0:	f7ff ff1c 	bl	8008edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	e000ed00 	.word	0xe000ed00
 80090b4:	410fc271 	.word	0x410fc271
 80090b8:	410fc270 	.word	0x410fc270
 80090bc:	e000e400 	.word	0xe000e400
 80090c0:	20001868 	.word	0x20001868
 80090c4:	2000186c 	.word	0x2000186c
 80090c8:	e000ed20 	.word	0xe000ed20
 80090cc:	2000008c 	.word	0x2000008c
 80090d0:	e000ef34 	.word	0xe000ef34

080090d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	607b      	str	r3, [r7, #4]
}
 80090ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090ee:	4b0f      	ldr	r3, [pc, #60]	; (800912c <vPortEnterCritical+0x58>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a0d      	ldr	r2, [pc, #52]	; (800912c <vPortEnterCritical+0x58>)
 80090f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <vPortEnterCritical+0x58>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d10f      	bne.n	8009120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009100:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <vPortEnterCritical+0x5c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <vPortEnterCritical+0x4c>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	603b      	str	r3, [r7, #0]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <vPortEnterCritical+0x4a>
	}
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	2000008c 	.word	0x2000008c
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <vPortExitCritical+0x50>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <vPortExitCritical+0x24>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	607b      	str	r3, [r7, #4]
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <vPortExitCritical+0x50>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3b01      	subs	r3, #1
 800915e:	4a09      	ldr	r2, [pc, #36]	; (8009184 <vPortExitCritical+0x50>)
 8009160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <vPortExitCritical+0x50>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <vPortExitCritical+0x42>
 800916a:	2300      	movs	r3, #0
 800916c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	f383 8811 	msr	BASEPRI, r3
}
 8009174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	2000008c 	.word	0x2000008c
	...

08009190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009190:	f3ef 8009 	mrs	r0, PSP
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <pxCurrentTCBConst>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	f01e 0f10 	tst.w	lr, #16
 80091a0:	bf08      	it	eq
 80091a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091b4:	f380 8811 	msr	BASEPRI, r0
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f7fe fede 	bl	8007f80 <vTaskSwitchContext>
 80091c4:	f04f 0000 	mov.w	r0, #0
 80091c8:	f380 8811 	msr	BASEPRI, r0
 80091cc:	bc09      	pop	{r0, r3}
 80091ce:	6819      	ldr	r1, [r3, #0]
 80091d0:	6808      	ldr	r0, [r1, #0]
 80091d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d6:	f01e 0f10 	tst.w	lr, #16
 80091da:	bf08      	it	eq
 80091dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091e0:	f380 8809 	msr	PSP, r0
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w

080091f0 <pxCurrentTCBConst>:
 80091f0:	2000123c 	.word	0x2000123c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop

080091f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009212:	f7fe fdfb 	bl	8007e0c <xTaskIncrementTick>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <xPortSysTickHandler+0x40>)
 800921e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f383 8811 	msr	BASEPRI, r3
}
 800922e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <vPortSetupTimerInterrupt+0x34>)
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009246:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <vPortSetupTimerInterrupt+0x38>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800924c:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <vPortSetupTimerInterrupt+0x3c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a0a      	ldr	r2, [pc, #40]	; (800927c <vPortSetupTimerInterrupt+0x40>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	099b      	lsrs	r3, r3, #6
 8009258:	4a09      	ldr	r2, [pc, #36]	; (8009280 <vPortSetupTimerInterrupt+0x44>)
 800925a:	3b01      	subs	r3, #1
 800925c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <vPortSetupTimerInterrupt+0x34>)
 8009260:	2207      	movs	r2, #7
 8009262:	601a      	str	r2, [r3, #0]
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	e000e010 	.word	0xe000e010
 8009274:	e000e018 	.word	0xe000e018
 8009278:	20000080 	.word	0x20000080
 800927c:	10624dd3 	.word	0x10624dd3
 8009280:	e000e014 	.word	0xe000e014

08009284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009294 <vPortEnableVFP+0x10>
 8009288:	6801      	ldr	r1, [r0, #0]
 800928a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800928e:	6001      	str	r1, [r0, #0]
 8009290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009292:	bf00      	nop
 8009294:	e000ed88 	.word	0xe000ed88

08009298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800929e:	f3ef 8305 	mrs	r3, IPSR
 80092a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d914      	bls.n	80092d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092aa:	4a17      	ldr	r2, [pc, #92]	; (8009308 <vPortValidateInterruptPriority+0x70>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092b4:	4b15      	ldr	r3, [pc, #84]	; (800930c <vPortValidateInterruptPriority+0x74>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	7afa      	ldrb	r2, [r7, #11]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d20a      	bcs.n	80092d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	607b      	str	r3, [r7, #4]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092d4:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <vPortValidateInterruptPriority+0x78>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092dc:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <vPortValidateInterruptPriority+0x7c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d90a      	bls.n	80092fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	603b      	str	r3, [r7, #0]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <vPortValidateInterruptPriority+0x60>
	}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	e000e3f0 	.word	0xe000e3f0
 800930c:	20001868 	.word	0x20001868
 8009310:	e000ed0c 	.word	0xe000ed0c
 8009314:	2000186c 	.word	0x2000186c

08009318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08a      	sub	sp, #40	; 0x28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009324:	f7fe fcb6 	bl	8007c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009328:	4b5b      	ldr	r3, [pc, #364]	; (8009498 <pvPortMalloc+0x180>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009330:	f000 f920 	bl	8009574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009334:	4b59      	ldr	r3, [pc, #356]	; (800949c <pvPortMalloc+0x184>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8093 	bne.w	8009468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01d      	beq.n	8009384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009348:	2208      	movs	r2, #8
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	2b00      	cmp	r3, #0
 8009358:	d014      	beq.n	8009384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f023 0307 	bic.w	r3, r3, #7
 8009360:	3308      	adds	r3, #8
 8009362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <pvPortMalloc+0x6c>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	617b      	str	r3, [r7, #20]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d06e      	beq.n	8009468 <pvPortMalloc+0x150>
 800938a:	4b45      	ldr	r3, [pc, #276]	; (80094a0 <pvPortMalloc+0x188>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d869      	bhi.n	8009468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009394:	4b43      	ldr	r3, [pc, #268]	; (80094a4 <pvPortMalloc+0x18c>)
 8009396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009398:	4b42      	ldr	r3, [pc, #264]	; (80094a4 <pvPortMalloc+0x18c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800939e:	e004      	b.n	80093aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d903      	bls.n	80093bc <pvPortMalloc+0xa4>
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f1      	bne.n	80093a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093bc:	4b36      	ldr	r3, [pc, #216]	; (8009498 <pvPortMalloc+0x180>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d050      	beq.n	8009468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2208      	movs	r2, #8
 80093cc:	4413      	add	r3, r2
 80093ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	2308      	movs	r3, #8
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d91f      	bls.n	8009428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4413      	add	r3, r2
 80093ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <pvPortMalloc+0xf8>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	613b      	str	r3, [r7, #16]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009422:	69b8      	ldr	r0, [r7, #24]
 8009424:	f000 f908 	bl	8009638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009428:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <pvPortMalloc+0x188>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	4a1b      	ldr	r2, [pc, #108]	; (80094a0 <pvPortMalloc+0x188>)
 8009434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009436:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <pvPortMalloc+0x188>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b1b      	ldr	r3, [pc, #108]	; (80094a8 <pvPortMalloc+0x190>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d203      	bcs.n	800944a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009442:	4b17      	ldr	r3, [pc, #92]	; (80094a0 <pvPortMalloc+0x188>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a18      	ldr	r2, [pc, #96]	; (80094a8 <pvPortMalloc+0x190>)
 8009448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <pvPortMalloc+0x184>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	431a      	orrs	r2, r3
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <pvPortMalloc+0x194>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	4a11      	ldr	r2, [pc, #68]	; (80094ac <pvPortMalloc+0x194>)
 8009466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009468:	f7fe fc22 	bl	8007cb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <pvPortMalloc+0x174>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60fb      	str	r3, [r7, #12]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <pvPortMalloc+0x172>
	return pvReturn;
 800948c:	69fb      	ldr	r3, [r7, #28]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3728      	adds	r7, #40	; 0x28
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20005478 	.word	0x20005478
 800949c:	2000548c 	.word	0x2000548c
 80094a0:	2000547c 	.word	0x2000547c
 80094a4:	20005470 	.word	0x20005470
 80094a8:	20005480 	.word	0x20005480
 80094ac:	20005484 	.word	0x20005484

080094b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d04d      	beq.n	800955e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094c2:	2308      	movs	r3, #8
 80094c4:	425b      	negs	r3, r3
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4413      	add	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	4b24      	ldr	r3, [pc, #144]	; (8009568 <vPortFree+0xb8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4013      	ands	r3, r2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <vPortFree+0x44>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <vPortFree+0x62>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60bb      	str	r3, [r7, #8]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <vPortFree+0xb8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4013      	ands	r3, r2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01e      	beq.n	800955e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d11a      	bne.n	800955e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <vPortFree+0xb8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	43db      	mvns	r3, r3
 8009532:	401a      	ands	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009538:	f7fe fbac 	bl	8007c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <vPortFree+0xbc>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4413      	add	r3, r2
 8009546:	4a09      	ldr	r2, [pc, #36]	; (800956c <vPortFree+0xbc>)
 8009548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800954a:	6938      	ldr	r0, [r7, #16]
 800954c:	f000 f874 	bl	8009638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <vPortFree+0xc0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	4a06      	ldr	r2, [pc, #24]	; (8009570 <vPortFree+0xc0>)
 8009558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800955a:	f7fe fba9 	bl	8007cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800955e:	bf00      	nop
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000548c 	.word	0x2000548c
 800956c:	2000547c 	.word	0x2000547c
 8009570:	20005488 	.word	0x20005488

08009574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800957a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800957e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009580:	4b27      	ldr	r3, [pc, #156]	; (8009620 <prvHeapInit+0xac>)
 8009582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00c      	beq.n	80095a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3307      	adds	r3, #7
 8009592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0307 	bic.w	r3, r3, #7
 800959a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	4a1f      	ldr	r2, [pc, #124]	; (8009620 <prvHeapInit+0xac>)
 80095a4:	4413      	add	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095ac:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <prvHeapInit+0xb0>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <prvHeapInit+0xb0>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4413      	add	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095c0:	2208      	movs	r2, #8
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0307 	bic.w	r3, r3, #7
 80095ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4a15      	ldr	r2, [pc, #84]	; (8009628 <prvHeapInit+0xb4>)
 80095d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095d6:	4b14      	ldr	r3, [pc, #80]	; (8009628 <prvHeapInit+0xb4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095de:	4b12      	ldr	r3, [pc, #72]	; (8009628 <prvHeapInit+0xb4>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095f4:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <prvHeapInit+0xb4>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	4a0a      	ldr	r2, [pc, #40]	; (800962c <prvHeapInit+0xb8>)
 8009602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	4a09      	ldr	r2, [pc, #36]	; (8009630 <prvHeapInit+0xbc>)
 800960a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800960c:	4b09      	ldr	r3, [pc, #36]	; (8009634 <prvHeapInit+0xc0>)
 800960e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	20001870 	.word	0x20001870
 8009624:	20005470 	.word	0x20005470
 8009628:	20005478 	.word	0x20005478
 800962c:	20005480 	.word	0x20005480
 8009630:	2000547c 	.word	0x2000547c
 8009634:	2000548c 	.word	0x2000548c

08009638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009640:	4b28      	ldr	r3, [pc, #160]	; (80096e4 <prvInsertBlockIntoFreeList+0xac>)
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e002      	b.n	800964c <prvInsertBlockIntoFreeList+0x14>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	429a      	cmp	r2, r3
 8009654:	d8f7      	bhi.n	8009646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	4413      	add	r3, r2
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	429a      	cmp	r2, r3
 8009666:	d108      	bne.n	800967a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	441a      	add	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	441a      	add	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d118      	bne.n	80096c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d00d      	beq.n	80096b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	441a      	add	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	e008      	b.n	80096c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096b6:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <prvInsertBlockIntoFreeList+0xb0>)
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e003      	b.n	80096c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d002      	beq.n	80096d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096d6:	bf00      	nop
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20005470 	.word	0x20005470
 80096e8:	20005478 	.word	0x20005478

080096ec <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f8af 	bl	800a858 <cJSON_IsNumber>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <cJSON_GetNumberValue+0x34>)
 8009706:	e002      	b.n	800970e <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 800970e:	ec43 2b17 	vmov	d7, r2, r3
 8009712:	eeb0 0a47 	vmov.f32	s0, s14
 8009716:	eef0 0a67 	vmov.f32	s1, s15
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	7ff80000 	.word	0x7ff80000

08009724 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <case_insensitive_strcmp+0x16>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800973a:	2301      	movs	r3, #1
 800973c:	e056      	b.n	80097ec <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d10d      	bne.n	8009762 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009746:	2300      	movs	r3, #0
 8009748:	e050      	b.n	80097ec <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8009752:	2300      	movs	r3, #0
 8009754:	e04a      	b.n	80097ec <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3301      	adds	r3, #1
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3301      	adds	r3, #1
 8009760:	603b      	str	r3, [r7, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	73fb      	strb	r3, [r7, #15]
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	3301      	adds	r3, #1
 800976c:	4a22      	ldr	r2, [pc, #136]	; (80097f8 <case_insensitive_strcmp+0xd4>)
 800976e:	4413      	add	r3, r2
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d103      	bne.n	8009782 <case_insensitive_strcmp+0x5e>
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	f103 0220 	add.w	r2, r3, #32
 8009780:	e000      	b.n	8009784 <case_insensitive_strcmp+0x60>
 8009782:	7bfa      	ldrb	r2, [r7, #15]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	73bb      	strb	r3, [r7, #14]
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	3301      	adds	r3, #1
 800978e:	491a      	ldr	r1, [pc, #104]	; (80097f8 <case_insensitive_strcmp+0xd4>)
 8009790:	440b      	add	r3, r1
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	2b01      	cmp	r3, #1
 800979a:	d102      	bne.n	80097a2 <case_insensitive_strcmp+0x7e>
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	3320      	adds	r3, #32
 80097a0:	e000      	b.n	80097a4 <case_insensitive_strcmp+0x80>
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d0d0      	beq.n	800974a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	737b      	strb	r3, [r7, #13]
 80097ae:	7b7b      	ldrb	r3, [r7, #13]
 80097b0:	3301      	adds	r3, #1
 80097b2:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <case_insensitive_strcmp+0xd4>)
 80097b4:	4413      	add	r3, r2
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d103      	bne.n	80097c8 <case_insensitive_strcmp+0xa4>
 80097c0:	7b7b      	ldrb	r3, [r7, #13]
 80097c2:	f103 0220 	add.w	r2, r3, #32
 80097c6:	e000      	b.n	80097ca <case_insensitive_strcmp+0xa6>
 80097c8:	7b7a      	ldrb	r2, [r7, #13]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	733b      	strb	r3, [r7, #12]
 80097d0:	7b3b      	ldrb	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	4908      	ldr	r1, [pc, #32]	; (80097f8 <case_insensitive_strcmp+0xd4>)
 80097d6:	440b      	add	r3, r1
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d102      	bne.n	80097e8 <case_insensitive_strcmp+0xc4>
 80097e2:	7b3b      	ldrb	r3, [r7, #12]
 80097e4:	3320      	adds	r3, #32
 80097e6:	e000      	b.n	80097ea <case_insensitive_strcmp+0xc6>
 80097e8:	7b3b      	ldrb	r3, [r7, #12]
 80097ea:	1ad3      	subs	r3, r2, r3
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	080110a8 	.word	0x080110a8

080097fc <cJSON_InitHooks>:

    return copy;
}

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d109      	bne.n	800981e <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 800980a:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <cJSON_InitHooks+0x78>)
 800980c:	4a1a      	ldr	r2, [pc, #104]	; (8009878 <cJSON_InitHooks+0x7c>)
 800980e:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 8009810:	4b18      	ldr	r3, [pc, #96]	; (8009874 <cJSON_InitHooks+0x78>)
 8009812:	4a1a      	ldr	r2, [pc, #104]	; (800987c <cJSON_InitHooks+0x80>)
 8009814:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 8009816:	4b17      	ldr	r3, [pc, #92]	; (8009874 <cJSON_InitHooks+0x78>)
 8009818:	4a19      	ldr	r2, [pc, #100]	; (8009880 <cJSON_InitHooks+0x84>)
 800981a:	609a      	str	r2, [r3, #8]
        return;
 800981c:	e025      	b.n	800986a <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 800981e:	4b15      	ldr	r3, [pc, #84]	; (8009874 <cJSON_InitHooks+0x78>)
 8009820:	4a15      	ldr	r2, [pc, #84]	; (8009878 <cJSON_InitHooks+0x7c>)
 8009822:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a10      	ldr	r2, [pc, #64]	; (8009874 <cJSON_InitHooks+0x78>)
 8009832:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <cJSON_InitHooks+0x78>)
 8009836:	4a11      	ldr	r2, [pc, #68]	; (800987c <cJSON_InitHooks+0x80>)
 8009838:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	4a0b      	ldr	r2, [pc, #44]	; (8009874 <cJSON_InitHooks+0x78>)
 8009848:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <cJSON_InitHooks+0x78>)
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <cJSON_InitHooks+0x78>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a08      	ldr	r2, [pc, #32]	; (8009878 <cJSON_InitHooks+0x7c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d107      	bne.n	800986a <cJSON_InitHooks+0x6e>
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <cJSON_InitHooks+0x78>)
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	4a07      	ldr	r2, [pc, #28]	; (800987c <cJSON_InitHooks+0x80>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d102      	bne.n	800986a <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 8009864:	4b03      	ldr	r3, [pc, #12]	; (8009874 <cJSON_InitHooks+0x78>)
 8009866:	4a06      	ldr	r2, [pc, #24]	; (8009880 <cJSON_InitHooks+0x84>)
 8009868:	609a      	str	r2, [r3, #8]
    }
}
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000090 	.word	0x20000090
 8009878:	0800b2f1 	.word	0x0800b2f1
 800987c:	0800b301 	.word	0x0800b301
 8009880:	0800b469 	.word	0x0800b469

08009884 <cJSON_New_Item>:

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2028      	movs	r0, #40	; 0x28
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
    if (node)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800989c:	2228      	movs	r2, #40	; 0x28
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f003 fcd5 	bl	800d250 <memset>
    }

    return node;
 80098a6:	68fb      	ldr	r3, [r7, #12]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80098bc:	e037      	b.n	800992e <cJSON_Delete+0x7e>
    {
        next = item->next;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d108      	bne.n	80098e2 <cJSON_Delete+0x32>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff ffe7 	bl	80098b0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <cJSON_Delete+0x52>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80098f6:	4b12      	ldr	r3, [pc, #72]	; (8009940 <cJSON_Delete+0x90>)
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	6912      	ldr	r2, [r2, #16]
 80098fe:	4610      	mov	r0, r2
 8009900:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800990a:	2b00      	cmp	r3, #0
 800990c:	d109      	bne.n	8009922 <cJSON_Delete+0x72>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <cJSON_Delete+0x90>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6a12      	ldr	r2, [r2, #32]
 800991e:	4610      	mov	r0, r2
 8009920:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <cJSON_Delete+0x90>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
        item = next;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1c4      	bne.n	80098be <cJSON_Delete+0xe>
    }
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000090 	.word	0x20000090

08009944 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8009948:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800994a:	4618      	mov	r0, r3
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	0000      	movs	r0, r0
	...

08009958 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b098      	sub	sp, #96	; 0x60
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
    double number = 0;
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8009972:	f7ff ffe7 	bl	8009944 <get_decimal_point>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <parse_number+0x36>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <parse_number+0x3a>
    {
        return false;
 800998e:	2300      	movs	r3, #0
 8009990:	e0a0      	b.n	8009ad4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8009992:	2300      	movs	r3, #0
 8009994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009996:	e03d      	b.n	8009a14 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	6899      	ldr	r1, [r3, #8]
 80099a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a2:	440b      	add	r3, r1
 80099a4:	4413      	add	r3, r2
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b45      	cmp	r3, #69	; 0x45
 80099aa:	dc17      	bgt.n	80099dc <parse_number+0x84>
 80099ac:	2b2b      	cmp	r3, #43	; 0x2b
 80099ae:	db40      	blt.n	8009a32 <parse_number+0xda>
 80099b0:	3b2b      	subs	r3, #43	; 0x2b
 80099b2:	2201      	movs	r2, #1
 80099b4:	409a      	lsls	r2, r3
 80099b6:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <parse_number+0x190>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bf14      	ite	ne
 80099be:	2301      	movne	r3, #1
 80099c0:	2300      	moveq	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <parse_number+0x88>
 80099c8:	f002 0308 	and.w	r3, r2, #8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d111      	bne.n	80099fe <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80099da:	e02a      	b.n	8009a32 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80099dc:	2b65      	cmp	r3, #101	; 0x65
 80099de:	d128      	bne.n	8009a32 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	6899      	ldr	r1, [r3, #8]
 80099e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ea:	440b      	add	r3, r1
 80099ec:	4413      	add	r3, r2
 80099ee:	7819      	ldrb	r1, [r3, #0]
 80099f0:	f107 0208 	add.w	r2, r7, #8
 80099f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f6:	4413      	add	r3, r2
 80099f8:	460a      	mov	r2, r1
 80099fa:	701a      	strb	r2, [r3, #0]
                break;
 80099fc:	e007      	b.n	8009a0e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80099fe:	f107 0208 	add.w	r2, r7, #8
 8009a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a04:	4413      	add	r3, r2
 8009a06:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009a0a:	701a      	strb	r2, [r3, #0]
                break;
 8009a0c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8009a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a10:	3301      	adds	r3, #1
 8009a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a16:	2b3e      	cmp	r3, #62	; 0x3e
 8009a18:	d80d      	bhi.n	8009a36 <parse_number+0xde>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <parse_number+0xde>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a26:	441a      	add	r2, r3
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3b3      	bcc.n	8009998 <parse_number+0x40>
        }
    }
loop_end:
 8009a30:	e001      	b.n	8009a36 <parse_number+0xde>
                goto loop_end;
 8009a32:	bf00      	nop
 8009a34:	e000      	b.n	8009a38 <parse_number+0xe0>
loop_end:
 8009a36:	bf00      	nop
    number_c_string[i] = '\0';
 8009a38:	f107 0208 	add.w	r2, r7, #8
 8009a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a3e:	4413      	add	r3, r2
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8009a44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f002 fb54 	bl	800c0fc <strtod>
 8009a54:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8009a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a5a:	f107 0308 	add.w	r3, r7, #8
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d101      	bne.n	8009a66 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8009a62:	2300      	movs	r3, #0
 8009a64:	e036      	b.n	8009ad4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a6c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8009a70:	a31b      	add	r3, pc, #108	; (adr r3, 8009ae0 <parse_number+0x188>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a7a:	f7f7 f85b 	bl	8000b34 <__aeabi_dcmpge>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009a8a:	615a      	str	r2, [r3, #20]
 8009a8c:	e015      	b.n	8009aba <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8009a8e:	f04f 0200 	mov.w	r2, #0
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <parse_number+0x194>)
 8009a94:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a98:	f7f7 f842 	bl	8000b20 <__aeabi_dcmple>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aa8:	615a      	str	r2, [r3, #20]
 8009aaa:	e006      	b.n	8009aba <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8009aac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009ab0:	f7f7 f86a 	bl	8000b88 <__aeabi_d2iz>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2208      	movs	r2, #8
 8009abe:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ac6:	f107 0208 	add.w	r2, r7, #8
 8009aca:	1a8a      	subs	r2, r1, r2
 8009acc:	441a      	add	r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	609a      	str	r2, [r3, #8]
    return true;
 8009ad2:	2301      	movs	r3, #1
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3760      	adds	r7, #96	; 0x60
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	f3af 8000 	nop.w
 8009ae0:	ffc00000 	.word	0xffc00000
 8009ae4:	41dfffff 	.word	0x41dfffff
 8009ae8:	04007fe5 	.word	0x04007fe5
 8009aec:	c1e00000 	.word	0xc1e00000

08009af0 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
 8009b04:	e04c      	b.n	8009ba0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8009b10:	d90f      	bls.n	8009b32 <parse_hex4+0x42>
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4413      	add	r3, r2
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b39      	cmp	r3, #57	; 0x39
 8009b1c:	d809      	bhi.n	8009b32 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4413      	add	r3, r2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3b30      	subs	r3, #48	; 0x30
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e02d      	b.n	8009b8e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4413      	add	r3, r2
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2b40      	cmp	r3, #64	; 0x40
 8009b3c:	d90f      	bls.n	8009b5e <parse_hex4+0x6e>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4413      	add	r3, r2
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b46      	cmp	r3, #70	; 0x46
 8009b48:	d809      	bhi.n	8009b5e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	4413      	add	r3, r2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	3b37      	subs	r3, #55	; 0x37
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e017      	b.n	8009b8e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	4413      	add	r3, r2
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b60      	cmp	r3, #96	; 0x60
 8009b68:	d90f      	bls.n	8009b8a <parse_hex4+0x9a>
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b66      	cmp	r3, #102	; 0x66
 8009b74:	d809      	bhi.n	8009b8a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	3b57      	subs	r3, #87	; 0x57
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	e001      	b.n	8009b8e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e00c      	b.n	8009ba8 <parse_hex4+0xb8>
        }

        if (i < 3)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d802      	bhi.n	8009b9a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60bb      	str	r3, [r7, #8]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d9af      	bls.n	8009b06 <parse_hex4+0x16>
        }
    }

    return h;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	; 0x28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	f340 80b7 	ble.w	8009d5e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff ff7b 	bl	8009af0 <parse_hex4>
 8009bfa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8009c02:	d304      	bcc.n	8009c0e <utf16_literal_to_utf8+0x5a>
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8009c0a:	f0c0 80aa 	bcc.w	8009d62 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8009c14:	d337      	bcc.n	8009c86 <utf16_literal_to_utf8+0xd2>
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8009c1c:	d233      	bcs.n	8009c86 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	3306      	adds	r3, #6
 8009c22:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8009c28:	230c      	movs	r3, #12
 8009c2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	f340 8096 	ble.w	8009d66 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b5c      	cmp	r3, #92	; 0x5c
 8009c40:	f040 8093 	bne.w	8009d6a <utf16_literal_to_utf8+0x1b6>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	3301      	adds	r3, #1
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b75      	cmp	r3, #117	; 0x75
 8009c4c:	f040 808d 	bne.w	8009d6a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3302      	adds	r3, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff ff4b 	bl	8009af0 <parse_hex4>
 8009c5a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8009c62:	f0c0 8084 	bcc.w	8009d6e <utf16_literal_to_utf8+0x1ba>
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8009c6c:	d27f      	bcs.n	8009d6e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	029a      	lsls	r2, r3, #10
 8009c72:	4b43      	ldr	r3, [pc, #268]	; (8009d80 <utf16_literal_to_utf8+0x1cc>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8009c84:	e004      	b.n	8009c90 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8009c86:	2306      	movs	r3, #6
 8009c88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	2b7f      	cmp	r3, #127	; 0x7f
 8009c94:	d803      	bhi.n	8009c9e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c9c:	e01f      	b.n	8009cde <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca4:	d206      	bcs.n	8009cb4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8009cac:	23c0      	movs	r3, #192	; 0xc0
 8009cae:	f887 3020 	strb.w	r3, [r7, #32]
 8009cb2:	e014      	b.n	8009cde <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cba:	d206      	bcs.n	8009cca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8009cc2:	23e0      	movs	r3, #224	; 0xe0
 8009cc4:	f887 3020 	strb.w	r3, [r7, #32]
 8009cc8:	e009      	b.n	8009cde <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8009cd0:	d24f      	bcs.n	8009d72 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8009cd8:	23f0      	movs	r3, #240	; 0xf0
 8009cda:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8009cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ce8:	e015      	b.n	8009d16 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009cfc:	440b      	add	r3, r1
 8009cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	099b      	lsrs	r3, r3, #6
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8009d0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d10:	3b01      	subs	r3, #1
 8009d12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009d16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8009d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d909      	bls.n	8009d3a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	b2d9      	uxtb	r1, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e007      	b.n	8009d4a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d52:	441a      	add	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8009d58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009d5c:	e00b      	b.n	8009d76 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8009d5e:	bf00      	nop
 8009d60:	e008      	b.n	8009d74 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8009d62:	bf00      	nop
 8009d64:	e006      	b.n	8009d74 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8009d66:	bf00      	nop
 8009d68:	e004      	b.n	8009d74 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8009d6a:	bf00      	nop
 8009d6c:	e002      	b.n	8009d74 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8009d6e:	bf00      	nop
 8009d70:	e000      	b.n	8009d74 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8009d72:	bf00      	nop

fail:
    return 0;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3728      	adds	r7, #40	; 0x28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	000ffc00 	.word	0x000ffc00

08009d84 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08a      	sub	sp, #40	; 0x28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4413      	add	r3, r2
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	3301      	adds	r3, #1
 8009da6:	4413      	add	r3, r2
 8009da8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	4413      	add	r3, r2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b22      	cmp	r3, #34	; 0x22
 8009dc0:	f040 8103 	bne.w	8009fca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8009dcc:	e017      	b.n	8009dfe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b5c      	cmp	r3, #92	; 0x5c
 8009dd4:	d110      	bne.n	8009df8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f080 80f1 	bcs.w	8009fce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61bb      	str	r3, [r7, #24]
                input_end++;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	3301      	adds	r3, #1
 8009df6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6a3a      	ldr	r2, [r7, #32]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d203      	bcs.n	8009e18 <parse_string+0x94>
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b22      	cmp	r3, #34	; 0x22
 8009e16:	d1da      	bne.n	8009dce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6a3a      	ldr	r2, [r7, #32]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	461a      	mov	r2, r3
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	f080 80d3 	bcs.w	8009fd2 <parse_string+0x24e>
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b22      	cmp	r3, #34	; 0x22
 8009e32:	f040 80ce 	bne.w	8009fd2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	4413      	add	r3, r2
 8009e40:	6a3a      	ldr	r2, [r7, #32]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	3201      	adds	r2, #1
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80ba 	beq.w	8009fd6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8009e66:	e094      	b.n	8009f92 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e6e:	d008      	beq.n	8009e82 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	1c53      	adds	r3, r2, #1
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	1c59      	adds	r1, r3, #1
 8009e7a:	60f9      	str	r1, [r7, #12]
 8009e7c:	7812      	ldrb	r2, [r2, #0]
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e087      	b.n	8009f92 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8009e82:	2302      	movs	r3, #2
 8009e84:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8009e86:	6a3a      	ldr	r2, [r7, #32]
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f340 80a4 	ble.w	8009fda <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	3301      	adds	r3, #1
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b75      	cmp	r3, #117	; 0x75
 8009e9a:	f300 80a0 	bgt.w	8009fde <parse_string+0x25a>
 8009e9e:	2b5c      	cmp	r3, #92	; 0x5c
 8009ea0:	da04      	bge.n	8009eac <parse_string+0x128>
 8009ea2:	2b22      	cmp	r3, #34	; 0x22
 8009ea4:	d05c      	beq.n	8009f60 <parse_string+0x1dc>
 8009ea6:	2b2f      	cmp	r3, #47	; 0x2f
 8009ea8:	d05a      	beq.n	8009f60 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8009eaa:	e098      	b.n	8009fde <parse_string+0x25a>
            switch (input_pointer[1])
 8009eac:	3b5c      	subs	r3, #92	; 0x5c
 8009eae:	2b19      	cmp	r3, #25
 8009eb0:	f200 8095 	bhi.w	8009fde <parse_string+0x25a>
 8009eb4:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <parse_string+0x138>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009f61 	.word	0x08009f61
 8009ec0:	08009fdf 	.word	0x08009fdf
 8009ec4:	08009fdf 	.word	0x08009fdf
 8009ec8:	08009fdf 	.word	0x08009fdf
 8009ecc:	08009fdf 	.word	0x08009fdf
 8009ed0:	08009fdf 	.word	0x08009fdf
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009fdf 	.word	0x08009fdf
 8009edc:	08009fdf 	.word	0x08009fdf
 8009ee0:	08009fdf 	.word	0x08009fdf
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009fdf 	.word	0x08009fdf
 8009eec:	08009fdf 	.word	0x08009fdf
 8009ef0:	08009fdf 	.word	0x08009fdf
 8009ef4:	08009fdf 	.word	0x08009fdf
 8009ef8:	08009fdf 	.word	0x08009fdf
 8009efc:	08009fdf 	.word	0x08009fdf
 8009f00:	08009fdf 	.word	0x08009fdf
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009fdf 	.word	0x08009fdf
 8009f0c:	08009fdf 	.word	0x08009fdf
 8009f10:	08009fdf 	.word	0x08009fdf
 8009f14:	08009f49 	.word	0x08009f49
 8009f18:	08009fdf 	.word	0x08009fdf
 8009f1c:	08009f55 	.word	0x08009f55
 8009f20:	08009f71 	.word	0x08009f71
                    *output_pointer++ = '\b';
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	60fa      	str	r2, [r7, #12]
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	701a      	strb	r2, [r3, #0]
                    break;
 8009f2e:	e02c      	b.n	8009f8a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	60fa      	str	r2, [r7, #12]
 8009f36:	220c      	movs	r2, #12
 8009f38:	701a      	strb	r2, [r3, #0]
                    break;
 8009f3a:	e026      	b.n	8009f8a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	60fa      	str	r2, [r7, #12]
 8009f42:	220a      	movs	r2, #10
 8009f44:	701a      	strb	r2, [r3, #0]
                    break;
 8009f46:	e020      	b.n	8009f8a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	60fa      	str	r2, [r7, #12]
 8009f4e:	220d      	movs	r2, #13
 8009f50:	701a      	strb	r2, [r3, #0]
                    break;
 8009f52:	e01a      	b.n	8009f8a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	60fa      	str	r2, [r7, #12]
 8009f5a:	2209      	movs	r2, #9
 8009f5c:	701a      	strb	r2, [r3, #0]
                    break;
 8009f5e:	e014      	b.n	8009f8a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	1c59      	adds	r1, r3, #1
 8009f68:	60f9      	str	r1, [r7, #12]
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	701a      	strb	r2, [r3, #0]
                    break;
 8009f6e:	e00c      	b.n	8009f8a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	461a      	mov	r2, r3
 8009f76:	6a39      	ldr	r1, [r7, #32]
 8009f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f7a:	f7ff fe1b 	bl	8009bb4 <utf16_literal_to_utf8>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d02c      	beq.n	8009fe2 <parse_string+0x25e>
                    break;
 8009f88:	bf00      	nop
            }
            input_pointer += sequence_length;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	4413      	add	r3, r2
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8009f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	f4ff af66 	bcc.w	8009e68 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	609a      	str	r2, [r3, #8]

    return true;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e01e      	b.n	800a008 <parse_string+0x284>
        goto fail;
 8009fca:	bf00      	nop
 8009fcc:	e00a      	b.n	8009fe4 <parse_string+0x260>
                    goto fail;
 8009fce:	bf00      	nop
 8009fd0:	e008      	b.n	8009fe4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8009fd2:	bf00      	nop
 8009fd4:	e006      	b.n	8009fe4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8009fd6:	bf00      	nop
 8009fd8:	e004      	b.n	8009fe4 <parse_string+0x260>
                goto fail;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <parse_string+0x260>
                    goto fail;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <parse_string+0x260>
                        goto fail;
 8009fe2:	bf00      	nop

fail:
    if (output != NULL)
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	69f8      	ldr	r0, [r7, #28]
 8009ff0:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	461a      	mov	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	609a      	str	r2, [r3, #8]
    }

    return false;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3728      	adds	r7, #40	; 0x28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <buffer_skip_whitespace+0x16>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	e02c      	b.n	800a084 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d005      	beq.n	800a03c <buffer_skip_whitespace+0x2c>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d306      	bcc.n	800a04a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	e021      	b.n	800a084 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00d      	beq.n	800a06c <buffer_skip_whitespace+0x5c>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d207      	bcs.n	800a06c <buffer_skip_whitespace+0x5c>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	4413      	add	r3, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d9e9      	bls.n	800a040 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d104      	bne.n	800a082 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	1e5a      	subs	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a082:	687b      	ldr	r3, [r7, #4]
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <skip_utf8_bom+0x1e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <skip_utf8_bom+0x1e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <skip_utf8_bom+0x22>
    {
        return NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e01c      	b.n	800a0ec <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d018      	beq.n	800a0ea <skip_utf8_bom+0x5a>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	1d1a      	adds	r2, r3, #4
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d211      	bcs.n	800a0ea <skip_utf8_bom+0x5a>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	4908      	ldr	r1, [pc, #32]	; (800a0f4 <skip_utf8_bom+0x64>)
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f003 f8c3 	bl	800d260 <strncmp>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	1cda      	adds	r2, r3, #3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a0ea:	687b      	ldr	r3, [r7, #4]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	08010fa8 	.word	0x08010fa8

0800a0f8 <cJSON_ParseWithLengthOpts>:
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
}

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08e      	sub	sp, #56	; 0x38
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800a106:	f107 0318 	add.w	r3, r7, #24
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	605a      	str	r2, [r3, #4]
 800a110:	609a      	str	r2, [r3, #8]
 800a112:	60da      	str	r2, [r3, #12]
 800a114:	611a      	str	r2, [r3, #16]
 800a116:	615a      	str	r2, [r3, #20]
 800a118:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800a11e:	4b41      	ldr	r3, [pc, #260]	; (800a224 <cJSON_ParseWithLengthOpts+0x12c>)
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800a124:	4b3f      	ldr	r3, [pc, #252]	; (800a224 <cJSON_ParseWithLengthOpts+0x12c>)
 800a126:	2200      	movs	r2, #0
 800a128:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d042      	beq.n	800a1b6 <cJSON_ParseWithLengthOpts+0xbe>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d03f      	beq.n	800a1b6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800a142:	4a39      	ldr	r2, [pc, #228]	; (800a228 <cJSON_ParseWithLengthOpts+0x130>)
 800a144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a148:	ca07      	ldmia	r2, {r0, r1, r2}
 800a14a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800a14e:	4836      	ldr	r0, [pc, #216]	; (800a228 <cJSON_ParseWithLengthOpts+0x130>)
 800a150:	f7ff fb98 	bl	8009884 <cJSON_New_Item>
 800a154:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800a156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d02e      	beq.n	800a1ba <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800a15c:	f107 0318 	add.w	r3, r7, #24
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff ff95 	bl	800a090 <skip_utf8_bom>
 800a166:	4603      	mov	r3, r0
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ff51 	bl	800a010 <buffer_skip_whitespace>
 800a16e:	4603      	mov	r3, r0
 800a170:	4619      	mov	r1, r3
 800a172:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a174:	f000 f86a 	bl	800a24c <parse_value>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01f      	beq.n	800a1be <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00e      	beq.n	800a1a2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800a184:	f107 0318 	add.w	r3, r7, #24
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff ff41 	bl	800a010 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800a18e:	6a3a      	ldr	r2, [r7, #32]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	429a      	cmp	r2, r3
 800a194:	d215      	bcs.n	800a1c2 <cJSON_ParseWithLengthOpts+0xca>
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	4413      	add	r3, r2
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10f      	bne.n	800a1c2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	441a      	add	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	601a      	str	r2, [r3, #0]
    }

    return item;
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	e031      	b.n	800a21a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800a1b6:	bf00      	nop
 800a1b8:	e004      	b.n	800a1c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800a1c2:	bf00      	nop

fail:
    if (item != NULL)
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800a1ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1cc:	f7ff fb70 	bl	80098b0 <cJSON_Delete>
    }

    if (value != NULL)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d020      	beq.n	800a218 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800a1de:	6a3a      	ldr	r2, [r7, #32]
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d202      	bcs.n	800a1ec <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e005      	b.n	800a1f8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d004      	beq.n	800a208 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	441a      	add	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800a208:	4b06      	ldr	r3, [pc, #24]	; (800a224 <cJSON_ParseWithLengthOpts+0x12c>)
 800a20a:	461a      	mov	r2, r3
 800a20c:	f107 0310 	add.w	r3, r7, #16
 800a210:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a214:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3738      	adds	r7, #56	; 0x38
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20005490 	.word	0x20005490
 800a228:	20000090 	.word	0x20000090

0800a22c <cJSON_ParseWithLength>:
{
    return cJSON_ParseWithOpts(value, 0, 0);
}

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
 800a236:	2300      	movs	r3, #0
 800a238:	2200      	movs	r2, #0
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff ff5b 	bl	800a0f8 <cJSON_ParseWithLengthOpts>
 800a242:	4603      	mov	r3, r0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <parse_value+0x18>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <parse_value+0x1c>
    {
        return false; /* no input */
 800a264:	2300      	movs	r3, #0
 800a266:	e0d2      	b.n	800a40e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01d      	beq.n	800a2aa <parse_value+0x5e>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d816      	bhi.n	800a2aa <parse_value+0x5e>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4413      	add	r3, r2
 800a286:	2204      	movs	r2, #4
 800a288:	4963      	ldr	r1, [pc, #396]	; (800a418 <parse_value+0x1cc>)
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 ffe8 	bl	800d260 <strncmp>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d109      	bne.n	800a2aa <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2204      	movs	r2, #4
 800a29a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	1d1a      	adds	r2, r3, #4
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	609a      	str	r2, [r3, #8]
        return true;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e0b1      	b.n	800a40e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01d      	beq.n	800a2ec <parse_value+0xa0>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	1d5a      	adds	r2, r3, #5
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d816      	bhi.n	800a2ec <parse_value+0xa0>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	2205      	movs	r2, #5
 800a2ca:	4954      	ldr	r1, [pc, #336]	; (800a41c <parse_value+0x1d0>)
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f002 ffc7 	bl	800d260 <strncmp>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d109      	bne.n	800a2ec <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	1d5a      	adds	r2, r3, #5
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	609a      	str	r2, [r3, #8]
        return true;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e090      	b.n	800a40e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d020      	beq.n	800a334 <parse_value+0xe8>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	1d1a      	adds	r2, r3, #4
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d819      	bhi.n	800a334 <parse_value+0xe8>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	4413      	add	r3, r2
 800a30a:	2204      	movs	r2, #4
 800a30c:	4944      	ldr	r1, [pc, #272]	; (800a420 <parse_value+0x1d4>)
 800a30e:	4618      	mov	r0, r3
 800a310:	f002 ffa6 	bl	800d260 <strncmp>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10c      	bne.n	800a334 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2202      	movs	r2, #2
 800a31e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	1d1a      	adds	r2, r3, #4
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	609a      	str	r2, [r3, #8]
        return true;
 800a330:	2301      	movs	r3, #1
 800a332:	e06c      	b.n	800a40e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d013      	beq.n	800a362 <parse_value+0x116>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	429a      	cmp	r2, r3
 800a344:	d20d      	bcs.n	800a362 <parse_value+0x116>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b22      	cmp	r3, #34	; 0x22
 800a354:	d105      	bne.n	800a362 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff fd13 	bl	8009d84 <parse_string>
 800a35e:	4603      	mov	r3, r0
 800a360:	e055      	b.n	800a40e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d023      	beq.n	800a3b0 <parse_value+0x164>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	429a      	cmp	r2, r3
 800a372:	d21d      	bcs.n	800a3b0 <parse_value+0x164>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b2d      	cmp	r3, #45	; 0x2d
 800a382:	d00f      	beq.n	800a3a4 <parse_value+0x158>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	4413      	add	r3, r2
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2b2f      	cmp	r3, #47	; 0x2f
 800a392:	d90d      	bls.n	800a3b0 <parse_value+0x164>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	4413      	add	r3, r2
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b39      	cmp	r3, #57	; 0x39
 800a3a2:	d805      	bhi.n	800a3b0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff fad6 	bl	8009958 <parse_number>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	e02e      	b.n	800a40e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d013      	beq.n	800a3de <parse_value+0x192>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d20d      	bcs.n	800a3de <parse_value+0x192>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b5b      	cmp	r3, #91	; 0x5b
 800a3d0:	d105      	bne.n	800a3de <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f825 	bl	800a424 <parse_array>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	e017      	b.n	800a40e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d013      	beq.n	800a40c <parse_value+0x1c0>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d20d      	bcs.n	800a40c <parse_value+0x1c0>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b7b      	cmp	r3, #123	; 0x7b
 800a3fe:	d105      	bne.n	800a40c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f8d2 	bl	800a5ac <parse_object>
 800a408:	4603      	mov	r3, r0
 800a40a:	e000      	b.n	800a40e <parse_value+0x1c2>
    }

    return false;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	08010f7c 	.word	0x08010f7c
 800a41c:	08010fac 	.word	0x08010fac
 800a420:	08010fb4 	.word	0x08010fb4

0800a424 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800a42e:	2300      	movs	r3, #0
 800a430:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a43e:	d301      	bcc.n	800a444 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800a440:	2300      	movs	r3, #0
 800a442:	e0af      	b.n	800a5a4 <parse_array+0x180>
    }
    input_buffer->depth++;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	4413      	add	r3, r2
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b5b      	cmp	r3, #91	; 0x5b
 800a45c:	f040 8094 	bne.w	800a588 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800a46a:	6838      	ldr	r0, [r7, #0]
 800a46c:	f7ff fdd0 	bl	800a010 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00d      	beq.n	800a492 <parse_array+0x6e>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d207      	bcs.n	800a492 <parse_array+0x6e>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b5d      	cmp	r3, #93	; 0x5d
 800a490:	d061      	beq.n	800a556 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d005      	beq.n	800a4a4 <parse_array+0x80>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d305      	bcc.n	800a4b0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	1e5a      	subs	r2, r3, #1
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	609a      	str	r2, [r3, #8]
        goto fail;
 800a4ae:	e072      	b.n	800a596 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	1e5a      	subs	r2, r3, #1
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	3310      	adds	r3, #16
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff f9e0 	bl	8009884 <cJSON_New_Item>
 800a4c4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d05f      	beq.n	800a58c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d104      	bne.n	800a4dc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	e007      	b.n	800a4ec <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800a4f6:	6838      	ldr	r0, [r7, #0]
 800a4f8:	f7ff fd8a 	bl	800a010 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6938      	ldr	r0, [r7, #16]
 800a500:	f7ff fea4 	bl	800a24c <parse_value>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d042      	beq.n	800a590 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800a50a:	6838      	ldr	r0, [r7, #0]
 800a50c:	f7ff fd80 	bl	800a010 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00d      	beq.n	800a532 <parse_array+0x10e>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d207      	bcs.n	800a532 <parse_array+0x10e>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	4413      	add	r3, r2
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b2c      	cmp	r3, #44	; 0x2c
 800a530:	d0c3      	beq.n	800a4ba <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d02d      	beq.n	800a594 <parse_array+0x170>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d227      	bcs.n	800a594 <parse_array+0x170>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	4413      	add	r3, r2
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b5d      	cmp	r3, #93	; 0x5d
 800a552:	d11f      	bne.n	800a594 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800a554:	e000      	b.n	800a558 <parse_array+0x134>
        goto success;
 800a556:	bf00      	nop
    input_buffer->depth--;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <parse_array+0x14a>
        head->prev = current_item;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2220      	movs	r2, #32
 800a572:	60da      	str	r2, [r3, #12]
    item->child = head;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	609a      	str	r2, [r3, #8]

    return true;
 800a584:	2301      	movs	r3, #1
 800a586:	e00d      	b.n	800a5a4 <parse_array+0x180>
        goto fail;
 800a588:	bf00      	nop
 800a58a:	e004      	b.n	800a596 <parse_array+0x172>
            goto fail; /* allocation failure */
 800a58c:	bf00      	nop
 800a58e:	e002      	b.n	800a596 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800a590:	bf00      	nop
 800a592:	e000      	b.n	800a596 <parse_array+0x172>
        goto fail; /* expected end of array */
 800a594:	bf00      	nop

fail:
    if (head != NULL)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800a59c:	6978      	ldr	r0, [r7, #20]
 800a59e:	f7ff f987 	bl	80098b0 <cJSON_Delete>
    }

    return false;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5c6:	d301      	bcc.n	800a5cc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e0ea      	b.n	800a7a2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80d0 	beq.w	800a77e <parse_object+0x1d2>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	f080 80c9 	bcs.w	800a77e <parse_object+0x1d2>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b7b      	cmp	r3, #123	; 0x7b
 800a5fa:	f040 80c0 	bne.w	800a77e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800a608:	6838      	ldr	r0, [r7, #0]
 800a60a:	f7ff fd01 	bl	800a010 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00e      	beq.n	800a632 <parse_object+0x86>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d208      	bcs.n	800a632 <parse_object+0x86>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4413      	add	r3, r2
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b7d      	cmp	r3, #125	; 0x7d
 800a62e:	f000 808d 	beq.w	800a74c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <parse_object+0x98>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	429a      	cmp	r2, r3
 800a642:	d305      	bcc.n	800a650 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	1e5a      	subs	r2, r3, #1
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	609a      	str	r2, [r3, #8]
        goto fail;
 800a64e:	e0a1      	b.n	800a794 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	3310      	adds	r3, #16
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff f910 	bl	8009884 <cJSON_New_Item>
 800a664:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 808a 	beq.w	800a782 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	613b      	str	r3, [r7, #16]
 800a67c:	e007      	b.n	800a68e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800a698:	6838      	ldr	r0, [r7, #0]
 800a69a:	f7ff fcb9 	bl	800a010 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6938      	ldr	r0, [r7, #16]
 800a6a2:	f7ff fb6f 	bl	8009d84 <parse_string>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d06c      	beq.n	800a786 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800a6ac:	6838      	ldr	r0, [r7, #0]
 800a6ae:	f7ff fcaf 	bl	800a010 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	691a      	ldr	r2, [r3, #16]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d061      	beq.n	800a78a <parse_object+0x1de>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d25b      	bcs.n	800a78a <parse_object+0x1de>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4413      	add	r3, r2
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b3a      	cmp	r3, #58	; 0x3a
 800a6e0:	d153      	bne.n	800a78a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800a6ec:	6838      	ldr	r0, [r7, #0]
 800a6ee:	f7ff fc8f 	bl	800a010 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6938      	ldr	r0, [r7, #16]
 800a6f6:	f7ff fda9 	bl	800a24c <parse_value>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d046      	beq.n	800a78e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800a700:	6838      	ldr	r0, [r7, #0]
 800a702:	f7ff fc85 	bl	800a010 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00d      	beq.n	800a728 <parse_object+0x17c>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d207      	bcs.n	800a728 <parse_object+0x17c>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4413      	add	r3, r2
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b2c      	cmp	r3, #44	; 0x2c
 800a726:	d098      	beq.n	800a65a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d031      	beq.n	800a792 <parse_object+0x1e6>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	429a      	cmp	r2, r3
 800a738:	d22b      	bcs.n	800a792 <parse_object+0x1e6>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	4413      	add	r3, r2
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b7d      	cmp	r3, #125	; 0x7d
 800a748:	d123      	bne.n	800a792 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800a74a:	e000      	b.n	800a74e <parse_object+0x1a2>
        goto success; /* empty object */
 800a74c:	bf00      	nop
    input_buffer->depth--;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	1e5a      	subs	r2, r3, #1
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <parse_object+0x1b8>
        head->prev = current_item;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2240      	movs	r2, #64	; 0x40
 800a768:	60da      	str	r2, [r3, #12]
    item->child = head;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	609a      	str	r2, [r3, #8]
    return true;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e011      	b.n	800a7a2 <parse_object+0x1f6>
        goto fail; /* not an object */
 800a77e:	bf00      	nop
 800a780:	e008      	b.n	800a794 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800a782:	bf00      	nop
 800a784:	e006      	b.n	800a794 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800a786:	bf00      	nop
 800a788:	e004      	b.n	800a794 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800a78a:	bf00      	nop
 800a78c:	e002      	b.n	800a794 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800a792:	bf00      	nop

fail:
    if (head != NULL)
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f7ff f888 	bl	80098b0 <cJSON_Delete>
    }

    return false;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <get_object_item+0x1c>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <get_object_item+0x20>
    {
        return NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e033      	b.n	800a832 <get_object_item+0x88>
    }

    current_element = object->child;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d017      	beq.n	800a806 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800a7d6:	e002      	b.n	800a7de <get_object_item+0x34>
        {
            current_element = current_element->next;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01c      	beq.n	800a81e <get_object_item+0x74>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6a1b      	ldr	r3, [r3, #32]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d018      	beq.n	800a81e <get_object_item+0x74>
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	68b8      	ldr	r0, [r7, #8]
 800a7f4:	f7f5 fcf4 	bl	80001e0 <strcmp>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1ec      	bne.n	800a7d8 <get_object_item+0x2e>
 800a7fe:	e00e      	b.n	800a81e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d008      	beq.n	800a81e <get_object_item+0x74>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	4619      	mov	r1, r3
 800a812:	68b8      	ldr	r0, [r7, #8]
 800a814:	f7fe ff86 	bl	8009724 <case_insensitive_strcmp>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1f0      	bne.n	800a800 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <get_object_item+0x82>
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <get_object_item+0x86>
        return NULL;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e000      	b.n	800a832 <get_object_item+0x88>
    }

    return current_element;
 800a830:	697b      	ldr	r3, [r7, #20]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800a844:	2200      	movs	r2, #0
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff ffae 	bl	800a7aa <get_object_item>
 800a84e:	4603      	mov	r3, r0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <cJSON_IsNumber+0x12>
    {
        return false;
 800a866:	2300      	movs	r3, #0
 800a868:	e007      	b.n	800a87a <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b08      	cmp	r3, #8
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <cJSON_IsObject+0x12>
    {
        return false;
 800a894:	2300      	movs	r3, #0
 800a896:	e007      	b.n	800a8a8 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	bf0c      	ite	eq
 800a8a2:	2301      	moveq	r3, #1
 800a8a4:	2300      	movne	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 800a8bc:	4b03      	ldr	r3, [pc, #12]	; (800a8cc <cJSON_free+0x18>)
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	4798      	blx	r3
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000090 	.word	0x20000090

0800a8d0 <prv_crc_in>:
 * \param[in]       inp: Input data in byte format
 * \param[in]       len: Number of bytes to process
 * \return          Current CRC calculated value after all bytes or `0` on error input data
 */
static uint8_t
prv_crc_in(lwpkt_crc_t* crcobj, const void* inp, const size_t len) {
 800a8d0:	b480      	push	{r7}
 800a8d2:	b089      	sub	sp, #36	; 0x24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
    const uint8_t* p_data = inp;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	61fb      	str	r3, [r7, #28]

    if (crcobj == NULL || p_data == NULL || len == 0) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <prv_crc_in+0x22>
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <prv_crc_in+0x22>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <prv_crc_in+0x26>
        return 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e036      	b.n	800a964 <prv_crc_in+0x94>
    }

    for (size_t i = 0; i < len; ++i, ++p_data) {
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
 800a8fa:	e02d      	b.n	800a958 <prv_crc_in+0x88>
        uint8_t inbyte = *p_data;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800a902:	2308      	movs	r3, #8
 800a904:	75bb      	strb	r3, [r7, #22]
 800a906:	e01e      	b.n	800a946 <prv_crc_in+0x76>
            uint8_t mix = (uint8_t)(crcobj->crc ^ inbyte) & 0x01U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	4053      	eors	r3, r2
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	757b      	strb	r3, [r7, #21]
            crcobj->crc >>= 1U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	085b      	lsrs	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	701a      	strb	r2, [r3, #0]
            if (mix > 0) {
 800a924:	7d7b      	ldrb	r3, [r7, #21]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <prv_crc_in+0x6a>
                crcobj->crc ^= 0x8CU;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800a932:	43db      	mvns	r3, r3
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	701a      	strb	r2, [r3, #0]
            }
            inbyte >>= 0x01U;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	085b      	lsrs	r3, r3, #1
 800a93e:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800a940:	7dbb      	ldrb	r3, [r7, #22]
 800a942:	3b01      	subs	r3, #1
 800a944:	75bb      	strb	r3, [r7, #22]
 800a946:	7dbb      	ldrb	r3, [r7, #22]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1dd      	bne.n	800a908 <prv_crc_in+0x38>
    for (size_t i = 0; i < len; ++i, ++p_data) {
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	3301      	adds	r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	3301      	adds	r3, #1
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3cd      	bcc.n	800a8fc <prv_crc_in+0x2c>
        }
    }
    return crcobj->crc;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	781b      	ldrb	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3724      	adds	r7, #36	; 0x24
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <prv_crc_init>:
/**
 * \brief           Initialize CRC instance to default values
 * \param[in]       crcobj: CRC instance
 */
static void
prv_crc_init(lwpkt_crc_t* crcobj) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    LWPKT_MEMSET(crcobj, 0x00, sizeof(*crcobj));
 800a978:	2201      	movs	r2, #1
 800a97a:	2100      	movs	r1, #0
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f002 fc67 	bl	800d250 <memset>
}
 800a982:	bf00      	nop
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <lwpkt_init>:
 * \param[in]       tx_rb: TX LwRB instance for data write
 * \param[in]       rx_rb: RX LwRB instance for data read
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_init(lwpkt_t* pkt, lwrb_t* tx_rb, lwrb_t* rx_rb) {
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
    if (pkt == NULL) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <lwpkt_init+0x16>
        return lwpktERR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e01a      	b.n	800a9d6 <lwpkt_init+0x4c>
    }

    LWPKT_MEMSET(pkt, 0x00, sizeof(*pkt));
 800a9a0:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f002 fc52 	bl	800d250 <memset>
    LWPKT_RESET(pkt);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a9b2:	220c      	movs	r2, #12
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f002 fc4a 	bl	800d250 <memset>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    pkt->tx_rb = tx_rb;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    pkt->rx_rb = rx_rb;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    return lwpktOK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <lwpkt_read>:
 * \brief           Read raw data from RX buffer and prepare packet
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktVALID when packet valid, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_read(lwpkt_t* pkt) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    lwpktr_t res = lwpktOK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
    uint8_t b, e = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73bb      	strb	r3, [r7, #14]

    if (!LWPKT_IS_VALID(pkt)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <lwpkt_read+0x1a>
        return lwpktERR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e139      	b.n	800ac6e <lwpkt_read+0x28e>
    }

    SEND_EVT(pkt, LWPKT_EVT_PRE_READ);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 8103 	beq.w	800ac0c <lwpkt_read+0x22c>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa0c:	2106      	movs	r1, #6
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3

    /* Process bytes from RX ringbuffer */
    /* Read byte by byte and go through state machine */
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800aa12:	e0fb      	b.n	800ac0c <lwpkt_read+0x22c>
        e = 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	73bb      	strb	r3, [r7, #14]
        switch (pkt->m.state) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	f200 80e5 	bhi.w	800abee <lwpkt_read+0x20e>
 800aa24:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <lwpkt_read+0x4c>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa4d 	.word	0x0800aa4d
 800aa30:	0800abef 	.word	0x0800abef
 800aa34:	0800abef 	.word	0x0800abef
 800aa38:	0800abef 	.word	0x0800abef
 800aa3c:	0800aa8b 	.word	0x0800aa8b
 800aa40:	0800ab01 	.word	0x0800ab01
 800aa44:	0800ab71 	.word	0x0800ab71
 800aa48:	0800abcd 	.word	0x0800abcd
            case LWPKT_STATE_START: {
                if (b == LWPKT_START_BYTE) {
 800aa4c:	7b7b      	ldrb	r3, [r7, #13]
 800aa4e:	2baa      	cmp	r3, #170	; 0xaa
 800aa50:	f040 80dc 	bne.w	800ac0c <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt); /* Reset instance and make it ready for receiving */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800aa5a:	220c      	movs	r2, #12
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f002 fbf6 	bl	800d250 <memset>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    INIT_CRC(&pkt->m.crc);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f203 1311 	addw	r3, r3, #273	; 0x111
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff ff7c 	bl	800a970 <prv_crc_init>

                    LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_ADDR ? LWPKT_STATE_FROM
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                                                            : (LWPKT_CFG_USE_CMD ? LWPKT_STATE_CMD : LWPKT_STATE_LEN));
                }
                break;
 800aa88:	e0c0      	b.n	800ac0c <lwpkt_read+0x22c>
                LWPKT_SET_STATE(pkt, LWPKT_STATE_LEN);
                break;
            }
#endif /* LWPKT_CFG_USE_CMD */
            case LWPKT_STATE_LEN: {
                pkt->m.len |= (b & 0x7FU) << ((size_t)7U * (size_t)pkt->m.index++);
 800aa8a:	7b7b      	ldrb	r3, [r7, #13]
 800aa8c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800aa96:	1c58      	adds	r0, r3, #1
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	00d2      	lsls	r2, r2, #3
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	fa01 f203 	lsl.w	r2, r1, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aaae:	431a      	orrs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f203 1311 	addw	r3, r3, #273	; 0x111
 800aabc:	f107 010d 	add.w	r1, r7, #13
 800aac0:	2201      	movs	r2, #1
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff ff04 	bl	800a8d0 <prv_crc_in>

                /* Last length bytes has MSB bit set to 0 */
                if ((b & 0x80U) == 0) {
 800aac8:	7b7b      	ldrb	r3, [r7, #13]
 800aaca:	b25b      	sxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f2c0 809d 	blt.w	800ac0c <lwpkt_read+0x22c>
                    if (pkt->m.len == 0) {
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d108      	bne.n	800aaee <lwpkt_read+0x10e>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2206      	movs	r2, #6
 800aae0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800aaec:	e08e      	b.n	800ac0c <lwpkt_read+0x22c>
                    } else {
                        LWPKT_SET_STATE(pkt, LWPKT_STATE_DATA);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                    }
                }
                break;
 800aafe:	e085      	b.n	800ac0c <lwpkt_read+0x22c>
            }
            case LWPKT_STATE_DATA: {
                if (pkt->m.index < sizeof(pkt->data)) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ab06:	2bff      	cmp	r3, #255	; 0xff
 800ab08:	d823      	bhi.n	800ab52 <lwpkt_read+0x172>
                    pkt->data[pkt->m.index++] = b;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ab10:	1c59      	adds	r1, r3, #1
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 800ab18:	7b79      	ldrb	r1, [r7, #13]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	54d1      	strb	r1, [r2, r3]
                    ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f203 1311 	addw	r3, r3, #273	; 0x111
 800ab24:	f107 010d 	add.w	r1, r7, #13
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fed0 	bl	800a8d0 <prv_crc_in>
                    if (pkt->m.index == pkt->m.len) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d165      	bne.n	800ac0c <lwpkt_read+0x22c>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2206      	movs	r2, #6
 800ab44:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800ab50:	e05c      	b.n	800ac0c <lwpkt_read+0x22c>
                    }
                } else {
                    LWPKT_RESET(pkt);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ab58:	220c      	movs	r2, #12
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 fb77 	bl	800d250 <memset>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRMEM;
 800ab6a:	2307      	movs	r3, #7
 800ab6c:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800ab6e:	e064      	b.n	800ac3a <lwpkt_read+0x25a>
                }
                break;
            }
#if LWPKT_CFG_USE_CRC
            case LWPKT_STATE_CRC: {
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f203 1311 	addw	r3, r3, #273	; 0x111
 800ab76:	f107 010d 	add.w	r1, r7, #13
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff fea7 	bl	800a8d0 <prv_crc_in>
                if (pkt->m.crc.crc == 0) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d110      	bne.n	800abae <lwpkt_read+0x1ce>
                    LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2207      	movs	r2, #7
 800ab90:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                } else {
                    LWPKT_RESET(pkt);
                    res = lwpktERRCRC;
                    goto retpre;
                }
                LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2207      	movs	r2, #7
 800aba0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                break;
 800abac:	e02e      	b.n	800ac0c <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800abb4:	220c      	movs	r2, #12
 800abb6:	2100      	movs	r1, #0
 800abb8:	4618      	mov	r0, r3
 800abba:	f002 fb49 	bl	800d250 <memset>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRCRC;
 800abc6:	2304      	movs	r3, #4
 800abc8:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800abca:	e036      	b.n	800ac3a <lwpkt_read+0x25a>
            }
#endif /* LWPKT_CFG_USE_CRC */
            case LWPKT_STATE_STOP: {
                LWPKT_SET_STATE(pkt, LWPKT_STATE_START); /* Reset packet state */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if (b == LWPKT_STOP_BYTE) {
 800abdc:	7b7b      	ldrb	r3, [r7, #13]
 800abde:	2b55      	cmp	r3, #85	; 0x55
 800abe0:	d102      	bne.n	800abe8 <lwpkt_read+0x208>
                    res = lwpktVALID; /* Packet fully valid, take data from it */
 800abe2:	2303      	movs	r3, #3
 800abe4:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800abe6:	e028      	b.n	800ac3a <lwpkt_read+0x25a>
                } else {
                    res = lwpktERRSTOP; /* Packet is missing STOP byte! */
 800abe8:	2305      	movs	r3, #5
 800abea:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800abec:	e025      	b.n	800ac3a <lwpkt_read+0x25a>
                }
            }
            default: {
                LWPKT_RESET(pkt);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800abf4:	220c      	movs	r2, #12
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f002 fb29 	bl	800d250 <memset>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                res = lwpktERR; /* Hard error */
 800ac06:	2301      	movs	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]
                goto retpre;
 800ac0a:	e016      	b.n	800ac3a <lwpkt_read+0x25a>
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ac12:	f107 010d 	add.w	r1, r7, #13
 800ac16:	2201      	movs	r2, #1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 f994 	bl	800af46 <lwrb_read>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	f43f aef7 	beq.w	800aa14 <lwpkt_read+0x34>
            }
        }
    }
    if (pkt->m.state == LWPKT_STATE_START) {
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <lwpkt_read+0x256>
        res = lwpktWAITDATA;
 800ac30:	2306      	movs	r3, #6
 800ac32:	73fb      	strb	r3, [r7, #15]
 800ac34:	e001      	b.n	800ac3a <lwpkt_read+0x25a>
    } else {
        res = lwpktINPROG;
 800ac36:	2302      	movs	r3, #2
 800ac38:	73fb      	strb	r3, [r7, #15]
    }
retpre:
    SEND_EVT(pkt, LWPKT_EVT_POST_READ);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <lwpkt_read+0x270>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac4a:	2107      	movs	r1, #7
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
    if (e) {
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <lwpkt_read+0x28c>
        SEND_EVT(pkt, LWPKT_EVT_READ); /* Send read event */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <lwpkt_read+0x28c>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac66:	2102      	movs	r1, #2
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
    }
    return res;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop

0800ac78 <lwpkt_process>:
 * \param[in]       pkt: Packet instance
 * \param[in]       time: Current time in units of milliseconds
 * \return          \ref lwpktOK if processing OK, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_process(lwpkt_t* pkt, uint32_t time) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
    lwpktr_t pktres;

    if (pkt == NULL) {
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <lwpkt_process+0x14>
        return lwpktERR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e039      	b.n	800ad00 <lwpkt_process+0x88>
    }

    /* Packet protocol data read */
    pktres = lwpkt_read(pkt);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fea7 	bl	800a9e0 <lwpkt_read>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]
    if (pktres == lwpktVALID) {
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d10f      	bne.n	800acbc <lwpkt_process+0x44>
        pkt->last_rx_time = time;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        SEND_EVT(pkt, LWPKT_EVT_PKT);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d027      	beq.n	800acfe <lwpkt_process+0x86>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
 800acba:	e020      	b.n	800acfe <lwpkt_process+0x86>
    } else if (pktres == lwpktINPROG) {
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d119      	bne.n	800acf6 <lwpkt_process+0x7e>
        if ((time - pkt->last_rx_time) >= LWPKT_CFG_PROCESS_INPROG_TIMEOUT) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b63      	cmp	r3, #99	; 0x63
 800acce:	d916      	bls.n	800acfe <lwpkt_process+0x86>
            lwpkt_reset(pkt);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f819 	bl	800ad08 <lwpkt_reset>
            pkt->last_rx_time = time;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            SEND_EVT(pkt, LWPKT_EVT_TIMEOUT);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00a      	beq.n	800acfe <lwpkt_process+0x86>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acee:	2101      	movs	r1, #1
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	4798      	blx	r3
 800acf4:	e003      	b.n	800acfe <lwpkt_process+0x86>
        }
    } else {
        pkt->last_rx_time = time;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    }
    return lwpktOK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <lwpkt_reset>:
 * \brief           Reset packet state
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_reset(lwpkt_t* pkt) {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
    if (!LWPKT_IS_VALID(pkt)) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <lwpkt_reset+0x12>
        return lwpktERR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e00c      	b.n	800ad34 <lwpkt_reset+0x2c>
    }
    LWPKT_RESET(pkt);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ad20:	220c      	movs	r2, #12
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f002 fa93 	bl	800d250 <memset>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    return lwpktOK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <lwpkt_set_evt_fn>:
 * \param[in]       pkt: Packet structure
 * \param[in]       evt_fn: Function pointer for events
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_set_evt_fn(lwpkt_t* pkt, lwpkt_evt_fn evt_fn) {
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    pkt->evt_fn = evt_fn;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    return lwpktOK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, lwrb_sz_t size) {
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	; 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d005      	beq.n	800ad7a <lwrb_init+0x1e>
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <lwrb_init+0x1e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <lwrb_init+0x22>
        return 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e019      	b.n	800adb2 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	330c      	adds	r3, #12
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3308      	adds	r3, #8
 800ada4:	61bb      	str	r3, [r7, #24]
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	601a      	str	r2, [r3, #0]
    return 1;
 800adb0:	2301      	movs	r3, #1
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3724      	adds	r7, #36	; 0x24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Ring buffer instance
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <lwrb_set_evt_fn+0x26>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d006      	beq.n	800ade4 <lwrb_set_evt_fn+0x26>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	611a      	str	r2, [r3, #16]
    }
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array.
 */
lwrb_sz_t
lwrb_write(lwrb_t* buff, const void* data, lwrb_sz_t btw) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
    lwrb_sz_t written = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]

    if (lwrb_write_ex(buff, data, btw, &written, 0)) {
 800ae00:	f107 0314 	add.w	r3, r7, #20
 800ae04:	2200      	movs	r2, #0
 800ae06:	9200      	str	r2, [sp, #0]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f80a 	bl	800ae26 <lwrb_write_ex>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <lwrb_write+0x2c>
        return written;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	e000      	b.n	800ae1e <lwrb_write+0x2e>
    }
    return 0;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <lwrb_write_ex>:
 *                      \ref LWRB_FLAG_WRITE_ALL: Request to write all data (up to btw).
 *                          Will early return if no memory available
 * \return          `1` if write operation OK, `0` otherwise
 */
uint8_t
lwrb_write_ex(lwrb_t* buff, const void* data, lwrb_sz_t btw, lwrb_sz_t* bw, uint16_t flags) {
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	607a      	str	r2, [r7, #4]
 800ae32:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00d      	beq.n	800ae5a <lwrb_write_ex+0x34>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <lwrb_write_ex+0x34>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d005      	beq.n	800ae5a <lwrb_write_ex+0x34>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <lwrb_write_ex+0x34>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <lwrb_write_ex+0x38>
        return 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e06f      	b.n	800af3e <lwrb_write_ex+0x118>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f91c 	bl	800b09c <lwrb_get_free>
 800ae64:	6278      	str	r0, [r7, #36]	; 0x24
    /* If no memory, or if user wants to write ALL data but no enough space, exit early */
    if (free == 0 || (free < btw && flags & LWRB_FLAG_WRITE_ALL)) {
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d008      	beq.n	800ae7e <lwrb_write_ex+0x58>
 800ae6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d206      	bcs.n	800ae82 <lwrb_write_ex+0x5c>
 800ae74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <lwrb_write_ex+0x5c>
        return 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e05d      	b.n	800af3e <lwrb_write_ex+0x118>
    }
    btw = BUF_MIN(free, btw);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	4293      	cmp	r3, r2
 800ae88:	bf28      	it	cs
 800ae8a:	4613      	movcs	r3, r2
 800ae8c:	607b      	str	r3, [r7, #4]
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	330c      	adds	r3, #12
 800ae92:	623b      	str	r3, [r7, #32]
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f3bf 8f5b 	dmb	ish
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	4293      	cmp	r3, r2
 800aeae:	bf28      	it	cs
 800aeb0:	4613      	movcs	r3, r2
 800aeb2:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	4413      	add	r3, r2
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aec0:	4618      	mov	r0, r3
 800aec2:	f002 fabc 	bl	800d43e <memcpy>
    buff_w_ptr += tocopy;
 800aec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	4413      	add	r3, r2
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <lwrb_write_ex+0xcc>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	4619      	mov	r1, r3
 800aeea:	f002 faa8 	bl	800d43e <memcpy>
        buff_w_ptr = btw;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d301      	bcc.n	800af00 <lwrb_write_ex+0xda>
        buff_w_ptr = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	330c      	adds	r3, #12
 800af04:	61bb      	str	r3, [r7, #24]
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	613b      	str	r3, [r7, #16]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	f3bf 8f5b 	dmb	ish
 800af12:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <lwrb_write_ex+0x106>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	440a      	add	r2, r1
 800af26:	2101      	movs	r1, #1
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	4798      	blx	r3
    if (bw != NULL) {
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d004      	beq.n	800af3c <lwrb_write_ex+0x116>
        *bw = tocopy + btw;
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	441a      	add	r2, r3
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800af3c:	2301      	movs	r3, #1
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3730      	adds	r7, #48	; 0x30
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
lwrb_sz_t
lwrb_read(lwrb_t* buff, void* data, lwrb_sz_t btr) {
 800af46:	b580      	push	{r7, lr}
 800af48:	b088      	sub	sp, #32
 800af4a:	af02      	add	r7, sp, #8
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
    lwrb_sz_t read = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	617b      	str	r3, [r7, #20]

    if (lwrb_read_ex(buff, data, btr, &read, 0)) {
 800af56:	f107 0314 	add.w	r3, r7, #20
 800af5a:	2200      	movs	r2, #0
 800af5c:	9200      	str	r2, [sp, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f80a 	bl	800af7c <lwrb_read_ex>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <lwrb_read+0x2c>
        return read;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	e000      	b.n	800af74 <lwrb_read+0x2e>
    }
    return 0;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <lwrb_read_ex>:
 *                      \ref LWRB_FLAG_READ_ALL: Request to read all data (up to btr).
 *                          Will early return if no enough bytes in the buffer
 * \return          `1` if read operation OK, `0` otherwise
 */
uint8_t
lwrb_read_ex(lwrb_t* buff, void* data, lwrb_sz_t btr, lwrb_sz_t* br, uint16_t flags) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08c      	sub	sp, #48	; 0x30
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00d      	beq.n	800afb0 <lwrb_read_ex+0x34>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <lwrb_read_ex+0x34>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <lwrb_read_ex+0x34>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <lwrb_read_ex+0x34>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <lwrb_read_ex+0x38>
        return 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e06f      	b.n	800b094 <lwrb_read_ex+0x118>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 f8b2 	bl	800b11e <lwrb_get_full>
 800afba:	6278      	str	r0, [r7, #36]	; 0x24
    if (full == 0 || (full < btr && (flags & LWRB_FLAG_READ_ALL))) {
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d008      	beq.n	800afd4 <lwrb_read_ex+0x58>
 800afc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d206      	bcs.n	800afd8 <lwrb_read_ex+0x5c>
 800afca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <lwrb_read_ex+0x5c>
        return 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	e05d      	b.n	800b094 <lwrb_read_ex+0x118>
    }
    btr = BUF_MIN(full, btr);
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	4293      	cmp	r3, r2
 800afde:	bf28      	it	cs
 800afe0:	4613      	movcs	r3, r2
 800afe2:	607b      	str	r3, [r7, #4]
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3308      	adds	r3, #8
 800afe8:	623b      	str	r3, [r7, #32]
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f3bf 8f5b 	dmb	ish
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	4293      	cmp	r3, r2
 800b004:	bf28      	it	cs
 800b006:	4613      	movcs	r3, r2
 800b008:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	4413      	add	r3, r2
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	4619      	mov	r1, r3
 800b016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b018:	f002 fa11 	bl	800d43e <memcpy>
    buff_r_ptr += tocopy;
 800b01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <lwrb_read_ex+0xcc>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800b032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	18d0      	adds	r0, r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	4619      	mov	r1, r3
 800b040:	f002 f9fd 	bl	800d43e <memcpy>
        buff_r_ptr = btr;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b04e:	429a      	cmp	r2, r3
 800b050:	d301      	bcc.n	800b056 <lwrb_read_ex+0xda>
        buff_r_ptr = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3308      	adds	r3, #8
 800b05a:	61bb      	str	r3, [r7, #24]
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	693a      	ldr	r2, [r7, #16]
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	f3bf 8f5b 	dmb	ish
 800b068:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d007      	beq.n	800b082 <lwrb_read_ex+0x106>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	440a      	add	r2, r1
 800b07c:	2100      	movs	r1, #0
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	4798      	blx	r3
    if (br != NULL) {
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <lwrb_read_ex+0x116>
        *br = tocopy + btr;
 800b088:	69fa      	ldr	r2, [r7, #28]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	441a      	add	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800b092:	2301      	movs	r3, #1
}
 800b094:	4618      	mov	r0, r3
 800b096:	3730      	adds	r7, #48	; 0x30
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Ring buffer instance
 * \return          Number of free bytes in memory
 */
lwrb_sz_t
lwrb_get_free(const lwrb_t* buff) {
 800b09c:	b480      	push	{r7}
 800b09e:	b08b      	sub	sp, #44	; 0x2c
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <lwrb_get_free+0x1e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <lwrb_get_free+0x1e>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <lwrb_get_free+0x22>
        return 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e029      	b.n	800b112 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	330c      	adds	r3, #12
 800b0c2:	623b      	str	r3, [r7, #32]
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	613b      	str	r3, [r7, #16]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	61bb      	str	r3, [r7, #24]
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d103      	bne.n	800b0ee <lwrb_get_free+0x52>
        size = buff->size;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ec:	e00f      	b.n	800b10e <lwrb_get_free+0x72>
    } else if (r > w) {
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d904      	bls.n	800b100 <lwrb_get_free+0x64>
        size = r - w;
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fe:	e006      	b.n	800b10e <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	6979      	ldr	r1, [r7, #20]
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	1acb      	subs	r3, r1, r3
 800b10a:	4413      	add	r3, r2
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	3b01      	subs	r3, #1
}
 800b112:	4618      	mov	r0, r3
 800b114:	372c      	adds	r7, #44	; 0x2c
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Ring buffer instance
 * \return          Number of bytes ready to be read
 */
lwrb_sz_t
lwrb_get_full(const lwrb_t* buff) {
 800b11e:	b480      	push	{r7}
 800b120:	b08b      	sub	sp, #44	; 0x2c
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <lwrb_get_full+0x1e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <lwrb_get_full+0x1e>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <lwrb_get_full+0x22>
        return 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e027      	b.n	800b190 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	330c      	adds	r3, #12
 800b144:	623b      	str	r3, [r7, #32]
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3308      	adds	r3, #8
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	429a      	cmp	r2, r3
 800b166:	d102      	bne.n	800b16e <lwrb_get_full+0x50>
        size = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
 800b16c:	e00f      	b.n	800b18e <lwrb_get_full+0x70>
    } else if (w > r) {
 800b16e:	69fa      	ldr	r2, [r7, #28]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	429a      	cmp	r2, r3
 800b174:	d904      	bls.n	800b180 <lwrb_get_full+0x62>
        size = w - r;
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
 800b17e:	e006      	b.n	800b18e <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	69f9      	ldr	r1, [r7, #28]
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	1acb      	subs	r3, r1, r3
 800b18a:	4413      	add	r3, r2
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b190:	4618      	mov	r0, r3
 800b192:	372c      	adds	r7, #44	; 0x2c
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d007      	beq.n	800b1ba <lwrb_get_linear_block_read_address+0x1e>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <lwrb_get_linear_block_read_address+0x1e>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e004      	b.n	800b1c8 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	4413      	add	r3, r2
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer size in units of bytes for read operation
 */
lwrb_sz_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 800b1d4:	b480      	push	{r7}
 800b1d6:	b08b      	sub	sp, #44	; 0x2c
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
    lwrb_sz_t len, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <lwrb_get_linear_block_read_length+0x1e>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <lwrb_get_linear_block_read_length+0x1e>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e025      	b.n	800b242 <lwrb_get_linear_block_read_length+0x6e>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	623b      	str	r3, [r7, #32]
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3308      	adds	r3, #8
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	617b      	str	r3, [r7, #20]

    if (w > r) {
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d904      	bls.n	800b228 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
 800b226:	e00b      	b.n	800b240 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d905      	bls.n	800b23c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
 800b23a:	e001      	b.n	800b240 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return len;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b242:	4618      	mov	r0, r3
 800b244:	372c      	adds	r7, #44	; 0x2c
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <lwrb_skip>:
 * \param[in]       buff: Ring buffer instance
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
lwrb_sz_t
lwrb_skip(lwrb_t* buff, lwrb_sz_t len) {
 800b24e:	b580      	push	{r7, lr}
 800b250:	b088      	sub	sp, #32
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
    lwrb_sz_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <lwrb_skip+0x26>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d006      	beq.n	800b274 <lwrb_skip+0x26>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <lwrb_skip+0x26>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <lwrb_skip+0x2a>
        return 0;
 800b274:	2300      	movs	r3, #0
 800b276:	e036      	b.n	800b2e6 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff ff50 	bl	800b11e <lwrb_get_full>
 800b27e:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	4293      	cmp	r3, r2
 800b286:	bf28      	it	cs
 800b288:	4613      	movcs	r3, r2
 800b28a:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3308      	adds	r3, #8
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f3bf 8f5b 	dmb	ish
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	61fb      	str	r3, [r7, #28]
    r += len;
 800b2a0:	69fa      	ldr	r2, [r7, #28]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d304      	bcc.n	800b2bc <lwrb_skip+0x6e>
        r -= buff->size;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	60bb      	str	r3, [r7, #8]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f3bf 8f5b 	dmb	ish
 800b2ce:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <lwrb_skip+0x96>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	4798      	blx	r3
    return len;
 800b2e4:	683b      	ldr	r3, [r7, #0]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <malloc>:
 800b2f0:	4b02      	ldr	r3, [pc, #8]	; (800b2fc <malloc+0xc>)
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	f000 b82b 	b.w	800b350 <_malloc_r>
 800b2fa:	bf00      	nop
 800b2fc:	20000260 	.word	0x20000260

0800b300 <free>:
 800b300:	4b02      	ldr	r3, [pc, #8]	; (800b30c <free+0xc>)
 800b302:	4601      	mov	r1, r0
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	f002 bf35 	b.w	800e174 <_free_r>
 800b30a:	bf00      	nop
 800b30c:	20000260 	.word	0x20000260

0800b310 <sbrk_aligned>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	4e0e      	ldr	r6, [pc, #56]	; (800b34c <sbrk_aligned+0x3c>)
 800b314:	460c      	mov	r4, r1
 800b316:	6831      	ldr	r1, [r6, #0]
 800b318:	4605      	mov	r5, r0
 800b31a:	b911      	cbnz	r1, 800b322 <sbrk_aligned+0x12>
 800b31c:	f002 f840 	bl	800d3a0 <_sbrk_r>
 800b320:	6030      	str	r0, [r6, #0]
 800b322:	4621      	mov	r1, r4
 800b324:	4628      	mov	r0, r5
 800b326:	f002 f83b 	bl	800d3a0 <_sbrk_r>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	d00a      	beq.n	800b344 <sbrk_aligned+0x34>
 800b32e:	1cc4      	adds	r4, r0, #3
 800b330:	f024 0403 	bic.w	r4, r4, #3
 800b334:	42a0      	cmp	r0, r4
 800b336:	d007      	beq.n	800b348 <sbrk_aligned+0x38>
 800b338:	1a21      	subs	r1, r4, r0
 800b33a:	4628      	mov	r0, r5
 800b33c:	f002 f830 	bl	800d3a0 <_sbrk_r>
 800b340:	3001      	adds	r0, #1
 800b342:	d101      	bne.n	800b348 <sbrk_aligned+0x38>
 800b344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b348:	4620      	mov	r0, r4
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	2000549c 	.word	0x2000549c

0800b350 <_malloc_r>:
 800b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b354:	1ccd      	adds	r5, r1, #3
 800b356:	f025 0503 	bic.w	r5, r5, #3
 800b35a:	3508      	adds	r5, #8
 800b35c:	2d0c      	cmp	r5, #12
 800b35e:	bf38      	it	cc
 800b360:	250c      	movcc	r5, #12
 800b362:	2d00      	cmp	r5, #0
 800b364:	4607      	mov	r7, r0
 800b366:	db01      	blt.n	800b36c <_malloc_r+0x1c>
 800b368:	42a9      	cmp	r1, r5
 800b36a:	d905      	bls.n	800b378 <_malloc_r+0x28>
 800b36c:	230c      	movs	r3, #12
 800b36e:	603b      	str	r3, [r7, #0]
 800b370:	2600      	movs	r6, #0
 800b372:	4630      	mov	r0, r6
 800b374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b44c <_malloc_r+0xfc>
 800b37c:	f000 f868 	bl	800b450 <__malloc_lock>
 800b380:	f8d8 3000 	ldr.w	r3, [r8]
 800b384:	461c      	mov	r4, r3
 800b386:	bb5c      	cbnz	r4, 800b3e0 <_malloc_r+0x90>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	f7ff ffc0 	bl	800b310 <sbrk_aligned>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	4604      	mov	r4, r0
 800b394:	d155      	bne.n	800b442 <_malloc_r+0xf2>
 800b396:	f8d8 4000 	ldr.w	r4, [r8]
 800b39a:	4626      	mov	r6, r4
 800b39c:	2e00      	cmp	r6, #0
 800b39e:	d145      	bne.n	800b42c <_malloc_r+0xdc>
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	d048      	beq.n	800b436 <_malloc_r+0xe6>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	eb04 0903 	add.w	r9, r4, r3
 800b3ae:	f001 fff7 	bl	800d3a0 <_sbrk_r>
 800b3b2:	4581      	cmp	r9, r0
 800b3b4:	d13f      	bne.n	800b436 <_malloc_r+0xe6>
 800b3b6:	6821      	ldr	r1, [r4, #0]
 800b3b8:	1a6d      	subs	r5, r5, r1
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7ff ffa7 	bl	800b310 <sbrk_aligned>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	d037      	beq.n	800b436 <_malloc_r+0xe6>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	442b      	add	r3, r5
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d038      	beq.n	800b446 <_malloc_r+0xf6>
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	42a2      	cmp	r2, r4
 800b3d8:	d12b      	bne.n	800b432 <_malloc_r+0xe2>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	e00f      	b.n	800b400 <_malloc_r+0xb0>
 800b3e0:	6822      	ldr	r2, [r4, #0]
 800b3e2:	1b52      	subs	r2, r2, r5
 800b3e4:	d41f      	bmi.n	800b426 <_malloc_r+0xd6>
 800b3e6:	2a0b      	cmp	r2, #11
 800b3e8:	d917      	bls.n	800b41a <_malloc_r+0xca>
 800b3ea:	1961      	adds	r1, r4, r5
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	6025      	str	r5, [r4, #0]
 800b3f0:	bf18      	it	ne
 800b3f2:	6059      	strne	r1, [r3, #4]
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	bf08      	it	eq
 800b3f8:	f8c8 1000 	streq.w	r1, [r8]
 800b3fc:	5162      	str	r2, [r4, r5]
 800b3fe:	604b      	str	r3, [r1, #4]
 800b400:	4638      	mov	r0, r7
 800b402:	f104 060b 	add.w	r6, r4, #11
 800b406:	f000 f829 	bl	800b45c <__malloc_unlock>
 800b40a:	f026 0607 	bic.w	r6, r6, #7
 800b40e:	1d23      	adds	r3, r4, #4
 800b410:	1af2      	subs	r2, r6, r3
 800b412:	d0ae      	beq.n	800b372 <_malloc_r+0x22>
 800b414:	1b9b      	subs	r3, r3, r6
 800b416:	50a3      	str	r3, [r4, r2]
 800b418:	e7ab      	b.n	800b372 <_malloc_r+0x22>
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	6862      	ldr	r2, [r4, #4]
 800b41e:	d1dd      	bne.n	800b3dc <_malloc_r+0x8c>
 800b420:	f8c8 2000 	str.w	r2, [r8]
 800b424:	e7ec      	b.n	800b400 <_malloc_r+0xb0>
 800b426:	4623      	mov	r3, r4
 800b428:	6864      	ldr	r4, [r4, #4]
 800b42a:	e7ac      	b.n	800b386 <_malloc_r+0x36>
 800b42c:	4634      	mov	r4, r6
 800b42e:	6876      	ldr	r6, [r6, #4]
 800b430:	e7b4      	b.n	800b39c <_malloc_r+0x4c>
 800b432:	4613      	mov	r3, r2
 800b434:	e7cc      	b.n	800b3d0 <_malloc_r+0x80>
 800b436:	230c      	movs	r3, #12
 800b438:	603b      	str	r3, [r7, #0]
 800b43a:	4638      	mov	r0, r7
 800b43c:	f000 f80e 	bl	800b45c <__malloc_unlock>
 800b440:	e797      	b.n	800b372 <_malloc_r+0x22>
 800b442:	6025      	str	r5, [r4, #0]
 800b444:	e7dc      	b.n	800b400 <_malloc_r+0xb0>
 800b446:	605b      	str	r3, [r3, #4]
 800b448:	deff      	udf	#255	; 0xff
 800b44a:	bf00      	nop
 800b44c:	20005498 	.word	0x20005498

0800b450 <__malloc_lock>:
 800b450:	4801      	ldr	r0, [pc, #4]	; (800b458 <__malloc_lock+0x8>)
 800b452:	f001 bff2 	b.w	800d43a <__retarget_lock_acquire_recursive>
 800b456:	bf00      	nop
 800b458:	200055e0 	.word	0x200055e0

0800b45c <__malloc_unlock>:
 800b45c:	4801      	ldr	r0, [pc, #4]	; (800b464 <__malloc_unlock+0x8>)
 800b45e:	f001 bfed 	b.w	800d43c <__retarget_lock_release_recursive>
 800b462:	bf00      	nop
 800b464:	200055e0 	.word	0x200055e0

0800b468 <realloc>:
 800b468:	4b02      	ldr	r3, [pc, #8]	; (800b474 <realloc+0xc>)
 800b46a:	460a      	mov	r2, r1
 800b46c:	4601      	mov	r1, r0
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	f000 b802 	b.w	800b478 <_realloc_r>
 800b474:	20000260 	.word	0x20000260

0800b478 <_realloc_r>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	4680      	mov	r8, r0
 800b47e:	4614      	mov	r4, r2
 800b480:	460e      	mov	r6, r1
 800b482:	b921      	cbnz	r1, 800b48e <_realloc_r+0x16>
 800b484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	4611      	mov	r1, r2
 800b48a:	f7ff bf61 	b.w	800b350 <_malloc_r>
 800b48e:	b92a      	cbnz	r2, 800b49c <_realloc_r+0x24>
 800b490:	f002 fe70 	bl	800e174 <_free_r>
 800b494:	4625      	mov	r5, r4
 800b496:	4628      	mov	r0, r5
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	f003 fecd 	bl	800f23a <_malloc_usable_size_r>
 800b4a0:	4284      	cmp	r4, r0
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	d802      	bhi.n	800b4ac <_realloc_r+0x34>
 800b4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4aa:	d812      	bhi.n	800b4d2 <_realloc_r+0x5a>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff ff4e 	bl	800b350 <_malloc_r>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d0ed      	beq.n	800b496 <_realloc_r+0x1e>
 800b4ba:	42bc      	cmp	r4, r7
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4631      	mov	r1, r6
 800b4c0:	bf28      	it	cs
 800b4c2:	463a      	movcs	r2, r7
 800b4c4:	f001 ffbb 	bl	800d43e <memcpy>
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f002 fe52 	bl	800e174 <_free_r>
 800b4d0:	e7e1      	b.n	800b496 <_realloc_r+0x1e>
 800b4d2:	4635      	mov	r5, r6
 800b4d4:	e7df      	b.n	800b496 <_realloc_r+0x1e>

0800b4d6 <sulp>:
 800b4d6:	b570      	push	{r4, r5, r6, lr}
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	ec45 4b10 	vmov	d0, r4, r5
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	f003 fd69 	bl	800efb8 <__ulp>
 800b4e6:	ec51 0b10 	vmov	r0, r1, d0
 800b4ea:	b17e      	cbz	r6, 800b50c <sulp+0x36>
 800b4ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dd09      	ble.n	800b50c <sulp+0x36>
 800b4f8:	051b      	lsls	r3, r3, #20
 800b4fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b4fe:	2400      	movs	r4, #0
 800b500:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b504:	4622      	mov	r2, r4
 800b506:	462b      	mov	r3, r5
 800b508:	f7f5 f88e 	bl	8000628 <__aeabi_dmul>
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b510 <_strtod_l>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	ed2d 8b02 	vpush	{d8}
 800b518:	b09b      	sub	sp, #108	; 0x6c
 800b51a:	4604      	mov	r4, r0
 800b51c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b51e:	2200      	movs	r2, #0
 800b520:	9216      	str	r2, [sp, #88]	; 0x58
 800b522:	460d      	mov	r5, r1
 800b524:	f04f 0800 	mov.w	r8, #0
 800b528:	f04f 0900 	mov.w	r9, #0
 800b52c:	460a      	mov	r2, r1
 800b52e:	9215      	str	r2, [sp, #84]	; 0x54
 800b530:	7811      	ldrb	r1, [r2, #0]
 800b532:	292b      	cmp	r1, #43	; 0x2b
 800b534:	d04c      	beq.n	800b5d0 <_strtod_l+0xc0>
 800b536:	d83a      	bhi.n	800b5ae <_strtod_l+0x9e>
 800b538:	290d      	cmp	r1, #13
 800b53a:	d834      	bhi.n	800b5a6 <_strtod_l+0x96>
 800b53c:	2908      	cmp	r1, #8
 800b53e:	d834      	bhi.n	800b5aa <_strtod_l+0x9a>
 800b540:	2900      	cmp	r1, #0
 800b542:	d03d      	beq.n	800b5c0 <_strtod_l+0xb0>
 800b544:	2200      	movs	r2, #0
 800b546:	920a      	str	r2, [sp, #40]	; 0x28
 800b548:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b54a:	7832      	ldrb	r2, [r6, #0]
 800b54c:	2a30      	cmp	r2, #48	; 0x30
 800b54e:	f040 80b4 	bne.w	800b6ba <_strtod_l+0x1aa>
 800b552:	7872      	ldrb	r2, [r6, #1]
 800b554:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b558:	2a58      	cmp	r2, #88	; 0x58
 800b55a:	d170      	bne.n	800b63e <_strtod_l+0x12e>
 800b55c:	9302      	str	r3, [sp, #8]
 800b55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	ab16      	add	r3, sp, #88	; 0x58
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	4a8e      	ldr	r2, [pc, #568]	; (800b7a0 <_strtod_l+0x290>)
 800b568:	ab17      	add	r3, sp, #92	; 0x5c
 800b56a:	a915      	add	r1, sp, #84	; 0x54
 800b56c:	4620      	mov	r0, r4
 800b56e:	f002 feb5 	bl	800e2dc <__gethex>
 800b572:	f010 070f 	ands.w	r7, r0, #15
 800b576:	4605      	mov	r5, r0
 800b578:	d005      	beq.n	800b586 <_strtod_l+0x76>
 800b57a:	2f06      	cmp	r7, #6
 800b57c:	d12a      	bne.n	800b5d4 <_strtod_l+0xc4>
 800b57e:	3601      	adds	r6, #1
 800b580:	2300      	movs	r3, #0
 800b582:	9615      	str	r6, [sp, #84]	; 0x54
 800b584:	930a      	str	r3, [sp, #40]	; 0x28
 800b586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f040 857f 	bne.w	800c08c <_strtod_l+0xb7c>
 800b58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b590:	b1db      	cbz	r3, 800b5ca <_strtod_l+0xba>
 800b592:	4642      	mov	r2, r8
 800b594:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b598:	ec43 2b10 	vmov	d0, r2, r3
 800b59c:	b01b      	add	sp, #108	; 0x6c
 800b59e:	ecbd 8b02 	vpop	{d8}
 800b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a6:	2920      	cmp	r1, #32
 800b5a8:	d1cc      	bne.n	800b544 <_strtod_l+0x34>
 800b5aa:	3201      	adds	r2, #1
 800b5ac:	e7bf      	b.n	800b52e <_strtod_l+0x1e>
 800b5ae:	292d      	cmp	r1, #45	; 0x2d
 800b5b0:	d1c8      	bne.n	800b544 <_strtod_l+0x34>
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	910a      	str	r1, [sp, #40]	; 0x28
 800b5b6:	1c51      	adds	r1, r2, #1
 800b5b8:	9115      	str	r1, [sp, #84]	; 0x54
 800b5ba:	7852      	ldrb	r2, [r2, #1]
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	d1c3      	bne.n	800b548 <_strtod_l+0x38>
 800b5c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5c2:	9515      	str	r5, [sp, #84]	; 0x54
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f040 855f 	bne.w	800c088 <_strtod_l+0xb78>
 800b5ca:	4642      	mov	r2, r8
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	e7e3      	b.n	800b598 <_strtod_l+0x88>
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	e7ef      	b.n	800b5b4 <_strtod_l+0xa4>
 800b5d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5d6:	b13a      	cbz	r2, 800b5e8 <_strtod_l+0xd8>
 800b5d8:	2135      	movs	r1, #53	; 0x35
 800b5da:	a818      	add	r0, sp, #96	; 0x60
 800b5dc:	f003 fde9 	bl	800f1b2 <__copybits>
 800b5e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f003 f9bc 	bl	800e960 <_Bfree>
 800b5e8:	3f01      	subs	r7, #1
 800b5ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5ec:	2f04      	cmp	r7, #4
 800b5ee:	d806      	bhi.n	800b5fe <_strtod_l+0xee>
 800b5f0:	e8df f007 	tbb	[pc, r7]
 800b5f4:	201d0314 	.word	0x201d0314
 800b5f8:	14          	.byte	0x14
 800b5f9:	00          	.byte	0x00
 800b5fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b5fe:	05e9      	lsls	r1, r5, #23
 800b600:	bf48      	it	mi
 800b602:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b60a:	0d1b      	lsrs	r3, r3, #20
 800b60c:	051b      	lsls	r3, r3, #20
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1b9      	bne.n	800b586 <_strtod_l+0x76>
 800b612:	f001 fee7 	bl	800d3e4 <__errno>
 800b616:	2322      	movs	r3, #34	; 0x22
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	e7b4      	b.n	800b586 <_strtod_l+0x76>
 800b61c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b620:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b624:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b628:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b62c:	e7e7      	b.n	800b5fe <_strtod_l+0xee>
 800b62e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b7a8 <_strtod_l+0x298>
 800b632:	e7e4      	b.n	800b5fe <_strtod_l+0xee>
 800b634:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b638:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b63c:	e7df      	b.n	800b5fe <_strtod_l+0xee>
 800b63e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	9215      	str	r2, [sp, #84]	; 0x54
 800b644:	785b      	ldrb	r3, [r3, #1]
 800b646:	2b30      	cmp	r3, #48	; 0x30
 800b648:	d0f9      	beq.n	800b63e <_strtod_l+0x12e>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d09b      	beq.n	800b586 <_strtod_l+0x76>
 800b64e:	2301      	movs	r3, #1
 800b650:	f04f 0a00 	mov.w	sl, #0
 800b654:	9304      	str	r3, [sp, #16]
 800b656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b658:	930b      	str	r3, [sp, #44]	; 0x2c
 800b65a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b65e:	46d3      	mov	fp, sl
 800b660:	220a      	movs	r2, #10
 800b662:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b664:	7806      	ldrb	r6, [r0, #0]
 800b666:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b66a:	b2d9      	uxtb	r1, r3
 800b66c:	2909      	cmp	r1, #9
 800b66e:	d926      	bls.n	800b6be <_strtod_l+0x1ae>
 800b670:	494c      	ldr	r1, [pc, #304]	; (800b7a4 <_strtod_l+0x294>)
 800b672:	2201      	movs	r2, #1
 800b674:	f001 fdf4 	bl	800d260 <strncmp>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d030      	beq.n	800b6de <_strtod_l+0x1ce>
 800b67c:	2000      	movs	r0, #0
 800b67e:	4632      	mov	r2, r6
 800b680:	9005      	str	r0, [sp, #20]
 800b682:	465e      	mov	r6, fp
 800b684:	4603      	mov	r3, r0
 800b686:	2a65      	cmp	r2, #101	; 0x65
 800b688:	d001      	beq.n	800b68e <_strtod_l+0x17e>
 800b68a:	2a45      	cmp	r2, #69	; 0x45
 800b68c:	d113      	bne.n	800b6b6 <_strtod_l+0x1a6>
 800b68e:	b91e      	cbnz	r6, 800b698 <_strtod_l+0x188>
 800b690:	9a04      	ldr	r2, [sp, #16]
 800b692:	4302      	orrs	r2, r0
 800b694:	d094      	beq.n	800b5c0 <_strtod_l+0xb0>
 800b696:	2600      	movs	r6, #0
 800b698:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b69a:	1c6a      	adds	r2, r5, #1
 800b69c:	9215      	str	r2, [sp, #84]	; 0x54
 800b69e:	786a      	ldrb	r2, [r5, #1]
 800b6a0:	2a2b      	cmp	r2, #43	; 0x2b
 800b6a2:	d074      	beq.n	800b78e <_strtod_l+0x27e>
 800b6a4:	2a2d      	cmp	r2, #45	; 0x2d
 800b6a6:	d078      	beq.n	800b79a <_strtod_l+0x28a>
 800b6a8:	f04f 0c00 	mov.w	ip, #0
 800b6ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b6b0:	2909      	cmp	r1, #9
 800b6b2:	d97f      	bls.n	800b7b4 <_strtod_l+0x2a4>
 800b6b4:	9515      	str	r5, [sp, #84]	; 0x54
 800b6b6:	2700      	movs	r7, #0
 800b6b8:	e09e      	b.n	800b7f8 <_strtod_l+0x2e8>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e7c8      	b.n	800b650 <_strtod_l+0x140>
 800b6be:	f1bb 0f08 	cmp.w	fp, #8
 800b6c2:	bfd8      	it	le
 800b6c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b6c6:	f100 0001 	add.w	r0, r0, #1
 800b6ca:	bfda      	itte	le
 800b6cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6d0:	9309      	strle	r3, [sp, #36]	; 0x24
 800b6d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b6d6:	f10b 0b01 	add.w	fp, fp, #1
 800b6da:	9015      	str	r0, [sp, #84]	; 0x54
 800b6dc:	e7c1      	b.n	800b662 <_strtod_l+0x152>
 800b6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	9215      	str	r2, [sp, #84]	; 0x54
 800b6e4:	785a      	ldrb	r2, [r3, #1]
 800b6e6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ea:	d037      	beq.n	800b75c <_strtod_l+0x24c>
 800b6ec:	9005      	str	r0, [sp, #20]
 800b6ee:	465e      	mov	r6, fp
 800b6f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d912      	bls.n	800b71e <_strtod_l+0x20e>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e7c4      	b.n	800b686 <_strtod_l+0x176>
 800b6fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	9215      	str	r2, [sp, #84]	; 0x54
 800b702:	785a      	ldrb	r2, [r3, #1]
 800b704:	3001      	adds	r0, #1
 800b706:	2a30      	cmp	r2, #48	; 0x30
 800b708:	d0f8      	beq.n	800b6fc <_strtod_l+0x1ec>
 800b70a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b70e:	2b08      	cmp	r3, #8
 800b710:	f200 84c1 	bhi.w	800c096 <_strtod_l+0xb86>
 800b714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b716:	9005      	str	r0, [sp, #20]
 800b718:	2000      	movs	r0, #0
 800b71a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b71c:	4606      	mov	r6, r0
 800b71e:	3a30      	subs	r2, #48	; 0x30
 800b720:	f100 0301 	add.w	r3, r0, #1
 800b724:	d014      	beq.n	800b750 <_strtod_l+0x240>
 800b726:	9905      	ldr	r1, [sp, #20]
 800b728:	4419      	add	r1, r3
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	4633      	mov	r3, r6
 800b72e:	eb00 0c06 	add.w	ip, r0, r6
 800b732:	210a      	movs	r1, #10
 800b734:	4563      	cmp	r3, ip
 800b736:	d113      	bne.n	800b760 <_strtod_l+0x250>
 800b738:	1833      	adds	r3, r6, r0
 800b73a:	2b08      	cmp	r3, #8
 800b73c:	f106 0601 	add.w	r6, r6, #1
 800b740:	4406      	add	r6, r0
 800b742:	dc1a      	bgt.n	800b77a <_strtod_l+0x26a>
 800b744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b746:	230a      	movs	r3, #10
 800b748:	fb03 2301 	mla	r3, r3, r1, r2
 800b74c:	9309      	str	r3, [sp, #36]	; 0x24
 800b74e:	2300      	movs	r3, #0
 800b750:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b752:	1c51      	adds	r1, r2, #1
 800b754:	9115      	str	r1, [sp, #84]	; 0x54
 800b756:	7852      	ldrb	r2, [r2, #1]
 800b758:	4618      	mov	r0, r3
 800b75a:	e7c9      	b.n	800b6f0 <_strtod_l+0x1e0>
 800b75c:	4658      	mov	r0, fp
 800b75e:	e7d2      	b.n	800b706 <_strtod_l+0x1f6>
 800b760:	2b08      	cmp	r3, #8
 800b762:	f103 0301 	add.w	r3, r3, #1
 800b766:	dc03      	bgt.n	800b770 <_strtod_l+0x260>
 800b768:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b76a:	434f      	muls	r7, r1
 800b76c:	9709      	str	r7, [sp, #36]	; 0x24
 800b76e:	e7e1      	b.n	800b734 <_strtod_l+0x224>
 800b770:	2b10      	cmp	r3, #16
 800b772:	bfd8      	it	le
 800b774:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b778:	e7dc      	b.n	800b734 <_strtod_l+0x224>
 800b77a:	2e10      	cmp	r6, #16
 800b77c:	bfdc      	itt	le
 800b77e:	230a      	movle	r3, #10
 800b780:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b784:	e7e3      	b.n	800b74e <_strtod_l+0x23e>
 800b786:	2300      	movs	r3, #0
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	2301      	movs	r3, #1
 800b78c:	e780      	b.n	800b690 <_strtod_l+0x180>
 800b78e:	f04f 0c00 	mov.w	ip, #0
 800b792:	1caa      	adds	r2, r5, #2
 800b794:	9215      	str	r2, [sp, #84]	; 0x54
 800b796:	78aa      	ldrb	r2, [r5, #2]
 800b798:	e788      	b.n	800b6ac <_strtod_l+0x19c>
 800b79a:	f04f 0c01 	mov.w	ip, #1
 800b79e:	e7f8      	b.n	800b792 <_strtod_l+0x282>
 800b7a0:	08011058 	.word	0x08011058
 800b7a4:	08011054 	.word	0x08011054
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7ae:	1c51      	adds	r1, r2, #1
 800b7b0:	9115      	str	r1, [sp, #84]	; 0x54
 800b7b2:	7852      	ldrb	r2, [r2, #1]
 800b7b4:	2a30      	cmp	r2, #48	; 0x30
 800b7b6:	d0f9      	beq.n	800b7ac <_strtod_l+0x29c>
 800b7b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b7bc:	2908      	cmp	r1, #8
 800b7be:	f63f af7a 	bhi.w	800b6b6 <_strtod_l+0x1a6>
 800b7c2:	3a30      	subs	r2, #48	; 0x30
 800b7c4:	9208      	str	r2, [sp, #32]
 800b7c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7c8:	920c      	str	r2, [sp, #48]	; 0x30
 800b7ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7cc:	1c57      	adds	r7, r2, #1
 800b7ce:	9715      	str	r7, [sp, #84]	; 0x54
 800b7d0:	7852      	ldrb	r2, [r2, #1]
 800b7d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b7d6:	f1be 0f09 	cmp.w	lr, #9
 800b7da:	d938      	bls.n	800b84e <_strtod_l+0x33e>
 800b7dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b7de:	1a7f      	subs	r7, r7, r1
 800b7e0:	2f08      	cmp	r7, #8
 800b7e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b7e6:	dc03      	bgt.n	800b7f0 <_strtod_l+0x2e0>
 800b7e8:	9908      	ldr	r1, [sp, #32]
 800b7ea:	428f      	cmp	r7, r1
 800b7ec:	bfa8      	it	ge
 800b7ee:	460f      	movge	r7, r1
 800b7f0:	f1bc 0f00 	cmp.w	ip, #0
 800b7f4:	d000      	beq.n	800b7f8 <_strtod_l+0x2e8>
 800b7f6:	427f      	negs	r7, r7
 800b7f8:	2e00      	cmp	r6, #0
 800b7fa:	d14f      	bne.n	800b89c <_strtod_l+0x38c>
 800b7fc:	9904      	ldr	r1, [sp, #16]
 800b7fe:	4301      	orrs	r1, r0
 800b800:	f47f aec1 	bne.w	800b586 <_strtod_l+0x76>
 800b804:	2b00      	cmp	r3, #0
 800b806:	f47f aedb 	bne.w	800b5c0 <_strtod_l+0xb0>
 800b80a:	2a69      	cmp	r2, #105	; 0x69
 800b80c:	d029      	beq.n	800b862 <_strtod_l+0x352>
 800b80e:	dc26      	bgt.n	800b85e <_strtod_l+0x34e>
 800b810:	2a49      	cmp	r2, #73	; 0x49
 800b812:	d026      	beq.n	800b862 <_strtod_l+0x352>
 800b814:	2a4e      	cmp	r2, #78	; 0x4e
 800b816:	f47f aed3 	bne.w	800b5c0 <_strtod_l+0xb0>
 800b81a:	499b      	ldr	r1, [pc, #620]	; (800ba88 <_strtod_l+0x578>)
 800b81c:	a815      	add	r0, sp, #84	; 0x54
 800b81e:	f002 ff9d 	bl	800e75c <__match>
 800b822:	2800      	cmp	r0, #0
 800b824:	f43f aecc 	beq.w	800b5c0 <_strtod_l+0xb0>
 800b828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b28      	cmp	r3, #40	; 0x28
 800b82e:	d12f      	bne.n	800b890 <_strtod_l+0x380>
 800b830:	4996      	ldr	r1, [pc, #600]	; (800ba8c <_strtod_l+0x57c>)
 800b832:	aa18      	add	r2, sp, #96	; 0x60
 800b834:	a815      	add	r0, sp, #84	; 0x54
 800b836:	f002 ffa5 	bl	800e784 <__hexnan>
 800b83a:	2805      	cmp	r0, #5
 800b83c:	d128      	bne.n	800b890 <_strtod_l+0x380>
 800b83e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b844:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b848:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b84c:	e69b      	b.n	800b586 <_strtod_l+0x76>
 800b84e:	9f08      	ldr	r7, [sp, #32]
 800b850:	210a      	movs	r1, #10
 800b852:	fb01 2107 	mla	r1, r1, r7, r2
 800b856:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b85a:	9208      	str	r2, [sp, #32]
 800b85c:	e7b5      	b.n	800b7ca <_strtod_l+0x2ba>
 800b85e:	2a6e      	cmp	r2, #110	; 0x6e
 800b860:	e7d9      	b.n	800b816 <_strtod_l+0x306>
 800b862:	498b      	ldr	r1, [pc, #556]	; (800ba90 <_strtod_l+0x580>)
 800b864:	a815      	add	r0, sp, #84	; 0x54
 800b866:	f002 ff79 	bl	800e75c <__match>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f aea8 	beq.w	800b5c0 <_strtod_l+0xb0>
 800b870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b872:	4988      	ldr	r1, [pc, #544]	; (800ba94 <_strtod_l+0x584>)
 800b874:	3b01      	subs	r3, #1
 800b876:	a815      	add	r0, sp, #84	; 0x54
 800b878:	9315      	str	r3, [sp, #84]	; 0x54
 800b87a:	f002 ff6f 	bl	800e75c <__match>
 800b87e:	b910      	cbnz	r0, 800b886 <_strtod_l+0x376>
 800b880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b882:	3301      	adds	r3, #1
 800b884:	9315      	str	r3, [sp, #84]	; 0x54
 800b886:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800baa4 <_strtod_l+0x594>
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	e67a      	b.n	800b586 <_strtod_l+0x76>
 800b890:	4881      	ldr	r0, [pc, #516]	; (800ba98 <_strtod_l+0x588>)
 800b892:	f001 fde5 	bl	800d460 <nan>
 800b896:	ec59 8b10 	vmov	r8, r9, d0
 800b89a:	e674      	b.n	800b586 <_strtod_l+0x76>
 800b89c:	9b05      	ldr	r3, [sp, #20]
 800b89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8a0:	1afb      	subs	r3, r7, r3
 800b8a2:	f1bb 0f00 	cmp.w	fp, #0
 800b8a6:	bf08      	it	eq
 800b8a8:	46b3      	moveq	fp, r6
 800b8aa:	2e10      	cmp	r6, #16
 800b8ac:	9308      	str	r3, [sp, #32]
 800b8ae:	4635      	mov	r5, r6
 800b8b0:	bfa8      	it	ge
 800b8b2:	2510      	movge	r5, #16
 800b8b4:	f7f4 fe3e 	bl	8000534 <__aeabi_ui2d>
 800b8b8:	2e09      	cmp	r6, #9
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4689      	mov	r9, r1
 800b8be:	dd13      	ble.n	800b8e8 <_strtod_l+0x3d8>
 800b8c0:	4b76      	ldr	r3, [pc, #472]	; (800ba9c <_strtod_l+0x58c>)
 800b8c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b8c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b8ca:	f7f4 fead 	bl	8000628 <__aeabi_dmul>
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	4689      	mov	r9, r1
 800b8d4:	f7f4 fe2e 	bl	8000534 <__aeabi_ui2d>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4640      	mov	r0, r8
 800b8de:	4649      	mov	r1, r9
 800b8e0:	f7f4 fcec 	bl	80002bc <__adddf3>
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	2e0f      	cmp	r6, #15
 800b8ea:	dc38      	bgt.n	800b95e <_strtod_l+0x44e>
 800b8ec:	9b08      	ldr	r3, [sp, #32]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f43f ae49 	beq.w	800b586 <_strtod_l+0x76>
 800b8f4:	dd24      	ble.n	800b940 <_strtod_l+0x430>
 800b8f6:	2b16      	cmp	r3, #22
 800b8f8:	dc0b      	bgt.n	800b912 <_strtod_l+0x402>
 800b8fa:	4968      	ldr	r1, [pc, #416]	; (800ba9c <_strtod_l+0x58c>)
 800b8fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b904:	4642      	mov	r2, r8
 800b906:	464b      	mov	r3, r9
 800b908:	f7f4 fe8e 	bl	8000628 <__aeabi_dmul>
 800b90c:	4680      	mov	r8, r0
 800b90e:	4689      	mov	r9, r1
 800b910:	e639      	b.n	800b586 <_strtod_l+0x76>
 800b912:	9a08      	ldr	r2, [sp, #32]
 800b914:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b918:	4293      	cmp	r3, r2
 800b91a:	db20      	blt.n	800b95e <_strtod_l+0x44e>
 800b91c:	4c5f      	ldr	r4, [pc, #380]	; (800ba9c <_strtod_l+0x58c>)
 800b91e:	f1c6 060f 	rsb	r6, r6, #15
 800b922:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b926:	4642      	mov	r2, r8
 800b928:	464b      	mov	r3, r9
 800b92a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b92e:	f7f4 fe7b 	bl	8000628 <__aeabi_dmul>
 800b932:	9b08      	ldr	r3, [sp, #32]
 800b934:	1b9e      	subs	r6, r3, r6
 800b936:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b93a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b93e:	e7e3      	b.n	800b908 <_strtod_l+0x3f8>
 800b940:	9b08      	ldr	r3, [sp, #32]
 800b942:	3316      	adds	r3, #22
 800b944:	db0b      	blt.n	800b95e <_strtod_l+0x44e>
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	1bdf      	subs	r7, r3, r7
 800b94a:	4b54      	ldr	r3, [pc, #336]	; (800ba9c <_strtod_l+0x58c>)
 800b94c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b954:	4640      	mov	r0, r8
 800b956:	4649      	mov	r1, r9
 800b958:	f7f4 ff90 	bl	800087c <__aeabi_ddiv>
 800b95c:	e7d6      	b.n	800b90c <_strtod_l+0x3fc>
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	1b75      	subs	r5, r6, r5
 800b962:	441d      	add	r5, r3
 800b964:	2d00      	cmp	r5, #0
 800b966:	dd70      	ble.n	800ba4a <_strtod_l+0x53a>
 800b968:	f015 030f 	ands.w	r3, r5, #15
 800b96c:	d00a      	beq.n	800b984 <_strtod_l+0x474>
 800b96e:	494b      	ldr	r1, [pc, #300]	; (800ba9c <_strtod_l+0x58c>)
 800b970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b974:	4642      	mov	r2, r8
 800b976:	464b      	mov	r3, r9
 800b978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97c:	f7f4 fe54 	bl	8000628 <__aeabi_dmul>
 800b980:	4680      	mov	r8, r0
 800b982:	4689      	mov	r9, r1
 800b984:	f035 050f 	bics.w	r5, r5, #15
 800b988:	d04d      	beq.n	800ba26 <_strtod_l+0x516>
 800b98a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b98e:	dd22      	ble.n	800b9d6 <_strtod_l+0x4c6>
 800b990:	2500      	movs	r5, #0
 800b992:	46ab      	mov	fp, r5
 800b994:	9509      	str	r5, [sp, #36]	; 0x24
 800b996:	9505      	str	r5, [sp, #20]
 800b998:	2322      	movs	r3, #34	; 0x22
 800b99a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800baa4 <_strtod_l+0x594>
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	f04f 0800 	mov.w	r8, #0
 800b9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f43f aded 	beq.w	800b586 <_strtod_l+0x76>
 800b9ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f002 ffd6 	bl	800e960 <_Bfree>
 800b9b4:	9905      	ldr	r1, [sp, #20]
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f002 ffd2 	bl	800e960 <_Bfree>
 800b9bc:	4659      	mov	r1, fp
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f002 ffce 	bl	800e960 <_Bfree>
 800b9c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f002 ffca 	bl	800e960 <_Bfree>
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f002 ffc6 	bl	800e960 <_Bfree>
 800b9d4:	e5d7      	b.n	800b586 <_strtod_l+0x76>
 800b9d6:	4b32      	ldr	r3, [pc, #200]	; (800baa0 <_strtod_l+0x590>)
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	112d      	asrs	r5, r5, #4
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	469a      	mov	sl, r3
 800b9e4:	2d01      	cmp	r5, #1
 800b9e6:	dc21      	bgt.n	800ba2c <_strtod_l+0x51c>
 800b9e8:	b10b      	cbz	r3, 800b9ee <_strtod_l+0x4de>
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	4689      	mov	r9, r1
 800b9ee:	492c      	ldr	r1, [pc, #176]	; (800baa0 <_strtod_l+0x590>)
 800b9f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b9f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba00:	f7f4 fe12 	bl	8000628 <__aeabi_dmul>
 800ba04:	4b27      	ldr	r3, [pc, #156]	; (800baa4 <_strtod_l+0x594>)
 800ba06:	460a      	mov	r2, r1
 800ba08:	400b      	ands	r3, r1
 800ba0a:	4927      	ldr	r1, [pc, #156]	; (800baa8 <_strtod_l+0x598>)
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	4680      	mov	r8, r0
 800ba10:	d8be      	bhi.n	800b990 <_strtod_l+0x480>
 800ba12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba16:	428b      	cmp	r3, r1
 800ba18:	bf86      	itte	hi
 800ba1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800baac <_strtod_l+0x59c>
 800ba1e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800ba22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ba26:	2300      	movs	r3, #0
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	e07b      	b.n	800bb24 <_strtod_l+0x614>
 800ba2c:	07ea      	lsls	r2, r5, #31
 800ba2e:	d505      	bpl.n	800ba3c <_strtod_l+0x52c>
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fdf7 	bl	8000628 <__aeabi_dmul>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	3208      	adds	r2, #8
 800ba40:	f10a 0a01 	add.w	sl, sl, #1
 800ba44:	106d      	asrs	r5, r5, #1
 800ba46:	9204      	str	r2, [sp, #16]
 800ba48:	e7cc      	b.n	800b9e4 <_strtod_l+0x4d4>
 800ba4a:	d0ec      	beq.n	800ba26 <_strtod_l+0x516>
 800ba4c:	426d      	negs	r5, r5
 800ba4e:	f015 020f 	ands.w	r2, r5, #15
 800ba52:	d00a      	beq.n	800ba6a <_strtod_l+0x55a>
 800ba54:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <_strtod_l+0x58c>)
 800ba56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f4 ff0b 	bl	800087c <__aeabi_ddiv>
 800ba66:	4680      	mov	r8, r0
 800ba68:	4689      	mov	r9, r1
 800ba6a:	112d      	asrs	r5, r5, #4
 800ba6c:	d0db      	beq.n	800ba26 <_strtod_l+0x516>
 800ba6e:	2d1f      	cmp	r5, #31
 800ba70:	dd1e      	ble.n	800bab0 <_strtod_l+0x5a0>
 800ba72:	2500      	movs	r5, #0
 800ba74:	46ab      	mov	fp, r5
 800ba76:	9509      	str	r5, [sp, #36]	; 0x24
 800ba78:	9505      	str	r5, [sp, #20]
 800ba7a:	2322      	movs	r3, #34	; 0x22
 800ba7c:	f04f 0800 	mov.w	r8, #0
 800ba80:	f04f 0900 	mov.w	r9, #0
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	e78d      	b.n	800b9a4 <_strtod_l+0x494>
 800ba88:	080111b6 	.word	0x080111b6
 800ba8c:	0801106c 	.word	0x0801106c
 800ba90:	080111ae 	.word	0x080111ae
 800ba94:	080111ed 	.word	0x080111ed
 800ba98:	08011478 	.word	0x08011478
 800ba9c:	08011358 	.word	0x08011358
 800baa0:	08011330 	.word	0x08011330
 800baa4:	7ff00000 	.word	0x7ff00000
 800baa8:	7ca00000 	.word	0x7ca00000
 800baac:	7fefffff 	.word	0x7fefffff
 800bab0:	f015 0310 	ands.w	r3, r5, #16
 800bab4:	bf18      	it	ne
 800bab6:	236a      	movne	r3, #106	; 0x6a
 800bab8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800be5c <_strtod_l+0x94c>
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	4640      	mov	r0, r8
 800bac0:	4649      	mov	r1, r9
 800bac2:	2300      	movs	r3, #0
 800bac4:	07ea      	lsls	r2, r5, #31
 800bac6:	d504      	bpl.n	800bad2 <_strtod_l+0x5c2>
 800bac8:	e9da 2300 	ldrd	r2, r3, [sl]
 800bacc:	f7f4 fdac 	bl	8000628 <__aeabi_dmul>
 800bad0:	2301      	movs	r3, #1
 800bad2:	106d      	asrs	r5, r5, #1
 800bad4:	f10a 0a08 	add.w	sl, sl, #8
 800bad8:	d1f4      	bne.n	800bac4 <_strtod_l+0x5b4>
 800bada:	b10b      	cbz	r3, 800bae0 <_strtod_l+0x5d0>
 800badc:	4680      	mov	r8, r0
 800bade:	4689      	mov	r9, r1
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	b1bb      	cbz	r3, 800bb14 <_strtod_l+0x604>
 800bae4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bae8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800baec:	2b00      	cmp	r3, #0
 800baee:	4649      	mov	r1, r9
 800baf0:	dd10      	ble.n	800bb14 <_strtod_l+0x604>
 800baf2:	2b1f      	cmp	r3, #31
 800baf4:	f340 811e 	ble.w	800bd34 <_strtod_l+0x824>
 800baf8:	2b34      	cmp	r3, #52	; 0x34
 800bafa:	bfde      	ittt	le
 800bafc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bb00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bb04:	4093      	lslle	r3, r2
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	bfcc      	ite	gt
 800bb0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bb10:	ea03 0901 	andle.w	r9, r3, r1
 800bb14:	2200      	movs	r2, #0
 800bb16:	2300      	movs	r3, #0
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f4 ffec 	bl	8000af8 <__aeabi_dcmpeq>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d1a6      	bne.n	800ba72 <_strtod_l+0x562>
 800bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb2a:	4633      	mov	r3, r6
 800bb2c:	465a      	mov	r2, fp
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f002 ff7e 	bl	800ea30 <__s2b>
 800bb34:	9009      	str	r0, [sp, #36]	; 0x24
 800bb36:	2800      	cmp	r0, #0
 800bb38:	f43f af2a 	beq.w	800b990 <_strtod_l+0x480>
 800bb3c:	9a08      	ldr	r2, [sp, #32]
 800bb3e:	9b05      	ldr	r3, [sp, #20]
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	eba3 0307 	sub.w	r3, r3, r7
 800bb46:	bfa8      	it	ge
 800bb48:	2300      	movge	r3, #0
 800bb4a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb4c:	2500      	movs	r5, #0
 800bb4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb52:	9312      	str	r3, [sp, #72]	; 0x48
 800bb54:	46ab      	mov	fp, r5
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	4620      	mov	r0, r4
 800bb5a:	6859      	ldr	r1, [r3, #4]
 800bb5c:	f002 fec0 	bl	800e8e0 <_Balloc>
 800bb60:	9005      	str	r0, [sp, #20]
 800bb62:	2800      	cmp	r0, #0
 800bb64:	f43f af18 	beq.w	800b998 <_strtod_l+0x488>
 800bb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6a:	691a      	ldr	r2, [r3, #16]
 800bb6c:	3202      	adds	r2, #2
 800bb6e:	f103 010c 	add.w	r1, r3, #12
 800bb72:	0092      	lsls	r2, r2, #2
 800bb74:	300c      	adds	r0, #12
 800bb76:	f001 fc62 	bl	800d43e <memcpy>
 800bb7a:	ec49 8b10 	vmov	d0, r8, r9
 800bb7e:	aa18      	add	r2, sp, #96	; 0x60
 800bb80:	a917      	add	r1, sp, #92	; 0x5c
 800bb82:	4620      	mov	r0, r4
 800bb84:	f003 fa88 	bl	800f098 <__d2b>
 800bb88:	ec49 8b18 	vmov	d8, r8, r9
 800bb8c:	9016      	str	r0, [sp, #88]	; 0x58
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af02 	beq.w	800b998 <_strtod_l+0x488>
 800bb94:	2101      	movs	r1, #1
 800bb96:	4620      	mov	r0, r4
 800bb98:	f002 ffe2 	bl	800eb60 <__i2b>
 800bb9c:	4683      	mov	fp, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f43f aefa 	beq.w	800b998 <_strtod_l+0x488>
 800bba4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bba6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	bfab      	itete	ge
 800bbac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bbae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bbb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bbb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bbb6:	bfac      	ite	ge
 800bbb8:	eb06 0a03 	addge.w	sl, r6, r3
 800bbbc:	1b9f      	sublt	r7, r3, r6
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	1af6      	subs	r6, r6, r3
 800bbc2:	4416      	add	r6, r2
 800bbc4:	4ba0      	ldr	r3, [pc, #640]	; (800be48 <_strtod_l+0x938>)
 800bbc6:	3e01      	subs	r6, #1
 800bbc8:	429e      	cmp	r6, r3
 800bbca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bbce:	f280 80c4 	bge.w	800bd5a <_strtod_l+0x84a>
 800bbd2:	1b9b      	subs	r3, r3, r6
 800bbd4:	2b1f      	cmp	r3, #31
 800bbd6:	eba2 0203 	sub.w	r2, r2, r3
 800bbda:	f04f 0101 	mov.w	r1, #1
 800bbde:	f300 80b0 	bgt.w	800bd42 <_strtod_l+0x832>
 800bbe2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbe6:	930e      	str	r3, [sp, #56]	; 0x38
 800bbe8:	2300      	movs	r3, #0
 800bbea:	930d      	str	r3, [sp, #52]	; 0x34
 800bbec:	eb0a 0602 	add.w	r6, sl, r2
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	45b2      	cmp	sl, r6
 800bbf4:	4417      	add	r7, r2
 800bbf6:	441f      	add	r7, r3
 800bbf8:	4653      	mov	r3, sl
 800bbfa:	bfa8      	it	ge
 800bbfc:	4633      	movge	r3, r6
 800bbfe:	42bb      	cmp	r3, r7
 800bc00:	bfa8      	it	ge
 800bc02:	463b      	movge	r3, r7
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bfc2      	ittt	gt
 800bc08:	1af6      	subgt	r6, r6, r3
 800bc0a:	1aff      	subgt	r7, r7, r3
 800bc0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bc10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dd17      	ble.n	800bc46 <_strtod_l+0x736>
 800bc16:	4659      	mov	r1, fp
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f003 f860 	bl	800ece0 <__pow5mult>
 800bc20:	4683      	mov	fp, r0
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f43f aeb8 	beq.w	800b998 <_strtod_l+0x488>
 800bc28:	4601      	mov	r1, r0
 800bc2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f002 ffad 	bl	800eb8c <__multiply>
 800bc32:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f43f aeaf 	beq.w	800b998 <_strtod_l+0x488>
 800bc3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f002 fe8f 	bl	800e960 <_Bfree>
 800bc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc44:	9316      	str	r3, [sp, #88]	; 0x58
 800bc46:	2e00      	cmp	r6, #0
 800bc48:	f300 808c 	bgt.w	800bd64 <_strtod_l+0x854>
 800bc4c:	9b08      	ldr	r3, [sp, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dd08      	ble.n	800bc64 <_strtod_l+0x754>
 800bc52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc54:	9905      	ldr	r1, [sp, #20]
 800bc56:	4620      	mov	r0, r4
 800bc58:	f003 f842 	bl	800ece0 <__pow5mult>
 800bc5c:	9005      	str	r0, [sp, #20]
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f ae9a 	beq.w	800b998 <_strtod_l+0x488>
 800bc64:	2f00      	cmp	r7, #0
 800bc66:	dd08      	ble.n	800bc7a <_strtod_l+0x76a>
 800bc68:	9905      	ldr	r1, [sp, #20]
 800bc6a:	463a      	mov	r2, r7
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f003 f891 	bl	800ed94 <__lshift>
 800bc72:	9005      	str	r0, [sp, #20]
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f43f ae8f 	beq.w	800b998 <_strtod_l+0x488>
 800bc7a:	f1ba 0f00 	cmp.w	sl, #0
 800bc7e:	dd08      	ble.n	800bc92 <_strtod_l+0x782>
 800bc80:	4659      	mov	r1, fp
 800bc82:	4652      	mov	r2, sl
 800bc84:	4620      	mov	r0, r4
 800bc86:	f003 f885 	bl	800ed94 <__lshift>
 800bc8a:	4683      	mov	fp, r0
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f43f ae83 	beq.w	800b998 <_strtod_l+0x488>
 800bc92:	9a05      	ldr	r2, [sp, #20]
 800bc94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc96:	4620      	mov	r0, r4
 800bc98:	f003 f904 	bl	800eea4 <__mdiff>
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f43f ae7a 	beq.w	800b998 <_strtod_l+0x488>
 800bca4:	68c3      	ldr	r3, [r0, #12]
 800bca6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60c3      	str	r3, [r0, #12]
 800bcac:	4659      	mov	r1, fp
 800bcae:	f003 f8dd 	bl	800ee6c <__mcmp>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	da60      	bge.n	800bd78 <_strtod_l+0x868>
 800bcb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb8:	ea53 0308 	orrs.w	r3, r3, r8
 800bcbc:	f040 8084 	bne.w	800bdc8 <_strtod_l+0x8b8>
 800bcc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d17f      	bne.n	800bdc8 <_strtod_l+0x8b8>
 800bcc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bccc:	0d1b      	lsrs	r3, r3, #20
 800bcce:	051b      	lsls	r3, r3, #20
 800bcd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bcd4:	d978      	bls.n	800bdc8 <_strtod_l+0x8b8>
 800bcd6:	696b      	ldr	r3, [r5, #20]
 800bcd8:	b913      	cbnz	r3, 800bce0 <_strtod_l+0x7d0>
 800bcda:	692b      	ldr	r3, [r5, #16]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	dd73      	ble.n	800bdc8 <_strtod_l+0x8b8>
 800bce0:	4629      	mov	r1, r5
 800bce2:	2201      	movs	r2, #1
 800bce4:	4620      	mov	r0, r4
 800bce6:	f003 f855 	bl	800ed94 <__lshift>
 800bcea:	4659      	mov	r1, fp
 800bcec:	4605      	mov	r5, r0
 800bcee:	f003 f8bd 	bl	800ee6c <__mcmp>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	dd68      	ble.n	800bdc8 <_strtod_l+0x8b8>
 800bcf6:	9904      	ldr	r1, [sp, #16]
 800bcf8:	4a54      	ldr	r2, [pc, #336]	; (800be4c <_strtod_l+0x93c>)
 800bcfa:	464b      	mov	r3, r9
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	f000 8084 	beq.w	800be0a <_strtod_l+0x8fa>
 800bd02:	ea02 0109 	and.w	r1, r2, r9
 800bd06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bd0a:	dc7e      	bgt.n	800be0a <_strtod_l+0x8fa>
 800bd0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bd10:	f77f aeb3 	ble.w	800ba7a <_strtod_l+0x56a>
 800bd14:	4b4e      	ldr	r3, [pc, #312]	; (800be50 <_strtod_l+0x940>)
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f7f4 fc84 	bl	8000628 <__aeabi_dmul>
 800bd20:	4b4a      	ldr	r3, [pc, #296]	; (800be4c <_strtod_l+0x93c>)
 800bd22:	400b      	ands	r3, r1
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f47f ae3f 	bne.w	800b9ac <_strtod_l+0x49c>
 800bd2e:	2322      	movs	r3, #34	; 0x22
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	e63b      	b.n	800b9ac <_strtod_l+0x49c>
 800bd34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	ea03 0808 	and.w	r8, r3, r8
 800bd40:	e6e8      	b.n	800bb14 <_strtod_l+0x604>
 800bd42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bd46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bd4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bd4e:	36e2      	adds	r6, #226	; 0xe2
 800bd50:	fa01 f306 	lsl.w	r3, r1, r6
 800bd54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bd58:	e748      	b.n	800bbec <_strtod_l+0x6dc>
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bd62:	e743      	b.n	800bbec <_strtod_l+0x6dc>
 800bd64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd66:	4632      	mov	r2, r6
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f003 f813 	bl	800ed94 <__lshift>
 800bd6e:	9016      	str	r0, [sp, #88]	; 0x58
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f47f af6b 	bne.w	800bc4c <_strtod_l+0x73c>
 800bd76:	e60f      	b.n	800b998 <_strtod_l+0x488>
 800bd78:	46ca      	mov	sl, r9
 800bd7a:	d171      	bne.n	800be60 <_strtod_l+0x950>
 800bd7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd82:	b352      	cbz	r2, 800bdda <_strtod_l+0x8ca>
 800bd84:	4a33      	ldr	r2, [pc, #204]	; (800be54 <_strtod_l+0x944>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d12a      	bne.n	800bde0 <_strtod_l+0x8d0>
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	4641      	mov	r1, r8
 800bd8e:	b1fb      	cbz	r3, 800bdd0 <_strtod_l+0x8c0>
 800bd90:	4b2e      	ldr	r3, [pc, #184]	; (800be4c <_strtod_l+0x93c>)
 800bd92:	ea09 0303 	and.w	r3, r9, r3
 800bd96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd9e:	d81a      	bhi.n	800bdd6 <_strtod_l+0x8c6>
 800bda0:	0d1b      	lsrs	r3, r3, #20
 800bda2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bda6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdaa:	4299      	cmp	r1, r3
 800bdac:	d118      	bne.n	800bde0 <_strtod_l+0x8d0>
 800bdae:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <_strtod_l+0x948>)
 800bdb0:	459a      	cmp	sl, r3
 800bdb2:	d102      	bne.n	800bdba <_strtod_l+0x8aa>
 800bdb4:	3101      	adds	r1, #1
 800bdb6:	f43f adef 	beq.w	800b998 <_strtod_l+0x488>
 800bdba:	4b24      	ldr	r3, [pc, #144]	; (800be4c <_strtod_l+0x93c>)
 800bdbc:	ea0a 0303 	and.w	r3, sl, r3
 800bdc0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bdc4:	f04f 0800 	mov.w	r8, #0
 800bdc8:	9b04      	ldr	r3, [sp, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1a2      	bne.n	800bd14 <_strtod_l+0x804>
 800bdce:	e5ed      	b.n	800b9ac <_strtod_l+0x49c>
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdd4:	e7e9      	b.n	800bdaa <_strtod_l+0x89a>
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	e7e7      	b.n	800bdaa <_strtod_l+0x89a>
 800bdda:	ea53 0308 	orrs.w	r3, r3, r8
 800bdde:	d08a      	beq.n	800bcf6 <_strtod_l+0x7e6>
 800bde0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde2:	b1e3      	cbz	r3, 800be1e <_strtod_l+0x90e>
 800bde4:	ea13 0f0a 	tst.w	r3, sl
 800bde8:	d0ee      	beq.n	800bdc8 <_strtod_l+0x8b8>
 800bdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdec:	9a04      	ldr	r2, [sp, #16]
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	b1c3      	cbz	r3, 800be26 <_strtod_l+0x916>
 800bdf4:	f7ff fb6f 	bl	800b4d6 <sulp>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	ec51 0b18 	vmov	r0, r1, d8
 800be00:	f7f4 fa5c 	bl	80002bc <__adddf3>
 800be04:	4680      	mov	r8, r0
 800be06:	4689      	mov	r9, r1
 800be08:	e7de      	b.n	800bdc8 <_strtod_l+0x8b8>
 800be0a:	4013      	ands	r3, r2
 800be0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800be14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800be18:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800be1c:	e7d4      	b.n	800bdc8 <_strtod_l+0x8b8>
 800be1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be20:	ea13 0f08 	tst.w	r3, r8
 800be24:	e7e0      	b.n	800bde8 <_strtod_l+0x8d8>
 800be26:	f7ff fb56 	bl	800b4d6 <sulp>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	ec51 0b18 	vmov	r0, r1, d8
 800be32:	f7f4 fa41 	bl	80002b8 <__aeabi_dsub>
 800be36:	2200      	movs	r2, #0
 800be38:	2300      	movs	r3, #0
 800be3a:	4680      	mov	r8, r0
 800be3c:	4689      	mov	r9, r1
 800be3e:	f7f4 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 800be42:	2800      	cmp	r0, #0
 800be44:	d0c0      	beq.n	800bdc8 <_strtod_l+0x8b8>
 800be46:	e618      	b.n	800ba7a <_strtod_l+0x56a>
 800be48:	fffffc02 	.word	0xfffffc02
 800be4c:	7ff00000 	.word	0x7ff00000
 800be50:	39500000 	.word	0x39500000
 800be54:	000fffff 	.word	0x000fffff
 800be58:	7fefffff 	.word	0x7fefffff
 800be5c:	08011080 	.word	0x08011080
 800be60:	4659      	mov	r1, fp
 800be62:	4628      	mov	r0, r5
 800be64:	f003 f972 	bl	800f14c <__ratio>
 800be68:	ec57 6b10 	vmov	r6, r7, d0
 800be6c:	ee10 0a10 	vmov	r0, s0
 800be70:	2200      	movs	r2, #0
 800be72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 fe52 	bl	8000b20 <__aeabi_dcmple>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d071      	beq.n	800bf64 <_strtod_l+0xa54>
 800be80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d17c      	bne.n	800bf80 <_strtod_l+0xa70>
 800be86:	f1b8 0f00 	cmp.w	r8, #0
 800be8a:	d15a      	bne.n	800bf42 <_strtod_l+0xa32>
 800be8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be90:	2b00      	cmp	r3, #0
 800be92:	d15d      	bne.n	800bf50 <_strtod_l+0xa40>
 800be94:	4b90      	ldr	r3, [pc, #576]	; (800c0d8 <_strtod_l+0xbc8>)
 800be96:	2200      	movs	r2, #0
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fe36 	bl	8000b0c <__aeabi_dcmplt>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d15c      	bne.n	800bf5e <_strtod_l+0xa4e>
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	4b8c      	ldr	r3, [pc, #560]	; (800c0dc <_strtod_l+0xbcc>)
 800beaa:	2200      	movs	r2, #0
 800beac:	f7f4 fbbc 	bl	8000628 <__aeabi_dmul>
 800beb0:	4606      	mov	r6, r0
 800beb2:	460f      	mov	r7, r1
 800beb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800beb8:	9606      	str	r6, [sp, #24]
 800beba:	9307      	str	r3, [sp, #28]
 800bebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bec0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bec4:	4b86      	ldr	r3, [pc, #536]	; (800c0e0 <_strtod_l+0xbd0>)
 800bec6:	ea0a 0303 	and.w	r3, sl, r3
 800beca:	930d      	str	r3, [sp, #52]	; 0x34
 800becc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bece:	4b85      	ldr	r3, [pc, #532]	; (800c0e4 <_strtod_l+0xbd4>)
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f040 8090 	bne.w	800bff6 <_strtod_l+0xae6>
 800bed6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800beda:	ec49 8b10 	vmov	d0, r8, r9
 800bede:	f003 f86b 	bl	800efb8 <__ulp>
 800bee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bee6:	ec51 0b10 	vmov	r0, r1, d0
 800beea:	f7f4 fb9d 	bl	8000628 <__aeabi_dmul>
 800beee:	4642      	mov	r2, r8
 800bef0:	464b      	mov	r3, r9
 800bef2:	f7f4 f9e3 	bl	80002bc <__adddf3>
 800bef6:	460b      	mov	r3, r1
 800bef8:	4979      	ldr	r1, [pc, #484]	; (800c0e0 <_strtod_l+0xbd0>)
 800befa:	4a7b      	ldr	r2, [pc, #492]	; (800c0e8 <_strtod_l+0xbd8>)
 800befc:	4019      	ands	r1, r3
 800befe:	4291      	cmp	r1, r2
 800bf00:	4680      	mov	r8, r0
 800bf02:	d944      	bls.n	800bf8e <_strtod_l+0xa7e>
 800bf04:	ee18 2a90 	vmov	r2, s17
 800bf08:	4b78      	ldr	r3, [pc, #480]	; (800c0ec <_strtod_l+0xbdc>)
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d104      	bne.n	800bf18 <_strtod_l+0xa08>
 800bf0e:	ee18 3a10 	vmov	r3, s16
 800bf12:	3301      	adds	r3, #1
 800bf14:	f43f ad40 	beq.w	800b998 <_strtod_l+0x488>
 800bf18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c0ec <_strtod_l+0xbdc>
 800bf1c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bf20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf22:	4620      	mov	r0, r4
 800bf24:	f002 fd1c 	bl	800e960 <_Bfree>
 800bf28:	9905      	ldr	r1, [sp, #20]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f002 fd18 	bl	800e960 <_Bfree>
 800bf30:	4659      	mov	r1, fp
 800bf32:	4620      	mov	r0, r4
 800bf34:	f002 fd14 	bl	800e960 <_Bfree>
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f002 fd10 	bl	800e960 <_Bfree>
 800bf40:	e609      	b.n	800bb56 <_strtod_l+0x646>
 800bf42:	f1b8 0f01 	cmp.w	r8, #1
 800bf46:	d103      	bne.n	800bf50 <_strtod_l+0xa40>
 800bf48:	f1b9 0f00 	cmp.w	r9, #0
 800bf4c:	f43f ad95 	beq.w	800ba7a <_strtod_l+0x56a>
 800bf50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c0a8 <_strtod_l+0xb98>
 800bf54:	4f60      	ldr	r7, [pc, #384]	; (800c0d8 <_strtod_l+0xbc8>)
 800bf56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	e7ae      	b.n	800bebc <_strtod_l+0x9ac>
 800bf5e:	4f5f      	ldr	r7, [pc, #380]	; (800c0dc <_strtod_l+0xbcc>)
 800bf60:	2600      	movs	r6, #0
 800bf62:	e7a7      	b.n	800beb4 <_strtod_l+0x9a4>
 800bf64:	4b5d      	ldr	r3, [pc, #372]	; (800c0dc <_strtod_l+0xbcc>)
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f7f4 fb5c 	bl	8000628 <__aeabi_dmul>
 800bf70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d09c      	beq.n	800beb4 <_strtod_l+0x9a4>
 800bf7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf7e:	e79d      	b.n	800bebc <_strtod_l+0x9ac>
 800bf80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c0b0 <_strtod_l+0xba0>
 800bf84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf88:	ec57 6b17 	vmov	r6, r7, d7
 800bf8c:	e796      	b.n	800bebc <_strtod_l+0x9ac>
 800bf8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bf92:	9b04      	ldr	r3, [sp, #16]
 800bf94:	46ca      	mov	sl, r9
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1c2      	bne.n	800bf20 <_strtod_l+0xa10>
 800bf9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d1bb      	bne.n	800bf20 <_strtod_l+0xa10>
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f7f4 fe9c 	bl	8000ce8 <__aeabi_d2lz>
 800bfb0:	f7f4 fb0c 	bl	80005cc <__aeabi_l2d>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 f97c 	bl	80002b8 <__aeabi_dsub>
 800bfc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfc6:	ea43 0308 	orr.w	r3, r3, r8
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460f      	mov	r7, r1
 800bfd0:	d054      	beq.n	800c07c <_strtod_l+0xb6c>
 800bfd2:	a339      	add	r3, pc, #228	; (adr r3, 800c0b8 <_strtod_l+0xba8>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fd98 	bl	8000b0c <__aeabi_dcmplt>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f47f ace5 	bne.w	800b9ac <_strtod_l+0x49c>
 800bfe2:	a337      	add	r3, pc, #220	; (adr r3, 800c0c0 <_strtod_l+0xbb0>)
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fdac 	bl	8000b48 <__aeabi_dcmpgt>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d095      	beq.n	800bf20 <_strtod_l+0xa10>
 800bff4:	e4da      	b.n	800b9ac <_strtod_l+0x49c>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	b333      	cbz	r3, 800c048 <_strtod_l+0xb38>
 800bffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bffc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c000:	d822      	bhi.n	800c048 <_strtod_l+0xb38>
 800c002:	a331      	add	r3, pc, #196	; (adr r3, 800c0c8 <_strtod_l+0xbb8>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 fd88 	bl	8000b20 <__aeabi_dcmple>
 800c010:	b1a0      	cbz	r0, 800c03c <_strtod_l+0xb2c>
 800c012:	4639      	mov	r1, r7
 800c014:	4630      	mov	r0, r6
 800c016:	f7f4 fddf 	bl	8000bd8 <__aeabi_d2uiz>
 800c01a:	2801      	cmp	r0, #1
 800c01c:	bf38      	it	cc
 800c01e:	2001      	movcc	r0, #1
 800c020:	f7f4 fa88 	bl	8000534 <__aeabi_ui2d>
 800c024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c026:	4606      	mov	r6, r0
 800c028:	460f      	mov	r7, r1
 800c02a:	bb23      	cbnz	r3, 800c076 <_strtod_l+0xb66>
 800c02c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c030:	9010      	str	r0, [sp, #64]	; 0x40
 800c032:	9311      	str	r3, [sp, #68]	; 0x44
 800c034:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c038:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c03e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c040:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	930f      	str	r3, [sp, #60]	; 0x3c
 800c048:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c04c:	eeb0 0a48 	vmov.f32	s0, s16
 800c050:	eef0 0a68 	vmov.f32	s1, s17
 800c054:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c058:	f002 ffae 	bl	800efb8 <__ulp>
 800c05c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c060:	ec53 2b10 	vmov	r2, r3, d0
 800c064:	f7f4 fae0 	bl	8000628 <__aeabi_dmul>
 800c068:	ec53 2b18 	vmov	r2, r3, d8
 800c06c:	f7f4 f926 	bl	80002bc <__adddf3>
 800c070:	4680      	mov	r8, r0
 800c072:	4689      	mov	r9, r1
 800c074:	e78d      	b.n	800bf92 <_strtod_l+0xa82>
 800c076:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c07a:	e7db      	b.n	800c034 <_strtod_l+0xb24>
 800c07c:	a314      	add	r3, pc, #80	; (adr r3, 800c0d0 <_strtod_l+0xbc0>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 fd43 	bl	8000b0c <__aeabi_dcmplt>
 800c086:	e7b3      	b.n	800bff0 <_strtod_l+0xae0>
 800c088:	2300      	movs	r3, #0
 800c08a:	930a      	str	r3, [sp, #40]	; 0x28
 800c08c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	f7ff ba7c 	b.w	800b58e <_strtod_l+0x7e>
 800c096:	2a65      	cmp	r2, #101	; 0x65
 800c098:	f43f ab75 	beq.w	800b786 <_strtod_l+0x276>
 800c09c:	2a45      	cmp	r2, #69	; 0x45
 800c09e:	f43f ab72 	beq.w	800b786 <_strtod_l+0x276>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f7ff bbaa 	b.w	800b7fc <_strtod_l+0x2ec>
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	bff00000 	.word	0xbff00000
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	3ff00000 	.word	0x3ff00000
 800c0b8:	94a03595 	.word	0x94a03595
 800c0bc:	3fdfffff 	.word	0x3fdfffff
 800c0c0:	35afe535 	.word	0x35afe535
 800c0c4:	3fe00000 	.word	0x3fe00000
 800c0c8:	ffc00000 	.word	0xffc00000
 800c0cc:	41dfffff 	.word	0x41dfffff
 800c0d0:	94a03595 	.word	0x94a03595
 800c0d4:	3fcfffff 	.word	0x3fcfffff
 800c0d8:	3ff00000 	.word	0x3ff00000
 800c0dc:	3fe00000 	.word	0x3fe00000
 800c0e0:	7ff00000 	.word	0x7ff00000
 800c0e4:	7fe00000 	.word	0x7fe00000
 800c0e8:	7c9fffff 	.word	0x7c9fffff
 800c0ec:	7fefffff 	.word	0x7fefffff

0800c0f0 <_strtod_r>:
 800c0f0:	4b01      	ldr	r3, [pc, #4]	; (800c0f8 <_strtod_r+0x8>)
 800c0f2:	f7ff ba0d 	b.w	800b510 <_strtod_l>
 800c0f6:	bf00      	nop
 800c0f8:	200000a8 	.word	0x200000a8

0800c0fc <strtod>:
 800c0fc:	460a      	mov	r2, r1
 800c0fe:	4601      	mov	r1, r0
 800c100:	4802      	ldr	r0, [pc, #8]	; (800c10c <strtod+0x10>)
 800c102:	4b03      	ldr	r3, [pc, #12]	; (800c110 <strtod+0x14>)
 800c104:	6800      	ldr	r0, [r0, #0]
 800c106:	f7ff ba03 	b.w	800b510 <_strtod_l>
 800c10a:	bf00      	nop
 800c10c:	20000260 	.word	0x20000260
 800c110:	200000a8 	.word	0x200000a8

0800c114 <__cvt>:
 800c114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c118:	ec55 4b10 	vmov	r4, r5, d0
 800c11c:	2d00      	cmp	r5, #0
 800c11e:	460e      	mov	r6, r1
 800c120:	4619      	mov	r1, r3
 800c122:	462b      	mov	r3, r5
 800c124:	bfbb      	ittet	lt
 800c126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c12a:	461d      	movlt	r5, r3
 800c12c:	2300      	movge	r3, #0
 800c12e:	232d      	movlt	r3, #45	; 0x2d
 800c130:	700b      	strb	r3, [r1, #0]
 800c132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c138:	4691      	mov	r9, r2
 800c13a:	f023 0820 	bic.w	r8, r3, #32
 800c13e:	bfbc      	itt	lt
 800c140:	4622      	movlt	r2, r4
 800c142:	4614      	movlt	r4, r2
 800c144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c148:	d005      	beq.n	800c156 <__cvt+0x42>
 800c14a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c14e:	d100      	bne.n	800c152 <__cvt+0x3e>
 800c150:	3601      	adds	r6, #1
 800c152:	2102      	movs	r1, #2
 800c154:	e000      	b.n	800c158 <__cvt+0x44>
 800c156:	2103      	movs	r1, #3
 800c158:	ab03      	add	r3, sp, #12
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	ab02      	add	r3, sp, #8
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	ec45 4b10 	vmov	d0, r4, r5
 800c164:	4653      	mov	r3, sl
 800c166:	4632      	mov	r2, r6
 800c168:	f001 fa12 	bl	800d590 <_dtoa_r>
 800c16c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c170:	4607      	mov	r7, r0
 800c172:	d102      	bne.n	800c17a <__cvt+0x66>
 800c174:	f019 0f01 	tst.w	r9, #1
 800c178:	d022      	beq.n	800c1c0 <__cvt+0xac>
 800c17a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c17e:	eb07 0906 	add.w	r9, r7, r6
 800c182:	d110      	bne.n	800c1a6 <__cvt+0x92>
 800c184:	783b      	ldrb	r3, [r7, #0]
 800c186:	2b30      	cmp	r3, #48	; 0x30
 800c188:	d10a      	bne.n	800c1a0 <__cvt+0x8c>
 800c18a:	2200      	movs	r2, #0
 800c18c:	2300      	movs	r3, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 fcb1 	bl	8000af8 <__aeabi_dcmpeq>
 800c196:	b918      	cbnz	r0, 800c1a0 <__cvt+0x8c>
 800c198:	f1c6 0601 	rsb	r6, r6, #1
 800c19c:	f8ca 6000 	str.w	r6, [sl]
 800c1a0:	f8da 3000 	ldr.w	r3, [sl]
 800c1a4:	4499      	add	r9, r3
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	f7f4 fca3 	bl	8000af8 <__aeabi_dcmpeq>
 800c1b2:	b108      	cbz	r0, 800c1b8 <__cvt+0xa4>
 800c1b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1b8:	2230      	movs	r2, #48	; 0x30
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	454b      	cmp	r3, r9
 800c1be:	d307      	bcc.n	800c1d0 <__cvt+0xbc>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1c4:	1bdb      	subs	r3, r3, r7
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	b004      	add	sp, #16
 800c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d0:	1c59      	adds	r1, r3, #1
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	e7f0      	b.n	800c1ba <__cvt+0xa6>

0800c1d8 <__exponent>:
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	bfb8      	it	lt
 800c1e0:	4249      	neglt	r1, r1
 800c1e2:	f803 2b02 	strb.w	r2, [r3], #2
 800c1e6:	bfb4      	ite	lt
 800c1e8:	222d      	movlt	r2, #45	; 0x2d
 800c1ea:	222b      	movge	r2, #43	; 0x2b
 800c1ec:	2909      	cmp	r1, #9
 800c1ee:	7042      	strb	r2, [r0, #1]
 800c1f0:	dd2a      	ble.n	800c248 <__exponent+0x70>
 800c1f2:	f10d 0207 	add.w	r2, sp, #7
 800c1f6:	4617      	mov	r7, r2
 800c1f8:	260a      	movs	r6, #10
 800c1fa:	4694      	mov	ip, r2
 800c1fc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c200:	fb06 1415 	mls	r4, r6, r5, r1
 800c204:	3430      	adds	r4, #48	; 0x30
 800c206:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c20a:	460c      	mov	r4, r1
 800c20c:	2c63      	cmp	r4, #99	; 0x63
 800c20e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c212:	4629      	mov	r1, r5
 800c214:	dcf1      	bgt.n	800c1fa <__exponent+0x22>
 800c216:	3130      	adds	r1, #48	; 0x30
 800c218:	f1ac 0402 	sub.w	r4, ip, #2
 800c21c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c220:	1c41      	adds	r1, r0, #1
 800c222:	4622      	mov	r2, r4
 800c224:	42ba      	cmp	r2, r7
 800c226:	d30a      	bcc.n	800c23e <__exponent+0x66>
 800c228:	f10d 0209 	add.w	r2, sp, #9
 800c22c:	eba2 020c 	sub.w	r2, r2, ip
 800c230:	42bc      	cmp	r4, r7
 800c232:	bf88      	it	hi
 800c234:	2200      	movhi	r2, #0
 800c236:	4413      	add	r3, r2
 800c238:	1a18      	subs	r0, r3, r0
 800c23a:	b003      	add	sp, #12
 800c23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c23e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c242:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c246:	e7ed      	b.n	800c224 <__exponent+0x4c>
 800c248:	2330      	movs	r3, #48	; 0x30
 800c24a:	3130      	adds	r1, #48	; 0x30
 800c24c:	7083      	strb	r3, [r0, #2]
 800c24e:	70c1      	strb	r1, [r0, #3]
 800c250:	1d03      	adds	r3, r0, #4
 800c252:	e7f1      	b.n	800c238 <__exponent+0x60>

0800c254 <_printf_float>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	ed2d 8b02 	vpush	{d8}
 800c25c:	b08d      	sub	sp, #52	; 0x34
 800c25e:	460c      	mov	r4, r1
 800c260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c264:	4616      	mov	r6, r2
 800c266:	461f      	mov	r7, r3
 800c268:	4605      	mov	r5, r0
 800c26a:	f001 f80b 	bl	800d284 <_localeconv_r>
 800c26e:	f8d0 a000 	ldr.w	sl, [r0]
 800c272:	4650      	mov	r0, sl
 800c274:	f7f4 f814 	bl	80002a0 <strlen>
 800c278:	2300      	movs	r3, #0
 800c27a:	930a      	str	r3, [sp, #40]	; 0x28
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	9305      	str	r3, [sp, #20]
 800c280:	f8d8 3000 	ldr.w	r3, [r8]
 800c284:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c288:	3307      	adds	r3, #7
 800c28a:	f023 0307 	bic.w	r3, r3, #7
 800c28e:	f103 0208 	add.w	r2, r3, #8
 800c292:	f8c8 2000 	str.w	r2, [r8]
 800c296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c29e:	9307      	str	r3, [sp, #28]
 800c2a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2a4:	ee08 0a10 	vmov	s16, r0
 800c2a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2b0:	4b9e      	ldr	r3, [pc, #632]	; (800c52c <_printf_float+0x2d8>)
 800c2b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2b6:	f7f4 fc51 	bl	8000b5c <__aeabi_dcmpun>
 800c2ba:	bb88      	cbnz	r0, 800c320 <_printf_float+0xcc>
 800c2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2c0:	4b9a      	ldr	r3, [pc, #616]	; (800c52c <_printf_float+0x2d8>)
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2c6:	f7f4 fc2b 	bl	8000b20 <__aeabi_dcmple>
 800c2ca:	bb48      	cbnz	r0, 800c320 <_printf_float+0xcc>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f4 fc1a 	bl	8000b0c <__aeabi_dcmplt>
 800c2d8:	b110      	cbz	r0, 800c2e0 <_printf_float+0x8c>
 800c2da:	232d      	movs	r3, #45	; 0x2d
 800c2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2e0:	4a93      	ldr	r2, [pc, #588]	; (800c530 <_printf_float+0x2dc>)
 800c2e2:	4b94      	ldr	r3, [pc, #592]	; (800c534 <_printf_float+0x2e0>)
 800c2e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c2e8:	bf94      	ite	ls
 800c2ea:	4690      	movls	r8, r2
 800c2ec:	4698      	movhi	r8, r3
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	6123      	str	r3, [r4, #16]
 800c2f2:	9b05      	ldr	r3, [sp, #20]
 800c2f4:	f023 0304 	bic.w	r3, r3, #4
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	f04f 0900 	mov.w	r9, #0
 800c2fe:	9700      	str	r7, [sp, #0]
 800c300:	4633      	mov	r3, r6
 800c302:	aa0b      	add	r2, sp, #44	; 0x2c
 800c304:	4621      	mov	r1, r4
 800c306:	4628      	mov	r0, r5
 800c308:	f000 f9da 	bl	800c6c0 <_printf_common>
 800c30c:	3001      	adds	r0, #1
 800c30e:	f040 8090 	bne.w	800c432 <_printf_float+0x1de>
 800c312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c316:	b00d      	add	sp, #52	; 0x34
 800c318:	ecbd 8b02 	vpop	{d8}
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	4642      	mov	r2, r8
 800c322:	464b      	mov	r3, r9
 800c324:	4640      	mov	r0, r8
 800c326:	4649      	mov	r1, r9
 800c328:	f7f4 fc18 	bl	8000b5c <__aeabi_dcmpun>
 800c32c:	b140      	cbz	r0, 800c340 <_printf_float+0xec>
 800c32e:	464b      	mov	r3, r9
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfbc      	itt	lt
 800c334:	232d      	movlt	r3, #45	; 0x2d
 800c336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c33a:	4a7f      	ldr	r2, [pc, #508]	; (800c538 <_printf_float+0x2e4>)
 800c33c:	4b7f      	ldr	r3, [pc, #508]	; (800c53c <_printf_float+0x2e8>)
 800c33e:	e7d1      	b.n	800c2e4 <_printf_float+0x90>
 800c340:	6863      	ldr	r3, [r4, #4]
 800c342:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c346:	9206      	str	r2, [sp, #24]
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	d13f      	bne.n	800c3cc <_printf_float+0x178>
 800c34c:	2306      	movs	r3, #6
 800c34e:	6063      	str	r3, [r4, #4]
 800c350:	9b05      	ldr	r3, [sp, #20]
 800c352:	6861      	ldr	r1, [r4, #4]
 800c354:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c358:	2300      	movs	r3, #0
 800c35a:	9303      	str	r3, [sp, #12]
 800c35c:	ab0a      	add	r3, sp, #40	; 0x28
 800c35e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c362:	ab09      	add	r3, sp, #36	; 0x24
 800c364:	ec49 8b10 	vmov	d0, r8, r9
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	6022      	str	r2, [r4, #0]
 800c36c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c370:	4628      	mov	r0, r5
 800c372:	f7ff fecf 	bl	800c114 <__cvt>
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c37a:	2b47      	cmp	r3, #71	; 0x47
 800c37c:	4680      	mov	r8, r0
 800c37e:	d108      	bne.n	800c392 <_printf_float+0x13e>
 800c380:	1cc8      	adds	r0, r1, #3
 800c382:	db02      	blt.n	800c38a <_printf_float+0x136>
 800c384:	6863      	ldr	r3, [r4, #4]
 800c386:	4299      	cmp	r1, r3
 800c388:	dd41      	ble.n	800c40e <_printf_float+0x1ba>
 800c38a:	f1ab 0302 	sub.w	r3, fp, #2
 800c38e:	fa5f fb83 	uxtb.w	fp, r3
 800c392:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c396:	d820      	bhi.n	800c3da <_printf_float+0x186>
 800c398:	3901      	subs	r1, #1
 800c39a:	465a      	mov	r2, fp
 800c39c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3a0:	9109      	str	r1, [sp, #36]	; 0x24
 800c3a2:	f7ff ff19 	bl	800c1d8 <__exponent>
 800c3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3a8:	1813      	adds	r3, r2, r0
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	4681      	mov	r9, r0
 800c3ae:	6123      	str	r3, [r4, #16]
 800c3b0:	dc02      	bgt.n	800c3b8 <_printf_float+0x164>
 800c3b2:	6822      	ldr	r2, [r4, #0]
 800c3b4:	07d2      	lsls	r2, r2, #31
 800c3b6:	d501      	bpl.n	800c3bc <_printf_float+0x168>
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d09c      	beq.n	800c2fe <_printf_float+0xaa>
 800c3c4:	232d      	movs	r3, #45	; 0x2d
 800c3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ca:	e798      	b.n	800c2fe <_printf_float+0xaa>
 800c3cc:	9a06      	ldr	r2, [sp, #24]
 800c3ce:	2a47      	cmp	r2, #71	; 0x47
 800c3d0:	d1be      	bne.n	800c350 <_printf_float+0xfc>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1bc      	bne.n	800c350 <_printf_float+0xfc>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7b9      	b.n	800c34e <_printf_float+0xfa>
 800c3da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c3de:	d118      	bne.n	800c412 <_printf_float+0x1be>
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	6863      	ldr	r3, [r4, #4]
 800c3e4:	dd0b      	ble.n	800c3fe <_printf_float+0x1aa>
 800c3e6:	6121      	str	r1, [r4, #16]
 800c3e8:	b913      	cbnz	r3, 800c3f0 <_printf_float+0x19c>
 800c3ea:	6822      	ldr	r2, [r4, #0]
 800c3ec:	07d0      	lsls	r0, r2, #31
 800c3ee:	d502      	bpl.n	800c3f6 <_printf_float+0x1a2>
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	440b      	add	r3, r1
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c3f8:	f04f 0900 	mov.w	r9, #0
 800c3fc:	e7de      	b.n	800c3bc <_printf_float+0x168>
 800c3fe:	b913      	cbnz	r3, 800c406 <_printf_float+0x1b2>
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	07d2      	lsls	r2, r2, #31
 800c404:	d501      	bpl.n	800c40a <_printf_float+0x1b6>
 800c406:	3302      	adds	r3, #2
 800c408:	e7f4      	b.n	800c3f4 <_printf_float+0x1a0>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e7f2      	b.n	800c3f4 <_printf_float+0x1a0>
 800c40e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c414:	4299      	cmp	r1, r3
 800c416:	db05      	blt.n	800c424 <_printf_float+0x1d0>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	6121      	str	r1, [r4, #16]
 800c41c:	07d8      	lsls	r0, r3, #31
 800c41e:	d5ea      	bpl.n	800c3f6 <_printf_float+0x1a2>
 800c420:	1c4b      	adds	r3, r1, #1
 800c422:	e7e7      	b.n	800c3f4 <_printf_float+0x1a0>
 800c424:	2900      	cmp	r1, #0
 800c426:	bfd4      	ite	le
 800c428:	f1c1 0202 	rsble	r2, r1, #2
 800c42c:	2201      	movgt	r2, #1
 800c42e:	4413      	add	r3, r2
 800c430:	e7e0      	b.n	800c3f4 <_printf_float+0x1a0>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	055a      	lsls	r2, r3, #21
 800c436:	d407      	bmi.n	800c448 <_printf_float+0x1f4>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	4642      	mov	r2, r8
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	47b8      	blx	r7
 800c442:	3001      	adds	r0, #1
 800c444:	d12c      	bne.n	800c4a0 <_printf_float+0x24c>
 800c446:	e764      	b.n	800c312 <_printf_float+0xbe>
 800c448:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c44c:	f240 80e0 	bls.w	800c610 <_printf_float+0x3bc>
 800c450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c454:	2200      	movs	r2, #0
 800c456:	2300      	movs	r3, #0
 800c458:	f7f4 fb4e 	bl	8000af8 <__aeabi_dcmpeq>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d034      	beq.n	800c4ca <_printf_float+0x276>
 800c460:	4a37      	ldr	r2, [pc, #220]	; (800c540 <_printf_float+0x2ec>)
 800c462:	2301      	movs	r3, #1
 800c464:	4631      	mov	r1, r6
 800c466:	4628      	mov	r0, r5
 800c468:	47b8      	blx	r7
 800c46a:	3001      	adds	r0, #1
 800c46c:	f43f af51 	beq.w	800c312 <_printf_float+0xbe>
 800c470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c474:	429a      	cmp	r2, r3
 800c476:	db02      	blt.n	800c47e <_printf_float+0x22a>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	07d8      	lsls	r0, r3, #31
 800c47c:	d510      	bpl.n	800c4a0 <_printf_float+0x24c>
 800c47e:	ee18 3a10 	vmov	r3, s16
 800c482:	4652      	mov	r2, sl
 800c484:	4631      	mov	r1, r6
 800c486:	4628      	mov	r0, r5
 800c488:	47b8      	blx	r7
 800c48a:	3001      	adds	r0, #1
 800c48c:	f43f af41 	beq.w	800c312 <_printf_float+0xbe>
 800c490:	f04f 0800 	mov.w	r8, #0
 800c494:	f104 091a 	add.w	r9, r4, #26
 800c498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c49a:	3b01      	subs	r3, #1
 800c49c:	4543      	cmp	r3, r8
 800c49e:	dc09      	bgt.n	800c4b4 <_printf_float+0x260>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	079b      	lsls	r3, r3, #30
 800c4a4:	f100 8107 	bmi.w	800c6b6 <_printf_float+0x462>
 800c4a8:	68e0      	ldr	r0, [r4, #12]
 800c4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ac:	4298      	cmp	r0, r3
 800c4ae:	bfb8      	it	lt
 800c4b0:	4618      	movlt	r0, r3
 800c4b2:	e730      	b.n	800c316 <_printf_float+0xc2>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	464a      	mov	r2, r9
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b8      	blx	r7
 800c4be:	3001      	adds	r0, #1
 800c4c0:	f43f af27 	beq.w	800c312 <_printf_float+0xbe>
 800c4c4:	f108 0801 	add.w	r8, r8, #1
 800c4c8:	e7e6      	b.n	800c498 <_printf_float+0x244>
 800c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dc39      	bgt.n	800c544 <_printf_float+0x2f0>
 800c4d0:	4a1b      	ldr	r2, [pc, #108]	; (800c540 <_printf_float+0x2ec>)
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	f43f af19 	beq.w	800c312 <_printf_float+0xbe>
 800c4e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	d102      	bne.n	800c4ee <_printf_float+0x29a>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	07d9      	lsls	r1, r3, #31
 800c4ec:	d5d8      	bpl.n	800c4a0 <_printf_float+0x24c>
 800c4ee:	ee18 3a10 	vmov	r3, s16
 800c4f2:	4652      	mov	r2, sl
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	47b8      	blx	r7
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	f43f af09 	beq.w	800c312 <_printf_float+0xbe>
 800c500:	f04f 0900 	mov.w	r9, #0
 800c504:	f104 0a1a 	add.w	sl, r4, #26
 800c508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50a:	425b      	negs	r3, r3
 800c50c:	454b      	cmp	r3, r9
 800c50e:	dc01      	bgt.n	800c514 <_printf_float+0x2c0>
 800c510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c512:	e792      	b.n	800c43a <_printf_float+0x1e6>
 800c514:	2301      	movs	r3, #1
 800c516:	4652      	mov	r2, sl
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f aef7 	beq.w	800c312 <_printf_float+0xbe>
 800c524:	f109 0901 	add.w	r9, r9, #1
 800c528:	e7ee      	b.n	800c508 <_printf_float+0x2b4>
 800c52a:	bf00      	nop
 800c52c:	7fefffff 	.word	0x7fefffff
 800c530:	080111a9 	.word	0x080111a9
 800c534:	080111ad 	.word	0x080111ad
 800c538:	080111b1 	.word	0x080111b1
 800c53c:	080111b5 	.word	0x080111b5
 800c540:	080111b9 	.word	0x080111b9
 800c544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c548:	429a      	cmp	r2, r3
 800c54a:	bfa8      	it	ge
 800c54c:	461a      	movge	r2, r3
 800c54e:	2a00      	cmp	r2, #0
 800c550:	4691      	mov	r9, r2
 800c552:	dc37      	bgt.n	800c5c4 <_printf_float+0x370>
 800c554:	f04f 0b00 	mov.w	fp, #0
 800c558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c55c:	f104 021a 	add.w	r2, r4, #26
 800c560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	eba3 0309 	sub.w	r3, r3, r9
 800c568:	455b      	cmp	r3, fp
 800c56a:	dc33      	bgt.n	800c5d4 <_printf_float+0x380>
 800c56c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c570:	429a      	cmp	r2, r3
 800c572:	db3b      	blt.n	800c5ec <_printf_float+0x398>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	07da      	lsls	r2, r3, #31
 800c578:	d438      	bmi.n	800c5ec <_printf_float+0x398>
 800c57a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c57e:	eba2 0903 	sub.w	r9, r2, r3
 800c582:	9b05      	ldr	r3, [sp, #20]
 800c584:	1ad2      	subs	r2, r2, r3
 800c586:	4591      	cmp	r9, r2
 800c588:	bfa8      	it	ge
 800c58a:	4691      	movge	r9, r2
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	dc35      	bgt.n	800c5fe <_printf_float+0x3aa>
 800c592:	f04f 0800 	mov.w	r8, #0
 800c596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c59a:	f104 0a1a 	add.w	sl, r4, #26
 800c59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5a2:	1a9b      	subs	r3, r3, r2
 800c5a4:	eba3 0309 	sub.w	r3, r3, r9
 800c5a8:	4543      	cmp	r3, r8
 800c5aa:	f77f af79 	ble.w	800c4a0 <_printf_float+0x24c>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	47b8      	blx	r7
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	f43f aeaa 	beq.w	800c312 <_printf_float+0xbe>
 800c5be:	f108 0801 	add.w	r8, r8, #1
 800c5c2:	e7ec      	b.n	800c59e <_printf_float+0x34a>
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	47b8      	blx	r7
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	d1c0      	bne.n	800c554 <_printf_float+0x300>
 800c5d2:	e69e      	b.n	800c312 <_printf_float+0xbe>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4628      	mov	r0, r5
 800c5da:	9205      	str	r2, [sp, #20]
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f ae97 	beq.w	800c312 <_printf_float+0xbe>
 800c5e4:	9a05      	ldr	r2, [sp, #20]
 800c5e6:	f10b 0b01 	add.w	fp, fp, #1
 800c5ea:	e7b9      	b.n	800c560 <_printf_float+0x30c>
 800c5ec:	ee18 3a10 	vmov	r3, s16
 800c5f0:	4652      	mov	r2, sl
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d1be      	bne.n	800c57a <_printf_float+0x326>
 800c5fc:	e689      	b.n	800c312 <_printf_float+0xbe>
 800c5fe:	9a05      	ldr	r2, [sp, #20]
 800c600:	464b      	mov	r3, r9
 800c602:	4442      	add	r2, r8
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	d1c1      	bne.n	800c592 <_printf_float+0x33e>
 800c60e:	e680      	b.n	800c312 <_printf_float+0xbe>
 800c610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c612:	2a01      	cmp	r2, #1
 800c614:	dc01      	bgt.n	800c61a <_printf_float+0x3c6>
 800c616:	07db      	lsls	r3, r3, #31
 800c618:	d53a      	bpl.n	800c690 <_printf_float+0x43c>
 800c61a:	2301      	movs	r3, #1
 800c61c:	4642      	mov	r2, r8
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	47b8      	blx	r7
 800c624:	3001      	adds	r0, #1
 800c626:	f43f ae74 	beq.w	800c312 <_printf_float+0xbe>
 800c62a:	ee18 3a10 	vmov	r3, s16
 800c62e:	4652      	mov	r2, sl
 800c630:	4631      	mov	r1, r6
 800c632:	4628      	mov	r0, r5
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	f43f ae6b 	beq.w	800c312 <_printf_float+0xbe>
 800c63c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c640:	2200      	movs	r2, #0
 800c642:	2300      	movs	r3, #0
 800c644:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c648:	f7f4 fa56 	bl	8000af8 <__aeabi_dcmpeq>
 800c64c:	b9d8      	cbnz	r0, 800c686 <_printf_float+0x432>
 800c64e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c652:	f108 0201 	add.w	r2, r8, #1
 800c656:	4631      	mov	r1, r6
 800c658:	4628      	mov	r0, r5
 800c65a:	47b8      	blx	r7
 800c65c:	3001      	adds	r0, #1
 800c65e:	d10e      	bne.n	800c67e <_printf_float+0x42a>
 800c660:	e657      	b.n	800c312 <_printf_float+0xbe>
 800c662:	2301      	movs	r3, #1
 800c664:	4652      	mov	r2, sl
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	f43f ae50 	beq.w	800c312 <_printf_float+0xbe>
 800c672:	f108 0801 	add.w	r8, r8, #1
 800c676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c678:	3b01      	subs	r3, #1
 800c67a:	4543      	cmp	r3, r8
 800c67c:	dcf1      	bgt.n	800c662 <_printf_float+0x40e>
 800c67e:	464b      	mov	r3, r9
 800c680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c684:	e6da      	b.n	800c43c <_printf_float+0x1e8>
 800c686:	f04f 0800 	mov.w	r8, #0
 800c68a:	f104 0a1a 	add.w	sl, r4, #26
 800c68e:	e7f2      	b.n	800c676 <_printf_float+0x422>
 800c690:	2301      	movs	r3, #1
 800c692:	4642      	mov	r2, r8
 800c694:	e7df      	b.n	800c656 <_printf_float+0x402>
 800c696:	2301      	movs	r3, #1
 800c698:	464a      	mov	r2, r9
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b8      	blx	r7
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	f43f ae36 	beq.w	800c312 <_printf_float+0xbe>
 800c6a6:	f108 0801 	add.w	r8, r8, #1
 800c6aa:	68e3      	ldr	r3, [r4, #12]
 800c6ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6ae:	1a5b      	subs	r3, r3, r1
 800c6b0:	4543      	cmp	r3, r8
 800c6b2:	dcf0      	bgt.n	800c696 <_printf_float+0x442>
 800c6b4:	e6f8      	b.n	800c4a8 <_printf_float+0x254>
 800c6b6:	f04f 0800 	mov.w	r8, #0
 800c6ba:	f104 0919 	add.w	r9, r4, #25
 800c6be:	e7f4      	b.n	800c6aa <_printf_float+0x456>

0800c6c0 <_printf_common>:
 800c6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c4:	4616      	mov	r6, r2
 800c6c6:	4699      	mov	r9, r3
 800c6c8:	688a      	ldr	r2, [r1, #8]
 800c6ca:	690b      	ldr	r3, [r1, #16]
 800c6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	bfb8      	it	lt
 800c6d4:	4613      	movlt	r3, r2
 800c6d6:	6033      	str	r3, [r6, #0]
 800c6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6dc:	4607      	mov	r7, r0
 800c6de:	460c      	mov	r4, r1
 800c6e0:	b10a      	cbz	r2, 800c6e6 <_printf_common+0x26>
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	6033      	str	r3, [r6, #0]
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	0699      	lsls	r1, r3, #26
 800c6ea:	bf42      	ittt	mi
 800c6ec:	6833      	ldrmi	r3, [r6, #0]
 800c6ee:	3302      	addmi	r3, #2
 800c6f0:	6033      	strmi	r3, [r6, #0]
 800c6f2:	6825      	ldr	r5, [r4, #0]
 800c6f4:	f015 0506 	ands.w	r5, r5, #6
 800c6f8:	d106      	bne.n	800c708 <_printf_common+0x48>
 800c6fa:	f104 0a19 	add.w	sl, r4, #25
 800c6fe:	68e3      	ldr	r3, [r4, #12]
 800c700:	6832      	ldr	r2, [r6, #0]
 800c702:	1a9b      	subs	r3, r3, r2
 800c704:	42ab      	cmp	r3, r5
 800c706:	dc26      	bgt.n	800c756 <_printf_common+0x96>
 800c708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c70c:	1e13      	subs	r3, r2, #0
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	bf18      	it	ne
 800c712:	2301      	movne	r3, #1
 800c714:	0692      	lsls	r2, r2, #26
 800c716:	d42b      	bmi.n	800c770 <_printf_common+0xb0>
 800c718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c71c:	4649      	mov	r1, r9
 800c71e:	4638      	mov	r0, r7
 800c720:	47c0      	blx	r8
 800c722:	3001      	adds	r0, #1
 800c724:	d01e      	beq.n	800c764 <_printf_common+0xa4>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	6922      	ldr	r2, [r4, #16]
 800c72a:	f003 0306 	and.w	r3, r3, #6
 800c72e:	2b04      	cmp	r3, #4
 800c730:	bf02      	ittt	eq
 800c732:	68e5      	ldreq	r5, [r4, #12]
 800c734:	6833      	ldreq	r3, [r6, #0]
 800c736:	1aed      	subeq	r5, r5, r3
 800c738:	68a3      	ldr	r3, [r4, #8]
 800c73a:	bf0c      	ite	eq
 800c73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c740:	2500      	movne	r5, #0
 800c742:	4293      	cmp	r3, r2
 800c744:	bfc4      	itt	gt
 800c746:	1a9b      	subgt	r3, r3, r2
 800c748:	18ed      	addgt	r5, r5, r3
 800c74a:	2600      	movs	r6, #0
 800c74c:	341a      	adds	r4, #26
 800c74e:	42b5      	cmp	r5, r6
 800c750:	d11a      	bne.n	800c788 <_printf_common+0xc8>
 800c752:	2000      	movs	r0, #0
 800c754:	e008      	b.n	800c768 <_printf_common+0xa8>
 800c756:	2301      	movs	r3, #1
 800c758:	4652      	mov	r2, sl
 800c75a:	4649      	mov	r1, r9
 800c75c:	4638      	mov	r0, r7
 800c75e:	47c0      	blx	r8
 800c760:	3001      	adds	r0, #1
 800c762:	d103      	bne.n	800c76c <_printf_common+0xac>
 800c764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76c:	3501      	adds	r5, #1
 800c76e:	e7c6      	b.n	800c6fe <_printf_common+0x3e>
 800c770:	18e1      	adds	r1, r4, r3
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	2030      	movs	r0, #48	; 0x30
 800c776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c77a:	4422      	add	r2, r4
 800c77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c784:	3302      	adds	r3, #2
 800c786:	e7c7      	b.n	800c718 <_printf_common+0x58>
 800c788:	2301      	movs	r3, #1
 800c78a:	4622      	mov	r2, r4
 800c78c:	4649      	mov	r1, r9
 800c78e:	4638      	mov	r0, r7
 800c790:	47c0      	blx	r8
 800c792:	3001      	adds	r0, #1
 800c794:	d0e6      	beq.n	800c764 <_printf_common+0xa4>
 800c796:	3601      	adds	r6, #1
 800c798:	e7d9      	b.n	800c74e <_printf_common+0x8e>
	...

0800c79c <_printf_i>:
 800c79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	7e0f      	ldrb	r7, [r1, #24]
 800c7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7a4:	2f78      	cmp	r7, #120	; 0x78
 800c7a6:	4691      	mov	r9, r2
 800c7a8:	4680      	mov	r8, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	469a      	mov	sl, r3
 800c7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7b2:	d807      	bhi.n	800c7c4 <_printf_i+0x28>
 800c7b4:	2f62      	cmp	r7, #98	; 0x62
 800c7b6:	d80a      	bhi.n	800c7ce <_printf_i+0x32>
 800c7b8:	2f00      	cmp	r7, #0
 800c7ba:	f000 80d4 	beq.w	800c966 <_printf_i+0x1ca>
 800c7be:	2f58      	cmp	r7, #88	; 0x58
 800c7c0:	f000 80c0 	beq.w	800c944 <_printf_i+0x1a8>
 800c7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7cc:	e03a      	b.n	800c844 <_printf_i+0xa8>
 800c7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7d2:	2b15      	cmp	r3, #21
 800c7d4:	d8f6      	bhi.n	800c7c4 <_printf_i+0x28>
 800c7d6:	a101      	add	r1, pc, #4	; (adr r1, 800c7dc <_printf_i+0x40>)
 800c7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7dc:	0800c835 	.word	0x0800c835
 800c7e0:	0800c849 	.word	0x0800c849
 800c7e4:	0800c7c5 	.word	0x0800c7c5
 800c7e8:	0800c7c5 	.word	0x0800c7c5
 800c7ec:	0800c7c5 	.word	0x0800c7c5
 800c7f0:	0800c7c5 	.word	0x0800c7c5
 800c7f4:	0800c849 	.word	0x0800c849
 800c7f8:	0800c7c5 	.word	0x0800c7c5
 800c7fc:	0800c7c5 	.word	0x0800c7c5
 800c800:	0800c7c5 	.word	0x0800c7c5
 800c804:	0800c7c5 	.word	0x0800c7c5
 800c808:	0800c94d 	.word	0x0800c94d
 800c80c:	0800c875 	.word	0x0800c875
 800c810:	0800c907 	.word	0x0800c907
 800c814:	0800c7c5 	.word	0x0800c7c5
 800c818:	0800c7c5 	.word	0x0800c7c5
 800c81c:	0800c96f 	.word	0x0800c96f
 800c820:	0800c7c5 	.word	0x0800c7c5
 800c824:	0800c875 	.word	0x0800c875
 800c828:	0800c7c5 	.word	0x0800c7c5
 800c82c:	0800c7c5 	.word	0x0800c7c5
 800c830:	0800c90f 	.word	0x0800c90f
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	1d1a      	adds	r2, r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	602a      	str	r2, [r5, #0]
 800c83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c844:	2301      	movs	r3, #1
 800c846:	e09f      	b.n	800c988 <_printf_i+0x1ec>
 800c848:	6820      	ldr	r0, [r4, #0]
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	0607      	lsls	r7, r0, #24
 800c84e:	f103 0104 	add.w	r1, r3, #4
 800c852:	6029      	str	r1, [r5, #0]
 800c854:	d501      	bpl.n	800c85a <_printf_i+0xbe>
 800c856:	681e      	ldr	r6, [r3, #0]
 800c858:	e003      	b.n	800c862 <_printf_i+0xc6>
 800c85a:	0646      	lsls	r6, r0, #25
 800c85c:	d5fb      	bpl.n	800c856 <_printf_i+0xba>
 800c85e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c862:	2e00      	cmp	r6, #0
 800c864:	da03      	bge.n	800c86e <_printf_i+0xd2>
 800c866:	232d      	movs	r3, #45	; 0x2d
 800c868:	4276      	negs	r6, r6
 800c86a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c86e:	485a      	ldr	r0, [pc, #360]	; (800c9d8 <_printf_i+0x23c>)
 800c870:	230a      	movs	r3, #10
 800c872:	e012      	b.n	800c89a <_printf_i+0xfe>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	6820      	ldr	r0, [r4, #0]
 800c878:	1d19      	adds	r1, r3, #4
 800c87a:	6029      	str	r1, [r5, #0]
 800c87c:	0605      	lsls	r5, r0, #24
 800c87e:	d501      	bpl.n	800c884 <_printf_i+0xe8>
 800c880:	681e      	ldr	r6, [r3, #0]
 800c882:	e002      	b.n	800c88a <_printf_i+0xee>
 800c884:	0641      	lsls	r1, r0, #25
 800c886:	d5fb      	bpl.n	800c880 <_printf_i+0xe4>
 800c888:	881e      	ldrh	r6, [r3, #0]
 800c88a:	4853      	ldr	r0, [pc, #332]	; (800c9d8 <_printf_i+0x23c>)
 800c88c:	2f6f      	cmp	r7, #111	; 0x6f
 800c88e:	bf0c      	ite	eq
 800c890:	2308      	moveq	r3, #8
 800c892:	230a      	movne	r3, #10
 800c894:	2100      	movs	r1, #0
 800c896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c89a:	6865      	ldr	r5, [r4, #4]
 800c89c:	60a5      	str	r5, [r4, #8]
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	bfa2      	ittt	ge
 800c8a2:	6821      	ldrge	r1, [r4, #0]
 800c8a4:	f021 0104 	bicge.w	r1, r1, #4
 800c8a8:	6021      	strge	r1, [r4, #0]
 800c8aa:	b90e      	cbnz	r6, 800c8b0 <_printf_i+0x114>
 800c8ac:	2d00      	cmp	r5, #0
 800c8ae:	d04b      	beq.n	800c948 <_printf_i+0x1ac>
 800c8b0:	4615      	mov	r5, r2
 800c8b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8b6:	fb03 6711 	mls	r7, r3, r1, r6
 800c8ba:	5dc7      	ldrb	r7, [r0, r7]
 800c8bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8c0:	4637      	mov	r7, r6
 800c8c2:	42bb      	cmp	r3, r7
 800c8c4:	460e      	mov	r6, r1
 800c8c6:	d9f4      	bls.n	800c8b2 <_printf_i+0x116>
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d10b      	bne.n	800c8e4 <_printf_i+0x148>
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	07de      	lsls	r6, r3, #31
 800c8d0:	d508      	bpl.n	800c8e4 <_printf_i+0x148>
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	6861      	ldr	r1, [r4, #4]
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	bfde      	ittt	le
 800c8da:	2330      	movle	r3, #48	; 0x30
 800c8dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c8e4:	1b52      	subs	r2, r2, r5
 800c8e6:	6122      	str	r2, [r4, #16]
 800c8e8:	f8cd a000 	str.w	sl, [sp]
 800c8ec:	464b      	mov	r3, r9
 800c8ee:	aa03      	add	r2, sp, #12
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	f7ff fee4 	bl	800c6c0 <_printf_common>
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d14a      	bne.n	800c992 <_printf_i+0x1f6>
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c900:	b004      	add	sp, #16
 800c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	f043 0320 	orr.w	r3, r3, #32
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	4833      	ldr	r0, [pc, #204]	; (800c9dc <_printf_i+0x240>)
 800c910:	2778      	movs	r7, #120	; 0x78
 800c912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	6829      	ldr	r1, [r5, #0]
 800c91a:	061f      	lsls	r7, r3, #24
 800c91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c920:	d402      	bmi.n	800c928 <_printf_i+0x18c>
 800c922:	065f      	lsls	r7, r3, #25
 800c924:	bf48      	it	mi
 800c926:	b2b6      	uxthmi	r6, r6
 800c928:	07df      	lsls	r7, r3, #31
 800c92a:	bf48      	it	mi
 800c92c:	f043 0320 	orrmi.w	r3, r3, #32
 800c930:	6029      	str	r1, [r5, #0]
 800c932:	bf48      	it	mi
 800c934:	6023      	strmi	r3, [r4, #0]
 800c936:	b91e      	cbnz	r6, 800c940 <_printf_i+0x1a4>
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	f023 0320 	bic.w	r3, r3, #32
 800c93e:	6023      	str	r3, [r4, #0]
 800c940:	2310      	movs	r3, #16
 800c942:	e7a7      	b.n	800c894 <_printf_i+0xf8>
 800c944:	4824      	ldr	r0, [pc, #144]	; (800c9d8 <_printf_i+0x23c>)
 800c946:	e7e4      	b.n	800c912 <_printf_i+0x176>
 800c948:	4615      	mov	r5, r2
 800c94a:	e7bd      	b.n	800c8c8 <_printf_i+0x12c>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	6826      	ldr	r6, [r4, #0]
 800c950:	6961      	ldr	r1, [r4, #20]
 800c952:	1d18      	adds	r0, r3, #4
 800c954:	6028      	str	r0, [r5, #0]
 800c956:	0635      	lsls	r5, r6, #24
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	d501      	bpl.n	800c960 <_printf_i+0x1c4>
 800c95c:	6019      	str	r1, [r3, #0]
 800c95e:	e002      	b.n	800c966 <_printf_i+0x1ca>
 800c960:	0670      	lsls	r0, r6, #25
 800c962:	d5fb      	bpl.n	800c95c <_printf_i+0x1c0>
 800c964:	8019      	strh	r1, [r3, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	6123      	str	r3, [r4, #16]
 800c96a:	4615      	mov	r5, r2
 800c96c:	e7bc      	b.n	800c8e8 <_printf_i+0x14c>
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	1d1a      	adds	r2, r3, #4
 800c972:	602a      	str	r2, [r5, #0]
 800c974:	681d      	ldr	r5, [r3, #0]
 800c976:	6862      	ldr	r2, [r4, #4]
 800c978:	2100      	movs	r1, #0
 800c97a:	4628      	mov	r0, r5
 800c97c:	f7f3 fc40 	bl	8000200 <memchr>
 800c980:	b108      	cbz	r0, 800c986 <_printf_i+0x1ea>
 800c982:	1b40      	subs	r0, r0, r5
 800c984:	6060      	str	r0, [r4, #4]
 800c986:	6863      	ldr	r3, [r4, #4]
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	2300      	movs	r3, #0
 800c98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c990:	e7aa      	b.n	800c8e8 <_printf_i+0x14c>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	462a      	mov	r2, r5
 800c996:	4649      	mov	r1, r9
 800c998:	4640      	mov	r0, r8
 800c99a:	47d0      	blx	sl
 800c99c:	3001      	adds	r0, #1
 800c99e:	d0ad      	beq.n	800c8fc <_printf_i+0x160>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	079b      	lsls	r3, r3, #30
 800c9a4:	d413      	bmi.n	800c9ce <_printf_i+0x232>
 800c9a6:	68e0      	ldr	r0, [r4, #12]
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	4298      	cmp	r0, r3
 800c9ac:	bfb8      	it	lt
 800c9ae:	4618      	movlt	r0, r3
 800c9b0:	e7a6      	b.n	800c900 <_printf_i+0x164>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	47d0      	blx	sl
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d09d      	beq.n	800c8fc <_printf_i+0x160>
 800c9c0:	3501      	adds	r5, #1
 800c9c2:	68e3      	ldr	r3, [r4, #12]
 800c9c4:	9903      	ldr	r1, [sp, #12]
 800c9c6:	1a5b      	subs	r3, r3, r1
 800c9c8:	42ab      	cmp	r3, r5
 800c9ca:	dcf2      	bgt.n	800c9b2 <_printf_i+0x216>
 800c9cc:	e7eb      	b.n	800c9a6 <_printf_i+0x20a>
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	f104 0619 	add.w	r6, r4, #25
 800c9d4:	e7f5      	b.n	800c9c2 <_printf_i+0x226>
 800c9d6:	bf00      	nop
 800c9d8:	080111bb 	.word	0x080111bb
 800c9dc:	080111cc 	.word	0x080111cc

0800c9e0 <_scanf_float>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	b087      	sub	sp, #28
 800c9e6:	4617      	mov	r7, r2
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	688b      	ldr	r3, [r1, #8]
 800c9ec:	1e5a      	subs	r2, r3, #1
 800c9ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c9f2:	bf83      	ittte	hi
 800c9f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c9f8:	195b      	addhi	r3, r3, r5
 800c9fa:	9302      	strhi	r3, [sp, #8]
 800c9fc:	2300      	movls	r3, #0
 800c9fe:	bf86      	itte	hi
 800ca00:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca04:	608b      	strhi	r3, [r1, #8]
 800ca06:	9302      	strls	r3, [sp, #8]
 800ca08:	680b      	ldr	r3, [r1, #0]
 800ca0a:	468b      	mov	fp, r1
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ca12:	f84b 3b1c 	str.w	r3, [fp], #28
 800ca16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca1a:	4680      	mov	r8, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	465e      	mov	r6, fp
 800ca20:	46aa      	mov	sl, r5
 800ca22:	46a9      	mov	r9, r5
 800ca24:	9501      	str	r5, [sp, #4]
 800ca26:	68a2      	ldr	r2, [r4, #8]
 800ca28:	b152      	cbz	r2, 800ca40 <_scanf_float+0x60>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b4e      	cmp	r3, #78	; 0x4e
 800ca30:	d864      	bhi.n	800cafc <_scanf_float+0x11c>
 800ca32:	2b40      	cmp	r3, #64	; 0x40
 800ca34:	d83c      	bhi.n	800cab0 <_scanf_float+0xd0>
 800ca36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ca3a:	b2c8      	uxtb	r0, r1
 800ca3c:	280e      	cmp	r0, #14
 800ca3e:	d93a      	bls.n	800cab6 <_scanf_float+0xd6>
 800ca40:	f1b9 0f00 	cmp.w	r9, #0
 800ca44:	d003      	beq.n	800ca4e <_scanf_float+0x6e>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca52:	f1ba 0f01 	cmp.w	sl, #1
 800ca56:	f200 8113 	bhi.w	800cc80 <_scanf_float+0x2a0>
 800ca5a:	455e      	cmp	r6, fp
 800ca5c:	f200 8105 	bhi.w	800cc6a <_scanf_float+0x28a>
 800ca60:	2501      	movs	r5, #1
 800ca62:	4628      	mov	r0, r5
 800ca64:	b007      	add	sp, #28
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ca6e:	2a0d      	cmp	r2, #13
 800ca70:	d8e6      	bhi.n	800ca40 <_scanf_float+0x60>
 800ca72:	a101      	add	r1, pc, #4	; (adr r1, 800ca78 <_scanf_float+0x98>)
 800ca74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca78:	0800cbb7 	.word	0x0800cbb7
 800ca7c:	0800ca41 	.word	0x0800ca41
 800ca80:	0800ca41 	.word	0x0800ca41
 800ca84:	0800ca41 	.word	0x0800ca41
 800ca88:	0800cc17 	.word	0x0800cc17
 800ca8c:	0800cbef 	.word	0x0800cbef
 800ca90:	0800ca41 	.word	0x0800ca41
 800ca94:	0800ca41 	.word	0x0800ca41
 800ca98:	0800cbc5 	.word	0x0800cbc5
 800ca9c:	0800ca41 	.word	0x0800ca41
 800caa0:	0800ca41 	.word	0x0800ca41
 800caa4:	0800ca41 	.word	0x0800ca41
 800caa8:	0800ca41 	.word	0x0800ca41
 800caac:	0800cb7d 	.word	0x0800cb7d
 800cab0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cab4:	e7db      	b.n	800ca6e <_scanf_float+0x8e>
 800cab6:	290e      	cmp	r1, #14
 800cab8:	d8c2      	bhi.n	800ca40 <_scanf_float+0x60>
 800caba:	a001      	add	r0, pc, #4	; (adr r0, 800cac0 <_scanf_float+0xe0>)
 800cabc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cac0:	0800cb6f 	.word	0x0800cb6f
 800cac4:	0800ca41 	.word	0x0800ca41
 800cac8:	0800cb6f 	.word	0x0800cb6f
 800cacc:	0800cc03 	.word	0x0800cc03
 800cad0:	0800ca41 	.word	0x0800ca41
 800cad4:	0800cb1d 	.word	0x0800cb1d
 800cad8:	0800cb59 	.word	0x0800cb59
 800cadc:	0800cb59 	.word	0x0800cb59
 800cae0:	0800cb59 	.word	0x0800cb59
 800cae4:	0800cb59 	.word	0x0800cb59
 800cae8:	0800cb59 	.word	0x0800cb59
 800caec:	0800cb59 	.word	0x0800cb59
 800caf0:	0800cb59 	.word	0x0800cb59
 800caf4:	0800cb59 	.word	0x0800cb59
 800caf8:	0800cb59 	.word	0x0800cb59
 800cafc:	2b6e      	cmp	r3, #110	; 0x6e
 800cafe:	d809      	bhi.n	800cb14 <_scanf_float+0x134>
 800cb00:	2b60      	cmp	r3, #96	; 0x60
 800cb02:	d8b2      	bhi.n	800ca6a <_scanf_float+0x8a>
 800cb04:	2b54      	cmp	r3, #84	; 0x54
 800cb06:	d077      	beq.n	800cbf8 <_scanf_float+0x218>
 800cb08:	2b59      	cmp	r3, #89	; 0x59
 800cb0a:	d199      	bne.n	800ca40 <_scanf_float+0x60>
 800cb0c:	2d07      	cmp	r5, #7
 800cb0e:	d197      	bne.n	800ca40 <_scanf_float+0x60>
 800cb10:	2508      	movs	r5, #8
 800cb12:	e029      	b.n	800cb68 <_scanf_float+0x188>
 800cb14:	2b74      	cmp	r3, #116	; 0x74
 800cb16:	d06f      	beq.n	800cbf8 <_scanf_float+0x218>
 800cb18:	2b79      	cmp	r3, #121	; 0x79
 800cb1a:	e7f6      	b.n	800cb0a <_scanf_float+0x12a>
 800cb1c:	6821      	ldr	r1, [r4, #0]
 800cb1e:	05c8      	lsls	r0, r1, #23
 800cb20:	d51a      	bpl.n	800cb58 <_scanf_float+0x178>
 800cb22:	9b02      	ldr	r3, [sp, #8]
 800cb24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cb28:	6021      	str	r1, [r4, #0]
 800cb2a:	f109 0901 	add.w	r9, r9, #1
 800cb2e:	b11b      	cbz	r3, 800cb38 <_scanf_float+0x158>
 800cb30:	3b01      	subs	r3, #1
 800cb32:	3201      	adds	r2, #1
 800cb34:	9302      	str	r3, [sp, #8]
 800cb36:	60a2      	str	r2, [r4, #8]
 800cb38:	68a3      	ldr	r3, [r4, #8]
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	60a3      	str	r3, [r4, #8]
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	3301      	adds	r3, #1
 800cb42:	6123      	str	r3, [r4, #16]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3b01      	subs	r3, #1
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	607b      	str	r3, [r7, #4]
 800cb4c:	f340 8084 	ble.w	800cc58 <_scanf_float+0x278>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	603b      	str	r3, [r7, #0]
 800cb56:	e766      	b.n	800ca26 <_scanf_float+0x46>
 800cb58:	eb1a 0f05 	cmn.w	sl, r5
 800cb5c:	f47f af70 	bne.w	800ca40 <_scanf_float+0x60>
 800cb60:	6822      	ldr	r2, [r4, #0]
 800cb62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cb66:	6022      	str	r2, [r4, #0]
 800cb68:	f806 3b01 	strb.w	r3, [r6], #1
 800cb6c:	e7e4      	b.n	800cb38 <_scanf_float+0x158>
 800cb6e:	6822      	ldr	r2, [r4, #0]
 800cb70:	0610      	lsls	r0, r2, #24
 800cb72:	f57f af65 	bpl.w	800ca40 <_scanf_float+0x60>
 800cb76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb7a:	e7f4      	b.n	800cb66 <_scanf_float+0x186>
 800cb7c:	f1ba 0f00 	cmp.w	sl, #0
 800cb80:	d10e      	bne.n	800cba0 <_scanf_float+0x1c0>
 800cb82:	f1b9 0f00 	cmp.w	r9, #0
 800cb86:	d10e      	bne.n	800cba6 <_scanf_float+0x1c6>
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb92:	d108      	bne.n	800cba6 <_scanf_float+0x1c6>
 800cb94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb98:	6022      	str	r2, [r4, #0]
 800cb9a:	f04f 0a01 	mov.w	sl, #1
 800cb9e:	e7e3      	b.n	800cb68 <_scanf_float+0x188>
 800cba0:	f1ba 0f02 	cmp.w	sl, #2
 800cba4:	d055      	beq.n	800cc52 <_scanf_float+0x272>
 800cba6:	2d01      	cmp	r5, #1
 800cba8:	d002      	beq.n	800cbb0 <_scanf_float+0x1d0>
 800cbaa:	2d04      	cmp	r5, #4
 800cbac:	f47f af48 	bne.w	800ca40 <_scanf_float+0x60>
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	b2ed      	uxtb	r5, r5
 800cbb4:	e7d8      	b.n	800cb68 <_scanf_float+0x188>
 800cbb6:	f1ba 0f01 	cmp.w	sl, #1
 800cbba:	f47f af41 	bne.w	800ca40 <_scanf_float+0x60>
 800cbbe:	f04f 0a02 	mov.w	sl, #2
 800cbc2:	e7d1      	b.n	800cb68 <_scanf_float+0x188>
 800cbc4:	b97d      	cbnz	r5, 800cbe6 <_scanf_float+0x206>
 800cbc6:	f1b9 0f00 	cmp.w	r9, #0
 800cbca:	f47f af3c 	bne.w	800ca46 <_scanf_float+0x66>
 800cbce:	6822      	ldr	r2, [r4, #0]
 800cbd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cbd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cbd8:	f47f af39 	bne.w	800ca4e <_scanf_float+0x6e>
 800cbdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbe0:	6022      	str	r2, [r4, #0]
 800cbe2:	2501      	movs	r5, #1
 800cbe4:	e7c0      	b.n	800cb68 <_scanf_float+0x188>
 800cbe6:	2d03      	cmp	r5, #3
 800cbe8:	d0e2      	beq.n	800cbb0 <_scanf_float+0x1d0>
 800cbea:	2d05      	cmp	r5, #5
 800cbec:	e7de      	b.n	800cbac <_scanf_float+0x1cc>
 800cbee:	2d02      	cmp	r5, #2
 800cbf0:	f47f af26 	bne.w	800ca40 <_scanf_float+0x60>
 800cbf4:	2503      	movs	r5, #3
 800cbf6:	e7b7      	b.n	800cb68 <_scanf_float+0x188>
 800cbf8:	2d06      	cmp	r5, #6
 800cbfa:	f47f af21 	bne.w	800ca40 <_scanf_float+0x60>
 800cbfe:	2507      	movs	r5, #7
 800cc00:	e7b2      	b.n	800cb68 <_scanf_float+0x188>
 800cc02:	6822      	ldr	r2, [r4, #0]
 800cc04:	0591      	lsls	r1, r2, #22
 800cc06:	f57f af1b 	bpl.w	800ca40 <_scanf_float+0x60>
 800cc0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cc0e:	6022      	str	r2, [r4, #0]
 800cc10:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc14:	e7a8      	b.n	800cb68 <_scanf_float+0x188>
 800cc16:	6822      	ldr	r2, [r4, #0]
 800cc18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cc1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cc20:	d006      	beq.n	800cc30 <_scanf_float+0x250>
 800cc22:	0550      	lsls	r0, r2, #21
 800cc24:	f57f af0c 	bpl.w	800ca40 <_scanf_float+0x60>
 800cc28:	f1b9 0f00 	cmp.w	r9, #0
 800cc2c:	f43f af0f 	beq.w	800ca4e <_scanf_float+0x6e>
 800cc30:	0591      	lsls	r1, r2, #22
 800cc32:	bf58      	it	pl
 800cc34:	9901      	ldrpl	r1, [sp, #4]
 800cc36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc3a:	bf58      	it	pl
 800cc3c:	eba9 0101 	subpl.w	r1, r9, r1
 800cc40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cc44:	bf58      	it	pl
 800cc46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc4a:	6022      	str	r2, [r4, #0]
 800cc4c:	f04f 0900 	mov.w	r9, #0
 800cc50:	e78a      	b.n	800cb68 <_scanf_float+0x188>
 800cc52:	f04f 0a03 	mov.w	sl, #3
 800cc56:	e787      	b.n	800cb68 <_scanf_float+0x188>
 800cc58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	4640      	mov	r0, r8
 800cc60:	4798      	blx	r3
 800cc62:	2800      	cmp	r0, #0
 800cc64:	f43f aedf 	beq.w	800ca26 <_scanf_float+0x46>
 800cc68:	e6ea      	b.n	800ca40 <_scanf_float+0x60>
 800cc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc72:	463a      	mov	r2, r7
 800cc74:	4640      	mov	r0, r8
 800cc76:	4798      	blx	r3
 800cc78:	6923      	ldr	r3, [r4, #16]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	e6ec      	b.n	800ca5a <_scanf_float+0x7a>
 800cc80:	1e6b      	subs	r3, r5, #1
 800cc82:	2b06      	cmp	r3, #6
 800cc84:	d825      	bhi.n	800ccd2 <_scanf_float+0x2f2>
 800cc86:	2d02      	cmp	r5, #2
 800cc88:	d836      	bhi.n	800ccf8 <_scanf_float+0x318>
 800cc8a:	455e      	cmp	r6, fp
 800cc8c:	f67f aee8 	bls.w	800ca60 <_scanf_float+0x80>
 800cc90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc98:	463a      	mov	r2, r7
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	4798      	blx	r3
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	6123      	str	r3, [r4, #16]
 800cca4:	e7f1      	b.n	800cc8a <_scanf_float+0x2aa>
 800cca6:	9802      	ldr	r0, [sp, #8]
 800cca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ccb0:	9002      	str	r0, [sp, #8]
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	4798      	blx	r3
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	6123      	str	r3, [r4, #16]
 800ccbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccc2:	fa5f fa8a 	uxtb.w	sl, sl
 800ccc6:	f1ba 0f02 	cmp.w	sl, #2
 800ccca:	d1ec      	bne.n	800cca6 <_scanf_float+0x2c6>
 800cccc:	3d03      	subs	r5, #3
 800ccce:	b2ed      	uxtb	r5, r5
 800ccd0:	1b76      	subs	r6, r6, r5
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	05da      	lsls	r2, r3, #23
 800ccd6:	d52f      	bpl.n	800cd38 <_scanf_float+0x358>
 800ccd8:	055b      	lsls	r3, r3, #21
 800ccda:	d510      	bpl.n	800ccfe <_scanf_float+0x31e>
 800ccdc:	455e      	cmp	r6, fp
 800ccde:	f67f aebf 	bls.w	800ca60 <_scanf_float+0x80>
 800cce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cce6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccea:	463a      	mov	r2, r7
 800ccec:	4640      	mov	r0, r8
 800ccee:	4798      	blx	r3
 800ccf0:	6923      	ldr	r3, [r4, #16]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	6123      	str	r3, [r4, #16]
 800ccf6:	e7f1      	b.n	800ccdc <_scanf_float+0x2fc>
 800ccf8:	46aa      	mov	sl, r5
 800ccfa:	9602      	str	r6, [sp, #8]
 800ccfc:	e7df      	b.n	800ccbe <_scanf_float+0x2de>
 800ccfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	2965      	cmp	r1, #101	; 0x65
 800cd06:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cd0a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	d00c      	beq.n	800cd2c <_scanf_float+0x34c>
 800cd12:	2945      	cmp	r1, #69	; 0x45
 800cd14:	d00a      	beq.n	800cd2c <_scanf_float+0x34c>
 800cd16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd1a:	463a      	mov	r2, r7
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	4798      	blx	r3
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	1eb5      	subs	r5, r6, #2
 800cd2a:	6123      	str	r3, [r4, #16]
 800cd2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd30:	463a      	mov	r2, r7
 800cd32:	4640      	mov	r0, r8
 800cd34:	4798      	blx	r3
 800cd36:	462e      	mov	r6, r5
 800cd38:	6825      	ldr	r5, [r4, #0]
 800cd3a:	f015 0510 	ands.w	r5, r5, #16
 800cd3e:	d158      	bne.n	800cdf2 <_scanf_float+0x412>
 800cd40:	7035      	strb	r5, [r6, #0]
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd4c:	d11c      	bne.n	800cd88 <_scanf_float+0x3a8>
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	454b      	cmp	r3, r9
 800cd52:	eba3 0209 	sub.w	r2, r3, r9
 800cd56:	d124      	bne.n	800cda2 <_scanf_float+0x3c2>
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4659      	mov	r1, fp
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	f7ff f9c7 	bl	800c0f0 <_strtod_r>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	6821      	ldr	r1, [r4, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f011 0f02 	tst.w	r1, #2
 800cd6c:	ec57 6b10 	vmov	r6, r7, d0
 800cd70:	f103 0204 	add.w	r2, r3, #4
 800cd74:	d020      	beq.n	800cdb8 <_scanf_float+0x3d8>
 800cd76:	9903      	ldr	r1, [sp, #12]
 800cd78:	600a      	str	r2, [r1, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	e9c3 6700 	strd	r6, r7, [r3]
 800cd80:	68e3      	ldr	r3, [r4, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60e3      	str	r3, [r4, #12]
 800cd86:	e66c      	b.n	800ca62 <_scanf_float+0x82>
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0e4      	beq.n	800cd58 <_scanf_float+0x378>
 800cd8e:	9905      	ldr	r1, [sp, #20]
 800cd90:	230a      	movs	r3, #10
 800cd92:	462a      	mov	r2, r5
 800cd94:	3101      	adds	r1, #1
 800cd96:	4640      	mov	r0, r8
 800cd98:	f002 fada 	bl	800f350 <_strtol_r>
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	9e05      	ldr	r6, [sp, #20]
 800cda0:	1ac2      	subs	r2, r0, r3
 800cda2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cda6:	429e      	cmp	r6, r3
 800cda8:	bf28      	it	cs
 800cdaa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cdae:	4912      	ldr	r1, [pc, #72]	; (800cdf8 <_scanf_float+0x418>)
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f000 f955 	bl	800d060 <siprintf>
 800cdb6:	e7cf      	b.n	800cd58 <_scanf_float+0x378>
 800cdb8:	f011 0f04 	tst.w	r1, #4
 800cdbc:	9903      	ldr	r1, [sp, #12]
 800cdbe:	600a      	str	r2, [r1, #0]
 800cdc0:	d1db      	bne.n	800cd7a <_scanf_float+0x39a>
 800cdc2:	f8d3 8000 	ldr.w	r8, [r3]
 800cdc6:	ee10 2a10 	vmov	r2, s0
 800cdca:	ee10 0a10 	vmov	r0, s0
 800cdce:	463b      	mov	r3, r7
 800cdd0:	4639      	mov	r1, r7
 800cdd2:	f7f3 fec3 	bl	8000b5c <__aeabi_dcmpun>
 800cdd6:	b128      	cbz	r0, 800cde4 <_scanf_float+0x404>
 800cdd8:	4808      	ldr	r0, [pc, #32]	; (800cdfc <_scanf_float+0x41c>)
 800cdda:	f000 fb49 	bl	800d470 <nanf>
 800cdde:	ed88 0a00 	vstr	s0, [r8]
 800cde2:	e7cd      	b.n	800cd80 <_scanf_float+0x3a0>
 800cde4:	4630      	mov	r0, r6
 800cde6:	4639      	mov	r1, r7
 800cde8:	f7f3 ff16 	bl	8000c18 <__aeabi_d2f>
 800cdec:	f8c8 0000 	str.w	r0, [r8]
 800cdf0:	e7c6      	b.n	800cd80 <_scanf_float+0x3a0>
 800cdf2:	2500      	movs	r5, #0
 800cdf4:	e635      	b.n	800ca62 <_scanf_float+0x82>
 800cdf6:	bf00      	nop
 800cdf8:	080111dd 	.word	0x080111dd
 800cdfc:	08011478 	.word	0x08011478

0800ce00 <std>:
 800ce00:	2300      	movs	r3, #0
 800ce02:	b510      	push	{r4, lr}
 800ce04:	4604      	mov	r4, r0
 800ce06:	e9c0 3300 	strd	r3, r3, [r0]
 800ce0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce0e:	6083      	str	r3, [r0, #8]
 800ce10:	8181      	strh	r1, [r0, #12]
 800ce12:	6643      	str	r3, [r0, #100]	; 0x64
 800ce14:	81c2      	strh	r2, [r0, #14]
 800ce16:	6183      	str	r3, [r0, #24]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	2208      	movs	r2, #8
 800ce1c:	305c      	adds	r0, #92	; 0x5c
 800ce1e:	f000 fa17 	bl	800d250 <memset>
 800ce22:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <std+0x58>)
 800ce24:	6263      	str	r3, [r4, #36]	; 0x24
 800ce26:	4b0d      	ldr	r3, [pc, #52]	; (800ce5c <std+0x5c>)
 800ce28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <std+0x60>)
 800ce2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <std+0x64>)
 800ce30:	6323      	str	r3, [r4, #48]	; 0x30
 800ce32:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <std+0x68>)
 800ce34:	6224      	str	r4, [r4, #32]
 800ce36:	429c      	cmp	r4, r3
 800ce38:	d006      	beq.n	800ce48 <std+0x48>
 800ce3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ce3e:	4294      	cmp	r4, r2
 800ce40:	d002      	beq.n	800ce48 <std+0x48>
 800ce42:	33d0      	adds	r3, #208	; 0xd0
 800ce44:	429c      	cmp	r4, r3
 800ce46:	d105      	bne.n	800ce54 <std+0x54>
 800ce48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce50:	f000 baf2 	b.w	800d438 <__retarget_lock_init_recursive>
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	bf00      	nop
 800ce58:	0800d0a1 	.word	0x0800d0a1
 800ce5c:	0800d0c3 	.word	0x0800d0c3
 800ce60:	0800d0fb 	.word	0x0800d0fb
 800ce64:	0800d11f 	.word	0x0800d11f
 800ce68:	200054a0 	.word	0x200054a0

0800ce6c <stdio_exit_handler>:
 800ce6c:	4a02      	ldr	r2, [pc, #8]	; (800ce78 <stdio_exit_handler+0xc>)
 800ce6e:	4903      	ldr	r1, [pc, #12]	; (800ce7c <stdio_exit_handler+0x10>)
 800ce70:	4803      	ldr	r0, [pc, #12]	; (800ce80 <stdio_exit_handler+0x14>)
 800ce72:	f000 b869 	b.w	800cf48 <_fwalk_sglue>
 800ce76:	bf00      	nop
 800ce78:	2000009c 	.word	0x2000009c
 800ce7c:	0800f9b5 	.word	0x0800f9b5
 800ce80:	20000214 	.word	0x20000214

0800ce84 <cleanup_stdio>:
 800ce84:	6841      	ldr	r1, [r0, #4]
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <cleanup_stdio+0x34>)
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	d001      	beq.n	800ce94 <cleanup_stdio+0x10>
 800ce90:	f002 fd90 	bl	800f9b4 <_fflush_r>
 800ce94:	68a1      	ldr	r1, [r4, #8]
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <cleanup_stdio+0x38>)
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d002      	beq.n	800cea2 <cleanup_stdio+0x1e>
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f002 fd89 	bl	800f9b4 <_fflush_r>
 800cea2:	68e1      	ldr	r1, [r4, #12]
 800cea4:	4b06      	ldr	r3, [pc, #24]	; (800cec0 <cleanup_stdio+0x3c>)
 800cea6:	4299      	cmp	r1, r3
 800cea8:	d004      	beq.n	800ceb4 <cleanup_stdio+0x30>
 800ceaa:	4620      	mov	r0, r4
 800ceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb0:	f002 bd80 	b.w	800f9b4 <_fflush_r>
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	bf00      	nop
 800ceb8:	200054a0 	.word	0x200054a0
 800cebc:	20005508 	.word	0x20005508
 800cec0:	20005570 	.word	0x20005570

0800cec4 <global_stdio_init.part.0>:
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <global_stdio_init.part.0+0x30>)
 800cec8:	4c0b      	ldr	r4, [pc, #44]	; (800cef8 <global_stdio_init.part.0+0x34>)
 800ceca:	4a0c      	ldr	r2, [pc, #48]	; (800cefc <global_stdio_init.part.0+0x38>)
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	4620      	mov	r0, r4
 800ced0:	2200      	movs	r2, #0
 800ced2:	2104      	movs	r1, #4
 800ced4:	f7ff ff94 	bl	800ce00 <std>
 800ced8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cedc:	2201      	movs	r2, #1
 800cede:	2109      	movs	r1, #9
 800cee0:	f7ff ff8e 	bl	800ce00 <std>
 800cee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cee8:	2202      	movs	r2, #2
 800ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceee:	2112      	movs	r1, #18
 800cef0:	f7ff bf86 	b.w	800ce00 <std>
 800cef4:	200055d8 	.word	0x200055d8
 800cef8:	200054a0 	.word	0x200054a0
 800cefc:	0800ce6d 	.word	0x0800ce6d

0800cf00 <__sfp_lock_acquire>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__sfp_lock_acquire+0x8>)
 800cf02:	f000 ba9a 	b.w	800d43a <__retarget_lock_acquire_recursive>
 800cf06:	bf00      	nop
 800cf08:	200055e1 	.word	0x200055e1

0800cf0c <__sfp_lock_release>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	; (800cf14 <__sfp_lock_release+0x8>)
 800cf0e:	f000 ba95 	b.w	800d43c <__retarget_lock_release_recursive>
 800cf12:	bf00      	nop
 800cf14:	200055e1 	.word	0x200055e1

0800cf18 <__sinit>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	f7ff fff0 	bl	800cf00 <__sfp_lock_acquire>
 800cf20:	6a23      	ldr	r3, [r4, #32]
 800cf22:	b11b      	cbz	r3, 800cf2c <__sinit+0x14>
 800cf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf28:	f7ff bff0 	b.w	800cf0c <__sfp_lock_release>
 800cf2c:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <__sinit+0x28>)
 800cf2e:	6223      	str	r3, [r4, #32]
 800cf30:	4b04      	ldr	r3, [pc, #16]	; (800cf44 <__sinit+0x2c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f5      	bne.n	800cf24 <__sinit+0xc>
 800cf38:	f7ff ffc4 	bl	800cec4 <global_stdio_init.part.0>
 800cf3c:	e7f2      	b.n	800cf24 <__sinit+0xc>
 800cf3e:	bf00      	nop
 800cf40:	0800ce85 	.word	0x0800ce85
 800cf44:	200055d8 	.word	0x200055d8

0800cf48 <_fwalk_sglue>:
 800cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	4688      	mov	r8, r1
 800cf50:	4614      	mov	r4, r2
 800cf52:	2600      	movs	r6, #0
 800cf54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf58:	f1b9 0901 	subs.w	r9, r9, #1
 800cf5c:	d505      	bpl.n	800cf6a <_fwalk_sglue+0x22>
 800cf5e:	6824      	ldr	r4, [r4, #0]
 800cf60:	2c00      	cmp	r4, #0
 800cf62:	d1f7      	bne.n	800cf54 <_fwalk_sglue+0xc>
 800cf64:	4630      	mov	r0, r6
 800cf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf6a:	89ab      	ldrh	r3, [r5, #12]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d907      	bls.n	800cf80 <_fwalk_sglue+0x38>
 800cf70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf74:	3301      	adds	r3, #1
 800cf76:	d003      	beq.n	800cf80 <_fwalk_sglue+0x38>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	47c0      	blx	r8
 800cf7e:	4306      	orrs	r6, r0
 800cf80:	3568      	adds	r5, #104	; 0x68
 800cf82:	e7e9      	b.n	800cf58 <_fwalk_sglue+0x10>

0800cf84 <iprintf>:
 800cf84:	b40f      	push	{r0, r1, r2, r3}
 800cf86:	b507      	push	{r0, r1, r2, lr}
 800cf88:	4906      	ldr	r1, [pc, #24]	; (800cfa4 <iprintf+0x20>)
 800cf8a:	ab04      	add	r3, sp, #16
 800cf8c:	6808      	ldr	r0, [r1, #0]
 800cf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf92:	6881      	ldr	r1, [r0, #8]
 800cf94:	9301      	str	r3, [sp, #4]
 800cf96:	f002 fb6d 	bl	800f674 <_vfiprintf_r>
 800cf9a:	b003      	add	sp, #12
 800cf9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa0:	b004      	add	sp, #16
 800cfa2:	4770      	bx	lr
 800cfa4:	20000260 	.word	0x20000260

0800cfa8 <_puts_r>:
 800cfa8:	6a03      	ldr	r3, [r0, #32]
 800cfaa:	b570      	push	{r4, r5, r6, lr}
 800cfac:	6884      	ldr	r4, [r0, #8]
 800cfae:	4605      	mov	r5, r0
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	b90b      	cbnz	r3, 800cfb8 <_puts_r+0x10>
 800cfb4:	f7ff ffb0 	bl	800cf18 <__sinit>
 800cfb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfba:	07db      	lsls	r3, r3, #31
 800cfbc:	d405      	bmi.n	800cfca <_puts_r+0x22>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	0598      	lsls	r0, r3, #22
 800cfc2:	d402      	bmi.n	800cfca <_puts_r+0x22>
 800cfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfc6:	f000 fa38 	bl	800d43a <__retarget_lock_acquire_recursive>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	0719      	lsls	r1, r3, #28
 800cfce:	d513      	bpl.n	800cff8 <_puts_r+0x50>
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	b18b      	cbz	r3, 800cff8 <_puts_r+0x50>
 800cfd4:	3e01      	subs	r6, #1
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	60a3      	str	r3, [r4, #8]
 800cfe0:	b9e9      	cbnz	r1, 800d01e <_puts_r+0x76>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	da2e      	bge.n	800d044 <_puts_r+0x9c>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	210a      	movs	r1, #10
 800cfea:	4628      	mov	r0, r5
 800cfec:	f000 f89b 	bl	800d126 <__swbuf_r>
 800cff0:	3001      	adds	r0, #1
 800cff2:	d007      	beq.n	800d004 <_puts_r+0x5c>
 800cff4:	250a      	movs	r5, #10
 800cff6:	e007      	b.n	800d008 <_puts_r+0x60>
 800cff8:	4621      	mov	r1, r4
 800cffa:	4628      	mov	r0, r5
 800cffc:	f000 f8d0 	bl	800d1a0 <__swsetup_r>
 800d000:	2800      	cmp	r0, #0
 800d002:	d0e7      	beq.n	800cfd4 <_puts_r+0x2c>
 800d004:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d00a:	07da      	lsls	r2, r3, #31
 800d00c:	d405      	bmi.n	800d01a <_puts_r+0x72>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	059b      	lsls	r3, r3, #22
 800d012:	d402      	bmi.n	800d01a <_puts_r+0x72>
 800d014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d016:	f000 fa11 	bl	800d43c <__retarget_lock_release_recursive>
 800d01a:	4628      	mov	r0, r5
 800d01c:	bd70      	pop	{r4, r5, r6, pc}
 800d01e:	2b00      	cmp	r3, #0
 800d020:	da04      	bge.n	800d02c <_puts_r+0x84>
 800d022:	69a2      	ldr	r2, [r4, #24]
 800d024:	429a      	cmp	r2, r3
 800d026:	dc06      	bgt.n	800d036 <_puts_r+0x8e>
 800d028:	290a      	cmp	r1, #10
 800d02a:	d004      	beq.n	800d036 <_puts_r+0x8e>
 800d02c:	6823      	ldr	r3, [r4, #0]
 800d02e:	1c5a      	adds	r2, r3, #1
 800d030:	6022      	str	r2, [r4, #0]
 800d032:	7019      	strb	r1, [r3, #0]
 800d034:	e7cf      	b.n	800cfd6 <_puts_r+0x2e>
 800d036:	4622      	mov	r2, r4
 800d038:	4628      	mov	r0, r5
 800d03a:	f000 f874 	bl	800d126 <__swbuf_r>
 800d03e:	3001      	adds	r0, #1
 800d040:	d1c9      	bne.n	800cfd6 <_puts_r+0x2e>
 800d042:	e7df      	b.n	800d004 <_puts_r+0x5c>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	250a      	movs	r5, #10
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	6022      	str	r2, [r4, #0]
 800d04c:	701d      	strb	r5, [r3, #0]
 800d04e:	e7db      	b.n	800d008 <_puts_r+0x60>

0800d050 <puts>:
 800d050:	4b02      	ldr	r3, [pc, #8]	; (800d05c <puts+0xc>)
 800d052:	4601      	mov	r1, r0
 800d054:	6818      	ldr	r0, [r3, #0]
 800d056:	f7ff bfa7 	b.w	800cfa8 <_puts_r>
 800d05a:	bf00      	nop
 800d05c:	20000260 	.word	0x20000260

0800d060 <siprintf>:
 800d060:	b40e      	push	{r1, r2, r3}
 800d062:	b500      	push	{lr}
 800d064:	b09c      	sub	sp, #112	; 0x70
 800d066:	ab1d      	add	r3, sp, #116	; 0x74
 800d068:	9002      	str	r0, [sp, #8]
 800d06a:	9006      	str	r0, [sp, #24]
 800d06c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d070:	4809      	ldr	r0, [pc, #36]	; (800d098 <siprintf+0x38>)
 800d072:	9107      	str	r1, [sp, #28]
 800d074:	9104      	str	r1, [sp, #16]
 800d076:	4909      	ldr	r1, [pc, #36]	; (800d09c <siprintf+0x3c>)
 800d078:	f853 2b04 	ldr.w	r2, [r3], #4
 800d07c:	9105      	str	r1, [sp, #20]
 800d07e:	6800      	ldr	r0, [r0, #0]
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	a902      	add	r1, sp, #8
 800d084:	f002 f9ce 	bl	800f424 <_svfiprintf_r>
 800d088:	9b02      	ldr	r3, [sp, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	b01c      	add	sp, #112	; 0x70
 800d090:	f85d eb04 	ldr.w	lr, [sp], #4
 800d094:	b003      	add	sp, #12
 800d096:	4770      	bx	lr
 800d098:	20000260 	.word	0x20000260
 800d09c:	ffff0208 	.word	0xffff0208

0800d0a0 <__sread>:
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a8:	f000 f968 	bl	800d37c <_read_r>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	bfab      	itete	ge
 800d0b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0b4:	181b      	addge	r3, r3, r0
 800d0b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ba:	bfac      	ite	ge
 800d0bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0be:	81a3      	strhlt	r3, [r4, #12]
 800d0c0:	bd10      	pop	{r4, pc}

0800d0c2 <__swrite>:
 800d0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c6:	461f      	mov	r7, r3
 800d0c8:	898b      	ldrh	r3, [r1, #12]
 800d0ca:	05db      	lsls	r3, r3, #23
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	4616      	mov	r6, r2
 800d0d2:	d505      	bpl.n	800d0e0 <__swrite+0x1e>
 800d0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d8:	2302      	movs	r3, #2
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f000 f93c 	bl	800d358 <_lseek_r>
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	4632      	mov	r2, r6
 800d0ee:	463b      	mov	r3, r7
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f6:	f000 b963 	b.w	800d3c0 <_write_r>

0800d0fa <__sseek>:
 800d0fa:	b510      	push	{r4, lr}
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d102:	f000 f929 	bl	800d358 <_lseek_r>
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	bf15      	itete	ne
 800d10c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d10e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d116:	81a3      	strheq	r3, [r4, #12]
 800d118:	bf18      	it	ne
 800d11a:	81a3      	strhne	r3, [r4, #12]
 800d11c:	bd10      	pop	{r4, pc}

0800d11e <__sclose>:
 800d11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d122:	f000 b8b3 	b.w	800d28c <_close_r>

0800d126 <__swbuf_r>:
 800d126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d128:	460e      	mov	r6, r1
 800d12a:	4614      	mov	r4, r2
 800d12c:	4605      	mov	r5, r0
 800d12e:	b118      	cbz	r0, 800d138 <__swbuf_r+0x12>
 800d130:	6a03      	ldr	r3, [r0, #32]
 800d132:	b90b      	cbnz	r3, 800d138 <__swbuf_r+0x12>
 800d134:	f7ff fef0 	bl	800cf18 <__sinit>
 800d138:	69a3      	ldr	r3, [r4, #24]
 800d13a:	60a3      	str	r3, [r4, #8]
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	071a      	lsls	r2, r3, #28
 800d140:	d525      	bpl.n	800d18e <__swbuf_r+0x68>
 800d142:	6923      	ldr	r3, [r4, #16]
 800d144:	b31b      	cbz	r3, 800d18e <__swbuf_r+0x68>
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	6922      	ldr	r2, [r4, #16]
 800d14a:	1a98      	subs	r0, r3, r2
 800d14c:	6963      	ldr	r3, [r4, #20]
 800d14e:	b2f6      	uxtb	r6, r6
 800d150:	4283      	cmp	r3, r0
 800d152:	4637      	mov	r7, r6
 800d154:	dc04      	bgt.n	800d160 <__swbuf_r+0x3a>
 800d156:	4621      	mov	r1, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	f002 fc2b 	bl	800f9b4 <_fflush_r>
 800d15e:	b9e0      	cbnz	r0, 800d19a <__swbuf_r+0x74>
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	3b01      	subs	r3, #1
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	6022      	str	r2, [r4, #0]
 800d16c:	701e      	strb	r6, [r3, #0]
 800d16e:	6962      	ldr	r2, [r4, #20]
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	429a      	cmp	r2, r3
 800d174:	d004      	beq.n	800d180 <__swbuf_r+0x5a>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	07db      	lsls	r3, r3, #31
 800d17a:	d506      	bpl.n	800d18a <__swbuf_r+0x64>
 800d17c:	2e0a      	cmp	r6, #10
 800d17e:	d104      	bne.n	800d18a <__swbuf_r+0x64>
 800d180:	4621      	mov	r1, r4
 800d182:	4628      	mov	r0, r5
 800d184:	f002 fc16 	bl	800f9b4 <_fflush_r>
 800d188:	b938      	cbnz	r0, 800d19a <__swbuf_r+0x74>
 800d18a:	4638      	mov	r0, r7
 800d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18e:	4621      	mov	r1, r4
 800d190:	4628      	mov	r0, r5
 800d192:	f000 f805 	bl	800d1a0 <__swsetup_r>
 800d196:	2800      	cmp	r0, #0
 800d198:	d0d5      	beq.n	800d146 <__swbuf_r+0x20>
 800d19a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d19e:	e7f4      	b.n	800d18a <__swbuf_r+0x64>

0800d1a0 <__swsetup_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4b2a      	ldr	r3, [pc, #168]	; (800d24c <__swsetup_r+0xac>)
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	b118      	cbz	r0, 800d1b4 <__swsetup_r+0x14>
 800d1ac:	6a03      	ldr	r3, [r0, #32]
 800d1ae:	b90b      	cbnz	r3, 800d1b4 <__swsetup_r+0x14>
 800d1b0:	f7ff feb2 	bl	800cf18 <__sinit>
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1ba:	0718      	lsls	r0, r3, #28
 800d1bc:	d422      	bmi.n	800d204 <__swsetup_r+0x64>
 800d1be:	06d9      	lsls	r1, r3, #27
 800d1c0:	d407      	bmi.n	800d1d2 <__swsetup_r+0x32>
 800d1c2:	2309      	movs	r3, #9
 800d1c4:	602b      	str	r3, [r5, #0]
 800d1c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1d0:	e034      	b.n	800d23c <__swsetup_r+0x9c>
 800d1d2:	0758      	lsls	r0, r3, #29
 800d1d4:	d512      	bpl.n	800d1fc <__swsetup_r+0x5c>
 800d1d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d8:	b141      	cbz	r1, 800d1ec <__swsetup_r+0x4c>
 800d1da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1de:	4299      	cmp	r1, r3
 800d1e0:	d002      	beq.n	800d1e8 <__swsetup_r+0x48>
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f000 ffc6 	bl	800e174 <_free_r>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	6363      	str	r3, [r4, #52]	; 0x34
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1f2:	81a3      	strh	r3, [r4, #12]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	6063      	str	r3, [r4, #4]
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	6023      	str	r3, [r4, #0]
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f043 0308 	orr.w	r3, r3, #8
 800d202:	81a3      	strh	r3, [r4, #12]
 800d204:	6923      	ldr	r3, [r4, #16]
 800d206:	b94b      	cbnz	r3, 800d21c <__swsetup_r+0x7c>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d20e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d212:	d003      	beq.n	800d21c <__swsetup_r+0x7c>
 800d214:	4621      	mov	r1, r4
 800d216:	4628      	mov	r0, r5
 800d218:	f002 fc1a 	bl	800fa50 <__smakebuf_r>
 800d21c:	89a0      	ldrh	r0, [r4, #12]
 800d21e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d222:	f010 0301 	ands.w	r3, r0, #1
 800d226:	d00a      	beq.n	800d23e <__swsetup_r+0x9e>
 800d228:	2300      	movs	r3, #0
 800d22a:	60a3      	str	r3, [r4, #8]
 800d22c:	6963      	ldr	r3, [r4, #20]
 800d22e:	425b      	negs	r3, r3
 800d230:	61a3      	str	r3, [r4, #24]
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	b943      	cbnz	r3, 800d248 <__swsetup_r+0xa8>
 800d236:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d23a:	d1c4      	bne.n	800d1c6 <__swsetup_r+0x26>
 800d23c:	bd38      	pop	{r3, r4, r5, pc}
 800d23e:	0781      	lsls	r1, r0, #30
 800d240:	bf58      	it	pl
 800d242:	6963      	ldrpl	r3, [r4, #20]
 800d244:	60a3      	str	r3, [r4, #8]
 800d246:	e7f4      	b.n	800d232 <__swsetup_r+0x92>
 800d248:	2000      	movs	r0, #0
 800d24a:	e7f7      	b.n	800d23c <__swsetup_r+0x9c>
 800d24c:	20000260 	.word	0x20000260

0800d250 <memset>:
 800d250:	4402      	add	r2, r0
 800d252:	4603      	mov	r3, r0
 800d254:	4293      	cmp	r3, r2
 800d256:	d100      	bne.n	800d25a <memset+0xa>
 800d258:	4770      	bx	lr
 800d25a:	f803 1b01 	strb.w	r1, [r3], #1
 800d25e:	e7f9      	b.n	800d254 <memset+0x4>

0800d260 <strncmp>:
 800d260:	b510      	push	{r4, lr}
 800d262:	b16a      	cbz	r2, 800d280 <strncmp+0x20>
 800d264:	3901      	subs	r1, #1
 800d266:	1884      	adds	r4, r0, r2
 800d268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d26c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d270:	429a      	cmp	r2, r3
 800d272:	d103      	bne.n	800d27c <strncmp+0x1c>
 800d274:	42a0      	cmp	r0, r4
 800d276:	d001      	beq.n	800d27c <strncmp+0x1c>
 800d278:	2a00      	cmp	r2, #0
 800d27a:	d1f5      	bne.n	800d268 <strncmp+0x8>
 800d27c:	1ad0      	subs	r0, r2, r3
 800d27e:	bd10      	pop	{r4, pc}
 800d280:	4610      	mov	r0, r2
 800d282:	e7fc      	b.n	800d27e <strncmp+0x1e>

0800d284 <_localeconv_r>:
 800d284:	4800      	ldr	r0, [pc, #0]	; (800d288 <_localeconv_r+0x4>)
 800d286:	4770      	bx	lr
 800d288:	20000198 	.word	0x20000198

0800d28c <_close_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	; (800d2a8 <_close_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f5 f817 	bl	80022ca <_close>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_close_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_close_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	200055dc 	.word	0x200055dc

0800d2ac <_reclaim_reent>:
 800d2ac:	4b29      	ldr	r3, [pc, #164]	; (800d354 <_reclaim_reent+0xa8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4283      	cmp	r3, r0
 800d2b2:	b570      	push	{r4, r5, r6, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	d04b      	beq.n	800d350 <_reclaim_reent+0xa4>
 800d2b8:	69c3      	ldr	r3, [r0, #28]
 800d2ba:	b143      	cbz	r3, 800d2ce <_reclaim_reent+0x22>
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d144      	bne.n	800d34c <_reclaim_reent+0xa0>
 800d2c2:	69e3      	ldr	r3, [r4, #28]
 800d2c4:	6819      	ldr	r1, [r3, #0]
 800d2c6:	b111      	cbz	r1, 800d2ce <_reclaim_reent+0x22>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 ff53 	bl	800e174 <_free_r>
 800d2ce:	6961      	ldr	r1, [r4, #20]
 800d2d0:	b111      	cbz	r1, 800d2d8 <_reclaim_reent+0x2c>
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 ff4e 	bl	800e174 <_free_r>
 800d2d8:	69e1      	ldr	r1, [r4, #28]
 800d2da:	b111      	cbz	r1, 800d2e2 <_reclaim_reent+0x36>
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 ff49 	bl	800e174 <_free_r>
 800d2e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d2e4:	b111      	cbz	r1, 800d2ec <_reclaim_reent+0x40>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 ff44 	bl	800e174 <_free_r>
 800d2ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ee:	b111      	cbz	r1, 800d2f6 <_reclaim_reent+0x4a>
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 ff3f 	bl	800e174 <_free_r>
 800d2f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2f8:	b111      	cbz	r1, 800d300 <_reclaim_reent+0x54>
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 ff3a 	bl	800e174 <_free_r>
 800d300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d302:	b111      	cbz	r1, 800d30a <_reclaim_reent+0x5e>
 800d304:	4620      	mov	r0, r4
 800d306:	f000 ff35 	bl	800e174 <_free_r>
 800d30a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d30c:	b111      	cbz	r1, 800d314 <_reclaim_reent+0x68>
 800d30e:	4620      	mov	r0, r4
 800d310:	f000 ff30 	bl	800e174 <_free_r>
 800d314:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d316:	b111      	cbz	r1, 800d31e <_reclaim_reent+0x72>
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 ff2b 	bl	800e174 <_free_r>
 800d31e:	6a23      	ldr	r3, [r4, #32]
 800d320:	b1b3      	cbz	r3, 800d350 <_reclaim_reent+0xa4>
 800d322:	4620      	mov	r0, r4
 800d324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d328:	4718      	bx	r3
 800d32a:	5949      	ldr	r1, [r1, r5]
 800d32c:	b941      	cbnz	r1, 800d340 <_reclaim_reent+0x94>
 800d32e:	3504      	adds	r5, #4
 800d330:	69e3      	ldr	r3, [r4, #28]
 800d332:	2d80      	cmp	r5, #128	; 0x80
 800d334:	68d9      	ldr	r1, [r3, #12]
 800d336:	d1f8      	bne.n	800d32a <_reclaim_reent+0x7e>
 800d338:	4620      	mov	r0, r4
 800d33a:	f000 ff1b 	bl	800e174 <_free_r>
 800d33e:	e7c0      	b.n	800d2c2 <_reclaim_reent+0x16>
 800d340:	680e      	ldr	r6, [r1, #0]
 800d342:	4620      	mov	r0, r4
 800d344:	f000 ff16 	bl	800e174 <_free_r>
 800d348:	4631      	mov	r1, r6
 800d34a:	e7ef      	b.n	800d32c <_reclaim_reent+0x80>
 800d34c:	2500      	movs	r5, #0
 800d34e:	e7ef      	b.n	800d330 <_reclaim_reent+0x84>
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	bf00      	nop
 800d354:	20000260 	.word	0x20000260

0800d358 <_lseek_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d07      	ldr	r5, [pc, #28]	; (800d378 <_lseek_r+0x20>)
 800d35c:	4604      	mov	r4, r0
 800d35e:	4608      	mov	r0, r1
 800d360:	4611      	mov	r1, r2
 800d362:	2200      	movs	r2, #0
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	f7f4 ffd6 	bl	8002318 <_lseek>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_lseek_r+0x1e>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_lseek_r+0x1e>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	200055dc 	.word	0x200055dc

0800d37c <_read_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	; (800d39c <_read_r+0x20>)
 800d380:	4604      	mov	r4, r0
 800d382:	4608      	mov	r0, r1
 800d384:	4611      	mov	r1, r2
 800d386:	2200      	movs	r2, #0
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f4 ff80 	bl	8002290 <_read>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_read_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_read_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	200055dc 	.word	0x200055dc

0800d3a0 <_sbrk_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d06      	ldr	r5, [pc, #24]	; (800d3bc <_sbrk_r+0x1c>)
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	f7f4 ffc2 	bl	8002334 <_sbrk>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_sbrk_r+0x1a>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_sbrk_r+0x1a>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	200055dc 	.word	0x200055dc

0800d3c0 <_write_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_write_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f4 f8f6 	bl	80015c0 <_write>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_write_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_write_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	200055dc 	.word	0x200055dc

0800d3e4 <__errno>:
 800d3e4:	4b01      	ldr	r3, [pc, #4]	; (800d3ec <__errno+0x8>)
 800d3e6:	6818      	ldr	r0, [r3, #0]
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	20000260 	.word	0x20000260

0800d3f0 <__libc_init_array>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	4d0d      	ldr	r5, [pc, #52]	; (800d428 <__libc_init_array+0x38>)
 800d3f4:	4c0d      	ldr	r4, [pc, #52]	; (800d42c <__libc_init_array+0x3c>)
 800d3f6:	1b64      	subs	r4, r4, r5
 800d3f8:	10a4      	asrs	r4, r4, #2
 800d3fa:	2600      	movs	r6, #0
 800d3fc:	42a6      	cmp	r6, r4
 800d3fe:	d109      	bne.n	800d414 <__libc_init_array+0x24>
 800d400:	4d0b      	ldr	r5, [pc, #44]	; (800d430 <__libc_init_array+0x40>)
 800d402:	4c0c      	ldr	r4, [pc, #48]	; (800d434 <__libc_init_array+0x44>)
 800d404:	f003 fd18 	bl	8010e38 <_init>
 800d408:	1b64      	subs	r4, r4, r5
 800d40a:	10a4      	asrs	r4, r4, #2
 800d40c:	2600      	movs	r6, #0
 800d40e:	42a6      	cmp	r6, r4
 800d410:	d105      	bne.n	800d41e <__libc_init_array+0x2e>
 800d412:	bd70      	pop	{r4, r5, r6, pc}
 800d414:	f855 3b04 	ldr.w	r3, [r5], #4
 800d418:	4798      	blx	r3
 800d41a:	3601      	adds	r6, #1
 800d41c:	e7ee      	b.n	800d3fc <__libc_init_array+0xc>
 800d41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d422:	4798      	blx	r3
 800d424:	3601      	adds	r6, #1
 800d426:	e7f2      	b.n	800d40e <__libc_init_array+0x1e>
 800d428:	08011660 	.word	0x08011660
 800d42c:	08011660 	.word	0x08011660
 800d430:	08011660 	.word	0x08011660
 800d434:	08011664 	.word	0x08011664

0800d438 <__retarget_lock_init_recursive>:
 800d438:	4770      	bx	lr

0800d43a <__retarget_lock_acquire_recursive>:
 800d43a:	4770      	bx	lr

0800d43c <__retarget_lock_release_recursive>:
 800d43c:	4770      	bx	lr

0800d43e <memcpy>:
 800d43e:	440a      	add	r2, r1
 800d440:	4291      	cmp	r1, r2
 800d442:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d446:	d100      	bne.n	800d44a <memcpy+0xc>
 800d448:	4770      	bx	lr
 800d44a:	b510      	push	{r4, lr}
 800d44c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d450:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d454:	4291      	cmp	r1, r2
 800d456:	d1f9      	bne.n	800d44c <memcpy+0xe>
 800d458:	bd10      	pop	{r4, pc}
 800d45a:	0000      	movs	r0, r0
 800d45c:	0000      	movs	r0, r0
	...

0800d460 <nan>:
 800d460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d468 <nan+0x8>
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	00000000 	.word	0x00000000
 800d46c:	7ff80000 	.word	0x7ff80000

0800d470 <nanf>:
 800d470:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d478 <nanf+0x8>
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	7fc00000 	.word	0x7fc00000

0800d47c <quorem>:
 800d47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d480:	6903      	ldr	r3, [r0, #16]
 800d482:	690c      	ldr	r4, [r1, #16]
 800d484:	42a3      	cmp	r3, r4
 800d486:	4607      	mov	r7, r0
 800d488:	db7e      	blt.n	800d588 <quorem+0x10c>
 800d48a:	3c01      	subs	r4, #1
 800d48c:	f101 0814 	add.w	r8, r1, #20
 800d490:	f100 0514 	add.w	r5, r0, #20
 800d494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d49e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4b2:	d331      	bcc.n	800d518 <quorem+0x9c>
 800d4b4:	f04f 0e00 	mov.w	lr, #0
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	46ac      	mov	ip, r5
 800d4bc:	46f2      	mov	sl, lr
 800d4be:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4c2:	b293      	uxth	r3, r2
 800d4c4:	fb06 e303 	mla	r3, r6, r3, lr
 800d4c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4cc:	0c1a      	lsrs	r2, r3, #16
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	ebaa 0303 	sub.w	r3, sl, r3
 800d4d4:	f8dc a000 	ldr.w	sl, [ip]
 800d4d8:	fa13 f38a 	uxtah	r3, r3, sl
 800d4dc:	fb06 220e 	mla	r2, r6, lr, r2
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	9b00      	ldr	r3, [sp, #0]
 800d4e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4e8:	b292      	uxth	r2, r2
 800d4ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d4ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4f2:	f8bd 3000 	ldrh.w	r3, [sp]
 800d4f6:	4581      	cmp	r9, r0
 800d4f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4fc:	f84c 3b04 	str.w	r3, [ip], #4
 800d500:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d504:	d2db      	bcs.n	800d4be <quorem+0x42>
 800d506:	f855 300b 	ldr.w	r3, [r5, fp]
 800d50a:	b92b      	cbnz	r3, 800d518 <quorem+0x9c>
 800d50c:	9b01      	ldr	r3, [sp, #4]
 800d50e:	3b04      	subs	r3, #4
 800d510:	429d      	cmp	r5, r3
 800d512:	461a      	mov	r2, r3
 800d514:	d32c      	bcc.n	800d570 <quorem+0xf4>
 800d516:	613c      	str	r4, [r7, #16]
 800d518:	4638      	mov	r0, r7
 800d51a:	f001 fca7 	bl	800ee6c <__mcmp>
 800d51e:	2800      	cmp	r0, #0
 800d520:	db22      	blt.n	800d568 <quorem+0xec>
 800d522:	3601      	adds	r6, #1
 800d524:	4629      	mov	r1, r5
 800d526:	2000      	movs	r0, #0
 800d528:	f858 2b04 	ldr.w	r2, [r8], #4
 800d52c:	f8d1 c000 	ldr.w	ip, [r1]
 800d530:	b293      	uxth	r3, r2
 800d532:	1ac3      	subs	r3, r0, r3
 800d534:	0c12      	lsrs	r2, r2, #16
 800d536:	fa13 f38c 	uxtah	r3, r3, ip
 800d53a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d53e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d542:	b29b      	uxth	r3, r3
 800d544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d548:	45c1      	cmp	r9, r8
 800d54a:	f841 3b04 	str.w	r3, [r1], #4
 800d54e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d552:	d2e9      	bcs.n	800d528 <quorem+0xac>
 800d554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d558:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d55c:	b922      	cbnz	r2, 800d568 <quorem+0xec>
 800d55e:	3b04      	subs	r3, #4
 800d560:	429d      	cmp	r5, r3
 800d562:	461a      	mov	r2, r3
 800d564:	d30a      	bcc.n	800d57c <quorem+0x100>
 800d566:	613c      	str	r4, [r7, #16]
 800d568:	4630      	mov	r0, r6
 800d56a:	b003      	add	sp, #12
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	3b04      	subs	r3, #4
 800d574:	2a00      	cmp	r2, #0
 800d576:	d1ce      	bne.n	800d516 <quorem+0x9a>
 800d578:	3c01      	subs	r4, #1
 800d57a:	e7c9      	b.n	800d510 <quorem+0x94>
 800d57c:	6812      	ldr	r2, [r2, #0]
 800d57e:	3b04      	subs	r3, #4
 800d580:	2a00      	cmp	r2, #0
 800d582:	d1f0      	bne.n	800d566 <quorem+0xea>
 800d584:	3c01      	subs	r4, #1
 800d586:	e7eb      	b.n	800d560 <quorem+0xe4>
 800d588:	2000      	movs	r0, #0
 800d58a:	e7ee      	b.n	800d56a <quorem+0xee>
 800d58c:	0000      	movs	r0, r0
	...

0800d590 <_dtoa_r>:
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	ed2d 8b04 	vpush	{d8-d9}
 800d598:	69c5      	ldr	r5, [r0, #28]
 800d59a:	b093      	sub	sp, #76	; 0x4c
 800d59c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5a0:	ec57 6b10 	vmov	r6, r7, d0
 800d5a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5a8:	9107      	str	r1, [sp, #28]
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	920a      	str	r2, [sp, #40]	; 0x28
 800d5ae:	930d      	str	r3, [sp, #52]	; 0x34
 800d5b0:	b975      	cbnz	r5, 800d5d0 <_dtoa_r+0x40>
 800d5b2:	2010      	movs	r0, #16
 800d5b4:	f7fd fe9c 	bl	800b2f0 <malloc>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	61e0      	str	r0, [r4, #28]
 800d5bc:	b920      	cbnz	r0, 800d5c8 <_dtoa_r+0x38>
 800d5be:	4bae      	ldr	r3, [pc, #696]	; (800d878 <_dtoa_r+0x2e8>)
 800d5c0:	21ef      	movs	r1, #239	; 0xef
 800d5c2:	48ae      	ldr	r0, [pc, #696]	; (800d87c <_dtoa_r+0x2ec>)
 800d5c4:	f002 fabc 	bl	800fb40 <__assert_func>
 800d5c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5cc:	6005      	str	r5, [r0, #0]
 800d5ce:	60c5      	str	r5, [r0, #12]
 800d5d0:	69e3      	ldr	r3, [r4, #28]
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	b151      	cbz	r1, 800d5ec <_dtoa_r+0x5c>
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	604a      	str	r2, [r1, #4]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4093      	lsls	r3, r2
 800d5de:	608b      	str	r3, [r1, #8]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f001 f9bd 	bl	800e960 <_Bfree>
 800d5e6:	69e3      	ldr	r3, [r4, #28]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	1e3b      	subs	r3, r7, #0
 800d5ee:	bfbb      	ittet	lt
 800d5f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d5f4:	9303      	strlt	r3, [sp, #12]
 800d5f6:	2300      	movge	r3, #0
 800d5f8:	2201      	movlt	r2, #1
 800d5fa:	bfac      	ite	ge
 800d5fc:	f8c8 3000 	strge.w	r3, [r8]
 800d600:	f8c8 2000 	strlt.w	r2, [r8]
 800d604:	4b9e      	ldr	r3, [pc, #632]	; (800d880 <_dtoa_r+0x2f0>)
 800d606:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d60a:	ea33 0308 	bics.w	r3, r3, r8
 800d60e:	d11b      	bne.n	800d648 <_dtoa_r+0xb8>
 800d610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d612:	f242 730f 	movw	r3, #9999	; 0x270f
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d61c:	4333      	orrs	r3, r6
 800d61e:	f000 8593 	beq.w	800e148 <_dtoa_r+0xbb8>
 800d622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d624:	b963      	cbnz	r3, 800d640 <_dtoa_r+0xb0>
 800d626:	4b97      	ldr	r3, [pc, #604]	; (800d884 <_dtoa_r+0x2f4>)
 800d628:	e027      	b.n	800d67a <_dtoa_r+0xea>
 800d62a:	4b97      	ldr	r3, [pc, #604]	; (800d888 <_dtoa_r+0x2f8>)
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	3308      	adds	r3, #8
 800d630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	9800      	ldr	r0, [sp, #0]
 800d636:	b013      	add	sp, #76	; 0x4c
 800d638:	ecbd 8b04 	vpop	{d8-d9}
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d640:	4b90      	ldr	r3, [pc, #576]	; (800d884 <_dtoa_r+0x2f4>)
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	3303      	adds	r3, #3
 800d646:	e7f3      	b.n	800d630 <_dtoa_r+0xa0>
 800d648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d64c:	2200      	movs	r2, #0
 800d64e:	ec51 0b17 	vmov	r0, r1, d7
 800d652:	eeb0 8a47 	vmov.f32	s16, s14
 800d656:	eef0 8a67 	vmov.f32	s17, s15
 800d65a:	2300      	movs	r3, #0
 800d65c:	f7f3 fa4c 	bl	8000af8 <__aeabi_dcmpeq>
 800d660:	4681      	mov	r9, r0
 800d662:	b160      	cbz	r0, 800d67e <_dtoa_r+0xee>
 800d664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d666:	2301      	movs	r3, #1
 800d668:	6013      	str	r3, [r2, #0]
 800d66a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8568 	beq.w	800e142 <_dtoa_r+0xbb2>
 800d672:	4b86      	ldr	r3, [pc, #536]	; (800d88c <_dtoa_r+0x2fc>)
 800d674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d676:	6013      	str	r3, [r2, #0]
 800d678:	3b01      	subs	r3, #1
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	e7da      	b.n	800d634 <_dtoa_r+0xa4>
 800d67e:	aa10      	add	r2, sp, #64	; 0x40
 800d680:	a911      	add	r1, sp, #68	; 0x44
 800d682:	4620      	mov	r0, r4
 800d684:	eeb0 0a48 	vmov.f32	s0, s16
 800d688:	eef0 0a68 	vmov.f32	s1, s17
 800d68c:	f001 fd04 	bl	800f098 <__d2b>
 800d690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d694:	4682      	mov	sl, r0
 800d696:	2d00      	cmp	r5, #0
 800d698:	d07f      	beq.n	800d79a <_dtoa_r+0x20a>
 800d69a:	ee18 3a90 	vmov	r3, s17
 800d69e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d6a6:	ec51 0b18 	vmov	r0, r1, d8
 800d6aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4b75      	ldr	r3, [pc, #468]	; (800d890 <_dtoa_r+0x300>)
 800d6bc:	f7f2 fdfc 	bl	80002b8 <__aeabi_dsub>
 800d6c0:	a367      	add	r3, pc, #412	; (adr r3, 800d860 <_dtoa_r+0x2d0>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f7f2 ffaf 	bl	8000628 <__aeabi_dmul>
 800d6ca:	a367      	add	r3, pc, #412	; (adr r3, 800d868 <_dtoa_r+0x2d8>)
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f7f2 fdf4 	bl	80002bc <__adddf3>
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	460f      	mov	r7, r1
 800d6da:	f7f2 ff3b 	bl	8000554 <__aeabi_i2d>
 800d6de:	a364      	add	r3, pc, #400	; (adr r3, 800d870 <_dtoa_r+0x2e0>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f7f2 ffa0 	bl	8000628 <__aeabi_dmul>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	4639      	mov	r1, r7
 800d6f0:	f7f2 fde4 	bl	80002bc <__adddf3>
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	460f      	mov	r7, r1
 800d6f8:	f7f3 fa46 	bl	8000b88 <__aeabi_d2iz>
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	4683      	mov	fp, r0
 800d700:	2300      	movs	r3, #0
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	f7f3 fa01 	bl	8000b0c <__aeabi_dcmplt>
 800d70a:	b148      	cbz	r0, 800d720 <_dtoa_r+0x190>
 800d70c:	4658      	mov	r0, fp
 800d70e:	f7f2 ff21 	bl	8000554 <__aeabi_i2d>
 800d712:	4632      	mov	r2, r6
 800d714:	463b      	mov	r3, r7
 800d716:	f7f3 f9ef 	bl	8000af8 <__aeabi_dcmpeq>
 800d71a:	b908      	cbnz	r0, 800d720 <_dtoa_r+0x190>
 800d71c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d720:	f1bb 0f16 	cmp.w	fp, #22
 800d724:	d857      	bhi.n	800d7d6 <_dtoa_r+0x246>
 800d726:	4b5b      	ldr	r3, [pc, #364]	; (800d894 <_dtoa_r+0x304>)
 800d728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	ec51 0b18 	vmov	r0, r1, d8
 800d734:	f7f3 f9ea 	bl	8000b0c <__aeabi_dcmplt>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d04e      	beq.n	800d7da <_dtoa_r+0x24a>
 800d73c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d740:	2300      	movs	r3, #0
 800d742:	930c      	str	r3, [sp, #48]	; 0x30
 800d744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d746:	1b5b      	subs	r3, r3, r5
 800d748:	1e5a      	subs	r2, r3, #1
 800d74a:	bf45      	ittet	mi
 800d74c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d750:	9305      	strmi	r3, [sp, #20]
 800d752:	2300      	movpl	r3, #0
 800d754:	2300      	movmi	r3, #0
 800d756:	9206      	str	r2, [sp, #24]
 800d758:	bf54      	ite	pl
 800d75a:	9305      	strpl	r3, [sp, #20]
 800d75c:	9306      	strmi	r3, [sp, #24]
 800d75e:	f1bb 0f00 	cmp.w	fp, #0
 800d762:	db3c      	blt.n	800d7de <_dtoa_r+0x24e>
 800d764:	9b06      	ldr	r3, [sp, #24]
 800d766:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d76a:	445b      	add	r3, fp
 800d76c:	9306      	str	r3, [sp, #24]
 800d76e:	2300      	movs	r3, #0
 800d770:	9308      	str	r3, [sp, #32]
 800d772:	9b07      	ldr	r3, [sp, #28]
 800d774:	2b09      	cmp	r3, #9
 800d776:	d868      	bhi.n	800d84a <_dtoa_r+0x2ba>
 800d778:	2b05      	cmp	r3, #5
 800d77a:	bfc4      	itt	gt
 800d77c:	3b04      	subgt	r3, #4
 800d77e:	9307      	strgt	r3, [sp, #28]
 800d780:	9b07      	ldr	r3, [sp, #28]
 800d782:	f1a3 0302 	sub.w	r3, r3, #2
 800d786:	bfcc      	ite	gt
 800d788:	2500      	movgt	r5, #0
 800d78a:	2501      	movle	r5, #1
 800d78c:	2b03      	cmp	r3, #3
 800d78e:	f200 8085 	bhi.w	800d89c <_dtoa_r+0x30c>
 800d792:	e8df f003 	tbb	[pc, r3]
 800d796:	3b2e      	.short	0x3b2e
 800d798:	5839      	.short	0x5839
 800d79a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d79e:	441d      	add	r5, r3
 800d7a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7a4:	2b20      	cmp	r3, #32
 800d7a6:	bfc1      	itttt	gt
 800d7a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800d7b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d7b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d7b8:	bfd6      	itet	le
 800d7ba:	f1c3 0320 	rsble	r3, r3, #32
 800d7be:	ea48 0003 	orrgt.w	r0, r8, r3
 800d7c2:	fa06 f003 	lslle.w	r0, r6, r3
 800d7c6:	f7f2 feb5 	bl	8000534 <__aeabi_ui2d>
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d7d0:	3d01      	subs	r5, #1
 800d7d2:	920e      	str	r2, [sp, #56]	; 0x38
 800d7d4:	e76f      	b.n	800d6b6 <_dtoa_r+0x126>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e7b3      	b.n	800d742 <_dtoa_r+0x1b2>
 800d7da:	900c      	str	r0, [sp, #48]	; 0x30
 800d7dc:	e7b2      	b.n	800d744 <_dtoa_r+0x1b4>
 800d7de:	9b05      	ldr	r3, [sp, #20]
 800d7e0:	eba3 030b 	sub.w	r3, r3, fp
 800d7e4:	9305      	str	r3, [sp, #20]
 800d7e6:	f1cb 0300 	rsb	r3, fp, #0
 800d7ea:	9308      	str	r3, [sp, #32]
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7f0:	e7bf      	b.n	800d772 <_dtoa_r+0x1e2>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dc52      	bgt.n	800d8a2 <_dtoa_r+0x312>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	9304      	str	r3, [sp, #16]
 800d802:	461a      	mov	r2, r3
 800d804:	920a      	str	r2, [sp, #40]	; 0x28
 800d806:	e00b      	b.n	800d820 <_dtoa_r+0x290>
 800d808:	2301      	movs	r3, #1
 800d80a:	e7f3      	b.n	800d7f4 <_dtoa_r+0x264>
 800d80c:	2300      	movs	r3, #0
 800d80e:	9309      	str	r3, [sp, #36]	; 0x24
 800d810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d812:	445b      	add	r3, fp
 800d814:	9301      	str	r3, [sp, #4]
 800d816:	3301      	adds	r3, #1
 800d818:	2b01      	cmp	r3, #1
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	bfb8      	it	lt
 800d81e:	2301      	movlt	r3, #1
 800d820:	69e0      	ldr	r0, [r4, #28]
 800d822:	2100      	movs	r1, #0
 800d824:	2204      	movs	r2, #4
 800d826:	f102 0614 	add.w	r6, r2, #20
 800d82a:	429e      	cmp	r6, r3
 800d82c:	d93d      	bls.n	800d8aa <_dtoa_r+0x31a>
 800d82e:	6041      	str	r1, [r0, #4]
 800d830:	4620      	mov	r0, r4
 800d832:	f001 f855 	bl	800e8e0 <_Balloc>
 800d836:	9000      	str	r0, [sp, #0]
 800d838:	2800      	cmp	r0, #0
 800d83a:	d139      	bne.n	800d8b0 <_dtoa_r+0x320>
 800d83c:	4b16      	ldr	r3, [pc, #88]	; (800d898 <_dtoa_r+0x308>)
 800d83e:	4602      	mov	r2, r0
 800d840:	f240 11af 	movw	r1, #431	; 0x1af
 800d844:	e6bd      	b.n	800d5c2 <_dtoa_r+0x32>
 800d846:	2301      	movs	r3, #1
 800d848:	e7e1      	b.n	800d80e <_dtoa_r+0x27e>
 800d84a:	2501      	movs	r5, #1
 800d84c:	2300      	movs	r3, #0
 800d84e:	9307      	str	r3, [sp, #28]
 800d850:	9509      	str	r5, [sp, #36]	; 0x24
 800d852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	9304      	str	r3, [sp, #16]
 800d85a:	2200      	movs	r2, #0
 800d85c:	2312      	movs	r3, #18
 800d85e:	e7d1      	b.n	800d804 <_dtoa_r+0x274>
 800d860:	636f4361 	.word	0x636f4361
 800d864:	3fd287a7 	.word	0x3fd287a7
 800d868:	8b60c8b3 	.word	0x8b60c8b3
 800d86c:	3fc68a28 	.word	0x3fc68a28
 800d870:	509f79fb 	.word	0x509f79fb
 800d874:	3fd34413 	.word	0x3fd34413
 800d878:	080111f7 	.word	0x080111f7
 800d87c:	0801120e 	.word	0x0801120e
 800d880:	7ff00000 	.word	0x7ff00000
 800d884:	080111f3 	.word	0x080111f3
 800d888:	080111ea 	.word	0x080111ea
 800d88c:	080111ba 	.word	0x080111ba
 800d890:	3ff80000 	.word	0x3ff80000
 800d894:	08011358 	.word	0x08011358
 800d898:	08011266 	.word	0x08011266
 800d89c:	2301      	movs	r3, #1
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	e7d7      	b.n	800d852 <_dtoa_r+0x2c2>
 800d8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	9304      	str	r3, [sp, #16]
 800d8a8:	e7ba      	b.n	800d820 <_dtoa_r+0x290>
 800d8aa:	3101      	adds	r1, #1
 800d8ac:	0052      	lsls	r2, r2, #1
 800d8ae:	e7ba      	b.n	800d826 <_dtoa_r+0x296>
 800d8b0:	69e3      	ldr	r3, [r4, #28]
 800d8b2:	9a00      	ldr	r2, [sp, #0]
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	2b0e      	cmp	r3, #14
 800d8ba:	f200 80a8 	bhi.w	800da0e <_dtoa_r+0x47e>
 800d8be:	2d00      	cmp	r5, #0
 800d8c0:	f000 80a5 	beq.w	800da0e <_dtoa_r+0x47e>
 800d8c4:	f1bb 0f00 	cmp.w	fp, #0
 800d8c8:	dd38      	ble.n	800d93c <_dtoa_r+0x3ac>
 800d8ca:	4bc0      	ldr	r3, [pc, #768]	; (800dbcc <_dtoa_r+0x63c>)
 800d8cc:	f00b 020f 	and.w	r2, fp, #15
 800d8d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d8d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d8dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d8e0:	d019      	beq.n	800d916 <_dtoa_r+0x386>
 800d8e2:	4bbb      	ldr	r3, [pc, #748]	; (800dbd0 <_dtoa_r+0x640>)
 800d8e4:	ec51 0b18 	vmov	r0, r1, d8
 800d8e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d8ec:	f7f2 ffc6 	bl	800087c <__aeabi_ddiv>
 800d8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8f4:	f008 080f 	and.w	r8, r8, #15
 800d8f8:	2503      	movs	r5, #3
 800d8fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dbd0 <_dtoa_r+0x640>
 800d8fe:	f1b8 0f00 	cmp.w	r8, #0
 800d902:	d10a      	bne.n	800d91a <_dtoa_r+0x38a>
 800d904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	f7f2 ffb6 	bl	800087c <__aeabi_ddiv>
 800d910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d914:	e02b      	b.n	800d96e <_dtoa_r+0x3de>
 800d916:	2502      	movs	r5, #2
 800d918:	e7ef      	b.n	800d8fa <_dtoa_r+0x36a>
 800d91a:	f018 0f01 	tst.w	r8, #1
 800d91e:	d008      	beq.n	800d932 <_dtoa_r+0x3a2>
 800d920:	4630      	mov	r0, r6
 800d922:	4639      	mov	r1, r7
 800d924:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d928:	f7f2 fe7e 	bl	8000628 <__aeabi_dmul>
 800d92c:	3501      	adds	r5, #1
 800d92e:	4606      	mov	r6, r0
 800d930:	460f      	mov	r7, r1
 800d932:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d936:	f109 0908 	add.w	r9, r9, #8
 800d93a:	e7e0      	b.n	800d8fe <_dtoa_r+0x36e>
 800d93c:	f000 809f 	beq.w	800da7e <_dtoa_r+0x4ee>
 800d940:	f1cb 0600 	rsb	r6, fp, #0
 800d944:	4ba1      	ldr	r3, [pc, #644]	; (800dbcc <_dtoa_r+0x63c>)
 800d946:	4fa2      	ldr	r7, [pc, #648]	; (800dbd0 <_dtoa_r+0x640>)
 800d948:	f006 020f 	and.w	r2, r6, #15
 800d94c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	ec51 0b18 	vmov	r0, r1, d8
 800d958:	f7f2 fe66 	bl	8000628 <__aeabi_dmul>
 800d95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d960:	1136      	asrs	r6, r6, #4
 800d962:	2300      	movs	r3, #0
 800d964:	2502      	movs	r5, #2
 800d966:	2e00      	cmp	r6, #0
 800d968:	d17e      	bne.n	800da68 <_dtoa_r+0x4d8>
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1d0      	bne.n	800d910 <_dtoa_r+0x380>
 800d96e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d970:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8084 	beq.w	800da82 <_dtoa_r+0x4f2>
 800d97a:	4b96      	ldr	r3, [pc, #600]	; (800dbd4 <_dtoa_r+0x644>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f3 f8c3 	bl	8000b0c <__aeabi_dcmplt>
 800d986:	2800      	cmp	r0, #0
 800d988:	d07b      	beq.n	800da82 <_dtoa_r+0x4f2>
 800d98a:	9b04      	ldr	r3, [sp, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d078      	beq.n	800da82 <_dtoa_r+0x4f2>
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd39      	ble.n	800da0a <_dtoa_r+0x47a>
 800d996:	4b90      	ldr	r3, [pc, #576]	; (800dbd8 <_dtoa_r+0x648>)
 800d998:	2200      	movs	r2, #0
 800d99a:	4640      	mov	r0, r8
 800d99c:	4649      	mov	r1, r9
 800d99e:	f7f2 fe43 	bl	8000628 <__aeabi_dmul>
 800d9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a6:	9e01      	ldr	r6, [sp, #4]
 800d9a8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f7f2 fdce 	bl	8000554 <__aeabi_i2d>
 800d9b8:	4642      	mov	r2, r8
 800d9ba:	464b      	mov	r3, r9
 800d9bc:	f7f2 fe34 	bl	8000628 <__aeabi_dmul>
 800d9c0:	4b86      	ldr	r3, [pc, #536]	; (800dbdc <_dtoa_r+0x64c>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f7f2 fc7a 	bl	80002bc <__adddf3>
 800d9c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9d0:	9303      	str	r3, [sp, #12]
 800d9d2:	2e00      	cmp	r6, #0
 800d9d4:	d158      	bne.n	800da88 <_dtoa_r+0x4f8>
 800d9d6:	4b82      	ldr	r3, [pc, #520]	; (800dbe0 <_dtoa_r+0x650>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	4640      	mov	r0, r8
 800d9dc:	4649      	mov	r1, r9
 800d9de:	f7f2 fc6b 	bl	80002b8 <__aeabi_dsub>
 800d9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	4689      	mov	r9, r1
 800d9ea:	f7f3 f8ad 	bl	8000b48 <__aeabi_dcmpgt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f040 8296 	bne.w	800df20 <_dtoa_r+0x990>
 800d9f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fe:	4649      	mov	r1, r9
 800da00:	f7f3 f884 	bl	8000b0c <__aeabi_dcmplt>
 800da04:	2800      	cmp	r0, #0
 800da06:	f040 8289 	bne.w	800df1c <_dtoa_r+0x98c>
 800da0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da10:	2b00      	cmp	r3, #0
 800da12:	f2c0 814e 	blt.w	800dcb2 <_dtoa_r+0x722>
 800da16:	f1bb 0f0e 	cmp.w	fp, #14
 800da1a:	f300 814a 	bgt.w	800dcb2 <_dtoa_r+0x722>
 800da1e:	4b6b      	ldr	r3, [pc, #428]	; (800dbcc <_dtoa_r+0x63c>)
 800da20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f280 80dc 	bge.w	800dbe8 <_dtoa_r+0x658>
 800da30:	9b04      	ldr	r3, [sp, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f300 80d8 	bgt.w	800dbe8 <_dtoa_r+0x658>
 800da38:	f040 826f 	bne.w	800df1a <_dtoa_r+0x98a>
 800da3c:	4b68      	ldr	r3, [pc, #416]	; (800dbe0 <_dtoa_r+0x650>)
 800da3e:	2200      	movs	r2, #0
 800da40:	4640      	mov	r0, r8
 800da42:	4649      	mov	r1, r9
 800da44:	f7f2 fdf0 	bl	8000628 <__aeabi_dmul>
 800da48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da4c:	f7f3 f872 	bl	8000b34 <__aeabi_dcmpge>
 800da50:	9e04      	ldr	r6, [sp, #16]
 800da52:	4637      	mov	r7, r6
 800da54:	2800      	cmp	r0, #0
 800da56:	f040 8245 	bne.w	800dee4 <_dtoa_r+0x954>
 800da5a:	9d00      	ldr	r5, [sp, #0]
 800da5c:	2331      	movs	r3, #49	; 0x31
 800da5e:	f805 3b01 	strb.w	r3, [r5], #1
 800da62:	f10b 0b01 	add.w	fp, fp, #1
 800da66:	e241      	b.n	800deec <_dtoa_r+0x95c>
 800da68:	07f2      	lsls	r2, r6, #31
 800da6a:	d505      	bpl.n	800da78 <_dtoa_r+0x4e8>
 800da6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da70:	f7f2 fdda 	bl	8000628 <__aeabi_dmul>
 800da74:	3501      	adds	r5, #1
 800da76:	2301      	movs	r3, #1
 800da78:	1076      	asrs	r6, r6, #1
 800da7a:	3708      	adds	r7, #8
 800da7c:	e773      	b.n	800d966 <_dtoa_r+0x3d6>
 800da7e:	2502      	movs	r5, #2
 800da80:	e775      	b.n	800d96e <_dtoa_r+0x3de>
 800da82:	9e04      	ldr	r6, [sp, #16]
 800da84:	465f      	mov	r7, fp
 800da86:	e792      	b.n	800d9ae <_dtoa_r+0x41e>
 800da88:	9900      	ldr	r1, [sp, #0]
 800da8a:	4b50      	ldr	r3, [pc, #320]	; (800dbcc <_dtoa_r+0x63c>)
 800da8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da90:	4431      	add	r1, r6
 800da92:	9102      	str	r1, [sp, #8]
 800da94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da96:	eeb0 9a47 	vmov.f32	s18, s14
 800da9a:	eef0 9a67 	vmov.f32	s19, s15
 800da9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800daa6:	2900      	cmp	r1, #0
 800daa8:	d044      	beq.n	800db34 <_dtoa_r+0x5a4>
 800daaa:	494e      	ldr	r1, [pc, #312]	; (800dbe4 <_dtoa_r+0x654>)
 800daac:	2000      	movs	r0, #0
 800daae:	f7f2 fee5 	bl	800087c <__aeabi_ddiv>
 800dab2:	ec53 2b19 	vmov	r2, r3, d9
 800dab6:	f7f2 fbff 	bl	80002b8 <__aeabi_dsub>
 800daba:	9d00      	ldr	r5, [sp, #0]
 800dabc:	ec41 0b19 	vmov	d9, r0, r1
 800dac0:	4649      	mov	r1, r9
 800dac2:	4640      	mov	r0, r8
 800dac4:	f7f3 f860 	bl	8000b88 <__aeabi_d2iz>
 800dac8:	4606      	mov	r6, r0
 800daca:	f7f2 fd43 	bl	8000554 <__aeabi_i2d>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fbef 	bl	80002b8 <__aeabi_dsub>
 800dada:	3630      	adds	r6, #48	; 0x30
 800dadc:	f805 6b01 	strb.w	r6, [r5], #1
 800dae0:	ec53 2b19 	vmov	r2, r3, d9
 800dae4:	4680      	mov	r8, r0
 800dae6:	4689      	mov	r9, r1
 800dae8:	f7f3 f810 	bl	8000b0c <__aeabi_dcmplt>
 800daec:	2800      	cmp	r0, #0
 800daee:	d164      	bne.n	800dbba <_dtoa_r+0x62a>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	4937      	ldr	r1, [pc, #220]	; (800dbd4 <_dtoa_r+0x644>)
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7f2 fbde 	bl	80002b8 <__aeabi_dsub>
 800dafc:	ec53 2b19 	vmov	r2, r3, d9
 800db00:	f7f3 f804 	bl	8000b0c <__aeabi_dcmplt>
 800db04:	2800      	cmp	r0, #0
 800db06:	f040 80b6 	bne.w	800dc76 <_dtoa_r+0x6e6>
 800db0a:	9b02      	ldr	r3, [sp, #8]
 800db0c:	429d      	cmp	r5, r3
 800db0e:	f43f af7c 	beq.w	800da0a <_dtoa_r+0x47a>
 800db12:	4b31      	ldr	r3, [pc, #196]	; (800dbd8 <_dtoa_r+0x648>)
 800db14:	ec51 0b19 	vmov	r0, r1, d9
 800db18:	2200      	movs	r2, #0
 800db1a:	f7f2 fd85 	bl	8000628 <__aeabi_dmul>
 800db1e:	4b2e      	ldr	r3, [pc, #184]	; (800dbd8 <_dtoa_r+0x648>)
 800db20:	ec41 0b19 	vmov	d9, r0, r1
 800db24:	2200      	movs	r2, #0
 800db26:	4640      	mov	r0, r8
 800db28:	4649      	mov	r1, r9
 800db2a:	f7f2 fd7d 	bl	8000628 <__aeabi_dmul>
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	e7c5      	b.n	800dac0 <_dtoa_r+0x530>
 800db34:	ec51 0b17 	vmov	r0, r1, d7
 800db38:	f7f2 fd76 	bl	8000628 <__aeabi_dmul>
 800db3c:	9b02      	ldr	r3, [sp, #8]
 800db3e:	9d00      	ldr	r5, [sp, #0]
 800db40:	930f      	str	r3, [sp, #60]	; 0x3c
 800db42:	ec41 0b19 	vmov	d9, r0, r1
 800db46:	4649      	mov	r1, r9
 800db48:	4640      	mov	r0, r8
 800db4a:	f7f3 f81d 	bl	8000b88 <__aeabi_d2iz>
 800db4e:	4606      	mov	r6, r0
 800db50:	f7f2 fd00 	bl	8000554 <__aeabi_i2d>
 800db54:	3630      	adds	r6, #48	; 0x30
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
 800db5a:	4640      	mov	r0, r8
 800db5c:	4649      	mov	r1, r9
 800db5e:	f7f2 fbab 	bl	80002b8 <__aeabi_dsub>
 800db62:	f805 6b01 	strb.w	r6, [r5], #1
 800db66:	9b02      	ldr	r3, [sp, #8]
 800db68:	429d      	cmp	r5, r3
 800db6a:	4680      	mov	r8, r0
 800db6c:	4689      	mov	r9, r1
 800db6e:	f04f 0200 	mov.w	r2, #0
 800db72:	d124      	bne.n	800dbbe <_dtoa_r+0x62e>
 800db74:	4b1b      	ldr	r3, [pc, #108]	; (800dbe4 <_dtoa_r+0x654>)
 800db76:	ec51 0b19 	vmov	r0, r1, d9
 800db7a:	f7f2 fb9f 	bl	80002bc <__adddf3>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4640      	mov	r0, r8
 800db84:	4649      	mov	r1, r9
 800db86:	f7f2 ffdf 	bl	8000b48 <__aeabi_dcmpgt>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d173      	bne.n	800dc76 <_dtoa_r+0x6e6>
 800db8e:	ec53 2b19 	vmov	r2, r3, d9
 800db92:	4914      	ldr	r1, [pc, #80]	; (800dbe4 <_dtoa_r+0x654>)
 800db94:	2000      	movs	r0, #0
 800db96:	f7f2 fb8f 	bl	80002b8 <__aeabi_dsub>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	4640      	mov	r0, r8
 800dba0:	4649      	mov	r1, r9
 800dba2:	f7f2 ffb3 	bl	8000b0c <__aeabi_dcmplt>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f43f af2f 	beq.w	800da0a <_dtoa_r+0x47a>
 800dbac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbae:	1e6b      	subs	r3, r5, #1
 800dbb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbb6:	2b30      	cmp	r3, #48	; 0x30
 800dbb8:	d0f8      	beq.n	800dbac <_dtoa_r+0x61c>
 800dbba:	46bb      	mov	fp, r7
 800dbbc:	e04a      	b.n	800dc54 <_dtoa_r+0x6c4>
 800dbbe:	4b06      	ldr	r3, [pc, #24]	; (800dbd8 <_dtoa_r+0x648>)
 800dbc0:	f7f2 fd32 	bl	8000628 <__aeabi_dmul>
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	4689      	mov	r9, r1
 800dbc8:	e7bd      	b.n	800db46 <_dtoa_r+0x5b6>
 800dbca:	bf00      	nop
 800dbcc:	08011358 	.word	0x08011358
 800dbd0:	08011330 	.word	0x08011330
 800dbd4:	3ff00000 	.word	0x3ff00000
 800dbd8:	40240000 	.word	0x40240000
 800dbdc:	401c0000 	.word	0x401c0000
 800dbe0:	40140000 	.word	0x40140000
 800dbe4:	3fe00000 	.word	0x3fe00000
 800dbe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbec:	9d00      	ldr	r5, [sp, #0]
 800dbee:	4642      	mov	r2, r8
 800dbf0:	464b      	mov	r3, r9
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	f7f2 fe41 	bl	800087c <__aeabi_ddiv>
 800dbfa:	f7f2 ffc5 	bl	8000b88 <__aeabi_d2iz>
 800dbfe:	9001      	str	r0, [sp, #4]
 800dc00:	f7f2 fca8 	bl	8000554 <__aeabi_i2d>
 800dc04:	4642      	mov	r2, r8
 800dc06:	464b      	mov	r3, r9
 800dc08:	f7f2 fd0e 	bl	8000628 <__aeabi_dmul>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4630      	mov	r0, r6
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 fb50 	bl	80002b8 <__aeabi_dsub>
 800dc18:	9e01      	ldr	r6, [sp, #4]
 800dc1a:	9f04      	ldr	r7, [sp, #16]
 800dc1c:	3630      	adds	r6, #48	; 0x30
 800dc1e:	f805 6b01 	strb.w	r6, [r5], #1
 800dc22:	9e00      	ldr	r6, [sp, #0]
 800dc24:	1bae      	subs	r6, r5, r6
 800dc26:	42b7      	cmp	r7, r6
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	d134      	bne.n	800dc98 <_dtoa_r+0x708>
 800dc2e:	f7f2 fb45 	bl	80002bc <__adddf3>
 800dc32:	4642      	mov	r2, r8
 800dc34:	464b      	mov	r3, r9
 800dc36:	4606      	mov	r6, r0
 800dc38:	460f      	mov	r7, r1
 800dc3a:	f7f2 ff85 	bl	8000b48 <__aeabi_dcmpgt>
 800dc3e:	b9c8      	cbnz	r0, 800dc74 <_dtoa_r+0x6e4>
 800dc40:	4642      	mov	r2, r8
 800dc42:	464b      	mov	r3, r9
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 ff56 	bl	8000af8 <__aeabi_dcmpeq>
 800dc4c:	b110      	cbz	r0, 800dc54 <_dtoa_r+0x6c4>
 800dc4e:	9b01      	ldr	r3, [sp, #4]
 800dc50:	07db      	lsls	r3, r3, #31
 800dc52:	d40f      	bmi.n	800dc74 <_dtoa_r+0x6e4>
 800dc54:	4651      	mov	r1, sl
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fe82 	bl	800e960 <_Bfree>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc60:	702b      	strb	r3, [r5, #0]
 800dc62:	f10b 0301 	add.w	r3, fp, #1
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f43f ace2 	beq.w	800d634 <_dtoa_r+0xa4>
 800dc70:	601d      	str	r5, [r3, #0]
 800dc72:	e4df      	b.n	800d634 <_dtoa_r+0xa4>
 800dc74:	465f      	mov	r7, fp
 800dc76:	462b      	mov	r3, r5
 800dc78:	461d      	mov	r5, r3
 800dc7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc7e:	2a39      	cmp	r2, #57	; 0x39
 800dc80:	d106      	bne.n	800dc90 <_dtoa_r+0x700>
 800dc82:	9a00      	ldr	r2, [sp, #0]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d1f7      	bne.n	800dc78 <_dtoa_r+0x6e8>
 800dc88:	9900      	ldr	r1, [sp, #0]
 800dc8a:	2230      	movs	r2, #48	; 0x30
 800dc8c:	3701      	adds	r7, #1
 800dc8e:	700a      	strb	r2, [r1, #0]
 800dc90:	781a      	ldrb	r2, [r3, #0]
 800dc92:	3201      	adds	r2, #1
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	e790      	b.n	800dbba <_dtoa_r+0x62a>
 800dc98:	4ba3      	ldr	r3, [pc, #652]	; (800df28 <_dtoa_r+0x998>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f7f2 fcc4 	bl	8000628 <__aeabi_dmul>
 800dca0:	2200      	movs	r2, #0
 800dca2:	2300      	movs	r3, #0
 800dca4:	4606      	mov	r6, r0
 800dca6:	460f      	mov	r7, r1
 800dca8:	f7f2 ff26 	bl	8000af8 <__aeabi_dcmpeq>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d09e      	beq.n	800dbee <_dtoa_r+0x65e>
 800dcb0:	e7d0      	b.n	800dc54 <_dtoa_r+0x6c4>
 800dcb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb4:	2a00      	cmp	r2, #0
 800dcb6:	f000 80ca 	beq.w	800de4e <_dtoa_r+0x8be>
 800dcba:	9a07      	ldr	r2, [sp, #28]
 800dcbc:	2a01      	cmp	r2, #1
 800dcbe:	f300 80ad 	bgt.w	800de1c <_dtoa_r+0x88c>
 800dcc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcc4:	2a00      	cmp	r2, #0
 800dcc6:	f000 80a5 	beq.w	800de14 <_dtoa_r+0x884>
 800dcca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcce:	9e08      	ldr	r6, [sp, #32]
 800dcd0:	9d05      	ldr	r5, [sp, #20]
 800dcd2:	9a05      	ldr	r2, [sp, #20]
 800dcd4:	441a      	add	r2, r3
 800dcd6:	9205      	str	r2, [sp, #20]
 800dcd8:	9a06      	ldr	r2, [sp, #24]
 800dcda:	2101      	movs	r1, #1
 800dcdc:	441a      	add	r2, r3
 800dcde:	4620      	mov	r0, r4
 800dce0:	9206      	str	r2, [sp, #24]
 800dce2:	f000 ff3d 	bl	800eb60 <__i2b>
 800dce6:	4607      	mov	r7, r0
 800dce8:	b165      	cbz	r5, 800dd04 <_dtoa_r+0x774>
 800dcea:	9b06      	ldr	r3, [sp, #24]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd09      	ble.n	800dd04 <_dtoa_r+0x774>
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	9a05      	ldr	r2, [sp, #20]
 800dcf4:	bfa8      	it	ge
 800dcf6:	462b      	movge	r3, r5
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	9205      	str	r2, [sp, #20]
 800dcfc:	9a06      	ldr	r2, [sp, #24]
 800dcfe:	1aed      	subs	r5, r5, r3
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	9306      	str	r3, [sp, #24]
 800dd04:	9b08      	ldr	r3, [sp, #32]
 800dd06:	b1f3      	cbz	r3, 800dd46 <_dtoa_r+0x7b6>
 800dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 80a3 	beq.w	800de56 <_dtoa_r+0x8c6>
 800dd10:	2e00      	cmp	r6, #0
 800dd12:	dd10      	ble.n	800dd36 <_dtoa_r+0x7a6>
 800dd14:	4639      	mov	r1, r7
 800dd16:	4632      	mov	r2, r6
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 ffe1 	bl	800ece0 <__pow5mult>
 800dd1e:	4652      	mov	r2, sl
 800dd20:	4601      	mov	r1, r0
 800dd22:	4607      	mov	r7, r0
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 ff31 	bl	800eb8c <__multiply>
 800dd2a:	4651      	mov	r1, sl
 800dd2c:	4680      	mov	r8, r0
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f000 fe16 	bl	800e960 <_Bfree>
 800dd34:	46c2      	mov	sl, r8
 800dd36:	9b08      	ldr	r3, [sp, #32]
 800dd38:	1b9a      	subs	r2, r3, r6
 800dd3a:	d004      	beq.n	800dd46 <_dtoa_r+0x7b6>
 800dd3c:	4651      	mov	r1, sl
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f000 ffce 	bl	800ece0 <__pow5mult>
 800dd44:	4682      	mov	sl, r0
 800dd46:	2101      	movs	r1, #1
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 ff09 	bl	800eb60 <__i2b>
 800dd4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	4606      	mov	r6, r0
 800dd54:	f340 8081 	ble.w	800de5a <_dtoa_r+0x8ca>
 800dd58:	461a      	mov	r2, r3
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 ffbf 	bl	800ece0 <__pow5mult>
 800dd62:	9b07      	ldr	r3, [sp, #28]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	4606      	mov	r6, r0
 800dd68:	dd7a      	ble.n	800de60 <_dtoa_r+0x8d0>
 800dd6a:	f04f 0800 	mov.w	r8, #0
 800dd6e:	6933      	ldr	r3, [r6, #16]
 800dd70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd74:	6918      	ldr	r0, [r3, #16]
 800dd76:	f000 fea5 	bl	800eac4 <__hi0bits>
 800dd7a:	f1c0 0020 	rsb	r0, r0, #32
 800dd7e:	9b06      	ldr	r3, [sp, #24]
 800dd80:	4418      	add	r0, r3
 800dd82:	f010 001f 	ands.w	r0, r0, #31
 800dd86:	f000 8094 	beq.w	800deb2 <_dtoa_r+0x922>
 800dd8a:	f1c0 0320 	rsb	r3, r0, #32
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	f340 8085 	ble.w	800de9e <_dtoa_r+0x90e>
 800dd94:	9b05      	ldr	r3, [sp, #20]
 800dd96:	f1c0 001c 	rsb	r0, r0, #28
 800dd9a:	4403      	add	r3, r0
 800dd9c:	9305      	str	r3, [sp, #20]
 800dd9e:	9b06      	ldr	r3, [sp, #24]
 800dda0:	4403      	add	r3, r0
 800dda2:	4405      	add	r5, r0
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	9b05      	ldr	r3, [sp, #20]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	dd05      	ble.n	800ddb8 <_dtoa_r+0x828>
 800ddac:	4651      	mov	r1, sl
 800ddae:	461a      	mov	r2, r3
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 ffef 	bl	800ed94 <__lshift>
 800ddb6:	4682      	mov	sl, r0
 800ddb8:	9b06      	ldr	r3, [sp, #24]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dd05      	ble.n	800ddca <_dtoa_r+0x83a>
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 ffe6 	bl	800ed94 <__lshift>
 800ddc8:	4606      	mov	r6, r0
 800ddca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d072      	beq.n	800deb6 <_dtoa_r+0x926>
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4650      	mov	r0, sl
 800ddd4:	f001 f84a 	bl	800ee6c <__mcmp>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	da6c      	bge.n	800deb6 <_dtoa_r+0x926>
 800dddc:	2300      	movs	r3, #0
 800ddde:	4651      	mov	r1, sl
 800dde0:	220a      	movs	r2, #10
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fdde 	bl	800e9a4 <__multadd>
 800dde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ddee:	4682      	mov	sl, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 81b0 	beq.w	800e156 <_dtoa_r+0xbc6>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	220a      	movs	r2, #10
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f000 fdd1 	bl	800e9a4 <__multadd>
 800de02:	9b01      	ldr	r3, [sp, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	4607      	mov	r7, r0
 800de08:	f300 8096 	bgt.w	800df38 <_dtoa_r+0x9a8>
 800de0c:	9b07      	ldr	r3, [sp, #28]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	dc59      	bgt.n	800dec6 <_dtoa_r+0x936>
 800de12:	e091      	b.n	800df38 <_dtoa_r+0x9a8>
 800de14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de1a:	e758      	b.n	800dcce <_dtoa_r+0x73e>
 800de1c:	9b04      	ldr	r3, [sp, #16]
 800de1e:	1e5e      	subs	r6, r3, #1
 800de20:	9b08      	ldr	r3, [sp, #32]
 800de22:	42b3      	cmp	r3, r6
 800de24:	bfbf      	itttt	lt
 800de26:	9b08      	ldrlt	r3, [sp, #32]
 800de28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800de2a:	9608      	strlt	r6, [sp, #32]
 800de2c:	1af3      	sublt	r3, r6, r3
 800de2e:	bfb4      	ite	lt
 800de30:	18d2      	addlt	r2, r2, r3
 800de32:	1b9e      	subge	r6, r3, r6
 800de34:	9b04      	ldr	r3, [sp, #16]
 800de36:	bfbc      	itt	lt
 800de38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800de3a:	2600      	movlt	r6, #0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	bfb7      	itett	lt
 800de40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800de44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800de48:	1a9d      	sublt	r5, r3, r2
 800de4a:	2300      	movlt	r3, #0
 800de4c:	e741      	b.n	800dcd2 <_dtoa_r+0x742>
 800de4e:	9e08      	ldr	r6, [sp, #32]
 800de50:	9d05      	ldr	r5, [sp, #20]
 800de52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de54:	e748      	b.n	800dce8 <_dtoa_r+0x758>
 800de56:	9a08      	ldr	r2, [sp, #32]
 800de58:	e770      	b.n	800dd3c <_dtoa_r+0x7ac>
 800de5a:	9b07      	ldr	r3, [sp, #28]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	dc19      	bgt.n	800de94 <_dtoa_r+0x904>
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	b9bb      	cbnz	r3, 800de94 <_dtoa_r+0x904>
 800de64:	9b03      	ldr	r3, [sp, #12]
 800de66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de6a:	b99b      	cbnz	r3, 800de94 <_dtoa_r+0x904>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de72:	0d1b      	lsrs	r3, r3, #20
 800de74:	051b      	lsls	r3, r3, #20
 800de76:	b183      	cbz	r3, 800de9a <_dtoa_r+0x90a>
 800de78:	9b05      	ldr	r3, [sp, #20]
 800de7a:	3301      	adds	r3, #1
 800de7c:	9305      	str	r3, [sp, #20]
 800de7e:	9b06      	ldr	r3, [sp, #24]
 800de80:	3301      	adds	r3, #1
 800de82:	9306      	str	r3, [sp, #24]
 800de84:	f04f 0801 	mov.w	r8, #1
 800de88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f47f af6f 	bne.w	800dd6e <_dtoa_r+0x7de>
 800de90:	2001      	movs	r0, #1
 800de92:	e774      	b.n	800dd7e <_dtoa_r+0x7ee>
 800de94:	f04f 0800 	mov.w	r8, #0
 800de98:	e7f6      	b.n	800de88 <_dtoa_r+0x8f8>
 800de9a:	4698      	mov	r8, r3
 800de9c:	e7f4      	b.n	800de88 <_dtoa_r+0x8f8>
 800de9e:	d082      	beq.n	800dda6 <_dtoa_r+0x816>
 800dea0:	9a05      	ldr	r2, [sp, #20]
 800dea2:	331c      	adds	r3, #28
 800dea4:	441a      	add	r2, r3
 800dea6:	9205      	str	r2, [sp, #20]
 800dea8:	9a06      	ldr	r2, [sp, #24]
 800deaa:	441a      	add	r2, r3
 800deac:	441d      	add	r5, r3
 800deae:	9206      	str	r2, [sp, #24]
 800deb0:	e779      	b.n	800dda6 <_dtoa_r+0x816>
 800deb2:	4603      	mov	r3, r0
 800deb4:	e7f4      	b.n	800dea0 <_dtoa_r+0x910>
 800deb6:	9b04      	ldr	r3, [sp, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	dc37      	bgt.n	800df2c <_dtoa_r+0x99c>
 800debc:	9b07      	ldr	r3, [sp, #28]
 800debe:	2b02      	cmp	r3, #2
 800dec0:	dd34      	ble.n	800df2c <_dtoa_r+0x99c>
 800dec2:	9b04      	ldr	r3, [sp, #16]
 800dec4:	9301      	str	r3, [sp, #4]
 800dec6:	9b01      	ldr	r3, [sp, #4]
 800dec8:	b963      	cbnz	r3, 800dee4 <_dtoa_r+0x954>
 800deca:	4631      	mov	r1, r6
 800decc:	2205      	movs	r2, #5
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 fd68 	bl	800e9a4 <__multadd>
 800ded4:	4601      	mov	r1, r0
 800ded6:	4606      	mov	r6, r0
 800ded8:	4650      	mov	r0, sl
 800deda:	f000 ffc7 	bl	800ee6c <__mcmp>
 800dede:	2800      	cmp	r0, #0
 800dee0:	f73f adbb 	bgt.w	800da5a <_dtoa_r+0x4ca>
 800dee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee6:	9d00      	ldr	r5, [sp, #0]
 800dee8:	ea6f 0b03 	mvn.w	fp, r3
 800deec:	f04f 0800 	mov.w	r8, #0
 800def0:	4631      	mov	r1, r6
 800def2:	4620      	mov	r0, r4
 800def4:	f000 fd34 	bl	800e960 <_Bfree>
 800def8:	2f00      	cmp	r7, #0
 800defa:	f43f aeab 	beq.w	800dc54 <_dtoa_r+0x6c4>
 800defe:	f1b8 0f00 	cmp.w	r8, #0
 800df02:	d005      	beq.n	800df10 <_dtoa_r+0x980>
 800df04:	45b8      	cmp	r8, r7
 800df06:	d003      	beq.n	800df10 <_dtoa_r+0x980>
 800df08:	4641      	mov	r1, r8
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 fd28 	bl	800e960 <_Bfree>
 800df10:	4639      	mov	r1, r7
 800df12:	4620      	mov	r0, r4
 800df14:	f000 fd24 	bl	800e960 <_Bfree>
 800df18:	e69c      	b.n	800dc54 <_dtoa_r+0x6c4>
 800df1a:	2600      	movs	r6, #0
 800df1c:	4637      	mov	r7, r6
 800df1e:	e7e1      	b.n	800dee4 <_dtoa_r+0x954>
 800df20:	46bb      	mov	fp, r7
 800df22:	4637      	mov	r7, r6
 800df24:	e599      	b.n	800da5a <_dtoa_r+0x4ca>
 800df26:	bf00      	nop
 800df28:	40240000 	.word	0x40240000
 800df2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f000 80c8 	beq.w	800e0c4 <_dtoa_r+0xb34>
 800df34:	9b04      	ldr	r3, [sp, #16]
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	2d00      	cmp	r5, #0
 800df3a:	dd05      	ble.n	800df48 <_dtoa_r+0x9b8>
 800df3c:	4639      	mov	r1, r7
 800df3e:	462a      	mov	r2, r5
 800df40:	4620      	mov	r0, r4
 800df42:	f000 ff27 	bl	800ed94 <__lshift>
 800df46:	4607      	mov	r7, r0
 800df48:	f1b8 0f00 	cmp.w	r8, #0
 800df4c:	d05b      	beq.n	800e006 <_dtoa_r+0xa76>
 800df4e:	6879      	ldr	r1, [r7, #4]
 800df50:	4620      	mov	r0, r4
 800df52:	f000 fcc5 	bl	800e8e0 <_Balloc>
 800df56:	4605      	mov	r5, r0
 800df58:	b928      	cbnz	r0, 800df66 <_dtoa_r+0x9d6>
 800df5a:	4b83      	ldr	r3, [pc, #524]	; (800e168 <_dtoa_r+0xbd8>)
 800df5c:	4602      	mov	r2, r0
 800df5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800df62:	f7ff bb2e 	b.w	800d5c2 <_dtoa_r+0x32>
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	3202      	adds	r2, #2
 800df6a:	0092      	lsls	r2, r2, #2
 800df6c:	f107 010c 	add.w	r1, r7, #12
 800df70:	300c      	adds	r0, #12
 800df72:	f7ff fa64 	bl	800d43e <memcpy>
 800df76:	2201      	movs	r2, #1
 800df78:	4629      	mov	r1, r5
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 ff0a 	bl	800ed94 <__lshift>
 800df80:	9b00      	ldr	r3, [sp, #0]
 800df82:	3301      	adds	r3, #1
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df8a:	4413      	add	r3, r2
 800df8c:	9308      	str	r3, [sp, #32]
 800df8e:	9b02      	ldr	r3, [sp, #8]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	46b8      	mov	r8, r7
 800df96:	9306      	str	r3, [sp, #24]
 800df98:	4607      	mov	r7, r0
 800df9a:	9b04      	ldr	r3, [sp, #16]
 800df9c:	4631      	mov	r1, r6
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	9301      	str	r3, [sp, #4]
 800dfa4:	f7ff fa6a 	bl	800d47c <quorem>
 800dfa8:	4641      	mov	r1, r8
 800dfaa:	9002      	str	r0, [sp, #8]
 800dfac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	f000 ff5b 	bl	800ee6c <__mcmp>
 800dfb6:	463a      	mov	r2, r7
 800dfb8:	9005      	str	r0, [sp, #20]
 800dfba:	4631      	mov	r1, r6
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f000 ff71 	bl	800eea4 <__mdiff>
 800dfc2:	68c2      	ldr	r2, [r0, #12]
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	bb02      	cbnz	r2, 800e00a <_dtoa_r+0xa7a>
 800dfc8:	4601      	mov	r1, r0
 800dfca:	4650      	mov	r0, sl
 800dfcc:	f000 ff4e 	bl	800ee6c <__mcmp>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	9209      	str	r2, [sp, #36]	; 0x24
 800dfd8:	f000 fcc2 	bl	800e960 <_Bfree>
 800dfdc:	9b07      	ldr	r3, [sp, #28]
 800dfde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfe0:	9d04      	ldr	r5, [sp, #16]
 800dfe2:	ea43 0102 	orr.w	r1, r3, r2
 800dfe6:	9b06      	ldr	r3, [sp, #24]
 800dfe8:	4319      	orrs	r1, r3
 800dfea:	d110      	bne.n	800e00e <_dtoa_r+0xa7e>
 800dfec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dff0:	d029      	beq.n	800e046 <_dtoa_r+0xab6>
 800dff2:	9b05      	ldr	r3, [sp, #20]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dd02      	ble.n	800dffe <_dtoa_r+0xa6e>
 800dff8:	9b02      	ldr	r3, [sp, #8]
 800dffa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	f883 9000 	strb.w	r9, [r3]
 800e004:	e774      	b.n	800def0 <_dtoa_r+0x960>
 800e006:	4638      	mov	r0, r7
 800e008:	e7ba      	b.n	800df80 <_dtoa_r+0x9f0>
 800e00a:	2201      	movs	r2, #1
 800e00c:	e7e1      	b.n	800dfd2 <_dtoa_r+0xa42>
 800e00e:	9b05      	ldr	r3, [sp, #20]
 800e010:	2b00      	cmp	r3, #0
 800e012:	db04      	blt.n	800e01e <_dtoa_r+0xa8e>
 800e014:	9907      	ldr	r1, [sp, #28]
 800e016:	430b      	orrs	r3, r1
 800e018:	9906      	ldr	r1, [sp, #24]
 800e01a:	430b      	orrs	r3, r1
 800e01c:	d120      	bne.n	800e060 <_dtoa_r+0xad0>
 800e01e:	2a00      	cmp	r2, #0
 800e020:	dded      	ble.n	800dffe <_dtoa_r+0xa6e>
 800e022:	4651      	mov	r1, sl
 800e024:	2201      	movs	r2, #1
 800e026:	4620      	mov	r0, r4
 800e028:	f000 feb4 	bl	800ed94 <__lshift>
 800e02c:	4631      	mov	r1, r6
 800e02e:	4682      	mov	sl, r0
 800e030:	f000 ff1c 	bl	800ee6c <__mcmp>
 800e034:	2800      	cmp	r0, #0
 800e036:	dc03      	bgt.n	800e040 <_dtoa_r+0xab0>
 800e038:	d1e1      	bne.n	800dffe <_dtoa_r+0xa6e>
 800e03a:	f019 0f01 	tst.w	r9, #1
 800e03e:	d0de      	beq.n	800dffe <_dtoa_r+0xa6e>
 800e040:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e044:	d1d8      	bne.n	800dff8 <_dtoa_r+0xa68>
 800e046:	9a01      	ldr	r2, [sp, #4]
 800e048:	2339      	movs	r3, #57	; 0x39
 800e04a:	7013      	strb	r3, [r2, #0]
 800e04c:	462b      	mov	r3, r5
 800e04e:	461d      	mov	r5, r3
 800e050:	3b01      	subs	r3, #1
 800e052:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e056:	2a39      	cmp	r2, #57	; 0x39
 800e058:	d06c      	beq.n	800e134 <_dtoa_r+0xba4>
 800e05a:	3201      	adds	r2, #1
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e747      	b.n	800def0 <_dtoa_r+0x960>
 800e060:	2a00      	cmp	r2, #0
 800e062:	dd07      	ble.n	800e074 <_dtoa_r+0xae4>
 800e064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e068:	d0ed      	beq.n	800e046 <_dtoa_r+0xab6>
 800e06a:	9a01      	ldr	r2, [sp, #4]
 800e06c:	f109 0301 	add.w	r3, r9, #1
 800e070:	7013      	strb	r3, [r2, #0]
 800e072:	e73d      	b.n	800def0 <_dtoa_r+0x960>
 800e074:	9b04      	ldr	r3, [sp, #16]
 800e076:	9a08      	ldr	r2, [sp, #32]
 800e078:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d043      	beq.n	800e108 <_dtoa_r+0xb78>
 800e080:	4651      	mov	r1, sl
 800e082:	2300      	movs	r3, #0
 800e084:	220a      	movs	r2, #10
 800e086:	4620      	mov	r0, r4
 800e088:	f000 fc8c 	bl	800e9a4 <__multadd>
 800e08c:	45b8      	cmp	r8, r7
 800e08e:	4682      	mov	sl, r0
 800e090:	f04f 0300 	mov.w	r3, #0
 800e094:	f04f 020a 	mov.w	r2, #10
 800e098:	4641      	mov	r1, r8
 800e09a:	4620      	mov	r0, r4
 800e09c:	d107      	bne.n	800e0ae <_dtoa_r+0xb1e>
 800e09e:	f000 fc81 	bl	800e9a4 <__multadd>
 800e0a2:	4680      	mov	r8, r0
 800e0a4:	4607      	mov	r7, r0
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	e775      	b.n	800df9a <_dtoa_r+0xa0a>
 800e0ae:	f000 fc79 	bl	800e9a4 <__multadd>
 800e0b2:	4639      	mov	r1, r7
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	220a      	movs	r2, #10
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 fc72 	bl	800e9a4 <__multadd>
 800e0c0:	4607      	mov	r7, r0
 800e0c2:	e7f0      	b.n	800e0a6 <_dtoa_r+0xb16>
 800e0c4:	9b04      	ldr	r3, [sp, #16]
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	9d00      	ldr	r5, [sp, #0]
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4650      	mov	r0, sl
 800e0ce:	f7ff f9d5 	bl	800d47c <quorem>
 800e0d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e0d6:	9b00      	ldr	r3, [sp, #0]
 800e0d8:	f805 9b01 	strb.w	r9, [r5], #1
 800e0dc:	1aea      	subs	r2, r5, r3
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	dd07      	ble.n	800e0f4 <_dtoa_r+0xb64>
 800e0e4:	4651      	mov	r1, sl
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	220a      	movs	r2, #10
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fc5a 	bl	800e9a4 <__multadd>
 800e0f0:	4682      	mov	sl, r0
 800e0f2:	e7ea      	b.n	800e0ca <_dtoa_r+0xb3a>
 800e0f4:	9b01      	ldr	r3, [sp, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	bfc8      	it	gt
 800e0fa:	461d      	movgt	r5, r3
 800e0fc:	9b00      	ldr	r3, [sp, #0]
 800e0fe:	bfd8      	it	le
 800e100:	2501      	movle	r5, #1
 800e102:	441d      	add	r5, r3
 800e104:	f04f 0800 	mov.w	r8, #0
 800e108:	4651      	mov	r1, sl
 800e10a:	2201      	movs	r2, #1
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 fe41 	bl	800ed94 <__lshift>
 800e112:	4631      	mov	r1, r6
 800e114:	4682      	mov	sl, r0
 800e116:	f000 fea9 	bl	800ee6c <__mcmp>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	dc96      	bgt.n	800e04c <_dtoa_r+0xabc>
 800e11e:	d102      	bne.n	800e126 <_dtoa_r+0xb96>
 800e120:	f019 0f01 	tst.w	r9, #1
 800e124:	d192      	bne.n	800e04c <_dtoa_r+0xabc>
 800e126:	462b      	mov	r3, r5
 800e128:	461d      	mov	r5, r3
 800e12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e12e:	2a30      	cmp	r2, #48	; 0x30
 800e130:	d0fa      	beq.n	800e128 <_dtoa_r+0xb98>
 800e132:	e6dd      	b.n	800def0 <_dtoa_r+0x960>
 800e134:	9a00      	ldr	r2, [sp, #0]
 800e136:	429a      	cmp	r2, r3
 800e138:	d189      	bne.n	800e04e <_dtoa_r+0xabe>
 800e13a:	f10b 0b01 	add.w	fp, fp, #1
 800e13e:	2331      	movs	r3, #49	; 0x31
 800e140:	e796      	b.n	800e070 <_dtoa_r+0xae0>
 800e142:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <_dtoa_r+0xbdc>)
 800e144:	f7ff ba99 	b.w	800d67a <_dtoa_r+0xea>
 800e148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f47f aa6d 	bne.w	800d62a <_dtoa_r+0x9a>
 800e150:	4b07      	ldr	r3, [pc, #28]	; (800e170 <_dtoa_r+0xbe0>)
 800e152:	f7ff ba92 	b.w	800d67a <_dtoa_r+0xea>
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dcb5      	bgt.n	800e0c8 <_dtoa_r+0xb38>
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	f73f aeb1 	bgt.w	800dec6 <_dtoa_r+0x936>
 800e164:	e7b0      	b.n	800e0c8 <_dtoa_r+0xb38>
 800e166:	bf00      	nop
 800e168:	08011266 	.word	0x08011266
 800e16c:	080111b9 	.word	0x080111b9
 800e170:	080111ea 	.word	0x080111ea

0800e174 <_free_r>:
 800e174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e176:	2900      	cmp	r1, #0
 800e178:	d044      	beq.n	800e204 <_free_r+0x90>
 800e17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17e:	9001      	str	r0, [sp, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	f1a1 0404 	sub.w	r4, r1, #4
 800e186:	bfb8      	it	lt
 800e188:	18e4      	addlt	r4, r4, r3
 800e18a:	f7fd f961 	bl	800b450 <__malloc_lock>
 800e18e:	4a1e      	ldr	r2, [pc, #120]	; (800e208 <_free_r+0x94>)
 800e190:	9801      	ldr	r0, [sp, #4]
 800e192:	6813      	ldr	r3, [r2, #0]
 800e194:	b933      	cbnz	r3, 800e1a4 <_free_r+0x30>
 800e196:	6063      	str	r3, [r4, #4]
 800e198:	6014      	str	r4, [r2, #0]
 800e19a:	b003      	add	sp, #12
 800e19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a0:	f7fd b95c 	b.w	800b45c <__malloc_unlock>
 800e1a4:	42a3      	cmp	r3, r4
 800e1a6:	d908      	bls.n	800e1ba <_free_r+0x46>
 800e1a8:	6825      	ldr	r5, [r4, #0]
 800e1aa:	1961      	adds	r1, r4, r5
 800e1ac:	428b      	cmp	r3, r1
 800e1ae:	bf01      	itttt	eq
 800e1b0:	6819      	ldreq	r1, [r3, #0]
 800e1b2:	685b      	ldreq	r3, [r3, #4]
 800e1b4:	1949      	addeq	r1, r1, r5
 800e1b6:	6021      	streq	r1, [r4, #0]
 800e1b8:	e7ed      	b.n	800e196 <_free_r+0x22>
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	b10b      	cbz	r3, 800e1c4 <_free_r+0x50>
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	d9fa      	bls.n	800e1ba <_free_r+0x46>
 800e1c4:	6811      	ldr	r1, [r2, #0]
 800e1c6:	1855      	adds	r5, r2, r1
 800e1c8:	42a5      	cmp	r5, r4
 800e1ca:	d10b      	bne.n	800e1e4 <_free_r+0x70>
 800e1cc:	6824      	ldr	r4, [r4, #0]
 800e1ce:	4421      	add	r1, r4
 800e1d0:	1854      	adds	r4, r2, r1
 800e1d2:	42a3      	cmp	r3, r4
 800e1d4:	6011      	str	r1, [r2, #0]
 800e1d6:	d1e0      	bne.n	800e19a <_free_r+0x26>
 800e1d8:	681c      	ldr	r4, [r3, #0]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	6053      	str	r3, [r2, #4]
 800e1de:	440c      	add	r4, r1
 800e1e0:	6014      	str	r4, [r2, #0]
 800e1e2:	e7da      	b.n	800e19a <_free_r+0x26>
 800e1e4:	d902      	bls.n	800e1ec <_free_r+0x78>
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	6003      	str	r3, [r0, #0]
 800e1ea:	e7d6      	b.n	800e19a <_free_r+0x26>
 800e1ec:	6825      	ldr	r5, [r4, #0]
 800e1ee:	1961      	adds	r1, r4, r5
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	bf04      	itt	eq
 800e1f4:	6819      	ldreq	r1, [r3, #0]
 800e1f6:	685b      	ldreq	r3, [r3, #4]
 800e1f8:	6063      	str	r3, [r4, #4]
 800e1fa:	bf04      	itt	eq
 800e1fc:	1949      	addeq	r1, r1, r5
 800e1fe:	6021      	streq	r1, [r4, #0]
 800e200:	6054      	str	r4, [r2, #4]
 800e202:	e7ca      	b.n	800e19a <_free_r+0x26>
 800e204:	b003      	add	sp, #12
 800e206:	bd30      	pop	{r4, r5, pc}
 800e208:	20005498 	.word	0x20005498

0800e20c <rshift>:
 800e20c:	6903      	ldr	r3, [r0, #16]
 800e20e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e216:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e21a:	f100 0414 	add.w	r4, r0, #20
 800e21e:	dd45      	ble.n	800e2ac <rshift+0xa0>
 800e220:	f011 011f 	ands.w	r1, r1, #31
 800e224:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e228:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e22c:	d10c      	bne.n	800e248 <rshift+0x3c>
 800e22e:	f100 0710 	add.w	r7, r0, #16
 800e232:	4629      	mov	r1, r5
 800e234:	42b1      	cmp	r1, r6
 800e236:	d334      	bcc.n	800e2a2 <rshift+0x96>
 800e238:	1a9b      	subs	r3, r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	1eea      	subs	r2, r5, #3
 800e23e:	4296      	cmp	r6, r2
 800e240:	bf38      	it	cc
 800e242:	2300      	movcc	r3, #0
 800e244:	4423      	add	r3, r4
 800e246:	e015      	b.n	800e274 <rshift+0x68>
 800e248:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e24c:	f1c1 0820 	rsb	r8, r1, #32
 800e250:	40cf      	lsrs	r7, r1
 800e252:	f105 0e04 	add.w	lr, r5, #4
 800e256:	46a1      	mov	r9, r4
 800e258:	4576      	cmp	r6, lr
 800e25a:	46f4      	mov	ip, lr
 800e25c:	d815      	bhi.n	800e28a <rshift+0x7e>
 800e25e:	1a9a      	subs	r2, r3, r2
 800e260:	0092      	lsls	r2, r2, #2
 800e262:	3a04      	subs	r2, #4
 800e264:	3501      	adds	r5, #1
 800e266:	42ae      	cmp	r6, r5
 800e268:	bf38      	it	cc
 800e26a:	2200      	movcc	r2, #0
 800e26c:	18a3      	adds	r3, r4, r2
 800e26e:	50a7      	str	r7, [r4, r2]
 800e270:	b107      	cbz	r7, 800e274 <rshift+0x68>
 800e272:	3304      	adds	r3, #4
 800e274:	1b1a      	subs	r2, r3, r4
 800e276:	42a3      	cmp	r3, r4
 800e278:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e27c:	bf08      	it	eq
 800e27e:	2300      	moveq	r3, #0
 800e280:	6102      	str	r2, [r0, #16]
 800e282:	bf08      	it	eq
 800e284:	6143      	streq	r3, [r0, #20]
 800e286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e28a:	f8dc c000 	ldr.w	ip, [ip]
 800e28e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e292:	ea4c 0707 	orr.w	r7, ip, r7
 800e296:	f849 7b04 	str.w	r7, [r9], #4
 800e29a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e29e:	40cf      	lsrs	r7, r1
 800e2a0:	e7da      	b.n	800e258 <rshift+0x4c>
 800e2a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2aa:	e7c3      	b.n	800e234 <rshift+0x28>
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	e7e1      	b.n	800e274 <rshift+0x68>

0800e2b0 <__hexdig_fun>:
 800e2b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e2b4:	2b09      	cmp	r3, #9
 800e2b6:	d802      	bhi.n	800e2be <__hexdig_fun+0xe>
 800e2b8:	3820      	subs	r0, #32
 800e2ba:	b2c0      	uxtb	r0, r0
 800e2bc:	4770      	bx	lr
 800e2be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e2c2:	2b05      	cmp	r3, #5
 800e2c4:	d801      	bhi.n	800e2ca <__hexdig_fun+0x1a>
 800e2c6:	3847      	subs	r0, #71	; 0x47
 800e2c8:	e7f7      	b.n	800e2ba <__hexdig_fun+0xa>
 800e2ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2ce:	2b05      	cmp	r3, #5
 800e2d0:	d801      	bhi.n	800e2d6 <__hexdig_fun+0x26>
 800e2d2:	3827      	subs	r0, #39	; 0x27
 800e2d4:	e7f1      	b.n	800e2ba <__hexdig_fun+0xa>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	4770      	bx	lr
	...

0800e2dc <__gethex>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	4617      	mov	r7, r2
 800e2e2:	680a      	ldr	r2, [r1, #0]
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	f102 0b02 	add.w	fp, r2, #2
 800e2ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e2ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e2f2:	4681      	mov	r9, r0
 800e2f4:	468a      	mov	sl, r1
 800e2f6:	9302      	str	r3, [sp, #8]
 800e2f8:	32fe      	adds	r2, #254	; 0xfe
 800e2fa:	eb02 030b 	add.w	r3, r2, fp
 800e2fe:	46d8      	mov	r8, fp
 800e300:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e304:	9301      	str	r3, [sp, #4]
 800e306:	2830      	cmp	r0, #48	; 0x30
 800e308:	d0f7      	beq.n	800e2fa <__gethex+0x1e>
 800e30a:	f7ff ffd1 	bl	800e2b0 <__hexdig_fun>
 800e30e:	4604      	mov	r4, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	d138      	bne.n	800e386 <__gethex+0xaa>
 800e314:	49a7      	ldr	r1, [pc, #668]	; (800e5b4 <__gethex+0x2d8>)
 800e316:	2201      	movs	r2, #1
 800e318:	4640      	mov	r0, r8
 800e31a:	f7fe ffa1 	bl	800d260 <strncmp>
 800e31e:	4606      	mov	r6, r0
 800e320:	2800      	cmp	r0, #0
 800e322:	d169      	bne.n	800e3f8 <__gethex+0x11c>
 800e324:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e328:	465d      	mov	r5, fp
 800e32a:	f7ff ffc1 	bl	800e2b0 <__hexdig_fun>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d064      	beq.n	800e3fc <__gethex+0x120>
 800e332:	465a      	mov	r2, fp
 800e334:	7810      	ldrb	r0, [r2, #0]
 800e336:	2830      	cmp	r0, #48	; 0x30
 800e338:	4690      	mov	r8, r2
 800e33a:	f102 0201 	add.w	r2, r2, #1
 800e33e:	d0f9      	beq.n	800e334 <__gethex+0x58>
 800e340:	f7ff ffb6 	bl	800e2b0 <__hexdig_fun>
 800e344:	2301      	movs	r3, #1
 800e346:	fab0 f480 	clz	r4, r0
 800e34a:	0964      	lsrs	r4, r4, #5
 800e34c:	465e      	mov	r6, fp
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	4642      	mov	r2, r8
 800e352:	4615      	mov	r5, r2
 800e354:	3201      	adds	r2, #1
 800e356:	7828      	ldrb	r0, [r5, #0]
 800e358:	f7ff ffaa 	bl	800e2b0 <__hexdig_fun>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d1f8      	bne.n	800e352 <__gethex+0x76>
 800e360:	4994      	ldr	r1, [pc, #592]	; (800e5b4 <__gethex+0x2d8>)
 800e362:	2201      	movs	r2, #1
 800e364:	4628      	mov	r0, r5
 800e366:	f7fe ff7b 	bl	800d260 <strncmp>
 800e36a:	b978      	cbnz	r0, 800e38c <__gethex+0xb0>
 800e36c:	b946      	cbnz	r6, 800e380 <__gethex+0xa4>
 800e36e:	1c6e      	adds	r6, r5, #1
 800e370:	4632      	mov	r2, r6
 800e372:	4615      	mov	r5, r2
 800e374:	3201      	adds	r2, #1
 800e376:	7828      	ldrb	r0, [r5, #0]
 800e378:	f7ff ff9a 	bl	800e2b0 <__hexdig_fun>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d1f8      	bne.n	800e372 <__gethex+0x96>
 800e380:	1b73      	subs	r3, r6, r5
 800e382:	009e      	lsls	r6, r3, #2
 800e384:	e004      	b.n	800e390 <__gethex+0xb4>
 800e386:	2400      	movs	r4, #0
 800e388:	4626      	mov	r6, r4
 800e38a:	e7e1      	b.n	800e350 <__gethex+0x74>
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	d1f7      	bne.n	800e380 <__gethex+0xa4>
 800e390:	782b      	ldrb	r3, [r5, #0]
 800e392:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e396:	2b50      	cmp	r3, #80	; 0x50
 800e398:	d13d      	bne.n	800e416 <__gethex+0x13a>
 800e39a:	786b      	ldrb	r3, [r5, #1]
 800e39c:	2b2b      	cmp	r3, #43	; 0x2b
 800e39e:	d02f      	beq.n	800e400 <__gethex+0x124>
 800e3a0:	2b2d      	cmp	r3, #45	; 0x2d
 800e3a2:	d031      	beq.n	800e408 <__gethex+0x12c>
 800e3a4:	1c69      	adds	r1, r5, #1
 800e3a6:	f04f 0b00 	mov.w	fp, #0
 800e3aa:	7808      	ldrb	r0, [r1, #0]
 800e3ac:	f7ff ff80 	bl	800e2b0 <__hexdig_fun>
 800e3b0:	1e42      	subs	r2, r0, #1
 800e3b2:	b2d2      	uxtb	r2, r2
 800e3b4:	2a18      	cmp	r2, #24
 800e3b6:	d82e      	bhi.n	800e416 <__gethex+0x13a>
 800e3b8:	f1a0 0210 	sub.w	r2, r0, #16
 800e3bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3c0:	f7ff ff76 	bl	800e2b0 <__hexdig_fun>
 800e3c4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800e3c8:	fa5f fc8c 	uxtb.w	ip, ip
 800e3cc:	f1bc 0f18 	cmp.w	ip, #24
 800e3d0:	d91d      	bls.n	800e40e <__gethex+0x132>
 800e3d2:	f1bb 0f00 	cmp.w	fp, #0
 800e3d6:	d000      	beq.n	800e3da <__gethex+0xfe>
 800e3d8:	4252      	negs	r2, r2
 800e3da:	4416      	add	r6, r2
 800e3dc:	f8ca 1000 	str.w	r1, [sl]
 800e3e0:	b1dc      	cbz	r4, 800e41a <__gethex+0x13e>
 800e3e2:	9b01      	ldr	r3, [sp, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	bf14      	ite	ne
 800e3e8:	f04f 0800 	movne.w	r8, #0
 800e3ec:	f04f 0806 	moveq.w	r8, #6
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	b005      	add	sp, #20
 800e3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f8:	4645      	mov	r5, r8
 800e3fa:	4626      	mov	r6, r4
 800e3fc:	2401      	movs	r4, #1
 800e3fe:	e7c7      	b.n	800e390 <__gethex+0xb4>
 800e400:	f04f 0b00 	mov.w	fp, #0
 800e404:	1ca9      	adds	r1, r5, #2
 800e406:	e7d0      	b.n	800e3aa <__gethex+0xce>
 800e408:	f04f 0b01 	mov.w	fp, #1
 800e40c:	e7fa      	b.n	800e404 <__gethex+0x128>
 800e40e:	230a      	movs	r3, #10
 800e410:	fb03 0002 	mla	r0, r3, r2, r0
 800e414:	e7d0      	b.n	800e3b8 <__gethex+0xdc>
 800e416:	4629      	mov	r1, r5
 800e418:	e7e0      	b.n	800e3dc <__gethex+0x100>
 800e41a:	eba5 0308 	sub.w	r3, r5, r8
 800e41e:	3b01      	subs	r3, #1
 800e420:	4621      	mov	r1, r4
 800e422:	2b07      	cmp	r3, #7
 800e424:	dc0a      	bgt.n	800e43c <__gethex+0x160>
 800e426:	4648      	mov	r0, r9
 800e428:	f000 fa5a 	bl	800e8e0 <_Balloc>
 800e42c:	4604      	mov	r4, r0
 800e42e:	b940      	cbnz	r0, 800e442 <__gethex+0x166>
 800e430:	4b61      	ldr	r3, [pc, #388]	; (800e5b8 <__gethex+0x2dc>)
 800e432:	4602      	mov	r2, r0
 800e434:	21e4      	movs	r1, #228	; 0xe4
 800e436:	4861      	ldr	r0, [pc, #388]	; (800e5bc <__gethex+0x2e0>)
 800e438:	f001 fb82 	bl	800fb40 <__assert_func>
 800e43c:	3101      	adds	r1, #1
 800e43e:	105b      	asrs	r3, r3, #1
 800e440:	e7ef      	b.n	800e422 <__gethex+0x146>
 800e442:	f100 0a14 	add.w	sl, r0, #20
 800e446:	2300      	movs	r3, #0
 800e448:	495a      	ldr	r1, [pc, #360]	; (800e5b4 <__gethex+0x2d8>)
 800e44a:	f8cd a004 	str.w	sl, [sp, #4]
 800e44e:	469b      	mov	fp, r3
 800e450:	45a8      	cmp	r8, r5
 800e452:	d342      	bcc.n	800e4da <__gethex+0x1fe>
 800e454:	9801      	ldr	r0, [sp, #4]
 800e456:	f840 bb04 	str.w	fp, [r0], #4
 800e45a:	eba0 000a 	sub.w	r0, r0, sl
 800e45e:	1080      	asrs	r0, r0, #2
 800e460:	6120      	str	r0, [r4, #16]
 800e462:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e466:	4658      	mov	r0, fp
 800e468:	f000 fb2c 	bl	800eac4 <__hi0bits>
 800e46c:	683d      	ldr	r5, [r7, #0]
 800e46e:	eba8 0000 	sub.w	r0, r8, r0
 800e472:	42a8      	cmp	r0, r5
 800e474:	dd59      	ble.n	800e52a <__gethex+0x24e>
 800e476:	eba0 0805 	sub.w	r8, r0, r5
 800e47a:	4641      	mov	r1, r8
 800e47c:	4620      	mov	r0, r4
 800e47e:	f000 febb 	bl	800f1f8 <__any_on>
 800e482:	4683      	mov	fp, r0
 800e484:	b1b8      	cbz	r0, 800e4b6 <__gethex+0x1da>
 800e486:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e48a:	1159      	asrs	r1, r3, #5
 800e48c:	f003 021f 	and.w	r2, r3, #31
 800e490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e494:	f04f 0b01 	mov.w	fp, #1
 800e498:	fa0b f202 	lsl.w	r2, fp, r2
 800e49c:	420a      	tst	r2, r1
 800e49e:	d00a      	beq.n	800e4b6 <__gethex+0x1da>
 800e4a0:	455b      	cmp	r3, fp
 800e4a2:	dd06      	ble.n	800e4b2 <__gethex+0x1d6>
 800e4a4:	f1a8 0102 	sub.w	r1, r8, #2
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f000 fea5 	bl	800f1f8 <__any_on>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d138      	bne.n	800e524 <__gethex+0x248>
 800e4b2:	f04f 0b02 	mov.w	fp, #2
 800e4b6:	4641      	mov	r1, r8
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f7ff fea7 	bl	800e20c <rshift>
 800e4be:	4446      	add	r6, r8
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	42b3      	cmp	r3, r6
 800e4c4:	da41      	bge.n	800e54a <__gethex+0x26e>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4648      	mov	r0, r9
 800e4ca:	f000 fa49 	bl	800e960 <_Bfree>
 800e4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e4d8:	e78a      	b.n	800e3f0 <__gethex+0x114>
 800e4da:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e4de:	2a2e      	cmp	r2, #46	; 0x2e
 800e4e0:	d014      	beq.n	800e50c <__gethex+0x230>
 800e4e2:	2b20      	cmp	r3, #32
 800e4e4:	d106      	bne.n	800e4f4 <__gethex+0x218>
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	f843 bb04 	str.w	fp, [r3], #4
 800e4ec:	f04f 0b00 	mov.w	fp, #0
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	465b      	mov	r3, fp
 800e4f4:	7828      	ldrb	r0, [r5, #0]
 800e4f6:	9303      	str	r3, [sp, #12]
 800e4f8:	f7ff feda 	bl	800e2b0 <__hexdig_fun>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	f000 000f 	and.w	r0, r0, #15
 800e502:	4098      	lsls	r0, r3
 800e504:	ea4b 0b00 	orr.w	fp, fp, r0
 800e508:	3304      	adds	r3, #4
 800e50a:	e7a1      	b.n	800e450 <__gethex+0x174>
 800e50c:	45a8      	cmp	r8, r5
 800e50e:	d8e8      	bhi.n	800e4e2 <__gethex+0x206>
 800e510:	2201      	movs	r2, #1
 800e512:	4628      	mov	r0, r5
 800e514:	9303      	str	r3, [sp, #12]
 800e516:	f7fe fea3 	bl	800d260 <strncmp>
 800e51a:	4926      	ldr	r1, [pc, #152]	; (800e5b4 <__gethex+0x2d8>)
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	2800      	cmp	r0, #0
 800e520:	d1df      	bne.n	800e4e2 <__gethex+0x206>
 800e522:	e795      	b.n	800e450 <__gethex+0x174>
 800e524:	f04f 0b03 	mov.w	fp, #3
 800e528:	e7c5      	b.n	800e4b6 <__gethex+0x1da>
 800e52a:	da0b      	bge.n	800e544 <__gethex+0x268>
 800e52c:	eba5 0800 	sub.w	r8, r5, r0
 800e530:	4621      	mov	r1, r4
 800e532:	4642      	mov	r2, r8
 800e534:	4648      	mov	r0, r9
 800e536:	f000 fc2d 	bl	800ed94 <__lshift>
 800e53a:	eba6 0608 	sub.w	r6, r6, r8
 800e53e:	4604      	mov	r4, r0
 800e540:	f100 0a14 	add.w	sl, r0, #20
 800e544:	f04f 0b00 	mov.w	fp, #0
 800e548:	e7ba      	b.n	800e4c0 <__gethex+0x1e4>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	42b3      	cmp	r3, r6
 800e54e:	dd73      	ble.n	800e638 <__gethex+0x35c>
 800e550:	1b9e      	subs	r6, r3, r6
 800e552:	42b5      	cmp	r5, r6
 800e554:	dc34      	bgt.n	800e5c0 <__gethex+0x2e4>
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d023      	beq.n	800e5a4 <__gethex+0x2c8>
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d025      	beq.n	800e5ac <__gethex+0x2d0>
 800e560:	2b01      	cmp	r3, #1
 800e562:	d115      	bne.n	800e590 <__gethex+0x2b4>
 800e564:	42b5      	cmp	r5, r6
 800e566:	d113      	bne.n	800e590 <__gethex+0x2b4>
 800e568:	2d01      	cmp	r5, #1
 800e56a:	d10b      	bne.n	800e584 <__gethex+0x2a8>
 800e56c:	9a02      	ldr	r2, [sp, #8]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	2301      	movs	r3, #1
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	f8ca 3000 	str.w	r3, [sl]
 800e57a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e57c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e580:	601c      	str	r4, [r3, #0]
 800e582:	e735      	b.n	800e3f0 <__gethex+0x114>
 800e584:	1e69      	subs	r1, r5, #1
 800e586:	4620      	mov	r0, r4
 800e588:	f000 fe36 	bl	800f1f8 <__any_on>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d1ed      	bne.n	800e56c <__gethex+0x290>
 800e590:	4621      	mov	r1, r4
 800e592:	4648      	mov	r0, r9
 800e594:	f000 f9e4 	bl	800e960 <_Bfree>
 800e598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e59a:	2300      	movs	r3, #0
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e5a2:	e725      	b.n	800e3f0 <__gethex+0x114>
 800e5a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1f2      	bne.n	800e590 <__gethex+0x2b4>
 800e5aa:	e7df      	b.n	800e56c <__gethex+0x290>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1dc      	bne.n	800e56c <__gethex+0x290>
 800e5b2:	e7ed      	b.n	800e590 <__gethex+0x2b4>
 800e5b4:	08011054 	.word	0x08011054
 800e5b8:	08011266 	.word	0x08011266
 800e5bc:	08011277 	.word	0x08011277
 800e5c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800e5c4:	f1bb 0f00 	cmp.w	fp, #0
 800e5c8:	d133      	bne.n	800e632 <__gethex+0x356>
 800e5ca:	f1b8 0f00 	cmp.w	r8, #0
 800e5ce:	d004      	beq.n	800e5da <__gethex+0x2fe>
 800e5d0:	4641      	mov	r1, r8
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f000 fe10 	bl	800f1f8 <__any_on>
 800e5d8:	4683      	mov	fp, r0
 800e5da:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e5e4:	f008 081f 	and.w	r8, r8, #31
 800e5e8:	fa03 f308 	lsl.w	r3, r3, r8
 800e5ec:	4213      	tst	r3, r2
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	bf18      	it	ne
 800e5f4:	f04b 0b02 	orrne.w	fp, fp, #2
 800e5f8:	1bad      	subs	r5, r5, r6
 800e5fa:	f7ff fe07 	bl	800e20c <rshift>
 800e5fe:	687e      	ldr	r6, [r7, #4]
 800e600:	f04f 0802 	mov.w	r8, #2
 800e604:	f1bb 0f00 	cmp.w	fp, #0
 800e608:	d04a      	beq.n	800e6a0 <__gethex+0x3c4>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d016      	beq.n	800e63e <__gethex+0x362>
 800e610:	2b03      	cmp	r3, #3
 800e612:	d018      	beq.n	800e646 <__gethex+0x36a>
 800e614:	2b01      	cmp	r3, #1
 800e616:	d109      	bne.n	800e62c <__gethex+0x350>
 800e618:	f01b 0f02 	tst.w	fp, #2
 800e61c:	d006      	beq.n	800e62c <__gethex+0x350>
 800e61e:	f8da 3000 	ldr.w	r3, [sl]
 800e622:	ea4b 0b03 	orr.w	fp, fp, r3
 800e626:	f01b 0f01 	tst.w	fp, #1
 800e62a:	d10f      	bne.n	800e64c <__gethex+0x370>
 800e62c:	f048 0810 	orr.w	r8, r8, #16
 800e630:	e036      	b.n	800e6a0 <__gethex+0x3c4>
 800e632:	f04f 0b01 	mov.w	fp, #1
 800e636:	e7d0      	b.n	800e5da <__gethex+0x2fe>
 800e638:	f04f 0801 	mov.w	r8, #1
 800e63c:	e7e2      	b.n	800e604 <__gethex+0x328>
 800e63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e640:	f1c3 0301 	rsb	r3, r3, #1
 800e644:	930f      	str	r3, [sp, #60]	; 0x3c
 800e646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d0ef      	beq.n	800e62c <__gethex+0x350>
 800e64c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e650:	f104 0214 	add.w	r2, r4, #20
 800e654:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e65e:	2300      	movs	r3, #0
 800e660:	4694      	mov	ip, r2
 800e662:	f852 1b04 	ldr.w	r1, [r2], #4
 800e666:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800e66a:	d01e      	beq.n	800e6aa <__gethex+0x3ce>
 800e66c:	3101      	adds	r1, #1
 800e66e:	f8cc 1000 	str.w	r1, [ip]
 800e672:	f1b8 0f02 	cmp.w	r8, #2
 800e676:	f104 0214 	add.w	r2, r4, #20
 800e67a:	d13d      	bne.n	800e6f8 <__gethex+0x41c>
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	3b01      	subs	r3, #1
 800e680:	42ab      	cmp	r3, r5
 800e682:	d10b      	bne.n	800e69c <__gethex+0x3c0>
 800e684:	1169      	asrs	r1, r5, #5
 800e686:	2301      	movs	r3, #1
 800e688:	f005 051f 	and.w	r5, r5, #31
 800e68c:	fa03 f505 	lsl.w	r5, r3, r5
 800e690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e694:	421d      	tst	r5, r3
 800e696:	bf18      	it	ne
 800e698:	f04f 0801 	movne.w	r8, #1
 800e69c:	f048 0820 	orr.w	r8, r8, #32
 800e6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6a2:	601c      	str	r4, [r3, #0]
 800e6a4:	9b02      	ldr	r3, [sp, #8]
 800e6a6:	601e      	str	r6, [r3, #0]
 800e6a8:	e6a2      	b.n	800e3f0 <__gethex+0x114>
 800e6aa:	4290      	cmp	r0, r2
 800e6ac:	f842 3c04 	str.w	r3, [r2, #-4]
 800e6b0:	d8d6      	bhi.n	800e660 <__gethex+0x384>
 800e6b2:	68a2      	ldr	r2, [r4, #8]
 800e6b4:	4593      	cmp	fp, r2
 800e6b6:	db17      	blt.n	800e6e8 <__gethex+0x40c>
 800e6b8:	6861      	ldr	r1, [r4, #4]
 800e6ba:	4648      	mov	r0, r9
 800e6bc:	3101      	adds	r1, #1
 800e6be:	f000 f90f 	bl	800e8e0 <_Balloc>
 800e6c2:	4682      	mov	sl, r0
 800e6c4:	b918      	cbnz	r0, 800e6ce <__gethex+0x3f2>
 800e6c6:	4b1b      	ldr	r3, [pc, #108]	; (800e734 <__gethex+0x458>)
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	2184      	movs	r1, #132	; 0x84
 800e6cc:	e6b3      	b.n	800e436 <__gethex+0x15a>
 800e6ce:	6922      	ldr	r2, [r4, #16]
 800e6d0:	3202      	adds	r2, #2
 800e6d2:	f104 010c 	add.w	r1, r4, #12
 800e6d6:	0092      	lsls	r2, r2, #2
 800e6d8:	300c      	adds	r0, #12
 800e6da:	f7fe feb0 	bl	800d43e <memcpy>
 800e6de:	4621      	mov	r1, r4
 800e6e0:	4648      	mov	r0, r9
 800e6e2:	f000 f93d 	bl	800e960 <_Bfree>
 800e6e6:	4654      	mov	r4, sl
 800e6e8:	6922      	ldr	r2, [r4, #16]
 800e6ea:	1c51      	adds	r1, r2, #1
 800e6ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e6f0:	6121      	str	r1, [r4, #16]
 800e6f2:	2101      	movs	r1, #1
 800e6f4:	6151      	str	r1, [r2, #20]
 800e6f6:	e7bc      	b.n	800e672 <__gethex+0x396>
 800e6f8:	6921      	ldr	r1, [r4, #16]
 800e6fa:	4559      	cmp	r1, fp
 800e6fc:	dd0b      	ble.n	800e716 <__gethex+0x43a>
 800e6fe:	2101      	movs	r1, #1
 800e700:	4620      	mov	r0, r4
 800e702:	f7ff fd83 	bl	800e20c <rshift>
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	3601      	adds	r6, #1
 800e70a:	42b3      	cmp	r3, r6
 800e70c:	f6ff aedb 	blt.w	800e4c6 <__gethex+0x1ea>
 800e710:	f04f 0801 	mov.w	r8, #1
 800e714:	e7c2      	b.n	800e69c <__gethex+0x3c0>
 800e716:	f015 051f 	ands.w	r5, r5, #31
 800e71a:	d0f9      	beq.n	800e710 <__gethex+0x434>
 800e71c:	9b01      	ldr	r3, [sp, #4]
 800e71e:	441a      	add	r2, r3
 800e720:	f1c5 0520 	rsb	r5, r5, #32
 800e724:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e728:	f000 f9cc 	bl	800eac4 <__hi0bits>
 800e72c:	42a8      	cmp	r0, r5
 800e72e:	dbe6      	blt.n	800e6fe <__gethex+0x422>
 800e730:	e7ee      	b.n	800e710 <__gethex+0x434>
 800e732:	bf00      	nop
 800e734:	08011266 	.word	0x08011266

0800e738 <L_shift>:
 800e738:	f1c2 0208 	rsb	r2, r2, #8
 800e73c:	0092      	lsls	r2, r2, #2
 800e73e:	b570      	push	{r4, r5, r6, lr}
 800e740:	f1c2 0620 	rsb	r6, r2, #32
 800e744:	6843      	ldr	r3, [r0, #4]
 800e746:	6804      	ldr	r4, [r0, #0]
 800e748:	fa03 f506 	lsl.w	r5, r3, r6
 800e74c:	432c      	orrs	r4, r5
 800e74e:	40d3      	lsrs	r3, r2
 800e750:	6004      	str	r4, [r0, #0]
 800e752:	f840 3f04 	str.w	r3, [r0, #4]!
 800e756:	4288      	cmp	r0, r1
 800e758:	d3f4      	bcc.n	800e744 <L_shift+0xc>
 800e75a:	bd70      	pop	{r4, r5, r6, pc}

0800e75c <__match>:
 800e75c:	b530      	push	{r4, r5, lr}
 800e75e:	6803      	ldr	r3, [r0, #0]
 800e760:	3301      	adds	r3, #1
 800e762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e766:	b914      	cbnz	r4, 800e76e <__match+0x12>
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	2001      	movs	r0, #1
 800e76c:	bd30      	pop	{r4, r5, pc}
 800e76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e772:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e776:	2d19      	cmp	r5, #25
 800e778:	bf98      	it	ls
 800e77a:	3220      	addls	r2, #32
 800e77c:	42a2      	cmp	r2, r4
 800e77e:	d0f0      	beq.n	800e762 <__match+0x6>
 800e780:	2000      	movs	r0, #0
 800e782:	e7f3      	b.n	800e76c <__match+0x10>

0800e784 <__hexnan>:
 800e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	680b      	ldr	r3, [r1, #0]
 800e78a:	6801      	ldr	r1, [r0, #0]
 800e78c:	115e      	asrs	r6, r3, #5
 800e78e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e792:	f013 031f 	ands.w	r3, r3, #31
 800e796:	b087      	sub	sp, #28
 800e798:	bf18      	it	ne
 800e79a:	3604      	addne	r6, #4
 800e79c:	2500      	movs	r5, #0
 800e79e:	1f37      	subs	r7, r6, #4
 800e7a0:	4682      	mov	sl, r0
 800e7a2:	4690      	mov	r8, r2
 800e7a4:	9301      	str	r3, [sp, #4]
 800e7a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7aa:	46b9      	mov	r9, r7
 800e7ac:	463c      	mov	r4, r7
 800e7ae:	9502      	str	r5, [sp, #8]
 800e7b0:	46ab      	mov	fp, r5
 800e7b2:	784a      	ldrb	r2, [r1, #1]
 800e7b4:	1c4b      	adds	r3, r1, #1
 800e7b6:	9303      	str	r3, [sp, #12]
 800e7b8:	b342      	cbz	r2, 800e80c <__hexnan+0x88>
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	9105      	str	r1, [sp, #20]
 800e7be:	9204      	str	r2, [sp, #16]
 800e7c0:	f7ff fd76 	bl	800e2b0 <__hexdig_fun>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d14f      	bne.n	800e868 <__hexnan+0xe4>
 800e7c8:	9a04      	ldr	r2, [sp, #16]
 800e7ca:	9905      	ldr	r1, [sp, #20]
 800e7cc:	2a20      	cmp	r2, #32
 800e7ce:	d818      	bhi.n	800e802 <__hexnan+0x7e>
 800e7d0:	9b02      	ldr	r3, [sp, #8]
 800e7d2:	459b      	cmp	fp, r3
 800e7d4:	dd13      	ble.n	800e7fe <__hexnan+0x7a>
 800e7d6:	454c      	cmp	r4, r9
 800e7d8:	d206      	bcs.n	800e7e8 <__hexnan+0x64>
 800e7da:	2d07      	cmp	r5, #7
 800e7dc:	dc04      	bgt.n	800e7e8 <__hexnan+0x64>
 800e7de:	462a      	mov	r2, r5
 800e7e0:	4649      	mov	r1, r9
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f7ff ffa8 	bl	800e738 <L_shift>
 800e7e8:	4544      	cmp	r4, r8
 800e7ea:	d950      	bls.n	800e88e <__hexnan+0x10a>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f1a4 0904 	sub.w	r9, r4, #4
 800e7f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7f6:	f8cd b008 	str.w	fp, [sp, #8]
 800e7fa:	464c      	mov	r4, r9
 800e7fc:	461d      	mov	r5, r3
 800e7fe:	9903      	ldr	r1, [sp, #12]
 800e800:	e7d7      	b.n	800e7b2 <__hexnan+0x2e>
 800e802:	2a29      	cmp	r2, #41	; 0x29
 800e804:	d155      	bne.n	800e8b2 <__hexnan+0x12e>
 800e806:	3102      	adds	r1, #2
 800e808:	f8ca 1000 	str.w	r1, [sl]
 800e80c:	f1bb 0f00 	cmp.w	fp, #0
 800e810:	d04f      	beq.n	800e8b2 <__hexnan+0x12e>
 800e812:	454c      	cmp	r4, r9
 800e814:	d206      	bcs.n	800e824 <__hexnan+0xa0>
 800e816:	2d07      	cmp	r5, #7
 800e818:	dc04      	bgt.n	800e824 <__hexnan+0xa0>
 800e81a:	462a      	mov	r2, r5
 800e81c:	4649      	mov	r1, r9
 800e81e:	4620      	mov	r0, r4
 800e820:	f7ff ff8a 	bl	800e738 <L_shift>
 800e824:	4544      	cmp	r4, r8
 800e826:	d934      	bls.n	800e892 <__hexnan+0x10e>
 800e828:	f1a8 0204 	sub.w	r2, r8, #4
 800e82c:	4623      	mov	r3, r4
 800e82e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e832:	f842 1f04 	str.w	r1, [r2, #4]!
 800e836:	429f      	cmp	r7, r3
 800e838:	d2f9      	bcs.n	800e82e <__hexnan+0xaa>
 800e83a:	1b3b      	subs	r3, r7, r4
 800e83c:	f023 0303 	bic.w	r3, r3, #3
 800e840:	3304      	adds	r3, #4
 800e842:	3e03      	subs	r6, #3
 800e844:	3401      	adds	r4, #1
 800e846:	42a6      	cmp	r6, r4
 800e848:	bf38      	it	cc
 800e84a:	2304      	movcc	r3, #4
 800e84c:	4443      	add	r3, r8
 800e84e:	2200      	movs	r2, #0
 800e850:	f843 2b04 	str.w	r2, [r3], #4
 800e854:	429f      	cmp	r7, r3
 800e856:	d2fb      	bcs.n	800e850 <__hexnan+0xcc>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	b91b      	cbnz	r3, 800e864 <__hexnan+0xe0>
 800e85c:	4547      	cmp	r7, r8
 800e85e:	d126      	bne.n	800e8ae <__hexnan+0x12a>
 800e860:	2301      	movs	r3, #1
 800e862:	603b      	str	r3, [r7, #0]
 800e864:	2005      	movs	r0, #5
 800e866:	e025      	b.n	800e8b4 <__hexnan+0x130>
 800e868:	3501      	adds	r5, #1
 800e86a:	2d08      	cmp	r5, #8
 800e86c:	f10b 0b01 	add.w	fp, fp, #1
 800e870:	dd06      	ble.n	800e880 <__hexnan+0xfc>
 800e872:	4544      	cmp	r4, r8
 800e874:	d9c3      	bls.n	800e7fe <__hexnan+0x7a>
 800e876:	2300      	movs	r3, #0
 800e878:	f844 3c04 	str.w	r3, [r4, #-4]
 800e87c:	2501      	movs	r5, #1
 800e87e:	3c04      	subs	r4, #4
 800e880:	6822      	ldr	r2, [r4, #0]
 800e882:	f000 000f 	and.w	r0, r0, #15
 800e886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e88a:	6020      	str	r0, [r4, #0]
 800e88c:	e7b7      	b.n	800e7fe <__hexnan+0x7a>
 800e88e:	2508      	movs	r5, #8
 800e890:	e7b5      	b.n	800e7fe <__hexnan+0x7a>
 800e892:	9b01      	ldr	r3, [sp, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d0df      	beq.n	800e858 <__hexnan+0xd4>
 800e898:	f1c3 0320 	rsb	r3, r3, #32
 800e89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a0:	40da      	lsrs	r2, r3
 800e8a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e8ac:	e7d4      	b.n	800e858 <__hexnan+0xd4>
 800e8ae:	3f04      	subs	r7, #4
 800e8b0:	e7d2      	b.n	800e858 <__hexnan+0xd4>
 800e8b2:	2004      	movs	r0, #4
 800e8b4:	b007      	add	sp, #28
 800e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8ba <__ascii_mbtowc>:
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	b901      	cbnz	r1, 800e8c0 <__ascii_mbtowc+0x6>
 800e8be:	a901      	add	r1, sp, #4
 800e8c0:	b142      	cbz	r2, 800e8d4 <__ascii_mbtowc+0x1a>
 800e8c2:	b14b      	cbz	r3, 800e8d8 <__ascii_mbtowc+0x1e>
 800e8c4:	7813      	ldrb	r3, [r2, #0]
 800e8c6:	600b      	str	r3, [r1, #0]
 800e8c8:	7812      	ldrb	r2, [r2, #0]
 800e8ca:	1e10      	subs	r0, r2, #0
 800e8cc:	bf18      	it	ne
 800e8ce:	2001      	movne	r0, #1
 800e8d0:	b002      	add	sp, #8
 800e8d2:	4770      	bx	lr
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	e7fb      	b.n	800e8d0 <__ascii_mbtowc+0x16>
 800e8d8:	f06f 0001 	mvn.w	r0, #1
 800e8dc:	e7f8      	b.n	800e8d0 <__ascii_mbtowc+0x16>
	...

0800e8e0 <_Balloc>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	69c6      	ldr	r6, [r0, #28]
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460d      	mov	r5, r1
 800e8e8:	b976      	cbnz	r6, 800e908 <_Balloc+0x28>
 800e8ea:	2010      	movs	r0, #16
 800e8ec:	f7fc fd00 	bl	800b2f0 <malloc>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	61e0      	str	r0, [r4, #28]
 800e8f4:	b920      	cbnz	r0, 800e900 <_Balloc+0x20>
 800e8f6:	4b18      	ldr	r3, [pc, #96]	; (800e958 <_Balloc+0x78>)
 800e8f8:	4818      	ldr	r0, [pc, #96]	; (800e95c <_Balloc+0x7c>)
 800e8fa:	216b      	movs	r1, #107	; 0x6b
 800e8fc:	f001 f920 	bl	800fb40 <__assert_func>
 800e900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e904:	6006      	str	r6, [r0, #0]
 800e906:	60c6      	str	r6, [r0, #12]
 800e908:	69e6      	ldr	r6, [r4, #28]
 800e90a:	68f3      	ldr	r3, [r6, #12]
 800e90c:	b183      	cbz	r3, 800e930 <_Balloc+0x50>
 800e90e:	69e3      	ldr	r3, [r4, #28]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e916:	b9b8      	cbnz	r0, 800e948 <_Balloc+0x68>
 800e918:	2101      	movs	r1, #1
 800e91a:	fa01 f605 	lsl.w	r6, r1, r5
 800e91e:	1d72      	adds	r2, r6, #5
 800e920:	0092      	lsls	r2, r2, #2
 800e922:	4620      	mov	r0, r4
 800e924:	f001 f92a 	bl	800fb7c <_calloc_r>
 800e928:	b160      	cbz	r0, 800e944 <_Balloc+0x64>
 800e92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e92e:	e00e      	b.n	800e94e <_Balloc+0x6e>
 800e930:	2221      	movs	r2, #33	; 0x21
 800e932:	2104      	movs	r1, #4
 800e934:	4620      	mov	r0, r4
 800e936:	f001 f921 	bl	800fb7c <_calloc_r>
 800e93a:	69e3      	ldr	r3, [r4, #28]
 800e93c:	60f0      	str	r0, [r6, #12]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1e4      	bne.n	800e90e <_Balloc+0x2e>
 800e944:	2000      	movs	r0, #0
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	6802      	ldr	r2, [r0, #0]
 800e94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e94e:	2300      	movs	r3, #0
 800e950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e954:	e7f7      	b.n	800e946 <_Balloc+0x66>
 800e956:	bf00      	nop
 800e958:	080111f7 	.word	0x080111f7
 800e95c:	080112d7 	.word	0x080112d7

0800e960 <_Bfree>:
 800e960:	b570      	push	{r4, r5, r6, lr}
 800e962:	69c6      	ldr	r6, [r0, #28]
 800e964:	4605      	mov	r5, r0
 800e966:	460c      	mov	r4, r1
 800e968:	b976      	cbnz	r6, 800e988 <_Bfree+0x28>
 800e96a:	2010      	movs	r0, #16
 800e96c:	f7fc fcc0 	bl	800b2f0 <malloc>
 800e970:	4602      	mov	r2, r0
 800e972:	61e8      	str	r0, [r5, #28]
 800e974:	b920      	cbnz	r0, 800e980 <_Bfree+0x20>
 800e976:	4b09      	ldr	r3, [pc, #36]	; (800e99c <_Bfree+0x3c>)
 800e978:	4809      	ldr	r0, [pc, #36]	; (800e9a0 <_Bfree+0x40>)
 800e97a:	218f      	movs	r1, #143	; 0x8f
 800e97c:	f001 f8e0 	bl	800fb40 <__assert_func>
 800e980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e984:	6006      	str	r6, [r0, #0]
 800e986:	60c6      	str	r6, [r0, #12]
 800e988:	b13c      	cbz	r4, 800e99a <_Bfree+0x3a>
 800e98a:	69eb      	ldr	r3, [r5, #28]
 800e98c:	6862      	ldr	r2, [r4, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e994:	6021      	str	r1, [r4, #0]
 800e996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	080111f7 	.word	0x080111f7
 800e9a0:	080112d7 	.word	0x080112d7

0800e9a4 <__multadd>:
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	690d      	ldr	r5, [r1, #16]
 800e9aa:	4607      	mov	r7, r0
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	461e      	mov	r6, r3
 800e9b0:	f101 0c14 	add.w	ip, r1, #20
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e9ba:	b299      	uxth	r1, r3
 800e9bc:	fb02 6101 	mla	r1, r2, r1, r6
 800e9c0:	0c1e      	lsrs	r6, r3, #16
 800e9c2:	0c0b      	lsrs	r3, r1, #16
 800e9c4:	fb02 3306 	mla	r3, r2, r6, r3
 800e9c8:	b289      	uxth	r1, r1
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9d0:	4285      	cmp	r5, r0
 800e9d2:	f84c 1b04 	str.w	r1, [ip], #4
 800e9d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e9da:	dcec      	bgt.n	800e9b6 <__multadd+0x12>
 800e9dc:	b30e      	cbz	r6, 800ea22 <__multadd+0x7e>
 800e9de:	68a3      	ldr	r3, [r4, #8]
 800e9e0:	42ab      	cmp	r3, r5
 800e9e2:	dc19      	bgt.n	800ea18 <__multadd+0x74>
 800e9e4:	6861      	ldr	r1, [r4, #4]
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	3101      	adds	r1, #1
 800e9ea:	f7ff ff79 	bl	800e8e0 <_Balloc>
 800e9ee:	4680      	mov	r8, r0
 800e9f0:	b928      	cbnz	r0, 800e9fe <__multadd+0x5a>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <__multadd+0x84>)
 800e9f6:	480d      	ldr	r0, [pc, #52]	; (800ea2c <__multadd+0x88>)
 800e9f8:	21ba      	movs	r1, #186	; 0xba
 800e9fa:	f001 f8a1 	bl	800fb40 <__assert_func>
 800e9fe:	6922      	ldr	r2, [r4, #16]
 800ea00:	3202      	adds	r2, #2
 800ea02:	f104 010c 	add.w	r1, r4, #12
 800ea06:	0092      	lsls	r2, r2, #2
 800ea08:	300c      	adds	r0, #12
 800ea0a:	f7fe fd18 	bl	800d43e <memcpy>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4638      	mov	r0, r7
 800ea12:	f7ff ffa5 	bl	800e960 <_Bfree>
 800ea16:	4644      	mov	r4, r8
 800ea18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea1c:	3501      	adds	r5, #1
 800ea1e:	615e      	str	r6, [r3, #20]
 800ea20:	6125      	str	r5, [r4, #16]
 800ea22:	4620      	mov	r0, r4
 800ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea28:	08011266 	.word	0x08011266
 800ea2c:	080112d7 	.word	0x080112d7

0800ea30 <__s2b>:
 800ea30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea34:	460c      	mov	r4, r1
 800ea36:	4615      	mov	r5, r2
 800ea38:	461f      	mov	r7, r3
 800ea3a:	2209      	movs	r2, #9
 800ea3c:	3308      	adds	r3, #8
 800ea3e:	4606      	mov	r6, r0
 800ea40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea44:	2100      	movs	r1, #0
 800ea46:	2201      	movs	r2, #1
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	db09      	blt.n	800ea60 <__s2b+0x30>
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f7ff ff47 	bl	800e8e0 <_Balloc>
 800ea52:	b940      	cbnz	r0, 800ea66 <__s2b+0x36>
 800ea54:	4602      	mov	r2, r0
 800ea56:	4b19      	ldr	r3, [pc, #100]	; (800eabc <__s2b+0x8c>)
 800ea58:	4819      	ldr	r0, [pc, #100]	; (800eac0 <__s2b+0x90>)
 800ea5a:	21d3      	movs	r1, #211	; 0xd3
 800ea5c:	f001 f870 	bl	800fb40 <__assert_func>
 800ea60:	0052      	lsls	r2, r2, #1
 800ea62:	3101      	adds	r1, #1
 800ea64:	e7f0      	b.n	800ea48 <__s2b+0x18>
 800ea66:	9b08      	ldr	r3, [sp, #32]
 800ea68:	6143      	str	r3, [r0, #20]
 800ea6a:	2d09      	cmp	r5, #9
 800ea6c:	f04f 0301 	mov.w	r3, #1
 800ea70:	6103      	str	r3, [r0, #16]
 800ea72:	dd16      	ble.n	800eaa2 <__s2b+0x72>
 800ea74:	f104 0909 	add.w	r9, r4, #9
 800ea78:	46c8      	mov	r8, r9
 800ea7a:	442c      	add	r4, r5
 800ea7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ea80:	4601      	mov	r1, r0
 800ea82:	3b30      	subs	r3, #48	; 0x30
 800ea84:	220a      	movs	r2, #10
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7ff ff8c 	bl	800e9a4 <__multadd>
 800ea8c:	45a0      	cmp	r8, r4
 800ea8e:	d1f5      	bne.n	800ea7c <__s2b+0x4c>
 800ea90:	f1a5 0408 	sub.w	r4, r5, #8
 800ea94:	444c      	add	r4, r9
 800ea96:	1b2d      	subs	r5, r5, r4
 800ea98:	1963      	adds	r3, r4, r5
 800ea9a:	42bb      	cmp	r3, r7
 800ea9c:	db04      	blt.n	800eaa8 <__s2b+0x78>
 800ea9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa2:	340a      	adds	r4, #10
 800eaa4:	2509      	movs	r5, #9
 800eaa6:	e7f6      	b.n	800ea96 <__s2b+0x66>
 800eaa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eaac:	4601      	mov	r1, r0
 800eaae:	3b30      	subs	r3, #48	; 0x30
 800eab0:	220a      	movs	r2, #10
 800eab2:	4630      	mov	r0, r6
 800eab4:	f7ff ff76 	bl	800e9a4 <__multadd>
 800eab8:	e7ee      	b.n	800ea98 <__s2b+0x68>
 800eaba:	bf00      	nop
 800eabc:	08011266 	.word	0x08011266
 800eac0:	080112d7 	.word	0x080112d7

0800eac4 <__hi0bits>:
 800eac4:	0c03      	lsrs	r3, r0, #16
 800eac6:	041b      	lsls	r3, r3, #16
 800eac8:	b9d3      	cbnz	r3, 800eb00 <__hi0bits+0x3c>
 800eaca:	0400      	lsls	r0, r0, #16
 800eacc:	2310      	movs	r3, #16
 800eace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ead2:	bf04      	itt	eq
 800ead4:	0200      	lsleq	r0, r0, #8
 800ead6:	3308      	addeq	r3, #8
 800ead8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eadc:	bf04      	itt	eq
 800eade:	0100      	lsleq	r0, r0, #4
 800eae0:	3304      	addeq	r3, #4
 800eae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eae6:	bf04      	itt	eq
 800eae8:	0080      	lsleq	r0, r0, #2
 800eaea:	3302      	addeq	r3, #2
 800eaec:	2800      	cmp	r0, #0
 800eaee:	db05      	blt.n	800eafc <__hi0bits+0x38>
 800eaf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eaf4:	f103 0301 	add.w	r3, r3, #1
 800eaf8:	bf08      	it	eq
 800eafa:	2320      	moveq	r3, #32
 800eafc:	4618      	mov	r0, r3
 800eafe:	4770      	bx	lr
 800eb00:	2300      	movs	r3, #0
 800eb02:	e7e4      	b.n	800eace <__hi0bits+0xa>

0800eb04 <__lo0bits>:
 800eb04:	6803      	ldr	r3, [r0, #0]
 800eb06:	f013 0207 	ands.w	r2, r3, #7
 800eb0a:	d00c      	beq.n	800eb26 <__lo0bits+0x22>
 800eb0c:	07d9      	lsls	r1, r3, #31
 800eb0e:	d422      	bmi.n	800eb56 <__lo0bits+0x52>
 800eb10:	079a      	lsls	r2, r3, #30
 800eb12:	bf49      	itett	mi
 800eb14:	085b      	lsrmi	r3, r3, #1
 800eb16:	089b      	lsrpl	r3, r3, #2
 800eb18:	6003      	strmi	r3, [r0, #0]
 800eb1a:	2201      	movmi	r2, #1
 800eb1c:	bf5c      	itt	pl
 800eb1e:	6003      	strpl	r3, [r0, #0]
 800eb20:	2202      	movpl	r2, #2
 800eb22:	4610      	mov	r0, r2
 800eb24:	4770      	bx	lr
 800eb26:	b299      	uxth	r1, r3
 800eb28:	b909      	cbnz	r1, 800eb2e <__lo0bits+0x2a>
 800eb2a:	0c1b      	lsrs	r3, r3, #16
 800eb2c:	2210      	movs	r2, #16
 800eb2e:	b2d9      	uxtb	r1, r3
 800eb30:	b909      	cbnz	r1, 800eb36 <__lo0bits+0x32>
 800eb32:	3208      	adds	r2, #8
 800eb34:	0a1b      	lsrs	r3, r3, #8
 800eb36:	0719      	lsls	r1, r3, #28
 800eb38:	bf04      	itt	eq
 800eb3a:	091b      	lsreq	r3, r3, #4
 800eb3c:	3204      	addeq	r2, #4
 800eb3e:	0799      	lsls	r1, r3, #30
 800eb40:	bf04      	itt	eq
 800eb42:	089b      	lsreq	r3, r3, #2
 800eb44:	3202      	addeq	r2, #2
 800eb46:	07d9      	lsls	r1, r3, #31
 800eb48:	d403      	bmi.n	800eb52 <__lo0bits+0x4e>
 800eb4a:	085b      	lsrs	r3, r3, #1
 800eb4c:	f102 0201 	add.w	r2, r2, #1
 800eb50:	d003      	beq.n	800eb5a <__lo0bits+0x56>
 800eb52:	6003      	str	r3, [r0, #0]
 800eb54:	e7e5      	b.n	800eb22 <__lo0bits+0x1e>
 800eb56:	2200      	movs	r2, #0
 800eb58:	e7e3      	b.n	800eb22 <__lo0bits+0x1e>
 800eb5a:	2220      	movs	r2, #32
 800eb5c:	e7e1      	b.n	800eb22 <__lo0bits+0x1e>
	...

0800eb60 <__i2b>:
 800eb60:	b510      	push	{r4, lr}
 800eb62:	460c      	mov	r4, r1
 800eb64:	2101      	movs	r1, #1
 800eb66:	f7ff febb 	bl	800e8e0 <_Balloc>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	b928      	cbnz	r0, 800eb7a <__i2b+0x1a>
 800eb6e:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <__i2b+0x24>)
 800eb70:	4805      	ldr	r0, [pc, #20]	; (800eb88 <__i2b+0x28>)
 800eb72:	f240 1145 	movw	r1, #325	; 0x145
 800eb76:	f000 ffe3 	bl	800fb40 <__assert_func>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	6144      	str	r4, [r0, #20]
 800eb7e:	6103      	str	r3, [r0, #16]
 800eb80:	bd10      	pop	{r4, pc}
 800eb82:	bf00      	nop
 800eb84:	08011266 	.word	0x08011266
 800eb88:	080112d7 	.word	0x080112d7

0800eb8c <__multiply>:
 800eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	4691      	mov	r9, r2
 800eb92:	690a      	ldr	r2, [r1, #16]
 800eb94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	bfb8      	it	lt
 800eb9c:	460b      	movlt	r3, r1
 800eb9e:	460c      	mov	r4, r1
 800eba0:	bfbc      	itt	lt
 800eba2:	464c      	movlt	r4, r9
 800eba4:	4699      	movlt	r9, r3
 800eba6:	6927      	ldr	r7, [r4, #16]
 800eba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ebac:	68a3      	ldr	r3, [r4, #8]
 800ebae:	6861      	ldr	r1, [r4, #4]
 800ebb0:	eb07 060a 	add.w	r6, r7, sl
 800ebb4:	42b3      	cmp	r3, r6
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	bfb8      	it	lt
 800ebba:	3101      	addlt	r1, #1
 800ebbc:	f7ff fe90 	bl	800e8e0 <_Balloc>
 800ebc0:	b930      	cbnz	r0, 800ebd0 <__multiply+0x44>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	4b44      	ldr	r3, [pc, #272]	; (800ecd8 <__multiply+0x14c>)
 800ebc6:	4845      	ldr	r0, [pc, #276]	; (800ecdc <__multiply+0x150>)
 800ebc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ebcc:	f000 ffb8 	bl	800fb40 <__assert_func>
 800ebd0:	f100 0514 	add.w	r5, r0, #20
 800ebd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebd8:	462b      	mov	r3, r5
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4543      	cmp	r3, r8
 800ebde:	d321      	bcc.n	800ec24 <__multiply+0x98>
 800ebe0:	f104 0314 	add.w	r3, r4, #20
 800ebe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ebe8:	f109 0314 	add.w	r3, r9, #20
 800ebec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ebf0:	9202      	str	r2, [sp, #8]
 800ebf2:	1b3a      	subs	r2, r7, r4
 800ebf4:	3a15      	subs	r2, #21
 800ebf6:	f022 0203 	bic.w	r2, r2, #3
 800ebfa:	3204      	adds	r2, #4
 800ebfc:	f104 0115 	add.w	r1, r4, #21
 800ec00:	428f      	cmp	r7, r1
 800ec02:	bf38      	it	cc
 800ec04:	2204      	movcc	r2, #4
 800ec06:	9201      	str	r2, [sp, #4]
 800ec08:	9a02      	ldr	r2, [sp, #8]
 800ec0a:	9303      	str	r3, [sp, #12]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d80c      	bhi.n	800ec2a <__multiply+0x9e>
 800ec10:	2e00      	cmp	r6, #0
 800ec12:	dd03      	ble.n	800ec1c <__multiply+0x90>
 800ec14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d05b      	beq.n	800ecd4 <__multiply+0x148>
 800ec1c:	6106      	str	r6, [r0, #16]
 800ec1e:	b005      	add	sp, #20
 800ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec24:	f843 2b04 	str.w	r2, [r3], #4
 800ec28:	e7d8      	b.n	800ebdc <__multiply+0x50>
 800ec2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec2e:	f1ba 0f00 	cmp.w	sl, #0
 800ec32:	d024      	beq.n	800ec7e <__multiply+0xf2>
 800ec34:	f104 0e14 	add.w	lr, r4, #20
 800ec38:	46a9      	mov	r9, r5
 800ec3a:	f04f 0c00 	mov.w	ip, #0
 800ec3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ec42:	f8d9 1000 	ldr.w	r1, [r9]
 800ec46:	fa1f fb82 	uxth.w	fp, r2
 800ec4a:	b289      	uxth	r1, r1
 800ec4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ec50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ec54:	f8d9 2000 	ldr.w	r2, [r9]
 800ec58:	4461      	add	r1, ip
 800ec5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ec5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ec62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ec66:	b289      	uxth	r1, r1
 800ec68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ec6c:	4577      	cmp	r7, lr
 800ec6e:	f849 1b04 	str.w	r1, [r9], #4
 800ec72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ec76:	d8e2      	bhi.n	800ec3e <__multiply+0xb2>
 800ec78:	9a01      	ldr	r2, [sp, #4]
 800ec7a:	f845 c002 	str.w	ip, [r5, r2]
 800ec7e:	9a03      	ldr	r2, [sp, #12]
 800ec80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ec84:	3304      	adds	r3, #4
 800ec86:	f1b9 0f00 	cmp.w	r9, #0
 800ec8a:	d021      	beq.n	800ecd0 <__multiply+0x144>
 800ec8c:	6829      	ldr	r1, [r5, #0]
 800ec8e:	f104 0c14 	add.w	ip, r4, #20
 800ec92:	46ae      	mov	lr, r5
 800ec94:	f04f 0a00 	mov.w	sl, #0
 800ec98:	f8bc b000 	ldrh.w	fp, [ip]
 800ec9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eca0:	fb09 220b 	mla	r2, r9, fp, r2
 800eca4:	4452      	add	r2, sl
 800eca6:	b289      	uxth	r1, r1
 800eca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecac:	f84e 1b04 	str.w	r1, [lr], #4
 800ecb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ecb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ecb8:	f8be 1000 	ldrh.w	r1, [lr]
 800ecbc:	fb09 110a 	mla	r1, r9, sl, r1
 800ecc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ecc4:	4567      	cmp	r7, ip
 800ecc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ecca:	d8e5      	bhi.n	800ec98 <__multiply+0x10c>
 800eccc:	9a01      	ldr	r2, [sp, #4]
 800ecce:	50a9      	str	r1, [r5, r2]
 800ecd0:	3504      	adds	r5, #4
 800ecd2:	e799      	b.n	800ec08 <__multiply+0x7c>
 800ecd4:	3e01      	subs	r6, #1
 800ecd6:	e79b      	b.n	800ec10 <__multiply+0x84>
 800ecd8:	08011266 	.word	0x08011266
 800ecdc:	080112d7 	.word	0x080112d7

0800ece0 <__pow5mult>:
 800ece0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece4:	4615      	mov	r5, r2
 800ece6:	f012 0203 	ands.w	r2, r2, #3
 800ecea:	4606      	mov	r6, r0
 800ecec:	460f      	mov	r7, r1
 800ecee:	d007      	beq.n	800ed00 <__pow5mult+0x20>
 800ecf0:	4c25      	ldr	r4, [pc, #148]	; (800ed88 <__pow5mult+0xa8>)
 800ecf2:	3a01      	subs	r2, #1
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecfa:	f7ff fe53 	bl	800e9a4 <__multadd>
 800ecfe:	4607      	mov	r7, r0
 800ed00:	10ad      	asrs	r5, r5, #2
 800ed02:	d03d      	beq.n	800ed80 <__pow5mult+0xa0>
 800ed04:	69f4      	ldr	r4, [r6, #28]
 800ed06:	b97c      	cbnz	r4, 800ed28 <__pow5mult+0x48>
 800ed08:	2010      	movs	r0, #16
 800ed0a:	f7fc faf1 	bl	800b2f0 <malloc>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	61f0      	str	r0, [r6, #28]
 800ed12:	b928      	cbnz	r0, 800ed20 <__pow5mult+0x40>
 800ed14:	4b1d      	ldr	r3, [pc, #116]	; (800ed8c <__pow5mult+0xac>)
 800ed16:	481e      	ldr	r0, [pc, #120]	; (800ed90 <__pow5mult+0xb0>)
 800ed18:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ed1c:	f000 ff10 	bl	800fb40 <__assert_func>
 800ed20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed24:	6004      	str	r4, [r0, #0]
 800ed26:	60c4      	str	r4, [r0, #12]
 800ed28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ed2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed30:	b94c      	cbnz	r4, 800ed46 <__pow5mult+0x66>
 800ed32:	f240 2171 	movw	r1, #625	; 0x271
 800ed36:	4630      	mov	r0, r6
 800ed38:	f7ff ff12 	bl	800eb60 <__i2b>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed42:	4604      	mov	r4, r0
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	f04f 0900 	mov.w	r9, #0
 800ed4a:	07eb      	lsls	r3, r5, #31
 800ed4c:	d50a      	bpl.n	800ed64 <__pow5mult+0x84>
 800ed4e:	4639      	mov	r1, r7
 800ed50:	4622      	mov	r2, r4
 800ed52:	4630      	mov	r0, r6
 800ed54:	f7ff ff1a 	bl	800eb8c <__multiply>
 800ed58:	4639      	mov	r1, r7
 800ed5a:	4680      	mov	r8, r0
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff fdff 	bl	800e960 <_Bfree>
 800ed62:	4647      	mov	r7, r8
 800ed64:	106d      	asrs	r5, r5, #1
 800ed66:	d00b      	beq.n	800ed80 <__pow5mult+0xa0>
 800ed68:	6820      	ldr	r0, [r4, #0]
 800ed6a:	b938      	cbnz	r0, 800ed7c <__pow5mult+0x9c>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	4621      	mov	r1, r4
 800ed70:	4630      	mov	r0, r6
 800ed72:	f7ff ff0b 	bl	800eb8c <__multiply>
 800ed76:	6020      	str	r0, [r4, #0]
 800ed78:	f8c0 9000 	str.w	r9, [r0]
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	e7e4      	b.n	800ed4a <__pow5mult+0x6a>
 800ed80:	4638      	mov	r0, r7
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	bf00      	nop
 800ed88:	08011420 	.word	0x08011420
 800ed8c:	080111f7 	.word	0x080111f7
 800ed90:	080112d7 	.word	0x080112d7

0800ed94 <__lshift>:
 800ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed98:	460c      	mov	r4, r1
 800ed9a:	6849      	ldr	r1, [r1, #4]
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	4607      	mov	r7, r0
 800eda6:	4691      	mov	r9, r2
 800eda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edac:	f108 0601 	add.w	r6, r8, #1
 800edb0:	42b3      	cmp	r3, r6
 800edb2:	db0b      	blt.n	800edcc <__lshift+0x38>
 800edb4:	4638      	mov	r0, r7
 800edb6:	f7ff fd93 	bl	800e8e0 <_Balloc>
 800edba:	4605      	mov	r5, r0
 800edbc:	b948      	cbnz	r0, 800edd2 <__lshift+0x3e>
 800edbe:	4602      	mov	r2, r0
 800edc0:	4b28      	ldr	r3, [pc, #160]	; (800ee64 <__lshift+0xd0>)
 800edc2:	4829      	ldr	r0, [pc, #164]	; (800ee68 <__lshift+0xd4>)
 800edc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800edc8:	f000 feba 	bl	800fb40 <__assert_func>
 800edcc:	3101      	adds	r1, #1
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	e7ee      	b.n	800edb0 <__lshift+0x1c>
 800edd2:	2300      	movs	r3, #0
 800edd4:	f100 0114 	add.w	r1, r0, #20
 800edd8:	f100 0210 	add.w	r2, r0, #16
 800eddc:	4618      	mov	r0, r3
 800edde:	4553      	cmp	r3, sl
 800ede0:	db33      	blt.n	800ee4a <__lshift+0xb6>
 800ede2:	6920      	ldr	r0, [r4, #16]
 800ede4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ede8:	f104 0314 	add.w	r3, r4, #20
 800edec:	f019 091f 	ands.w	r9, r9, #31
 800edf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800edf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edf8:	d02b      	beq.n	800ee52 <__lshift+0xbe>
 800edfa:	f1c9 0e20 	rsb	lr, r9, #32
 800edfe:	468a      	mov	sl, r1
 800ee00:	2200      	movs	r2, #0
 800ee02:	6818      	ldr	r0, [r3, #0]
 800ee04:	fa00 f009 	lsl.w	r0, r0, r9
 800ee08:	4310      	orrs	r0, r2
 800ee0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee12:	459c      	cmp	ip, r3
 800ee14:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee18:	d8f3      	bhi.n	800ee02 <__lshift+0x6e>
 800ee1a:	ebac 0304 	sub.w	r3, ip, r4
 800ee1e:	3b15      	subs	r3, #21
 800ee20:	f023 0303 	bic.w	r3, r3, #3
 800ee24:	3304      	adds	r3, #4
 800ee26:	f104 0015 	add.w	r0, r4, #21
 800ee2a:	4584      	cmp	ip, r0
 800ee2c:	bf38      	it	cc
 800ee2e:	2304      	movcc	r3, #4
 800ee30:	50ca      	str	r2, [r1, r3]
 800ee32:	b10a      	cbz	r2, 800ee38 <__lshift+0xa4>
 800ee34:	f108 0602 	add.w	r6, r8, #2
 800ee38:	3e01      	subs	r6, #1
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	612e      	str	r6, [r5, #16]
 800ee3e:	4621      	mov	r1, r4
 800ee40:	f7ff fd8e 	bl	800e960 <_Bfree>
 800ee44:	4628      	mov	r0, r5
 800ee46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee4e:	3301      	adds	r3, #1
 800ee50:	e7c5      	b.n	800edde <__lshift+0x4a>
 800ee52:	3904      	subs	r1, #4
 800ee54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee5c:	459c      	cmp	ip, r3
 800ee5e:	d8f9      	bhi.n	800ee54 <__lshift+0xc0>
 800ee60:	e7ea      	b.n	800ee38 <__lshift+0xa4>
 800ee62:	bf00      	nop
 800ee64:	08011266 	.word	0x08011266
 800ee68:	080112d7 	.word	0x080112d7

0800ee6c <__mcmp>:
 800ee6c:	b530      	push	{r4, r5, lr}
 800ee6e:	6902      	ldr	r2, [r0, #16]
 800ee70:	690c      	ldr	r4, [r1, #16]
 800ee72:	1b12      	subs	r2, r2, r4
 800ee74:	d10e      	bne.n	800ee94 <__mcmp+0x28>
 800ee76:	f100 0314 	add.w	r3, r0, #20
 800ee7a:	3114      	adds	r1, #20
 800ee7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ee80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ee84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ee88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ee8c:	42a5      	cmp	r5, r4
 800ee8e:	d003      	beq.n	800ee98 <__mcmp+0x2c>
 800ee90:	d305      	bcc.n	800ee9e <__mcmp+0x32>
 800ee92:	2201      	movs	r2, #1
 800ee94:	4610      	mov	r0, r2
 800ee96:	bd30      	pop	{r4, r5, pc}
 800ee98:	4283      	cmp	r3, r0
 800ee9a:	d3f3      	bcc.n	800ee84 <__mcmp+0x18>
 800ee9c:	e7fa      	b.n	800ee94 <__mcmp+0x28>
 800ee9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eea2:	e7f7      	b.n	800ee94 <__mcmp+0x28>

0800eea4 <__mdiff>:
 800eea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea8:	460c      	mov	r4, r1
 800eeaa:	4606      	mov	r6, r0
 800eeac:	4611      	mov	r1, r2
 800eeae:	4620      	mov	r0, r4
 800eeb0:	4690      	mov	r8, r2
 800eeb2:	f7ff ffdb 	bl	800ee6c <__mcmp>
 800eeb6:	1e05      	subs	r5, r0, #0
 800eeb8:	d110      	bne.n	800eedc <__mdiff+0x38>
 800eeba:	4629      	mov	r1, r5
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff fd0f 	bl	800e8e0 <_Balloc>
 800eec2:	b930      	cbnz	r0, 800eed2 <__mdiff+0x2e>
 800eec4:	4b3a      	ldr	r3, [pc, #232]	; (800efb0 <__mdiff+0x10c>)
 800eec6:	4602      	mov	r2, r0
 800eec8:	f240 2137 	movw	r1, #567	; 0x237
 800eecc:	4839      	ldr	r0, [pc, #228]	; (800efb4 <__mdiff+0x110>)
 800eece:	f000 fe37 	bl	800fb40 <__assert_func>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eedc:	bfa4      	itt	ge
 800eede:	4643      	movge	r3, r8
 800eee0:	46a0      	movge	r8, r4
 800eee2:	4630      	mov	r0, r6
 800eee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eee8:	bfa6      	itte	ge
 800eeea:	461c      	movge	r4, r3
 800eeec:	2500      	movge	r5, #0
 800eeee:	2501      	movlt	r5, #1
 800eef0:	f7ff fcf6 	bl	800e8e0 <_Balloc>
 800eef4:	b920      	cbnz	r0, 800ef00 <__mdiff+0x5c>
 800eef6:	4b2e      	ldr	r3, [pc, #184]	; (800efb0 <__mdiff+0x10c>)
 800eef8:	4602      	mov	r2, r0
 800eefa:	f240 2145 	movw	r1, #581	; 0x245
 800eefe:	e7e5      	b.n	800eecc <__mdiff+0x28>
 800ef00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef04:	6926      	ldr	r6, [r4, #16]
 800ef06:	60c5      	str	r5, [r0, #12]
 800ef08:	f104 0914 	add.w	r9, r4, #20
 800ef0c:	f108 0514 	add.w	r5, r8, #20
 800ef10:	f100 0e14 	add.w	lr, r0, #20
 800ef14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef1c:	f108 0210 	add.w	r2, r8, #16
 800ef20:	46f2      	mov	sl, lr
 800ef22:	2100      	movs	r1, #0
 800ef24:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef2c:	fa11 f88b 	uxtah	r8, r1, fp
 800ef30:	b299      	uxth	r1, r3
 800ef32:	0c1b      	lsrs	r3, r3, #16
 800ef34:	eba8 0801 	sub.w	r8, r8, r1
 800ef38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ef3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ef40:	fa1f f888 	uxth.w	r8, r8
 800ef44:	1419      	asrs	r1, r3, #16
 800ef46:	454e      	cmp	r6, r9
 800ef48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ef4c:	f84a 3b04 	str.w	r3, [sl], #4
 800ef50:	d8e8      	bhi.n	800ef24 <__mdiff+0x80>
 800ef52:	1b33      	subs	r3, r6, r4
 800ef54:	3b15      	subs	r3, #21
 800ef56:	f023 0303 	bic.w	r3, r3, #3
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	3415      	adds	r4, #21
 800ef5e:	42a6      	cmp	r6, r4
 800ef60:	bf38      	it	cc
 800ef62:	2304      	movcc	r3, #4
 800ef64:	441d      	add	r5, r3
 800ef66:	4473      	add	r3, lr
 800ef68:	469e      	mov	lr, r3
 800ef6a:	462e      	mov	r6, r5
 800ef6c:	4566      	cmp	r6, ip
 800ef6e:	d30e      	bcc.n	800ef8e <__mdiff+0xea>
 800ef70:	f10c 0203 	add.w	r2, ip, #3
 800ef74:	1b52      	subs	r2, r2, r5
 800ef76:	f022 0203 	bic.w	r2, r2, #3
 800ef7a:	3d03      	subs	r5, #3
 800ef7c:	45ac      	cmp	ip, r5
 800ef7e:	bf38      	it	cc
 800ef80:	2200      	movcc	r2, #0
 800ef82:	4413      	add	r3, r2
 800ef84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ef88:	b17a      	cbz	r2, 800efaa <__mdiff+0x106>
 800ef8a:	6107      	str	r7, [r0, #16]
 800ef8c:	e7a4      	b.n	800eed8 <__mdiff+0x34>
 800ef8e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ef92:	fa11 f288 	uxtah	r2, r1, r8
 800ef96:	1414      	asrs	r4, r2, #16
 800ef98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ef9c:	b292      	uxth	r2, r2
 800ef9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800efa2:	f84e 2b04 	str.w	r2, [lr], #4
 800efa6:	1421      	asrs	r1, r4, #16
 800efa8:	e7e0      	b.n	800ef6c <__mdiff+0xc8>
 800efaa:	3f01      	subs	r7, #1
 800efac:	e7ea      	b.n	800ef84 <__mdiff+0xe0>
 800efae:	bf00      	nop
 800efb0:	08011266 	.word	0x08011266
 800efb4:	080112d7 	.word	0x080112d7

0800efb8 <__ulp>:
 800efb8:	b082      	sub	sp, #8
 800efba:	ed8d 0b00 	vstr	d0, [sp]
 800efbe:	9a01      	ldr	r2, [sp, #4]
 800efc0:	4b0f      	ldr	r3, [pc, #60]	; (800f000 <__ulp+0x48>)
 800efc2:	4013      	ands	r3, r2
 800efc4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800efc8:	2b00      	cmp	r3, #0
 800efca:	dc08      	bgt.n	800efde <__ulp+0x26>
 800efcc:	425b      	negs	r3, r3
 800efce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800efd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800efd6:	da04      	bge.n	800efe2 <__ulp+0x2a>
 800efd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800efdc:	4113      	asrs	r3, r2
 800efde:	2200      	movs	r2, #0
 800efe0:	e008      	b.n	800eff4 <__ulp+0x3c>
 800efe2:	f1a2 0314 	sub.w	r3, r2, #20
 800efe6:	2b1e      	cmp	r3, #30
 800efe8:	bfda      	itte	le
 800efea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800efee:	40da      	lsrle	r2, r3
 800eff0:	2201      	movgt	r2, #1
 800eff2:	2300      	movs	r3, #0
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	ec41 0b10 	vmov	d0, r0, r1
 800effc:	b002      	add	sp, #8
 800effe:	4770      	bx	lr
 800f000:	7ff00000 	.word	0x7ff00000

0800f004 <__b2d>:
 800f004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f008:	6906      	ldr	r6, [r0, #16]
 800f00a:	f100 0814 	add.w	r8, r0, #20
 800f00e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f012:	1f37      	subs	r7, r6, #4
 800f014:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f018:	4610      	mov	r0, r2
 800f01a:	f7ff fd53 	bl	800eac4 <__hi0bits>
 800f01e:	f1c0 0320 	rsb	r3, r0, #32
 800f022:	280a      	cmp	r0, #10
 800f024:	600b      	str	r3, [r1, #0]
 800f026:	491b      	ldr	r1, [pc, #108]	; (800f094 <__b2d+0x90>)
 800f028:	dc15      	bgt.n	800f056 <__b2d+0x52>
 800f02a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f02e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f032:	45b8      	cmp	r8, r7
 800f034:	ea43 0501 	orr.w	r5, r3, r1
 800f038:	bf34      	ite	cc
 800f03a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f03e:	2300      	movcs	r3, #0
 800f040:	3015      	adds	r0, #21
 800f042:	fa02 f000 	lsl.w	r0, r2, r0
 800f046:	fa23 f30c 	lsr.w	r3, r3, ip
 800f04a:	4303      	orrs	r3, r0
 800f04c:	461c      	mov	r4, r3
 800f04e:	ec45 4b10 	vmov	d0, r4, r5
 800f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f056:	45b8      	cmp	r8, r7
 800f058:	bf3a      	itte	cc
 800f05a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f05e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f062:	2300      	movcs	r3, #0
 800f064:	380b      	subs	r0, #11
 800f066:	d012      	beq.n	800f08e <__b2d+0x8a>
 800f068:	f1c0 0120 	rsb	r1, r0, #32
 800f06c:	fa23 f401 	lsr.w	r4, r3, r1
 800f070:	4082      	lsls	r2, r0
 800f072:	4322      	orrs	r2, r4
 800f074:	4547      	cmp	r7, r8
 800f076:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f07a:	bf8c      	ite	hi
 800f07c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f080:	2200      	movls	r2, #0
 800f082:	4083      	lsls	r3, r0
 800f084:	40ca      	lsrs	r2, r1
 800f086:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f08a:	4313      	orrs	r3, r2
 800f08c:	e7de      	b.n	800f04c <__b2d+0x48>
 800f08e:	ea42 0501 	orr.w	r5, r2, r1
 800f092:	e7db      	b.n	800f04c <__b2d+0x48>
 800f094:	3ff00000 	.word	0x3ff00000

0800f098 <__d2b>:
 800f098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f09c:	460f      	mov	r7, r1
 800f09e:	2101      	movs	r1, #1
 800f0a0:	ec59 8b10 	vmov	r8, r9, d0
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	f7ff fc1b 	bl	800e8e0 <_Balloc>
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	b930      	cbnz	r0, 800f0bc <__d2b+0x24>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	4b24      	ldr	r3, [pc, #144]	; (800f144 <__d2b+0xac>)
 800f0b2:	4825      	ldr	r0, [pc, #148]	; (800f148 <__d2b+0xb0>)
 800f0b4:	f240 310f 	movw	r1, #783	; 0x30f
 800f0b8:	f000 fd42 	bl	800fb40 <__assert_func>
 800f0bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0c4:	bb2d      	cbnz	r5, 800f112 <__d2b+0x7a>
 800f0c6:	9301      	str	r3, [sp, #4]
 800f0c8:	f1b8 0300 	subs.w	r3, r8, #0
 800f0cc:	d026      	beq.n	800f11c <__d2b+0x84>
 800f0ce:	4668      	mov	r0, sp
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	f7ff fd17 	bl	800eb04 <__lo0bits>
 800f0d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0da:	b1e8      	cbz	r0, 800f118 <__d2b+0x80>
 800f0dc:	f1c0 0320 	rsb	r3, r0, #32
 800f0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0e4:	430b      	orrs	r3, r1
 800f0e6:	40c2      	lsrs	r2, r0
 800f0e8:	6163      	str	r3, [r4, #20]
 800f0ea:	9201      	str	r2, [sp, #4]
 800f0ec:	9b01      	ldr	r3, [sp, #4]
 800f0ee:	61a3      	str	r3, [r4, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	bf14      	ite	ne
 800f0f4:	2202      	movne	r2, #2
 800f0f6:	2201      	moveq	r2, #1
 800f0f8:	6122      	str	r2, [r4, #16]
 800f0fa:	b1bd      	cbz	r5, 800f12c <__d2b+0x94>
 800f0fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f100:	4405      	add	r5, r0
 800f102:	603d      	str	r5, [r7, #0]
 800f104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f108:	6030      	str	r0, [r6, #0]
 800f10a:	4620      	mov	r0, r4
 800f10c:	b003      	add	sp, #12
 800f10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f116:	e7d6      	b.n	800f0c6 <__d2b+0x2e>
 800f118:	6161      	str	r1, [r4, #20]
 800f11a:	e7e7      	b.n	800f0ec <__d2b+0x54>
 800f11c:	a801      	add	r0, sp, #4
 800f11e:	f7ff fcf1 	bl	800eb04 <__lo0bits>
 800f122:	9b01      	ldr	r3, [sp, #4]
 800f124:	6163      	str	r3, [r4, #20]
 800f126:	3020      	adds	r0, #32
 800f128:	2201      	movs	r2, #1
 800f12a:	e7e5      	b.n	800f0f8 <__d2b+0x60>
 800f12c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f130:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f134:	6038      	str	r0, [r7, #0]
 800f136:	6918      	ldr	r0, [r3, #16]
 800f138:	f7ff fcc4 	bl	800eac4 <__hi0bits>
 800f13c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f140:	e7e2      	b.n	800f108 <__d2b+0x70>
 800f142:	bf00      	nop
 800f144:	08011266 	.word	0x08011266
 800f148:	080112d7 	.word	0x080112d7

0800f14c <__ratio>:
 800f14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f150:	4688      	mov	r8, r1
 800f152:	4669      	mov	r1, sp
 800f154:	4681      	mov	r9, r0
 800f156:	f7ff ff55 	bl	800f004 <__b2d>
 800f15a:	a901      	add	r1, sp, #4
 800f15c:	4640      	mov	r0, r8
 800f15e:	ec55 4b10 	vmov	r4, r5, d0
 800f162:	f7ff ff4f 	bl	800f004 <__b2d>
 800f166:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f16a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f16e:	eba3 0c02 	sub.w	ip, r3, r2
 800f172:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f176:	1a9b      	subs	r3, r3, r2
 800f178:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f17c:	ec51 0b10 	vmov	r0, r1, d0
 800f180:	2b00      	cmp	r3, #0
 800f182:	bfd6      	itet	le
 800f184:	460a      	movle	r2, r1
 800f186:	462a      	movgt	r2, r5
 800f188:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f18c:	468b      	mov	fp, r1
 800f18e:	462f      	mov	r7, r5
 800f190:	bfd4      	ite	le
 800f192:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f196:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f19a:	4620      	mov	r0, r4
 800f19c:	ee10 2a10 	vmov	r2, s0
 800f1a0:	465b      	mov	r3, fp
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 fb6a 	bl	800087c <__aeabi_ddiv>
 800f1a8:	ec41 0b10 	vmov	d0, r0, r1
 800f1ac:	b003      	add	sp, #12
 800f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1b2 <__copybits>:
 800f1b2:	3901      	subs	r1, #1
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	1149      	asrs	r1, r1, #5
 800f1b8:	6914      	ldr	r4, [r2, #16]
 800f1ba:	3101      	adds	r1, #1
 800f1bc:	f102 0314 	add.w	r3, r2, #20
 800f1c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f1c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f1c8:	1f05      	subs	r5, r0, #4
 800f1ca:	42a3      	cmp	r3, r4
 800f1cc:	d30c      	bcc.n	800f1e8 <__copybits+0x36>
 800f1ce:	1aa3      	subs	r3, r4, r2
 800f1d0:	3b11      	subs	r3, #17
 800f1d2:	f023 0303 	bic.w	r3, r3, #3
 800f1d6:	3211      	adds	r2, #17
 800f1d8:	42a2      	cmp	r2, r4
 800f1da:	bf88      	it	hi
 800f1dc:	2300      	movhi	r3, #0
 800f1de:	4418      	add	r0, r3
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4288      	cmp	r0, r1
 800f1e4:	d305      	bcc.n	800f1f2 <__copybits+0x40>
 800f1e6:	bd70      	pop	{r4, r5, r6, pc}
 800f1e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f1ec:	f845 6f04 	str.w	r6, [r5, #4]!
 800f1f0:	e7eb      	b.n	800f1ca <__copybits+0x18>
 800f1f2:	f840 3b04 	str.w	r3, [r0], #4
 800f1f6:	e7f4      	b.n	800f1e2 <__copybits+0x30>

0800f1f8 <__any_on>:
 800f1f8:	f100 0214 	add.w	r2, r0, #20
 800f1fc:	6900      	ldr	r0, [r0, #16]
 800f1fe:	114b      	asrs	r3, r1, #5
 800f200:	4298      	cmp	r0, r3
 800f202:	b510      	push	{r4, lr}
 800f204:	db11      	blt.n	800f22a <__any_on+0x32>
 800f206:	dd0a      	ble.n	800f21e <__any_on+0x26>
 800f208:	f011 011f 	ands.w	r1, r1, #31
 800f20c:	d007      	beq.n	800f21e <__any_on+0x26>
 800f20e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f212:	fa24 f001 	lsr.w	r0, r4, r1
 800f216:	fa00 f101 	lsl.w	r1, r0, r1
 800f21a:	428c      	cmp	r4, r1
 800f21c:	d10b      	bne.n	800f236 <__any_on+0x3e>
 800f21e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f222:	4293      	cmp	r3, r2
 800f224:	d803      	bhi.n	800f22e <__any_on+0x36>
 800f226:	2000      	movs	r0, #0
 800f228:	bd10      	pop	{r4, pc}
 800f22a:	4603      	mov	r3, r0
 800f22c:	e7f7      	b.n	800f21e <__any_on+0x26>
 800f22e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f232:	2900      	cmp	r1, #0
 800f234:	d0f5      	beq.n	800f222 <__any_on+0x2a>
 800f236:	2001      	movs	r0, #1
 800f238:	e7f6      	b.n	800f228 <__any_on+0x30>

0800f23a <_malloc_usable_size_r>:
 800f23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f23e:	1f18      	subs	r0, r3, #4
 800f240:	2b00      	cmp	r3, #0
 800f242:	bfbc      	itt	lt
 800f244:	580b      	ldrlt	r3, [r1, r0]
 800f246:	18c0      	addlt	r0, r0, r3
 800f248:	4770      	bx	lr
	...

0800f24c <_strtol_l.constprop.0>:
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f252:	d001      	beq.n	800f258 <_strtol_l.constprop.0+0xc>
 800f254:	2b24      	cmp	r3, #36	; 0x24
 800f256:	d906      	bls.n	800f266 <_strtol_l.constprop.0+0x1a>
 800f258:	f7fe f8c4 	bl	800d3e4 <__errno>
 800f25c:	2316      	movs	r3, #22
 800f25e:	6003      	str	r3, [r0, #0]
 800f260:	2000      	movs	r0, #0
 800f262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f266:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f34c <_strtol_l.constprop.0+0x100>
 800f26a:	460d      	mov	r5, r1
 800f26c:	462e      	mov	r6, r5
 800f26e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f272:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f276:	f017 0708 	ands.w	r7, r7, #8
 800f27a:	d1f7      	bne.n	800f26c <_strtol_l.constprop.0+0x20>
 800f27c:	2c2d      	cmp	r4, #45	; 0x2d
 800f27e:	d132      	bne.n	800f2e6 <_strtol_l.constprop.0+0x9a>
 800f280:	782c      	ldrb	r4, [r5, #0]
 800f282:	2701      	movs	r7, #1
 800f284:	1cb5      	adds	r5, r6, #2
 800f286:	2b00      	cmp	r3, #0
 800f288:	d05b      	beq.n	800f342 <_strtol_l.constprop.0+0xf6>
 800f28a:	2b10      	cmp	r3, #16
 800f28c:	d109      	bne.n	800f2a2 <_strtol_l.constprop.0+0x56>
 800f28e:	2c30      	cmp	r4, #48	; 0x30
 800f290:	d107      	bne.n	800f2a2 <_strtol_l.constprop.0+0x56>
 800f292:	782c      	ldrb	r4, [r5, #0]
 800f294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f298:	2c58      	cmp	r4, #88	; 0x58
 800f29a:	d14d      	bne.n	800f338 <_strtol_l.constprop.0+0xec>
 800f29c:	786c      	ldrb	r4, [r5, #1]
 800f29e:	2310      	movs	r3, #16
 800f2a0:	3502      	adds	r5, #2
 800f2a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f2a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f2aa:	f04f 0e00 	mov.w	lr, #0
 800f2ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800f2b2:	4676      	mov	r6, lr
 800f2b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800f2b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f2bc:	f1bc 0f09 	cmp.w	ip, #9
 800f2c0:	d816      	bhi.n	800f2f0 <_strtol_l.constprop.0+0xa4>
 800f2c2:	4664      	mov	r4, ip
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	dd24      	ble.n	800f312 <_strtol_l.constprop.0+0xc6>
 800f2c8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f2cc:	d008      	beq.n	800f2e0 <_strtol_l.constprop.0+0x94>
 800f2ce:	45b1      	cmp	r9, r6
 800f2d0:	d31c      	bcc.n	800f30c <_strtol_l.constprop.0+0xc0>
 800f2d2:	d101      	bne.n	800f2d8 <_strtol_l.constprop.0+0x8c>
 800f2d4:	45a2      	cmp	sl, r4
 800f2d6:	db19      	blt.n	800f30c <_strtol_l.constprop.0+0xc0>
 800f2d8:	fb06 4603 	mla	r6, r6, r3, r4
 800f2dc:	f04f 0e01 	mov.w	lr, #1
 800f2e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2e4:	e7e8      	b.n	800f2b8 <_strtol_l.constprop.0+0x6c>
 800f2e6:	2c2b      	cmp	r4, #43	; 0x2b
 800f2e8:	bf04      	itt	eq
 800f2ea:	782c      	ldrbeq	r4, [r5, #0]
 800f2ec:	1cb5      	addeq	r5, r6, #2
 800f2ee:	e7ca      	b.n	800f286 <_strtol_l.constprop.0+0x3a>
 800f2f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f2f4:	f1bc 0f19 	cmp.w	ip, #25
 800f2f8:	d801      	bhi.n	800f2fe <_strtol_l.constprop.0+0xb2>
 800f2fa:	3c37      	subs	r4, #55	; 0x37
 800f2fc:	e7e2      	b.n	800f2c4 <_strtol_l.constprop.0+0x78>
 800f2fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f302:	f1bc 0f19 	cmp.w	ip, #25
 800f306:	d804      	bhi.n	800f312 <_strtol_l.constprop.0+0xc6>
 800f308:	3c57      	subs	r4, #87	; 0x57
 800f30a:	e7db      	b.n	800f2c4 <_strtol_l.constprop.0+0x78>
 800f30c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f310:	e7e6      	b.n	800f2e0 <_strtol_l.constprop.0+0x94>
 800f312:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f316:	d105      	bne.n	800f324 <_strtol_l.constprop.0+0xd8>
 800f318:	2322      	movs	r3, #34	; 0x22
 800f31a:	6003      	str	r3, [r0, #0]
 800f31c:	4646      	mov	r6, r8
 800f31e:	b942      	cbnz	r2, 800f332 <_strtol_l.constprop.0+0xe6>
 800f320:	4630      	mov	r0, r6
 800f322:	e79e      	b.n	800f262 <_strtol_l.constprop.0+0x16>
 800f324:	b107      	cbz	r7, 800f328 <_strtol_l.constprop.0+0xdc>
 800f326:	4276      	negs	r6, r6
 800f328:	2a00      	cmp	r2, #0
 800f32a:	d0f9      	beq.n	800f320 <_strtol_l.constprop.0+0xd4>
 800f32c:	f1be 0f00 	cmp.w	lr, #0
 800f330:	d000      	beq.n	800f334 <_strtol_l.constprop.0+0xe8>
 800f332:	1e69      	subs	r1, r5, #1
 800f334:	6011      	str	r1, [r2, #0]
 800f336:	e7f3      	b.n	800f320 <_strtol_l.constprop.0+0xd4>
 800f338:	2430      	movs	r4, #48	; 0x30
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d1b1      	bne.n	800f2a2 <_strtol_l.constprop.0+0x56>
 800f33e:	2308      	movs	r3, #8
 800f340:	e7af      	b.n	800f2a2 <_strtol_l.constprop.0+0x56>
 800f342:	2c30      	cmp	r4, #48	; 0x30
 800f344:	d0a5      	beq.n	800f292 <_strtol_l.constprop.0+0x46>
 800f346:	230a      	movs	r3, #10
 800f348:	e7ab      	b.n	800f2a2 <_strtol_l.constprop.0+0x56>
 800f34a:	bf00      	nop
 800f34c:	080110a9 	.word	0x080110a9

0800f350 <_strtol_r>:
 800f350:	f7ff bf7c 	b.w	800f24c <_strtol_l.constprop.0>

0800f354 <__ascii_wctomb>:
 800f354:	b149      	cbz	r1, 800f36a <__ascii_wctomb+0x16>
 800f356:	2aff      	cmp	r2, #255	; 0xff
 800f358:	bf85      	ittet	hi
 800f35a:	238a      	movhi	r3, #138	; 0x8a
 800f35c:	6003      	strhi	r3, [r0, #0]
 800f35e:	700a      	strbls	r2, [r1, #0]
 800f360:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f364:	bf98      	it	ls
 800f366:	2001      	movls	r0, #1
 800f368:	4770      	bx	lr
 800f36a:	4608      	mov	r0, r1
 800f36c:	4770      	bx	lr

0800f36e <__ssputs_r>:
 800f36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f372:	688e      	ldr	r6, [r1, #8]
 800f374:	461f      	mov	r7, r3
 800f376:	42be      	cmp	r6, r7
 800f378:	680b      	ldr	r3, [r1, #0]
 800f37a:	4682      	mov	sl, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	4690      	mov	r8, r2
 800f380:	d82c      	bhi.n	800f3dc <__ssputs_r+0x6e>
 800f382:	898a      	ldrh	r2, [r1, #12]
 800f384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f388:	d026      	beq.n	800f3d8 <__ssputs_r+0x6a>
 800f38a:	6965      	ldr	r5, [r4, #20]
 800f38c:	6909      	ldr	r1, [r1, #16]
 800f38e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f392:	eba3 0901 	sub.w	r9, r3, r1
 800f396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f39a:	1c7b      	adds	r3, r7, #1
 800f39c:	444b      	add	r3, r9
 800f39e:	106d      	asrs	r5, r5, #1
 800f3a0:	429d      	cmp	r5, r3
 800f3a2:	bf38      	it	cc
 800f3a4:	461d      	movcc	r5, r3
 800f3a6:	0553      	lsls	r3, r2, #21
 800f3a8:	d527      	bpl.n	800f3fa <__ssputs_r+0x8c>
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	f7fb ffd0 	bl	800b350 <_malloc_r>
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	b360      	cbz	r0, 800f40e <__ssputs_r+0xa0>
 800f3b4:	6921      	ldr	r1, [r4, #16]
 800f3b6:	464a      	mov	r2, r9
 800f3b8:	f7fe f841 	bl	800d43e <memcpy>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c6:	81a3      	strh	r3, [r4, #12]
 800f3c8:	6126      	str	r6, [r4, #16]
 800f3ca:	6165      	str	r5, [r4, #20]
 800f3cc:	444e      	add	r6, r9
 800f3ce:	eba5 0509 	sub.w	r5, r5, r9
 800f3d2:	6026      	str	r6, [r4, #0]
 800f3d4:	60a5      	str	r5, [r4, #8]
 800f3d6:	463e      	mov	r6, r7
 800f3d8:	42be      	cmp	r6, r7
 800f3da:	d900      	bls.n	800f3de <__ssputs_r+0x70>
 800f3dc:	463e      	mov	r6, r7
 800f3de:	6820      	ldr	r0, [r4, #0]
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	4641      	mov	r1, r8
 800f3e4:	f000 fb70 	bl	800fac8 <memmove>
 800f3e8:	68a3      	ldr	r3, [r4, #8]
 800f3ea:	1b9b      	subs	r3, r3, r6
 800f3ec:	60a3      	str	r3, [r4, #8]
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	4433      	add	r3, r6
 800f3f2:	6023      	str	r3, [r4, #0]
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	f7fc f83c 	bl	800b478 <_realloc_r>
 800f400:	4606      	mov	r6, r0
 800f402:	2800      	cmp	r0, #0
 800f404:	d1e0      	bne.n	800f3c8 <__ssputs_r+0x5a>
 800f406:	6921      	ldr	r1, [r4, #16]
 800f408:	4650      	mov	r0, sl
 800f40a:	f7fe feb3 	bl	800e174 <_free_r>
 800f40e:	230c      	movs	r3, #12
 800f410:	f8ca 3000 	str.w	r3, [sl]
 800f414:	89a3      	ldrh	r3, [r4, #12]
 800f416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f420:	e7e9      	b.n	800f3f6 <__ssputs_r+0x88>
	...

0800f424 <_svfiprintf_r>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	4698      	mov	r8, r3
 800f42a:	898b      	ldrh	r3, [r1, #12]
 800f42c:	061b      	lsls	r3, r3, #24
 800f42e:	b09d      	sub	sp, #116	; 0x74
 800f430:	4607      	mov	r7, r0
 800f432:	460d      	mov	r5, r1
 800f434:	4614      	mov	r4, r2
 800f436:	d50e      	bpl.n	800f456 <_svfiprintf_r+0x32>
 800f438:	690b      	ldr	r3, [r1, #16]
 800f43a:	b963      	cbnz	r3, 800f456 <_svfiprintf_r+0x32>
 800f43c:	2140      	movs	r1, #64	; 0x40
 800f43e:	f7fb ff87 	bl	800b350 <_malloc_r>
 800f442:	6028      	str	r0, [r5, #0]
 800f444:	6128      	str	r0, [r5, #16]
 800f446:	b920      	cbnz	r0, 800f452 <_svfiprintf_r+0x2e>
 800f448:	230c      	movs	r3, #12
 800f44a:	603b      	str	r3, [r7, #0]
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f450:	e0d0      	b.n	800f5f4 <_svfiprintf_r+0x1d0>
 800f452:	2340      	movs	r3, #64	; 0x40
 800f454:	616b      	str	r3, [r5, #20]
 800f456:	2300      	movs	r3, #0
 800f458:	9309      	str	r3, [sp, #36]	; 0x24
 800f45a:	2320      	movs	r3, #32
 800f45c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f460:	f8cd 800c 	str.w	r8, [sp, #12]
 800f464:	2330      	movs	r3, #48	; 0x30
 800f466:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f60c <_svfiprintf_r+0x1e8>
 800f46a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f46e:	f04f 0901 	mov.w	r9, #1
 800f472:	4623      	mov	r3, r4
 800f474:	469a      	mov	sl, r3
 800f476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f47a:	b10a      	cbz	r2, 800f480 <_svfiprintf_r+0x5c>
 800f47c:	2a25      	cmp	r2, #37	; 0x25
 800f47e:	d1f9      	bne.n	800f474 <_svfiprintf_r+0x50>
 800f480:	ebba 0b04 	subs.w	fp, sl, r4
 800f484:	d00b      	beq.n	800f49e <_svfiprintf_r+0x7a>
 800f486:	465b      	mov	r3, fp
 800f488:	4622      	mov	r2, r4
 800f48a:	4629      	mov	r1, r5
 800f48c:	4638      	mov	r0, r7
 800f48e:	f7ff ff6e 	bl	800f36e <__ssputs_r>
 800f492:	3001      	adds	r0, #1
 800f494:	f000 80a9 	beq.w	800f5ea <_svfiprintf_r+0x1c6>
 800f498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f49a:	445a      	add	r2, fp
 800f49c:	9209      	str	r2, [sp, #36]	; 0x24
 800f49e:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 80a1 	beq.w	800f5ea <_svfiprintf_r+0x1c6>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4b2:	f10a 0a01 	add.w	sl, sl, #1
 800f4b6:	9304      	str	r3, [sp, #16]
 800f4b8:	9307      	str	r3, [sp, #28]
 800f4ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4be:	931a      	str	r3, [sp, #104]	; 0x68
 800f4c0:	4654      	mov	r4, sl
 800f4c2:	2205      	movs	r2, #5
 800f4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c8:	4850      	ldr	r0, [pc, #320]	; (800f60c <_svfiprintf_r+0x1e8>)
 800f4ca:	f7f0 fe99 	bl	8000200 <memchr>
 800f4ce:	9a04      	ldr	r2, [sp, #16]
 800f4d0:	b9d8      	cbnz	r0, 800f50a <_svfiprintf_r+0xe6>
 800f4d2:	06d0      	lsls	r0, r2, #27
 800f4d4:	bf44      	itt	mi
 800f4d6:	2320      	movmi	r3, #32
 800f4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4dc:	0711      	lsls	r1, r2, #28
 800f4de:	bf44      	itt	mi
 800f4e0:	232b      	movmi	r3, #43	; 0x2b
 800f4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ec:	d015      	beq.n	800f51a <_svfiprintf_r+0xf6>
 800f4ee:	9a07      	ldr	r2, [sp, #28]
 800f4f0:	4654      	mov	r4, sl
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	f04f 0c0a 	mov.w	ip, #10
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4fe:	3b30      	subs	r3, #48	; 0x30
 800f500:	2b09      	cmp	r3, #9
 800f502:	d94d      	bls.n	800f5a0 <_svfiprintf_r+0x17c>
 800f504:	b1b0      	cbz	r0, 800f534 <_svfiprintf_r+0x110>
 800f506:	9207      	str	r2, [sp, #28]
 800f508:	e014      	b.n	800f534 <_svfiprintf_r+0x110>
 800f50a:	eba0 0308 	sub.w	r3, r0, r8
 800f50e:	fa09 f303 	lsl.w	r3, r9, r3
 800f512:	4313      	orrs	r3, r2
 800f514:	9304      	str	r3, [sp, #16]
 800f516:	46a2      	mov	sl, r4
 800f518:	e7d2      	b.n	800f4c0 <_svfiprintf_r+0x9c>
 800f51a:	9b03      	ldr	r3, [sp, #12]
 800f51c:	1d19      	adds	r1, r3, #4
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	9103      	str	r1, [sp, #12]
 800f522:	2b00      	cmp	r3, #0
 800f524:	bfbb      	ittet	lt
 800f526:	425b      	neglt	r3, r3
 800f528:	f042 0202 	orrlt.w	r2, r2, #2
 800f52c:	9307      	strge	r3, [sp, #28]
 800f52e:	9307      	strlt	r3, [sp, #28]
 800f530:	bfb8      	it	lt
 800f532:	9204      	strlt	r2, [sp, #16]
 800f534:	7823      	ldrb	r3, [r4, #0]
 800f536:	2b2e      	cmp	r3, #46	; 0x2e
 800f538:	d10c      	bne.n	800f554 <_svfiprintf_r+0x130>
 800f53a:	7863      	ldrb	r3, [r4, #1]
 800f53c:	2b2a      	cmp	r3, #42	; 0x2a
 800f53e:	d134      	bne.n	800f5aa <_svfiprintf_r+0x186>
 800f540:	9b03      	ldr	r3, [sp, #12]
 800f542:	1d1a      	adds	r2, r3, #4
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	9203      	str	r2, [sp, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	bfb8      	it	lt
 800f54c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f550:	3402      	adds	r4, #2
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f61c <_svfiprintf_r+0x1f8>
 800f558:	7821      	ldrb	r1, [r4, #0]
 800f55a:	2203      	movs	r2, #3
 800f55c:	4650      	mov	r0, sl
 800f55e:	f7f0 fe4f 	bl	8000200 <memchr>
 800f562:	b138      	cbz	r0, 800f574 <_svfiprintf_r+0x150>
 800f564:	9b04      	ldr	r3, [sp, #16]
 800f566:	eba0 000a 	sub.w	r0, r0, sl
 800f56a:	2240      	movs	r2, #64	; 0x40
 800f56c:	4082      	lsls	r2, r0
 800f56e:	4313      	orrs	r3, r2
 800f570:	3401      	adds	r4, #1
 800f572:	9304      	str	r3, [sp, #16]
 800f574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f578:	4825      	ldr	r0, [pc, #148]	; (800f610 <_svfiprintf_r+0x1ec>)
 800f57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f57e:	2206      	movs	r2, #6
 800f580:	f7f0 fe3e 	bl	8000200 <memchr>
 800f584:	2800      	cmp	r0, #0
 800f586:	d038      	beq.n	800f5fa <_svfiprintf_r+0x1d6>
 800f588:	4b22      	ldr	r3, [pc, #136]	; (800f614 <_svfiprintf_r+0x1f0>)
 800f58a:	bb1b      	cbnz	r3, 800f5d4 <_svfiprintf_r+0x1b0>
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	3307      	adds	r3, #7
 800f590:	f023 0307 	bic.w	r3, r3, #7
 800f594:	3308      	adds	r3, #8
 800f596:	9303      	str	r3, [sp, #12]
 800f598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59a:	4433      	add	r3, r6
 800f59c:	9309      	str	r3, [sp, #36]	; 0x24
 800f59e:	e768      	b.n	800f472 <_svfiprintf_r+0x4e>
 800f5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	2001      	movs	r0, #1
 800f5a8:	e7a6      	b.n	800f4f8 <_svfiprintf_r+0xd4>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	3401      	adds	r4, #1
 800f5ae:	9305      	str	r3, [sp, #20]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	f04f 0c0a 	mov.w	ip, #10
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5bc:	3a30      	subs	r2, #48	; 0x30
 800f5be:	2a09      	cmp	r2, #9
 800f5c0:	d903      	bls.n	800f5ca <_svfiprintf_r+0x1a6>
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0c6      	beq.n	800f554 <_svfiprintf_r+0x130>
 800f5c6:	9105      	str	r1, [sp, #20]
 800f5c8:	e7c4      	b.n	800f554 <_svfiprintf_r+0x130>
 800f5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e7f0      	b.n	800f5b6 <_svfiprintf_r+0x192>
 800f5d4:	ab03      	add	r3, sp, #12
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	462a      	mov	r2, r5
 800f5da:	4b0f      	ldr	r3, [pc, #60]	; (800f618 <_svfiprintf_r+0x1f4>)
 800f5dc:	a904      	add	r1, sp, #16
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f7fc fe38 	bl	800c254 <_printf_float>
 800f5e4:	1c42      	adds	r2, r0, #1
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	d1d6      	bne.n	800f598 <_svfiprintf_r+0x174>
 800f5ea:	89ab      	ldrh	r3, [r5, #12]
 800f5ec:	065b      	lsls	r3, r3, #25
 800f5ee:	f53f af2d 	bmi.w	800f44c <_svfiprintf_r+0x28>
 800f5f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5f4:	b01d      	add	sp, #116	; 0x74
 800f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fa:	ab03      	add	r3, sp, #12
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	462a      	mov	r2, r5
 800f600:	4b05      	ldr	r3, [pc, #20]	; (800f618 <_svfiprintf_r+0x1f4>)
 800f602:	a904      	add	r1, sp, #16
 800f604:	4638      	mov	r0, r7
 800f606:	f7fd f8c9 	bl	800c79c <_printf_i>
 800f60a:	e7eb      	b.n	800f5e4 <_svfiprintf_r+0x1c0>
 800f60c:	0801142c 	.word	0x0801142c
 800f610:	08011436 	.word	0x08011436
 800f614:	0800c255 	.word	0x0800c255
 800f618:	0800f36f 	.word	0x0800f36f
 800f61c:	08011432 	.word	0x08011432

0800f620 <__sfputc_r>:
 800f620:	6893      	ldr	r3, [r2, #8]
 800f622:	3b01      	subs	r3, #1
 800f624:	2b00      	cmp	r3, #0
 800f626:	b410      	push	{r4}
 800f628:	6093      	str	r3, [r2, #8]
 800f62a:	da08      	bge.n	800f63e <__sfputc_r+0x1e>
 800f62c:	6994      	ldr	r4, [r2, #24]
 800f62e:	42a3      	cmp	r3, r4
 800f630:	db01      	blt.n	800f636 <__sfputc_r+0x16>
 800f632:	290a      	cmp	r1, #10
 800f634:	d103      	bne.n	800f63e <__sfputc_r+0x1e>
 800f636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f63a:	f7fd bd74 	b.w	800d126 <__swbuf_r>
 800f63e:	6813      	ldr	r3, [r2, #0]
 800f640:	1c58      	adds	r0, r3, #1
 800f642:	6010      	str	r0, [r2, #0]
 800f644:	7019      	strb	r1, [r3, #0]
 800f646:	4608      	mov	r0, r1
 800f648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <__sfputs_r>:
 800f64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f650:	4606      	mov	r6, r0
 800f652:	460f      	mov	r7, r1
 800f654:	4614      	mov	r4, r2
 800f656:	18d5      	adds	r5, r2, r3
 800f658:	42ac      	cmp	r4, r5
 800f65a:	d101      	bne.n	800f660 <__sfputs_r+0x12>
 800f65c:	2000      	movs	r0, #0
 800f65e:	e007      	b.n	800f670 <__sfputs_r+0x22>
 800f660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f664:	463a      	mov	r2, r7
 800f666:	4630      	mov	r0, r6
 800f668:	f7ff ffda 	bl	800f620 <__sfputc_r>
 800f66c:	1c43      	adds	r3, r0, #1
 800f66e:	d1f3      	bne.n	800f658 <__sfputs_r+0xa>
 800f670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f674 <_vfiprintf_r>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	460d      	mov	r5, r1
 800f67a:	b09d      	sub	sp, #116	; 0x74
 800f67c:	4614      	mov	r4, r2
 800f67e:	4698      	mov	r8, r3
 800f680:	4606      	mov	r6, r0
 800f682:	b118      	cbz	r0, 800f68c <_vfiprintf_r+0x18>
 800f684:	6a03      	ldr	r3, [r0, #32]
 800f686:	b90b      	cbnz	r3, 800f68c <_vfiprintf_r+0x18>
 800f688:	f7fd fc46 	bl	800cf18 <__sinit>
 800f68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f68e:	07d9      	lsls	r1, r3, #31
 800f690:	d405      	bmi.n	800f69e <_vfiprintf_r+0x2a>
 800f692:	89ab      	ldrh	r3, [r5, #12]
 800f694:	059a      	lsls	r2, r3, #22
 800f696:	d402      	bmi.n	800f69e <_vfiprintf_r+0x2a>
 800f698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f69a:	f7fd fece 	bl	800d43a <__retarget_lock_acquire_recursive>
 800f69e:	89ab      	ldrh	r3, [r5, #12]
 800f6a0:	071b      	lsls	r3, r3, #28
 800f6a2:	d501      	bpl.n	800f6a8 <_vfiprintf_r+0x34>
 800f6a4:	692b      	ldr	r3, [r5, #16]
 800f6a6:	b99b      	cbnz	r3, 800f6d0 <_vfiprintf_r+0x5c>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	f7fd fd78 	bl	800d1a0 <__swsetup_r>
 800f6b0:	b170      	cbz	r0, 800f6d0 <_vfiprintf_r+0x5c>
 800f6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6b4:	07dc      	lsls	r4, r3, #31
 800f6b6:	d504      	bpl.n	800f6c2 <_vfiprintf_r+0x4e>
 800f6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6bc:	b01d      	add	sp, #116	; 0x74
 800f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c2:	89ab      	ldrh	r3, [r5, #12]
 800f6c4:	0598      	lsls	r0, r3, #22
 800f6c6:	d4f7      	bmi.n	800f6b8 <_vfiprintf_r+0x44>
 800f6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ca:	f7fd feb7 	bl	800d43c <__retarget_lock_release_recursive>
 800f6ce:	e7f3      	b.n	800f6b8 <_vfiprintf_r+0x44>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d4:	2320      	movs	r3, #32
 800f6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6de:	2330      	movs	r3, #48	; 0x30
 800f6e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f894 <_vfiprintf_r+0x220>
 800f6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6e8:	f04f 0901 	mov.w	r9, #1
 800f6ec:	4623      	mov	r3, r4
 800f6ee:	469a      	mov	sl, r3
 800f6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f4:	b10a      	cbz	r2, 800f6fa <_vfiprintf_r+0x86>
 800f6f6:	2a25      	cmp	r2, #37	; 0x25
 800f6f8:	d1f9      	bne.n	800f6ee <_vfiprintf_r+0x7a>
 800f6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f6fe:	d00b      	beq.n	800f718 <_vfiprintf_r+0xa4>
 800f700:	465b      	mov	r3, fp
 800f702:	4622      	mov	r2, r4
 800f704:	4629      	mov	r1, r5
 800f706:	4630      	mov	r0, r6
 800f708:	f7ff ffa1 	bl	800f64e <__sfputs_r>
 800f70c:	3001      	adds	r0, #1
 800f70e:	f000 80a9 	beq.w	800f864 <_vfiprintf_r+0x1f0>
 800f712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f714:	445a      	add	r2, fp
 800f716:	9209      	str	r2, [sp, #36]	; 0x24
 800f718:	f89a 3000 	ldrb.w	r3, [sl]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 80a1 	beq.w	800f864 <_vfiprintf_r+0x1f0>
 800f722:	2300      	movs	r3, #0
 800f724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f72c:	f10a 0a01 	add.w	sl, sl, #1
 800f730:	9304      	str	r3, [sp, #16]
 800f732:	9307      	str	r3, [sp, #28]
 800f734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f738:	931a      	str	r3, [sp, #104]	; 0x68
 800f73a:	4654      	mov	r4, sl
 800f73c:	2205      	movs	r2, #5
 800f73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f742:	4854      	ldr	r0, [pc, #336]	; (800f894 <_vfiprintf_r+0x220>)
 800f744:	f7f0 fd5c 	bl	8000200 <memchr>
 800f748:	9a04      	ldr	r2, [sp, #16]
 800f74a:	b9d8      	cbnz	r0, 800f784 <_vfiprintf_r+0x110>
 800f74c:	06d1      	lsls	r1, r2, #27
 800f74e:	bf44      	itt	mi
 800f750:	2320      	movmi	r3, #32
 800f752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f756:	0713      	lsls	r3, r2, #28
 800f758:	bf44      	itt	mi
 800f75a:	232b      	movmi	r3, #43	; 0x2b
 800f75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f760:	f89a 3000 	ldrb.w	r3, [sl]
 800f764:	2b2a      	cmp	r3, #42	; 0x2a
 800f766:	d015      	beq.n	800f794 <_vfiprintf_r+0x120>
 800f768:	9a07      	ldr	r2, [sp, #28]
 800f76a:	4654      	mov	r4, sl
 800f76c:	2000      	movs	r0, #0
 800f76e:	f04f 0c0a 	mov.w	ip, #10
 800f772:	4621      	mov	r1, r4
 800f774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f778:	3b30      	subs	r3, #48	; 0x30
 800f77a:	2b09      	cmp	r3, #9
 800f77c:	d94d      	bls.n	800f81a <_vfiprintf_r+0x1a6>
 800f77e:	b1b0      	cbz	r0, 800f7ae <_vfiprintf_r+0x13a>
 800f780:	9207      	str	r2, [sp, #28]
 800f782:	e014      	b.n	800f7ae <_vfiprintf_r+0x13a>
 800f784:	eba0 0308 	sub.w	r3, r0, r8
 800f788:	fa09 f303 	lsl.w	r3, r9, r3
 800f78c:	4313      	orrs	r3, r2
 800f78e:	9304      	str	r3, [sp, #16]
 800f790:	46a2      	mov	sl, r4
 800f792:	e7d2      	b.n	800f73a <_vfiprintf_r+0xc6>
 800f794:	9b03      	ldr	r3, [sp, #12]
 800f796:	1d19      	adds	r1, r3, #4
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	9103      	str	r1, [sp, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	bfbb      	ittet	lt
 800f7a0:	425b      	neglt	r3, r3
 800f7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f7a6:	9307      	strge	r3, [sp, #28]
 800f7a8:	9307      	strlt	r3, [sp, #28]
 800f7aa:	bfb8      	it	lt
 800f7ac:	9204      	strlt	r2, [sp, #16]
 800f7ae:	7823      	ldrb	r3, [r4, #0]
 800f7b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f7b2:	d10c      	bne.n	800f7ce <_vfiprintf_r+0x15a>
 800f7b4:	7863      	ldrb	r3, [r4, #1]
 800f7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b8:	d134      	bne.n	800f824 <_vfiprintf_r+0x1b0>
 800f7ba:	9b03      	ldr	r3, [sp, #12]
 800f7bc:	1d1a      	adds	r2, r3, #4
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	9203      	str	r2, [sp, #12]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	bfb8      	it	lt
 800f7c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7ca:	3402      	adds	r4, #2
 800f7cc:	9305      	str	r3, [sp, #20]
 800f7ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f8a4 <_vfiprintf_r+0x230>
 800f7d2:	7821      	ldrb	r1, [r4, #0]
 800f7d4:	2203      	movs	r2, #3
 800f7d6:	4650      	mov	r0, sl
 800f7d8:	f7f0 fd12 	bl	8000200 <memchr>
 800f7dc:	b138      	cbz	r0, 800f7ee <_vfiprintf_r+0x17a>
 800f7de:	9b04      	ldr	r3, [sp, #16]
 800f7e0:	eba0 000a 	sub.w	r0, r0, sl
 800f7e4:	2240      	movs	r2, #64	; 0x40
 800f7e6:	4082      	lsls	r2, r0
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	3401      	adds	r4, #1
 800f7ec:	9304      	str	r3, [sp, #16]
 800f7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f2:	4829      	ldr	r0, [pc, #164]	; (800f898 <_vfiprintf_r+0x224>)
 800f7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7f8:	2206      	movs	r2, #6
 800f7fa:	f7f0 fd01 	bl	8000200 <memchr>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d03f      	beq.n	800f882 <_vfiprintf_r+0x20e>
 800f802:	4b26      	ldr	r3, [pc, #152]	; (800f89c <_vfiprintf_r+0x228>)
 800f804:	bb1b      	cbnz	r3, 800f84e <_vfiprintf_r+0x1da>
 800f806:	9b03      	ldr	r3, [sp, #12]
 800f808:	3307      	adds	r3, #7
 800f80a:	f023 0307 	bic.w	r3, r3, #7
 800f80e:	3308      	adds	r3, #8
 800f810:	9303      	str	r3, [sp, #12]
 800f812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f814:	443b      	add	r3, r7
 800f816:	9309      	str	r3, [sp, #36]	; 0x24
 800f818:	e768      	b.n	800f6ec <_vfiprintf_r+0x78>
 800f81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f81e:	460c      	mov	r4, r1
 800f820:	2001      	movs	r0, #1
 800f822:	e7a6      	b.n	800f772 <_vfiprintf_r+0xfe>
 800f824:	2300      	movs	r3, #0
 800f826:	3401      	adds	r4, #1
 800f828:	9305      	str	r3, [sp, #20]
 800f82a:	4619      	mov	r1, r3
 800f82c:	f04f 0c0a 	mov.w	ip, #10
 800f830:	4620      	mov	r0, r4
 800f832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f836:	3a30      	subs	r2, #48	; 0x30
 800f838:	2a09      	cmp	r2, #9
 800f83a:	d903      	bls.n	800f844 <_vfiprintf_r+0x1d0>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0c6      	beq.n	800f7ce <_vfiprintf_r+0x15a>
 800f840:	9105      	str	r1, [sp, #20]
 800f842:	e7c4      	b.n	800f7ce <_vfiprintf_r+0x15a>
 800f844:	fb0c 2101 	mla	r1, ip, r1, r2
 800f848:	4604      	mov	r4, r0
 800f84a:	2301      	movs	r3, #1
 800f84c:	e7f0      	b.n	800f830 <_vfiprintf_r+0x1bc>
 800f84e:	ab03      	add	r3, sp, #12
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	462a      	mov	r2, r5
 800f854:	4b12      	ldr	r3, [pc, #72]	; (800f8a0 <_vfiprintf_r+0x22c>)
 800f856:	a904      	add	r1, sp, #16
 800f858:	4630      	mov	r0, r6
 800f85a:	f7fc fcfb 	bl	800c254 <_printf_float>
 800f85e:	4607      	mov	r7, r0
 800f860:	1c78      	adds	r0, r7, #1
 800f862:	d1d6      	bne.n	800f812 <_vfiprintf_r+0x19e>
 800f864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f866:	07d9      	lsls	r1, r3, #31
 800f868:	d405      	bmi.n	800f876 <_vfiprintf_r+0x202>
 800f86a:	89ab      	ldrh	r3, [r5, #12]
 800f86c:	059a      	lsls	r2, r3, #22
 800f86e:	d402      	bmi.n	800f876 <_vfiprintf_r+0x202>
 800f870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f872:	f7fd fde3 	bl	800d43c <__retarget_lock_release_recursive>
 800f876:	89ab      	ldrh	r3, [r5, #12]
 800f878:	065b      	lsls	r3, r3, #25
 800f87a:	f53f af1d 	bmi.w	800f6b8 <_vfiprintf_r+0x44>
 800f87e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f880:	e71c      	b.n	800f6bc <_vfiprintf_r+0x48>
 800f882:	ab03      	add	r3, sp, #12
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	462a      	mov	r2, r5
 800f888:	4b05      	ldr	r3, [pc, #20]	; (800f8a0 <_vfiprintf_r+0x22c>)
 800f88a:	a904      	add	r1, sp, #16
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7fc ff85 	bl	800c79c <_printf_i>
 800f892:	e7e4      	b.n	800f85e <_vfiprintf_r+0x1ea>
 800f894:	0801142c 	.word	0x0801142c
 800f898:	08011436 	.word	0x08011436
 800f89c:	0800c255 	.word	0x0800c255
 800f8a0:	0800f64f 	.word	0x0800f64f
 800f8a4:	08011432 	.word	0x08011432

0800f8a8 <__sflush_r>:
 800f8a8:	898a      	ldrh	r2, [r1, #12]
 800f8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	0710      	lsls	r0, r2, #28
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	d458      	bmi.n	800f968 <__sflush_r+0xc0>
 800f8b6:	684b      	ldr	r3, [r1, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dc05      	bgt.n	800f8c8 <__sflush_r+0x20>
 800f8bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dc02      	bgt.n	800f8c8 <__sflush_r+0x20>
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ca:	2e00      	cmp	r6, #0
 800f8cc:	d0f9      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8d4:	682f      	ldr	r7, [r5, #0]
 800f8d6:	6a21      	ldr	r1, [r4, #32]
 800f8d8:	602b      	str	r3, [r5, #0]
 800f8da:	d032      	beq.n	800f942 <__sflush_r+0x9a>
 800f8dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	075a      	lsls	r2, r3, #29
 800f8e2:	d505      	bpl.n	800f8f0 <__sflush_r+0x48>
 800f8e4:	6863      	ldr	r3, [r4, #4]
 800f8e6:	1ac0      	subs	r0, r0, r3
 800f8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8ea:	b10b      	cbz	r3, 800f8f0 <__sflush_r+0x48>
 800f8ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8ee:	1ac0      	subs	r0, r0, r3
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f6:	6a21      	ldr	r1, [r4, #32]
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b0      	blx	r6
 800f8fc:	1c43      	adds	r3, r0, #1
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	d106      	bne.n	800f910 <__sflush_r+0x68>
 800f902:	6829      	ldr	r1, [r5, #0]
 800f904:	291d      	cmp	r1, #29
 800f906:	d82b      	bhi.n	800f960 <__sflush_r+0xb8>
 800f908:	4a29      	ldr	r2, [pc, #164]	; (800f9b0 <__sflush_r+0x108>)
 800f90a:	410a      	asrs	r2, r1
 800f90c:	07d6      	lsls	r6, r2, #31
 800f90e:	d427      	bmi.n	800f960 <__sflush_r+0xb8>
 800f910:	2200      	movs	r2, #0
 800f912:	6062      	str	r2, [r4, #4]
 800f914:	04d9      	lsls	r1, r3, #19
 800f916:	6922      	ldr	r2, [r4, #16]
 800f918:	6022      	str	r2, [r4, #0]
 800f91a:	d504      	bpl.n	800f926 <__sflush_r+0x7e>
 800f91c:	1c42      	adds	r2, r0, #1
 800f91e:	d101      	bne.n	800f924 <__sflush_r+0x7c>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b903      	cbnz	r3, 800f926 <__sflush_r+0x7e>
 800f924:	6560      	str	r0, [r4, #84]	; 0x54
 800f926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f928:	602f      	str	r7, [r5, #0]
 800f92a:	2900      	cmp	r1, #0
 800f92c:	d0c9      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f92e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f932:	4299      	cmp	r1, r3
 800f934:	d002      	beq.n	800f93c <__sflush_r+0x94>
 800f936:	4628      	mov	r0, r5
 800f938:	f7fe fc1c 	bl	800e174 <_free_r>
 800f93c:	2000      	movs	r0, #0
 800f93e:	6360      	str	r0, [r4, #52]	; 0x34
 800f940:	e7c0      	b.n	800f8c4 <__sflush_r+0x1c>
 800f942:	2301      	movs	r3, #1
 800f944:	4628      	mov	r0, r5
 800f946:	47b0      	blx	r6
 800f948:	1c41      	adds	r1, r0, #1
 800f94a:	d1c8      	bne.n	800f8de <__sflush_r+0x36>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d0c5      	beq.n	800f8de <__sflush_r+0x36>
 800f952:	2b1d      	cmp	r3, #29
 800f954:	d001      	beq.n	800f95a <__sflush_r+0xb2>
 800f956:	2b16      	cmp	r3, #22
 800f958:	d101      	bne.n	800f95e <__sflush_r+0xb6>
 800f95a:	602f      	str	r7, [r5, #0]
 800f95c:	e7b1      	b.n	800f8c2 <__sflush_r+0x1a>
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f964:	81a3      	strh	r3, [r4, #12]
 800f966:	e7ad      	b.n	800f8c4 <__sflush_r+0x1c>
 800f968:	690f      	ldr	r7, [r1, #16]
 800f96a:	2f00      	cmp	r7, #0
 800f96c:	d0a9      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f96e:	0793      	lsls	r3, r2, #30
 800f970:	680e      	ldr	r6, [r1, #0]
 800f972:	bf08      	it	eq
 800f974:	694b      	ldreq	r3, [r1, #20]
 800f976:	600f      	str	r7, [r1, #0]
 800f978:	bf18      	it	ne
 800f97a:	2300      	movne	r3, #0
 800f97c:	eba6 0807 	sub.w	r8, r6, r7
 800f980:	608b      	str	r3, [r1, #8]
 800f982:	f1b8 0f00 	cmp.w	r8, #0
 800f986:	dd9c      	ble.n	800f8c2 <__sflush_r+0x1a>
 800f988:	6a21      	ldr	r1, [r4, #32]
 800f98a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f98c:	4643      	mov	r3, r8
 800f98e:	463a      	mov	r2, r7
 800f990:	4628      	mov	r0, r5
 800f992:	47b0      	blx	r6
 800f994:	2800      	cmp	r0, #0
 800f996:	dc06      	bgt.n	800f9a6 <__sflush_r+0xfe>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9a4:	e78e      	b.n	800f8c4 <__sflush_r+0x1c>
 800f9a6:	4407      	add	r7, r0
 800f9a8:	eba8 0800 	sub.w	r8, r8, r0
 800f9ac:	e7e9      	b.n	800f982 <__sflush_r+0xda>
 800f9ae:	bf00      	nop
 800f9b0:	dfbffffe 	.word	0xdfbffffe

0800f9b4 <_fflush_r>:
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	690b      	ldr	r3, [r1, #16]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b913      	cbnz	r3, 800f9c4 <_fflush_r+0x10>
 800f9be:	2500      	movs	r5, #0
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	b118      	cbz	r0, 800f9ce <_fflush_r+0x1a>
 800f9c6:	6a03      	ldr	r3, [r0, #32]
 800f9c8:	b90b      	cbnz	r3, 800f9ce <_fflush_r+0x1a>
 800f9ca:	f7fd faa5 	bl	800cf18 <__sinit>
 800f9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0f3      	beq.n	800f9be <_fflush_r+0xa>
 800f9d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9d8:	07d0      	lsls	r0, r2, #31
 800f9da:	d404      	bmi.n	800f9e6 <_fflush_r+0x32>
 800f9dc:	0599      	lsls	r1, r3, #22
 800f9de:	d402      	bmi.n	800f9e6 <_fflush_r+0x32>
 800f9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9e2:	f7fd fd2a 	bl	800d43a <__retarget_lock_acquire_recursive>
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	f7ff ff5d 	bl	800f8a8 <__sflush_r>
 800f9ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9f0:	07da      	lsls	r2, r3, #31
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	d4e4      	bmi.n	800f9c0 <_fflush_r+0xc>
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	059b      	lsls	r3, r3, #22
 800f9fa:	d4e1      	bmi.n	800f9c0 <_fflush_r+0xc>
 800f9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9fe:	f7fd fd1d 	bl	800d43c <__retarget_lock_release_recursive>
 800fa02:	e7dd      	b.n	800f9c0 <_fflush_r+0xc>

0800fa04 <__swhatbuf_r>:
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	460c      	mov	r4, r1
 800fa08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa0c:	2900      	cmp	r1, #0
 800fa0e:	b096      	sub	sp, #88	; 0x58
 800fa10:	4615      	mov	r5, r2
 800fa12:	461e      	mov	r6, r3
 800fa14:	da0d      	bge.n	800fa32 <__swhatbuf_r+0x2e>
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa1c:	f04f 0100 	mov.w	r1, #0
 800fa20:	bf0c      	ite	eq
 800fa22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fa26:	2340      	movne	r3, #64	; 0x40
 800fa28:	2000      	movs	r0, #0
 800fa2a:	6031      	str	r1, [r6, #0]
 800fa2c:	602b      	str	r3, [r5, #0]
 800fa2e:	b016      	add	sp, #88	; 0x58
 800fa30:	bd70      	pop	{r4, r5, r6, pc}
 800fa32:	466a      	mov	r2, sp
 800fa34:	f000 f862 	bl	800fafc <_fstat_r>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	dbec      	blt.n	800fa16 <__swhatbuf_r+0x12>
 800fa3c:	9901      	ldr	r1, [sp, #4]
 800fa3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fa42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fa46:	4259      	negs	r1, r3
 800fa48:	4159      	adcs	r1, r3
 800fa4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa4e:	e7eb      	b.n	800fa28 <__swhatbuf_r+0x24>

0800fa50 <__smakebuf_r>:
 800fa50:	898b      	ldrh	r3, [r1, #12]
 800fa52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa54:	079d      	lsls	r5, r3, #30
 800fa56:	4606      	mov	r6, r0
 800fa58:	460c      	mov	r4, r1
 800fa5a:	d507      	bpl.n	800fa6c <__smakebuf_r+0x1c>
 800fa5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	2301      	movs	r3, #1
 800fa66:	6163      	str	r3, [r4, #20]
 800fa68:	b002      	add	sp, #8
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	ab01      	add	r3, sp, #4
 800fa6e:	466a      	mov	r2, sp
 800fa70:	f7ff ffc8 	bl	800fa04 <__swhatbuf_r>
 800fa74:	9900      	ldr	r1, [sp, #0]
 800fa76:	4605      	mov	r5, r0
 800fa78:	4630      	mov	r0, r6
 800fa7a:	f7fb fc69 	bl	800b350 <_malloc_r>
 800fa7e:	b948      	cbnz	r0, 800fa94 <__smakebuf_r+0x44>
 800fa80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa84:	059a      	lsls	r2, r3, #22
 800fa86:	d4ef      	bmi.n	800fa68 <__smakebuf_r+0x18>
 800fa88:	f023 0303 	bic.w	r3, r3, #3
 800fa8c:	f043 0302 	orr.w	r3, r3, #2
 800fa90:	81a3      	strh	r3, [r4, #12]
 800fa92:	e7e3      	b.n	800fa5c <__smakebuf_r+0xc>
 800fa94:	89a3      	ldrh	r3, [r4, #12]
 800fa96:	6020      	str	r0, [r4, #0]
 800fa98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa9c:	81a3      	strh	r3, [r4, #12]
 800fa9e:	9b00      	ldr	r3, [sp, #0]
 800faa0:	6163      	str	r3, [r4, #20]
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	6120      	str	r0, [r4, #16]
 800faa6:	b15b      	cbz	r3, 800fac0 <__smakebuf_r+0x70>
 800faa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faac:	4630      	mov	r0, r6
 800faae:	f000 f837 	bl	800fb20 <_isatty_r>
 800fab2:	b128      	cbz	r0, 800fac0 <__smakebuf_r+0x70>
 800fab4:	89a3      	ldrh	r3, [r4, #12]
 800fab6:	f023 0303 	bic.w	r3, r3, #3
 800faba:	f043 0301 	orr.w	r3, r3, #1
 800fabe:	81a3      	strh	r3, [r4, #12]
 800fac0:	89a3      	ldrh	r3, [r4, #12]
 800fac2:	431d      	orrs	r5, r3
 800fac4:	81a5      	strh	r5, [r4, #12]
 800fac6:	e7cf      	b.n	800fa68 <__smakebuf_r+0x18>

0800fac8 <memmove>:
 800fac8:	4288      	cmp	r0, r1
 800faca:	b510      	push	{r4, lr}
 800facc:	eb01 0402 	add.w	r4, r1, r2
 800fad0:	d902      	bls.n	800fad8 <memmove+0x10>
 800fad2:	4284      	cmp	r4, r0
 800fad4:	4623      	mov	r3, r4
 800fad6:	d807      	bhi.n	800fae8 <memmove+0x20>
 800fad8:	1e43      	subs	r3, r0, #1
 800fada:	42a1      	cmp	r1, r4
 800fadc:	d008      	beq.n	800faf0 <memmove+0x28>
 800fade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fae6:	e7f8      	b.n	800fada <memmove+0x12>
 800fae8:	4402      	add	r2, r0
 800faea:	4601      	mov	r1, r0
 800faec:	428a      	cmp	r2, r1
 800faee:	d100      	bne.n	800faf2 <memmove+0x2a>
 800faf0:	bd10      	pop	{r4, pc}
 800faf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fafa:	e7f7      	b.n	800faec <memmove+0x24>

0800fafc <_fstat_r>:
 800fafc:	b538      	push	{r3, r4, r5, lr}
 800fafe:	4d07      	ldr	r5, [pc, #28]	; (800fb1c <_fstat_r+0x20>)
 800fb00:	2300      	movs	r3, #0
 800fb02:	4604      	mov	r4, r0
 800fb04:	4608      	mov	r0, r1
 800fb06:	4611      	mov	r1, r2
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	f7f2 fbea 	bl	80022e2 <_fstat>
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	d102      	bne.n	800fb18 <_fstat_r+0x1c>
 800fb12:	682b      	ldr	r3, [r5, #0]
 800fb14:	b103      	cbz	r3, 800fb18 <_fstat_r+0x1c>
 800fb16:	6023      	str	r3, [r4, #0]
 800fb18:	bd38      	pop	{r3, r4, r5, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200055dc 	.word	0x200055dc

0800fb20 <_isatty_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4d06      	ldr	r5, [pc, #24]	; (800fb3c <_isatty_r+0x1c>)
 800fb24:	2300      	movs	r3, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	4608      	mov	r0, r1
 800fb2a:	602b      	str	r3, [r5, #0]
 800fb2c:	f7f2 fbe9 	bl	8002302 <_isatty>
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	d102      	bne.n	800fb3a <_isatty_r+0x1a>
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	b103      	cbz	r3, 800fb3a <_isatty_r+0x1a>
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	bd38      	pop	{r3, r4, r5, pc}
 800fb3c:	200055dc 	.word	0x200055dc

0800fb40 <__assert_func>:
 800fb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb42:	4614      	mov	r4, r2
 800fb44:	461a      	mov	r2, r3
 800fb46:	4b09      	ldr	r3, [pc, #36]	; (800fb6c <__assert_func+0x2c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	68d8      	ldr	r0, [r3, #12]
 800fb4e:	b14c      	cbz	r4, 800fb64 <__assert_func+0x24>
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <__assert_func+0x30>)
 800fb52:	9100      	str	r1, [sp, #0]
 800fb54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb58:	4906      	ldr	r1, [pc, #24]	; (800fb74 <__assert_func+0x34>)
 800fb5a:	462b      	mov	r3, r5
 800fb5c:	f000 f824 	bl	800fba8 <fiprintf>
 800fb60:	f000 f834 	bl	800fbcc <abort>
 800fb64:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <__assert_func+0x38>)
 800fb66:	461c      	mov	r4, r3
 800fb68:	e7f3      	b.n	800fb52 <__assert_func+0x12>
 800fb6a:	bf00      	nop
 800fb6c:	20000260 	.word	0x20000260
 800fb70:	0801143d 	.word	0x0801143d
 800fb74:	0801144a 	.word	0x0801144a
 800fb78:	08011478 	.word	0x08011478

0800fb7c <_calloc_r>:
 800fb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb7e:	fba1 2402 	umull	r2, r4, r1, r2
 800fb82:	b94c      	cbnz	r4, 800fb98 <_calloc_r+0x1c>
 800fb84:	4611      	mov	r1, r2
 800fb86:	9201      	str	r2, [sp, #4]
 800fb88:	f7fb fbe2 	bl	800b350 <_malloc_r>
 800fb8c:	9a01      	ldr	r2, [sp, #4]
 800fb8e:	4605      	mov	r5, r0
 800fb90:	b930      	cbnz	r0, 800fba0 <_calloc_r+0x24>
 800fb92:	4628      	mov	r0, r5
 800fb94:	b003      	add	sp, #12
 800fb96:	bd30      	pop	{r4, r5, pc}
 800fb98:	220c      	movs	r2, #12
 800fb9a:	6002      	str	r2, [r0, #0]
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	e7f8      	b.n	800fb92 <_calloc_r+0x16>
 800fba0:	4621      	mov	r1, r4
 800fba2:	f7fd fb55 	bl	800d250 <memset>
 800fba6:	e7f4      	b.n	800fb92 <_calloc_r+0x16>

0800fba8 <fiprintf>:
 800fba8:	b40e      	push	{r1, r2, r3}
 800fbaa:	b503      	push	{r0, r1, lr}
 800fbac:	4601      	mov	r1, r0
 800fbae:	ab03      	add	r3, sp, #12
 800fbb0:	4805      	ldr	r0, [pc, #20]	; (800fbc8 <fiprintf+0x20>)
 800fbb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbb6:	6800      	ldr	r0, [r0, #0]
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	f7ff fd5b 	bl	800f674 <_vfiprintf_r>
 800fbbe:	b002      	add	sp, #8
 800fbc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbc4:	b003      	add	sp, #12
 800fbc6:	4770      	bx	lr
 800fbc8:	20000260 	.word	0x20000260

0800fbcc <abort>:
 800fbcc:	b508      	push	{r3, lr}
 800fbce:	2006      	movs	r0, #6
 800fbd0:	f000 f82c 	bl	800fc2c <raise>
 800fbd4:	2001      	movs	r0, #1
 800fbd6:	f7f2 fb51 	bl	800227c <_exit>

0800fbda <_raise_r>:
 800fbda:	291f      	cmp	r1, #31
 800fbdc:	b538      	push	{r3, r4, r5, lr}
 800fbde:	4604      	mov	r4, r0
 800fbe0:	460d      	mov	r5, r1
 800fbe2:	d904      	bls.n	800fbee <_raise_r+0x14>
 800fbe4:	2316      	movs	r3, #22
 800fbe6:	6003      	str	r3, [r0, #0]
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
 800fbee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fbf0:	b112      	cbz	r2, 800fbf8 <_raise_r+0x1e>
 800fbf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbf6:	b94b      	cbnz	r3, 800fc0c <_raise_r+0x32>
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f000 f831 	bl	800fc60 <_getpid_r>
 800fbfe:	462a      	mov	r2, r5
 800fc00:	4601      	mov	r1, r0
 800fc02:	4620      	mov	r0, r4
 800fc04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc08:	f000 b818 	b.w	800fc3c <_kill_r>
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d00a      	beq.n	800fc26 <_raise_r+0x4c>
 800fc10:	1c59      	adds	r1, r3, #1
 800fc12:	d103      	bne.n	800fc1c <_raise_r+0x42>
 800fc14:	2316      	movs	r3, #22
 800fc16:	6003      	str	r3, [r0, #0]
 800fc18:	2001      	movs	r0, #1
 800fc1a:	e7e7      	b.n	800fbec <_raise_r+0x12>
 800fc1c:	2400      	movs	r4, #0
 800fc1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc22:	4628      	mov	r0, r5
 800fc24:	4798      	blx	r3
 800fc26:	2000      	movs	r0, #0
 800fc28:	e7e0      	b.n	800fbec <_raise_r+0x12>
	...

0800fc2c <raise>:
 800fc2c:	4b02      	ldr	r3, [pc, #8]	; (800fc38 <raise+0xc>)
 800fc2e:	4601      	mov	r1, r0
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	f7ff bfd2 	b.w	800fbda <_raise_r>
 800fc36:	bf00      	nop
 800fc38:	20000260 	.word	0x20000260

0800fc3c <_kill_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d07      	ldr	r5, [pc, #28]	; (800fc5c <_kill_r+0x20>)
 800fc40:	2300      	movs	r3, #0
 800fc42:	4604      	mov	r4, r0
 800fc44:	4608      	mov	r0, r1
 800fc46:	4611      	mov	r1, r2
 800fc48:	602b      	str	r3, [r5, #0]
 800fc4a:	f7f2 fb07 	bl	800225c <_kill>
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	d102      	bne.n	800fc58 <_kill_r+0x1c>
 800fc52:	682b      	ldr	r3, [r5, #0]
 800fc54:	b103      	cbz	r3, 800fc58 <_kill_r+0x1c>
 800fc56:	6023      	str	r3, [r4, #0]
 800fc58:	bd38      	pop	{r3, r4, r5, pc}
 800fc5a:	bf00      	nop
 800fc5c:	200055dc 	.word	0x200055dc

0800fc60 <_getpid_r>:
 800fc60:	f7f2 baf4 	b.w	800224c <_getpid>
 800fc64:	0000      	movs	r0, r0
	...

0800fc68 <cos>:
 800fc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc6a:	ec53 2b10 	vmov	r2, r3, d0
 800fc6e:	4826      	ldr	r0, [pc, #152]	; (800fd08 <cos+0xa0>)
 800fc70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc74:	4281      	cmp	r1, r0
 800fc76:	dc06      	bgt.n	800fc86 <cos+0x1e>
 800fc78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fd00 <cos+0x98>
 800fc7c:	b005      	add	sp, #20
 800fc7e:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc82:	f000 b8f1 	b.w	800fe68 <__kernel_cos>
 800fc86:	4821      	ldr	r0, [pc, #132]	; (800fd0c <cos+0xa4>)
 800fc88:	4281      	cmp	r1, r0
 800fc8a:	dd09      	ble.n	800fca0 <cos+0x38>
 800fc8c:	ee10 0a10 	vmov	r0, s0
 800fc90:	4619      	mov	r1, r3
 800fc92:	f7f0 fb11 	bl	80002b8 <__aeabi_dsub>
 800fc96:	ec41 0b10 	vmov	d0, r0, r1
 800fc9a:	b005      	add	sp, #20
 800fc9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fca0:	4668      	mov	r0, sp
 800fca2:	f000 fa69 	bl	8010178 <__ieee754_rem_pio2>
 800fca6:	f000 0003 	and.w	r0, r0, #3
 800fcaa:	2801      	cmp	r0, #1
 800fcac:	d00b      	beq.n	800fcc6 <cos+0x5e>
 800fcae:	2802      	cmp	r0, #2
 800fcb0:	d016      	beq.n	800fce0 <cos+0x78>
 800fcb2:	b9e0      	cbnz	r0, 800fcee <cos+0x86>
 800fcb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcb8:	ed9d 0b00 	vldr	d0, [sp]
 800fcbc:	f000 f8d4 	bl	800fe68 <__kernel_cos>
 800fcc0:	ec51 0b10 	vmov	r0, r1, d0
 800fcc4:	e7e7      	b.n	800fc96 <cos+0x2e>
 800fcc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcca:	ed9d 0b00 	vldr	d0, [sp]
 800fcce:	f000 f993 	bl	800fff8 <__kernel_sin>
 800fcd2:	ec53 2b10 	vmov	r2, r3, d0
 800fcd6:	ee10 0a10 	vmov	r0, s0
 800fcda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fcde:	e7da      	b.n	800fc96 <cos+0x2e>
 800fce0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fce4:	ed9d 0b00 	vldr	d0, [sp]
 800fce8:	f000 f8be 	bl	800fe68 <__kernel_cos>
 800fcec:	e7f1      	b.n	800fcd2 <cos+0x6a>
 800fcee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcf2:	ed9d 0b00 	vldr	d0, [sp]
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	f000 f97e 	bl	800fff8 <__kernel_sin>
 800fcfc:	e7e0      	b.n	800fcc0 <cos+0x58>
 800fcfe:	bf00      	nop
	...
 800fd08:	3fe921fb 	.word	0x3fe921fb
 800fd0c:	7fefffff 	.word	0x7fefffff

0800fd10 <sin>:
 800fd10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd12:	ec53 2b10 	vmov	r2, r3, d0
 800fd16:	4828      	ldr	r0, [pc, #160]	; (800fdb8 <sin+0xa8>)
 800fd18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fd1c:	4281      	cmp	r1, r0
 800fd1e:	dc07      	bgt.n	800fd30 <sin+0x20>
 800fd20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fdb0 <sin+0xa0>
 800fd24:	2000      	movs	r0, #0
 800fd26:	b005      	add	sp, #20
 800fd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd2c:	f000 b964 	b.w	800fff8 <__kernel_sin>
 800fd30:	4822      	ldr	r0, [pc, #136]	; (800fdbc <sin+0xac>)
 800fd32:	4281      	cmp	r1, r0
 800fd34:	dd09      	ble.n	800fd4a <sin+0x3a>
 800fd36:	ee10 0a10 	vmov	r0, s0
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f7f0 fabc 	bl	80002b8 <__aeabi_dsub>
 800fd40:	ec41 0b10 	vmov	d0, r0, r1
 800fd44:	b005      	add	sp, #20
 800fd46:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd4a:	4668      	mov	r0, sp
 800fd4c:	f000 fa14 	bl	8010178 <__ieee754_rem_pio2>
 800fd50:	f000 0003 	and.w	r0, r0, #3
 800fd54:	2801      	cmp	r0, #1
 800fd56:	d00c      	beq.n	800fd72 <sin+0x62>
 800fd58:	2802      	cmp	r0, #2
 800fd5a:	d011      	beq.n	800fd80 <sin+0x70>
 800fd5c:	b9f0      	cbnz	r0, 800fd9c <sin+0x8c>
 800fd5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd62:	ed9d 0b00 	vldr	d0, [sp]
 800fd66:	2001      	movs	r0, #1
 800fd68:	f000 f946 	bl	800fff8 <__kernel_sin>
 800fd6c:	ec51 0b10 	vmov	r0, r1, d0
 800fd70:	e7e6      	b.n	800fd40 <sin+0x30>
 800fd72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd76:	ed9d 0b00 	vldr	d0, [sp]
 800fd7a:	f000 f875 	bl	800fe68 <__kernel_cos>
 800fd7e:	e7f5      	b.n	800fd6c <sin+0x5c>
 800fd80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd84:	ed9d 0b00 	vldr	d0, [sp]
 800fd88:	2001      	movs	r0, #1
 800fd8a:	f000 f935 	bl	800fff8 <__kernel_sin>
 800fd8e:	ec53 2b10 	vmov	r2, r3, d0
 800fd92:	ee10 0a10 	vmov	r0, s0
 800fd96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fd9a:	e7d1      	b.n	800fd40 <sin+0x30>
 800fd9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fda0:	ed9d 0b00 	vldr	d0, [sp]
 800fda4:	f000 f860 	bl	800fe68 <__kernel_cos>
 800fda8:	e7f1      	b.n	800fd8e <sin+0x7e>
 800fdaa:	bf00      	nop
 800fdac:	f3af 8000 	nop.w
	...
 800fdb8:	3fe921fb 	.word	0x3fe921fb
 800fdbc:	7fefffff 	.word	0x7fefffff

0800fdc0 <fmaxf>:
 800fdc0:	b508      	push	{r3, lr}
 800fdc2:	ed2d 8b02 	vpush	{d8}
 800fdc6:	eeb0 8a40 	vmov.f32	s16, s0
 800fdca:	eef0 8a60 	vmov.f32	s17, s1
 800fdce:	f000 f82d 	bl	800fe2c <__fpclassifyf>
 800fdd2:	b148      	cbz	r0, 800fde8 <fmaxf+0x28>
 800fdd4:	eeb0 0a68 	vmov.f32	s0, s17
 800fdd8:	f000 f828 	bl	800fe2c <__fpclassifyf>
 800fddc:	b130      	cbz	r0, 800fdec <fmaxf+0x2c>
 800fdde:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde6:	dc01      	bgt.n	800fdec <fmaxf+0x2c>
 800fde8:	eeb0 8a68 	vmov.f32	s16, s17
 800fdec:	eeb0 0a48 	vmov.f32	s0, s16
 800fdf0:	ecbd 8b02 	vpop	{d8}
 800fdf4:	bd08      	pop	{r3, pc}

0800fdf6 <fminf>:
 800fdf6:	b508      	push	{r3, lr}
 800fdf8:	ed2d 8b02 	vpush	{d8}
 800fdfc:	eeb0 8a40 	vmov.f32	s16, s0
 800fe00:	eef0 8a60 	vmov.f32	s17, s1
 800fe04:	f000 f812 	bl	800fe2c <__fpclassifyf>
 800fe08:	b148      	cbz	r0, 800fe1e <fminf+0x28>
 800fe0a:	eeb0 0a68 	vmov.f32	s0, s17
 800fe0e:	f000 f80d 	bl	800fe2c <__fpclassifyf>
 800fe12:	b130      	cbz	r0, 800fe22 <fminf+0x2c>
 800fe14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	d401      	bmi.n	800fe22 <fminf+0x2c>
 800fe1e:	eeb0 8a68 	vmov.f32	s16, s17
 800fe22:	eeb0 0a48 	vmov.f32	s0, s16
 800fe26:	ecbd 8b02 	vpop	{d8}
 800fe2a:	bd08      	pop	{r3, pc}

0800fe2c <__fpclassifyf>:
 800fe2c:	ee10 3a10 	vmov	r3, s0
 800fe30:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800fe34:	d00d      	beq.n	800fe52 <__fpclassifyf+0x26>
 800fe36:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800fe3a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800fe3e:	d30a      	bcc.n	800fe56 <__fpclassifyf+0x2a>
 800fe40:	4b07      	ldr	r3, [pc, #28]	; (800fe60 <__fpclassifyf+0x34>)
 800fe42:	1e42      	subs	r2, r0, #1
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d908      	bls.n	800fe5a <__fpclassifyf+0x2e>
 800fe48:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800fe4c:	4258      	negs	r0, r3
 800fe4e:	4158      	adcs	r0, r3
 800fe50:	4770      	bx	lr
 800fe52:	2002      	movs	r0, #2
 800fe54:	4770      	bx	lr
 800fe56:	2004      	movs	r0, #4
 800fe58:	4770      	bx	lr
 800fe5a:	2003      	movs	r0, #3
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	007ffffe 	.word	0x007ffffe
 800fe64:	00000000 	.word	0x00000000

0800fe68 <__kernel_cos>:
 800fe68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	ec57 6b10 	vmov	r6, r7, d0
 800fe70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fe74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fe78:	ed8d 1b00 	vstr	d1, [sp]
 800fe7c:	da07      	bge.n	800fe8e <__kernel_cos+0x26>
 800fe7e:	ee10 0a10 	vmov	r0, s0
 800fe82:	4639      	mov	r1, r7
 800fe84:	f7f0 fe80 	bl	8000b88 <__aeabi_d2iz>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	f000 8088 	beq.w	800ff9e <__kernel_cos+0x136>
 800fe8e:	4632      	mov	r2, r6
 800fe90:	463b      	mov	r3, r7
 800fe92:	4630      	mov	r0, r6
 800fe94:	4639      	mov	r1, r7
 800fe96:	f7f0 fbc7 	bl	8000628 <__aeabi_dmul>
 800fe9a:	4b51      	ldr	r3, [pc, #324]	; (800ffe0 <__kernel_cos+0x178>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	4604      	mov	r4, r0
 800fea0:	460d      	mov	r5, r1
 800fea2:	f7f0 fbc1 	bl	8000628 <__aeabi_dmul>
 800fea6:	a340      	add	r3, pc, #256	; (adr r3, 800ffa8 <__kernel_cos+0x140>)
 800fea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feac:	4682      	mov	sl, r0
 800feae:	468b      	mov	fp, r1
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	f7f0 fbb8 	bl	8000628 <__aeabi_dmul>
 800feb8:	a33d      	add	r3, pc, #244	; (adr r3, 800ffb0 <__kernel_cos+0x148>)
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	f7f0 f9fd 	bl	80002bc <__adddf3>
 800fec2:	4622      	mov	r2, r4
 800fec4:	462b      	mov	r3, r5
 800fec6:	f7f0 fbaf 	bl	8000628 <__aeabi_dmul>
 800feca:	a33b      	add	r3, pc, #236	; (adr r3, 800ffb8 <__kernel_cos+0x150>)
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	f7f0 f9f2 	bl	80002b8 <__aeabi_dsub>
 800fed4:	4622      	mov	r2, r4
 800fed6:	462b      	mov	r3, r5
 800fed8:	f7f0 fba6 	bl	8000628 <__aeabi_dmul>
 800fedc:	a338      	add	r3, pc, #224	; (adr r3, 800ffc0 <__kernel_cos+0x158>)
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	f7f0 f9eb 	bl	80002bc <__adddf3>
 800fee6:	4622      	mov	r2, r4
 800fee8:	462b      	mov	r3, r5
 800feea:	f7f0 fb9d 	bl	8000628 <__aeabi_dmul>
 800feee:	a336      	add	r3, pc, #216	; (adr r3, 800ffc8 <__kernel_cos+0x160>)
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f7f0 f9e0 	bl	80002b8 <__aeabi_dsub>
 800fef8:	4622      	mov	r2, r4
 800fefa:	462b      	mov	r3, r5
 800fefc:	f7f0 fb94 	bl	8000628 <__aeabi_dmul>
 800ff00:	a333      	add	r3, pc, #204	; (adr r3, 800ffd0 <__kernel_cos+0x168>)
 800ff02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff06:	f7f0 f9d9 	bl	80002bc <__adddf3>
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	f7f0 fb8b 	bl	8000628 <__aeabi_dmul>
 800ff12:	4622      	mov	r2, r4
 800ff14:	462b      	mov	r3, r5
 800ff16:	f7f0 fb87 	bl	8000628 <__aeabi_dmul>
 800ff1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff1e:	4604      	mov	r4, r0
 800ff20:	460d      	mov	r5, r1
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 fb7f 	bl	8000628 <__aeabi_dmul>
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	4629      	mov	r1, r5
 800ff30:	4620      	mov	r0, r4
 800ff32:	f7f0 f9c1 	bl	80002b8 <__aeabi_dsub>
 800ff36:	4b2b      	ldr	r3, [pc, #172]	; (800ffe4 <__kernel_cos+0x17c>)
 800ff38:	4598      	cmp	r8, r3
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	460f      	mov	r7, r1
 800ff3e:	dc10      	bgt.n	800ff62 <__kernel_cos+0xfa>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	4650      	mov	r0, sl
 800ff46:	4659      	mov	r1, fp
 800ff48:	f7f0 f9b6 	bl	80002b8 <__aeabi_dsub>
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	4926      	ldr	r1, [pc, #152]	; (800ffe8 <__kernel_cos+0x180>)
 800ff50:	4602      	mov	r2, r0
 800ff52:	2000      	movs	r0, #0
 800ff54:	f7f0 f9b0 	bl	80002b8 <__aeabi_dsub>
 800ff58:	ec41 0b10 	vmov	d0, r0, r1
 800ff5c:	b003      	add	sp, #12
 800ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff62:	4b22      	ldr	r3, [pc, #136]	; (800ffec <__kernel_cos+0x184>)
 800ff64:	4920      	ldr	r1, [pc, #128]	; (800ffe8 <__kernel_cos+0x180>)
 800ff66:	4598      	cmp	r8, r3
 800ff68:	bfcc      	ite	gt
 800ff6a:	4d21      	ldrgt	r5, [pc, #132]	; (800fff0 <__kernel_cos+0x188>)
 800ff6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ff70:	2400      	movs	r4, #0
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	2000      	movs	r0, #0
 800ff78:	f7f0 f99e 	bl	80002b8 <__aeabi_dsub>
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	4680      	mov	r8, r0
 800ff80:	4689      	mov	r9, r1
 800ff82:	462b      	mov	r3, r5
 800ff84:	4650      	mov	r0, sl
 800ff86:	4659      	mov	r1, fp
 800ff88:	f7f0 f996 	bl	80002b8 <__aeabi_dsub>
 800ff8c:	4632      	mov	r2, r6
 800ff8e:	463b      	mov	r3, r7
 800ff90:	f7f0 f992 	bl	80002b8 <__aeabi_dsub>
 800ff94:	4602      	mov	r2, r0
 800ff96:	460b      	mov	r3, r1
 800ff98:	4640      	mov	r0, r8
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	e7da      	b.n	800ff54 <__kernel_cos+0xec>
 800ff9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ffd8 <__kernel_cos+0x170>
 800ffa2:	e7db      	b.n	800ff5c <__kernel_cos+0xf4>
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	be8838d4 	.word	0xbe8838d4
 800ffac:	bda8fae9 	.word	0xbda8fae9
 800ffb0:	bdb4b1c4 	.word	0xbdb4b1c4
 800ffb4:	3e21ee9e 	.word	0x3e21ee9e
 800ffb8:	809c52ad 	.word	0x809c52ad
 800ffbc:	3e927e4f 	.word	0x3e927e4f
 800ffc0:	19cb1590 	.word	0x19cb1590
 800ffc4:	3efa01a0 	.word	0x3efa01a0
 800ffc8:	16c15177 	.word	0x16c15177
 800ffcc:	3f56c16c 	.word	0x3f56c16c
 800ffd0:	5555554c 	.word	0x5555554c
 800ffd4:	3fa55555 	.word	0x3fa55555
 800ffd8:	00000000 	.word	0x00000000
 800ffdc:	3ff00000 	.word	0x3ff00000
 800ffe0:	3fe00000 	.word	0x3fe00000
 800ffe4:	3fd33332 	.word	0x3fd33332
 800ffe8:	3ff00000 	.word	0x3ff00000
 800ffec:	3fe90000 	.word	0x3fe90000
 800fff0:	3fd20000 	.word	0x3fd20000
 800fff4:	00000000 	.word	0x00000000

0800fff8 <__kernel_sin>:
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	ed2d 8b04 	vpush	{d8-d9}
 8010000:	eeb0 8a41 	vmov.f32	s16, s2
 8010004:	eef0 8a61 	vmov.f32	s17, s3
 8010008:	ec55 4b10 	vmov	r4, r5, d0
 801000c:	b083      	sub	sp, #12
 801000e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010012:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010016:	9001      	str	r0, [sp, #4]
 8010018:	da06      	bge.n	8010028 <__kernel_sin+0x30>
 801001a:	ee10 0a10 	vmov	r0, s0
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 fdb2 	bl	8000b88 <__aeabi_d2iz>
 8010024:	2800      	cmp	r0, #0
 8010026:	d051      	beq.n	80100cc <__kernel_sin+0xd4>
 8010028:	4622      	mov	r2, r4
 801002a:	462b      	mov	r3, r5
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 fafa 	bl	8000628 <__aeabi_dmul>
 8010034:	4682      	mov	sl, r0
 8010036:	468b      	mov	fp, r1
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4620      	mov	r0, r4
 801003e:	4629      	mov	r1, r5
 8010040:	f7f0 faf2 	bl	8000628 <__aeabi_dmul>
 8010044:	a341      	add	r3, pc, #260	; (adr r3, 801014c <__kernel_sin+0x154>)
 8010046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004a:	4680      	mov	r8, r0
 801004c:	4689      	mov	r9, r1
 801004e:	4650      	mov	r0, sl
 8010050:	4659      	mov	r1, fp
 8010052:	f7f0 fae9 	bl	8000628 <__aeabi_dmul>
 8010056:	a33f      	add	r3, pc, #252	; (adr r3, 8010154 <__kernel_sin+0x15c>)
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	f7f0 f92c 	bl	80002b8 <__aeabi_dsub>
 8010060:	4652      	mov	r2, sl
 8010062:	465b      	mov	r3, fp
 8010064:	f7f0 fae0 	bl	8000628 <__aeabi_dmul>
 8010068:	a33c      	add	r3, pc, #240	; (adr r3, 801015c <__kernel_sin+0x164>)
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	f7f0 f925 	bl	80002bc <__adddf3>
 8010072:	4652      	mov	r2, sl
 8010074:	465b      	mov	r3, fp
 8010076:	f7f0 fad7 	bl	8000628 <__aeabi_dmul>
 801007a:	a33a      	add	r3, pc, #232	; (adr r3, 8010164 <__kernel_sin+0x16c>)
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	f7f0 f91a 	bl	80002b8 <__aeabi_dsub>
 8010084:	4652      	mov	r2, sl
 8010086:	465b      	mov	r3, fp
 8010088:	f7f0 face 	bl	8000628 <__aeabi_dmul>
 801008c:	a337      	add	r3, pc, #220	; (adr r3, 801016c <__kernel_sin+0x174>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	f7f0 f913 	bl	80002bc <__adddf3>
 8010096:	9b01      	ldr	r3, [sp, #4]
 8010098:	4606      	mov	r6, r0
 801009a:	460f      	mov	r7, r1
 801009c:	b9eb      	cbnz	r3, 80100da <__kernel_sin+0xe2>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4650      	mov	r0, sl
 80100a4:	4659      	mov	r1, fp
 80100a6:	f7f0 fabf 	bl	8000628 <__aeabi_dmul>
 80100aa:	a325      	add	r3, pc, #148	; (adr r3, 8010140 <__kernel_sin+0x148>)
 80100ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b0:	f7f0 f902 	bl	80002b8 <__aeabi_dsub>
 80100b4:	4642      	mov	r2, r8
 80100b6:	464b      	mov	r3, r9
 80100b8:	f7f0 fab6 	bl	8000628 <__aeabi_dmul>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	4620      	mov	r0, r4
 80100c2:	4629      	mov	r1, r5
 80100c4:	f7f0 f8fa 	bl	80002bc <__adddf3>
 80100c8:	4604      	mov	r4, r0
 80100ca:	460d      	mov	r5, r1
 80100cc:	ec45 4b10 	vmov	d0, r4, r5
 80100d0:	b003      	add	sp, #12
 80100d2:	ecbd 8b04 	vpop	{d8-d9}
 80100d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100da:	4b1b      	ldr	r3, [pc, #108]	; (8010148 <__kernel_sin+0x150>)
 80100dc:	ec51 0b18 	vmov	r0, r1, d8
 80100e0:	2200      	movs	r2, #0
 80100e2:	f7f0 faa1 	bl	8000628 <__aeabi_dmul>
 80100e6:	4632      	mov	r2, r6
 80100e8:	ec41 0b19 	vmov	d9, r0, r1
 80100ec:	463b      	mov	r3, r7
 80100ee:	4640      	mov	r0, r8
 80100f0:	4649      	mov	r1, r9
 80100f2:	f7f0 fa99 	bl	8000628 <__aeabi_dmul>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	ec51 0b19 	vmov	r0, r1, d9
 80100fe:	f7f0 f8db 	bl	80002b8 <__aeabi_dsub>
 8010102:	4652      	mov	r2, sl
 8010104:	465b      	mov	r3, fp
 8010106:	f7f0 fa8f 	bl	8000628 <__aeabi_dmul>
 801010a:	ec53 2b18 	vmov	r2, r3, d8
 801010e:	f7f0 f8d3 	bl	80002b8 <__aeabi_dsub>
 8010112:	a30b      	add	r3, pc, #44	; (adr r3, 8010140 <__kernel_sin+0x148>)
 8010114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010118:	4606      	mov	r6, r0
 801011a:	460f      	mov	r7, r1
 801011c:	4640      	mov	r0, r8
 801011e:	4649      	mov	r1, r9
 8010120:	f7f0 fa82 	bl	8000628 <__aeabi_dmul>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	4630      	mov	r0, r6
 801012a:	4639      	mov	r1, r7
 801012c:	f7f0 f8c6 	bl	80002bc <__adddf3>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4620      	mov	r0, r4
 8010136:	4629      	mov	r1, r5
 8010138:	f7f0 f8be 	bl	80002b8 <__aeabi_dsub>
 801013c:	e7c4      	b.n	80100c8 <__kernel_sin+0xd0>
 801013e:	bf00      	nop
 8010140:	55555549 	.word	0x55555549
 8010144:	3fc55555 	.word	0x3fc55555
 8010148:	3fe00000 	.word	0x3fe00000
 801014c:	5acfd57c 	.word	0x5acfd57c
 8010150:	3de5d93a 	.word	0x3de5d93a
 8010154:	8a2b9ceb 	.word	0x8a2b9ceb
 8010158:	3e5ae5e6 	.word	0x3e5ae5e6
 801015c:	57b1fe7d 	.word	0x57b1fe7d
 8010160:	3ec71de3 	.word	0x3ec71de3
 8010164:	19c161d5 	.word	0x19c161d5
 8010168:	3f2a01a0 	.word	0x3f2a01a0
 801016c:	1110f8a6 	.word	0x1110f8a6
 8010170:	3f811111 	.word	0x3f811111
 8010174:	00000000 	.word	0x00000000

08010178 <__ieee754_rem_pio2>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	ed2d 8b02 	vpush	{d8}
 8010180:	ec55 4b10 	vmov	r4, r5, d0
 8010184:	4bca      	ldr	r3, [pc, #808]	; (80104b0 <__ieee754_rem_pio2+0x338>)
 8010186:	b08b      	sub	sp, #44	; 0x2c
 8010188:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801018c:	4598      	cmp	r8, r3
 801018e:	4682      	mov	sl, r0
 8010190:	9502      	str	r5, [sp, #8]
 8010192:	dc08      	bgt.n	80101a6 <__ieee754_rem_pio2+0x2e>
 8010194:	2200      	movs	r2, #0
 8010196:	2300      	movs	r3, #0
 8010198:	ed80 0b00 	vstr	d0, [r0]
 801019c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80101a0:	f04f 0b00 	mov.w	fp, #0
 80101a4:	e028      	b.n	80101f8 <__ieee754_rem_pio2+0x80>
 80101a6:	4bc3      	ldr	r3, [pc, #780]	; (80104b4 <__ieee754_rem_pio2+0x33c>)
 80101a8:	4598      	cmp	r8, r3
 80101aa:	dc78      	bgt.n	801029e <__ieee754_rem_pio2+0x126>
 80101ac:	9b02      	ldr	r3, [sp, #8]
 80101ae:	4ec2      	ldr	r6, [pc, #776]	; (80104b8 <__ieee754_rem_pio2+0x340>)
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	ee10 0a10 	vmov	r0, s0
 80101b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8010478 <__ieee754_rem_pio2+0x300>)
 80101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101bc:	4629      	mov	r1, r5
 80101be:	dd39      	ble.n	8010234 <__ieee754_rem_pio2+0xbc>
 80101c0:	f7f0 f87a 	bl	80002b8 <__aeabi_dsub>
 80101c4:	45b0      	cmp	r8, r6
 80101c6:	4604      	mov	r4, r0
 80101c8:	460d      	mov	r5, r1
 80101ca:	d01b      	beq.n	8010204 <__ieee754_rem_pio2+0x8c>
 80101cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8010480 <__ieee754_rem_pio2+0x308>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f7f0 f871 	bl	80002b8 <__aeabi_dsub>
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	e9ca 2300 	strd	r2, r3, [sl]
 80101de:	4620      	mov	r0, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	f7f0 f869 	bl	80002b8 <__aeabi_dsub>
 80101e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010480 <__ieee754_rem_pio2+0x308>)
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	f7f0 f864 	bl	80002b8 <__aeabi_dsub>
 80101f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101f4:	f04f 0b01 	mov.w	fp, #1
 80101f8:	4658      	mov	r0, fp
 80101fa:	b00b      	add	sp, #44	; 0x2c
 80101fc:	ecbd 8b02 	vpop	{d8}
 8010200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010204:	a3a0      	add	r3, pc, #640	; (adr r3, 8010488 <__ieee754_rem_pio2+0x310>)
 8010206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020a:	f7f0 f855 	bl	80002b8 <__aeabi_dsub>
 801020e:	a3a0      	add	r3, pc, #640	; (adr r3, 8010490 <__ieee754_rem_pio2+0x318>)
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	4604      	mov	r4, r0
 8010216:	460d      	mov	r5, r1
 8010218:	f7f0 f84e 	bl	80002b8 <__aeabi_dsub>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	e9ca 2300 	strd	r2, r3, [sl]
 8010224:	4620      	mov	r0, r4
 8010226:	4629      	mov	r1, r5
 8010228:	f7f0 f846 	bl	80002b8 <__aeabi_dsub>
 801022c:	a398      	add	r3, pc, #608	; (adr r3, 8010490 <__ieee754_rem_pio2+0x318>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	e7db      	b.n	80101ec <__ieee754_rem_pio2+0x74>
 8010234:	f7f0 f842 	bl	80002bc <__adddf3>
 8010238:	45b0      	cmp	r8, r6
 801023a:	4604      	mov	r4, r0
 801023c:	460d      	mov	r5, r1
 801023e:	d016      	beq.n	801026e <__ieee754_rem_pio2+0xf6>
 8010240:	a38f      	add	r3, pc, #572	; (adr r3, 8010480 <__ieee754_rem_pio2+0x308>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f0 f839 	bl	80002bc <__adddf3>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	e9ca 2300 	strd	r2, r3, [sl]
 8010252:	4620      	mov	r0, r4
 8010254:	4629      	mov	r1, r5
 8010256:	f7f0 f82f 	bl	80002b8 <__aeabi_dsub>
 801025a:	a389      	add	r3, pc, #548	; (adr r3, 8010480 <__ieee754_rem_pio2+0x308>)
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	f7f0 f82c 	bl	80002bc <__adddf3>
 8010264:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8010268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801026c:	e7c4      	b.n	80101f8 <__ieee754_rem_pio2+0x80>
 801026e:	a386      	add	r3, pc, #536	; (adr r3, 8010488 <__ieee754_rem_pio2+0x310>)
 8010270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010274:	f7f0 f822 	bl	80002bc <__adddf3>
 8010278:	a385      	add	r3, pc, #532	; (adr r3, 8010490 <__ieee754_rem_pio2+0x318>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	4604      	mov	r4, r0
 8010280:	460d      	mov	r5, r1
 8010282:	f7f0 f81b 	bl	80002bc <__adddf3>
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	e9ca 2300 	strd	r2, r3, [sl]
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7f0 f811 	bl	80002b8 <__aeabi_dsub>
 8010296:	a37e      	add	r3, pc, #504	; (adr r3, 8010490 <__ieee754_rem_pio2+0x318>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	e7e0      	b.n	8010260 <__ieee754_rem_pio2+0xe8>
 801029e:	4b87      	ldr	r3, [pc, #540]	; (80104bc <__ieee754_rem_pio2+0x344>)
 80102a0:	4598      	cmp	r8, r3
 80102a2:	f300 80d8 	bgt.w	8010456 <__ieee754_rem_pio2+0x2de>
 80102a6:	f000 f96d 	bl	8010584 <fabs>
 80102aa:	ec55 4b10 	vmov	r4, r5, d0
 80102ae:	ee10 0a10 	vmov	r0, s0
 80102b2:	a379      	add	r3, pc, #484	; (adr r3, 8010498 <__ieee754_rem_pio2+0x320>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	4629      	mov	r1, r5
 80102ba:	f7f0 f9b5 	bl	8000628 <__aeabi_dmul>
 80102be:	4b80      	ldr	r3, [pc, #512]	; (80104c0 <__ieee754_rem_pio2+0x348>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	f7ef fffb 	bl	80002bc <__adddf3>
 80102c6:	f7f0 fc5f 	bl	8000b88 <__aeabi_d2iz>
 80102ca:	4683      	mov	fp, r0
 80102cc:	f7f0 f942 	bl	8000554 <__aeabi_i2d>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	ec43 2b18 	vmov	d8, r2, r3
 80102d8:	a367      	add	r3, pc, #412	; (adr r3, 8010478 <__ieee754_rem_pio2+0x300>)
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	f7f0 f9a3 	bl	8000628 <__aeabi_dmul>
 80102e2:	4602      	mov	r2, r0
 80102e4:	460b      	mov	r3, r1
 80102e6:	4620      	mov	r0, r4
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7ef ffe5 	bl	80002b8 <__aeabi_dsub>
 80102ee:	a364      	add	r3, pc, #400	; (adr r3, 8010480 <__ieee754_rem_pio2+0x308>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	4606      	mov	r6, r0
 80102f6:	460f      	mov	r7, r1
 80102f8:	ec51 0b18 	vmov	r0, r1, d8
 80102fc:	f7f0 f994 	bl	8000628 <__aeabi_dmul>
 8010300:	f1bb 0f1f 	cmp.w	fp, #31
 8010304:	4604      	mov	r4, r0
 8010306:	460d      	mov	r5, r1
 8010308:	dc0d      	bgt.n	8010326 <__ieee754_rem_pio2+0x1ae>
 801030a:	4b6e      	ldr	r3, [pc, #440]	; (80104c4 <__ieee754_rem_pio2+0x34c>)
 801030c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010314:	4543      	cmp	r3, r8
 8010316:	d006      	beq.n	8010326 <__ieee754_rem_pio2+0x1ae>
 8010318:	4622      	mov	r2, r4
 801031a:	462b      	mov	r3, r5
 801031c:	4630      	mov	r0, r6
 801031e:	4639      	mov	r1, r7
 8010320:	f7ef ffca 	bl	80002b8 <__aeabi_dsub>
 8010324:	e00e      	b.n	8010344 <__ieee754_rem_pio2+0x1cc>
 8010326:	462b      	mov	r3, r5
 8010328:	4622      	mov	r2, r4
 801032a:	4630      	mov	r0, r6
 801032c:	4639      	mov	r1, r7
 801032e:	f7ef ffc3 	bl	80002b8 <__aeabi_dsub>
 8010332:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010336:	9303      	str	r3, [sp, #12]
 8010338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801033c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010340:	2b10      	cmp	r3, #16
 8010342:	dc02      	bgt.n	801034a <__ieee754_rem_pio2+0x1d2>
 8010344:	e9ca 0100 	strd	r0, r1, [sl]
 8010348:	e039      	b.n	80103be <__ieee754_rem_pio2+0x246>
 801034a:	a34f      	add	r3, pc, #316	; (adr r3, 8010488 <__ieee754_rem_pio2+0x310>)
 801034c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010350:	ec51 0b18 	vmov	r0, r1, d8
 8010354:	f7f0 f968 	bl	8000628 <__aeabi_dmul>
 8010358:	4604      	mov	r4, r0
 801035a:	460d      	mov	r5, r1
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	4630      	mov	r0, r6
 8010362:	4639      	mov	r1, r7
 8010364:	f7ef ffa8 	bl	80002b8 <__aeabi_dsub>
 8010368:	4602      	mov	r2, r0
 801036a:	460b      	mov	r3, r1
 801036c:	4680      	mov	r8, r0
 801036e:	4689      	mov	r9, r1
 8010370:	4630      	mov	r0, r6
 8010372:	4639      	mov	r1, r7
 8010374:	f7ef ffa0 	bl	80002b8 <__aeabi_dsub>
 8010378:	4622      	mov	r2, r4
 801037a:	462b      	mov	r3, r5
 801037c:	f7ef ff9c 	bl	80002b8 <__aeabi_dsub>
 8010380:	a343      	add	r3, pc, #268	; (adr r3, 8010490 <__ieee754_rem_pio2+0x318>)
 8010382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010386:	4604      	mov	r4, r0
 8010388:	460d      	mov	r5, r1
 801038a:	ec51 0b18 	vmov	r0, r1, d8
 801038e:	f7f0 f94b 	bl	8000628 <__aeabi_dmul>
 8010392:	4622      	mov	r2, r4
 8010394:	462b      	mov	r3, r5
 8010396:	f7ef ff8f 	bl	80002b8 <__aeabi_dsub>
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	4640      	mov	r0, r8
 80103a4:	4649      	mov	r1, r9
 80103a6:	f7ef ff87 	bl	80002b8 <__aeabi_dsub>
 80103aa:	9a03      	ldr	r2, [sp, #12]
 80103ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	2b31      	cmp	r3, #49	; 0x31
 80103b4:	dc24      	bgt.n	8010400 <__ieee754_rem_pio2+0x288>
 80103b6:	e9ca 0100 	strd	r0, r1, [sl]
 80103ba:	4646      	mov	r6, r8
 80103bc:	464f      	mov	r7, r9
 80103be:	e9da 8900 	ldrd	r8, r9, [sl]
 80103c2:	4630      	mov	r0, r6
 80103c4:	4642      	mov	r2, r8
 80103c6:	464b      	mov	r3, r9
 80103c8:	4639      	mov	r1, r7
 80103ca:	f7ef ff75 	bl	80002b8 <__aeabi_dsub>
 80103ce:	462b      	mov	r3, r5
 80103d0:	4622      	mov	r2, r4
 80103d2:	f7ef ff71 	bl	80002b8 <__aeabi_dsub>
 80103d6:	9b02      	ldr	r3, [sp, #8]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80103de:	f6bf af0b 	bge.w	80101f8 <__ieee754_rem_pio2+0x80>
 80103e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80103e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80103ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103ee:	f8ca 8000 	str.w	r8, [sl]
 80103f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80103f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80103fa:	f1cb 0b00 	rsb	fp, fp, #0
 80103fe:	e6fb      	b.n	80101f8 <__ieee754_rem_pio2+0x80>
 8010400:	a327      	add	r3, pc, #156	; (adr r3, 80104a0 <__ieee754_rem_pio2+0x328>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	ec51 0b18 	vmov	r0, r1, d8
 801040a:	f7f0 f90d 	bl	8000628 <__aeabi_dmul>
 801040e:	4604      	mov	r4, r0
 8010410:	460d      	mov	r5, r1
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	4640      	mov	r0, r8
 8010418:	4649      	mov	r1, r9
 801041a:	f7ef ff4d 	bl	80002b8 <__aeabi_dsub>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	4606      	mov	r6, r0
 8010424:	460f      	mov	r7, r1
 8010426:	4640      	mov	r0, r8
 8010428:	4649      	mov	r1, r9
 801042a:	f7ef ff45 	bl	80002b8 <__aeabi_dsub>
 801042e:	4622      	mov	r2, r4
 8010430:	462b      	mov	r3, r5
 8010432:	f7ef ff41 	bl	80002b8 <__aeabi_dsub>
 8010436:	a31c      	add	r3, pc, #112	; (adr r3, 80104a8 <__ieee754_rem_pio2+0x330>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	4604      	mov	r4, r0
 801043e:	460d      	mov	r5, r1
 8010440:	ec51 0b18 	vmov	r0, r1, d8
 8010444:	f7f0 f8f0 	bl	8000628 <__aeabi_dmul>
 8010448:	4622      	mov	r2, r4
 801044a:	462b      	mov	r3, r5
 801044c:	f7ef ff34 	bl	80002b8 <__aeabi_dsub>
 8010450:	4604      	mov	r4, r0
 8010452:	460d      	mov	r5, r1
 8010454:	e760      	b.n	8010318 <__ieee754_rem_pio2+0x1a0>
 8010456:	4b1c      	ldr	r3, [pc, #112]	; (80104c8 <__ieee754_rem_pio2+0x350>)
 8010458:	4598      	cmp	r8, r3
 801045a:	dd37      	ble.n	80104cc <__ieee754_rem_pio2+0x354>
 801045c:	ee10 2a10 	vmov	r2, s0
 8010460:	462b      	mov	r3, r5
 8010462:	4620      	mov	r0, r4
 8010464:	4629      	mov	r1, r5
 8010466:	f7ef ff27 	bl	80002b8 <__aeabi_dsub>
 801046a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801046e:	e9ca 0100 	strd	r0, r1, [sl]
 8010472:	e695      	b.n	80101a0 <__ieee754_rem_pio2+0x28>
 8010474:	f3af 8000 	nop.w
 8010478:	54400000 	.word	0x54400000
 801047c:	3ff921fb 	.word	0x3ff921fb
 8010480:	1a626331 	.word	0x1a626331
 8010484:	3dd0b461 	.word	0x3dd0b461
 8010488:	1a600000 	.word	0x1a600000
 801048c:	3dd0b461 	.word	0x3dd0b461
 8010490:	2e037073 	.word	0x2e037073
 8010494:	3ba3198a 	.word	0x3ba3198a
 8010498:	6dc9c883 	.word	0x6dc9c883
 801049c:	3fe45f30 	.word	0x3fe45f30
 80104a0:	2e000000 	.word	0x2e000000
 80104a4:	3ba3198a 	.word	0x3ba3198a
 80104a8:	252049c1 	.word	0x252049c1
 80104ac:	397b839a 	.word	0x397b839a
 80104b0:	3fe921fb 	.word	0x3fe921fb
 80104b4:	4002d97b 	.word	0x4002d97b
 80104b8:	3ff921fb 	.word	0x3ff921fb
 80104bc:	413921fb 	.word	0x413921fb
 80104c0:	3fe00000 	.word	0x3fe00000
 80104c4:	0801147c 	.word	0x0801147c
 80104c8:	7fefffff 	.word	0x7fefffff
 80104cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80104d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80104d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80104d8:	4620      	mov	r0, r4
 80104da:	460d      	mov	r5, r1
 80104dc:	f7f0 fb54 	bl	8000b88 <__aeabi_d2iz>
 80104e0:	f7f0 f838 	bl	8000554 <__aeabi_i2d>
 80104e4:	4602      	mov	r2, r0
 80104e6:	460b      	mov	r3, r1
 80104e8:	4620      	mov	r0, r4
 80104ea:	4629      	mov	r1, r5
 80104ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104f0:	f7ef fee2 	bl	80002b8 <__aeabi_dsub>
 80104f4:	4b21      	ldr	r3, [pc, #132]	; (801057c <__ieee754_rem_pio2+0x404>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	f7f0 f896 	bl	8000628 <__aeabi_dmul>
 80104fc:	460d      	mov	r5, r1
 80104fe:	4604      	mov	r4, r0
 8010500:	f7f0 fb42 	bl	8000b88 <__aeabi_d2iz>
 8010504:	f7f0 f826 	bl	8000554 <__aeabi_i2d>
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	4620      	mov	r0, r4
 801050e:	4629      	mov	r1, r5
 8010510:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010514:	f7ef fed0 	bl	80002b8 <__aeabi_dsub>
 8010518:	4b18      	ldr	r3, [pc, #96]	; (801057c <__ieee754_rem_pio2+0x404>)
 801051a:	2200      	movs	r2, #0
 801051c:	f7f0 f884 	bl	8000628 <__aeabi_dmul>
 8010520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010524:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010528:	2703      	movs	r7, #3
 801052a:	2400      	movs	r4, #0
 801052c:	2500      	movs	r5, #0
 801052e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010532:	4622      	mov	r2, r4
 8010534:	462b      	mov	r3, r5
 8010536:	46b9      	mov	r9, r7
 8010538:	3f01      	subs	r7, #1
 801053a:	f7f0 fadd 	bl	8000af8 <__aeabi_dcmpeq>
 801053e:	2800      	cmp	r0, #0
 8010540:	d1f5      	bne.n	801052e <__ieee754_rem_pio2+0x3b6>
 8010542:	4b0f      	ldr	r3, [pc, #60]	; (8010580 <__ieee754_rem_pio2+0x408>)
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	2302      	movs	r3, #2
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	4632      	mov	r2, r6
 801054c:	464b      	mov	r3, r9
 801054e:	4651      	mov	r1, sl
 8010550:	a804      	add	r0, sp, #16
 8010552:	f000 f821 	bl	8010598 <__kernel_rem_pio2>
 8010556:	9b02      	ldr	r3, [sp, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	4683      	mov	fp, r0
 801055c:	f6bf ae4c 	bge.w	80101f8 <__ieee754_rem_pio2+0x80>
 8010560:	e9da 2100 	ldrd	r2, r1, [sl]
 8010564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010568:	e9ca 2300 	strd	r2, r3, [sl]
 801056c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010574:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010578:	e73f      	b.n	80103fa <__ieee754_rem_pio2+0x282>
 801057a:	bf00      	nop
 801057c:	41700000 	.word	0x41700000
 8010580:	080114fc 	.word	0x080114fc

08010584 <fabs>:
 8010584:	ec51 0b10 	vmov	r0, r1, d0
 8010588:	ee10 2a10 	vmov	r2, s0
 801058c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010590:	ec43 2b10 	vmov	d0, r2, r3
 8010594:	4770      	bx	lr
	...

08010598 <__kernel_rem_pio2>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	ed2d 8b02 	vpush	{d8}
 80105a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80105a4:	f112 0f14 	cmn.w	r2, #20
 80105a8:	9306      	str	r3, [sp, #24]
 80105aa:	9104      	str	r1, [sp, #16]
 80105ac:	4bc2      	ldr	r3, [pc, #776]	; (80108b8 <__kernel_rem_pio2+0x320>)
 80105ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80105b0:	9009      	str	r0, [sp, #36]	; 0x24
 80105b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	9b06      	ldr	r3, [sp, #24]
 80105ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80105be:	bfa8      	it	ge
 80105c0:	1ed4      	subge	r4, r2, #3
 80105c2:	9305      	str	r3, [sp, #20]
 80105c4:	bfb2      	itee	lt
 80105c6:	2400      	movlt	r4, #0
 80105c8:	2318      	movge	r3, #24
 80105ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80105ce:	f06f 0317 	mvn.w	r3, #23
 80105d2:	fb04 3303 	mla	r3, r4, r3, r3
 80105d6:	eb03 0a02 	add.w	sl, r3, r2
 80105da:	9b00      	ldr	r3, [sp, #0]
 80105dc:	9a05      	ldr	r2, [sp, #20]
 80105de:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80108a8 <__kernel_rem_pio2+0x310>
 80105e2:	eb03 0802 	add.w	r8, r3, r2
 80105e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80105e8:	1aa7      	subs	r7, r4, r2
 80105ea:	ae20      	add	r6, sp, #128	; 0x80
 80105ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80105f0:	2500      	movs	r5, #0
 80105f2:	4545      	cmp	r5, r8
 80105f4:	dd13      	ble.n	801061e <__kernel_rem_pio2+0x86>
 80105f6:	9b06      	ldr	r3, [sp, #24]
 80105f8:	aa20      	add	r2, sp, #128	; 0x80
 80105fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80105fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010602:	f04f 0800 	mov.w	r8, #0
 8010606:	9b00      	ldr	r3, [sp, #0]
 8010608:	4598      	cmp	r8, r3
 801060a:	dc31      	bgt.n	8010670 <__kernel_rem_pio2+0xd8>
 801060c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80108a8 <__kernel_rem_pio2+0x310>
 8010610:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010618:	462f      	mov	r7, r5
 801061a:	2600      	movs	r6, #0
 801061c:	e01b      	b.n	8010656 <__kernel_rem_pio2+0xbe>
 801061e:	42ef      	cmn	r7, r5
 8010620:	d407      	bmi.n	8010632 <__kernel_rem_pio2+0x9a>
 8010622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010626:	f7ef ff95 	bl	8000554 <__aeabi_i2d>
 801062a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801062e:	3501      	adds	r5, #1
 8010630:	e7df      	b.n	80105f2 <__kernel_rem_pio2+0x5a>
 8010632:	ec51 0b18 	vmov	r0, r1, d8
 8010636:	e7f8      	b.n	801062a <__kernel_rem_pio2+0x92>
 8010638:	e9d7 2300 	ldrd	r2, r3, [r7]
 801063c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010640:	f7ef fff2 	bl	8000628 <__aeabi_dmul>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801064c:	f7ef fe36 	bl	80002bc <__adddf3>
 8010650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010654:	3601      	adds	r6, #1
 8010656:	9b05      	ldr	r3, [sp, #20]
 8010658:	429e      	cmp	r6, r3
 801065a:	f1a7 0708 	sub.w	r7, r7, #8
 801065e:	ddeb      	ble.n	8010638 <__kernel_rem_pio2+0xa0>
 8010660:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010664:	f108 0801 	add.w	r8, r8, #1
 8010668:	ecab 7b02 	vstmia	fp!, {d7}
 801066c:	3508      	adds	r5, #8
 801066e:	e7ca      	b.n	8010606 <__kernel_rem_pio2+0x6e>
 8010670:	9b00      	ldr	r3, [sp, #0]
 8010672:	aa0c      	add	r2, sp, #48	; 0x30
 8010674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010678:	930b      	str	r3, [sp, #44]	; 0x2c
 801067a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801067c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010680:	9c00      	ldr	r4, [sp, #0]
 8010682:	930a      	str	r3, [sp, #40]	; 0x28
 8010684:	00e3      	lsls	r3, r4, #3
 8010686:	9308      	str	r3, [sp, #32]
 8010688:	ab98      	add	r3, sp, #608	; 0x260
 801068a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801068e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010692:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010696:	ab70      	add	r3, sp, #448	; 0x1c0
 8010698:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801069c:	46c3      	mov	fp, r8
 801069e:	46a1      	mov	r9, r4
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	f1a5 0508 	sub.w	r5, r5, #8
 80106a8:	dc77      	bgt.n	801079a <__kernel_rem_pio2+0x202>
 80106aa:	ec47 6b10 	vmov	d0, r6, r7
 80106ae:	4650      	mov	r0, sl
 80106b0:	f000 fac2 	bl	8010c38 <scalbn>
 80106b4:	ec57 6b10 	vmov	r6, r7, d0
 80106b8:	2200      	movs	r2, #0
 80106ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80106be:	ee10 0a10 	vmov	r0, s0
 80106c2:	4639      	mov	r1, r7
 80106c4:	f7ef ffb0 	bl	8000628 <__aeabi_dmul>
 80106c8:	ec41 0b10 	vmov	d0, r0, r1
 80106cc:	f000 fb34 	bl	8010d38 <floor>
 80106d0:	4b7a      	ldr	r3, [pc, #488]	; (80108bc <__kernel_rem_pio2+0x324>)
 80106d2:	ec51 0b10 	vmov	r0, r1, d0
 80106d6:	2200      	movs	r2, #0
 80106d8:	f7ef ffa6 	bl	8000628 <__aeabi_dmul>
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	4630      	mov	r0, r6
 80106e2:	4639      	mov	r1, r7
 80106e4:	f7ef fde8 	bl	80002b8 <__aeabi_dsub>
 80106e8:	460f      	mov	r7, r1
 80106ea:	4606      	mov	r6, r0
 80106ec:	f7f0 fa4c 	bl	8000b88 <__aeabi_d2iz>
 80106f0:	9002      	str	r0, [sp, #8]
 80106f2:	f7ef ff2f 	bl	8000554 <__aeabi_i2d>
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	4630      	mov	r0, r6
 80106fc:	4639      	mov	r1, r7
 80106fe:	f7ef fddb 	bl	80002b8 <__aeabi_dsub>
 8010702:	f1ba 0f00 	cmp.w	sl, #0
 8010706:	4606      	mov	r6, r0
 8010708:	460f      	mov	r7, r1
 801070a:	dd6d      	ble.n	80107e8 <__kernel_rem_pio2+0x250>
 801070c:	1e61      	subs	r1, r4, #1
 801070e:	ab0c      	add	r3, sp, #48	; 0x30
 8010710:	9d02      	ldr	r5, [sp, #8]
 8010712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010716:	f1ca 0018 	rsb	r0, sl, #24
 801071a:	fa43 f200 	asr.w	r2, r3, r0
 801071e:	4415      	add	r5, r2
 8010720:	4082      	lsls	r2, r0
 8010722:	1a9b      	subs	r3, r3, r2
 8010724:	aa0c      	add	r2, sp, #48	; 0x30
 8010726:	9502      	str	r5, [sp, #8]
 8010728:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801072c:	f1ca 0217 	rsb	r2, sl, #23
 8010730:	fa43 fb02 	asr.w	fp, r3, r2
 8010734:	f1bb 0f00 	cmp.w	fp, #0
 8010738:	dd65      	ble.n	8010806 <__kernel_rem_pio2+0x26e>
 801073a:	9b02      	ldr	r3, [sp, #8]
 801073c:	2200      	movs	r2, #0
 801073e:	3301      	adds	r3, #1
 8010740:	9302      	str	r3, [sp, #8]
 8010742:	4615      	mov	r5, r2
 8010744:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010748:	4294      	cmp	r4, r2
 801074a:	f300 809f 	bgt.w	801088c <__kernel_rem_pio2+0x2f4>
 801074e:	f1ba 0f00 	cmp.w	sl, #0
 8010752:	dd07      	ble.n	8010764 <__kernel_rem_pio2+0x1cc>
 8010754:	f1ba 0f01 	cmp.w	sl, #1
 8010758:	f000 80c1 	beq.w	80108de <__kernel_rem_pio2+0x346>
 801075c:	f1ba 0f02 	cmp.w	sl, #2
 8010760:	f000 80c7 	beq.w	80108f2 <__kernel_rem_pio2+0x35a>
 8010764:	f1bb 0f02 	cmp.w	fp, #2
 8010768:	d14d      	bne.n	8010806 <__kernel_rem_pio2+0x26e>
 801076a:	4632      	mov	r2, r6
 801076c:	463b      	mov	r3, r7
 801076e:	4954      	ldr	r1, [pc, #336]	; (80108c0 <__kernel_rem_pio2+0x328>)
 8010770:	2000      	movs	r0, #0
 8010772:	f7ef fda1 	bl	80002b8 <__aeabi_dsub>
 8010776:	4606      	mov	r6, r0
 8010778:	460f      	mov	r7, r1
 801077a:	2d00      	cmp	r5, #0
 801077c:	d043      	beq.n	8010806 <__kernel_rem_pio2+0x26e>
 801077e:	4650      	mov	r0, sl
 8010780:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80108b0 <__kernel_rem_pio2+0x318>
 8010784:	f000 fa58 	bl	8010c38 <scalbn>
 8010788:	4630      	mov	r0, r6
 801078a:	4639      	mov	r1, r7
 801078c:	ec53 2b10 	vmov	r2, r3, d0
 8010790:	f7ef fd92 	bl	80002b8 <__aeabi_dsub>
 8010794:	4606      	mov	r6, r0
 8010796:	460f      	mov	r7, r1
 8010798:	e035      	b.n	8010806 <__kernel_rem_pio2+0x26e>
 801079a:	4b4a      	ldr	r3, [pc, #296]	; (80108c4 <__kernel_rem_pio2+0x32c>)
 801079c:	2200      	movs	r2, #0
 801079e:	4630      	mov	r0, r6
 80107a0:	4639      	mov	r1, r7
 80107a2:	f7ef ff41 	bl	8000628 <__aeabi_dmul>
 80107a6:	f7f0 f9ef 	bl	8000b88 <__aeabi_d2iz>
 80107aa:	f7ef fed3 	bl	8000554 <__aeabi_i2d>
 80107ae:	4602      	mov	r2, r0
 80107b0:	460b      	mov	r3, r1
 80107b2:	ec43 2b18 	vmov	d8, r2, r3
 80107b6:	4b44      	ldr	r3, [pc, #272]	; (80108c8 <__kernel_rem_pio2+0x330>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	f7ef ff35 	bl	8000628 <__aeabi_dmul>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4630      	mov	r0, r6
 80107c4:	4639      	mov	r1, r7
 80107c6:	f7ef fd77 	bl	80002b8 <__aeabi_dsub>
 80107ca:	f7f0 f9dd 	bl	8000b88 <__aeabi_d2iz>
 80107ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107d2:	f84b 0b04 	str.w	r0, [fp], #4
 80107d6:	ec51 0b18 	vmov	r0, r1, d8
 80107da:	f7ef fd6f 	bl	80002bc <__adddf3>
 80107de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80107e2:	4606      	mov	r6, r0
 80107e4:	460f      	mov	r7, r1
 80107e6:	e75b      	b.n	80106a0 <__kernel_rem_pio2+0x108>
 80107e8:	d106      	bne.n	80107f8 <__kernel_rem_pio2+0x260>
 80107ea:	1e63      	subs	r3, r4, #1
 80107ec:	aa0c      	add	r2, sp, #48	; 0x30
 80107ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80107f6:	e79d      	b.n	8010734 <__kernel_rem_pio2+0x19c>
 80107f8:	4b34      	ldr	r3, [pc, #208]	; (80108cc <__kernel_rem_pio2+0x334>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	f7f0 f99a 	bl	8000b34 <__aeabi_dcmpge>
 8010800:	2800      	cmp	r0, #0
 8010802:	d140      	bne.n	8010886 <__kernel_rem_pio2+0x2ee>
 8010804:	4683      	mov	fp, r0
 8010806:	2200      	movs	r2, #0
 8010808:	2300      	movs	r3, #0
 801080a:	4630      	mov	r0, r6
 801080c:	4639      	mov	r1, r7
 801080e:	f7f0 f973 	bl	8000af8 <__aeabi_dcmpeq>
 8010812:	2800      	cmp	r0, #0
 8010814:	f000 80c1 	beq.w	801099a <__kernel_rem_pio2+0x402>
 8010818:	1e65      	subs	r5, r4, #1
 801081a:	462b      	mov	r3, r5
 801081c:	2200      	movs	r2, #0
 801081e:	9900      	ldr	r1, [sp, #0]
 8010820:	428b      	cmp	r3, r1
 8010822:	da6d      	bge.n	8010900 <__kernel_rem_pio2+0x368>
 8010824:	2a00      	cmp	r2, #0
 8010826:	f000 808a 	beq.w	801093e <__kernel_rem_pio2+0x3a6>
 801082a:	ab0c      	add	r3, sp, #48	; 0x30
 801082c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010830:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 80ae 	beq.w	8010996 <__kernel_rem_pio2+0x3fe>
 801083a:	4650      	mov	r0, sl
 801083c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80108b0 <__kernel_rem_pio2+0x318>
 8010840:	f000 f9fa 	bl	8010c38 <scalbn>
 8010844:	1c6b      	adds	r3, r5, #1
 8010846:	00da      	lsls	r2, r3, #3
 8010848:	9205      	str	r2, [sp, #20]
 801084a:	ec57 6b10 	vmov	r6, r7, d0
 801084e:	aa70      	add	r2, sp, #448	; 0x1c0
 8010850:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80108c4 <__kernel_rem_pio2+0x32c>
 8010854:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010858:	462c      	mov	r4, r5
 801085a:	f04f 0800 	mov.w	r8, #0
 801085e:	2c00      	cmp	r4, #0
 8010860:	f280 80d4 	bge.w	8010a0c <__kernel_rem_pio2+0x474>
 8010864:	462c      	mov	r4, r5
 8010866:	2c00      	cmp	r4, #0
 8010868:	f2c0 8102 	blt.w	8010a70 <__kernel_rem_pio2+0x4d8>
 801086c:	4b18      	ldr	r3, [pc, #96]	; (80108d0 <__kernel_rem_pio2+0x338>)
 801086e:	461e      	mov	r6, r3
 8010870:	ab70      	add	r3, sp, #448	; 0x1c0
 8010872:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010876:	1b2b      	subs	r3, r5, r4
 8010878:	f04f 0900 	mov.w	r9, #0
 801087c:	f04f 0a00 	mov.w	sl, #0
 8010880:	2700      	movs	r7, #0
 8010882:	9306      	str	r3, [sp, #24]
 8010884:	e0e6      	b.n	8010a54 <__kernel_rem_pio2+0x4bc>
 8010886:	f04f 0b02 	mov.w	fp, #2
 801088a:	e756      	b.n	801073a <__kernel_rem_pio2+0x1a2>
 801088c:	f8d8 3000 	ldr.w	r3, [r8]
 8010890:	bb05      	cbnz	r5, 80108d4 <__kernel_rem_pio2+0x33c>
 8010892:	b123      	cbz	r3, 801089e <__kernel_rem_pio2+0x306>
 8010894:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010898:	f8c8 3000 	str.w	r3, [r8]
 801089c:	2301      	movs	r3, #1
 801089e:	3201      	adds	r2, #1
 80108a0:	f108 0804 	add.w	r8, r8, #4
 80108a4:	461d      	mov	r5, r3
 80108a6:	e74f      	b.n	8010748 <__kernel_rem_pio2+0x1b0>
	...
 80108b4:	3ff00000 	.word	0x3ff00000
 80108b8:	08011648 	.word	0x08011648
 80108bc:	40200000 	.word	0x40200000
 80108c0:	3ff00000 	.word	0x3ff00000
 80108c4:	3e700000 	.word	0x3e700000
 80108c8:	41700000 	.word	0x41700000
 80108cc:	3fe00000 	.word	0x3fe00000
 80108d0:	08011608 	.word	0x08011608
 80108d4:	1acb      	subs	r3, r1, r3
 80108d6:	f8c8 3000 	str.w	r3, [r8]
 80108da:	462b      	mov	r3, r5
 80108dc:	e7df      	b.n	801089e <__kernel_rem_pio2+0x306>
 80108de:	1e62      	subs	r2, r4, #1
 80108e0:	ab0c      	add	r3, sp, #48	; 0x30
 80108e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80108ea:	a90c      	add	r1, sp, #48	; 0x30
 80108ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80108f0:	e738      	b.n	8010764 <__kernel_rem_pio2+0x1cc>
 80108f2:	1e62      	subs	r2, r4, #1
 80108f4:	ab0c      	add	r3, sp, #48	; 0x30
 80108f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80108fe:	e7f4      	b.n	80108ea <__kernel_rem_pio2+0x352>
 8010900:	a90c      	add	r1, sp, #48	; 0x30
 8010902:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010906:	3b01      	subs	r3, #1
 8010908:	430a      	orrs	r2, r1
 801090a:	e788      	b.n	801081e <__kernel_rem_pio2+0x286>
 801090c:	3301      	adds	r3, #1
 801090e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010912:	2900      	cmp	r1, #0
 8010914:	d0fa      	beq.n	801090c <__kernel_rem_pio2+0x374>
 8010916:	9a08      	ldr	r2, [sp, #32]
 8010918:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801091c:	446a      	add	r2, sp
 801091e:	3a98      	subs	r2, #152	; 0x98
 8010920:	9208      	str	r2, [sp, #32]
 8010922:	9a06      	ldr	r2, [sp, #24]
 8010924:	a920      	add	r1, sp, #128	; 0x80
 8010926:	18a2      	adds	r2, r4, r2
 8010928:	18e3      	adds	r3, r4, r3
 801092a:	f104 0801 	add.w	r8, r4, #1
 801092e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010932:	9302      	str	r3, [sp, #8]
 8010934:	9b02      	ldr	r3, [sp, #8]
 8010936:	4543      	cmp	r3, r8
 8010938:	da04      	bge.n	8010944 <__kernel_rem_pio2+0x3ac>
 801093a:	461c      	mov	r4, r3
 801093c:	e6a2      	b.n	8010684 <__kernel_rem_pio2+0xec>
 801093e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010940:	2301      	movs	r3, #1
 8010942:	e7e4      	b.n	801090e <__kernel_rem_pio2+0x376>
 8010944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010946:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801094a:	f7ef fe03 	bl	8000554 <__aeabi_i2d>
 801094e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010954:	46ab      	mov	fp, r5
 8010956:	461c      	mov	r4, r3
 8010958:	f04f 0900 	mov.w	r9, #0
 801095c:	2600      	movs	r6, #0
 801095e:	2700      	movs	r7, #0
 8010960:	9b05      	ldr	r3, [sp, #20]
 8010962:	4599      	cmp	r9, r3
 8010964:	dd06      	ble.n	8010974 <__kernel_rem_pio2+0x3dc>
 8010966:	9b08      	ldr	r3, [sp, #32]
 8010968:	e8e3 6702 	strd	r6, r7, [r3], #8
 801096c:	f108 0801 	add.w	r8, r8, #1
 8010970:	9308      	str	r3, [sp, #32]
 8010972:	e7df      	b.n	8010934 <__kernel_rem_pio2+0x39c>
 8010974:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010978:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801097c:	f7ef fe54 	bl	8000628 <__aeabi_dmul>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4630      	mov	r0, r6
 8010986:	4639      	mov	r1, r7
 8010988:	f7ef fc98 	bl	80002bc <__adddf3>
 801098c:	f109 0901 	add.w	r9, r9, #1
 8010990:	4606      	mov	r6, r0
 8010992:	460f      	mov	r7, r1
 8010994:	e7e4      	b.n	8010960 <__kernel_rem_pio2+0x3c8>
 8010996:	3d01      	subs	r5, #1
 8010998:	e747      	b.n	801082a <__kernel_rem_pio2+0x292>
 801099a:	ec47 6b10 	vmov	d0, r6, r7
 801099e:	f1ca 0000 	rsb	r0, sl, #0
 80109a2:	f000 f949 	bl	8010c38 <scalbn>
 80109a6:	ec57 6b10 	vmov	r6, r7, d0
 80109aa:	4ba0      	ldr	r3, [pc, #640]	; (8010c2c <__kernel_rem_pio2+0x694>)
 80109ac:	ee10 0a10 	vmov	r0, s0
 80109b0:	2200      	movs	r2, #0
 80109b2:	4639      	mov	r1, r7
 80109b4:	f7f0 f8be 	bl	8000b34 <__aeabi_dcmpge>
 80109b8:	b1f8      	cbz	r0, 80109fa <__kernel_rem_pio2+0x462>
 80109ba:	4b9d      	ldr	r3, [pc, #628]	; (8010c30 <__kernel_rem_pio2+0x698>)
 80109bc:	2200      	movs	r2, #0
 80109be:	4630      	mov	r0, r6
 80109c0:	4639      	mov	r1, r7
 80109c2:	f7ef fe31 	bl	8000628 <__aeabi_dmul>
 80109c6:	f7f0 f8df 	bl	8000b88 <__aeabi_d2iz>
 80109ca:	4680      	mov	r8, r0
 80109cc:	f7ef fdc2 	bl	8000554 <__aeabi_i2d>
 80109d0:	4b96      	ldr	r3, [pc, #600]	; (8010c2c <__kernel_rem_pio2+0x694>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	f7ef fe28 	bl	8000628 <__aeabi_dmul>
 80109d8:	460b      	mov	r3, r1
 80109da:	4602      	mov	r2, r0
 80109dc:	4639      	mov	r1, r7
 80109de:	4630      	mov	r0, r6
 80109e0:	f7ef fc6a 	bl	80002b8 <__aeabi_dsub>
 80109e4:	f7f0 f8d0 	bl	8000b88 <__aeabi_d2iz>
 80109e8:	1c65      	adds	r5, r4, #1
 80109ea:	ab0c      	add	r3, sp, #48	; 0x30
 80109ec:	f10a 0a18 	add.w	sl, sl, #24
 80109f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80109f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80109f8:	e71f      	b.n	801083a <__kernel_rem_pio2+0x2a2>
 80109fa:	4630      	mov	r0, r6
 80109fc:	4639      	mov	r1, r7
 80109fe:	f7f0 f8c3 	bl	8000b88 <__aeabi_d2iz>
 8010a02:	ab0c      	add	r3, sp, #48	; 0x30
 8010a04:	4625      	mov	r5, r4
 8010a06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a0a:	e716      	b.n	801083a <__kernel_rem_pio2+0x2a2>
 8010a0c:	ab0c      	add	r3, sp, #48	; 0x30
 8010a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010a12:	f7ef fd9f 	bl	8000554 <__aeabi_i2d>
 8010a16:	4632      	mov	r2, r6
 8010a18:	463b      	mov	r3, r7
 8010a1a:	f7ef fe05 	bl	8000628 <__aeabi_dmul>
 8010a1e:	4642      	mov	r2, r8
 8010a20:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010a24:	464b      	mov	r3, r9
 8010a26:	4630      	mov	r0, r6
 8010a28:	4639      	mov	r1, r7
 8010a2a:	f7ef fdfd 	bl	8000628 <__aeabi_dmul>
 8010a2e:	3c01      	subs	r4, #1
 8010a30:	4606      	mov	r6, r0
 8010a32:	460f      	mov	r7, r1
 8010a34:	e713      	b.n	801085e <__kernel_rem_pio2+0x2c6>
 8010a36:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010a3a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010a3e:	f7ef fdf3 	bl	8000628 <__aeabi_dmul>
 8010a42:	4602      	mov	r2, r0
 8010a44:	460b      	mov	r3, r1
 8010a46:	4648      	mov	r0, r9
 8010a48:	4651      	mov	r1, sl
 8010a4a:	f7ef fc37 	bl	80002bc <__adddf3>
 8010a4e:	3701      	adds	r7, #1
 8010a50:	4681      	mov	r9, r0
 8010a52:	468a      	mov	sl, r1
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	429f      	cmp	r7, r3
 8010a58:	dc02      	bgt.n	8010a60 <__kernel_rem_pio2+0x4c8>
 8010a5a:	9b06      	ldr	r3, [sp, #24]
 8010a5c:	429f      	cmp	r7, r3
 8010a5e:	ddea      	ble.n	8010a36 <__kernel_rem_pio2+0x49e>
 8010a60:	9a06      	ldr	r2, [sp, #24]
 8010a62:	ab48      	add	r3, sp, #288	; 0x120
 8010a64:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010a68:	e9c6 9a00 	strd	r9, sl, [r6]
 8010a6c:	3c01      	subs	r4, #1
 8010a6e:	e6fa      	b.n	8010866 <__kernel_rem_pio2+0x2ce>
 8010a70:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010a72:	2b02      	cmp	r3, #2
 8010a74:	dc0b      	bgt.n	8010a8e <__kernel_rem_pio2+0x4f6>
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dc39      	bgt.n	8010aee <__kernel_rem_pio2+0x556>
 8010a7a:	d05d      	beq.n	8010b38 <__kernel_rem_pio2+0x5a0>
 8010a7c:	9b02      	ldr	r3, [sp, #8]
 8010a7e:	f003 0007 	and.w	r0, r3, #7
 8010a82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010a86:	ecbd 8b02 	vpop	{d8}
 8010a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a8e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010a90:	2b03      	cmp	r3, #3
 8010a92:	d1f3      	bne.n	8010a7c <__kernel_rem_pio2+0x4e4>
 8010a94:	9b05      	ldr	r3, [sp, #20]
 8010a96:	9500      	str	r5, [sp, #0]
 8010a98:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010a9c:	eb0d 0403 	add.w	r4, sp, r3
 8010aa0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010aa4:	46a2      	mov	sl, r4
 8010aa6:	9b00      	ldr	r3, [sp, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f1aa 0a08 	sub.w	sl, sl, #8
 8010aae:	dc69      	bgt.n	8010b84 <__kernel_rem_pio2+0x5ec>
 8010ab0:	46aa      	mov	sl, r5
 8010ab2:	f1ba 0f01 	cmp.w	sl, #1
 8010ab6:	f1a4 0408 	sub.w	r4, r4, #8
 8010aba:	f300 8083 	bgt.w	8010bc4 <__kernel_rem_pio2+0x62c>
 8010abe:	9c05      	ldr	r4, [sp, #20]
 8010ac0:	ab48      	add	r3, sp, #288	; 0x120
 8010ac2:	441c      	add	r4, r3
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	2d01      	cmp	r5, #1
 8010aca:	f300 809a 	bgt.w	8010c02 <__kernel_rem_pio2+0x66a>
 8010ace:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010ad2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010ad6:	f1bb 0f00 	cmp.w	fp, #0
 8010ada:	f040 8098 	bne.w	8010c0e <__kernel_rem_pio2+0x676>
 8010ade:	9b04      	ldr	r3, [sp, #16]
 8010ae0:	e9c3 7800 	strd	r7, r8, [r3]
 8010ae4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010ae8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010aec:	e7c6      	b.n	8010a7c <__kernel_rem_pio2+0x4e4>
 8010aee:	9e05      	ldr	r6, [sp, #20]
 8010af0:	ab48      	add	r3, sp, #288	; 0x120
 8010af2:	441e      	add	r6, r3
 8010af4:	462c      	mov	r4, r5
 8010af6:	2000      	movs	r0, #0
 8010af8:	2100      	movs	r1, #0
 8010afa:	2c00      	cmp	r4, #0
 8010afc:	da33      	bge.n	8010b66 <__kernel_rem_pio2+0x5ce>
 8010afe:	f1bb 0f00 	cmp.w	fp, #0
 8010b02:	d036      	beq.n	8010b72 <__kernel_rem_pio2+0x5da>
 8010b04:	4602      	mov	r2, r0
 8010b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b0a:	9c04      	ldr	r4, [sp, #16]
 8010b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010b18:	f7ef fbce 	bl	80002b8 <__aeabi_dsub>
 8010b1c:	ae4a      	add	r6, sp, #296	; 0x128
 8010b1e:	2401      	movs	r4, #1
 8010b20:	42a5      	cmp	r5, r4
 8010b22:	da29      	bge.n	8010b78 <__kernel_rem_pio2+0x5e0>
 8010b24:	f1bb 0f00 	cmp.w	fp, #0
 8010b28:	d002      	beq.n	8010b30 <__kernel_rem_pio2+0x598>
 8010b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b2e:	4619      	mov	r1, r3
 8010b30:	9b04      	ldr	r3, [sp, #16]
 8010b32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b36:	e7a1      	b.n	8010a7c <__kernel_rem_pio2+0x4e4>
 8010b38:	9c05      	ldr	r4, [sp, #20]
 8010b3a:	ab48      	add	r3, sp, #288	; 0x120
 8010b3c:	441c      	add	r4, r3
 8010b3e:	2000      	movs	r0, #0
 8010b40:	2100      	movs	r1, #0
 8010b42:	2d00      	cmp	r5, #0
 8010b44:	da09      	bge.n	8010b5a <__kernel_rem_pio2+0x5c2>
 8010b46:	f1bb 0f00 	cmp.w	fp, #0
 8010b4a:	d002      	beq.n	8010b52 <__kernel_rem_pio2+0x5ba>
 8010b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b50:	4619      	mov	r1, r3
 8010b52:	9b04      	ldr	r3, [sp, #16]
 8010b54:	e9c3 0100 	strd	r0, r1, [r3]
 8010b58:	e790      	b.n	8010a7c <__kernel_rem_pio2+0x4e4>
 8010b5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010b5e:	f7ef fbad 	bl	80002bc <__adddf3>
 8010b62:	3d01      	subs	r5, #1
 8010b64:	e7ed      	b.n	8010b42 <__kernel_rem_pio2+0x5aa>
 8010b66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010b6a:	f7ef fba7 	bl	80002bc <__adddf3>
 8010b6e:	3c01      	subs	r4, #1
 8010b70:	e7c3      	b.n	8010afa <__kernel_rem_pio2+0x562>
 8010b72:	4602      	mov	r2, r0
 8010b74:	460b      	mov	r3, r1
 8010b76:	e7c8      	b.n	8010b0a <__kernel_rem_pio2+0x572>
 8010b78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010b7c:	f7ef fb9e 	bl	80002bc <__adddf3>
 8010b80:	3401      	adds	r4, #1
 8010b82:	e7cd      	b.n	8010b20 <__kernel_rem_pio2+0x588>
 8010b84:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b88:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010b8c:	9b00      	ldr	r3, [sp, #0]
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	4632      	mov	r2, r6
 8010b94:	463b      	mov	r3, r7
 8010b96:	4640      	mov	r0, r8
 8010b98:	4649      	mov	r1, r9
 8010b9a:	f7ef fb8f 	bl	80002bc <__adddf3>
 8010b9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	4640      	mov	r0, r8
 8010ba8:	4649      	mov	r1, r9
 8010baa:	f7ef fb85 	bl	80002b8 <__aeabi_dsub>
 8010bae:	4632      	mov	r2, r6
 8010bb0:	463b      	mov	r3, r7
 8010bb2:	f7ef fb83 	bl	80002bc <__adddf3>
 8010bb6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010bba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bbe:	ed8a 7b00 	vstr	d7, [sl]
 8010bc2:	e770      	b.n	8010aa6 <__kernel_rem_pio2+0x50e>
 8010bc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010bc8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010bcc:	4640      	mov	r0, r8
 8010bce:	4632      	mov	r2, r6
 8010bd0:	463b      	mov	r3, r7
 8010bd2:	4649      	mov	r1, r9
 8010bd4:	f7ef fb72 	bl	80002bc <__adddf3>
 8010bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	f7ef fb68 	bl	80002b8 <__aeabi_dsub>
 8010be8:	4632      	mov	r2, r6
 8010bea:	463b      	mov	r3, r7
 8010bec:	f7ef fb66 	bl	80002bc <__adddf3>
 8010bf0:	ed9d 7b00 	vldr	d7, [sp]
 8010bf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010bf8:	ed84 7b00 	vstr	d7, [r4]
 8010bfc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010c00:	e757      	b.n	8010ab2 <__kernel_rem_pio2+0x51a>
 8010c02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c06:	f7ef fb59 	bl	80002bc <__adddf3>
 8010c0a:	3d01      	subs	r5, #1
 8010c0c:	e75c      	b.n	8010ac8 <__kernel_rem_pio2+0x530>
 8010c0e:	9b04      	ldr	r3, [sp, #16]
 8010c10:	9a04      	ldr	r2, [sp, #16]
 8010c12:	601f      	str	r7, [r3, #0]
 8010c14:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010c18:	605c      	str	r4, [r3, #4]
 8010c1a:	609d      	str	r5, [r3, #8]
 8010c1c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c20:	60d3      	str	r3, [r2, #12]
 8010c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c26:	6110      	str	r0, [r2, #16]
 8010c28:	6153      	str	r3, [r2, #20]
 8010c2a:	e727      	b.n	8010a7c <__kernel_rem_pio2+0x4e4>
 8010c2c:	41700000 	.word	0x41700000
 8010c30:	3e700000 	.word	0x3e700000
 8010c34:	00000000 	.word	0x00000000

08010c38 <scalbn>:
 8010c38:	b570      	push	{r4, r5, r6, lr}
 8010c3a:	ec55 4b10 	vmov	r4, r5, d0
 8010c3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010c42:	4606      	mov	r6, r0
 8010c44:	462b      	mov	r3, r5
 8010c46:	b999      	cbnz	r1, 8010c70 <scalbn+0x38>
 8010c48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c4c:	4323      	orrs	r3, r4
 8010c4e:	d03f      	beq.n	8010cd0 <scalbn+0x98>
 8010c50:	4b35      	ldr	r3, [pc, #212]	; (8010d28 <scalbn+0xf0>)
 8010c52:	4629      	mov	r1, r5
 8010c54:	ee10 0a10 	vmov	r0, s0
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f7ef fce5 	bl	8000628 <__aeabi_dmul>
 8010c5e:	4b33      	ldr	r3, [pc, #204]	; (8010d2c <scalbn+0xf4>)
 8010c60:	429e      	cmp	r6, r3
 8010c62:	4604      	mov	r4, r0
 8010c64:	460d      	mov	r5, r1
 8010c66:	da10      	bge.n	8010c8a <scalbn+0x52>
 8010c68:	a327      	add	r3, pc, #156	; (adr r3, 8010d08 <scalbn+0xd0>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	e01f      	b.n	8010cb0 <scalbn+0x78>
 8010c70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010c74:	4291      	cmp	r1, r2
 8010c76:	d10c      	bne.n	8010c92 <scalbn+0x5a>
 8010c78:	ee10 2a10 	vmov	r2, s0
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	4629      	mov	r1, r5
 8010c80:	f7ef fb1c 	bl	80002bc <__adddf3>
 8010c84:	4604      	mov	r4, r0
 8010c86:	460d      	mov	r5, r1
 8010c88:	e022      	b.n	8010cd0 <scalbn+0x98>
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c90:	3936      	subs	r1, #54	; 0x36
 8010c92:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010c96:	4296      	cmp	r6, r2
 8010c98:	dd0d      	ble.n	8010cb6 <scalbn+0x7e>
 8010c9a:	2d00      	cmp	r5, #0
 8010c9c:	a11c      	add	r1, pc, #112	; (adr r1, 8010d10 <scalbn+0xd8>)
 8010c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ca2:	da02      	bge.n	8010caa <scalbn+0x72>
 8010ca4:	a11c      	add	r1, pc, #112	; (adr r1, 8010d18 <scalbn+0xe0>)
 8010ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010caa:	a319      	add	r3, pc, #100	; (adr r3, 8010d10 <scalbn+0xd8>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	f7ef fcba 	bl	8000628 <__aeabi_dmul>
 8010cb4:	e7e6      	b.n	8010c84 <scalbn+0x4c>
 8010cb6:	1872      	adds	r2, r6, r1
 8010cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010cbc:	428a      	cmp	r2, r1
 8010cbe:	dcec      	bgt.n	8010c9a <scalbn+0x62>
 8010cc0:	2a00      	cmp	r2, #0
 8010cc2:	dd08      	ble.n	8010cd6 <scalbn+0x9e>
 8010cc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010cc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ccc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010cd0:	ec45 4b10 	vmov	d0, r4, r5
 8010cd4:	bd70      	pop	{r4, r5, r6, pc}
 8010cd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010cda:	da08      	bge.n	8010cee <scalbn+0xb6>
 8010cdc:	2d00      	cmp	r5, #0
 8010cde:	a10a      	add	r1, pc, #40	; (adr r1, 8010d08 <scalbn+0xd0>)
 8010ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ce4:	dac0      	bge.n	8010c68 <scalbn+0x30>
 8010ce6:	a10e      	add	r1, pc, #56	; (adr r1, 8010d20 <scalbn+0xe8>)
 8010ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cec:	e7bc      	b.n	8010c68 <scalbn+0x30>
 8010cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010cf2:	3236      	adds	r2, #54	; 0x36
 8010cf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010cf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	4b0c      	ldr	r3, [pc, #48]	; (8010d30 <scalbn+0xf8>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	e7d5      	b.n	8010cb0 <scalbn+0x78>
 8010d04:	f3af 8000 	nop.w
 8010d08:	c2f8f359 	.word	0xc2f8f359
 8010d0c:	01a56e1f 	.word	0x01a56e1f
 8010d10:	8800759c 	.word	0x8800759c
 8010d14:	7e37e43c 	.word	0x7e37e43c
 8010d18:	8800759c 	.word	0x8800759c
 8010d1c:	fe37e43c 	.word	0xfe37e43c
 8010d20:	c2f8f359 	.word	0xc2f8f359
 8010d24:	81a56e1f 	.word	0x81a56e1f
 8010d28:	43500000 	.word	0x43500000
 8010d2c:	ffff3cb0 	.word	0xffff3cb0
 8010d30:	3c900000 	.word	0x3c900000
 8010d34:	00000000 	.word	0x00000000

08010d38 <floor>:
 8010d38:	ec51 0b10 	vmov	r0, r1, d0
 8010d3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010d48:	2e13      	cmp	r6, #19
 8010d4a:	ee10 5a10 	vmov	r5, s0
 8010d4e:	ee10 8a10 	vmov	r8, s0
 8010d52:	460c      	mov	r4, r1
 8010d54:	dc31      	bgt.n	8010dba <floor+0x82>
 8010d56:	2e00      	cmp	r6, #0
 8010d58:	da14      	bge.n	8010d84 <floor+0x4c>
 8010d5a:	a333      	add	r3, pc, #204	; (adr r3, 8010e28 <floor+0xf0>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f7ef faac 	bl	80002bc <__adddf3>
 8010d64:	2200      	movs	r2, #0
 8010d66:	2300      	movs	r3, #0
 8010d68:	f7ef feee 	bl	8000b48 <__aeabi_dcmpgt>
 8010d6c:	b138      	cbz	r0, 8010d7e <floor+0x46>
 8010d6e:	2c00      	cmp	r4, #0
 8010d70:	da53      	bge.n	8010e1a <floor+0xe2>
 8010d72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010d76:	4325      	orrs	r5, r4
 8010d78:	d052      	beq.n	8010e20 <floor+0xe8>
 8010d7a:	4c2d      	ldr	r4, [pc, #180]	; (8010e30 <floor+0xf8>)
 8010d7c:	2500      	movs	r5, #0
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4628      	mov	r0, r5
 8010d82:	e024      	b.n	8010dce <floor+0x96>
 8010d84:	4f2b      	ldr	r7, [pc, #172]	; (8010e34 <floor+0xfc>)
 8010d86:	4137      	asrs	r7, r6
 8010d88:	ea01 0307 	and.w	r3, r1, r7
 8010d8c:	4303      	orrs	r3, r0
 8010d8e:	d01e      	beq.n	8010dce <floor+0x96>
 8010d90:	a325      	add	r3, pc, #148	; (adr r3, 8010e28 <floor+0xf0>)
 8010d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d96:	f7ef fa91 	bl	80002bc <__adddf3>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f7ef fed3 	bl	8000b48 <__aeabi_dcmpgt>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d0eb      	beq.n	8010d7e <floor+0x46>
 8010da6:	2c00      	cmp	r4, #0
 8010da8:	bfbe      	ittt	lt
 8010daa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010dae:	4133      	asrlt	r3, r6
 8010db0:	18e4      	addlt	r4, r4, r3
 8010db2:	ea24 0407 	bic.w	r4, r4, r7
 8010db6:	2500      	movs	r5, #0
 8010db8:	e7e1      	b.n	8010d7e <floor+0x46>
 8010dba:	2e33      	cmp	r6, #51	; 0x33
 8010dbc:	dd0b      	ble.n	8010dd6 <floor+0x9e>
 8010dbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010dc2:	d104      	bne.n	8010dce <floor+0x96>
 8010dc4:	ee10 2a10 	vmov	r2, s0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	f7ef fa77 	bl	80002bc <__adddf3>
 8010dce:	ec41 0b10 	vmov	d0, r0, r1
 8010dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010dda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010dde:	40df      	lsrs	r7, r3
 8010de0:	4238      	tst	r0, r7
 8010de2:	d0f4      	beq.n	8010dce <floor+0x96>
 8010de4:	a310      	add	r3, pc, #64	; (adr r3, 8010e28 <floor+0xf0>)
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	f7ef fa67 	bl	80002bc <__adddf3>
 8010dee:	2200      	movs	r2, #0
 8010df0:	2300      	movs	r3, #0
 8010df2:	f7ef fea9 	bl	8000b48 <__aeabi_dcmpgt>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0c1      	beq.n	8010d7e <floor+0x46>
 8010dfa:	2c00      	cmp	r4, #0
 8010dfc:	da0a      	bge.n	8010e14 <floor+0xdc>
 8010dfe:	2e14      	cmp	r6, #20
 8010e00:	d101      	bne.n	8010e06 <floor+0xce>
 8010e02:	3401      	adds	r4, #1
 8010e04:	e006      	b.n	8010e14 <floor+0xdc>
 8010e06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	40b3      	lsls	r3, r6
 8010e0e:	441d      	add	r5, r3
 8010e10:	45a8      	cmp	r8, r5
 8010e12:	d8f6      	bhi.n	8010e02 <floor+0xca>
 8010e14:	ea25 0507 	bic.w	r5, r5, r7
 8010e18:	e7b1      	b.n	8010d7e <floor+0x46>
 8010e1a:	2500      	movs	r5, #0
 8010e1c:	462c      	mov	r4, r5
 8010e1e:	e7ae      	b.n	8010d7e <floor+0x46>
 8010e20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010e24:	e7ab      	b.n	8010d7e <floor+0x46>
 8010e26:	bf00      	nop
 8010e28:	8800759c 	.word	0x8800759c
 8010e2c:	7e37e43c 	.word	0x7e37e43c
 8010e30:	bff00000 	.word	0xbff00000
 8010e34:	000fffff 	.word	0x000fffff

08010e38 <_init>:
 8010e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3a:	bf00      	nop
 8010e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e3e:	bc08      	pop	{r3}
 8010e40:	469e      	mov	lr, r3
 8010e42:	4770      	bx	lr

08010e44 <_fini>:
 8010e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e46:	bf00      	nop
 8010e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e4a:	bc08      	pop	{r3}
 8010e4c:	469e      	mov	lr, r3
 8010e4e:	4770      	bx	lr
