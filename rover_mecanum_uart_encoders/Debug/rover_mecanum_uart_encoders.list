
rover_mecanum_uart_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  080131a0  080131a0  000231a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a98  08013a98  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08013a98  08013a98  00023a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013aa0  08013aa0  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013aa0  08013aa0  00023aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013aa4  08013aa4  00023aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08013aa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a8  200002b4  08013d5c  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000575c  08013d5c  0003575c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f977  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004405  00000000  00000000  0004fc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  000540a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000152f  00000000  00000000  00055b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ee2  00000000  00000000  000570c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c39a  00000000  00000000  0005cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a01f2  00000000  00000000  00079343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c9c  00000000  00000000  00119538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  001221d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013188 	.word	0x08013188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	08013188 	.word	0x08013188

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <lwpkt_lwrb_uart_init>:
UART_HandleTypeDef* huart_p;


void lwpkt_lwrb_uart_task(void* argument);

void lwpkt_lwrb_uart_init(const lwpkt_lwrb_uart_init_data_t* init_data){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_taskHandle = osThreadNew(lwpkt_lwrb_uart_task, init_data, &lwpkt_lwrb_uart_task_attributes);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <lwpkt_lwrb_uart_init+0x20>)
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <lwpkt_lwrb_uart_init+0x24>)
 800102e:	f005 fc05 	bl	800683c <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <lwpkt_lwrb_uart_init+0x28>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080133d8 	.word	0x080133d8
 8001044:	080010cd 	.word	0x080010cd
 8001048:	20000918 	.word	0x20000918

0800104c <uart_tx_rb_evt_fn>:

void uart_tx_rb_evt_fn(lwrb_t* buff, lwrb_evt_type_t type, lwrb_sz_t len){
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	72fb      	strb	r3, [r7, #11]
	switch (type) {
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d12d      	bne.n	80010bc <uart_tx_rb_evt_fn+0x70>
		case LWRB_EVT_WRITE:
			lwrb_sz_t size = lwrb_get_linear_block_read_length(buff);
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f00b fd67 	bl	800cb34 <lwrb_get_linear_block_read_length>
 8001066:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <uart_tx_rb_evt_fn+0x7c>)
 800106a:	681c      	ldr	r4, [r3, #0]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f00b fd45 	bl	800cafc <lwrb_get_linear_block_read_address>
 8001072:	4601      	mov	r1, r0
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	b29a      	uxth	r2, r3
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107c:	4620      	mov	r0, r4
 800107e:	f004 f981 	bl	8005384 <HAL_UART_Transmit>
			lwrb_skip(buff, size);
 8001082:	6979      	ldr	r1, [r7, #20]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f00b fd92 	bl	800cbae <lwrb_skip>
			size = lwrb_get_linear_block_read_length(buff);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f00b fd52 	bl	800cb34 <lwrb_get_linear_block_read_length>
 8001090:	6178      	str	r0, [r7, #20]
			if (size > 0) {
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <uart_tx_rb_evt_fn+0x66>
					HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <uart_tx_rb_evt_fn+0x7c>)
 800109a:	681c      	ldr	r4, [r3, #0]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f00b fd2d 	bl	800cafc <lwrb_get_linear_block_read_address>
 80010a2:	4601      	mov	r1, r0
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ac:	4620      	mov	r0, r4
 80010ae:	f004 f969 	bl	8005384 <HAL_UART_Transmit>
			}
			lwrb_skip(buff, size);
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f00b fd7a 	bl	800cbae <lwrb_skip>

			break;
 80010ba:	e000      	b.n	80010be <uart_tx_rb_evt_fn+0x72>
		default:
			break;
 80010bc:	bf00      	nop
	}
}
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000091c 	.word	0x2000091c

080010cc <lwpkt_lwrb_uart_task>:

void lwpkt_lwrb_uart_task(void* argument){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_init_data_t* init_data_p = (lwpkt_lwrb_uart_init_data_t*)argument;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
	huart_p = init_data_p->huart_p;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <lwpkt_lwrb_uart_task+0xc8>)
 80010de:	6013      	str	r3, [r2, #0]

	uart_rb_queueHandle = osMessageQueueNew(UART_RB_SIZE_QUEUE_SIZE, sizeof(uint16_t), &uart_rb_queue_attributes);
 80010e0:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <lwpkt_lwrb_uart_task+0xcc>)
 80010e2:	2102      	movs	r1, #2
 80010e4:	200a      	movs	r0, #10
 80010e6:	f005 fd75 	bl	8006bd4 <osMessageQueueNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <lwpkt_lwrb_uart_task+0xd0>)
 80010ee:	6013      	str	r3, [r2, #0]

	lwrb_init(&uart_rx_buffer, uart_rx_data_buffer, UART_RX_BUFFER_SIZE);
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	492a      	ldr	r1, [pc, #168]	; (80011a0 <lwpkt_lwrb_uart_task+0xd4>)
 80010f6:	482b      	ldr	r0, [pc, #172]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 80010f8:	f00b fae0 	bl	800c6bc <lwrb_init>

	lwrb_init(&uart_tx_buffer, uart_tx_data_buffer, UART_TX_BUFFER_SIZE);
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	4929      	ldr	r1, [pc, #164]	; (80011a8 <lwpkt_lwrb_uart_task+0xdc>)
 8001102:	482a      	ldr	r0, [pc, #168]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 8001104:	f00b fada 	bl	800c6bc <lwrb_init>
	lwrb_set_evt_fn(&uart_tx_buffer, uart_tx_rb_evt_fn);
 8001108:	4929      	ldr	r1, [pc, #164]	; (80011b0 <lwpkt_lwrb_uart_task+0xe4>)
 800110a:	4828      	ldr	r0, [pc, #160]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 800110c:	f00b fb07 	bl	800c71e <lwrb_set_evt_fn>

	lwpkt_init(&uart_lwpkt, &uart_tx_buffer, &uart_rx_buffer);
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 8001112:	4926      	ldr	r1, [pc, #152]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 8001114:	4827      	ldr	r0, [pc, #156]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 8001116:	f00b f82c 	bl	800c172 <lwpkt_init>
	lwpkt_set_evt_fn(&uart_lwpkt, init_data_p->lwpkt_evt_fn);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	4824      	ldr	r0, [pc, #144]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 8001122:	f00b fabb 	bl	800c69c <lwpkt_set_evt_fn>
	//osEventFlagsSet(lwpkt_eventsHandle, lwpkt_init_event_flag);

	HAL_UARTEx_ReceiveToIdle_DMA(huart_p, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <lwpkt_lwrb_uart_task+0xc8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	4922      	ldr	r1, [pc, #136]	; (80011b8 <lwpkt_lwrb_uart_task+0xec>)
 8001130:	4618      	mov	r0, r3
 8001132:	f004 f9b2 	bl	800549a <HAL_UARTEx_ReceiveToIdle_DMA>
	/* Infinite loop */
	for(;;)
	{
		uint16_t Size;
		osMessageQueueGet(uart_rb_queueHandle, &Size, NULL, osWaitForever);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <lwpkt_lwrb_uart_task+0xd0>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 010a 	add.w	r1, r7, #10
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	2200      	movs	r2, #0
 8001144:	f005 fe1a 	bl	8006d7c <osMessageQueueGet>

		static uint16_t pos = 0;
		lwrb_write(&uart_rx_buffer, &uart_dma_rx_buffer[pos], Size >= pos ? Size - pos : Size - pos + UART_DMA_RX_BUFFER_SIZE);
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <lwpkt_lwrb_uart_task+0xec>)
 8001150:	18d1      	adds	r1, r2, r3
 8001152:	897a      	ldrh	r2, [r7, #10]
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d305      	bcc.n	8001168 <lwpkt_lwrb_uart_task+0x9c>
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	461a      	mov	r2, r3
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	e006      	b.n	8001176 <lwpkt_lwrb_uart_task+0xaa>
 8001168:	897b      	ldrh	r3, [r7, #10]
 800116a:	461a      	mov	r2, r3
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001176:	461a      	mov	r2, r3
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 800117a:	f00b fae9 	bl	800c750 <lwrb_write>
		pos = Size;
 800117e:	897a      	ldrh	r2, [r7, #10]
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001182:	801a      	strh	r2, [r3, #0]
		lwpkt_process(&uart_lwpkt, HAL_GetTick());
 8001184:	f001 fb2c 	bl	80027e0 <HAL_GetTick>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 800118e:	f00b f967 	bl	800c460 <lwpkt_process>
	{
 8001192:	e7d0      	b.n	8001136 <lwpkt_lwrb_uart_task+0x6a>
 8001194:	2000091c 	.word	0x2000091c
 8001198:	080133c0 	.word	0x080133c0
 800119c:	20000914 	.word	0x20000914
 80011a0:	20000500 	.word	0x20000500
 80011a4:	200004ec 	.word	0x200004ec
 80011a8:	20000714 	.word	0x20000714
 80011ac:	20000700 	.word	0x20000700
 80011b0:	0800104d 	.word	0x0800104d
 80011b4:	200002d0 	.word	0x200002d0
 80011b8:	200003ec 	.word	0x200003ec
 80011bc:	20000920 	.word	0x20000920

080011c0 <lwrb_uart_callback>:
	}
}

void lwrb_uart_callback(uint16_t Size){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	osMessageQueuePut(uart_rb_queueHandle, &Size, 0, 0);
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <lwrb_uart_callback+0x20>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	1db9      	adds	r1, r7, #6
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	f005 fd72 	bl	8006cbc <osMessageQueuePut>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000914 	.word	0x20000914

080011e4 <uart_lwpkt_write>:

lwpktr_t uart_lwpkt_set_evt_fn(lwpkt_evt_fn uart_lwpkt_evt_fn){
	return lwpkt_set_evt_fn(&uart_lwpkt, uart_lwpkt_evt_fn);
}

lwpktr_t uart_lwpkt_write(const void* data, size_t len){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	return lwpkt_write(&uart_lwpkt, data, len);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <uart_lwpkt_write+0x20>)
 80011f4:	f00b f97c 	bl	800c4f0 <lwpkt_write>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002d0 	.word	0x200002d0

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f001 fab2 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f844 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 fb58 	bl	80018c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001218:	f000 fb36 	bl	8001888 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800121c:	f000 fae0 	bl	80017e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001220:	f000 f8a6 	bl	8001370 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001224:	f000 f968 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001228:	f000 f9ba 	bl	80015a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800122c:	f000 fa0c 	bl	8001648 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001230:	f000 fa5e 	bl	80016f0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001234:	f000 fafe 	bl	8001834 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001238:	f000 faae 	bl	8001798 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800123c:	f005 fab4 	bl	80067a8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  mecanum_semHandle = osSemaphoreNew(1, 0, &mecanum_sem_attributes);
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <main+0x78>)
 8001242:	2100      	movs	r1, #0
 8001244:	2001      	movs	r0, #1
 8001246:	f005 fba6 	bl	8006996 <osSemaphoreNew>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <main+0x7c>)
 800124e:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(mecanum_semHandle);
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <main+0x7c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fc79 	bl	8006b4c <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  mecanum_encoder_speeds_queueHandle = osMessageQueueNew(1, sizeof(four_wheeled_robot_encoders_speeds_t), &mecanum_encoder_speeds_queue_attributes);
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <main+0x80>)
 800125c:	2110      	movs	r1, #16
 800125e:	2001      	movs	r0, #1
 8001260:	f005 fcb8 	bl	8006bd4 <osMessageQueueNew>
 8001264:	4603      	mov	r3, r0
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <main+0x84>)
 8001268:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <main+0x88>)
 800126c:	2100      	movs	r1, #0
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <main+0x8c>)
 8001270:	f005 fae4 	bl	800683c <osThreadNew>
 8001274:	4603      	mov	r3, r0
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <main+0x90>)
 8001278:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800127a:	f005 fab9 	bl	80067f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127e:	e7fe      	b.n	800127e <main+0x76>
 8001280:	08013438 	.word	0x08013438
 8001284:	20000bcc 	.word	0x20000bcc
 8001288:	08013420 	.word	0x08013420
 800128c:	20000bc8 	.word	0x20000bc8
 8001290:	080133fc 	.word	0x080133fc
 8001294:	08001c79 	.word	0x08001c79
 8001298:	20000bc4 	.word	0x20000bc4

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	2230      	movs	r2, #48	; 0x30
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00d fd7c 	bl	800eda8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <SystemClock_Config+0xcc>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <SystemClock_Config+0xcc>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <SystemClock_Config+0xd0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <SystemClock_Config+0xd0>)
 80012e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001300:	2310      	movs	r3, #16
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001308:	2300      	movs	r3, #0
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800130c:	2310      	movs	r3, #16
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001310:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001316:	2304      	movs	r3, #4
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131a:	2304      	movs	r3, #4
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f002 f91a 	bl	800355c <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800132e:	f000 fdc7 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fb7c 	bl	8003a4c <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800135a:	f000 fdb1 	bl	8001ec0 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	; 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2220      	movs	r2, #32
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00d fcfd 	bl	800eda8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <MX_TIM1_Init+0x184>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013b6:	2209      	movs	r2, #9
 80013b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 80013c0:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013c2:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80013c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013da:	4845      	ldr	r0, [pc, #276]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013dc:	f002 fd88 	bl	8003ef0 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013e6:	f000 fd6b 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f4:	4619      	mov	r1, r3
 80013f6:	483e      	ldr	r0, [pc, #248]	; (80014f0 <MX_TIM1_Init+0x180>)
 80013f8:	f003 fa80 	bl	80048fc <HAL_TIM_ConfigClockSource>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001402:	f000 fd5d 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001406:	483a      	ldr	r0, [pc, #232]	; (80014f0 <MX_TIM1_Init+0x180>)
 8001408:	f002 fe24 	bl	8004054 <HAL_TIM_PWM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001412:	f000 fd55 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001422:	4619      	mov	r1, r3
 8001424:	4832      	ldr	r0, [pc, #200]	; (80014f0 <MX_TIM1_Init+0x180>)
 8001426:	f003 fe31 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001430:	f000 fd46 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4825      	ldr	r0, [pc, #148]	; (80014f0 <MX_TIM1_Init+0x180>)
 800145a:	f003 f98d 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001464:	f000 fd2c 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2204      	movs	r2, #4
 800146e:	4619      	mov	r1, r3
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <MX_TIM1_Init+0x180>)
 8001472:	f003 f981 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800147c:	f000 fd20 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2208      	movs	r2, #8
 8001486:	4619      	mov	r1, r3
 8001488:	4819      	ldr	r0, [pc, #100]	; (80014f0 <MX_TIM1_Init+0x180>)
 800148a:	f003 f975 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001494:	f000 fd14 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	220c      	movs	r2, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_TIM1_Init+0x180>)
 80014a2:	f003 f969 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014ac:	f000 fd08 	bl	8001ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM1_Init+0x180>)
 80014d4:	f003 fe48 	bl	8005168 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80014de:	f000 fcef 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM1_Init+0x180>)
 80014e4:	f000 fe8e 	bl	8002204 <HAL_TIM_MspPostInit>

}
 80014e8:	bf00      	nop
 80014ea:	3758      	adds	r7, #88	; 0x58
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000924 	.word	0x20000924
 80014f4:	40010000 	.word	0x40010000

080014f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00d fc4e 	bl	800eda8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_TIM2_Init+0xa4>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_TIM2_Init+0xa4>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_TIM2_Init+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63535;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_TIM2_Init+0xa4>)
 800152a:	f64f 022f 	movw	r2, #63535	; 0xf82f
 800152e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM2_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_TIM2_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800153c:	2303      	movs	r3, #3
 800153e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001544:	2301      	movs	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM2_Init+0xa4>)
 8001568:	f002 fee2 	bl	8004330 <HAL_TIM_Encoder_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001572:	f000 fca5 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM2_Init+0xa4>)
 8001584:	f003 fd82 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800158e:	f000 fc97 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3730      	adds	r7, #48	; 0x30
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000096c 	.word	0x2000096c

080015a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f00d fbfa 	bl	800eda8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_TIM3_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015e2:	2303      	movs	r3, #3
 80015e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fa:	2301      	movs	r3, #1
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <MX_TIM3_Init+0xa0>)
 800160e:	f002 fe8f 	bl	8004330 <HAL_TIM_Encoder_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 fc52 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_TIM3_Init+0xa0>)
 800162a:	f003 fd2f 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001634:	f000 fc44 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200009b4 	.word	0x200009b4
 8001644:	40000400 	.word	0x40000400

08001648 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f00d fba6 	bl	800eda8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_TIM4_Init+0xa0>)
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <MX_TIM4_Init+0xa4>)
 8001668:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM4_Init+0xa0>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM4_Init+0xa0>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM4_Init+0xa0>)
 8001678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM4_Init+0xa0>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM4_Init+0xa0>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800168a:	2303      	movs	r3, #3
 800168c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <MX_TIM4_Init+0xa0>)
 80016b6:	f002 fe3b 	bl	8004330 <HAL_TIM_Encoder_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016c0:	f000 fbfe 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_TIM4_Init+0xa0>)
 80016d2:	f003 fcdb 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016dc:	f000 fbf0 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200009fc 	.word	0x200009fc
 80016ec:	40000800 	.word	0x40000800

080016f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2224      	movs	r2, #36	; 0x24
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00d fb52 	bl	800eda8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_TIM5_Init+0xa0>)
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_TIM5_Init+0xa4>)
 8001710:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_TIM5_Init+0xa0>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_TIM5_Init+0xa0>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_TIM5_Init+0xa0>)
 8001720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001724:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_TIM5_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_TIM5_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001732:	2303      	movs	r3, #3
 8001734:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800174a:	2301      	movs	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_TIM5_Init+0xa0>)
 800175e:	f002 fde7 	bl	8004330 <HAL_TIM_Encoder_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001768:	f000 fbaa 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_TIM5_Init+0xa0>)
 800177a:	f003 fc87 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001784:	f000 fb9c 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3730      	adds	r7, #48	; 0x30
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000a44 	.word	0x20000a44
 8001794:	40000c00 	.word	0x40000c00

08001798 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_TIM10_Init+0x40>)
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <MX_TIM10_Init+0x44>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400 - 1;
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017a4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017a8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_TIM10_Init+0x40>)
 80017c6:	f002 fb93 	bl	8003ef0 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017d0:	f000 fb76 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000a8c 	.word	0x20000a8c
 80017dc:	40014400 	.word	0x40014400

080017e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART2_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART2_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART2_UART_Init+0x4c>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART2_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART2_UART_Init+0x4c>)
 8001806:	2208      	movs	r2, #8
 8001808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART2_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART2_UART_Init+0x4c>)
 8001818:	f003 fd5c 	bl	80052d4 <HAL_HalfDuplex_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 fb4d 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000ad4 	.word	0x20000ad4
 8001830:	40004400 	.word	0x40004400

08001834 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART6_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800186c:	f003 fce2 	bl	8005234 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 fb23 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000b1c 	.word	0x20000b1c
 8001884:	40011400 	.word	0x40011400

08001888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_DMA_Init+0x3c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <MX_DMA_Init+0x3c>)
 8001898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_DMA_Init+0x3c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	2039      	movs	r0, #57	; 0x39
 80018b0:	f001 f85a 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018b4:	2039      	movs	r0, #57	; 0x39
 80018b6:	f001 f873 	bl	80029a0 <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <MX_GPIO_Init+0x10c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a3b      	ldr	r2, [pc, #236]	; (80019d4 <MX_GPIO_Init+0x10c>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <MX_GPIO_Init+0x10c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <MX_GPIO_Init+0x10c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <MX_GPIO_Init+0x10c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <MX_GPIO_Init+0x10c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <MX_GPIO_Init+0x10c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_MOTOR_A_Pin|BR_MOTOR_B_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2130      	movs	r1, #48	; 0x30
 8001952:	4821      	ldr	r0, [pc, #132]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001954:	f001 fdd0 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 8001958:	2200      	movs	r2, #0
 800195a:	f24f 0106 	movw	r1, #61446	; 0xf006
 800195e:	481f      	ldr	r0, [pc, #124]	; (80019dc <MX_GPIO_Init+0x114>)
 8001960:	f001 fdca 	bl	80034f8 <HAL_GPIO_WritePin>
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800196a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4817      	ldr	r0, [pc, #92]	; (80019d8 <MX_GPIO_Init+0x110>)
 800197c:	f001 fc20 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_MOTOR_A_Pin BR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = FL_MOTOR_A_Pin|BR_MOTOR_B_Pin;
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4810      	ldr	r0, [pc, #64]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001998:	f001 fc12 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_MOTOR_A_Pin BL_MOTOR_B_Pin BR_MOTOR_A_Pin FL_MOTOR_B_Pin
                           FR_MOTOR_A_Pin FR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 800199c:	f24f 0306 	movw	r3, #61446	; 0xf006
 80019a0:	617b      	str	r3, [r7, #20]
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <MX_GPIO_Init+0x114>)
 80019b6:	f001 fc03 	bl	80031c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	f000 ffd2 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c4:	2028      	movs	r0, #40	; 0x28
 80019c6:	f000 ffeb 	bl	80029a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020400 	.word	0x40020400

080019e0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <_write+0x28>)
 80019f8:	f003 fcc4 	bl	8005384 <HAL_UART_Transmit>
	return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000ad4 	.word	0x20000ad4

08001a0c <uart_lwpkt_evt_fn>:

static void uart_lwpkt_evt_fn(lwpkt_t* pkt, lwpkt_evt_type_t type){
 8001a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a10:	b090      	sub	sp, #64	; 0x40
 8001a12:	af04      	add	r7, sp, #16
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70fb      	strb	r3, [r7, #3]
	switch (type) {
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 80b9 	bne.w	8001b94 <uart_lwpkt_evt_fn+0x188>
		case LWPKT_EVT_PKT:
			size_t len = lwpkt_get_data_len(pkt);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <uart_lwpkt_evt_fn+0x24>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a2e:	e000      	b.n	8001a32 <uart_lwpkt_evt_fn+0x26>
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			char* data = (char*)lwpkt_get_data(pkt);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <uart_lwpkt_evt_fn+0x32>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	e000      	b.n	8001a40 <uart_lwpkt_evt_fn+0x34>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
			printf("Packet received, size(%d), data(%.*s)\r\n", len, len, data);
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a48:	4855      	ldr	r0, [pc, #340]	; (8001ba0 <uart_lwpkt_evt_fn+0x194>)
 8001a4a:	f00d f819 	bl	800ea80 <iprintf>

			cJSON* parsed_json = cJSON_ParseWithLength(data, len);
 8001a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a52:	f009 fb8f 	bl	800b174 <cJSON_ParseWithLength>
 8001a56:	6278      	str	r0, [r7, #36]	; 0x24
			printf("json: %lu\r\n", parsed_json);
 8001a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a5a:	4852      	ldr	r0, [pc, #328]	; (8001ba4 <uart_lwpkt_evt_fn+0x198>)
 8001a5c:	f00d f810 	bl	800ea80 <iprintf>
			if (cJSON_IsObject(parsed_json)){
 8001a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a62:	f00a fb03 	bl	800c06c <cJSON_IsObject>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 808c 	beq.w	8001b86 <uart_lwpkt_evt_fn+0x17a>
				printf("A json object\r\n");
 8001a6e:	484e      	ldr	r0, [pc, #312]	; (8001ba8 <uart_lwpkt_evt_fn+0x19c>)
 8001a70:	f00d f86c 	bl	800eb4c <puts>

				cJSON* power_json = cJSON_GetObjectItem(parsed_json, "power");
 8001a74:	494d      	ldr	r1, [pc, #308]	; (8001bac <uart_lwpkt_evt_fn+0x1a0>)
 8001a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a78:	f00a f99f 	bl	800bdba <cJSON_GetObjectItem>
 8001a7c:	6238      	str	r0, [r7, #32]
				cJSON* theta_json = cJSON_GetObjectItem(parsed_json, "theta");
 8001a7e:	494c      	ldr	r1, [pc, #304]	; (8001bb0 <uart_lwpkt_evt_fn+0x1a4>)
 8001a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a82:	f00a f99a 	bl	800bdba <cJSON_GetObjectItem>
 8001a86:	61f8      	str	r0, [r7, #28]
				cJSON* turn_json = cJSON_GetObjectItem(parsed_json, "turn");
 8001a88:	494a      	ldr	r1, [pc, #296]	; (8001bb4 <uart_lwpkt_evt_fn+0x1a8>)
 8001a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a8c:	f00a f995 	bl	800bdba <cJSON_GetObjectItem>
 8001a90:	61b8      	str	r0, [r7, #24]
				cJSON* stop_json = cJSON_GetObjectItem(parsed_json, "stop");
 8001a92:	4949      	ldr	r1, [pc, #292]	; (8001bb8 <uart_lwpkt_evt_fn+0x1ac>)
 8001a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a96:	f00a f990 	bl	800bdba <cJSON_GetObjectItem>
 8001a9a:	6178      	str	r0, [r7, #20]

				osSemaphoreAcquire(mecanum_semHandle, osWaitForever);
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <uart_lwpkt_evt_fn+0x1b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 ffff 	bl	8006aa8 <osSemaphoreAcquire>

				if (cJSON_IsTrue(stop_json)) {
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f00a fab0 	bl	800c010 <cJSON_IsTrue>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <uart_lwpkt_evt_fn+0xb8>
					printf("Robot stopped\r\n");
 8001ab6:	4842      	ldr	r0, [pc, #264]	; (8001bc0 <uart_lwpkt_evt_fn+0x1b4>)
 8001ab8:	f00d f848 	bl	800eb4c <puts>
					mecanum_robot_stop(&robot);
 8001abc:	4841      	ldr	r0, [pc, #260]	; (8001bc4 <uart_lwpkt_evt_fn+0x1b8>)
 8001abe:	f00b fa31 	bl	800cf24 <mecanum_robot_stop>
 8001ac2:	e05a      	b.n	8001b7a <uart_lwpkt_evt_fn+0x16e>
				} else {
					if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json)){
 8001ac4:	6a38      	ldr	r0, [r7, #32]
 8001ac6:	f00a faba 	bl	800c03e <cJSON_IsNumber>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d051      	beq.n	8001b74 <uart_lwpkt_evt_fn+0x168>
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	f00a fab4 	bl	800c03e <cJSON_IsNumber>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d04b      	beq.n	8001b74 <uart_lwpkt_evt_fn+0x168>
						float power = cJSON_GetNumberValue(power_json);
 8001adc:	6a38      	ldr	r0, [r7, #32]
 8001ade:	f008 fa4d 	bl	8009f7c <cJSON_GetNumberValue>
 8001ae2:	ec53 2b10 	vmov	r2, r3, d0
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f895 	bl	8000c18 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]
						float theta = cJSON_GetNumberValue(theta_json);
 8001af2:	69f8      	ldr	r0, [r7, #28]
 8001af4:	f008 fa42 	bl	8009f7c <cJSON_GetNumberValue>
 8001af8:	ec53 2b10 	vmov	r2, r3, d0
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f88a 	bl	8000c18 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
						float turn = CJSON_NUMBER_OR_ZERO(turn_json);
 8001b08:	69b8      	ldr	r0, [r7, #24]
 8001b0a:	f00a fa98 	bl	800c03e <cJSON_IsNumber>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <uart_lwpkt_evt_fn+0x11e>
 8001b14:	69b8      	ldr	r0, [r7, #24]
 8001b16:	f008 fa31 	bl	8009f7c <cJSON_GetNumberValue>
 8001b1a:	ec53 2b10 	vmov	r2, r3, d0
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f879 	bl	8000c18 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e001      	b.n	8001b2e <uart_lwpkt_evt_fn+0x122>
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]

						printf("Power: %f, Theta: %f, Turn: %f\r\n", power, theta, turn);
 8001b30:	6938      	ldr	r0, [r7, #16]
 8001b32:	f7fe fd21 	bl	8000578 <__aeabi_f2d>
 8001b36:	4680      	mov	r8, r0
 8001b38:	4689      	mov	r9, r1
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7fe fd1c 	bl	8000578 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f7fe fd17 	bl	8000578 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b52:	e9cd 4500 	strd	r4, r5, [sp]
 8001b56:	4642      	mov	r2, r8
 8001b58:	464b      	mov	r3, r9
 8001b5a:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <uart_lwpkt_evt_fn+0x1bc>)
 8001b5c:	f00c ff90 	bl	800ea80 <iprintf>

						mecanum_robot_move(&robot, power, theta, turn);
 8001b60:	ed97 1a02 	vldr	s2, [r7, #8]
 8001b64:	edd7 0a03 	vldr	s1, [r7, #12]
 8001b68:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b6c:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <uart_lwpkt_evt_fn+0x1b8>)
 8001b6e:	f00b f9f7 	bl	800cf60 <mecanum_robot_move>
					if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json)){
 8001b72:	e002      	b.n	8001b7a <uart_lwpkt_evt_fn+0x16e>
					} else {
						printf("One or more key/value pairs missing\r\n");
 8001b74:	4815      	ldr	r0, [pc, #84]	; (8001bcc <uart_lwpkt_evt_fn+0x1c0>)
 8001b76:	f00c ffe9 	bl	800eb4c <puts>
					}
				}

				osSemaphoreRelease(mecanum_semHandle);
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <uart_lwpkt_evt_fn+0x1b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 ffe4 	bl	8006b4c <osSemaphoreRelease>
 8001b84:	e002      	b.n	8001b8c <uart_lwpkt_evt_fn+0x180>

			} else {
				printf("Not a json object\r\n");
 8001b86:	4812      	ldr	r0, [pc, #72]	; (8001bd0 <uart_lwpkt_evt_fn+0x1c4>)
 8001b88:	f00c ffe0 	bl	800eb4c <puts>
			}

			cJSON_free(parsed_json);
 8001b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b8e:	f00a fa85 	bl	800c09c <cJSON_free>
			break;
 8001b92:	e000      	b.n	8001b96 <uart_lwpkt_evt_fn+0x18a>
		default:
			break;
 8001b94:	bf00      	nop
	}
}
 8001b96:	bf00      	nop
 8001b98:	3730      	adds	r7, #48	; 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ba0:	08013200 	.word	0x08013200
 8001ba4:	08013228 	.word	0x08013228
 8001ba8:	08013234 	.word	0x08013234
 8001bac:	08013244 	.word	0x08013244
 8001bb0:	0801324c 	.word	0x0801324c
 8001bb4:	08013254 	.word	0x08013254
 8001bb8:	0801325c 	.word	0x0801325c
 8001bbc:	20000bcc 	.word	0x20000bcc
 8001bc0:	08013264 	.word	0x08013264
 8001bc4:	200000b0 	.word	0x200000b0
 8001bc8:	08013274 	.word	0x08013274
 8001bcc:	08013298 	.word	0x08013298
 8001bd0:	080132c0 	.word	0x080132c0

08001bd4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART6) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_UARTEx_RxEventCallback+0x28>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d103      	bne.n	8001bf2 <HAL_UARTEx_RxEventCallback+0x1e>
    lwrb_uart_callback(Size);
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fae7 	bl	80011c0 <lwrb_uart_callback>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40011400 	.word	0x40011400

08001c00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c10:	d124      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0x5c>
  	if (osSemaphoreAcquire(mecanum_semHandle, 0) == osOK){
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 ff45 	bl	8006aa8 <osSemaphoreAcquire>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11b      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0x5c>
			GPIO_PinState state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c28:	480f      	ldr	r0, [pc, #60]	; (8001c68 <HAL_GPIO_EXTI_Callback+0x68>)
 8001c2a:	f001 fc4d 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
			if (state == GPIO_PIN_SET) {
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
				mecanum_robot_stop(&robot);
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c3a:	f00b f973 	bl	800cf24 <mecanum_robot_stop>
 8001c3e:	e008      	b.n	8001c52 <HAL_GPIO_EXTI_Callback+0x52>
			} else {
				mecanum_robot_move(&robot, 0.5f, 1.57f, 0.0f);
 8001c40:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001c70 <HAL_GPIO_EXTI_Callback+0x70>
 8001c44:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001c74 <HAL_GPIO_EXTI_Callback+0x74>
 8001c48:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c4e:	f00b f987 	bl	800cf60 <mecanum_robot_move>
			}
	    osSemaphoreRelease(mecanum_semHandle);
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 ff78 	bl	8006b4c <osSemaphoreRelease>
  	}
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000bcc 	.word	0x20000bcc
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	200000b0 	.word	0x200000b0
 8001c70:	00000000 	.word	0x00000000
 8001c74:	3fc8f5c3 	.word	0x3fc8f5c3

08001c78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b094      	sub	sp, #80	; 0x50
 8001c7e:	af06      	add	r7, sp, #24
 8001c80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Start\r\n");
 8001c82:	484f      	ldr	r0, [pc, #316]	; (8001dc0 <StartDefaultTask+0x148>)
 8001c84:	f00c ff62 	bl	800eb4c <puts>

	cJSON_InitHooks(&cjson_hooks);
 8001c88:	484e      	ldr	r0, [pc, #312]	; (8001dc4 <StartDefaultTask+0x14c>)
 8001c8a:	f008 fa27 	bl	800a0dc <cJSON_InitHooks>
	printf("cJSON hooks set\r\n");
 8001c8e:	484e      	ldr	r0, [pc, #312]	; (8001dc8 <StartDefaultTask+0x150>)
 8001c90:	f00c ff5c 	bl	800eb4c <puts>

	mecanum_robot_init(&robot, HAL_GetTick());
 8001c94:	f000 fda4 	bl	80027e0 <HAL_GetTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	484b      	ldr	r0, [pc, #300]	; (8001dcc <StartDefaultTask+0x154>)
 8001c9e:	f00b f90c 	bl	800ceba <mecanum_robot_init>

	lwpkt_lwrb_uart_init(&init_data);
 8001ca2:	484b      	ldr	r0, [pc, #300]	; (8001dd0 <StartDefaultTask+0x158>)
 8001ca4:	f7ff f9bc 	bl	8001020 <lwpkt_lwrb_uart_init>
	printf("lwpkt initialized\r\n");
 8001ca8:	484a      	ldr	r0, [pc, #296]	; (8001dd4 <StartDefaultTask+0x15c>)
 8001caa:	f00c ff4f 	bl	800eb4c <puts>

	HAL_TIM_Base_Start_IT(&htim10);
 8001cae:	484a      	ldr	r0, [pc, #296]	; (8001dd8 <StartDefaultTask+0x160>)
 8001cb0:	f002 f96e 	bl	8003f90 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	for(;;)
	{
		four_wheeled_robot_encoders_speeds_t speeds;
		osMessageQueueGet(mecanum_encoder_speeds_queueHandle, &speeds, NULL, osWaitForever);
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <StartDefaultTask+0x164>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 010c 	add.w	r1, r7, #12
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f005 f85b 	bl	8006d7c <osMessageQueueGet>

		cJSON* root_object = cJSON_CreateObject();
 8001cc6:	f00a f98f 	bl	800bfe8 <cJSON_CreateObject>
 8001cca:	6378      	str	r0, [r7, #52]	; 0x34

		cJSON* fl_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc52 	bl	8000578 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b10 	vmov	d0, r2, r3
 8001cdc:	f00a f93c 	bl	800bf58 <cJSON_CreateNumber>
 8001ce0:	6338      	str	r0, [r7, #48]	; 0x30
		cJSON* fr_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc47 	bl	8000578 <__aeabi_f2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	ec43 2b10 	vmov	d0, r2, r3
 8001cf2:	f00a f931 	bl	800bf58 <cJSON_CreateNumber>
 8001cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
		cJSON* bl_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc3c 	bl	8000578 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	ec43 2b10 	vmov	d0, r2, r3
 8001d08:	f00a f926 	bl	800bf58 <cJSON_CreateNumber>
 8001d0c:	62b8      	str	r0, [r7, #40]	; 0x28
		cJSON* br_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc31 	bl	8000578 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b10 	vmov	d0, r2, r3
 8001d1e:	f00a f91b 	bl	800bf58 <cJSON_CreateNumber>
 8001d22:	6278      	str	r0, [r7, #36]	; 0x24

		cJSON_AddItemToObject(root_object, "fl_speed", fl_speed);
 8001d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d26:	492e      	ldr	r1, [pc, #184]	; (8001de0 <StartDefaultTask+0x168>)
 8001d28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d2a:	f00a f8fd 	bl	800bf28 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "fr_speed", fr_speed);
 8001d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d30:	492c      	ldr	r1, [pc, #176]	; (8001de4 <StartDefaultTask+0x16c>)
 8001d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d34:	f00a f8f8 	bl	800bf28 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "bl_speed", bl_speed);
 8001d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d3a:	492b      	ldr	r1, [pc, #172]	; (8001de8 <StartDefaultTask+0x170>)
 8001d3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d3e:	f00a f8f3 	bl	800bf28 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "br_speed", br_speed);
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	4929      	ldr	r1, [pc, #164]	; (8001dec <StartDefaultTask+0x174>)
 8001d46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d48:	f00a f8ee 	bl	800bf28 <cJSON_AddItemToObject>

		char* output = cJSON_Print(root_object);
 8001d4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d4e:	f009 faa5 	bl	800b29c <cJSON_Print>
 8001d52:	6238      	str	r0, [r7, #32]
		size_t size = strlen(output);
 8001d54:	6a38      	ldr	r0, [r7, #32]
 8001d56:	f7fe faa3 	bl	80002a0 <strlen>
 8001d5a:	61f8      	str	r0, [r7, #28]

		uart_lwpkt_write((void*)output, size);
 8001d5c:	69f9      	ldr	r1, [r7, #28]
 8001d5e:	6a38      	ldr	r0, [r7, #32]
 8001d60:	f7ff fa40 	bl	80011e4 <uart_lwpkt_write>
		printf("fl:%f;fr:%f;bl:%f;br:%f\r\n", speeds.fl_speed, speeds.fr_speed, speeds.bl_speed, speeds.br_speed);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4682      	mov	sl, r0
 8001d6e:	468b      	mov	fp, r1
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fc00 	bl	8000578 <__aeabi_f2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbfa 	bl	8000578 <__aeabi_f2d>
 8001d84:	4680      	mov	r8, r0
 8001d86:	4689      	mov	r9, r1
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbf4 	bl	8000578 <__aeabi_f2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d9c:	e9cd 4500 	strd	r4, r5, [sp]
 8001da0:	4652      	mov	r2, sl
 8001da2:	465b      	mov	r3, fp
 8001da4:	4812      	ldr	r0, [pc, #72]	; (8001df0 <StartDefaultTask+0x178>)
 8001da6:	f00c fe6b 	bl	800ea80 <iprintf>

		cJSON_free(root_object);
 8001daa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dac:	f00a f976 	bl	800c09c <cJSON_free>
		cjson_hooks.free_fn(output);
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <StartDefaultTask+0x17c>)
 8001db2:	6a38      	ldr	r0, [r7, #32]
 8001db4:	4798      	blx	r3

		osDelay(1000);
 8001db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dba:	f004 fdd1 	bl	8006960 <osDelay>
	{
 8001dbe:	e779      	b.n	8001cb4 <StartDefaultTask+0x3c>
 8001dc0:	080132d4 	.word	0x080132d4
 8001dc4:	08013448 	.word	0x08013448
 8001dc8:	080132dc 	.word	0x080132dc
 8001dcc:	200000b0 	.word	0x200000b0
 8001dd0:	08013450 	.word	0x08013450
 8001dd4:	080132f0 	.word	0x080132f0
 8001dd8:	20000a8c 	.word	0x20000a8c
 8001ddc:	20000bc8 	.word	0x20000bc8
 8001de0:	08013304 	.word	0x08013304
 8001de4:	08013310 	.word	0x08013310
 8001de8:	0801331c 	.word	0x0801331c
 8001dec:	08013328 	.word	0x08013328
 8001df0:	08013334 	.word	0x08013334
 8001df4:	0800d229 	.word	0x0800d229

08001df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d102      	bne.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001e0a:	f000 fcd5 	bl	80027b8 <HAL_IncTick>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

	}

  /* USER CODE END Callback 1 */
}
 8001e0e:	e047      	b.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xa8>
  else if (htim->Instance == TIM10) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d142      	bne.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xa8>
  	mecanum_robot_encoders_callback(&robot, HAL_GetTick());
 8001e1a:	f000 fce1 	bl	80027e0 <HAL_GetTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e24:	f00b f9a6 	bl	800d174 <mecanum_robot_encoders_callback>
  	mecanum_robot_get_encoder_speeds(&robot, &speeds);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e30:	f00b f9c1 	bl	800d1b6 <mecanum_robot_get_encoder_speeds>
  	speeds.fl_speed *= 1000.0f;
 8001e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e38:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001eb4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	edc7 7a04 	vstr	s15, [r7, #16]
  	speeds.fr_speed *= 1000.0f;
 8001e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e48:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001eb4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e50:	edc7 7a05 	vstr	s15, [r7, #20]
  	speeds.bl_speed *= 1000.0f;
 8001e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e58:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001eb4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e60:	edc7 7a06 	vstr	s15, [r7, #24]
  	speeds.br_speed *= 1000.0f;
 8001e64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e68:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001eb4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	edc7 7a07 	vstr	s15, [r7, #28]
  	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  	xQueueOverwriteFromISR((QueueHandle_t)mecanum_encoder_speeds_queueHandle, &speeds, &xHigherPriorityTaskWoken);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	f107 0110 	add.w	r1, r7, #16
 8001e84:	2302      	movs	r3, #2
 8001e86:	f005 fb65 	bl	8007554 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	f3bf 8f6f 	isb	sy
}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40014800 	.word	0x40014800
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	200000b0 	.word	0x200000b0
 8001eb4:	447a0000 	.word	0x447a0000
 8001eb8:	20000bc8 	.word	0x20000bc8
 8001ebc:	e000ed04 	.word	0xe000ed04

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_MspInit+0x54>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_MspInit+0x54>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x54>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_MspInit+0x54>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_MspInit+0x54>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_MspInit+0x54>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	f06f 0001 	mvn.w	r0, #1
 8001f12:	f000 fd29 	bl	8002968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_TIM_Base_MspInit+0x90>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11e      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	2019      	movs	r0, #25
 8001f58:	f000 fd06 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f5c:	2019      	movs	r0, #25
 8001f5e:	f000 fd1f 	bl	80029a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	201a      	movs	r0, #26
 8001f68:	f000 fcfe 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f6c:	201a      	movs	r0, #26
 8001f6e:	f000 fd17 	bl	80029a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f72:	e01a      	b.n	8001faa <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM10)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_Base_MspInit+0x98>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d115      	bne.n	8001faa <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_TIM_Base_MspInit+0x94>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	2019      	movs	r0, #25
 8001fa0:	f000 fce2 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa4:	2019      	movs	r0, #25
 8001fa6:	f000 fcfb 	bl	80029a0 <HAL_NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40014400 	.word	0x40014400

08001fc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b092      	sub	sp, #72	; 0x48
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	d14a      	bne.n	8002078 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a7f      	ldr	r2, [pc, #508]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a71      	ldr	r2, [pc, #452]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = FL_ENCODER_A_Pin;
 8002036:	2320      	movs	r3, #32
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002046:	2301      	movs	r3, #1
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FL_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800204a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800204e:	4619      	mov	r1, r3
 8002050:	4866      	ldr	r0, [pc, #408]	; (80021ec <HAL_TIM_Encoder_MspInit+0x22c>)
 8002052:	f001 f8b5 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FL_ENCODER_B_Pin;
 8002056:	2308      	movs	r3, #8
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002066:	2301      	movs	r3, #1
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FL_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206e:	4619      	mov	r1, r3
 8002070:	485f      	ldr	r0, [pc, #380]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x230>)
 8002072:	f001 f8a5 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002076:	e0b2      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x234>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d14a      	bne.n	8002118 <HAL_TIM_Encoder_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a49      	ldr	r2, [pc, #292]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENCODER_B_Pin;
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e6:	2302      	movs	r3, #2
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FR_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020ee:	4619      	mov	r1, r3
 80020f0:	4841      	ldr	r0, [pc, #260]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x238>)
 80020f2:	f001 f865 	bl	80031c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin;
 80020f6:	2310      	movs	r3, #16
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002106:	2302      	movs	r3, #2
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FR_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800210e:	4619      	mov	r1, r3
 8002110:	4837      	ldr	r0, [pc, #220]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x230>)
 8002112:	f001 f855 	bl	80031c0 <HAL_GPIO_Init>
}
 8002116:	e062      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM4)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a37      	ldr	r2, [pc, #220]	; (80021fc <HAL_TIM_Encoder_MspInit+0x23c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BL_ENCODER_A_Pin|BL_ENCODER_B_Pin;
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800216a:	2302      	movs	r3, #2
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002172:	4619      	mov	r1, r3
 8002174:	481e      	ldr	r0, [pc, #120]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x230>)
 8002176:	f001 f823 	bl	80031c0 <HAL_GPIO_Init>
}
 800217a:	e030      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_TIM_Encoder_MspInit+0x240>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12b      	bne.n	80021de <HAL_TIM_Encoder_MspInit+0x21e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x228>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BR_ENCODER_A_Pin|BR_ENCODER_B_Pin;
 80021be:	2303      	movs	r3, #3
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021ce:	2302      	movs	r3, #2
 80021d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d6:	4619      	mov	r1, r3
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <HAL_TIM_Encoder_MspInit+0x22c>)
 80021da:	f000 fff1 	bl	80031c0 <HAL_GPIO_Init>
}
 80021de:	bf00      	nop
 80021e0:	3748      	adds	r7, #72	; 0x48
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40000800 	.word	0x40000800
 8002200:	40000c00 	.word	0x40000c00

08002204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_TIM_MspPostInit+0x68>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11e      	bne.n	8002264 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_TIM_MspPostInit+0x6c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_TIM_MspPostInit+0x6c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_TIM_MspPostInit+0x6c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FL_MOTOR_EN_Pin|FR_MOTOR_EN_Pin|BL_MOTOR_EN_Pin|BR_MOTOR_EN_Pin;
 8002242:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002246:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <HAL_TIM_MspPostInit+0x70>)
 8002260:	f000 ffae 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_UART_MspInit+0x194>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12c      	bne.n	80022f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a5b      	ldr	r2, [pc, #364]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b52      	ldr	r3, [pc, #328]	; (8002410 <HAL_UART_MspInit+0x198>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d2:	2304      	movs	r3, #4
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d6:	2312      	movs	r3, #18
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e2:	2307      	movs	r3, #7
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4849      	ldr	r0, [pc, #292]	; (8002414 <HAL_UART_MspInit+0x19c>)
 80022ee:	f000 ff67 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80022f2:	e087      	b.n	8002404 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART6)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a47      	ldr	r2, [pc, #284]	; (8002418 <HAL_UART_MspInit+0x1a0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	f040 8082 	bne.w	8002404 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_UART_MspInit+0x198>)
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	4a41      	ldr	r2, [pc, #260]	; (8002410 <HAL_UART_MspInit+0x198>)
 800230a:	f043 0320 	orr.w	r3, r3, #32
 800230e:	6453      	str	r3, [r2, #68]	; 0x44
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_UART_MspInit+0x198>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_UART_MspInit+0x198>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_UART_MspInit+0x198>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_UART_MspInit+0x198>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_UART_MspInit+0x198>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a33      	ldr	r2, [pc, #204]	; (8002410 <HAL_UART_MspInit+0x198>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	; 0x30
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_UART_MspInit+0x198>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002354:	2340      	movs	r3, #64	; 0x40
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002364:	2308      	movs	r3, #8
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	482b      	ldr	r0, [pc, #172]	; (800241c <HAL_UART_MspInit+0x1a4>)
 8002370:	f000 ff26 	bl	80031c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002386:	2308      	movs	r3, #8
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4820      	ldr	r0, [pc, #128]	; (8002414 <HAL_UART_MspInit+0x19c>)
 8002392:	f000 ff15 	bl	80031c0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_UART_MspInit+0x1ac>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 800239e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80023a2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ca:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80023d8:	4811      	ldr	r0, [pc, #68]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023da:	f000 faef 	bl	80029bc <HAL_DMA_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x170>
      Error_Handler();
 80023e4:	f7ff fd6c 	bl	8001ec0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_UART_MspInit+0x1a8>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2105      	movs	r1, #5
 80023f8:	2047      	movs	r0, #71	; 0x47
 80023fa:	f000 fab5 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023fe:	2047      	movs	r0, #71	; 0x47
 8002400:	f000 face 	bl	80029a0 <HAL_NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3730      	adds	r7, #48	; 0x30
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40004400 	.word	0x40004400
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000
 8002418:	40011400 	.word	0x40011400
 800241c:	40020800 	.word	0x40020800
 8002420:	20000b64 	.word	0x20000b64
 8002424:	40026428 	.word	0x40026428

08002428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_InitTick+0xd0>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <HAL_InitTick+0xd0>)
 8002442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_InitTick+0xd0>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	f107 020c 	add.w	r2, r7, #12
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fd14 	bl	8003e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002464:	f001 fcfe 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8002468:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_InitTick+0xd4>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0c9b      	lsrs	r3, r3, #18
 8002474:	3b01      	subs	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_InitTick+0xd8>)
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_InitTick+0xdc>)
 800247c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_InitTick+0xd8>)
 8002480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002484:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_InitTick+0xd8>)
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_InitTick+0xd8>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_InitTick+0xd8>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_InitTick+0xd8>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800249e:	4818      	ldr	r0, [pc, #96]	; (8002500 <HAL_InitTick+0xd8>)
 80024a0:	f001 fd26 	bl	8003ef0 <HAL_TIM_Base_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11b      	bne.n	80024ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80024b2:	4813      	ldr	r0, [pc, #76]	; (8002500 <HAL_InitTick+0xd8>)
 80024b4:	f001 fd6c 	bl	8003f90 <HAL_TIM_Base_Start_IT>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d111      	bne.n	80024ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024c6:	201a      	movs	r0, #26
 80024c8:	f000 fa6a 	bl	80029a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d808      	bhi.n	80024e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80024d2:	2200      	movs	r2, #0
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	201a      	movs	r0, #26
 80024d8:	f000 fa46 	bl	8002968 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0xe0>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e002      	b.n	80024ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3730      	adds	r7, #48	; 0x30
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	20000bd0 	.word	0x20000bd0
 8002504:	40014800 	.word	0x40014800
 8002508:	200000d4 	.word	0x200000d4

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	e7fe      	b.n	8002510 <NMI_Handler+0x4>

08002512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <MemManage_Handler+0x4>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler+0x4>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <UsageFault_Handler+0x4>

0800252a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800253e:	f002 f82b 	bl	8004598 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002544:	f002 f828 	bl	8004598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000924 	.word	0x20000924
 8002550:	20000a8c 	.word	0x20000a8c

08002554 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800255a:	f002 f81d 	bl	8004598 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800255e:	4803      	ldr	r0, [pc, #12]	; (800256c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002560:	f002 f81a 	bl	8004598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000924 	.word	0x20000924
 800256c:	20000bd0 	.word	0x20000bd0

08002570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002574:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002578:	f000 ffd8 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA2_Stream1_IRQHandler+0x10>)
 8002586:	f000 fbb1 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000b64 	.word	0x20000b64

08002594 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <USART6_IRQHandler+0x10>)
 800259a:	f002 ffdb 	bl	8005554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000b1c 	.word	0x20000b1c

080025a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_kill>:

int _kill(int pid, int sig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c2:	f00c fcbb 	bl	800ef3c <__errno>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2216      	movs	r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
  return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_exit>:

void _exit (int status)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffe7 	bl	80025b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ea:	e7fe      	b.n	80025ea <_exit+0x12>

080025ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e00a      	b.n	8002614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025fe:	f3af 8000 	nop.w
 8002602:	4601      	mov	r1, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf0      	blt.n	80025fe <_read+0x12>
  }

  return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264e:	605a      	str	r2, [r3, #4]
  return 0;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_isatty>:

int _isatty(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <_sbrk+0x5c>)
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <_sbrk+0x60>)
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <_sbrk+0x64>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <_sbrk+0x68>)
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d207      	bcs.n	80026d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c0:	f00c fc3c 	bl	800ef3c <__errno>
 80026c4:	4603      	mov	r3, r0
 80026c6:	220c      	movs	r2, #12
 80026c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ce:	e009      	b.n	80026e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <_sbrk+0x64>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <_sbrk+0x64>)
 80026e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20020000 	.word	0x20020000
 80026f0:	00000400 	.word	0x00000400
 80026f4:	20000c18 	.word	0x20000c18
 80026f8:	20005760 	.word	0x20005760

080026fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002758 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002724:	f7ff ffea 	bl	80026fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800272a:	490d      	ldr	r1, [pc, #52]	; (8002760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002740:	4c0a      	ldr	r4, [pc, #40]	; (800276c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274e:	f00c fbfb 	bl	800ef48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002752:	f7fe fd59 	bl	8001208 <main>
  bx  lr    
 8002756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8002764:	08013aa8 	.word	0x08013aa8
  ldr r2, =_sbss
 8002768:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 800276c:	2000575c 	.word	0x2000575c

08002770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_Init+0x40>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_Init+0x40>)
 800278a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_Init+0x40>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 f8d8 	bl	8002952 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	200f      	movs	r0, #15
 80027a4:	f7ff fe40 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fb90 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	200000d8 	.word	0x200000d8
 80027dc:	20000c1c 	.word	0x20000c1c

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000c1c 	.word	0x20000c1c

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff4c 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297a:	f7ff ff61 	bl	8002840 <__NVIC_GetPriorityGrouping>
 800297e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	6978      	ldr	r0, [r7, #20]
 8002986:	f7ff ffb1 	bl	80028ec <NVIC_EncodePriority>
 800298a:	4602      	mov	r2, r0
 800298c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff80 	bl	8002898 <__NVIC_SetPriority>
}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff54 	bl	800285c <__NVIC_EnableIRQ>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ff0a 	bl	80027e0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e099      	b.n	8002b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f8:	e00f      	b.n	8002a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fa:	f7ff fef1 	bl	80027e0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d908      	bls.n	8002a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e078      	b.n	8002b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e8      	bne.n	80029fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_DMA_Init+0x158>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0307 	bic.w	r3, r3, #7
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d117      	bne.n	8002ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fb01 	bl	80030c8 <DMA_CheckFifoParam>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ada:	2301      	movs	r3, #1
 8002adc:	e016      	b.n	8002b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fab8 	bl	800305c <DMA_CalcBaseAndBitshift>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	f010803f 	.word	0xf010803f

08002b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_DMA_Start_IT+0x26>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e040      	b.n	8002bc0 <HAL_DMA_Start_IT+0xa8>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d12f      	bne.n	8002bb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa4a 	bl	8003000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	223f      	movs	r2, #63	; 0x3f
 8002b72:	409a      	lsls	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0216 	orr.w	r2, r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bd6:	f7ff fe03 	bl	80027e0 <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e052      	b.n	8002ca0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0216 	bic.w	r2, r2, #22
 8002c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_DMA_Abort+0x62>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4a:	e013      	b.n	8002c74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c4c:	f7ff fdc8 	bl	80027e0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d90c      	bls.n	8002c74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e015      	b.n	8002ca0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e4      	bne.n	8002c4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	223f      	movs	r2, #63	; 0x3f
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00c      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_DMA_IRQHandler+0x248>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	; (8002f38 <HAL_DMA_IRQHandler+0x24c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e079      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02c      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	bf00      	nop
 8002f34:	200000d0 	.word	0x200000d0
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d307      	bcc.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x2cc>
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800301c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d108      	bne.n	8003040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800303e:	e007      	b.n	8003050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3b10      	subs	r3, #16
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <DMA_CalcBaseAndBitshift+0x64>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d909      	bls.n	800309e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	659a      	str	r2, [r3, #88]	; 0x58
 800309c:	e007      	b.n	80030ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	aaaaaaab 	.word	0xaaaaaaab
 80030c4:	08013470 	.word	0x08013470

080030c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d856      	bhi.n	8003196 <DMA_CheckFifoParam+0xce>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <DMA_CheckFifoParam+0x28>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003101 	.word	0x08003101
 80030fc:	08003197 	.word	0x08003197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d046      	beq.n	800319a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e043      	b.n	800319a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311a:	d140      	bne.n	800319e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e03d      	b.n	800319e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d121      	bne.n	8003170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d837      	bhi.n	80031a2 <DMA_CheckFifoParam+0xda>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <DMA_CheckFifoParam+0x70>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003149 	.word	0x08003149
 800313c:	0800314f 	.word	0x0800314f
 8003140:	08003149 	.word	0x08003149
 8003144:	08003161 	.word	0x08003161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e030      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d025      	beq.n	80031a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e022      	b.n	80031a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800316e:	e01c      	b.n	80031aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d903      	bls.n	800317e <DMA_CheckFifoParam+0xb6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800317c:	e018      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      break;
 8003182:	e015      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e00b      	b.n	80031ae <DMA_CheckFifoParam+0xe6>
      break;
 8003196:	bf00      	nop
 8003198:	e00a      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e008      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
 80031a0:	e006      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
    }
  } 
  
  return status; 
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e159      	b.n	8003490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f040 8148 	bne.w	800348a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d005      	beq.n	8003212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	2b02      	cmp	r3, #2
 8003210:	d130      	bne.n	8003274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003248:	2201      	movs	r2, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0201 	and.w	r2, r3, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b03      	cmp	r3, #3
 800327e:	d017      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d123      	bne.n	8003304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	220f      	movs	r2, #15
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	08da      	lsrs	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a2 	beq.w	800348a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b57      	ldr	r3, [pc, #348]	; (80034a8 <HAL_GPIO_Init+0x2e8>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a56      	ldr	r2, [pc, #344]	; (80034a8 <HAL_GPIO_Init+0x2e8>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <HAL_GPIO_Init+0x2e8>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003362:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_GPIO_Init+0x2ec>)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x202>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_GPIO_Init+0x2f4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x1fe>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <HAL_GPIO_Init+0x2f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x1fa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a46      	ldr	r2, [pc, #280]	; (80034bc <HAL_GPIO_Init+0x2fc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x1f6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a45      	ldr	r2, [pc, #276]	; (80034c0 <HAL_GPIO_Init+0x300>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x1f2>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e008      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033b6:	2303      	movs	r3, #3
 80033b8:	e004      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e002      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033c2:	2300      	movs	r3, #0
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	f002 0203 	and.w	r2, r2, #3
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	4093      	lsls	r3, r2
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d4:	4935      	ldr	r1, [pc, #212]	; (80034ac <HAL_GPIO_Init+0x2ec>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_GPIO_Init+0x304>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x304>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_GPIO_Init+0x304>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_GPIO_Init+0x304>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_GPIO_Init+0x304>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_GPIO_Init+0x304>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003460:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_GPIO_Init+0x304>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003484:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <HAL_GPIO_Init+0x304>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	f67f aea2 	bls.w	80031dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40020800 	.word	0x40020800
 80034bc:	40020c00 	.word	0x40020c00
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40013c00 	.word	0x40013c00

080034c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e001      	b.n	80034ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003514:	e003      	b.n	800351e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	619a      	str	r2, [r3, #24]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fb58 	bl	8001c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e267      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e242      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6f      	ldr	r2, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f8e4 	bl	80027e0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f8e0 	bl	80027e0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e207      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f8d0 	bl	80027e0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f8cc 	bl	80027e0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f3      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f885 	bl	80027e0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f881 	bl	80027e0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a8      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f864 	bl	80027e0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f860 	bl	80027e0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e187      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7ff f844 	bl	80027e0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff f840 	bl	80027e0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e167      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7ff f82d 	bl	80027e0 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7ff f829 	bl	80027e0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e150      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b74      	ldr	r3, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe ffe9 	bl	80027e0 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe ffe5 	bl	80027e0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e10c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x2ea>
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe ffaa 	bl	80027e0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ffa6 	bl	80027e0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0cb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b49      	ldr	r3, [pc, #292]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x334>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fe ff94 	bl	80027e0 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe ff90 	bl	80027e0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0b5      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a38      	ldr	r2, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a1 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d05c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d141      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe ff64 	bl	80027e0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe ff60 	bl	80027e0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e087      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe ff39 	bl	80027e0 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe ff35 	bl	80027e0 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x416>
 8003990:	e054      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe ff22 	bl	80027e0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe ff1e 	bl	80027e0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x444>
 80039be:	e03d      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e038      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d11a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fe50 	bl	80027e0 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fe4c 	bl	80027e0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fc18 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08013458 	.word	0x08013458
 8003c10:	200000d0 	.word	0x200000d0
 8003c14:	200000d4 	.word	0x200000d4

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b094      	sub	sp, #80	; 0x50
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
 8003c24:	2300      	movs	r3, #0
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80e1 	bhi.w	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e0db      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c50:	e0db      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c56:	e0d8      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	2200      	movs	r2, #0
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
 8003c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	0159      	lsls	r1, r3, #5
 8003c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9c:	0150      	lsls	r0, r2, #5
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	6139      	str	r1, [r7, #16]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	018a      	lsls	r2, r1, #6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cea:	4690      	mov	r8, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb18 0303 	adds.w	r3, r8, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb49 0303 	adc.w	r3, r9, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	024b      	lsls	r3, r1, #9
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d14:	4621      	mov	r1, r4
 8003d16:	024a      	lsls	r2, r1, #9
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d28:	f7fc ffc6 	bl	8000cb8 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	e058      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4611      	mov	r1, r2
 8003d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	0159      	lsls	r1, r3, #5
 8003d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d62:	0150      	lsls	r0, r2, #5
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d88:	ebb2 040a 	subs.w	r4, r2, sl
 8003d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	00eb      	lsls	r3, r5, #3
 8003d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9e:	00e2      	lsls	r2, r4, #3
 8003da0:	4614      	mov	r4, r2
 8003da2:	461d      	mov	r5, r3
 8003da4:	4643      	mov	r3, r8
 8003da6:	18e3      	adds	r3, r4, r3
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	464b      	mov	r3, r9
 8003dac:	eb45 0303 	adc.w	r3, r5, r3
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	028b      	lsls	r3, r1, #10
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc8:	4621      	mov	r1, r4
 8003dca:	028a      	lsls	r2, r1, #10
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	61fa      	str	r2, [r7, #28]
 8003dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ddc:	f7fc ff6c 	bl	8000cb8 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3750      	adds	r7, #80	; 0x50
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	200000d0 	.word	0x200000d0

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08013468 	.word	0x08013468

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08013468 	.word	0x08013468

08003e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	220f      	movs	r2, #15
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <HAL_RCC_GetClockConfig+0x60>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0207 	and.w	r2, r3, #7
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40023c00 	.word	0x40023c00

08003ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e041      	b.n	8003f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe f804 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fdd4 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e044      	b.n	8004032 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_TIM_Base_Start_IT+0xb0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x6c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d013      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x6c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x6c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_TIM_Base_Start_IT+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x6c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_TIM_Base_Start_IT+0xbc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x6c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d010      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e007      	b.n	8004030 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40014000 	.word	0x40014000

08004054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e041      	b.n	80040ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f839 	bl	80040f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fd22 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x24>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e022      	b.n	8004172 <HAL_TIM_PWM_Start+0x6a>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d109      	bne.n	8004146 <HAL_TIM_PWM_Start+0x3e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e015      	b.n	8004172 <HAL_TIM_PWM_Start+0x6a>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d109      	bne.n	8004160 <HAL_TIM_PWM_Start+0x58>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e008      	b.n	8004172 <HAL_TIM_PWM_Start+0x6a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e068      	b.n	800424c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0x82>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	e013      	b.n	80041b2 <HAL_TIM_PWM_Start+0xaa>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0x92>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_PWM_Start+0xaa>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a8:	e003      	b.n	80041b2 <HAL_TIM_PWM_Start+0xaa>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	6839      	ldr	r1, [r7, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 ff40 	bl	8005040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <HAL_TIM_PWM_Start+0x14c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d107      	bne.n	80041da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_TIM_PWM_Start+0x14c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d018      	beq.n	8004216 <HAL_TIM_PWM_Start+0x10e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d013      	beq.n	8004216 <HAL_TIM_PWM_Start+0x10e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	; (8004258 <HAL_TIM_PWM_Start+0x150>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_TIM_PWM_Start+0x10e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_TIM_PWM_Start+0x154>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_TIM_PWM_Start+0x10e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <HAL_TIM_PWM_Start+0x158>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_PWM_Start+0x10e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_TIM_PWM_Start+0x15c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d111      	bne.n	800423a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d010      	beq.n	800424a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	e007      	b.n	800424a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000

08004268 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fee0 	bl	8005040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <HAL_TIM_PWM_Stop+0xc4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d117      	bne.n	80042ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	f241 1311 	movw	r3, #4369	; 0x1111
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_TIM_PWM_Stop+0x52>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	f240 4344 	movw	r3, #1092	; 0x444
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_TIM_PWM_Stop+0x52>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <HAL_TIM_PWM_Stop+0x82>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f240 4344 	movw	r3, #1092	; 0x444
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_TIM_PWM_Stop+0x82>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x92>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	e013      	b.n	8004322 <HAL_TIM_PWM_Stop+0xba>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Stop+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004308:	e00b      	b.n	8004322 <HAL_TIM_PWM_Stop+0xba>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Stop+0xb2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	e003      	b.n	8004322 <HAL_TIM_PWM_Stop+0xba>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40010000 	.word	0x40010000

08004330 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e097      	b.n	8004474 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fd fe31 	bl	8001fc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004374:	f023 0307 	bic.w	r3, r3, #7
 8004378:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fba9 	bl	8004adc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4313      	orrs	r3, r2
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043d0:	f023 030c 	bic.w	r3, r3, #12
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	4313      	orrs	r3, r2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	011a      	lsls	r2, r3, #4
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	031b      	lsls	r3, r3, #12
 8004400:	4313      	orrs	r3, r2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4313      	orrs	r3, r2
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004494:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800449c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d110      	bne.n	80044ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044b2:	7b7b      	ldrb	r3, [r7, #13]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e069      	b.n	8004590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044cc:	e031      	b.n	8004532 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d110      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d4:	7bbb      	ldrb	r3, [r7, #14]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d102      	bne.n	80044e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044da:	7b3b      	ldrb	r3, [r7, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e055      	b.n	8004590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f4:	e01d      	b.n	8004532 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d108      	bne.n	800450e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004502:	7b7b      	ldrb	r3, [r7, #13]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d102      	bne.n	800450e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004508:	7b3b      	ldrb	r3, [r7, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e03e      	b.n	8004590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_TIM_Encoder_Start+0xc4>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d008      	beq.n	8004550 <HAL_TIM_Encoder_Start+0xd4>
 800453e:	e00f      	b.n	8004560 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fd79 	bl	8005040 <TIM_CCxChannelCmd>
      break;
 800454e:	e016      	b.n	800457e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2201      	movs	r2, #1
 8004556:	2104      	movs	r1, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fd71 	bl	8005040 <TIM_CCxChannelCmd>
      break;
 800455e:	e00e      	b.n	800457e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd69 	bl	8005040 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	2104      	movs	r1, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd62 	bl	8005040 <TIM_CCxChannelCmd>
      break;
 800457c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d020      	beq.n	80045fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01b      	beq.n	80045fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0202 	mvn.w	r2, #2
 80045cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa5b 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa4d 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa5e 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0204 	mvn.w	r2, #4
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa35 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa27 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa38 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0208 	mvn.w	r2, #8
 8004664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa0f 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa01 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa12 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0210 	mvn.w	r2, #16
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2208      	movs	r2, #8
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9e9 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9db 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9ec 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd fb7a 	bl	8001df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fd7c 	bl	8005220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9bd 	bl	8004ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0220 	mvn.w	r2, #32
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fd4e 	bl	800520c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004792:	2302      	movs	r3, #2
 8004794:	e0ae      	b.n	80048f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	f200 809f 	bhi.w	80048e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	080048e5 	.word	0x080048e5
 80047b4:	080048e5 	.word	0x080048e5
 80047b8:	080048e5 	.word	0x080048e5
 80047bc:	08004821 	.word	0x08004821
 80047c0:	080048e5 	.word	0x080048e5
 80047c4:	080048e5 	.word	0x080048e5
 80047c8:	080048e5 	.word	0x080048e5
 80047cc:	08004863 	.word	0x08004863
 80047d0:	080048e5 	.word	0x080048e5
 80047d4:	080048e5 	.word	0x080048e5
 80047d8:	080048e5 	.word	0x080048e5
 80047dc:	080048a3 	.word	0x080048a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fa04 	bl	8004bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	619a      	str	r2, [r3, #24]
      break;
 800481e:	e064      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa4a 	bl	8004cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      break;
 8004860:	e043      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fa95 	bl	8004d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0204 	bic.w	r2, r2, #4
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
      break;
 80048a0:	e023      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fadf 	bl	8004e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIM_ConfigClockSource+0x1c>
 8004914:	2302      	movs	r3, #2
 8004916:	e0b4      	b.n	8004a82 <HAL_TIM_ConfigClockSource+0x186>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004950:	d03e      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	f200 8087 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	f000 8086 	beq.w	8004a6e <HAL_TIM_ConfigClockSource+0x172>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d87f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b70      	cmp	r3, #112	; 0x70
 800496a:	d01a      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xa6>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d87b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d050      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x11a>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d877      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d03c      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xfa>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d873      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d058      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x13a>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d86f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d064      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d86b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d060      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d867      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d05a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	e062      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b2:	f000 fb25 	bl	8005000 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e04f      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e0:	f000 fb0e 	bl	8005000 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e03c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 fa82 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	; 0x50
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fadb 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004a14:	e02c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 faa1 	bl	8004f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	; 0x60
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 facb 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004a34:	e01c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fa62 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fabb 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004a54:	e00c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fab2 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004a66:	e003      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3a      	ldr	r2, [pc, #232]	; (8004bd8 <TIM_Base_SetConfig+0xfc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00f      	beq.n	8004b14 <TIM_Base_SetConfig+0x38>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d00b      	beq.n	8004b14 <TIM_Base_SetConfig+0x38>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a37      	ldr	r2, [pc, #220]	; (8004bdc <TIM_Base_SetConfig+0x100>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d007      	beq.n	8004b14 <TIM_Base_SetConfig+0x38>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a36      	ldr	r2, [pc, #216]	; (8004be0 <TIM_Base_SetConfig+0x104>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_Base_SetConfig+0x38>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <TIM_Base_SetConfig+0x108>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <TIM_Base_SetConfig+0xfc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01b      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d017      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <TIM_Base_SetConfig+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <TIM_Base_SetConfig+0x104>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00f      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <TIM_Base_SetConfig+0x108>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a25      	ldr	r2, [pc, #148]	; (8004be8 <TIM_Base_SetConfig+0x10c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a24      	ldr	r2, [pc, #144]	; (8004bec <TIM_Base_SetConfig+0x110>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_Base_SetConfig+0x8a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <TIM_Base_SetConfig+0x114>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d108      	bne.n	8004b78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <TIM_Base_SetConfig+0xfc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d103      	bne.n	8004bac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800

08004bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f023 0201 	bic.w	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f023 0302 	bic.w	r3, r3, #2
 8004c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <TIM_OC1_SetConfig+0xc8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10c      	bne.n	8004c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0308 	bic.w	r3, r3, #8
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <TIM_OC1_SetConfig+0xc8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f023 0210 	bic.w	r2, r3, #16
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0320 	bic.w	r3, r3, #32
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <TIM_OC2_SetConfig+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10d      	bne.n	8004d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <TIM_OC2_SetConfig+0xd4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d113      	bne.n	8004d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000

08004d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <TIM_OC3_SetConfig+0xd0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10d      	bne.n	8004e12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <TIM_OC3_SetConfig+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d113      	bne.n	8004e42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40010000 	.word	0x40010000

08004e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <TIM_OC4_SetConfig+0x9c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d109      	bne.n	8004ee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000

08004f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 030a 	bic.w	r3, r3, #10
 8004f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b087      	sub	sp, #28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0210 	bic.w	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f043 0307 	orr.w	r3, r3, #7
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	431a      	orrs	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2201      	movs	r2, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	43db      	mvns	r3, r3
 8005062:	401a      	ands	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e050      	b.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d013      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a13      	ldr	r2, [pc, #76]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4313      	orrs	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40014000 	.word	0x40014000

08005168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005180:	2302      	movs	r3, #2
 8005182:	e03d      	b.n	8005200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e042      	b.n	80052cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd f80c 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 ffdd 	bl	8006238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e04a      	b.n	800537c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc ffbc 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2224      	movs	r2, #36	; 0x24
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 ff8d 	bl	8006238 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0208 	orr.w	r2, r2, #8
 800534c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d175      	bne.n	8005490 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Transmit+0x2c>
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e06e      	b.n	8005492 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c2:	f7fd fa0d 	bl	80027e0 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	d108      	bne.n	80053f0 <HAL_UART_Transmit+0x6c>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e003      	b.n	80053f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053f8:	e02e      	b.n	8005458 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2180      	movs	r1, #128	; 0x80
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fc5d 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e03a      	b.n	8005492 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3302      	adds	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e007      	b.n	800544a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1cb      	bne.n	80053fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2140      	movs	r1, #64	; 0x40
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fc29 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e006      	b.n	8005492 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08c      	sub	sp, #48	; 0x30
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d14a      	bne.n	800554a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e043      	b.n	800554c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fc4e 	bl	8005d78 <UART_Start_Receive_DMA>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80054e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d12c      	bne.n	8005544 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d125      	bne.n	800553e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	617b      	str	r3, [r7, #20]
   return(result);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f043 0310 	orr.w	r3, r3, #16
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005528:	627a      	str	r2, [r7, #36]	; 0x24
 800552a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6a39      	ldr	r1, [r7, #32]
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	61fb      	str	r3, [r7, #28]
   return(result);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e5      	bne.n	8005508 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800553c:	e002      	b.n	8005544 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005548:	e000      	b.n	800554c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3730      	adds	r7, #48	; 0x30
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b0ba      	sub	sp, #232	; 0xe8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_UART_IRQHandler+0x66>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fd81 	bl	80060ba <UART_Receive_IT>
      return;
 80055b8:	e25b      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80de 	beq.w	8005780 <HAL_UART_IRQHandler+0x22c>
 80055c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80d1 	beq.w	8005780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xae>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xd2>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f043 0202 	orr.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_UART_IRQHandler+0xf6>
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	f043 0204 	orr.w	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <HAL_UART_IRQHandler+0x126>
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 81f2 	beq.w	8005a68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_UART_IRQHandler+0x14e>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fd0c 	bl	80060ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <HAL_UART_IRQHandler+0x17a>
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04f      	beq.n	800576e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fc14 	bl	8005efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d141      	bne.n	8005766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800570e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800571a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d9      	bne.n	80056e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d013      	beq.n	800575e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	4a7e      	ldr	r2, [pc, #504]	; (8005934 <HAL_UART_IRQHandler+0x3e0>)
 800573c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fab0 	bl	8002ca8 <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	e00e      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9a8 	bl	8005ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e00a      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9a4 	bl	8005ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	e006      	b.n	800577c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9a0 	bl	8005ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800577a:	e175      	b.n	8005a68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	bf00      	nop
    return;
 800577e:	e173      	b.n	8005a68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 814f 	bne.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8148 	beq.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8141 	beq.w	8005a28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	f040 80b6 	bne.w	8005938 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8145 	beq.w	8005a6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ea:	429a      	cmp	r2, r3
 80057ec:	f080 813e 	bcs.w	8005a6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005802:	f000 8088 	beq.w	8005916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800581c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800583e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800584a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1d9      	bne.n	8005806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800587a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800587e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e1      	bne.n	8005852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800589e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e6:	f023 0310 	bic.w	r3, r3, #16
 80058ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80058fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e3      	bne.n	80058d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	4618      	mov	r0, r3
 8005912:	f7fd f959 	bl	8002bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005924:	b29b      	uxth	r3, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	b29b      	uxth	r3, r3
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fc f951 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005932:	e09b      	b.n	8005a6c <HAL_UART_IRQHandler+0x518>
 8005934:	08005fc3 	.word	0x08005fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005940:	b29b      	uxth	r3, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 808e 	beq.w	8005a70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8089 	beq.w	8005a70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005982:	647a      	str	r2, [r7, #68]	; 0x44
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3314      	adds	r3, #20
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	623b      	str	r3, [r7, #32]
   return(result);
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3314      	adds	r3, #20
 80059b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059ba:	633a      	str	r2, [r7, #48]	; 0x30
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
 80059f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69b9      	ldr	r1, [r7, #24]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e3      	bne.n	80059dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fc f8d7 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a26:	e023      	b.n	8005a70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_UART_IRQHandler+0x4f4>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fad2 	bl	8005fea <UART_Transmit_IT>
    return;
 8005a46:	e014      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <HAL_UART_IRQHandler+0x51e>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb12 	bl	800608a <UART_EndTransmit_IT>
    return;
 8005a66:	e004      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a70:	bf00      	nop
  }
}
 8005a72:	37e8      	adds	r7, #232	; 0xe8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b09c      	sub	sp, #112	; 0x70
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d172      	bne.n	8005bca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	667b      	str	r3, [r7, #100]	; 0x64
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3314      	adds	r3, #20
 8005b3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3314      	adds	r3, #20
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	623b      	str	r3, [r7, #32]
   return(result);
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b72:	633a      	str	r2, [r7, #48]	; 0x30
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d119      	bne.n	8005bca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0310 	bic.w	r3, r3, #16
 8005bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bb6:	61fa      	str	r2, [r7, #28]
 8005bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bcc:	2200      	movs	r2, #0
 8005bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d106      	bne.n	8005be6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005be0:	f7fb fff8 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005be4:	e002      	b.n	8005bec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005be6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005be8:	f7ff ff50 	bl	8005a8c <HAL_UART_RxCpltCallback>
}
 8005bec:	bf00      	nop
 8005bee:	3770      	adds	r7, #112	; 0x70
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d108      	bne.n	8005c22 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7fb ffda 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c20:	e002      	b.n	8005c28 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff ff3c 	bl	8005aa0 <HAL_UART_RxHalfCpltCallback>
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4c:	2b80      	cmp	r3, #128	; 0x80
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b21      	cmp	r3, #33	; 0x21
 8005c62:	d108      	bne.n	8005c76 <UART_DMAError+0x46>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c70:	68b8      	ldr	r0, [r7, #8]
 8005c72:	f000 f91b 	bl	8005eac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b22      	cmp	r3, #34	; 0x22
 8005c96:	d108      	bne.n	8005caa <UART_DMAError+0x7a>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ca4:	68b8      	ldr	r0, [r7, #8]
 8005ca6:	f000 f929 	bl	8005efc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f043 0210 	orr.w	r2, r3, #16
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb6:	68b8      	ldr	r0, [r7, #8]
 8005cb8:	f7ff fefc 	bl	8005ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e03b      	b.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cdc:	d037      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fc fd7f 	bl	80027e0 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e03a      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d023      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d020      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d01d      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d116      	bne.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f8e0 	bl	8005efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e00f      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d0b4      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b098      	sub	sp, #96	; 0x60
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2222      	movs	r2, #34	; 0x22
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	4a3e      	ldr	r2, [pc, #248]	; (8005ea0 <UART_Start_Receive_DMA+0x128>)
 8005da6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <UART_Start_Receive_DMA+0x12c>)
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <UART_Start_Receive_DMA+0x130>)
 8005db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005dc0:	f107 0308 	add.w	r3, r7, #8
 8005dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	f7fc fe9e 	bl	8002b18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d019      	beq.n	8005e2e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	657b      	str	r3, [r7, #84]	; 0x54
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e4e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	617b      	str	r3, [r7, #20]
   return(result);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e82:	627a      	str	r2, [r7, #36]	; 0x24
 8005e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6a39      	ldr	r1, [r7, #32]
 8005e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3760      	adds	r7, #96	; 0x60
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08005ac9 	.word	0x08005ac9
 8005ea4:	08005bf5 	.word	0x08005bf5
 8005ea8:	08005c31 	.word	0x08005c31

08005eac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	61ba      	str	r2, [r7, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6979      	ldr	r1, [r7, #20]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005ef0:	bf00      	nop
 8005ef2:	3724      	adds	r7, #36	; 0x24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b095      	sub	sp, #84	; 0x54
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f24:	643a      	str	r2, [r7, #64]	; 0x40
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d119      	bne.n	8005fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f94:	61ba      	str	r2, [r7, #24]
 8005f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6979      	ldr	r1, [r7, #20]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fb6:	bf00      	nop
 8005fb8:	3754      	adds	r7, #84	; 0x54
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fd69 	bl	8005ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b21      	cmp	r3, #33	; 0x21
 8005ffc:	d13e      	bne.n	800607c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d114      	bne.n	8006032 <UART_Transmit_IT+0x48>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d110      	bne.n	8006032 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	1c9a      	adds	r2, r3, #2
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]
 8006030:	e008      	b.n	8006044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6211      	str	r1, [r2, #32]
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4619      	mov	r1, r3
 8006052:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800607c:	2302      	movs	r3, #2
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fce4 	bl	8005a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b08c      	sub	sp, #48	; 0x30
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b22      	cmp	r3, #34	; 0x22
 80060cc:	f040 80ae 	bne.w	800622c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d8:	d117      	bne.n	800610a <UART_Receive_IT+0x50>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d113      	bne.n	800610a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	1c9a      	adds	r2, r3, #2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28
 8006108:	e026      	b.n	8006158 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d007      	beq.n	800612e <UART_Receive_IT+0x74>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <UART_Receive_IT+0x82>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e008      	b.n	800614e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4619      	mov	r1, r3
 8006166:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006168:	2b00      	cmp	r3, #0
 800616a:	d15d      	bne.n	8006228 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0220 	bic.w	r2, r2, #32
 800617a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800618a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d135      	bne.n	800621e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 0310 	bic.w	r3, r3, #16
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	623a      	str	r2, [r7, #32]
 80061da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d10a      	bne.n	8006210 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb fcdc 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
 800621c:	e002      	b.n	8006224 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fc34 	bl	8005a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e002      	b.n	800622e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3730      	adds	r7, #48	; 0x30
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800623c:	b0c0      	sub	sp, #256	; 0x100
 800623e:	af00      	add	r7, sp, #0
 8006240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	ea40 0301 	orr.w	r3, r0, r1
 8006260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	431a      	orrs	r2, r3
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	431a      	orrs	r2, r3
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006290:	f021 010c 	bic.w	r1, r1, #12
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800629e:	430b      	orrs	r3, r1
 80062a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	6999      	ldr	r1, [r3, #24]
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	ea40 0301 	orr.w	r3, r0, r1
 80062be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8f      	ldr	r3, [pc, #572]	; (8006504 <UART_SetConfig+0x2cc>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d005      	beq.n	80062d8 <UART_SetConfig+0xa0>
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b8d      	ldr	r3, [pc, #564]	; (8006508 <UART_SetConfig+0x2d0>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d104      	bne.n	80062e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7fd fdc4 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80062dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062e0:	e003      	b.n	80062ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fd fdab 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80062e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f4:	f040 810c 	bne.w	8006510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	1891      	adds	r1, r2, r2
 8006310:	65b9      	str	r1, [r7, #88]	; 0x58
 8006312:	415b      	adcs	r3, r3
 8006314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800631a:	4621      	mov	r1, r4
 800631c:	eb12 0801 	adds.w	r8, r2, r1
 8006320:	4629      	mov	r1, r5
 8006322:	eb43 0901 	adc.w	r9, r3, r1
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800633a:	4690      	mov	r8, r2
 800633c:	4699      	mov	r9, r3
 800633e:	4623      	mov	r3, r4
 8006340:	eb18 0303 	adds.w	r3, r8, r3
 8006344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006348:	462b      	mov	r3, r5
 800634a:	eb49 0303 	adc.w	r3, r9, r3
 800634e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800635e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006366:	460b      	mov	r3, r1
 8006368:	18db      	adds	r3, r3, r3
 800636a:	653b      	str	r3, [r7, #80]	; 0x50
 800636c:	4613      	mov	r3, r2
 800636e:	eb42 0303 	adc.w	r3, r2, r3
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
 8006374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800637c:	f7fa fc9c 	bl	8000cb8 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4b61      	ldr	r3, [pc, #388]	; (800650c <UART_SetConfig+0x2d4>)
 8006386:	fba3 2302 	umull	r2, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	011c      	lsls	r4, r3, #4
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800639c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	1891      	adds	r1, r2, r2
 80063a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80063a8:	415b      	adcs	r3, r3
 80063aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063b0:	4641      	mov	r1, r8
 80063b2:	eb12 0a01 	adds.w	sl, r2, r1
 80063b6:	4649      	mov	r1, r9
 80063b8:	eb43 0b01 	adc.w	fp, r3, r1
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d0:	4692      	mov	sl, r2
 80063d2:	469b      	mov	fp, r3
 80063d4:	4643      	mov	r3, r8
 80063d6:	eb1a 0303 	adds.w	r3, sl, r3
 80063da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063de:	464b      	mov	r3, r9
 80063e0:	eb4b 0303 	adc.w	r3, fp, r3
 80063e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063fc:	460b      	mov	r3, r1
 80063fe:	18db      	adds	r3, r3, r3
 8006400:	643b      	str	r3, [r7, #64]	; 0x40
 8006402:	4613      	mov	r3, r2
 8006404:	eb42 0303 	adc.w	r3, r2, r3
 8006408:	647b      	str	r3, [r7, #68]	; 0x44
 800640a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800640e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006412:	f7fa fc51 	bl	8000cb8 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4611      	mov	r1, r2
 800641c:	4b3b      	ldr	r3, [pc, #236]	; (800650c <UART_SetConfig+0x2d4>)
 800641e:	fba3 2301 	umull	r2, r3, r3, r1
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2264      	movs	r2, #100	; 0x64
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	1acb      	subs	r3, r1, r3
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006432:	4b36      	ldr	r3, [pc, #216]	; (800650c <UART_SetConfig+0x2d4>)
 8006434:	fba3 2302 	umull	r2, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006440:	441c      	add	r4, r3
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800644c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	63b9      	str	r1, [r7, #56]	; 0x38
 800645c:	415b      	adcs	r3, r3
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006464:	4641      	mov	r1, r8
 8006466:	1851      	adds	r1, r2, r1
 8006468:	6339      	str	r1, [r7, #48]	; 0x30
 800646a:	4649      	mov	r1, r9
 800646c:	414b      	adcs	r3, r1
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800647c:	4659      	mov	r1, fp
 800647e:	00cb      	lsls	r3, r1, #3
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006486:	4651      	mov	r1, sl
 8006488:	00ca      	lsls	r2, r1, #3
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	4603      	mov	r3, r0
 8006490:	4642      	mov	r2, r8
 8006492:	189b      	adds	r3, r3, r2
 8006494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006498:	464b      	mov	r3, r9
 800649a:	460a      	mov	r2, r1
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064b8:	460b      	mov	r3, r1
 80064ba:	18db      	adds	r3, r3, r3
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064be:	4613      	mov	r3, r2
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064ce:	f7fa fbf3 	bl	8000cb8 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <UART_SetConfig+0x2d4>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a08      	ldr	r2, [pc, #32]	; (800650c <UART_SetConfig+0x2d4>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	f003 0207 	and.w	r2, r3, #7
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4422      	add	r2, r4
 80064fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006500:	e106      	b.n	8006710 <UART_SetConfig+0x4d8>
 8006502:	bf00      	nop
 8006504:	40011000 	.word	0x40011000
 8006508:	40011400 	.word	0x40011400
 800650c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006514:	2200      	movs	r2, #0
 8006516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800651a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800651e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006522:	4642      	mov	r2, r8
 8006524:	464b      	mov	r3, r9
 8006526:	1891      	adds	r1, r2, r2
 8006528:	6239      	str	r1, [r7, #32]
 800652a:	415b      	adcs	r3, r3
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006532:	4641      	mov	r1, r8
 8006534:	1854      	adds	r4, r2, r1
 8006536:	4649      	mov	r1, r9
 8006538:	eb43 0501 	adc.w	r5, r3, r1
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	00eb      	lsls	r3, r5, #3
 8006546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	4643      	mov	r3, r8
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006558:	464b      	mov	r3, r9
 800655a:	eb45 0303 	adc.w	r3, r5, r3
 800655e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800656e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800657e:	4629      	mov	r1, r5
 8006580:	008b      	lsls	r3, r1, #2
 8006582:	4621      	mov	r1, r4
 8006584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006588:	4621      	mov	r1, r4
 800658a:	008a      	lsls	r2, r1, #2
 800658c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006590:	f7fa fb92 	bl	8000cb8 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4b60      	ldr	r3, [pc, #384]	; (800671c <UART_SetConfig+0x4e4>)
 800659a:	fba3 2302 	umull	r2, r3, r3, r2
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	011c      	lsls	r4, r3, #4
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	61b9      	str	r1, [r7, #24]
 80065bc:	415b      	adcs	r3, r3
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6139      	str	r1, [r7, #16]
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	67bb      	str	r3, [r7, #120]	; 0x78
 800660e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800661c:	4649      	mov	r1, r9
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	4641      	mov	r1, r8
 8006622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006626:	4641      	mov	r1, r8
 8006628:	008a      	lsls	r2, r1, #2
 800662a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800662e:	f7fa fb43 	bl	8000cb8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4611      	mov	r1, r2
 8006638:	4b38      	ldr	r3, [pc, #224]	; (800671c <UART_SetConfig+0x4e4>)
 800663a:	fba3 2301 	umull	r2, r3, r3, r1
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	2264      	movs	r2, #100	; 0x64
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	1acb      	subs	r3, r1, r3
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	3332      	adds	r3, #50	; 0x32
 800664c:	4a33      	ldr	r2, [pc, #204]	; (800671c <UART_SetConfig+0x4e4>)
 800664e:	fba2 2303 	umull	r2, r3, r2, r3
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006658:	441c      	add	r4, r3
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665e:	2200      	movs	r2, #0
 8006660:	673b      	str	r3, [r7, #112]	; 0x70
 8006662:	677a      	str	r2, [r7, #116]	; 0x74
 8006664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	1891      	adds	r1, r2, r2
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	415b      	adcs	r3, r3
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006678:	4641      	mov	r1, r8
 800667a:	1851      	adds	r1, r2, r1
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	4649      	mov	r1, r9
 8006680:	414b      	adcs	r3, r1
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006690:	4659      	mov	r1, fp
 8006692:	00cb      	lsls	r3, r1, #3
 8006694:	4651      	mov	r1, sl
 8006696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669a:	4651      	mov	r1, sl
 800669c:	00ca      	lsls	r2, r1, #3
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	4642      	mov	r2, r8
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066aa:	464b      	mov	r3, r9
 80066ac:	460a      	mov	r2, r1
 80066ae:	eb42 0303 	adc.w	r3, r2, r3
 80066b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	663b      	str	r3, [r7, #96]	; 0x60
 80066be:	667a      	str	r2, [r7, #100]	; 0x64
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066cc:	4649      	mov	r1, r9
 80066ce:	008b      	lsls	r3, r1, #2
 80066d0:	4641      	mov	r1, r8
 80066d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066d6:	4641      	mov	r1, r8
 80066d8:	008a      	lsls	r2, r1, #2
 80066da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066de:	f7fa faeb 	bl	8000cb8 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <UART_SetConfig+0x4e4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <UART_SetConfig+0x4e4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4422      	add	r2, r4
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671c:	51eb851f 	.word	0x51eb851f

08006720 <__NVIC_SetPriority>:
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800672c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db0a      	blt.n	800674a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	490c      	ldr	r1, [pc, #48]	; (800676c <__NVIC_SetPriority+0x4c>)
 800673a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673e:	0112      	lsls	r2, r2, #4
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	440b      	add	r3, r1
 8006744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006748:	e00a      	b.n	8006760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b2da      	uxtb	r2, r3
 800674e:	4908      	ldr	r1, [pc, #32]	; (8006770 <__NVIC_SetPriority+0x50>)
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	3b04      	subs	r3, #4
 8006758:	0112      	lsls	r2, r2, #4
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	440b      	add	r3, r1
 800675e:	761a      	strb	r2, [r3, #24]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	e000e100 	.word	0xe000e100
 8006770:	e000ed00 	.word	0xe000ed00

08006774 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <SysTick_Handler+0x1c>)
 800677a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800677c:	f002 fa9a 	bl	8008cb4 <xTaskGetSchedulerState>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d001      	beq.n	800678a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006786:	f003 f97f 	bl	8009a88 <xPortSysTickHandler>
  }
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010

08006794 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006798:	2100      	movs	r1, #0
 800679a:	f06f 0004 	mvn.w	r0, #4
 800679e:	f7ff ffbf 	bl	8006720 <__NVIC_SetPriority>
#endif
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	603b      	str	r3, [r7, #0]
  return(result);
 80067b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067ba:	f06f 0305 	mvn.w	r3, #5
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	e00c      	b.n	80067dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <osKernelInitialize+0x44>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <osKernelInitialize+0x44>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e002      	b.n	80067dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067dc:	687b      	ldr	r3, [r7, #4]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000c20 	.word	0x20000c20

080067f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f6:	f3ef 8305 	mrs	r3, IPSR
 80067fa:	603b      	str	r3, [r7, #0]
  return(result);
 80067fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006802:	f06f 0305 	mvn.w	r3, #5
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e010      	b.n	800682c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <osKernelStart+0x48>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d109      	bne.n	8006826 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006812:	f7ff ffbf 	bl	8006794 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <osKernelStart+0x48>)
 8006818:	2202      	movs	r2, #2
 800681a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800681c:	f001 fdee 	bl	80083fc <vTaskStartScheduler>
      stat = osOK;
 8006820:	2300      	movs	r3, #0
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	e002      	b.n	800682c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800682a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800682c:	687b      	ldr	r3, [r7, #4]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000c20 	.word	0x20000c20

0800683c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	; 0x38
 8006840:	af04      	add	r7, sp, #16
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	617b      	str	r3, [r7, #20]
  return(result);
 8006852:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d17e      	bne.n	8006956 <osThreadNew+0x11a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d07b      	beq.n	8006956 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006862:	2318      	movs	r3, #24
 8006864:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800686e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d045      	beq.n	8006902 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <osThreadNew+0x48>
        name = attr->name;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <osThreadNew+0x6e>
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2b38      	cmp	r3, #56	; 0x38
 800689c:	d805      	bhi.n	80068aa <osThreadNew+0x6e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <osThreadNew+0x72>
        return (NULL);
 80068aa:	2300      	movs	r3, #0
 80068ac:	e054      	b.n	8006958 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <osThreadNew+0xa8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2ba7      	cmp	r3, #167	; 0xa7
 80068cc:	d90a      	bls.n	80068e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <osThreadNew+0xa8>
        mem = 1;
 80068de:	2301      	movs	r3, #1
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	e010      	b.n	8006906 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10c      	bne.n	8006906 <osThreadNew+0xca>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d108      	bne.n	8006906 <osThreadNew+0xca>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <osThreadNew+0xca>
          mem = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e001      	b.n	8006906 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d110      	bne.n	800692e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 fb7e 	bl	8008024 <xTaskCreateStatic>
 8006928:	4603      	mov	r3, r0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	e013      	b.n	8006956 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d110      	bne.n	8006956 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	b29a      	uxth	r2, r3
 8006938:	f107 0310 	add.w	r3, r7, #16
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 fbc9 	bl	80080de <xTaskCreate>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <osThreadNew+0x11a>
            hTask = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006956:	693b      	ldr	r3, [r7, #16]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006968:	f3ef 8305 	mrs	r3, IPSR
 800696c:	60bb      	str	r3, [r7, #8]
  return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <osDelay+0x1c>
    stat = osErrorISR;
 8006974:	f06f 0305 	mvn.w	r3, #5
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e007      	b.n	800698c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fd04 	bl	8008394 <vTaskDelay>
    }
  }

  return (stat);
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006996:	b580      	push	{r7, lr}
 8006998:	b08a      	sub	sp, #40	; 0x28
 800699a:	af02      	add	r7, sp, #8
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a6:	f3ef 8305 	mrs	r3, IPSR
 80069aa:	613b      	str	r3, [r7, #16]
  return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d175      	bne.n	8006a9e <osSemaphoreNew+0x108>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d072      	beq.n	8006a9e <osSemaphoreNew+0x108>
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d86e      	bhi.n	8006a9e <osSemaphoreNew+0x108>
    mem = -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <osSemaphoreNew+0x4c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b4f      	cmp	r3, #79	; 0x4f
 80069da:	d902      	bls.n	80069e2 <osSemaphoreNew+0x4c>
        mem = 1;
 80069dc:	2301      	movs	r3, #1
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e00c      	b.n	80069fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <osSemaphoreNew+0x66>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <osSemaphoreNew+0x66>
          mem = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e001      	b.n	80069fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a02:	d04c      	beq.n	8006a9e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d128      	bne.n	8006a5c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10a      	bne.n	8006a26 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2203      	movs	r2, #3
 8006a16:	9200      	str	r2, [sp, #0]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f000 fb5b 	bl	80070d8 <xQueueGenericCreateStatic>
 8006a22:	61f8      	str	r0, [r7, #28]
 8006a24:	e005      	b.n	8006a32 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a26:	2203      	movs	r2, #3
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f000 fbcc 	bl	80071c8 <xQueueGenericCreate>
 8006a30:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d022      	beq.n	8006a7e <osSemaphoreNew+0xe8>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01f      	beq.n	8006a7e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2200      	movs	r2, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	69f8      	ldr	r0, [r7, #28]
 8006a46:	f000 fc87 	bl	8007358 <xQueueGenericSend>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d016      	beq.n	8006a7e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006a50:	69f8      	ldr	r0, [r7, #28]
 8006a52:	f001 f913 	bl	8007c7c <vQueueDelete>
            hSemaphore = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	e010      	b.n	8006a7e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d108      	bne.n	8006a74 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fc09 	bl	8007282 <xQueueCreateCountingSemaphoreStatic>
 8006a70:	61f8      	str	r0, [r7, #28]
 8006a72:	e004      	b.n	8006a7e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fc3a 	bl	80072f0 <xQueueCreateCountingSemaphore>
 8006a7c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e001      	b.n	8006a96 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a96:	6979      	ldr	r1, [r7, #20]
 8006a98:	69f8      	ldr	r0, [r7, #28]
 8006a9a:	f001 fa3b 	bl	8007f14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a9e:	69fb      	ldr	r3, [r7, #28]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006ac0:	f06f 0303 	mvn.w	r3, #3
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e039      	b.n	8006b3c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac8:	f3ef 8305 	mrs	r3, IPSR
 8006acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ace:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d022      	beq.n	8006b1a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006ada:	f06f 0303 	mvn.w	r3, #3
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e02c      	b.n	8006b3c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	461a      	mov	r2, r3
 8006aec:	2100      	movs	r1, #0
 8006aee:	6938      	ldr	r0, [r7, #16]
 8006af0:	f001 f844 	bl	8007b7c <xQueueReceiveFromISR>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d003      	beq.n	8006b02 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006afa:	f06f 0302 	mvn.w	r3, #2
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e01c      	b.n	8006b3c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d019      	beq.n	8006b3c <osSemaphoreAcquire+0x94>
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <osSemaphoreAcquire+0xa0>)
 8006b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	e010      	b.n	8006b3c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6938      	ldr	r0, [r7, #16]
 8006b1e:	f000 ff21 	bl	8007964 <xQueueSemaphoreTake>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d009      	beq.n	8006b3c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b2e:	f06f 0301 	mvn.w	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e002      	b.n	8006b3c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b36:	f06f 0302 	mvn.w	r3, #2
 8006b3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b3c:	697b      	ldr	r3, [r7, #20]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b62:	f06f 0303 	mvn.w	r3, #3
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e02c      	b.n	8006bc4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6a:	f3ef 8305 	mrs	r3, IPSR
 8006b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b70:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01a      	beq.n	8006bac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6938      	ldr	r0, [r7, #16]
 8006b82:	f000 fd82 	bl	800768a <xQueueGiveFromISR>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006b8c:	f06f 0302 	mvn.w	r3, #2
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e017      	b.n	8006bc4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d014      	beq.n	8006bc4 <osSemaphoreRelease+0x78>
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <osSemaphoreRelease+0x84>)
 8006b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	e00b      	b.n	8006bc4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	f000 fbd0 	bl	8007358 <xQueueGenericSend>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d002      	beq.n	8006bc4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006bbe:	f06f 0302 	mvn.w	r3, #2
 8006bc2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006bc4:	697b      	ldr	r3, [r7, #20]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	e000ed04 	.word	0xe000ed04

08006bd4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be4:	f3ef 8305 	mrs	r3, IPSR
 8006be8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d15f      	bne.n	8006cb0 <osMessageQueueNew+0xdc>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d05c      	beq.n	8006cb0 <osMessageQueueNew+0xdc>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d059      	beq.n	8006cb0 <osMessageQueueNew+0xdc>
    mem = -1;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d029      	beq.n	8006c5c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <osMessageQueueNew+0x62>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b4f      	cmp	r3, #79	; 0x4f
 8006c16:	d90e      	bls.n	8006c36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695a      	ldr	r2, [r3, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d302      	bcc.n	8006c36 <osMessageQueueNew+0x62>
        mem = 1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e014      	b.n	8006c60 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d110      	bne.n	8006c60 <osMessageQueueNew+0x8c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10c      	bne.n	8006c60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <osMessageQueueNew+0x8c>
          mem = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e001      	b.n	8006c60 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d10b      	bne.n	8006c7e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	9100      	str	r1, [sp, #0]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fa2f 	bl	80070d8 <xQueueGenericCreateStatic>
 8006c7a:	61f8      	str	r0, [r7, #28]
 8006c7c:	e008      	b.n	8006c90 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006c84:	2200      	movs	r2, #0
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fa9d 	bl	80071c8 <xQueueGenericCreate>
 8006c8e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00c      	beq.n	8006cb0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ca8:	6979      	ldr	r1, [r7, #20]
 8006caa:	69f8      	ldr	r0, [r7, #28]
 8006cac:	f001 f932 	bl	8007f14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd4:	f3ef 8305 	mrs	r3, IPSR
 8006cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cda:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d028      	beq.n	8006d32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <osMessageQueuePut+0x36>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <osMessageQueuePut+0x36>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006cf2:	f06f 0303 	mvn.w	r3, #3
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e038      	b.n	8006d6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	2300      	movs	r3, #0
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	69b8      	ldr	r0, [r7, #24]
 8006d08:	f000 fc24 	bl	8007554 <xQueueGenericSendFromISR>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d003      	beq.n	8006d1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006d12:	f06f 0302 	mvn.w	r3, #2
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e028      	b.n	8006d6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d025      	beq.n	8006d6c <osMessageQueuePut+0xb0>
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <osMessageQueuePut+0xbc>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	e01c      	b.n	8006d6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <osMessageQueuePut+0x82>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006d3e:	f06f 0303 	mvn.w	r3, #3
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	e012      	b.n	8006d6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d46:	2300      	movs	r3, #0
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	69b8      	ldr	r0, [r7, #24]
 8006d4e:	f000 fb03 	bl	8007358 <xQueueGenericSend>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d009      	beq.n	8006d6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006d5e:	f06f 0301 	mvn.w	r3, #1
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e002      	b.n	8006d6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006d66:	f06f 0302 	mvn.w	r3, #2
 8006d6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d92:	f3ef 8305 	mrs	r3, IPSR
 8006d96:	617b      	str	r3, [r7, #20]
  return(result);
 8006d98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d028      	beq.n	8006df0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <osMessageQueueGet+0x34>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <osMessageQueueGet+0x34>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006db0:	f06f 0303 	mvn.w	r3, #3
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e037      	b.n	8006e28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	69b8      	ldr	r0, [r7, #24]
 8006dc6:	f000 fed9 	bl	8007b7c <xQueueReceiveFromISR>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006dd0:	f06f 0302 	mvn.w	r3, #2
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	e027      	b.n	8006e28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d024      	beq.n	8006e28 <osMessageQueueGet+0xac>
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <osMessageQueueGet+0xb8>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	e01b      	b.n	8006e28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <osMessageQueueGet+0x80>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006dfc:	f06f 0303 	mvn.w	r3, #3
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	e011      	b.n	8006e28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	69b8      	ldr	r0, [r7, #24]
 8006e0a:	f000 fccb 	bl	80077a4 <xQueueReceive>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d009      	beq.n	8006e28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006e1a:	f06f 0301 	mvn.w	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	e002      	b.n	8006e28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006e22:	f06f 0302 	mvn.w	r3, #2
 8006e26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e28:	69fb      	ldr	r3, [r7, #28]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <vApplicationGetIdleTaskMemory+0x30>)
 8006e4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000c24 	.word	0x20000c24
 8006e68:	20000ccc 	.word	0x20000ccc

08006e6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a07      	ldr	r2, [pc, #28]	; (8006e98 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4a06      	ldr	r2, [pc, #24]	; (8006e9c <vApplicationGetTimerTaskMemory+0x30>)
 8006e82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8a:	601a      	str	r2, [r3, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	20000ecc 	.word	0x20000ecc
 8006e9c:	20000f74 	.word	0x20000f74

08006ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f103 0208 	add.w	r2, r3, #8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f103 0208 	add.w	r2, r3, #8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0208 	add.w	r2, r3, #8
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f58:	d103      	bne.n	8006f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e00c      	b.n	8006f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3308      	adds	r3, #8
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e002      	b.n	8006f70 <vListInsert+0x2e>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d2f6      	bcs.n	8006f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	601a      	str	r2, [r3, #0]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6852      	ldr	r2, [r2, #4]
 8006fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d103      	bne.n	8006fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	1e5a      	subs	r2, r3, #1
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007032:	f002 fc97 	bl	8009964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	3b01      	subs	r3, #1
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d114      	bne.n	80070b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01a      	beq.n	80070c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3310      	adds	r3, #16
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fc4b 	bl	8008930 <xTaskRemoveFromEventList>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <xQueueGenericReset+0xcc>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e009      	b.n	80070c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3310      	adds	r3, #16
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fef2 	bl	8006ea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff feed 	bl	8006ea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f002 fc7d 	bl	80099c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070ca:	2301      	movs	r3, #1
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08e      	sub	sp, #56	; 0x38
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <xQueueGenericCreateStatic+0x52>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <xQueueGenericCreateStatic+0x56>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <xQueueGenericCreateStatic+0x58>
 800712e:	2300      	movs	r3, #0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	623b      	str	r3, [r7, #32]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <xQueueGenericCreateStatic+0x7e>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <xQueueGenericCreateStatic+0x82>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <xQueueGenericCreateStatic+0x84>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	61fb      	str	r3, [r7, #28]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007176:	2350      	movs	r3, #80	; 0x50
 8007178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d00a      	beq.n	8007196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61bb      	str	r3, [r7, #24]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f83f 	bl	800723c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3730      	adds	r7, #48	; 0x30
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	613b      	str	r3, [r7, #16]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3350      	adds	r3, #80	; 0x50
 8007200:	4618      	mov	r0, r3
 8007202:	f002 fcd1 	bl	8009ba8 <pvPortMalloc>
 8007206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d011      	beq.n	8007232 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3350      	adds	r3, #80	; 0x50
 8007216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007220:	79fa      	ldrb	r2, [r7, #7]
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f805 	bl	800723c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007232:	69bb      	ldr	r3, [r7, #24]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e002      	b.n	800725e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800726a:	2101      	movs	r1, #1
 800726c:	69b8      	ldr	r0, [r7, #24]
 800726e:	f7ff fecb 	bl	8007008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007282:	b580      	push	{r7, lr}
 8007284:	b08a      	sub	sp, #40	; 0x28
 8007286:	af02      	add	r7, sp, #8
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	61bb      	str	r3, [r7, #24]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d90a      	bls.n	80072c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	617b      	str	r3, [r7, #20]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072c8:	2302      	movs	r3, #2
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2100      	movs	r1, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff ff00 	bl	80070d8 <xQueueGenericCreateStatic>
 80072d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072e6:	69fb      	ldr	r3, [r7, #28]
	}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d90a      	bls.n	8007334 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60fb      	str	r3, [r7, #12]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007334:	2202      	movs	r2, #2
 8007336:	2100      	movs	r1, #0
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff45 	bl	80071c8 <xQueueGenericCreate>
 800733e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800734c:	697b      	ldr	r3, [r7, #20]
	}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <xQueueGenericSend+0x32>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <xQueueGenericSend+0x40>
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <xQueueGenericSend+0x44>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <xQueueGenericSend+0x46>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <xQueueGenericSend+0x60>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d103      	bne.n	80073c6 <xQueueGenericSend+0x6e>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <xQueueGenericSend+0x72>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueGenericSend+0x74>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	623b      	str	r3, [r7, #32]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e6:	f001 fc65 	bl	8008cb4 <xTaskGetSchedulerState>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <xQueueGenericSend+0x9e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <xQueueGenericSend+0xa2>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <xQueueGenericSend+0xa4>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <xQueueGenericSend+0xbe>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	61fb      	str	r3, [r7, #28]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007416:	f002 faa5 	bl	8009964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <xQueueGenericSend+0xd4>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d129      	bne.n	8007480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007432:	f000 fc5e 	bl	8007cf2 <prvCopyDataToQueue>
 8007436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d010      	beq.n	8007462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	3324      	adds	r3, #36	; 0x24
 8007444:	4618      	mov	r0, r3
 8007446:	f001 fa73 	bl	8008930 <xTaskRemoveFromEventList>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007450:	4b3f      	ldr	r3, [pc, #252]	; (8007550 <xQueueGenericSend+0x1f8>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	e00a      	b.n	8007478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <xQueueGenericSend+0x1f8>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007478:	f002 faa4 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 800747c:	2301      	movs	r3, #1
 800747e:	e063      	b.n	8007548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007486:	f002 fa9d 	bl	80099c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800748a:	2300      	movs	r3, #0
 800748c:	e05c      	b.n	8007548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007494:	f107 0314 	add.w	r3, r7, #20
 8007498:	4618      	mov	r0, r3
 800749a:	f001 faad 	bl	80089f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a2:	f002 fa8f 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074a6:	f001 f819 	bl	80084dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074aa:	f002 fa5b 	bl	8009964 <vPortEnterCritical>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d103      	bne.n	80074c4 <xQueueGenericSend+0x16c>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d0:	d103      	bne.n	80074da <xQueueGenericSend+0x182>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074da:	f002 fa73 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074de:	1d3a      	adds	r2, r7, #4
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 fa9c 	bl	8008a24 <xTaskCheckForTimeOut>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d124      	bne.n	800753c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f4:	f000 fcf5 	bl	8007ee2 <prvIsQueueFull>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	3310      	adds	r3, #16
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f001 f9c2 	bl	8008890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800750c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750e:	f000 fc80 	bl	8007e12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007512:	f000 fff1 	bl	80084f8 <xTaskResumeAll>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f af7c 	bne.w	8007416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <xQueueGenericSend+0x1f8>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	e772      	b.n	8007416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007532:	f000 fc6e 	bl	8007e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007536:	f000 ffdf 	bl	80084f8 <xTaskResumeAll>
 800753a:	e76c      	b.n	8007416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800753c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800753e:	f000 fc68 	bl	8007e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007542:	f000 ffd9 	bl	80084f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007548:	4618      	mov	r0, r3
 800754a:	3738      	adds	r7, #56	; 0x38
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b090      	sub	sp, #64	; 0x40
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d103      	bne.n	8007590 <xQueueGenericSendFromISR+0x3c>
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <xQueueGenericSendFromISR+0x40>
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <xQueueGenericSendFromISR+0x42>
 8007594:	2300      	movs	r3, #0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d103      	bne.n	80075be <xQueueGenericSendFromISR+0x6a>
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <xQueueGenericSendFromISR+0x6e>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <xQueueGenericSendFromISR+0x70>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075de:	f002 faa3 	bl	8009b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075e2:	f3ef 8211 	mrs	r2, BASEPRI
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <xQueueGenericSendFromISR+0xbc>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d12f      	bne.n	8007670 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007626:	f000 fb64 	bl	8007cf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800762a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007632:	d112      	bne.n	800765a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d016      	beq.n	800766a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	3324      	adds	r3, #36	; 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f975 	bl	8008930 <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e007      	b.n	800766a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800765a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800765e:	3301      	adds	r3, #1
 8007660:	b2db      	uxtb	r3, r3
 8007662:	b25a      	sxtb	r2, r3
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800766a:	2301      	movs	r3, #1
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800766e:	e001      	b.n	8007674 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007676:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800767e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007682:	4618      	mov	r0, r3
 8007684:	3740      	adds	r7, #64	; 0x40
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b08e      	sub	sp, #56	; 0x38
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	623b      	str	r3, [r7, #32]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	61fb      	str	r3, [r7, #28]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <xQueueGiveFromISR+0x58>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <xQueueGiveFromISR+0x5c>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <xQueueGiveFromISR+0x5e>
 80076e6:	2300      	movs	r3, #0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <xQueueGiveFromISR+0x78>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	61bb      	str	r3, [r7, #24]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007702:	f002 fa11 	bl	8009b28 <vPortValidateInterruptPriority>
	__asm volatile
 8007706:	f3ef 8211 	mrs	r2, BASEPRI
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	617a      	str	r2, [r7, #20]
 800771c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800771e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772e:	429a      	cmp	r2, r3
 8007730:	d22b      	bcs.n	800778a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774c:	d112      	bne.n	8007774 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f8e8 	bl	8008930 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e007      	b.n	8007784 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007778:	3301      	adds	r3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	b25a      	sxtb	r2, r3
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
 8007788:	e001      	b.n	800778e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800778a:	2300      	movs	r3, #0
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f383 8811 	msr	BASEPRI, r3
}
 8007798:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800779c:	4618      	mov	r0, r3
 800779e:	3738      	adds	r7, #56	; 0x38
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08c      	sub	sp, #48	; 0x30
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <xQueueReceive+0x30>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	623b      	str	r3, [r7, #32]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <xQueueReceive+0x3e>
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <xQueueReceive+0x42>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueReceive+0x44>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueReceive+0x5e>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	61fb      	str	r3, [r7, #28]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007802:	f001 fa57 	bl	8008cb4 <xTaskGetSchedulerState>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueReceive+0x6e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueReceive+0x72>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueReceive+0x74>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueReceive+0x8e>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61bb      	str	r3, [r7, #24]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f002 f897 	bl	8009964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01f      	beq.n	8007882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 fabe 	bl	8007dc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00f      	beq.n	800787a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	3310      	adds	r3, #16
 800785e:	4618      	mov	r0, r3
 8007860:	f001 f866 	bl	8008930 <xTaskRemoveFromEventList>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800786a:	4b3d      	ldr	r3, [pc, #244]	; (8007960 <xQueueReceive+0x1bc>)
 800786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800787a:	f002 f8a3 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 800787e:	2301      	movs	r3, #1
 8007880:	e069      	b.n	8007956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007888:	f002 f89c 	bl	80099c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800788c:	2300      	movs	r3, #0
 800788e:	e062      	b.n	8007956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f001 f8ac 	bl	80089f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078a4:	f002 f88e 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078a8:	f000 fe18 	bl	80084dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ac:	f002 f85a 	bl	8009964 <vPortEnterCritical>
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b6:	b25b      	sxtb	r3, r3
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078bc:	d103      	bne.n	80078c6 <xQueueReceive+0x122>
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d2:	d103      	bne.n	80078dc <xQueueReceive+0x138>
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078dc:	f002 f872 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078e0:	1d3a      	adds	r2, r7, #4
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 f89b 	bl	8008a24 <xTaskCheckForTimeOut>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d123      	bne.n	800793c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 fade 	bl	8007eb6 <prvIsQueueEmpty>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d017      	beq.n	8007930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 ffc1 	bl	8008890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 fa7f 	bl	8007e12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007914:	f000 fdf0 	bl	80084f8 <xTaskResumeAll>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d189      	bne.n	8007832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800791e:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xQueueReceive+0x1bc>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	e780      	b.n	8007832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 fa6e 	bl	8007e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007936:	f000 fddf 	bl	80084f8 <xTaskResumeAll>
 800793a:	e77a      	b.n	8007832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f000 fa68 	bl	8007e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007942:	f000 fdd9 	bl	80084f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007948:	f000 fab5 	bl	8007eb6 <prvIsQueueEmpty>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f af6f 	beq.w	8007832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007956:	4618      	mov	r0, r3
 8007958:	3730      	adds	r7, #48	; 0x30
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	; 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	623b      	str	r3, [r7, #32]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61fb      	str	r3, [r7, #28]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079b4:	f001 f97e 	bl	8008cb4 <xTaskGetSchedulerState>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <xQueueSemaphoreTake+0x60>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <xQueueSemaphoreTake+0x64>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <xQueueSemaphoreTake+0x66>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	61bb      	str	r3, [r7, #24]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079e4:	f001 ffbe 	bl	8009964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d024      	beq.n	8007a3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	1e5a      	subs	r2, r3, #1
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a04:	f001 facc 	bl	8008fa0 <pvTaskIncrementMutexHeldCount>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00f      	beq.n	8007a36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	3310      	adds	r3, #16
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 ff88 	bl	8008930 <xTaskRemoveFromEventList>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a26:	4b54      	ldr	r3, [pc, #336]	; (8007b78 <xQueueSemaphoreTake+0x214>)
 8007a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a36:	f001 ffc5 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e097      	b.n	8007b6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d111      	bne.n	8007a68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	617b      	str	r3, [r7, #20]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a60:	f001 ffb0 	bl	80099c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e082      	b.n	8007b6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a6e:	f107 030c 	add.w	r3, r7, #12
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 ffc0 	bl	80089f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a7c:	f001 ffa2 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a80:	f000 fd2c 	bl	80084dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a84:	f001 ff6e 	bl	8009964 <vPortEnterCritical>
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a8e:	b25b      	sxtb	r3, r3
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a94:	d103      	bne.n	8007a9e <xQueueSemaphoreTake+0x13a>
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aaa:	d103      	bne.n	8007ab4 <xQueueSemaphoreTake+0x150>
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab4:	f001 ff86 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab8:	463a      	mov	r2, r7
 8007aba:	f107 030c 	add.w	r3, r7, #12
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 ffaf 	bl	8008a24 <xTaskCheckForTimeOut>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d132      	bne.n	8007b32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ace:	f000 f9f2 	bl	8007eb6 <prvIsQueueEmpty>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d026      	beq.n	8007b26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007ae0:	f001 ff40 	bl	8009964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 f901 	bl	8008cf0 <xTaskPriorityInherit>
 8007aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007af0:	f001 ff68 	bl	80099c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fec7 	bl	8008890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b04:	f000 f985 	bl	8007e12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b08:	f000 fcf6 	bl	80084f8 <xTaskResumeAll>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f47f af68 	bne.w	80079e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b14:	4b18      	ldr	r3, [pc, #96]	; (8007b78 <xQueueSemaphoreTake+0x214>)
 8007b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	e75e      	b.n	80079e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b28:	f000 f973 	bl	8007e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b2c:	f000 fce4 	bl	80084f8 <xTaskResumeAll>
 8007b30:	e758      	b.n	80079e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b34:	f000 f96d 	bl	8007e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b38:	f000 fcde 	bl	80084f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b3e:	f000 f9ba 	bl	8007eb6 <prvIsQueueEmpty>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f43f af4d 	beq.w	80079e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00d      	beq.n	8007b6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b50:	f001 ff08 	bl	8009964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b56:	f000 f8b4 	bl	8007cc2 <prvGetDisinheritPriorityAfterTimeout>
 8007b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f99a 	bl	8008e9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b68:	f001 ff2c 	bl	80099c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3738      	adds	r7, #56	; 0x38
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08e      	sub	sp, #56	; 0x38
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	623b      	str	r3, [r7, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <xQueueReceiveFromISR+0x3a>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <xQueueReceiveFromISR+0x3e>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueReceiveFromISR+0x40>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61fb      	str	r3, [r7, #28]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bd6:	f001 ffa7 	bl	8009b28 <vPortValidateInterruptPriority>
	__asm volatile
 8007bda:	f3ef 8211 	mrs	r2, BASEPRI
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	61ba      	str	r2, [r7, #24]
 8007bf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02f      	beq.n	8007c62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c10:	f000 f8d9 	bl	8007dc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c24:	d112      	bne.n	8007c4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	3310      	adds	r3, #16
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fe7c 	bl	8008930 <xTaskRemoveFromEventList>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e007      	b.n	8007c5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	b25a      	sxtb	r2, r3
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	e001      	b.n	8007c66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f383 8811 	msr	BASEPRI, r3
}
 8007c70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3738      	adds	r7, #56	; 0x38
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <vQueueDelete+0x28>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	60bb      	str	r3, [r7, #8]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f95f 	bl	8007f68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f002 f843 	bl	8009d40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e001      	b.n	8007ce4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
	}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d14d      	bne.n	8007db4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f84f 	bl	8008dc0 <xTaskPriorityDisinherit>
 8007d22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	609a      	str	r2, [r3, #8]
 8007d2a:	e043      	b.n	8007db4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d119      	bne.n	8007d66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6858      	ldr	r0, [r3, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	f007 f92a 	bl	800ef96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	441a      	add	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d32b      	bcc.n	8007db4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	e026      	b.n	8007db4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68d8      	ldr	r0, [r3, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	f007 f910 	bl	800ef96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	425b      	negs	r3, r3
 8007d80:	441a      	add	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d207      	bcs.n	8007da2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	425b      	negs	r3, r3
 8007d9c:	441a      	add	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d105      	bne.n	8007db4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dbc:	697b      	ldr	r3, [r7, #20]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d018      	beq.n	8007e0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	441a      	add	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d303      	bcc.n	8007dfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68d9      	ldr	r1, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	461a      	mov	r2, r3
 8007e04:	6838      	ldr	r0, [r7, #0]
 8007e06:	f007 f8c6 	bl	800ef96 <memcpy>
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e1a:	f001 fda3 	bl	8009964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e26:	e011      	b.n	8007e4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d012      	beq.n	8007e56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3324      	adds	r3, #36	; 0x24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fd7b 	bl	8008930 <xTaskRemoveFromEventList>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e40:	f000 fe52 	bl	8008ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dce9      	bgt.n	8007e28 <prvUnlockQueue+0x16>
 8007e54:	e000      	b.n	8007e58 <prvUnlockQueue+0x46>
					break;
 8007e56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e60:	f001 fdb0 	bl	80099c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e64:	f001 fd7e 	bl	8009964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e70:	e011      	b.n	8007e96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d012      	beq.n	8007ea0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3310      	adds	r3, #16
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fd56 	bl	8008930 <xTaskRemoveFromEventList>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e8a:	f000 fe2d 	bl	8008ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dce9      	bgt.n	8007e72 <prvUnlockQueue+0x60>
 8007e9e:	e000      	b.n	8007ea2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ea0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eaa:	f001 fd8b 	bl	80099c4 <vPortExitCritical>
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ebe:	f001 fd51 	bl	8009964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d102      	bne.n	8007ed0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	e001      	b.n	8007ed4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed4:	f001 fd76 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eea:	f001 fd3b 	bl	8009964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d102      	bne.n	8007f00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007efa:	2301      	movs	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e001      	b.n	8007f04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f04:	f001 fd5e 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8007f08:	68fb      	ldr	r3, [r7, #12]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e014      	b.n	8007f4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f24:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <vQueueAddToRegistry+0x50>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10b      	bne.n	8007f48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f30:	490c      	ldr	r1, [pc, #48]	; (8007f64 <vQueueAddToRegistry+0x50>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f3a:	4a0a      	ldr	r2, [pc, #40]	; (8007f64 <vQueueAddToRegistry+0x50>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f46:	e006      	b.n	8007f56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b07      	cmp	r3, #7
 8007f52:	d9e7      	bls.n	8007f24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20001374 	.word	0x20001374

08007f68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e016      	b.n	8007fa4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <vQueueUnregisterQueue+0x50>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d10b      	bne.n	8007f9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f86:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <vQueueUnregisterQueue+0x50>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f90:	4a09      	ldr	r2, [pc, #36]	; (8007fb8 <vQueueUnregisterQueue+0x50>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	00db      	lsls	r3, r3, #3
 8007f96:	4413      	add	r3, r2
 8007f98:	2200      	movs	r2, #0
 8007f9a:	605a      	str	r2, [r3, #4]
				break;
 8007f9c:	e006      	b.n	8007fac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b07      	cmp	r3, #7
 8007fa8:	d9e5      	bls.n	8007f76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20001374 	.word	0x20001374

08007fbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fcc:	f001 fcca 	bl	8009964 <vPortEnterCritical>
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fdc:	d103      	bne.n	8007fe6 <vQueueWaitForMessageRestricted+0x2a>
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fec:	b25b      	sxtb	r3, r3
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ff2:	d103      	bne.n	8007ffc <vQueueWaitForMessageRestricted+0x40>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ffc:	f001 fce2 	bl	80099c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	3324      	adds	r3, #36	; 0x24
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fc61 	bl	80088d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008016:	6978      	ldr	r0, [r7, #20]
 8008018:	f7ff fefb 	bl	8007e12 <prvUnlockQueue>
	}
 800801c:	bf00      	nop
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08e      	sub	sp, #56	; 0x38
 8008028:	af04      	add	r7, sp, #16
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	623b      	str	r3, [r7, #32]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xTaskCreateStatic+0x46>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	61fb      	str	r3, [r7, #28]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800806a:	23a8      	movs	r3, #168	; 0xa8
 800806c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2ba8      	cmp	r3, #168	; 0xa8
 8008072:	d00a      	beq.n	800808a <xTaskCreateStatic+0x66>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	61bb      	str	r3, [r7, #24]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800808a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01e      	beq.n	80080d0 <xTaskCreateStatic+0xac>
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01b      	beq.n	80080d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	2202      	movs	r2, #2
 80080a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080aa:	2300      	movs	r3, #0
 80080ac:	9303      	str	r3, [sp, #12]
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	f107 0314 	add.w	r3, r7, #20
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f850 	bl	8008168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080ca:	f000 f8f3 	bl	80082b4 <prvAddNewTaskToReadyList>
 80080ce:	e001      	b.n	80080d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080d4:	697b      	ldr	r3, [r7, #20]
	}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3728      	adds	r7, #40	; 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b08c      	sub	sp, #48	; 0x30
 80080e2:	af04      	add	r7, sp, #16
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fd58 	bl	8009ba8 <pvPortMalloc>
 80080f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00e      	beq.n	800811e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008100:	20a8      	movs	r0, #168	; 0xa8
 8008102:	f001 fd51 	bl	8009ba8 <pvPortMalloc>
 8008106:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	631a      	str	r2, [r3, #48]	; 0x30
 8008114:	e005      	b.n	8008122 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008116:	6978      	ldr	r0, [r7, #20]
 8008118:	f001 fe12 	bl	8009d40 <vPortFree>
 800811c:	e001      	b.n	8008122 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	2300      	movs	r3, #0
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f80e 	bl	8008168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800814c:	69f8      	ldr	r0, [r7, #28]
 800814e:	f000 f8b1 	bl	80082b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008152:	2301      	movs	r3, #1
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	e002      	b.n	800815e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800815e:	69bb      	ldr	r3, [r7, #24]
	}
 8008160:	4618      	mov	r0, r3
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	461a      	mov	r2, r3
 8008180:	21a5      	movs	r1, #165	; 0xa5
 8008182:	f006 fe11 	bl	800eda8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008190:	3b01      	subs	r3, #1
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	617b      	str	r3, [r7, #20]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01f      	beq.n	8008206 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	e012      	b.n	80081f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	7819      	ldrb	r1, [r3, #0]
 80081d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	3334      	adds	r3, #52	; 0x34
 80081dc:	460a      	mov	r2, r1
 80081de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d006      	beq.n	80081fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	3301      	adds	r3, #1
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	2b0f      	cmp	r3, #15
 80081f6:	d9e9      	bls.n	80081cc <prvInitialiseNewTask+0x64>
 80081f8:	e000      	b.n	80081fc <prvInitialiseNewTask+0x94>
			{
				break;
 80081fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008204:	e003      	b.n	800820e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	2b37      	cmp	r3, #55	; 0x37
 8008212:	d901      	bls.n	8008218 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008214:	2337      	movs	r3, #55	; 0x37
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800821c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008222:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	2200      	movs	r2, #0
 8008228:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	3304      	adds	r3, #4
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fe56 	bl	8006ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	3318      	adds	r3, #24
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe fe51 	bl	8006ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008252:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	3354      	adds	r3, #84	; 0x54
 8008268:	224c      	movs	r2, #76	; 0x4c
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f006 fd9b 	bl	800eda8 <memset>
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	4a0c      	ldr	r2, [pc, #48]	; (80082a8 <prvInitialiseNewTask+0x140>)
 8008276:	659a      	str	r2, [r3, #88]	; 0x58
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <prvInitialiseNewTask+0x144>)
 800827c:	65da      	str	r2, [r3, #92]	; 0x5c
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	4a0b      	ldr	r2, [pc, #44]	; (80082b0 <prvInitialiseNewTask+0x148>)
 8008282:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	69b8      	ldr	r0, [r7, #24]
 800828a:	f001 fa3f 	bl	800970c <pxPortInitialiseStack>
 800828e:	4602      	mov	r2, r0
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a0:	bf00      	nop
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20005618 	.word	0x20005618
 80082ac:	20005680 	.word	0x20005680
 80082b0:	200056e8 	.word	0x200056e8

080082b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082bc:	f001 fb52 	bl	8009964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082c0:	4b2d      	ldr	r3, [pc, #180]	; (8008378 <prvAddNewTaskToReadyList+0xc4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	4a2c      	ldr	r2, [pc, #176]	; (8008378 <prvAddNewTaskToReadyList+0xc4>)
 80082c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082ca:	4b2c      	ldr	r3, [pc, #176]	; (800837c <prvAddNewTaskToReadyList+0xc8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082d2:	4a2a      	ldr	r2, [pc, #168]	; (800837c <prvAddNewTaskToReadyList+0xc8>)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082d8:	4b27      	ldr	r3, [pc, #156]	; (8008378 <prvAddNewTaskToReadyList+0xc4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d110      	bne.n	8008302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082e0:	f000 fc26 	bl	8008b30 <prvInitialiseTaskLists>
 80082e4:	e00d      	b.n	8008302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082e6:	4b26      	ldr	r3, [pc, #152]	; (8008380 <prvAddNewTaskToReadyList+0xcc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082ee:	4b23      	ldr	r3, [pc, #140]	; (800837c <prvAddNewTaskToReadyList+0xc8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d802      	bhi.n	8008302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082fc:	4a1f      	ldr	r2, [pc, #124]	; (800837c <prvAddNewTaskToReadyList+0xc8>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008302:	4b20      	ldr	r3, [pc, #128]	; (8008384 <prvAddNewTaskToReadyList+0xd0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <prvAddNewTaskToReadyList+0xd0>)
 800830a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800830c:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <prvAddNewTaskToReadyList+0xd0>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <prvAddNewTaskToReadyList+0xd4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d903      	bls.n	8008328 <prvAddNewTaskToReadyList+0x74>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <prvAddNewTaskToReadyList+0xd4>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <prvAddNewTaskToReadyList+0xd8>)
 8008336:	441a      	add	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3304      	adds	r3, #4
 800833c:	4619      	mov	r1, r3
 800833e:	4610      	mov	r0, r2
 8008340:	f7fe fddb 	bl	8006efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008344:	f001 fb3e 	bl	80099c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008348:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <prvAddNewTaskToReadyList+0xcc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <prvAddNewTaskToReadyList+0xc8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d207      	bcs.n	800836e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <prvAddNewTaskToReadyList+0xdc>)
 8008360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20001888 	.word	0x20001888
 800837c:	200013b4 	.word	0x200013b4
 8008380:	20001894 	.word	0x20001894
 8008384:	200018a4 	.word	0x200018a4
 8008388:	20001890 	.word	0x20001890
 800838c:	200013b8 	.word	0x200013b8
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <vTaskDelay+0x60>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <vTaskDelay+0x30>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60bb      	str	r3, [r7, #8]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083c4:	f000 f88a 	bl	80084dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fdfc 	bl	8008fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083d0:	f000 f892 	bl	80084f8 <xTaskResumeAll>
 80083d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <vTaskDelay+0x64>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200018b0 	.word	0x200018b0
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	; 0x28
 8008400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800840a:	463a      	mov	r2, r7
 800840c:	1d39      	adds	r1, r7, #4
 800840e:	f107 0308 	add.w	r3, r7, #8
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fd10 	bl	8006e38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	9202      	str	r2, [sp, #8]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	2300      	movs	r3, #0
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	460a      	mov	r2, r1
 800842a:	4924      	ldr	r1, [pc, #144]	; (80084bc <vTaskStartScheduler+0xc0>)
 800842c:	4824      	ldr	r0, [pc, #144]	; (80084c0 <vTaskStartScheduler+0xc4>)
 800842e:	f7ff fdf9 	bl	8008024 <xTaskCreateStatic>
 8008432:	4603      	mov	r3, r0
 8008434:	4a23      	ldr	r2, [pc, #140]	; (80084c4 <vTaskStartScheduler+0xc8>)
 8008436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008438:	4b22      	ldr	r3, [pc, #136]	; (80084c4 <vTaskStartScheduler+0xc8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e001      	b.n	800844a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d102      	bne.n	8008456 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008450:	f000 fe0e 	bl	8009070 <xTimerCreateTimerTask>
 8008454:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11b      	bne.n	8008494 <vTaskStartScheduler+0x98>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	613b      	str	r3, [r7, #16]
}
 800846e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008470:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <vTaskStartScheduler+0xcc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3354      	adds	r3, #84	; 0x54
 8008476:	4a15      	ldr	r2, [pc, #84]	; (80084cc <vTaskStartScheduler+0xd0>)
 8008478:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800847a:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <vTaskStartScheduler+0xd4>)
 800847c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008482:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <vTaskStartScheduler+0xd8>)
 8008484:	2201      	movs	r2, #1
 8008486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008488:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <vTaskStartScheduler+0xdc>)
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800848e:	f001 f9c7 	bl	8009820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008492:	e00e      	b.n	80084b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800849a:	d10a      	bne.n	80084b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	60fb      	str	r3, [r7, #12]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <vTaskStartScheduler+0xb4>
}
 80084b2:	bf00      	nop
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	08013350 	.word	0x08013350
 80084c0:	08008b01 	.word	0x08008b01
 80084c4:	200018ac 	.word	0x200018ac
 80084c8:	200013b4 	.word	0x200013b4
 80084cc:	200002b0 	.word	0x200002b0
 80084d0:	200018a8 	.word	0x200018a8
 80084d4:	20001894 	.word	0x20001894
 80084d8:	2000188c 	.word	0x2000188c

080084dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084e0:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <vTaskSuspendAll+0x18>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a03      	ldr	r2, [pc, #12]	; (80084f4 <vTaskSuspendAll+0x18>)
 80084e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084ea:	bf00      	nop
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200018b0 	.word	0x200018b0

080084f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008506:	4b42      	ldr	r3, [pc, #264]	; (8008610 <xTaskResumeAll+0x118>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <xTaskResumeAll+0x2c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	603b      	str	r3, [r7, #0]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008524:	f001 fa1e 	bl	8009964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008528:	4b39      	ldr	r3, [pc, #228]	; (8008610 <xTaskResumeAll+0x118>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	4a38      	ldr	r2, [pc, #224]	; (8008610 <xTaskResumeAll+0x118>)
 8008530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008532:	4b37      	ldr	r3, [pc, #220]	; (8008610 <xTaskResumeAll+0x118>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d162      	bne.n	8008600 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800853a:	4b36      	ldr	r3, [pc, #216]	; (8008614 <xTaskResumeAll+0x11c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d05e      	beq.n	8008600 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008542:	e02f      	b.n	80085a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008544:	4b34      	ldr	r3, [pc, #208]	; (8008618 <xTaskResumeAll+0x120>)
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3318      	adds	r3, #24
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fd2f 	bl	8006fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fd2a 	bl	8006fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4b2d      	ldr	r3, [pc, #180]	; (800861c <xTaskResumeAll+0x124>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <xTaskResumeAll+0x7c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a2a      	ldr	r2, [pc, #168]	; (800861c <xTaskResumeAll+0x124>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a27      	ldr	r2, [pc, #156]	; (8008620 <xTaskResumeAll+0x128>)
 8008582:	441a      	add	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7fe fcb5 	bl	8006efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b23      	ldr	r3, [pc, #140]	; (8008624 <xTaskResumeAll+0x12c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	429a      	cmp	r2, r3
 800859c:	d302      	bcc.n	80085a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800859e:	4b22      	ldr	r3, [pc, #136]	; (8008628 <xTaskResumeAll+0x130>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085a4:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <xTaskResumeAll+0x120>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1cb      	bne.n	8008544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085b2:	f000 fb5f 	bl	8008c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085b6:	4b1d      	ldr	r3, [pc, #116]	; (800862c <xTaskResumeAll+0x134>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d010      	beq.n	80085e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085c2:	f000 f847 	bl	8008654 <xTaskIncrementTick>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085cc:	4b16      	ldr	r3, [pc, #88]	; (8008628 <xTaskResumeAll+0x130>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1f1      	bne.n	80085c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <xTaskResumeAll+0x134>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085e4:	4b10      	ldr	r3, [pc, #64]	; (8008628 <xTaskResumeAll+0x130>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d009      	beq.n	8008600 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085f0:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <xTaskResumeAll+0x138>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008600:	f001 f9e0 	bl	80099c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008604:	68bb      	ldr	r3, [r7, #8]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	200018b0 	.word	0x200018b0
 8008614:	20001888 	.word	0x20001888
 8008618:	20001848 	.word	0x20001848
 800861c:	20001890 	.word	0x20001890
 8008620:	200013b8 	.word	0x200013b8
 8008624:	200013b4 	.word	0x200013b4
 8008628:	2000189c 	.word	0x2000189c
 800862c:	20001898 	.word	0x20001898
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <xTaskGetTickCount+0x1c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008640:	687b      	ldr	r3, [r7, #4]
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000188c 	.word	0x2000188c

08008654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865e:	4b4f      	ldr	r3, [pc, #316]	; (800879c <xTaskIncrementTick+0x148>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 808f 	bne.w	8008786 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008668:	4b4d      	ldr	r3, [pc, #308]	; (80087a0 <xTaskIncrementTick+0x14c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3301      	adds	r3, #1
 800866e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008670:	4a4b      	ldr	r2, [pc, #300]	; (80087a0 <xTaskIncrementTick+0x14c>)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d120      	bne.n	80086be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800867c:	4b49      	ldr	r3, [pc, #292]	; (80087a4 <xTaskIncrementTick+0x150>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <xTaskIncrementTick+0x48>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	603b      	str	r3, [r7, #0]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <xTaskIncrementTick+0x46>
 800869c:	4b41      	ldr	r3, [pc, #260]	; (80087a4 <xTaskIncrementTick+0x150>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <xTaskIncrementTick+0x154>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a3f      	ldr	r2, [pc, #252]	; (80087a4 <xTaskIncrementTick+0x150>)
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	4a3f      	ldr	r2, [pc, #252]	; (80087a8 <xTaskIncrementTick+0x154>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	4b3e      	ldr	r3, [pc, #248]	; (80087ac <xTaskIncrementTick+0x158>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a3d      	ldr	r2, [pc, #244]	; (80087ac <xTaskIncrementTick+0x158>)
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	f000 fadb 	bl	8008c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086be:	4b3c      	ldr	r3, [pc, #240]	; (80087b0 <xTaskIncrementTick+0x15c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d349      	bcc.n	800875c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c8:	4b36      	ldr	r3, [pc, #216]	; (80087a4 <xTaskIncrementTick+0x150>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d2:	4b37      	ldr	r3, [pc, #220]	; (80087b0 <xTaskIncrementTick+0x15c>)
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086d8:	601a      	str	r2, [r3, #0]
					break;
 80086da:	e03f      	b.n	800875c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086dc:	4b31      	ldr	r3, [pc, #196]	; (80087a4 <xTaskIncrementTick+0x150>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d203      	bcs.n	80086fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086f4:	4a2e      	ldr	r2, [pc, #184]	; (80087b0 <xTaskIncrementTick+0x15c>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086fa:	e02f      	b.n	800875c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fc57 	bl	8006fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	3318      	adds	r3, #24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fc4e 	bl	8006fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	4b25      	ldr	r3, [pc, #148]	; (80087b4 <xTaskIncrementTick+0x160>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d903      	bls.n	800872c <xTaskIncrementTick+0xd8>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a22      	ldr	r2, [pc, #136]	; (80087b4 <xTaskIncrementTick+0x160>)
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <xTaskIncrementTick+0x164>)
 800873a:	441a      	add	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	3304      	adds	r3, #4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7fe fbd9 	bl	8006efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <xTaskIncrementTick+0x168>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	429a      	cmp	r2, r3
 8008754:	d3b8      	bcc.n	80086c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800875a:	e7b5      	b.n	80086c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800875c:	4b17      	ldr	r3, [pc, #92]	; (80087bc <xTaskIncrementTick+0x168>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008762:	4915      	ldr	r1, [pc, #84]	; (80087b8 <xTaskIncrementTick+0x164>)
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d901      	bls.n	8008778 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008778:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <xTaskIncrementTick+0x16c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e004      	b.n	8008790 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008786:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <xTaskIncrementTick+0x170>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4a0d      	ldr	r2, [pc, #52]	; (80087c4 <xTaskIncrementTick+0x170>)
 800878e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008790:	697b      	ldr	r3, [r7, #20]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200018b0 	.word	0x200018b0
 80087a0:	2000188c 	.word	0x2000188c
 80087a4:	20001840 	.word	0x20001840
 80087a8:	20001844 	.word	0x20001844
 80087ac:	200018a0 	.word	0x200018a0
 80087b0:	200018a8 	.word	0x200018a8
 80087b4:	20001890 	.word	0x20001890
 80087b8:	200013b8 	.word	0x200013b8
 80087bc:	200013b4 	.word	0x200013b4
 80087c0:	2000189c 	.word	0x2000189c
 80087c4:	20001898 	.word	0x20001898

080087c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087ce:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <vTaskSwitchContext+0xb0>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087d6:	4b29      	ldr	r3, [pc, #164]	; (800887c <vTaskSwitchContext+0xb4>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087dc:	e046      	b.n	800886c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80087de:	4b27      	ldr	r3, [pc, #156]	; (800887c <vTaskSwitchContext+0xb4>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e4:	4b26      	ldr	r3, [pc, #152]	; (8008880 <vTaskSwitchContext+0xb8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	e010      	b.n	800880e <vTaskSwitchContext+0x46>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <vTaskSwitchContext+0x40>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	607b      	str	r3, [r7, #4]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <vTaskSwitchContext+0x3e>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3b01      	subs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	491d      	ldr	r1, [pc, #116]	; (8008884 <vTaskSwitchContext+0xbc>)
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0e4      	beq.n	80087ec <vTaskSwitchContext+0x24>
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4a15      	ldr	r2, [pc, #84]	; (8008884 <vTaskSwitchContext+0xbc>)
 800882e:	4413      	add	r3, r2
 8008830:	60bb      	str	r3, [r7, #8]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	605a      	str	r2, [r3, #4]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	3308      	adds	r3, #8
 8008844:	429a      	cmp	r2, r3
 8008846:	d104      	bne.n	8008852 <vTaskSwitchContext+0x8a>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	605a      	str	r2, [r3, #4]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a0b      	ldr	r2, [pc, #44]	; (8008888 <vTaskSwitchContext+0xc0>)
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	4a08      	ldr	r2, [pc, #32]	; (8008880 <vTaskSwitchContext+0xb8>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <vTaskSwitchContext+0xc0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3354      	adds	r3, #84	; 0x54
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <vTaskSwitchContext+0xc4>)
 800886a:	6013      	str	r3, [r2, #0]
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	200018b0 	.word	0x200018b0
 800887c:	2000189c 	.word	0x2000189c
 8008880:	20001890 	.word	0x20001890
 8008884:	200013b8 	.word	0x200013b8
 8008888:	200013b4 	.word	0x200013b4
 800888c:	200002b0 	.word	0x200002b0

08008890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	60fb      	str	r3, [r7, #12]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <vTaskPlaceOnEventList+0x44>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3318      	adds	r3, #24
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fe fb3f 	bl	8006f42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088c4:	2101      	movs	r1, #1
 80088c6:	6838      	ldr	r0, [r7, #0]
 80088c8:	f000 fb7e 	bl	8008fc8 <prvAddCurrentTaskToDelayedList>
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200013b4 	.word	0x200013b4

080088d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	617b      	str	r3, [r7, #20]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <vTaskPlaceOnEventListRestricted+0x54>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3318      	adds	r3, #24
 8008906:	4619      	mov	r1, r3
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7fe faf6 	bl	8006efa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008918:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	68b8      	ldr	r0, [r7, #8]
 800891e:	f000 fb53 	bl	8008fc8 <prvAddCurrentTaskToDelayedList>
	}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200013b4 	.word	0x200013b4

08008930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60fb      	str	r3, [r7, #12]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	3318      	adds	r3, #24
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fb27 	bl	8006fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008966:	4b1e      	ldr	r3, [pc, #120]	; (80089e0 <xTaskRemoveFromEventList+0xb0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d11d      	bne.n	80089aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	3304      	adds	r3, #4
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fb1e 	bl	8006fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <xTaskRemoveFromEventList+0xb4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d903      	bls.n	800898c <xTaskRemoveFromEventList+0x5c>
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a16      	ldr	r2, [pc, #88]	; (80089e4 <xTaskRemoveFromEventList+0xb4>)
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <xTaskRemoveFromEventList+0xb8>)
 800899a:	441a      	add	r2, r3
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	3304      	adds	r3, #4
 80089a0:	4619      	mov	r1, r3
 80089a2:	4610      	mov	r0, r2
 80089a4:	f7fe faa9 	bl	8006efa <vListInsertEnd>
 80089a8:	e005      	b.n	80089b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4619      	mov	r1, r3
 80089b0:	480e      	ldr	r0, [pc, #56]	; (80089ec <xTaskRemoveFromEventList+0xbc>)
 80089b2:	f7fe faa2 	bl	8006efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <xTaskRemoveFromEventList+0xc0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d905      	bls.n	80089d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <xTaskRemoveFromEventList+0xc4>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	e001      	b.n	80089d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089d4:	697b      	ldr	r3, [r7, #20]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200018b0 	.word	0x200018b0
 80089e4:	20001890 	.word	0x20001890
 80089e8:	200013b8 	.word	0x200013b8
 80089ec:	20001848 	.word	0x20001848
 80089f0:	200013b4 	.word	0x200013b4
 80089f4:	2000189c 	.word	0x2000189c

080089f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <vTaskInternalSetTimeOutState+0x24>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a08:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <vTaskInternalSetTimeOutState+0x28>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	605a      	str	r2, [r3, #4]
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	200018a0 	.word	0x200018a0
 8008a20:	2000188c 	.word	0x2000188c

08008a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	613b      	str	r3, [r7, #16]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
}
 8008a62:	bf00      	nop
 8008a64:	e7fe      	b.n	8008a64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a66:	f000 ff7d 	bl	8009964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <xTaskCheckForTimeOut+0xbc>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a82:	d102      	bne.n	8008a8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	e023      	b.n	8008ad2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4b15      	ldr	r3, [pc, #84]	; (8008ae4 <xTaskCheckForTimeOut+0xc0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d007      	beq.n	8008aa6 <xTaskCheckForTimeOut+0x82>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d302      	bcc.n	8008aa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e015      	b.n	8008ad2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d20b      	bcs.n	8008ac8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	1ad2      	subs	r2, r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ff9b 	bl	80089f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	e004      	b.n	8008ad2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ad2:	f000 ff77 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	2000188c 	.word	0x2000188c
 8008ae4:	200018a0 	.word	0x200018a0

08008ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <vTaskMissedYield+0x14>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	2000189c 	.word	0x2000189c

08008b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b08:	f000 f852 	bl	8008bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <prvIdleTask+0x28>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d9f9      	bls.n	8008b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <prvIdleTask+0x2c>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b24:	e7f0      	b.n	8008b08 <prvIdleTask+0x8>
 8008b26:	bf00      	nop
 8008b28:	200013b8 	.word	0x200013b8
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b36:	2300      	movs	r3, #0
 8008b38:	607b      	str	r3, [r7, #4]
 8008b3a:	e00c      	b.n	8008b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <prvInitialiseTaskLists+0x60>)
 8008b48:	4413      	add	r3, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f9a8 	bl	8006ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3301      	adds	r3, #1
 8008b54:	607b      	str	r3, [r7, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b37      	cmp	r3, #55	; 0x37
 8008b5a:	d9ef      	bls.n	8008b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b5c:	480d      	ldr	r0, [pc, #52]	; (8008b94 <prvInitialiseTaskLists+0x64>)
 8008b5e:	f7fe f99f 	bl	8006ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b62:	480d      	ldr	r0, [pc, #52]	; (8008b98 <prvInitialiseTaskLists+0x68>)
 8008b64:	f7fe f99c 	bl	8006ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b68:	480c      	ldr	r0, [pc, #48]	; (8008b9c <prvInitialiseTaskLists+0x6c>)
 8008b6a:	f7fe f999 	bl	8006ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b6e:	480c      	ldr	r0, [pc, #48]	; (8008ba0 <prvInitialiseTaskLists+0x70>)
 8008b70:	f7fe f996 	bl	8006ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b74:	480b      	ldr	r0, [pc, #44]	; (8008ba4 <prvInitialiseTaskLists+0x74>)
 8008b76:	f7fe f993 	bl	8006ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <prvInitialiseTaskLists+0x78>)
 8008b7c:	4a05      	ldr	r2, [pc, #20]	; (8008b94 <prvInitialiseTaskLists+0x64>)
 8008b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvInitialiseTaskLists+0x7c>)
 8008b82:	4a05      	ldr	r2, [pc, #20]	; (8008b98 <prvInitialiseTaskLists+0x68>)
 8008b84:	601a      	str	r2, [r3, #0]
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200013b8 	.word	0x200013b8
 8008b94:	20001818 	.word	0x20001818
 8008b98:	2000182c 	.word	0x2000182c
 8008b9c:	20001848 	.word	0x20001848
 8008ba0:	2000185c 	.word	0x2000185c
 8008ba4:	20001874 	.word	0x20001874
 8008ba8:	20001840 	.word	0x20001840
 8008bac:	20001844 	.word	0x20001844

08008bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bb6:	e019      	b.n	8008bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008bb8:	f000 fed4 	bl	8009964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <prvCheckTasksWaitingTermination+0x50>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe f9f3 	bl	8006fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <prvCheckTasksWaitingTermination+0x54>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	4a0b      	ldr	r2, [pc, #44]	; (8008c04 <prvCheckTasksWaitingTermination+0x54>)
 8008bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <prvCheckTasksWaitingTermination+0x58>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4a0a      	ldr	r2, [pc, #40]	; (8008c08 <prvCheckTasksWaitingTermination+0x58>)
 8008be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008be2:	f000 feef 	bl	80099c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f810 	bl	8008c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <prvCheckTasksWaitingTermination+0x58>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e1      	bne.n	8008bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000185c 	.word	0x2000185c
 8008c04:	20001888 	.word	0x20001888
 8008c08:	20001870 	.word	0x20001870

08008c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3354      	adds	r3, #84	; 0x54
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f006 f8f3 	bl	800ee04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 f887 	bl	8009d40 <vPortFree>
				vPortFree( pxTCB );
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f884 	bl	8009d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c38:	e018      	b.n	8008c6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d103      	bne.n	8008c4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 f87b 	bl	8009d40 <vPortFree>
	}
 8008c4a:	e00f      	b.n	8008c6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d00a      	beq.n	8008c6c <prvDeleteTCB+0x60>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60fb      	str	r3, [r7, #12]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <prvDeleteTCB+0x5e>
	}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <prvResetNextTaskUnblockTime+0x38>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c8c:	e008      	b.n	8008ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8e:	4b07      	ldr	r3, [pc, #28]	; (8008cac <prvResetNextTaskUnblockTime+0x38>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8008c9e:	6013      	str	r3, [r2, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20001840 	.word	0x20001840
 8008cb0:	200018a8 	.word	0x200018a8

08008cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <xTaskGetSchedulerState+0x34>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d102      	bne.n	8008cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	607b      	str	r3, [r7, #4]
 8008cc6:	e008      	b.n	8008cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc8:	4b08      	ldr	r3, [pc, #32]	; (8008cec <xTaskGetSchedulerState+0x38>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	607b      	str	r3, [r7, #4]
 8008cd4:	e001      	b.n	8008cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cda:	687b      	ldr	r3, [r7, #4]
	}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20001894 	.word	0x20001894
 8008cec:	200018b0 	.word	0x200018b0

08008cf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d051      	beq.n	8008daa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	4b2a      	ldr	r3, [pc, #168]	; (8008db4 <xTaskPriorityInherit+0xc4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d241      	bcs.n	8008d98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	db06      	blt.n	8008d2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1c:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <xTaskPriorityInherit+0xc4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6959      	ldr	r1, [r3, #20]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a1f      	ldr	r2, [pc, #124]	; (8008db8 <xTaskPriorityInherit+0xc8>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d122      	bne.n	8008d88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe f934 	bl	8006fb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <xTaskPriorityInherit+0xc4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5a:	4b18      	ldr	r3, [pc, #96]	; (8008dbc <xTaskPriorityInherit+0xcc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d903      	bls.n	8008d6a <xTaskPriorityInherit+0x7a>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a15      	ldr	r2, [pc, #84]	; (8008dbc <xTaskPriorityInherit+0xcc>)
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4a10      	ldr	r2, [pc, #64]	; (8008db8 <xTaskPriorityInherit+0xc8>)
 8008d78:	441a      	add	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4610      	mov	r0, r2
 8008d82:	f7fe f8ba 	bl	8006efa <vListInsertEnd>
 8008d86:	e004      	b.n	8008d92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <xTaskPriorityInherit+0xc4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d92:	2301      	movs	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	e008      	b.n	8008daa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <xTaskPriorityInherit+0xc4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d201      	bcs.n	8008daa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008daa:	68fb      	ldr	r3, [r7, #12]
	}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200013b4 	.word	0x200013b4
 8008db8:	200013b8 	.word	0x200013b8
 8008dbc:	20001890 	.word	0x20001890

08008dc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d056      	beq.n	8008e84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dd6:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <xTaskPriorityDisinherit+0xd0>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d00a      	beq.n	8008df6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	60fb      	str	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	60bb      	str	r3, [r7, #8]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e18:	1e5a      	subs	r2, r3, #1
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d02c      	beq.n	8008e84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d128      	bne.n	8008e84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe f8bc 	bl	8006fb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <xTaskPriorityDisinherit+0xd4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <xTaskPriorityDisinherit+0xa4>
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	4a0c      	ldr	r2, [pc, #48]	; (8008e94 <xTaskPriorityDisinherit+0xd4>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a09      	ldr	r2, [pc, #36]	; (8008e98 <xTaskPriorityDisinherit+0xd8>)
 8008e72:	441a      	add	r2, r3
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe f83d 	bl	8006efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e84:	697b      	ldr	r3, [r7, #20]
	}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200013b4 	.word	0x200013b4
 8008e94:	20001890 	.word	0x20001890
 8008e98:	200013b8 	.word	0x200013b8

08008e9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d06a      	beq.n	8008f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60fb      	str	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d902      	bls.n	8008ee2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e002      	b.n	8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d04b      	beq.n	8008f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d146      	bne.n	8008f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008efc:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d10a      	bne.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db04      	blt.n	8008f3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	6959      	ldr	r1, [r3, #20]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d11c      	bne.n	8008f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe f82d 	bl	8006fb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a0c      	ldr	r2, [pc, #48]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a07      	ldr	r2, [pc, #28]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f7c:	441a      	add	r2, r3
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fd ffb8 	bl	8006efa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f8a:	bf00      	nop
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200013b4 	.word	0x200013b4
 8008f98:	200013b8 	.word	0x200013b8
 8008f9c:	20001890 	.word	0x20001890

08008fa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008fa0:	b480      	push	{r7}
 8008fa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fb2:	3201      	adds	r2, #1
 8008fb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
	}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200013b4 	.word	0x200013b4

08008fc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fd2:	4b21      	ldr	r3, [pc, #132]	; (8009058 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd8:	4b20      	ldr	r3, [pc, #128]	; (800905c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd ffe8 	bl	8006fb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fea:	d10a      	bne.n	8009002 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d007      	beq.n	8009002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff2:	4b1a      	ldr	r3, [pc, #104]	; (800905c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4819      	ldr	r0, [pc, #100]	; (8009060 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ffc:	f7fd ff7d 	bl	8006efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009000:	e026      	b.n	8009050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4413      	add	r3, r2
 8009008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800900a:	4b14      	ldr	r3, [pc, #80]	; (800905c <prvAddCurrentTaskToDelayedList+0x94>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	429a      	cmp	r2, r3
 8009018:	d209      	bcs.n	800902e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901a:	4b12      	ldr	r3, [pc, #72]	; (8009064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <prvAddCurrentTaskToDelayedList+0x94>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fd ff8b 	bl	8006f42 <vListInsert>
}
 800902c:	e010      	b.n	8009050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800902e:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b0a      	ldr	r3, [pc, #40]	; (800905c <prvAddCurrentTaskToDelayedList+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fd ff81 	bl	8006f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	429a      	cmp	r2, r3
 8009048:	d202      	bcs.n	8009050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800904a:	4a08      	ldr	r2, [pc, #32]	; (800906c <prvAddCurrentTaskToDelayedList+0xa4>)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	6013      	str	r3, [r2, #0]
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	2000188c 	.word	0x2000188c
 800905c:	200013b4 	.word	0x200013b4
 8009060:	20001874 	.word	0x20001874
 8009064:	20001844 	.word	0x20001844
 8009068:	20001840 	.word	0x20001840
 800906c:	200018a8 	.word	0x200018a8

08009070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08a      	sub	sp, #40	; 0x28
 8009074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800907a:	f000 fb07 	bl	800968c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800907e:	4b1c      	ldr	r3, [pc, #112]	; (80090f0 <xTimerCreateTimerTask+0x80>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d021      	beq.n	80090ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800908e:	1d3a      	adds	r2, r7, #4
 8009090:	f107 0108 	add.w	r1, r7, #8
 8009094:	f107 030c 	add.w	r3, r7, #12
 8009098:	4618      	mov	r0, r3
 800909a:	f7fd fee7 	bl	8006e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	9202      	str	r2, [sp, #8]
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	2302      	movs	r3, #2
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	460a      	mov	r2, r1
 80090b0:	4910      	ldr	r1, [pc, #64]	; (80090f4 <xTimerCreateTimerTask+0x84>)
 80090b2:	4811      	ldr	r0, [pc, #68]	; (80090f8 <xTimerCreateTimerTask+0x88>)
 80090b4:	f7fe ffb6 	bl	8008024 <xTaskCreateStatic>
 80090b8:	4603      	mov	r3, r0
 80090ba:	4a10      	ldr	r2, [pc, #64]	; (80090fc <xTimerCreateTimerTask+0x8c>)
 80090bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <xTimerCreateTimerTask+0x8c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090c6:	2301      	movs	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	613b      	str	r3, [r7, #16]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090e6:	697b      	ldr	r3, [r7, #20]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	200018e4 	.word	0x200018e4
 80090f4:	08013358 	.word	0x08013358
 80090f8:	08009235 	.word	0x08009235
 80090fc:	200018e8 	.word	0x200018e8

08009100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800910e:	2300      	movs	r3, #0
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	623b      	str	r3, [r7, #32]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800912e:	4b1a      	ldr	r3, [pc, #104]	; (8009198 <xTimerGenericCommand+0x98>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02a      	beq.n	800918c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b05      	cmp	r3, #5
 8009146:	dc18      	bgt.n	800917a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009148:	f7ff fdb4 	bl	8008cb4 <xTaskGetSchedulerState>
 800914c:	4603      	mov	r3, r0
 800914e:	2b02      	cmp	r3, #2
 8009150:	d109      	bne.n	8009166 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009152:	4b11      	ldr	r3, [pc, #68]	; (8009198 <xTimerGenericCommand+0x98>)
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f107 0110 	add.w	r1, r7, #16
 800915a:	2300      	movs	r3, #0
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	f7fe f8fb 	bl	8007358 <xQueueGenericSend>
 8009162:	6278      	str	r0, [r7, #36]	; 0x24
 8009164:	e012      	b.n	800918c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <xTimerGenericCommand+0x98>)
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	f107 0110 	add.w	r1, r7, #16
 800916e:	2300      	movs	r3, #0
 8009170:	2200      	movs	r2, #0
 8009172:	f7fe f8f1 	bl	8007358 <xQueueGenericSend>
 8009176:	6278      	str	r0, [r7, #36]	; 0x24
 8009178:	e008      	b.n	800918c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <xTimerGenericCommand+0x98>)
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	f107 0110 	add.w	r1, r7, #16
 8009182:	2300      	movs	r3, #0
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	f7fe f9e5 	bl	8007554 <xQueueGenericSendFromISR>
 800918a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800918e:	4618      	mov	r0, r3
 8009190:	3728      	adds	r7, #40	; 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200018e4 	.word	0x200018e4

0800919c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a6:	4b22      	ldr	r3, [pc, #136]	; (8009230 <prvProcessExpiredTimer+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd fefd 	bl	8006fb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d022      	beq.n	800920e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	18d1      	adds	r1, r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	6978      	ldr	r0, [r7, #20]
 80091d6:	f000 f8d1 	bl	800937c <prvInsertTimerInActiveList>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01f      	beq.n	8009220 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	2100      	movs	r1, #0
 80091ea:	6978      	ldr	r0, [r7, #20]
 80091ec:	f7ff ff88 	bl	8009100 <xTimerGenericCommand>
 80091f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d113      	bne.n	8009220 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	60fb      	str	r3, [r7, #12]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	b2da      	uxtb	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	6978      	ldr	r0, [r7, #20]
 8009226:	4798      	blx	r3
}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	200018dc 	.word	0x200018dc

08009234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f857 	bl	80092f4 <prvGetNextExpireTime>
 8009246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4619      	mov	r1, r3
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f803 	bl	8009258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009252:	f000 f8d5 	bl	8009400 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009256:	e7f1      	b.n	800923c <prvTimerTask+0x8>

08009258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009262:	f7ff f93b 	bl	80084dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f866 	bl	800933c <prvSampleTimeNow>
 8009270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d130      	bne.n	80092da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <prvProcessTimerOrBlockTask+0x3c>
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	429a      	cmp	r2, r3
 8009284:	d806      	bhi.n	8009294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009286:	f7ff f937 	bl	80084f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ff85 	bl	800919c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009292:	e024      	b.n	80092de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <prvProcessTimerOrBlockTask+0x90>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <prvProcessTimerOrBlockTask+0x50>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <prvProcessTimerOrBlockTask+0x52>
 80092a8:	2300      	movs	r3, #0
 80092aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <prvProcessTimerOrBlockTask+0x94>)
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7fe fe7f 	bl	8007fbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092be:	f7ff f91b 	bl	80084f8 <xTaskResumeAll>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <prvProcessTimerOrBlockTask+0x98>)
 80092ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	f3bf 8f6f 	isb	sy
}
 80092d8:	e001      	b.n	80092de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092da:	f7ff f90d 	bl	80084f8 <xTaskResumeAll>
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	200018e0 	.word	0x200018e0
 80092ec:	200018e4 	.word	0x200018e4
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <prvGetNextExpireTime+0x44>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <prvGetNextExpireTime+0x16>
 8009306:	2201      	movs	r2, #1
 8009308:	e000      	b.n	800930c <prvGetNextExpireTime+0x18>
 800930a:	2200      	movs	r2, #0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d105      	bne.n	8009324 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <prvGetNextExpireTime+0x44>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	e001      	b.n	8009328 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009328:	68fb      	ldr	r3, [r7, #12]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	200018dc 	.word	0x200018dc

0800933c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009344:	f7ff f976 	bl	8008634 <xTaskGetTickCount>
 8009348:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800934a:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <prvSampleTimeNow+0x3c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	429a      	cmp	r2, r3
 8009352:	d205      	bcs.n	8009360 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009354:	f000 f936 	bl	80095c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e002      	b.n	8009366 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009366:	4a04      	ldr	r2, [pc, #16]	; (8009378 <prvSampleTimeNow+0x3c>)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800936c:	68fb      	ldr	r3, [r7, #12]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200018ec 	.word	0x200018ec

0800937c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d812      	bhi.n	80093c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e01b      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <prvInsertTimerInActiveList+0x7c>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3304      	adds	r3, #4
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f7fd fdbe 	bl	8006f42 <vListInsert>
 80093c6:	e012      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d206      	bcs.n	80093de <prvInsertTimerInActiveList+0x62>
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	e007      	b.n	80093ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093de:	4b07      	ldr	r3, [pc, #28]	; (80093fc <prvInsertTimerInActiveList+0x80>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f7fd fdaa 	bl	8006f42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ee:	697b      	ldr	r3, [r7, #20]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	200018e0 	.word	0x200018e0
 80093fc:	200018dc 	.word	0x200018dc

08009400 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	; 0x38
 8009404:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009406:	e0ca      	b.n	800959e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	da18      	bge.n	8009440 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800940e:	1d3b      	adds	r3, r7, #4
 8009410:	3304      	adds	r3, #4
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61fb      	str	r3, [r7, #28]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	6850      	ldr	r0, [r2, #4]
 8009438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943a:	6892      	ldr	r2, [r2, #8]
 800943c:	4611      	mov	r1, r2
 800943e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f2c0 80ab 	blt.w	800959e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7fd fdab 	bl	8006fb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800945e:	463b      	mov	r3, r7
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff ff6b 	bl	800933c <prvSampleTimeNow>
 8009466:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b09      	cmp	r3, #9
 800946c:	f200 8096 	bhi.w	800959c <prvProcessReceivedCommands+0x19c>
 8009470:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <prvProcessReceivedCommands+0x78>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	080094a1 	.word	0x080094a1
 800947c:	080094a1 	.word	0x080094a1
 8009480:	080094a1 	.word	0x080094a1
 8009484:	08009515 	.word	0x08009515
 8009488:	08009529 	.word	0x08009529
 800948c:	08009573 	.word	0x08009573
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094a1 	.word	0x080094a1
 8009498:	08009515 	.word	0x08009515
 800949c:	08009529 	.word	0x08009529
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a6:	f043 0301 	orr.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	18d1      	adds	r1, r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c0:	f7ff ff5c 	bl	800937c <prvInsertTimerInActiveList>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d069      	beq.n	800959e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d05e      	beq.n	800959e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	441a      	add	r2, r3
 80094e8:	2300      	movs	r3, #0
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	2300      	movs	r3, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f2:	f7ff fe05 	bl	8009100 <xTimerGenericCommand>
 80094f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d14f      	bne.n	800959e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	61bb      	str	r3, [r7, #24]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800951a:	f023 0301 	bic.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009526:	e03a      	b.n	800959e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	617b      	str	r3, [r7, #20]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	18d1      	adds	r1, r2, r3
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800956a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956c:	f7ff ff06 	bl	800937c <prvInsertTimerInActiveList>
					break;
 8009570:	e015      	b.n	800959e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009582:	f000 fbdd 	bl	8009d40 <vPortFree>
 8009586:	e00a      	b.n	800959e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958e:	f023 0301 	bic.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800959a:	e000      	b.n	800959e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800959c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800959e:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <prvProcessReceivedCommands+0x1c0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1d39      	adds	r1, r7, #4
 80095a4:	2200      	movs	r2, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe f8fc 	bl	80077a4 <xQueueReceive>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f47f af2a 	bne.w	8009408 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	3730      	adds	r7, #48	; 0x30
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200018e4 	.word	0x200018e4

080095c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ca:	e048      	b.n	800965e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095cc:	4b2d      	ldr	r3, [pc, #180]	; (8009684 <prvSwitchTimerLists+0xc0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <prvSwitchTimerLists+0xc0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fd fce5 	bl	8006fb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d02e      	beq.n	800965e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4413      	add	r3, r2
 8009608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	429a      	cmp	r2, r3
 8009610:	d90e      	bls.n	8009630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800961e:	4b19      	ldr	r3, [pc, #100]	; (8009684 <prvSwitchTimerLists+0xc0>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fd fc8a 	bl	8006f42 <vListInsert>
 800962e:	e016      	b.n	800965e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009630:	2300      	movs	r3, #0
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fd60 	bl	8009100 <xTimerGenericCommand>
 8009640:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	603b      	str	r3, [r7, #0]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <prvSwitchTimerLists+0xc0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1b1      	bne.n	80095cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009668:	4b06      	ldr	r3, [pc, #24]	; (8009684 <prvSwitchTimerLists+0xc0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <prvSwitchTimerLists+0xc4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a04      	ldr	r2, [pc, #16]	; (8009684 <prvSwitchTimerLists+0xc0>)
 8009674:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009676:	4a04      	ldr	r2, [pc, #16]	; (8009688 <prvSwitchTimerLists+0xc4>)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	6013      	str	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	200018dc 	.word	0x200018dc
 8009688:	200018e0 	.word	0x200018e0

0800968c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009692:	f000 f967 	bl	8009964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009696:	4b15      	ldr	r3, [pc, #84]	; (80096ec <prvCheckForValidListAndQueue+0x60>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d120      	bne.n	80096e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800969e:	4814      	ldr	r0, [pc, #80]	; (80096f0 <prvCheckForValidListAndQueue+0x64>)
 80096a0:	f7fd fbfe 	bl	8006ea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096a4:	4813      	ldr	r0, [pc, #76]	; (80096f4 <prvCheckForValidListAndQueue+0x68>)
 80096a6:	f7fd fbfb 	bl	8006ea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096aa:	4b13      	ldr	r3, [pc, #76]	; (80096f8 <prvCheckForValidListAndQueue+0x6c>)
 80096ac:	4a10      	ldr	r2, [pc, #64]	; (80096f0 <prvCheckForValidListAndQueue+0x64>)
 80096ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096b0:	4b12      	ldr	r3, [pc, #72]	; (80096fc <prvCheckForValidListAndQueue+0x70>)
 80096b2:	4a10      	ldr	r2, [pc, #64]	; (80096f4 <prvCheckForValidListAndQueue+0x68>)
 80096b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096b6:	2300      	movs	r3, #0
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	4b11      	ldr	r3, [pc, #68]	; (8009700 <prvCheckForValidListAndQueue+0x74>)
 80096bc:	4a11      	ldr	r2, [pc, #68]	; (8009704 <prvCheckForValidListAndQueue+0x78>)
 80096be:	2110      	movs	r1, #16
 80096c0:	200a      	movs	r0, #10
 80096c2:	f7fd fd09 	bl	80070d8 <xQueueGenericCreateStatic>
 80096c6:	4603      	mov	r3, r0
 80096c8:	4a08      	ldr	r2, [pc, #32]	; (80096ec <prvCheckForValidListAndQueue+0x60>)
 80096ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096cc:	4b07      	ldr	r3, [pc, #28]	; (80096ec <prvCheckForValidListAndQueue+0x60>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <prvCheckForValidListAndQueue+0x60>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	490b      	ldr	r1, [pc, #44]	; (8009708 <prvCheckForValidListAndQueue+0x7c>)
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fc1a 	bl	8007f14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096e0:	f000 f970 	bl	80099c4 <vPortExitCritical>
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	200018e4 	.word	0x200018e4
 80096f0:	200018b4 	.word	0x200018b4
 80096f4:	200018c8 	.word	0x200018c8
 80096f8:	200018dc 	.word	0x200018dc
 80096fc:	200018e0 	.word	0x200018e0
 8009700:	20001990 	.word	0x20001990
 8009704:	200018f0 	.word	0x200018f0
 8009708:	08013360 	.word	0x08013360

0800970c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3b04      	subs	r3, #4
 800971c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b04      	subs	r3, #4
 800972a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f023 0201 	bic.w	r2, r3, #1
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3b04      	subs	r3, #4
 800973a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800973c:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <pxPortInitialiseStack+0x64>)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3b14      	subs	r3, #20
 8009746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3b04      	subs	r3, #4
 8009752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f06f 0202 	mvn.w	r2, #2
 800975a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3b20      	subs	r3, #32
 8009760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009762:	68fb      	ldr	r3, [r7, #12]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	08009775 	.word	0x08009775

08009774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <prvTaskExitError+0x54>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009786:	d00a      	beq.n	800979e <prvTaskExitError+0x2a>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	60fb      	str	r3, [r7, #12]
}
 800979a:	bf00      	nop
 800979c:	e7fe      	b.n	800979c <prvTaskExitError+0x28>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60bb      	str	r3, [r7, #8]
}
 80097b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097b2:	bf00      	nop
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0fc      	beq.n	80097b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	200000dc 	.word	0x200000dc
 80097cc:	00000000 	.word	0x00000000

080097d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <pxCurrentTCBConst2>)
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f380 8809 	msr	PSP, r0
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8811 	msr	BASEPRI, r0
 80097ea:	4770      	bx	lr
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst2>:
 80097f0:	200013b4 	.word	0x200013b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097f8:	4808      	ldr	r0, [pc, #32]	; (800981c <prvPortStartFirstTask+0x24>)
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f380 8808 	msr	MSP, r0
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8814 	msr	CONTROL, r0
 800980a:	b662      	cpsie	i
 800980c:	b661      	cpsie	f
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	df00      	svc	0
 8009818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800981a:	bf00      	nop
 800981c:	e000ed08 	.word	0xe000ed08

08009820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009826:	4b46      	ldr	r3, [pc, #280]	; (8009940 <xPortStartScheduler+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a46      	ldr	r2, [pc, #280]	; (8009944 <xPortStartScheduler+0x124>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10a      	bne.n	8009846 <xPortStartScheduler+0x26>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	613b      	str	r3, [r7, #16]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009846:	4b3e      	ldr	r3, [pc, #248]	; (8009940 <xPortStartScheduler+0x120>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a3f      	ldr	r2, [pc, #252]	; (8009948 <xPortStartScheduler+0x128>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d10a      	bne.n	8009866 <xPortStartScheduler+0x46>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	60fb      	str	r3, [r7, #12]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009866:	4b39      	ldr	r3, [pc, #228]	; (800994c <xPortStartScheduler+0x12c>)
 8009868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	22ff      	movs	r2, #255	; 0xff
 8009876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009888:	b2da      	uxtb	r2, r3
 800988a:	4b31      	ldr	r3, [pc, #196]	; (8009950 <xPortStartScheduler+0x130>)
 800988c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800988e:	4b31      	ldr	r3, [pc, #196]	; (8009954 <xPortStartScheduler+0x134>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009894:	e009      	b.n	80098aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009896:	4b2f      	ldr	r3, [pc, #188]	; (8009954 <xPortStartScheduler+0x134>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	4a2d      	ldr	r2, [pc, #180]	; (8009954 <xPortStartScheduler+0x134>)
 800989e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b2:	2b80      	cmp	r3, #128	; 0x80
 80098b4:	d0ef      	beq.n	8009896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098b6:	4b27      	ldr	r3, [pc, #156]	; (8009954 <xPortStartScheduler+0x134>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1c3 0307 	rsb	r3, r3, #7
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d00a      	beq.n	80098d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	60bb      	str	r3, [r7, #8]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098d8:	4b1e      	ldr	r3, [pc, #120]	; (8009954 <xPortStartScheduler+0x134>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	4a1d      	ldr	r2, [pc, #116]	; (8009954 <xPortStartScheduler+0x134>)
 80098e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <xPortStartScheduler+0x134>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ea:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <xPortStartScheduler+0x134>)
 80098ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098f6:	4b18      	ldr	r3, [pc, #96]	; (8009958 <xPortStartScheduler+0x138>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <xPortStartScheduler+0x138>)
 80098fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <xPortStartScheduler+0x138>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a14      	ldr	r2, [pc, #80]	; (8009958 <xPortStartScheduler+0x138>)
 8009908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800990c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800990e:	f000 f8dd 	bl	8009acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009912:	4b12      	ldr	r3, [pc, #72]	; (800995c <xPortStartScheduler+0x13c>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009918:	f000 f8fc 	bl	8009b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800991c:	4b10      	ldr	r3, [pc, #64]	; (8009960 <xPortStartScheduler+0x140>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a0f      	ldr	r2, [pc, #60]	; (8009960 <xPortStartScheduler+0x140>)
 8009922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009928:	f7ff ff66 	bl	80097f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800992c:	f7fe ff4c 	bl	80087c8 <vTaskSwitchContext>
	prvTaskExitError();
 8009930:	f7ff ff20 	bl	8009774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	e000ed00 	.word	0xe000ed00
 8009944:	410fc271 	.word	0x410fc271
 8009948:	410fc270 	.word	0x410fc270
 800994c:	e000e400 	.word	0xe000e400
 8009950:	200019e0 	.word	0x200019e0
 8009954:	200019e4 	.word	0x200019e4
 8009958:	e000ed20 	.word	0xe000ed20
 800995c:	200000dc 	.word	0x200000dc
 8009960:	e000ef34 	.word	0xe000ef34

08009964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	607b      	str	r3, [r7, #4]
}
 800997c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <vPortEnterCritical+0x58>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	4a0d      	ldr	r2, [pc, #52]	; (80099bc <vPortEnterCritical+0x58>)
 8009986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009988:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <vPortEnterCritical+0x58>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d10f      	bne.n	80099b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <vPortEnterCritical+0x5c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	603b      	str	r3, [r7, #0]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <vPortEnterCritical+0x4a>
	}
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	200000dc 	.word	0x200000dc
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <vPortExitCritical+0x50>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <vPortExitCritical+0x24>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	607b      	str	r3, [r7, #4]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <vPortExitCritical+0x50>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <vPortExitCritical+0x50>)
 80099f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099f2:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <vPortExitCritical+0x50>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <vPortExitCritical+0x42>
 80099fa:	2300      	movs	r3, #0
 80099fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	f383 8811 	msr	BASEPRI, r3
}
 8009a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	200000dc 	.word	0x200000dc
	...

08009a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a20:	f3ef 8009 	mrs	r0, PSP
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <pxCurrentTCBConst>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f01e 0f10 	tst.w	lr, #16
 8009a30:	bf08      	it	eq
 8009a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a44:	f380 8811 	msr	BASEPRI, r0
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f7fe feba 	bl	80087c8 <vTaskSwitchContext>
 8009a54:	f04f 0000 	mov.w	r0, #0
 8009a58:	f380 8811 	msr	BASEPRI, r0
 8009a5c:	bc09      	pop	{r0, r3}
 8009a5e:	6819      	ldr	r1, [r3, #0]
 8009a60:	6808      	ldr	r0, [r1, #0]
 8009a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a66:	f01e 0f10 	tst.w	lr, #16
 8009a6a:	bf08      	it	eq
 8009a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a70:	f380 8809 	msr	PSP, r0
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	f3af 8000 	nop.w

08009a80 <pxCurrentTCBConst>:
 8009a80:	200013b4 	.word	0x200013b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
}
 8009aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009aa2:	f7fe fdd7 	bl	8008654 <xTaskIncrementTick>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <xPortSysTickHandler+0x40>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f383 8811 	msr	BASEPRI, r3
}
 8009abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <vPortSetupTimerInterrupt+0x38>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <vPortSetupTimerInterrupt+0x3c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	; (8009b0c <vPortSetupTimerInterrupt+0x40>)
 8009ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae6:	099b      	lsrs	r3, r3, #6
 8009ae8:	4a09      	ldr	r2, [pc, #36]	; (8009b10 <vPortSetupTimerInterrupt+0x44>)
 8009aea:	3b01      	subs	r3, #1
 8009aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009af0:	2207      	movs	r2, #7
 8009af2:	601a      	str	r2, [r3, #0]
}
 8009af4:	bf00      	nop
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	e000e010 	.word	0xe000e010
 8009b04:	e000e018 	.word	0xe000e018
 8009b08:	200000d0 	.word	0x200000d0
 8009b0c:	10624dd3 	.word	0x10624dd3
 8009b10:	e000e014 	.word	0xe000e014

08009b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b24 <vPortEnableVFP+0x10>
 8009b18:	6801      	ldr	r1, [r0, #0]
 8009b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b1e:	6001      	str	r1, [r0, #0]
 8009b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b22:	bf00      	nop
 8009b24:	e000ed88 	.word	0xe000ed88

08009b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b2e:	f3ef 8305 	mrs	r3, IPSR
 8009b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b0f      	cmp	r3, #15
 8009b38:	d914      	bls.n	8009b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b3a:	4a17      	ldr	r2, [pc, #92]	; (8009b98 <vPortValidateInterruptPriority+0x70>)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b44:	4b15      	ldr	r3, [pc, #84]	; (8009b9c <vPortValidateInterruptPriority+0x74>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	7afa      	ldrb	r2, [r7, #11]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d20a      	bcs.n	8009b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <vPortValidateInterruptPriority+0x78>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <vPortValidateInterruptPriority+0x7c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d90a      	bls.n	8009b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	603b      	str	r3, [r7, #0]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <vPortValidateInterruptPriority+0x60>
	}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	e000e3f0 	.word	0xe000e3f0
 8009b9c:	200019e0 	.word	0x200019e0
 8009ba0:	e000ed0c 	.word	0xe000ed0c
 8009ba4:	200019e4 	.word	0x200019e4

08009ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bb4:	f7fe fc92 	bl	80084dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bb8:	4b5b      	ldr	r3, [pc, #364]	; (8009d28 <pvPortMalloc+0x180>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bc0:	f000 f920 	bl	8009e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bc4:	4b59      	ldr	r3, [pc, #356]	; (8009d2c <pvPortMalloc+0x184>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 8093 	bne.w	8009cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01d      	beq.n	8009c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009bd8:	2208      	movs	r2, #8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d014      	beq.n	8009c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <pvPortMalloc+0x6c>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	617b      	str	r3, [r7, #20]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d06e      	beq.n	8009cf8 <pvPortMalloc+0x150>
 8009c1a:	4b45      	ldr	r3, [pc, #276]	; (8009d30 <pvPortMalloc+0x188>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d869      	bhi.n	8009cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c24:	4b43      	ldr	r3, [pc, #268]	; (8009d34 <pvPortMalloc+0x18c>)
 8009c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c28:	4b42      	ldr	r3, [pc, #264]	; (8009d34 <pvPortMalloc+0x18c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c2e:	e004      	b.n	8009c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d903      	bls.n	8009c4c <pvPortMalloc+0xa4>
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f1      	bne.n	8009c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c4c:	4b36      	ldr	r3, [pc, #216]	; (8009d28 <pvPortMalloc+0x180>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d050      	beq.n	8009cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	4413      	add	r3, r2
 8009c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	2308      	movs	r3, #8
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d91f      	bls.n	8009cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	613b      	str	r3, [r7, #16]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cb2:	69b8      	ldr	r0, [r7, #24]
 8009cb4:	f000 f908 	bl	8009ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <pvPortMalloc+0x188>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <pvPortMalloc+0x188>)
 8009cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cc6:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <pvPortMalloc+0x188>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b1b      	ldr	r3, [pc, #108]	; (8009d38 <pvPortMalloc+0x190>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d203      	bcs.n	8009cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cd2:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <pvPortMalloc+0x188>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a18      	ldr	r2, [pc, #96]	; (8009d38 <pvPortMalloc+0x190>)
 8009cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <pvPortMalloc+0x184>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <pvPortMalloc+0x194>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <pvPortMalloc+0x194>)
 8009cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cf8:	f7fe fbfe 	bl	80084f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <pvPortMalloc+0x174>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60fb      	str	r3, [r7, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <pvPortMalloc+0x172>
	return pvReturn;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3728      	adds	r7, #40	; 0x28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200055f0 	.word	0x200055f0
 8009d2c:	20005604 	.word	0x20005604
 8009d30:	200055f4 	.word	0x200055f4
 8009d34:	200055e8 	.word	0x200055e8
 8009d38:	200055f8 	.word	0x200055f8
 8009d3c:	200055fc 	.word	0x200055fc

08009d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d04d      	beq.n	8009dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d52:	2308      	movs	r3, #8
 8009d54:	425b      	negs	r3, r3
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4413      	add	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <vPortFree+0xb8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <vPortFree+0x44>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60fb      	str	r3, [r7, #12]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <vPortFree+0x62>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60bb      	str	r3, [r7, #8]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <vPortFree+0xb8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01e      	beq.n	8009dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11a      	bne.n	8009dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <vPortFree+0xb8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	401a      	ands	r2, r3
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dc8:	f7fe fb88 	bl	80084dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <vPortFree+0xbc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <vPortFree+0xbc>)
 8009dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f000 f874 	bl	8009ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <vPortFree+0xc0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <vPortFree+0xc0>)
 8009de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dea:	f7fe fb85 	bl	80084f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dee:	bf00      	nop
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20005604 	.word	0x20005604
 8009dfc:	200055f4 	.word	0x200055f4
 8009e00:	20005600 	.word	0x20005600

08009e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e10:	4b27      	ldr	r3, [pc, #156]	; (8009eb0 <prvHeapInit+0xac>)
 8009e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00c      	beq.n	8009e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f023 0307 	bic.w	r3, r3, #7
 8009e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	4a1f      	ldr	r2, [pc, #124]	; (8009eb0 <prvHeapInit+0xac>)
 8009e34:	4413      	add	r3, r2
 8009e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <prvHeapInit+0xb0>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <prvHeapInit+0xb0>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e50:	2208      	movs	r2, #8
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0307 	bic.w	r3, r3, #7
 8009e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e6e:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <prvHeapInit+0xb8>)
 8009e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <prvHeapInit+0xbc>)
 8009e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <prvHeapInit+0xc0>)
 8009e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	200019e8 	.word	0x200019e8
 8009eb4:	200055e8 	.word	0x200055e8
 8009eb8:	200055f0 	.word	0x200055f0
 8009ebc:	200055f8 	.word	0x200055f8
 8009ec0:	200055f4 	.word	0x200055f4
 8009ec4:	20005604 	.word	0x20005604

08009ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <prvInsertBlockIntoFreeList+0xac>)
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e002      	b.n	8009edc <prvInsertBlockIntoFreeList+0x14>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d8f7      	bhi.n	8009ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d108      	bne.n	8009f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	441a      	add	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d118      	bne.n	8009f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <prvInsertBlockIntoFreeList+0xb0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d00d      	beq.n	8009f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	441a      	add	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e008      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvInsertBlockIntoFreeList+0xb0>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e003      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d002      	beq.n	8009f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	200055e8 	.word	0x200055e8
 8009f78:	200055f0 	.word	0x200055f0

08009f7c <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f002 f85a 	bl	800c03e <cJSON_IsNumber>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <cJSON_GetNumberValue+0x34>)
 8009f96:	e002      	b.n	8009f9e <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8009f9e:	ec43 2b17 	vmov	d7, r2, r3
 8009fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8009fa6:	eef0 0a67 	vmov.f32	s1, s15
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	7ff80000 	.word	0x7ff80000

08009fb4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <case_insensitive_strcmp+0x16>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e056      	b.n	800a07c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d10d      	bne.n	8009ff2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e050      	b.n	800a07c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e04a      	b.n	800a07c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	603b      	str	r3, [r7, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	73fb      	strb	r3, [r7, #15]
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a22      	ldr	r2, [pc, #136]	; (800a088 <case_insensitive_strcmp+0xd4>)
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	2b01      	cmp	r3, #1
 800a008:	d103      	bne.n	800a012 <case_insensitive_strcmp+0x5e>
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	f103 0220 	add.w	r2, r3, #32
 800a010:	e000      	b.n	800a014 <case_insensitive_strcmp+0x60>
 800a012:	7bfa      	ldrb	r2, [r7, #15]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	73bb      	strb	r3, [r7, #14]
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	3301      	adds	r3, #1
 800a01e:	491a      	ldr	r1, [pc, #104]	; (800a088 <case_insensitive_strcmp+0xd4>)
 800a020:	440b      	add	r3, r1
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d102      	bne.n	800a032 <case_insensitive_strcmp+0x7e>
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	3320      	adds	r3, #32
 800a030:	e000      	b.n	800a034 <case_insensitive_strcmp+0x80>
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	429a      	cmp	r2, r3
 800a036:	d0d0      	beq.n	8009fda <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	737b      	strb	r3, [r7, #13]
 800a03e:	7b7b      	ldrb	r3, [r7, #13]
 800a040:	3301      	adds	r3, #1
 800a042:	4a11      	ldr	r2, [pc, #68]	; (800a088 <case_insensitive_strcmp+0xd4>)
 800a044:	4413      	add	r3, r2
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 0303 	and.w	r3, r3, #3
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d103      	bne.n	800a058 <case_insensitive_strcmp+0xa4>
 800a050:	7b7b      	ldrb	r3, [r7, #13]
 800a052:	f103 0220 	add.w	r2, r3, #32
 800a056:	e000      	b.n	800a05a <case_insensitive_strcmp+0xa6>
 800a058:	7b7a      	ldrb	r2, [r7, #13]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	733b      	strb	r3, [r7, #12]
 800a060:	7b3b      	ldrb	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	4908      	ldr	r1, [pc, #32]	; (800a088 <case_insensitive_strcmp+0xd4>)
 800a066:	440b      	add	r3, r1
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d102      	bne.n	800a078 <case_insensitive_strcmp+0xc4>
 800a072:	7b3b      	ldrb	r3, [r7, #12]
 800a074:	3320      	adds	r3, #32
 800a076:	e000      	b.n	800a07a <case_insensitive_strcmp+0xc6>
 800a078:	7b3b      	ldrb	r3, [r7, #12]
 800a07a:	1ad3      	subs	r3, r2, r3
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	080134d0 	.word	0x080134d0

0800a08c <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <cJSON_strdup+0x1c>
    {
        return NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e015      	b.n	800a0d4 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7f6 f8f9 	bl	80002a0 <strlen>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	4798      	blx	r3
 800a0bc:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <cJSON_strdup+0x3c>
    {
        return NULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e005      	b.n	800a0d4 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	68b8      	ldr	r0, [r7, #8]
 800a0ce:	f004 ff62 	bl	800ef96 <memcpy>

    return copy;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <cJSON_InitHooks>:

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 800a0ea:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <cJSON_InitHooks+0x78>)
 800a0ec:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <cJSON_InitHooks+0x7c>)
 800a0ee:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 800a0f0:	4b18      	ldr	r3, [pc, #96]	; (800a154 <cJSON_InitHooks+0x78>)
 800a0f2:	4a1a      	ldr	r2, [pc, #104]	; (800a15c <cJSON_InitHooks+0x80>)
 800a0f4:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 800a0f6:	4b17      	ldr	r3, [pc, #92]	; (800a154 <cJSON_InitHooks+0x78>)
 800a0f8:	4a19      	ldr	r2, [pc, #100]	; (800a160 <cJSON_InitHooks+0x84>)
 800a0fa:	609a      	str	r2, [r3, #8]
        return;
 800a0fc:	e025      	b.n	800a14a <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <cJSON_InitHooks+0x78>)
 800a100:	4a15      	ldr	r2, [pc, #84]	; (800a158 <cJSON_InitHooks+0x7c>)
 800a102:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a10      	ldr	r2, [pc, #64]	; (800a154 <cJSON_InitHooks+0x78>)
 800a112:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 800a114:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <cJSON_InitHooks+0x78>)
 800a116:	4a11      	ldr	r2, [pc, #68]	; (800a15c <cJSON_InitHooks+0x80>)
 800a118:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	4a0b      	ldr	r2, [pc, #44]	; (800a154 <cJSON_InitHooks+0x78>)
 800a128:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <cJSON_InitHooks+0x78>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 800a130:	4b08      	ldr	r3, [pc, #32]	; (800a154 <cJSON_InitHooks+0x78>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a08      	ldr	r2, [pc, #32]	; (800a158 <cJSON_InitHooks+0x7c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d107      	bne.n	800a14a <cJSON_InitHooks+0x6e>
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <cJSON_InitHooks+0x78>)
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	4a07      	ldr	r2, [pc, #28]	; (800a15c <cJSON_InitHooks+0x80>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d102      	bne.n	800a14a <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 800a144:	4b03      	ldr	r3, [pc, #12]	; (800a154 <cJSON_InitHooks+0x78>)
 800a146:	4a06      	ldr	r2, [pc, #24]	; (800a160 <cJSON_InitHooks+0x84>)
 800a148:	609a      	str	r2, [r3, #8]
    }
}
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	200000e0 	.word	0x200000e0
 800a158:	0800d219 	.word	0x0800d219
 800a15c:	0800d229 	.word	0x0800d229
 800a160:	0800d391 	.word	0x0800d391

0800a164 <cJSON_New_Item>:

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2028      	movs	r0, #40	; 0x28
 800a172:	4798      	blx	r3
 800a174:	60f8      	str	r0, [r7, #12]
    if (node)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800a17c:	2228      	movs	r2, #40	; 0x28
 800a17e:	2100      	movs	r1, #0
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f004 fe11 	bl	800eda8 <memset>
    }

    return node;
 800a186:	68fb      	ldr	r3, [r7, #12]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800a19c:	e037      	b.n	800a20e <cJSON_Delete+0x7e>
    {
        next = item->next;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d108      	bne.n	800a1c2 <cJSON_Delete+0x32>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff ffe7 	bl	800a190 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <cJSON_Delete+0x52>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <cJSON_Delete+0x90>)
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6912      	ldr	r2, [r2, #16]
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <cJSON_Delete+0x72>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <cJSON_Delete+0x90>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6a12      	ldr	r2, [r2, #32]
 800a1fe:	4610      	mov	r0, r2
 800a200:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <cJSON_Delete+0x90>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
        item = next;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1c4      	bne.n	800a19e <cJSON_Delete+0xe>
    }
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200000e0 	.word	0x200000e0

0800a224 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800a228:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	0000      	movs	r0, r0
	...

0800a238 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b098      	sub	sp, #96	; 0x60
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
    double number = 0;
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800a252:	f7ff ffe7 	bl	800a224 <get_decimal_point>
 800a256:	4603      	mov	r3, r0
 800a258:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <parse_number+0x36>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <parse_number+0x3a>
    {
        return false;
 800a26e:	2300      	movs	r3, #0
 800a270:	e0a0      	b.n	800a3b4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a272:	2300      	movs	r3, #0
 800a274:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a276:	e03d      	b.n	800a2f4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6899      	ldr	r1, [r3, #8]
 800a280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a282:	440b      	add	r3, r1
 800a284:	4413      	add	r3, r2
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b45      	cmp	r3, #69	; 0x45
 800a28a:	dc17      	bgt.n	800a2bc <parse_number+0x84>
 800a28c:	2b2b      	cmp	r3, #43	; 0x2b
 800a28e:	db40      	blt.n	800a312 <parse_number+0xda>
 800a290:	3b2b      	subs	r3, #43	; 0x2b
 800a292:	2201      	movs	r2, #1
 800a294:	409a      	lsls	r2, r3
 800a296:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <parse_number+0x190>)
 800a298:	4013      	ands	r3, r2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bf14      	ite	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	2300      	moveq	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10b      	bne.n	800a2c0 <parse_number+0x88>
 800a2a8:	f002 0308 	and.w	r3, r2, #8
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bf14      	ite	ne
 800a2b0:	2301      	movne	r3, #1
 800a2b2:	2300      	moveq	r3, #0
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d111      	bne.n	800a2de <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800a2ba:	e02a      	b.n	800a312 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800a2bc:	2b65      	cmp	r3, #101	; 0x65
 800a2be:	d128      	bne.n	800a312 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6899      	ldr	r1, [r3, #8]
 800a2c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ca:	440b      	add	r3, r1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	7819      	ldrb	r1, [r3, #0]
 800a2d0:	f107 0208 	add.w	r2, r7, #8
 800a2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2d6:	4413      	add	r3, r2
 800a2d8:	460a      	mov	r2, r1
 800a2da:	701a      	strb	r2, [r3, #0]
                break;
 800a2dc:	e007      	b.n	800a2ee <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800a2de:	f107 0208 	add.w	r2, r7, #8
 800a2e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a2ea:	701a      	strb	r2, [r3, #0]
                break;
 800a2ec:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2f6:	2b3e      	cmp	r3, #62	; 0x3e
 800a2f8:	d80d      	bhi.n	800a316 <parse_number+0xde>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00a      	beq.n	800a316 <parse_number+0xde>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a306:	441a      	add	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d3b3      	bcc.n	800a278 <parse_number+0x40>
        }
    }
loop_end:
 800a310:	e001      	b.n	800a316 <parse_number+0xde>
                goto loop_end;
 800a312:	bf00      	nop
 800a314:	e000      	b.n	800a318 <parse_number+0xe0>
loop_end:
 800a316:	bf00      	nop
    number_c_string[i] = '\0';
 800a318:	f107 0208 	add.w	r2, r7, #8
 800a31c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a31e:	4413      	add	r3, r2
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800a324:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 fe72 	bl	800e018 <strtod>
 800a334:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800a338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a33a:	f107 0308 	add.w	r3, r7, #8
 800a33e:	429a      	cmp	r2, r3
 800a340:	d101      	bne.n	800a346 <parse_number+0x10e>
    {
        return false; /* parse_error */
 800a342:	2300      	movs	r3, #0
 800a344:	e036      	b.n	800a3b4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a34c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800a350:	a31b      	add	r3, pc, #108	; (adr r3, 800a3c0 <parse_number+0x188>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a35a:	f7f6 fbeb 	bl	8000b34 <__aeabi_dcmpge>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a36a:	615a      	str	r2, [r3, #20]
 800a36c:	e015      	b.n	800a39a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800a36e:	f04f 0200 	mov.w	r2, #0
 800a372:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <parse_number+0x194>)
 800a374:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a378:	f7f6 fbd2 	bl	8000b20 <__aeabi_dcmple>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a388:	615a      	str	r2, [r3, #20]
 800a38a:	e006      	b.n	800a39a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800a38c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a390:	f7f6 fbfa 	bl	8000b88 <__aeabi_d2iz>
 800a394:	4602      	mov	r2, r0
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2208      	movs	r2, #8
 800a39e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a3a6:	f107 0208 	add.w	r2, r7, #8
 800a3aa:	1a8a      	subs	r2, r1, r2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	609a      	str	r2, [r3, #8]
    return true;
 800a3b2:	2301      	movs	r3, #1
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3760      	adds	r7, #96	; 0x60
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	ffc00000 	.word	0xffc00000
 800a3c4:	41dfffff 	.word	0x41dfffff
 800a3c8:	04007fe5 	.word	0x04007fe5
 800a3cc:	c1e00000 	.word	0xc1e00000

0800a3d0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <ensure+0x20>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <ensure+0x24>
    {
        return NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e083      	b.n	800a4fc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <ensure+0x3c>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	429a      	cmp	r2, r3
 800a406:	d301      	bcc.n	800a40c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	e077      	b.n	800a4fc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	da01      	bge.n	800a416 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	e072      	b.n	800a4fc <ensure+0x12c>
    }

    needed += p->offset + 1;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	689a      	ldr	r2, [r3, #8]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	4413      	add	r3, r2
 800a41e:	3301      	adds	r3, #1
 800a420:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d805      	bhi.n	800a438 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	4413      	add	r3, r2
 800a436:	e061      	b.n	800a4fc <ensure+0x12c>
    }

    if (p->noalloc) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <ensure+0x74>
        return NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	e05b      	b.n	800a4fc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d308      	bcc.n	800a45e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	db03      	blt.n	800a45a <ensure+0x8a>
        {
            newsize = INT_MAX;
 800a452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	e004      	b.n	800a464 <ensure+0x94>
        }
        else
        {
            return NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e04e      	b.n	800a4fc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d018      	beq.n	800a49e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6812      	ldr	r2, [r2, #0]
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	4610      	mov	r0, r2
 800a478:	4798      	blx	r3
 800a47a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d132      	bne.n	800a4e8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	4610      	mov	r0, r2
 800a48c:	4798      	blx	r3
            p->length = 0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]

            return NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	e02e      	b.n	800a4fc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	68b8      	ldr	r0, [r7, #8]
 800a4a4:	4798      	blx	r3
 800a4a6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10d      	bne.n	800a4ca <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6812      	ldr	r2, [r2, #0]
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
            p->length = 0;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

            return NULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e018      	b.n	800a4fc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6819      	ldr	r1, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f004 fd5d 	bl	800ef96 <memcpy>
        p->hooks.deallocate(p->buffer);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
    }
    p->length = newsize;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4413      	add	r3, r2
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800a504:	b590      	push	{r4, r7, lr}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d013      	beq.n	800a53e <update_offset+0x3a>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00f      	beq.n	800a53e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	4413      	add	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689c      	ldr	r4, [r3, #8]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7f5 feb6 	bl	80002a0 <strlen>
 800a534:	4603      	mov	r3, r0
 800a536:	18e2      	adds	r2, r4, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	e000      	b.n	800a540 <update_offset+0x3c>
        return;
 800a53e:	bf00      	nop
}
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	bd90      	pop	{r4, r7, pc}
	...

0800a548 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800a548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a54c:	b087      	sub	sp, #28
 800a54e:	af00      	add	r7, sp, #0
 800a550:	ed87 0b02 	vstr	d0, [r7, #8]
 800a554:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800a558:	68b8      	ldr	r0, [r7, #8]
 800a55a:	68fe      	ldr	r6, [r7, #12]
 800a55c:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	687e      	ldr	r6, [r7, #4]
 800a564:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a568:	f7f6 faee 	bl	8000b48 <__aeabi_dcmpgt>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d004      	beq.n	800a57c <compare_double+0x34>
 800a572:	68bc      	ldr	r4, [r7, #8]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a57a:	e003      	b.n	800a584 <compare_double+0x3c>
 800a57c:	683c      	ldr	r4, [r7, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a584:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800a588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a590:	f7f5 fe92 	bl	80002b8 <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4690      	mov	r8, r2
 800a59a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <compare_double+0x8c>)
 800a5a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5a8:	f7f6 f83e 	bl	8000628 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f6 fab2 	bl	8000b20 <__aeabi_dcmple>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <compare_double+0x7e>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	461c      	mov	r4, r3
 800a5c6:	b2e3      	uxtb	r3, r4
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	371c      	adds	r7, #28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	bf00      	nop
 800a5d4:	3cb00000 	.word	0x3cb00000

0800a5d8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5da:	b093      	sub	sp, #76	; 0x4c
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a5ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	f107 0318 	add.w	r3, r7, #24
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	605a      	str	r2, [r3, #4]
 800a606:	609a      	str	r2, [r3, #8]
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	611a      	str	r2, [r3, #16]
 800a60c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800a60e:	f7ff fe09 	bl	800a224 <get_decimal_point>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <print_number+0x56>
    {
        return false;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e0b4      	b.n	800a798 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800a62e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a636:	f7f6 fa91 	bl	8000b5c <__aeabi_dcmpun>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d121      	bne.n	800a684 <print_number+0xac>
 800a640:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800a642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a644:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a648:	2301      	movs	r3, #1
 800a64a:	461e      	mov	r6, r3
 800a64c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a650:	4b53      	ldr	r3, [pc, #332]	; (800a7a0 <print_number+0x1c8>)
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f6 fa81 	bl	8000b5c <__aeabi_dcmpun>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <print_number+0xa0>
 800a660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a664:	4b4e      	ldr	r3, [pc, #312]	; (800a7a0 <print_number+0x1c8>)
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 fa59 	bl	8000b20 <__aeabi_dcmple>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <print_number+0xa0>
 800a674:	2300      	movs	r3, #0
 800a676:	461e      	mov	r6, r3
 800a678:	b2f3      	uxtb	r3, r6
 800a67a:	f083 0301 	eor.w	r3, r3, #1
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	4946      	ldr	r1, [pc, #280]	; (800a7a4 <print_number+0x1cc>)
 800a68a:	4618      	mov	r0, r3
 800a68c:	f004 fa66 	bl	800eb5c <siprintf>
 800a690:	6478      	str	r0, [r7, #68]	; 0x44
 800a692:	e03f      	b.n	800a714 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7f5 ff5b 	bl	8000554 <__aeabi_i2d>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a6a6:	f7f6 fa27 	bl	8000af8 <__aeabi_dcmpeq>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d009      	beq.n	800a6c4 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	695a      	ldr	r2, [r3, #20]
 800a6b4:	f107 0314 	add.w	r3, r7, #20
 800a6b8:	493b      	ldr	r1, [pc, #236]	; (800a7a8 <print_number+0x1d0>)
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f004 fa4e 	bl	800eb5c <siprintf>
 800a6c0:	6478      	str	r0, [r7, #68]	; 0x44
 800a6c2:	e027      	b.n	800a714 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800a6c4:	f107 0014 	add.w	r0, r7, #20
 800a6c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a6cc:	4937      	ldr	r1, [pc, #220]	; (800a7ac <print_number+0x1d4>)
 800a6ce:	f004 fa45 	bl	800eb5c <siprintf>
 800a6d2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800a6d4:	f107 0208 	add.w	r2, r7, #8
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4934      	ldr	r1, [pc, #208]	; (800a7b0 <print_number+0x1d8>)
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f004 fa5c 	bl	800eb9c <siscanf>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10c      	bne.n	800a704 <print_number+0x12c>
 800a6ea:	ed97 7b02 	vldr	d7, [r7, #8]
 800a6ee:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800a6f2:	eeb0 0a47 	vmov.f32	s0, s14
 800a6f6:	eef0 0a67 	vmov.f32	s1, s15
 800a6fa:	f7ff ff25 	bl	800a548 <compare_double>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d107      	bne.n	800a714 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800a704:	f107 0014 	add.w	r0, r7, #20
 800a708:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a70c:	4929      	ldr	r1, [pc, #164]	; (800a7b4 <print_number+0x1dc>)
 800a70e:	f004 fa25 	bl	800eb5c <siprintf>
 800a712:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800a714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a716:	2b00      	cmp	r3, #0
 800a718:	db02      	blt.n	800a720 <print_number+0x148>
 800a71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71c:	2b19      	cmp	r3, #25
 800a71e:	dd01      	ble.n	800a724 <print_number+0x14c>
    {
        return false;
 800a720:	2300      	movs	r3, #0
 800a722:	e039      	b.n	800a798 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800a724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a726:	3301      	adds	r3, #1
 800a728:	4619      	mov	r1, r3
 800a72a:	6838      	ldr	r0, [r7, #0]
 800a72c:	f7ff fe50 	bl	800a3d0 <ensure>
 800a730:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <print_number+0x164>
    {
        return false;
 800a738:	2300      	movs	r3, #0
 800a73a:	e02d      	b.n	800a798 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800a73c:	2300      	movs	r3, #0
 800a73e:	643b      	str	r3, [r7, #64]	; 0x40
 800a740:	e01a      	b.n	800a778 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800a742:	f107 0214 	add.w	r2, r7, #20
 800a746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a748:	4413      	add	r3, r2
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a750:	429a      	cmp	r2, r3
 800a752:	d105      	bne.n	800a760 <print_number+0x188>
        {
            output_pointer[i] = '.';
 800a754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a758:	4413      	add	r3, r2
 800a75a:	222e      	movs	r2, #46	; 0x2e
 800a75c:	701a      	strb	r2, [r3, #0]
            continue;
 800a75e:	e008      	b.n	800a772 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 800a760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	4413      	add	r3, r2
 800a766:	f107 0114 	add.w	r1, r7, #20
 800a76a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a76c:	440a      	add	r2, r1
 800a76e:	7812      	ldrb	r2, [r2, #0]
 800a770:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800a772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a774:	3301      	adds	r3, #1
 800a776:	643b      	str	r3, [r7, #64]	; 0x40
 800a778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d3e0      	bcc.n	800a742 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 800a780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a784:	4413      	add	r3, r2
 800a786:	2200      	movs	r2, #0
 800a788:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a790:	441a      	add	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	609a      	str	r2, [r3, #8]

    return true;
 800a796:	2301      	movs	r3, #1
}
 800a798:	4618      	mov	r0, r3
 800a79a:	374c      	adds	r7, #76	; 0x4c
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a0:	7fefffff 	.word	0x7fefffff
 800a7a4:	08013374 	.word	0x08013374
 800a7a8:	0801337c 	.word	0x0801337c
 800a7ac:	08013380 	.word	0x08013380
 800a7b0:	08013388 	.word	0x08013388
 800a7b4:	0801338c 	.word	0x0801338c

0800a7b8 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	e04c      	b.n	800a868 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b2f      	cmp	r3, #47	; 0x2f
 800a7d8:	d90f      	bls.n	800a7fa <parse_hex4+0x42>
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4413      	add	r3, r2
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b39      	cmp	r3, #57	; 0x39
 800a7e4:	d809      	bhi.n	800a7fa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	3b30      	subs	r3, #48	; 0x30
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e02d      	b.n	800a856 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b40      	cmp	r3, #64	; 0x40
 800a804:	d90f      	bls.n	800a826 <parse_hex4+0x6e>
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4413      	add	r3, r2
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b46      	cmp	r3, #70	; 0x46
 800a810:	d809      	bhi.n	800a826 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4413      	add	r3, r2
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	461a      	mov	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	3b37      	subs	r3, #55	; 0x37
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	e017      	b.n	800a856 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	4413      	add	r3, r2
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b60      	cmp	r3, #96	; 0x60
 800a830:	d90f      	bls.n	800a852 <parse_hex4+0x9a>
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	4413      	add	r3, r2
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b66      	cmp	r3, #102	; 0x66
 800a83c:	d809      	bhi.n	800a852 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	3b57      	subs	r3, #87	; 0x57
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e001      	b.n	800a856 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800a852:	2300      	movs	r3, #0
 800a854:	e00c      	b.n	800a870 <parse_hex4+0xb8>
        }

        if (i < 3)
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d802      	bhi.n	800a862 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	3301      	adds	r3, #1
 800a866:	60bb      	str	r3, [r7, #8]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d9af      	bls.n	800a7ce <parse_hex4+0x16>
        }
    }

    return h;
 800a86e:	68fb      	ldr	r3, [r7, #12]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	f340 80b7 	ble.w	800aa26 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	3302      	adds	r3, #2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff ff7b 	bl	800a7b8 <parse_hex4>
 800a8c2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a8ca:	d304      	bcc.n	800a8d6 <utf16_literal_to_utf8+0x5a>
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800a8d2:	f0c0 80aa 	bcc.w	800aa2a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800a8dc:	d337      	bcc.n	800a94e <utf16_literal_to_utf8+0xd2>
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a8e4:	d233      	bcs.n	800a94e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	3306      	adds	r3, #6
 800a8ea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800a8f0:	230c      	movs	r3, #12
 800a8f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b05      	cmp	r3, #5
 800a8fe:	f340 8096 	ble.w	800aa2e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b5c      	cmp	r3, #92	; 0x5c
 800a908:	f040 8093 	bne.w	800aa32 <utf16_literal_to_utf8+0x1b6>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	3301      	adds	r3, #1
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b75      	cmp	r3, #117	; 0x75
 800a914:	f040 808d 	bne.w	800aa32 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	3302      	adds	r3, #2
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff ff4b 	bl	800a7b8 <parse_hex4>
 800a922:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a92a:	f0c0 8084 	bcc.w	800aa36 <utf16_literal_to_utf8+0x1ba>
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800a934:	d27f      	bcs.n	800aa36 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	029a      	lsls	r2, r3, #10
 800a93a:	4b43      	ldr	r3, [pc, #268]	; (800aa48 <utf16_literal_to_utf8+0x1cc>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a944:	4313      	orrs	r3, r2
 800a946:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800a94c:	e004      	b.n	800a958 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800a94e:	2306      	movs	r3, #6
 800a950:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	2b7f      	cmp	r3, #127	; 0x7f
 800a95c:	d803      	bhi.n	800a966 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a964:	e01f      	b.n	800a9a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a96c:	d206      	bcs.n	800a97c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800a96e:	2302      	movs	r3, #2
 800a970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800a974:	23c0      	movs	r3, #192	; 0xc0
 800a976:	f887 3020 	strb.w	r3, [r7, #32]
 800a97a:	e014      	b.n	800a9a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a982:	d206      	bcs.n	800a992 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800a984:	2303      	movs	r3, #3
 800a986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800a98a:	23e0      	movs	r3, #224	; 0xe0
 800a98c:	f887 3020 	strb.w	r3, [r7, #32]
 800a990:	e009      	b.n	800a9a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800a998:	d24f      	bcs.n	800aa3a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800a99a:	2304      	movs	r3, #4
 800a99c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800a9a0:	23f0      	movs	r3, #240	; 0xf0
 800a9a2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a9a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a9b0:	e015      	b.n	800a9de <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9c4:	440b      	add	r3, r1
 800a9c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	099b      	lsrs	r3, r3, #6
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a9d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a9de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e5      	bne.n	800a9b2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800a9e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d909      	bls.n	800aa02 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	b2d9      	uxtb	r1, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	b2d2      	uxtb	r2, r2
 800a9fe:	701a      	strb	r2, [r3, #0]
 800aa00:	e007      	b.n	800aa12 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa1a:	441a      	add	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800aa20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa24:	e00b      	b.n	800aa3e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800aa26:	bf00      	nop
 800aa28:	e008      	b.n	800aa3c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800aa2a:	bf00      	nop
 800aa2c:	e006      	b.n	800aa3c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800aa2e:	bf00      	nop
 800aa30:	e004      	b.n	800aa3c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800aa32:	bf00      	nop
 800aa34:	e002      	b.n	800aa3c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800aa36:	bf00      	nop
 800aa38:	e000      	b.n	800aa3c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800aa3a:	bf00      	nop

fail:
    return 0;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	000ffc00 	.word	0x000ffc00

0800aa4c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	; 0x28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	4413      	add	r3, r2
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	4413      	add	r3, r2
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b22      	cmp	r3, #34	; 0x22
 800aa88:	f040 8103 	bne.w	800ac92 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800aa94:	e017      	b.n	800aac6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b5c      	cmp	r3, #92	; 0x5c
 800aa9c:	d110      	bne.n	800aac0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	f080 80f1 	bcs.w	800ac96 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	3301      	adds	r3, #1
 800aab8:	61bb      	str	r3, [r7, #24]
                input_end++;
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	3301      	adds	r3, #1
 800aabe:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	3301      	adds	r3, #1
 800aac4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6a3a      	ldr	r2, [r7, #32]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d203      	bcs.n	800aae0 <parse_string+0x94>
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b22      	cmp	r3, #34	; 0x22
 800aade:	d1da      	bne.n	800aa96 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6a3a      	ldr	r2, [r7, #32]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	f080 80d3 	bcs.w	800ac9a <parse_string+0x24e>
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b22      	cmp	r3, #34	; 0x22
 800aafa:	f040 80ce 	bne.w	800ac9a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	4413      	add	r3, r2
 800ab08:	6a3a      	ldr	r2, [r7, #32]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	3201      	adds	r2, #1
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80ba 	beq.w	800ac9e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800ab2e:	e094      	b.n	800ac5a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b5c      	cmp	r3, #92	; 0x5c
 800ab36:	d008      	beq.n	800ab4a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800ab38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3a:	1c53      	adds	r3, r2, #1
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1c59      	adds	r1, r3, #1
 800ab42:	60f9      	str	r1, [r7, #12]
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	e087      	b.n	800ac5a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800ab4e:	6a3a      	ldr	r2, [r7, #32]
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f340 80a4 	ble.w	800aca2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b75      	cmp	r3, #117	; 0x75
 800ab62:	f300 80a0 	bgt.w	800aca6 <parse_string+0x25a>
 800ab66:	2b5c      	cmp	r3, #92	; 0x5c
 800ab68:	da04      	bge.n	800ab74 <parse_string+0x128>
 800ab6a:	2b22      	cmp	r3, #34	; 0x22
 800ab6c:	d05c      	beq.n	800ac28 <parse_string+0x1dc>
 800ab6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ab70:	d05a      	beq.n	800ac28 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800ab72:	e098      	b.n	800aca6 <parse_string+0x25a>
            switch (input_pointer[1])
 800ab74:	3b5c      	subs	r3, #92	; 0x5c
 800ab76:	2b19      	cmp	r3, #25
 800ab78:	f200 8095 	bhi.w	800aca6 <parse_string+0x25a>
 800ab7c:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <parse_string+0x138>)
 800ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab82:	bf00      	nop
 800ab84:	0800ac29 	.word	0x0800ac29
 800ab88:	0800aca7 	.word	0x0800aca7
 800ab8c:	0800aca7 	.word	0x0800aca7
 800ab90:	0800aca7 	.word	0x0800aca7
 800ab94:	0800aca7 	.word	0x0800aca7
 800ab98:	0800aca7 	.word	0x0800aca7
 800ab9c:	0800abed 	.word	0x0800abed
 800aba0:	0800aca7 	.word	0x0800aca7
 800aba4:	0800aca7 	.word	0x0800aca7
 800aba8:	0800aca7 	.word	0x0800aca7
 800abac:	0800abf9 	.word	0x0800abf9
 800abb0:	0800aca7 	.word	0x0800aca7
 800abb4:	0800aca7 	.word	0x0800aca7
 800abb8:	0800aca7 	.word	0x0800aca7
 800abbc:	0800aca7 	.word	0x0800aca7
 800abc0:	0800aca7 	.word	0x0800aca7
 800abc4:	0800aca7 	.word	0x0800aca7
 800abc8:	0800aca7 	.word	0x0800aca7
 800abcc:	0800ac05 	.word	0x0800ac05
 800abd0:	0800aca7 	.word	0x0800aca7
 800abd4:	0800aca7 	.word	0x0800aca7
 800abd8:	0800aca7 	.word	0x0800aca7
 800abdc:	0800ac11 	.word	0x0800ac11
 800abe0:	0800aca7 	.word	0x0800aca7
 800abe4:	0800ac1d 	.word	0x0800ac1d
 800abe8:	0800ac39 	.word	0x0800ac39
                    *output_pointer++ = '\b';
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	60fa      	str	r2, [r7, #12]
 800abf2:	2208      	movs	r2, #8
 800abf4:	701a      	strb	r2, [r3, #0]
                    break;
 800abf6:	e02c      	b.n	800ac52 <parse_string+0x206>
                    *output_pointer++ = '\f';
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	60fa      	str	r2, [r7, #12]
 800abfe:	220c      	movs	r2, #12
 800ac00:	701a      	strb	r2, [r3, #0]
                    break;
 800ac02:	e026      	b.n	800ac52 <parse_string+0x206>
                    *output_pointer++ = '\n';
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	60fa      	str	r2, [r7, #12]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	701a      	strb	r2, [r3, #0]
                    break;
 800ac0e:	e020      	b.n	800ac52 <parse_string+0x206>
                    *output_pointer++ = '\r';
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	60fa      	str	r2, [r7, #12]
 800ac16:	220d      	movs	r2, #13
 800ac18:	701a      	strb	r2, [r3, #0]
                    break;
 800ac1a:	e01a      	b.n	800ac52 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	60fa      	str	r2, [r7, #12]
 800ac22:	2209      	movs	r2, #9
 800ac24:	701a      	strb	r2, [r3, #0]
                    break;
 800ac26:	e014      	b.n	800ac52 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	1c59      	adds	r1, r3, #1
 800ac30:	60f9      	str	r1, [r7, #12]
 800ac32:	7812      	ldrb	r2, [r2, #0]
 800ac34:	701a      	strb	r2, [r3, #0]
                    break;
 800ac36:	e00c      	b.n	800ac52 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6a39      	ldr	r1, [r7, #32]
 800ac40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac42:	f7ff fe1b 	bl	800a87c <utf16_literal_to_utf8>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d02c      	beq.n	800acaa <parse_string+0x25e>
                    break;
 800ac50:	bf00      	nop
            }
            input_pointer += sequence_length;
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac56:	4413      	add	r3, r2
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800ac5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	f4ff af66 	bcc.w	800ab30 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2210      	movs	r2, #16
 800ac6e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69fa      	ldr	r2, [r7, #28]
 800ac74:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6a3a      	ldr	r2, [r7, #32]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	609a      	str	r2, [r3, #8]

    return true;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e01e      	b.n	800acd0 <parse_string+0x284>
        goto fail;
 800ac92:	bf00      	nop
 800ac94:	e00a      	b.n	800acac <parse_string+0x260>
                    goto fail;
 800ac96:	bf00      	nop
 800ac98:	e008      	b.n	800acac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800ac9a:	bf00      	nop
 800ac9c:	e006      	b.n	800acac <parse_string+0x260>
            goto fail; /* allocation failure */
 800ac9e:	bf00      	nop
 800aca0:	e004      	b.n	800acac <parse_string+0x260>
                goto fail;
 800aca2:	bf00      	nop
 800aca4:	e002      	b.n	800acac <parse_string+0x260>
                    goto fail;
 800aca6:	bf00      	nop
 800aca8:	e000      	b.n	800acac <parse_string+0x260>
                        goto fail;
 800acaa:	bf00      	nop

fail:
    if (output != NULL)
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	69f8      	ldr	r0, [r7, #28]
 800acb8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	609a      	str	r2, [r3, #8]
    }

    return false;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3728      	adds	r7, #40	; 0x28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <print_string_ptr+0x28>
    {
        return false;
 800acfc:	2300      	movs	r3, #0
 800acfe:	e110      	b.n	800af22 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d111      	bne.n	800ad2a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800ad06:	2103      	movs	r1, #3
 800ad08:	6838      	ldr	r0, [r7, #0]
 800ad0a:	f7ff fb61 	bl	800a3d0 <ensure>
 800ad0e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <print_string_ptr+0x42>
        {
            return false;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e103      	b.n	800af22 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	4a83      	ldr	r2, [pc, #524]	; (800af2c <print_string_ptr+0x254>)
 800ad1e:	8811      	ldrh	r1, [r2, #0]
 800ad20:	7892      	ldrb	r2, [r2, #2]
 800ad22:	8019      	strh	r1, [r3, #0]
 800ad24:	709a      	strb	r2, [r3, #2]

        return true;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e0fb      	b.n	800af22 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	61fb      	str	r3, [r7, #28]
 800ad2e:	e024      	b.n	800ad7a <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b22      	cmp	r3, #34	; 0x22
 800ad36:	dc0f      	bgt.n	800ad58 <print_string_ptr+0x80>
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	db13      	blt.n	800ad64 <print_string_ptr+0x8c>
 800ad3c:	3b08      	subs	r3, #8
 800ad3e:	4a7c      	ldr	r2, [pc, #496]	; (800af30 <print_string_ptr+0x258>)
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bf14      	ite	ne
 800ad4c:	2301      	movne	r3, #1
 800ad4e:	2300      	moveq	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <print_string_ptr+0x84>
 800ad56:	e005      	b.n	800ad64 <print_string_ptr+0x8c>
 800ad58:	2b5c      	cmp	r3, #92	; 0x5c
 800ad5a:	d103      	bne.n	800ad64 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	617b      	str	r3, [r7, #20]
                break;
 800ad62:	e007      	b.n	800ad74 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b1f      	cmp	r3, #31
 800ad6a:	d802      	bhi.n	800ad72 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	3305      	adds	r3, #5
 800ad70:	617b      	str	r3, [r7, #20]
                }
                break;
 800ad72:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	3301      	adds	r3, #1
 800ad78:	61fb      	str	r3, [r7, #28]
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1d6      	bne.n	800ad30 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	461a      	mov	r2, r3
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3303      	adds	r3, #3
 800ad94:	4619      	mov	r1, r3
 800ad96:	6838      	ldr	r0, [r7, #0]
 800ad98:	f7ff fb1a 	bl	800a3d0 <ensure>
 800ad9c:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <print_string_ptr+0xd0>
    {
        return false;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e0bc      	b.n	800af22 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d117      	bne.n	800adde <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2222      	movs	r2, #34	; 0x22
 800adb2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	3301      	adds	r3, #1
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f004 f8ea 	bl	800ef96 <memcpy>
        output[output_length + 1] = '\"';
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	4413      	add	r3, r2
 800adca:	2222      	movs	r2, #34	; 0x22
 800adcc:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	3302      	adds	r3, #2
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4413      	add	r3, r2
 800add6:	2200      	movs	r2, #0
 800add8:	701a      	strb	r2, [r3, #0]

        return true;
 800adda:	2301      	movs	r3, #1
 800addc:	e0a1      	b.n	800af22 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2222      	movs	r2, #34	; 0x22
 800ade2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	3301      	adds	r3, #1
 800ade8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	61fb      	str	r3, [r7, #28]
 800adee:	e086      	b.n	800aefe <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b1f      	cmp	r3, #31
 800adf6:	d90c      	bls.n	800ae12 <print_string_ptr+0x13a>
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b22      	cmp	r3, #34	; 0x22
 800adfe:	d008      	beq.n	800ae12 <print_string_ptr+0x13a>
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b5c      	cmp	r3, #92	; 0x5c
 800ae06:	d004      	beq.n	800ae12 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	e06f      	b.n	800aef2 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	61ba      	str	r2, [r7, #24]
 800ae18:	225c      	movs	r2, #92	; 0x5c
 800ae1a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b22      	cmp	r3, #34	; 0x22
 800ae22:	dc3d      	bgt.n	800aea0 <print_string_ptr+0x1c8>
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	db59      	blt.n	800aedc <print_string_ptr+0x204>
 800ae28:	3b08      	subs	r3, #8
 800ae2a:	2b1a      	cmp	r3, #26
 800ae2c:	d856      	bhi.n	800aedc <print_string_ptr+0x204>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <print_string_ptr+0x15c>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800aeb5 	.word	0x0800aeb5
 800ae38:	0800aed5 	.word	0x0800aed5
 800ae3c:	0800aec5 	.word	0x0800aec5
 800ae40:	0800aedd 	.word	0x0800aedd
 800ae44:	0800aebd 	.word	0x0800aebd
 800ae48:	0800aecd 	.word	0x0800aecd
 800ae4c:	0800aedd 	.word	0x0800aedd
 800ae50:	0800aedd 	.word	0x0800aedd
 800ae54:	0800aedd 	.word	0x0800aedd
 800ae58:	0800aedd 	.word	0x0800aedd
 800ae5c:	0800aedd 	.word	0x0800aedd
 800ae60:	0800aedd 	.word	0x0800aedd
 800ae64:	0800aedd 	.word	0x0800aedd
 800ae68:	0800aedd 	.word	0x0800aedd
 800ae6c:	0800aedd 	.word	0x0800aedd
 800ae70:	0800aedd 	.word	0x0800aedd
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800aedd 	.word	0x0800aedd
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	0800aedd 	.word	0x0800aedd
 800ae84:	0800aedd 	.word	0x0800aedd
 800ae88:	0800aedd 	.word	0x0800aedd
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	0800aedd 	.word	0x0800aedd
 800ae94:	0800aedd 	.word	0x0800aedd
 800ae98:	0800aedd 	.word	0x0800aedd
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	2b5c      	cmp	r3, #92	; 0x5c
 800aea2:	d11b      	bne.n	800aedc <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	225c      	movs	r2, #92	; 0x5c
 800aea8:	701a      	strb	r2, [r3, #0]
                    break;
 800aeaa:	e022      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2222      	movs	r2, #34	; 0x22
 800aeb0:	701a      	strb	r2, [r3, #0]
                    break;
 800aeb2:	e01e      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2262      	movs	r2, #98	; 0x62
 800aeb8:	701a      	strb	r2, [r3, #0]
                    break;
 800aeba:	e01a      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2266      	movs	r2, #102	; 0x66
 800aec0:	701a      	strb	r2, [r3, #0]
                    break;
 800aec2:	e016      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	226e      	movs	r2, #110	; 0x6e
 800aec8:	701a      	strb	r2, [r3, #0]
                    break;
 800aeca:	e012      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2272      	movs	r2, #114	; 0x72
 800aed0:	701a      	strb	r2, [r3, #0]
                    break;
 800aed2:	e00e      	b.n	800aef2 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2274      	movs	r2, #116	; 0x74
 800aed8:	701a      	strb	r2, [r3, #0]
                    break;
 800aeda:	e00a      	b.n	800aef2 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	4914      	ldr	r1, [pc, #80]	; (800af34 <print_string_ptr+0x25c>)
 800aee4:	69b8      	ldr	r0, [r7, #24]
 800aee6:	f003 fe39 	bl	800eb5c <siprintf>
                    output_pointer += 4;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	3304      	adds	r3, #4
 800aeee:	61bb      	str	r3, [r7, #24]
                    break;
 800aef0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	3301      	adds	r3, #1
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	3301      	adds	r3, #1
 800aefc:	61bb      	str	r3, [r7, #24]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f47f af74 	bne.w	800adf0 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4413      	add	r3, r2
 800af10:	2222      	movs	r2, #34	; 0x22
 800af12:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3302      	adds	r3, #2
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4413      	add	r3, r2
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]

    return true;
 800af20:	2301      	movs	r3, #1
}
 800af22:	4618      	mov	r0, r3
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	08013394 	.word	0x08013394
 800af30:	04000037 	.word	0x04000037
 800af34:	08013398 	.word	0x08013398

0800af38 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff fec5 	bl	800acd8 <print_string_ptr>
 800af4e:	4603      	mov	r3, r0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <buffer_skip_whitespace+0x16>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	e02c      	b.n	800afcc <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <buffer_skip_whitespace+0x2c>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689a      	ldr	r2, [r3, #8]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d306      	bcc.n	800af92 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	e021      	b.n	800afcc <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00d      	beq.n	800afb4 <buffer_skip_whitespace+0x5c>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d207      	bcs.n	800afb4 <buffer_skip_whitespace+0x5c>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4413      	add	r3, r2
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d9e9      	bls.n	800af88 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d104      	bne.n	800afca <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	1e5a      	subs	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800afca:	687b      	ldr	r3, [r7, #4]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d007      	beq.n	800aff6 <skip_utf8_bom+0x1e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <skip_utf8_bom+0x1e>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <skip_utf8_bom+0x22>
    {
        return NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e01c      	b.n	800b034 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d018      	beq.n	800b032 <skip_utf8_bom+0x5a>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	1d1a      	adds	r2, r3, #4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d211      	bcs.n	800b032 <skip_utf8_bom+0x5a>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	4413      	add	r3, r2
 800b018:	2203      	movs	r2, #3
 800b01a:	4908      	ldr	r1, [pc, #32]	; (800b03c <skip_utf8_bom+0x64>)
 800b01c:	4618      	mov	r0, r3
 800b01e:	f003 fecb 	bl	800edb8 <strncmp>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d104      	bne.n	800b032 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	1cda      	adds	r2, r3, #3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800b032:	687b      	ldr	r3, [r7, #4]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	080133a0 	.word	0x080133a0

0800b040 <cJSON_ParseWithLengthOpts>:
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
}

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	; 0x38
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800b04e:	f107 0318 	add.w	r3, r7, #24
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	605a      	str	r2, [r3, #4]
 800b058:	609a      	str	r2, [r3, #8]
 800b05a:	60da      	str	r2, [r3, #12]
 800b05c:	611a      	str	r2, [r3, #16]
 800b05e:	615a      	str	r2, [r3, #20]
 800b060:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800b066:	4b41      	ldr	r3, [pc, #260]	; (800b16c <cJSON_ParseWithLengthOpts+0x12c>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800b06c:	4b3f      	ldr	r3, [pc, #252]	; (800b16c <cJSON_ParseWithLengthOpts+0x12c>)
 800b06e:	2200      	movs	r2, #0
 800b070:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d042      	beq.n	800b0fe <cJSON_ParseWithLengthOpts+0xbe>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d03f      	beq.n	800b0fe <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800b08a:	4a39      	ldr	r2, [pc, #228]	; (800b170 <cJSON_ParseWithLengthOpts+0x130>)
 800b08c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b090:	ca07      	ldmia	r2, {r0, r1, r2}
 800b092:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800b096:	4836      	ldr	r0, [pc, #216]	; (800b170 <cJSON_ParseWithLengthOpts+0x130>)
 800b098:	f7ff f864 	bl	800a164 <cJSON_New_Item>
 800b09c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d02e      	beq.n	800b102 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800b0a4:	f107 0318 	add.w	r3, r7, #24
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff ff95 	bl	800afd8 <skip_utf8_bom>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff ff51 	bl	800af58 <buffer_skip_whitespace>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0bc:	f000 f8fe 	bl	800b2bc <parse_value>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01f      	beq.n	800b106 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00e      	beq.n	800b0ea <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800b0cc:	f107 0318 	add.w	r3, r7, #24
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ff41 	bl	800af58 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800b0d6:	6a3a      	ldr	r2, [r7, #32]
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d215      	bcs.n	800b10a <cJSON_ParseWithLengthOpts+0xca>
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10f      	bne.n	800b10a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	601a      	str	r2, [r3, #0]
    }

    return item;
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fc:	e031      	b.n	800b162 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800b0fe:	bf00      	nop
 800b100:	e004      	b.n	800b10c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800b10a:	bf00      	nop

fail:
    if (item != NULL)
 800b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800b112:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b114:	f7ff f83c 	bl	800a190 <cJSON_Delete>
    }

    if (value != NULL)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d020      	beq.n	800b160 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800b126:	6a3a      	ldr	r2, [r7, #32]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d202      	bcs.n	800b134 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	e005      	b.n	800b140 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	441a      	add	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <cJSON_ParseWithLengthOpts+0x12c>)
 800b152:	461a      	mov	r2, r3
 800b154:	f107 0310 	add.w	r3, r7, #16
 800b158:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b15c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3738      	adds	r7, #56	; 0x38
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20005608 	.word	0x20005608
 800b170:	200000e0 	.word	0x200000e0

0800b174 <cJSON_ParseWithLength>:
{
    return cJSON_ParseWithOpts(value, 0, 0);
}

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
 800b17e:	2300      	movs	r3, #0
 800b180:	2200      	movs	r2, #0
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff ff5b 	bl	800b040 <cJSON_ParseWithLengthOpts>
 800b18a:	4603      	mov	r3, r0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <print>:

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08e      	sub	sp, #56	; 0x38
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800b1a4:	f107 0310 	add.w	r3, r7, #16
 800b1a8:	2224      	movs	r2, #36	; 0x24
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f003 fdfb 	bl	800eda8 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a38      	ldr	r2, [pc, #224]	; (800b298 <print+0x104>)
 800b1b8:	6812      	ldr	r2, [r2, #0]
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	4798      	blx	r3
 800b1be:	4603      	mov	r3, r0
 800b1c0:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800b1c2:	4b35      	ldr	r3, [pc, #212]	; (800b298 <print+0x104>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b1d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d040      	beq.n	800b260 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800b1de:	f107 0310 	add.w	r3, r7, #16
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f955 	bl	800b494 <print_value>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d039      	beq.n	800b264 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 800b1f0:	f107 0310 	add.w	r3, r7, #16
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff f985 	bl	800a504 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00d      	beq.n	800b21e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	6938      	ldr	r0, [r7, #16]
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	3201      	adds	r2, #1
 800b20c:	4611      	mov	r1, r2
 800b20e:	4798      	blx	r3
 800b210:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	2b00      	cmp	r3, #0
 800b216:	d027      	beq.n	800b268 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	e01e      	b.n	800b25c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	3201      	adds	r2, #1
 800b226:	4610      	mov	r0, r2
 800b228:	4798      	blx	r3
 800b22a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01c      	beq.n	800b26c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800b232:	6939      	ldr	r1, [r7, #16]
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	4293      	cmp	r3, r2
 800b23c:	bf28      	it	cs
 800b23e:	4613      	movcs	r3, r2
 800b240:	461a      	mov	r2, r3
 800b242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b244:	f003 fea7 	bl	800ef96 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b24c:	4413      	add	r3, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
    }

    return printed;
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	e016      	b.n	800b28e <print+0xfa>
        goto fail;
 800b260:	bf00      	nop
 800b262:	e004      	b.n	800b26e <print+0xda>
        goto fail;
 800b264:	bf00      	nop
 800b266:	e002      	b.n	800b26e <print+0xda>
            goto fail;
 800b268:	bf00      	nop
 800b26a:	e000      	b.n	800b26e <print+0xda>
            goto fail;
 800b26c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4610      	mov	r0, r2
 800b27c:	4798      	blx	r3
    }

    if (printed != NULL)
 800b27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <print+0xf8>
    {
        hooks->deallocate(printed);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b28a:	4798      	blx	r3
    }

    return NULL;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3738      	adds	r7, #56	; 0x38
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	08013478 	.word	0x08013478

0800b29c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800b2a4:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <cJSON_Print+0x1c>)
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff ff73 	bl	800b194 <print>
 800b2ae:	4603      	mov	r3, r0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	200000e0 	.word	0x200000e0

0800b2bc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <parse_value+0x18>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <parse_value+0x1c>
    {
        return false; /* no input */
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e0d2      	b.n	800b47e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01d      	beq.n	800b31a <parse_value+0x5e>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d816      	bhi.n	800b31a <parse_value+0x5e>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	4963      	ldr	r1, [pc, #396]	; (800b488 <parse_value+0x1cc>)
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f003 fd5c 	bl	800edb8 <strncmp>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d109      	bne.n	800b31a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2204      	movs	r2, #4
 800b30a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	1d1a      	adds	r2, r3, #4
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	609a      	str	r2, [r3, #8]
        return true;
 800b316:	2301      	movs	r3, #1
 800b318:	e0b1      	b.n	800b47e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01d      	beq.n	800b35c <parse_value+0xa0>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	1d5a      	adds	r2, r3, #5
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d816      	bhi.n	800b35c <parse_value+0xa0>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	4413      	add	r3, r2
 800b338:	2205      	movs	r2, #5
 800b33a:	4954      	ldr	r1, [pc, #336]	; (800b48c <parse_value+0x1d0>)
 800b33c:	4618      	mov	r0, r3
 800b33e:	f003 fd3b 	bl	800edb8 <strncmp>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	1d5a      	adds	r2, r3, #5
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	609a      	str	r2, [r3, #8]
        return true;
 800b358:	2301      	movs	r3, #1
 800b35a:	e090      	b.n	800b47e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d020      	beq.n	800b3a4 <parse_value+0xe8>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	1d1a      	adds	r2, r3, #4
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d819      	bhi.n	800b3a4 <parse_value+0xe8>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	4413      	add	r3, r2
 800b37a:	2204      	movs	r2, #4
 800b37c:	4944      	ldr	r1, [pc, #272]	; (800b490 <parse_value+0x1d4>)
 800b37e:	4618      	mov	r0, r3
 800b380:	f003 fd1a 	bl	800edb8 <strncmp>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10c      	bne.n	800b3a4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2202      	movs	r2, #2
 800b38e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	609a      	str	r2, [r3, #8]
        return true;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e06c      	b.n	800b47e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d013      	beq.n	800b3d2 <parse_value+0x116>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d20d      	bcs.n	800b3d2 <parse_value+0x116>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	4413      	add	r3, r2
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b22      	cmp	r3, #34	; 0x22
 800b3c4:	d105      	bne.n	800b3d2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff fb3f 	bl	800aa4c <parse_string>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	e055      	b.n	800b47e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d023      	beq.n	800b420 <parse_value+0x164>
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	689a      	ldr	r2, [r3, #8]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d21d      	bcs.n	800b420 <parse_value+0x164>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b2d      	cmp	r3, #45	; 0x2d
 800b3f2:	d00f      	beq.n	800b414 <parse_value+0x158>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b2f      	cmp	r3, #47	; 0x2f
 800b402:	d90d      	bls.n	800b420 <parse_value+0x164>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	4413      	add	r3, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b39      	cmp	r3, #57	; 0x39
 800b412:	d805      	bhi.n	800b420 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fe ff0e 	bl	800a238 <parse_number>
 800b41c:	4603      	mov	r3, r0
 800b41e:	e02e      	b.n	800b47e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d013      	beq.n	800b44e <parse_value+0x192>
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d20d      	bcs.n	800b44e <parse_value+0x192>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	4413      	add	r3, r2
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b5b      	cmp	r3, #91	; 0x5b
 800b440:	d105      	bne.n	800b44e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f909 	bl	800b65c <parse_array>
 800b44a:	4603      	mov	r3, r0
 800b44c:	e017      	b.n	800b47e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d013      	beq.n	800b47c <parse_value+0x1c0>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d20d      	bcs.n	800b47c <parse_value+0x1c0>
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	4413      	add	r3, r2
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b7b      	cmp	r3, #123	; 0x7b
 800b46e:	d105      	bne.n	800b47c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa3c 	bl	800b8f0 <parse_object>
 800b478:	4603      	mov	r3, r0
 800b47a:	e000      	b.n	800b47e <parse_value+0x1c2>
    }

    return false;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	08013374 	.word	0x08013374
 800b48c:	080133a4 	.word	0x080133a4
 800b490:	080133ac 	.word	0x080133ac

0800b494 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <print_value+0x1a>
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <print_value+0x1e>
    {
        return false;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e0c9      	b.n	800b646 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b80      	cmp	r3, #128	; 0x80
 800b4ba:	f000 808e 	beq.w	800b5da <print_value+0x146>
 800b4be:	2b80      	cmp	r3, #128	; 0x80
 800b4c0:	f300 80c0 	bgt.w	800b644 <print_value+0x1b0>
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	dc49      	bgt.n	800b55c <print_value+0xc8>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f340 80bb 	ble.w	800b644 <print_value+0x1b0>
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	2b1f      	cmp	r3, #31
 800b4d2:	f200 80b7 	bhi.w	800b644 <print_value+0x1b0>
 800b4d6:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <print_value+0x48>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b587 	.word	0x0800b587
 800b4e0:	0800b5ab 	.word	0x0800b5ab
 800b4e4:	0800b645 	.word	0x0800b645
 800b4e8:	0800b563 	.word	0x0800b563
 800b4ec:	0800b645 	.word	0x0800b645
 800b4f0:	0800b645 	.word	0x0800b645
 800b4f4:	0800b645 	.word	0x0800b645
 800b4f8:	0800b5cf 	.word	0x0800b5cf
 800b4fc:	0800b645 	.word	0x0800b645
 800b500:	0800b645 	.word	0x0800b645
 800b504:	0800b645 	.word	0x0800b645
 800b508:	0800b645 	.word	0x0800b645
 800b50c:	0800b645 	.word	0x0800b645
 800b510:	0800b645 	.word	0x0800b645
 800b514:	0800b645 	.word	0x0800b645
 800b518:	0800b621 	.word	0x0800b621
 800b51c:	0800b645 	.word	0x0800b645
 800b520:	0800b645 	.word	0x0800b645
 800b524:	0800b645 	.word	0x0800b645
 800b528:	0800b645 	.word	0x0800b645
 800b52c:	0800b645 	.word	0x0800b645
 800b530:	0800b645 	.word	0x0800b645
 800b534:	0800b645 	.word	0x0800b645
 800b538:	0800b645 	.word	0x0800b645
 800b53c:	0800b645 	.word	0x0800b645
 800b540:	0800b645 	.word	0x0800b645
 800b544:	0800b645 	.word	0x0800b645
 800b548:	0800b645 	.word	0x0800b645
 800b54c:	0800b645 	.word	0x0800b645
 800b550:	0800b645 	.word	0x0800b645
 800b554:	0800b645 	.word	0x0800b645
 800b558:	0800b62d 	.word	0x0800b62d
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d06b      	beq.n	800b638 <print_value+0x1a4>
 800b560:	e070      	b.n	800b644 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800b562:	2105      	movs	r1, #5
 800b564:	6838      	ldr	r0, [r7, #0]
 800b566:	f7fe ff33 	bl	800a3d0 <ensure>
 800b56a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <print_value+0xe2>
            {
                return false;
 800b572:	2300      	movs	r3, #0
 800b574:	e067      	b.n	800b646 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4a35      	ldr	r2, [pc, #212]	; (800b650 <print_value+0x1bc>)
 800b57a:	6810      	ldr	r0, [r2, #0]
 800b57c:	6018      	str	r0, [r3, #0]
 800b57e:	7912      	ldrb	r2, [r2, #4]
 800b580:	711a      	strb	r2, [r3, #4]
            return true;
 800b582:	2301      	movs	r3, #1
 800b584:	e05f      	b.n	800b646 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800b586:	2106      	movs	r1, #6
 800b588:	6838      	ldr	r0, [r7, #0]
 800b58a:	f7fe ff21 	bl	800a3d0 <ensure>
 800b58e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <print_value+0x106>
            {
                return false;
 800b596:	2300      	movs	r3, #0
 800b598:	e055      	b.n	800b646 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <print_value+0x1c0>)
 800b59e:	6810      	ldr	r0, [r2, #0]
 800b5a0:	6018      	str	r0, [r3, #0]
 800b5a2:	8892      	ldrh	r2, [r2, #4]
 800b5a4:	809a      	strh	r2, [r3, #4]
            return true;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e04d      	b.n	800b646 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800b5aa:	2105      	movs	r1, #5
 800b5ac:	6838      	ldr	r0, [r7, #0]
 800b5ae:	f7fe ff0f 	bl	800a3d0 <ensure>
 800b5b2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <print_value+0x12a>
            {
                return false;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e043      	b.n	800b646 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4a25      	ldr	r2, [pc, #148]	; (800b658 <print_value+0x1c4>)
 800b5c2:	6810      	ldr	r0, [r2, #0]
 800b5c4:	6018      	str	r0, [r3, #0]
 800b5c6:	7912      	ldrb	r2, [r2, #4]
 800b5c8:	711a      	strb	r2, [r3, #4]
            return true;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e03b      	b.n	800b646 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff f801 	bl	800a5d8 <print_number>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	e035      	b.n	800b646 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <print_value+0x156>
            {
                return false;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e02d      	b.n	800b646 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f4 fe56 	bl	80002a0 <strlen>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f7fe fee7 	bl	800a3d0 <ensure>
 800b602:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <print_value+0x17a>
            {
                return false;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e01b      	b.n	800b646 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	4619      	mov	r1, r3
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f003 fcbd 	bl	800ef96 <memcpy>
            return true;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e012      	b.n	800b646 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fc88 	bl	800af38 <print_string>
 800b628:	4603      	mov	r3, r0
 800b62a:	e00c      	b.n	800b646 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f8d8 	bl	800b7e4 <print_array>
 800b634:	4603      	mov	r3, r0
 800b636:	e006      	b.n	800b646 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa57 	bl	800baee <print_object>
 800b640:	4603      	mov	r3, r0
 800b642:	e000      	b.n	800b646 <print_value+0x1b2>

        default:
            return false;
 800b644:	2300      	movs	r3, #0
    }
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08013374 	.word	0x08013374
 800b654:	080133a4 	.word	0x080133a4
 800b658:	080133ac 	.word	0x080133ac

0800b65c <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b676:	d301      	bcc.n	800b67c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800b678:	2300      	movs	r3, #0
 800b67a:	e0af      	b.n	800b7dc <parse_array+0x180>
    }
    input_buffer->depth++;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	4413      	add	r3, r2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b5b      	cmp	r3, #91	; 0x5b
 800b694:	f040 8094 	bne.w	800b7c0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b6a2:	6838      	ldr	r0, [r7, #0]
 800b6a4:	f7ff fc58 	bl	800af58 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00d      	beq.n	800b6ca <parse_array+0x6e>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d207      	bcs.n	800b6ca <parse_array+0x6e>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b5d      	cmp	r3, #93	; 0x5d
 800b6c8:	d061      	beq.n	800b78e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <parse_array+0x80>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d305      	bcc.n	800b6e8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	609a      	str	r2, [r3, #8]
        goto fail;
 800b6e6:	e072      	b.n	800b7ce <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	1e5a      	subs	r2, r3, #1
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe fd34 	bl	800a164 <cJSON_New_Item>
 800b6fc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d05f      	beq.n	800b7c4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d104      	bne.n	800b714 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	e007      	b.n	800b724 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b72e:	6838      	ldr	r0, [r7, #0]
 800b730:	f7ff fc12 	bl	800af58 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f7ff fdc0 	bl	800b2bc <parse_value>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d042      	beq.n	800b7c8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b742:	6838      	ldr	r0, [r7, #0]
 800b744:	f7ff fc08 	bl	800af58 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00d      	beq.n	800b76a <parse_array+0x10e>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d207      	bcs.n	800b76a <parse_array+0x10e>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	4413      	add	r3, r2
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b2c      	cmp	r3, #44	; 0x2c
 800b768:	d0c3      	beq.n	800b6f2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d02d      	beq.n	800b7cc <parse_array+0x170>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d227      	bcs.n	800b7cc <parse_array+0x170>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	4413      	add	r3, r2
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b5d      	cmp	r3, #93	; 0x5d
 800b78a:	d11f      	bne.n	800b7cc <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800b78c:	e000      	b.n	800b790 <parse_array+0x134>
        goto success;
 800b78e:	bf00      	nop
    input_buffer->depth--;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	1e5a      	subs	r2, r3, #1
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <parse_array+0x14a>
        head->prev = current_item;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	60da      	str	r2, [r3, #12]
    item->child = head;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	609a      	str	r2, [r3, #8]

    return true;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e00d      	b.n	800b7dc <parse_array+0x180>
        goto fail;
 800b7c0:	bf00      	nop
 800b7c2:	e004      	b.n	800b7ce <parse_array+0x172>
            goto fail; /* allocation failure */
 800b7c4:	bf00      	nop
 800b7c6:	e002      	b.n	800b7ce <parse_array+0x172>
            goto fail; /* failed to parse value */
 800b7c8:	bf00      	nop
 800b7ca:	e000      	b.n	800b7ce <parse_array+0x172>
        goto fail; /* expected end of array */
 800b7cc:	bf00      	nop

fail:
    if (head != NULL)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800b7d4:	6978      	ldr	r0, [r7, #20]
 800b7d6:	f7fe fcdb 	bl	800a190 <cJSON_Delete>
    }

    return false;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <print_array+0x22>
    {
        return false;
 800b802:	2300      	movs	r3, #0
 800b804:	e070      	b.n	800b8e8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800b806:	2101      	movs	r1, #1
 800b808:	6838      	ldr	r0, [r7, #0]
 800b80a:	f7fe fde1 	bl	800a3d0 <ensure>
 800b80e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <print_array+0x36>
    {
        return false;
 800b816:	2300      	movs	r3, #0
 800b818:	e066      	b.n	800b8e8 <print_array+0x104>
    }

    *output_pointer = '[';
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	225b      	movs	r2, #91	; 0x5b
 800b81e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800b834:	e03d      	b.n	800b8b2 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6938      	ldr	r0, [r7, #16]
 800b83a:	f7ff fe2b 	bl	800b494 <print_value>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <print_array+0x64>
        {
            return false;
 800b844:	2300      	movs	r3, #0
 800b846:	e04f      	b.n	800b8e8 <print_array+0x104>
        }
        update_offset(output_buffer);
 800b848:	6838      	ldr	r0, [r7, #0]
 800b84a:	f7fe fe5b 	bl	800a504 <update_offset>
        if (current_element->next)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d02a      	beq.n	800b8ac <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <print_array+0x7e>
 800b85e:	2302      	movs	r3, #2
 800b860:	e000      	b.n	800b864 <print_array+0x80>
 800b862:	2301      	movs	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3301      	adds	r3, #1
 800b86a:	4619      	mov	r1, r3
 800b86c:	6838      	ldr	r0, [r7, #0]
 800b86e:	f7fe fdaf 	bl	800a3d0 <ensure>
 800b872:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <print_array+0x9a>
            {
                return false;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e034      	b.n	800b8e8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	617a      	str	r2, [r7, #20]
 800b884:	222c      	movs	r2, #44	; 0x2c
 800b886:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	617a      	str	r2, [r7, #20]
 800b896:	2220      	movs	r2, #32
 800b898:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1be      	bne.n	800b836 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	6838      	ldr	r0, [r7, #0]
 800b8bc:	f7fe fd88 	bl	800a3d0 <ensure>
 800b8c0:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <print_array+0xe8>
    {
        return false;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e00d      	b.n	800b8e8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	617a      	str	r2, [r7, #20]
 800b8d2:	225d      	movs	r2, #93	; 0x5d
 800b8d4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	1e5a      	subs	r2, r3, #1
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	60da      	str	r2, [r3, #12]

    return true;
 800b8e6:	2301      	movs	r3, #1
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b90a:	d301      	bcc.n	800b910 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800b90c:	2300      	movs	r3, #0
 800b90e:	e0ea      	b.n	800bae6 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 80d0 	beq.w	800bac2 <parse_object+0x1d2>
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	f080 80c9 	bcs.w	800bac2 <parse_object+0x1d2>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4413      	add	r3, r2
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b7b      	cmp	r3, #123	; 0x7b
 800b93e:	f040 80c0 	bne.w	800bac2 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b94c:	6838      	ldr	r0, [r7, #0]
 800b94e:	f7ff fb03 	bl	800af58 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00e      	beq.n	800b976 <parse_object+0x86>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d208      	bcs.n	800b976 <parse_object+0x86>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b7d      	cmp	r3, #125	; 0x7d
 800b972:	f000 808d 	beq.w	800ba90 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <parse_object+0x98>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	689a      	ldr	r2, [r3, #8]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	429a      	cmp	r2, r3
 800b986:	d305      	bcc.n	800b994 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	609a      	str	r2, [r3, #8]
        goto fail;
 800b992:	e0a1      	b.n	800bad8 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fbde 	bl	800a164 <cJSON_New_Item>
 800b9a8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 808a 	beq.w	800bac6 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	613b      	str	r3, [r7, #16]
 800b9c0:	e007      	b.n	800b9d2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b9dc:	6838      	ldr	r0, [r7, #0]
 800b9de:	f7ff fabb 	bl	800af58 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6938      	ldr	r0, [r7, #16]
 800b9e6:	f7ff f831 	bl	800aa4c <parse_string>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d06c      	beq.n	800baca <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800b9f0:	6838      	ldr	r0, [r7, #0]
 800b9f2:	f7ff fab1 	bl	800af58 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	691a      	ldr	r2, [r3, #16]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2200      	movs	r2, #0
 800ba02:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d061      	beq.n	800bace <parse_object+0x1de>
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d25b      	bcs.n	800bace <parse_object+0x1de>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	4413      	add	r3, r2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b3a      	cmp	r3, #58	; 0x3a
 800ba24:	d153      	bne.n	800bace <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ba30:	6838      	ldr	r0, [r7, #0]
 800ba32:	f7ff fa91 	bl	800af58 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6938      	ldr	r0, [r7, #16]
 800ba3a:	f7ff fc3f 	bl	800b2bc <parse_value>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d046      	beq.n	800bad2 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ba44:	6838      	ldr	r0, [r7, #0]
 800ba46:	f7ff fa87 	bl	800af58 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00d      	beq.n	800ba6c <parse_object+0x17c>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d207      	bcs.n	800ba6c <parse_object+0x17c>
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b2c      	cmp	r3, #44	; 0x2c
 800ba6a:	d098      	beq.n	800b99e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d031      	beq.n	800bad6 <parse_object+0x1e6>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d22b      	bcs.n	800bad6 <parse_object+0x1e6>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	4413      	add	r3, r2
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	2b7d      	cmp	r3, #125	; 0x7d
 800ba8c:	d123      	bne.n	800bad6 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800ba8e:	e000      	b.n	800ba92 <parse_object+0x1a2>
        goto success; /* empty object */
 800ba90:	bf00      	nop
    input_buffer->depth--;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	1e5a      	subs	r2, r3, #1
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <parse_object+0x1b8>
        head->prev = current_item;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2240      	movs	r2, #64	; 0x40
 800baac:	60da      	str	r2, [r3, #12]
    item->child = head;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	609a      	str	r2, [r3, #8]
    return true;
 800babe:	2301      	movs	r3, #1
 800bac0:	e011      	b.n	800bae6 <parse_object+0x1f6>
        goto fail; /* not an object */
 800bac2:	bf00      	nop
 800bac4:	e008      	b.n	800bad8 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800bac6:	bf00      	nop
 800bac8:	e006      	b.n	800bad8 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800baca:	bf00      	nop
 800bacc:	e004      	b.n	800bad8 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800bace:	bf00      	nop
 800bad0:	e002      	b.n	800bad8 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800bad6:	bf00      	nop

fail:
    if (head != NULL)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f7fe fb56 	bl	800a190 <cJSON_Delete>
    }

    return false;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b088      	sub	sp, #32
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800baf8:	2300      	movs	r3, #0
 800bafa:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <print_object+0x22>
    {
        return false;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e108      	b.n	800bd22 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <print_object+0x2e>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e000      	b.n	800bb1e <print_object+0x30>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3301      	adds	r3, #1
 800bb24:	4619      	mov	r1, r3
 800bb26:	6838      	ldr	r0, [r7, #0]
 800bb28:	f7fe fc52 	bl	800a3d0 <ensure>
 800bb2c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <print_object+0x4a>
    {
        return false;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e0f4      	b.n	800bd22 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	61fa      	str	r2, [r7, #28]
 800bb3e:	227b      	movs	r2, #123	; 0x7b
 800bb40:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d004      	beq.n	800bb5e <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	61fa      	str	r2, [r7, #28]
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	689a      	ldr	r2, [r3, #8]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	441a      	add	r2, r3
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	609a      	str	r2, [r3, #8]

    while (current_item)
 800bb6a:	e0a0      	b.n	800bcae <print_object+0x1c0>
    {
        if (output_buffer->format)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d022      	beq.n	800bbba <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6838      	ldr	r0, [r7, #0]
 800bb7c:	f7fe fc28 	bl	800a3d0 <ensure>
 800bb80:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <print_object+0x9e>
            {
                return false;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e0ca      	b.n	800bd22 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e007      	b.n	800bba2 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	61fa      	str	r2, [r7, #28]
 800bb98:	2209      	movs	r2, #9
 800bb9a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3f2      	bcc.n	800bb92 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	441a      	add	r2, r3
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff f889 	bl	800acd8 <print_string_ptr>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <print_object+0xe2>
        {
            return false;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e0a8      	b.n	800bd22 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bbd0:	6838      	ldr	r0, [r7, #0]
 800bbd2:	f7fe fc97 	bl	800a504 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <print_object+0xf4>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	e000      	b.n	800bbe4 <print_object+0xf6>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800bbe6:	68f9      	ldr	r1, [r7, #12]
 800bbe8:	6838      	ldr	r0, [r7, #0]
 800bbea:	f7fe fbf1 	bl	800a3d0 <ensure>
 800bbee:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <print_object+0x10c>
        {
            return false;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e093      	b.n	800bd22 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	61fa      	str	r2, [r7, #28]
 800bc00:	223a      	movs	r2, #58	; 0x3a
 800bc02:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d004      	beq.n	800bc16 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	61fa      	str	r2, [r7, #28]
 800bc12:	2209      	movs	r2, #9
 800bc14:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	689a      	ldr	r2, [r3, #8]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	69b8      	ldr	r0, [r7, #24]
 800bc26:	f7ff fc35 	bl	800b494 <print_value>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <print_object+0x146>
        {
            return false;
 800bc30:	2300      	movs	r3, #0
 800bc32:	e076      	b.n	800bd22 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bc34:	6838      	ldr	r0, [r7, #0]
 800bc36:	f7fe fc65 	bl	800a504 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <print_object+0x158>
 800bc42:	2201      	movs	r2, #1
 800bc44:	e000      	b.n	800bc48 <print_object+0x15a>
 800bc46:	2200      	movs	r2, #0
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <print_object+0x166>
 800bc50:	2301      	movs	r3, #1
 800bc52:	e000      	b.n	800bc56 <print_object+0x168>
 800bc54:	2300      	movs	r3, #0
 800bc56:	4413      	add	r3, r2
 800bc58:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6838      	ldr	r0, [r7, #0]
 800bc62:	f7fe fbb5 	bl	800a3d0 <ensure>
 800bc66:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <print_object+0x184>
        {
            return false;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e057      	b.n	800bd22 <print_object+0x234>
        }
        if (current_item->next)
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	61fa      	str	r2, [r7, #28]
 800bc80:	222c      	movs	r2, #44	; 0x2c
 800bc82:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	695b      	ldr	r3, [r3, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	61fa      	str	r2, [r7, #28]
 800bc92:	220a      	movs	r2, #10
 800bc94:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	441a      	add	r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f47f af5b 	bne.w	800bb6c <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <print_object+0x1d8>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <print_object+0x1da>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6838      	ldr	r0, [r7, #0]
 800bccc:	f7fe fb80 	bl	800a3d0 <ensure>
 800bcd0:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <print_object+0x1ee>
    {
        return false;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e022      	b.n	800bd22 <print_object+0x234>
    }
    if (output_buffer->format)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d010      	beq.n	800bd06 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bce4:	2300      	movs	r3, #0
 800bce6:	613b      	str	r3, [r7, #16]
 800bce8:	e007      	b.n	800bcfa <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	61fa      	str	r2, [r7, #28]
 800bcf0:	2209      	movs	r2, #9
 800bcf2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	613b      	str	r3, [r7, #16]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d3f1      	bcc.n	800bcea <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	61fa      	str	r2, [r7, #28]
 800bd0c:	227d      	movs	r2, #125	; 0x7d
 800bd0e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	1e5a      	subs	r2, r3, #1
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	60da      	str	r2, [r3, #12]

    return true;
 800bd20:	2301      	movs	r3, #1
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b086      	sub	sp, #24
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <get_object_item+0x1c>
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <get_object_item+0x20>
    {
        return NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e033      	b.n	800bdb2 <get_object_item+0x88>
    }

    current_element = object->child;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d017      	beq.n	800bd86 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bd56:	e002      	b.n	800bd5e <get_object_item+0x34>
        {
            current_element = current_element->next;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01c      	beq.n	800bd9e <get_object_item+0x74>
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d018      	beq.n	800bd9e <get_object_item+0x74>
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	4619      	mov	r1, r3
 800bd72:	68b8      	ldr	r0, [r7, #8]
 800bd74:	f7f4 fa34 	bl	80001e0 <strcmp>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1ec      	bne.n	800bd58 <get_object_item+0x2e>
 800bd7e:	e00e      	b.n	800bd9e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <get_object_item+0x74>
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	6a1b      	ldr	r3, [r3, #32]
 800bd90:	4619      	mov	r1, r3
 800bd92:	68b8      	ldr	r0, [r7, #8]
 800bd94:	f7fe f90e 	bl	8009fb4 <case_insensitive_strcmp>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1f0      	bne.n	800bd80 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <get_object_item+0x82>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	6a1b      	ldr	r3, [r3, #32]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <get_object_item+0x86>
        return NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e000      	b.n	800bdb2 <get_object_item+0x88>
    }

    return current_element;
 800bdb0:	697b      	ldr	r3, [r7, #20]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff ffae 	bl	800bd2a <get_object_item>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	605a      	str	r2, [r3, #4]
}
 800bdee:	bf00      	nop
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800be04:	2300      	movs	r3, #0
 800be06:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d006      	beq.n	800be1c <add_item_to_array+0x22>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <add_item_to_array+0x22>
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d101      	bne.n	800be20 <add_item_to_array+0x26>
    {
        return false;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e01e      	b.n	800be5e <add_item_to_array+0x64>
    }

    child = array->child;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2200      	movs	r2, #0
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	e00d      	b.n	800be5c <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d009      	beq.n	800be5c <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff ffc2 	bl	800bdd8 <suffix_object>
            array->child->prev = item;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800be5c:	2301      	movs	r3, #1
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800be6e:	687b      	ldr	r3, [r7, #4]
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800be8e:	2300      	movs	r3, #0
 800be90:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d009      	beq.n	800beac <add_item_to_object+0x30>
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d006      	beq.n	800beac <add_item_to_object+0x30>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <add_item_to_object+0x30>
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d101      	bne.n	800beb0 <add_item_to_object+0x34>
    {
        return false;
 800beac:	2300      	movs	r3, #0
 800beae:	e036      	b.n	800bf1e <add_item_to_object+0xa2>
    }

    if (constant_key)
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800beb6:	68b8      	ldr	r0, [r7, #8]
 800beb8:	f7ff ffd5 	bl	800be66 <cast_away_const>
 800bebc:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bec6:	613b      	str	r3, [r7, #16]
 800bec8:	e00e      	b.n	800bee8 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	68b8      	ldr	r0, [r7, #8]
 800bece:	f7fe f8dd 	bl	800a08c <cJSON_strdup>
 800bed2:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <add_item_to_object+0x62>
        {
            return false;
 800beda:	2300      	movs	r3, #0
 800bedc:	e01f      	b.n	800bf1e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bee6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d109      	bne.n	800bf08 <add_item_to_object+0x8c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6a12      	ldr	r2, [r2, #32]
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
    }

    item->string = new_key;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f7ff ff6f 	bl	800bdfa <add_item_to_array>
 800bf1c:	4603      	mov	r3, r0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af02      	add	r7, sp, #8
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800bf34:	2300      	movs	r3, #0
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <cJSON_AddItemToObject+0x28>)
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	68b9      	ldr	r1, [r7, #8]
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff ff9c 	bl	800be7c <add_item_to_object>
 800bf44:	4603      	mov	r3, r0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	200000e0 	.word	0x200000e0
 800bf54:	00000000 	.word	0x00000000

0800bf58 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bf62:	481f      	ldr	r0, [pc, #124]	; (800bfe0 <cJSON_CreateNumber+0x88>)
 800bf64:	f7fe f8fe 	bl	800a164 <cJSON_New_Item>
 800bf68:	60f8      	str	r0, [r7, #12]
    if(item)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d02c      	beq.n	800bfca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2208      	movs	r2, #8
 800bf74:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf7c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800bf80:	a315      	add	r3, pc, #84	; (adr r3, 800bfd8 <cJSON_CreateNumber+0x80>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf8a:	f7f4 fdd3 	bl	8000b34 <__aeabi_dcmpge>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d004      	beq.n	800bf9e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bf9a:	615a      	str	r2, [r3, #20]
 800bf9c:	e015      	b.n	800bfca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800bf9e:	f04f 0200 	mov.w	r2, #0
 800bfa2:	4b10      	ldr	r3, [pc, #64]	; (800bfe4 <cJSON_CreateNumber+0x8c>)
 800bfa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfa8:	f7f4 fdba 	bl	8000b20 <__aeabi_dcmple>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfb8:	615a      	str	r2, [r3, #20]
 800bfba:	e006      	b.n	800bfca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800bfbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfc0:	f7f4 fde2 	bl	8000b88 <__aeabi_d2iz>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800bfca:	68fb      	ldr	r3, [r7, #12]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	ffc00000 	.word	0xffc00000
 800bfdc:	41dfffff 	.word	0x41dfffff
 800bfe0:	200000e0 	.word	0x200000e0
 800bfe4:	c1e00000 	.word	0xc1e00000

0800bfe8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bfee:	4807      	ldr	r0, [pc, #28]	; (800c00c <cJSON_CreateObject+0x24>)
 800bff0:	f7fe f8b8 	bl	800a164 <cJSON_New_Item>
 800bff4:	6078      	str	r0, [r7, #4]
    if (item)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2240      	movs	r2, #64	; 0x40
 800c000:	60da      	str	r2, [r3, #12]
    }

    return item;
 800c002:	687b      	ldr	r3, [r7, #4]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200000e0 	.word	0x200000e0

0800c010 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <cJSON_IsTrue+0x12>
    {
        return false;
 800c01e:	2300      	movs	r3, #0
 800c020:	e007      	b.n	800c032 <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	bf0c      	ite	eq
 800c02c:	2301      	moveq	r3, #1
 800c02e:	2300      	movne	r3, #0
 800c030:	b2db      	uxtb	r3, r3
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800c03e:	b480      	push	{r7}
 800c040:	b083      	sub	sp, #12
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <cJSON_IsNumber+0x12>
    {
        return false;
 800c04c:	2300      	movs	r3, #0
 800c04e:	e007      	b.n	800c060 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b08      	cmp	r3, #8
 800c058:	bf0c      	ite	eq
 800c05a:	2301      	moveq	r3, #1
 800c05c:	2300      	movne	r3, #0
 800c05e:	b2db      	uxtb	r3, r3
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <cJSON_IsObject+0x12>
    {
        return false;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e007      	b.n	800c08e <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b40      	cmp	r3, #64	; 0x40
 800c086:	bf0c      	ite	eq
 800c088:	2301      	moveq	r3, #1
 800c08a:	2300      	movne	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 800c0a4:	4b03      	ldr	r3, [pc, #12]	; (800c0b4 <cJSON_free+0x18>)
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	4798      	blx	r3
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	200000e0 	.word	0x200000e0

0800c0b8 <prv_crc_in>:
 * \param[in]       inp: Input data in byte format
 * \param[in]       len: Number of bytes to process
 * \return          Current CRC calculated value after all bytes or `0` on error input data
 */
static uint8_t
prv_crc_in(lwpkt_crc_t* crcobj, const void* inp, const size_t len) {
 800c0b8:	b480      	push	{r7}
 800c0ba:	b089      	sub	sp, #36	; 0x24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
    const uint8_t* p_data = inp;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	61fb      	str	r3, [r7, #28]

    if (crcobj == NULL || p_data == NULL || len == 0) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <prv_crc_in+0x22>
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <prv_crc_in+0x22>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <prv_crc_in+0x26>
        return 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e036      	b.n	800c14c <prv_crc_in+0x94>
    }

    for (size_t i = 0; i < len; ++i, ++p_data) {
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	e02d      	b.n	800c140 <prv_crc_in+0x88>
        uint8_t inbyte = *p_data;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800c0ea:	2308      	movs	r3, #8
 800c0ec:	75bb      	strb	r3, [r7, #22]
 800c0ee:	e01e      	b.n	800c12e <prv_crc_in+0x76>
            uint8_t mix = (uint8_t)(crcobj->crc ^ inbyte) & 0x01U;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	781a      	ldrb	r2, [r3, #0]
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	4053      	eors	r3, r2
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	757b      	strb	r3, [r7, #21]
            crcobj->crc >>= 1U;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	701a      	strb	r2, [r3, #0]
            if (mix > 0) {
 800c10c:	7d7b      	ldrb	r3, [r7, #21]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <prv_crc_in+0x6a>
                crcobj->crc ^= 0x8CU;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800c11a:	43db      	mvns	r3, r3
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	701a      	strb	r2, [r3, #0]
            }
            inbyte >>= 0x01U;
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	085b      	lsrs	r3, r3, #1
 800c126:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800c128:	7dbb      	ldrb	r3, [r7, #22]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	75bb      	strb	r3, [r7, #22]
 800c12e:	7dbb      	ldrb	r3, [r7, #22]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1dd      	bne.n	800c0f0 <prv_crc_in+0x38>
    for (size_t i = 0; i < len; ++i, ++p_data) {
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	3301      	adds	r3, #1
 800c138:	61bb      	str	r3, [r7, #24]
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	3301      	adds	r3, #1
 800c13e:	61fb      	str	r3, [r7, #28]
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	429a      	cmp	r2, r3
 800c146:	d3cd      	bcc.n	800c0e4 <prv_crc_in+0x2c>
        }
    }
    return crcobj->crc;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	781b      	ldrb	r3, [r3, #0]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3724      	adds	r7, #36	; 0x24
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <prv_crc_init>:
/**
 * \brief           Initialize CRC instance to default values
 * \param[in]       crcobj: CRC instance
 */
static void
prv_crc_init(lwpkt_crc_t* crcobj) {
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
    LWPKT_MEMSET(crcobj, 0x00, sizeof(*crcobj));
 800c160:	2201      	movs	r2, #1
 800c162:	2100      	movs	r1, #0
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f002 fe1f 	bl	800eda8 <memset>
}
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <lwpkt_init>:
 * \param[in]       tx_rb: TX LwRB instance for data write
 * \param[in]       rx_rb: RX LwRB instance for data read
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_init(lwpkt_t* pkt, lwrb_t* tx_rb, lwrb_t* rx_rb) {
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
    if (pkt == NULL) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <lwpkt_init+0x16>
        return lwpktERR;
 800c184:	2301      	movs	r3, #1
 800c186:	e01a      	b.n	800c1be <lwpkt_init+0x4c>
    }

    LWPKT_MEMSET(pkt, 0x00, sizeof(*pkt));
 800c188:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800c18c:	2100      	movs	r1, #0
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f002 fe0a 	bl	800eda8 <memset>
    LWPKT_RESET(pkt);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c19a:	220c      	movs	r2, #12
 800c19c:	2100      	movs	r1, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f002 fe02 	bl	800eda8 <memset>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    pkt->tx_rb = tx_rb;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    pkt->rx_rb = rx_rb;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    return lwpktOK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <lwpkt_read>:
 * \brief           Read raw data from RX buffer and prepare packet
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktVALID when packet valid, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_read(lwpkt_t* pkt) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    lwpktr_t res = lwpktOK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
    uint8_t b, e = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73bb      	strb	r3, [r7, #14]

    if (!LWPKT_IS_VALID(pkt)) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <lwpkt_read+0x1a>
        return lwpktERR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e139      	b.n	800c456 <lwpkt_read+0x28e>
    }

    SEND_EVT(pkt, LWPKT_EVT_PRE_READ);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 8103 	beq.w	800c3f4 <lwpkt_read+0x22c>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1f4:	2106      	movs	r1, #6
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3

    /* Process bytes from RX ringbuffer */
    /* Read byte by byte and go through state machine */
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800c1fa:	e0fb      	b.n	800c3f4 <lwpkt_read+0x22c>
        e = 1;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	73bb      	strb	r3, [r7, #14]
        switch (pkt->m.state) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c206:	2b07      	cmp	r3, #7
 800c208:	f200 80e5 	bhi.w	800c3d6 <lwpkt_read+0x20e>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <lwpkt_read+0x4c>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c235 	.word	0x0800c235
 800c218:	0800c3d7 	.word	0x0800c3d7
 800c21c:	0800c3d7 	.word	0x0800c3d7
 800c220:	0800c3d7 	.word	0x0800c3d7
 800c224:	0800c273 	.word	0x0800c273
 800c228:	0800c2e9 	.word	0x0800c2e9
 800c22c:	0800c359 	.word	0x0800c359
 800c230:	0800c3b5 	.word	0x0800c3b5
            case LWPKT_STATE_START: {
                if (b == LWPKT_START_BYTE) {
 800c234:	7b7b      	ldrb	r3, [r7, #13]
 800c236:	2baa      	cmp	r3, #170	; 0xaa
 800c238:	f040 80dc 	bne.w	800c3f4 <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt); /* Reset instance and make it ready for receiving */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c242:	220c      	movs	r2, #12
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f002 fdae 	bl	800eda8 <memset>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    INIT_CRC(&pkt->m.crc);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f203 1311 	addw	r3, r3, #273	; 0x111
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff ff7c 	bl	800c158 <prv_crc_init>

                    LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_ADDR ? LWPKT_STATE_FROM
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2204      	movs	r2, #4
 800c264:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                                                            : (LWPKT_CFG_USE_CMD ? LWPKT_STATE_CMD : LWPKT_STATE_LEN));
                }
                break;
 800c270:	e0c0      	b.n	800c3f4 <lwpkt_read+0x22c>
                LWPKT_SET_STATE(pkt, LWPKT_STATE_LEN);
                break;
            }
#endif /* LWPKT_CFG_USE_CMD */
            case LWPKT_STATE_LEN: {
                pkt->m.len |= (b & 0x7FU) << ((size_t)7U * (size_t)pkt->m.index++);
 800c272:	7b7b      	ldrb	r3, [r7, #13]
 800c274:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c27e:	1c58      	adds	r0, r3, #1
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
 800c286:	461a      	mov	r2, r3
 800c288:	00d2      	lsls	r2, r2, #3
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	fa01 f203 	lsl.w	r2, r1, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c296:	431a      	orrs	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f203 1311 	addw	r3, r3, #273	; 0x111
 800c2a4:	f107 010d 	add.w	r1, r7, #13
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff ff04 	bl	800c0b8 <prv_crc_in>

                /* Last length bytes has MSB bit set to 0 */
                if ((b & 0x80U) == 0) {
 800c2b0:	7b7b      	ldrb	r3, [r7, #13]
 800c2b2:	b25b      	sxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f2c0 809d 	blt.w	800c3f4 <lwpkt_read+0x22c>
                    if (pkt->m.len == 0) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <lwpkt_read+0x10e>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2206      	movs	r2, #6
 800c2c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800c2d4:	e08e      	b.n	800c3f4 <lwpkt_read+0x22c>
                    } else {
                        LWPKT_SET_STATE(pkt, LWPKT_STATE_DATA);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2205      	movs	r2, #5
 800c2da:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                    }
                }
                break;
 800c2e6:	e085      	b.n	800c3f4 <lwpkt_read+0x22c>
            }
            case LWPKT_STATE_DATA: {
                if (pkt->m.index < sizeof(pkt->data)) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c2ee:	2bff      	cmp	r3, #255	; 0xff
 800c2f0:	d823      	bhi.n	800c33a <lwpkt_read+0x172>
                    pkt->data[pkt->m.index++] = b;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c2f8:	1c59      	adds	r1, r3, #1
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 800c300:	7b79      	ldrb	r1, [r7, #13]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	54d1      	strb	r1, [r2, r3]
                    ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f203 1311 	addw	r3, r3, #273	; 0x111
 800c30c:	f107 010d 	add.w	r1, r7, #13
 800c310:	2201      	movs	r2, #1
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fed0 	bl	800c0b8 <prv_crc_in>
                    if (pkt->m.index == pkt->m.len) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c324:	429a      	cmp	r2, r3
 800c326:	d165      	bne.n	800c3f4 <lwpkt_read+0x22c>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2206      	movs	r2, #6
 800c32c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800c338:	e05c      	b.n	800c3f4 <lwpkt_read+0x22c>
                    }
                } else {
                    LWPKT_RESET(pkt);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c340:	220c      	movs	r2, #12
 800c342:	2100      	movs	r1, #0
 800c344:	4618      	mov	r0, r3
 800c346:	f002 fd2f 	bl	800eda8 <memset>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRMEM;
 800c352:	2307      	movs	r3, #7
 800c354:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c356:	e064      	b.n	800c422 <lwpkt_read+0x25a>
                }
                break;
            }
#if LWPKT_CFG_USE_CRC
            case LWPKT_STATE_CRC: {
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f203 1311 	addw	r3, r3, #273	; 0x111
 800c35e:	f107 010d 	add.w	r1, r7, #13
 800c362:	2201      	movs	r2, #1
 800c364:	4618      	mov	r0, r3
 800c366:	f7ff fea7 	bl	800c0b8 <prv_crc_in>
                if (pkt->m.crc.crc == 0) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800c370:	2b00      	cmp	r3, #0
 800c372:	d110      	bne.n	800c396 <lwpkt_read+0x1ce>
                    LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2207      	movs	r2, #7
 800c378:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                } else {
                    LWPKT_RESET(pkt);
                    res = lwpktERRCRC;
                    goto retpre;
                }
                LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2207      	movs	r2, #7
 800c388:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                break;
 800c394:	e02e      	b.n	800c3f4 <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c39c:	220c      	movs	r2, #12
 800c39e:	2100      	movs	r1, #0
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f002 fd01 	bl	800eda8 <memset>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRCRC;
 800c3ae:	2304      	movs	r3, #4
 800c3b0:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c3b2:	e036      	b.n	800c422 <lwpkt_read+0x25a>
            }
#endif /* LWPKT_CFG_USE_CRC */
            case LWPKT_STATE_STOP: {
                LWPKT_SET_STATE(pkt, LWPKT_STATE_START); /* Reset packet state */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if (b == LWPKT_STOP_BYTE) {
 800c3c4:	7b7b      	ldrb	r3, [r7, #13]
 800c3c6:	2b55      	cmp	r3, #85	; 0x55
 800c3c8:	d102      	bne.n	800c3d0 <lwpkt_read+0x208>
                    res = lwpktVALID; /* Packet fully valid, take data from it */
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c3ce:	e028      	b.n	800c422 <lwpkt_read+0x25a>
                } else {
                    res = lwpktERRSTOP; /* Packet is missing STOP byte! */
 800c3d0:	2305      	movs	r3, #5
 800c3d2:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c3d4:	e025      	b.n	800c422 <lwpkt_read+0x25a>
                }
            }
            default: {
                LWPKT_RESET(pkt);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c3dc:	220c      	movs	r2, #12
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f002 fce1 	bl	800eda8 <memset>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                res = lwpktERR; /* Hard error */
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	73fb      	strb	r3, [r7, #15]
                goto retpre;
 800c3f2:	e016      	b.n	800c422 <lwpkt_read+0x25a>
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c3fa:	f107 010d 	add.w	r1, r7, #13
 800c3fe:	2201      	movs	r2, #1
 800c400:	4618      	mov	r0, r3
 800c402:	f000 fa50 	bl	800c8a6 <lwrb_read>
 800c406:	4603      	mov	r3, r0
 800c408:	2b01      	cmp	r3, #1
 800c40a:	f43f aef7 	beq.w	800c1fc <lwpkt_read+0x34>
            }
        }
    }
    if (pkt->m.state == LWPKT_STATE_START) {
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <lwpkt_read+0x256>
        res = lwpktWAITDATA;
 800c418:	2306      	movs	r3, #6
 800c41a:	73fb      	strb	r3, [r7, #15]
 800c41c:	e001      	b.n	800c422 <lwpkt_read+0x25a>
    } else {
        res = lwpktINPROG;
 800c41e:	2302      	movs	r3, #2
 800c420:	73fb      	strb	r3, [r7, #15]
    }
retpre:
    SEND_EVT(pkt, LWPKT_EVT_POST_READ);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d005      	beq.n	800c438 <lwpkt_read+0x270>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c432:	2107      	movs	r1, #7
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	4798      	blx	r3
    if (e) {
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <lwpkt_read+0x28c>
        SEND_EVT(pkt, LWPKT_EVT_READ); /* Send read event */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <lwpkt_read+0x28c>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c44e:	2102      	movs	r1, #2
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	4798      	blx	r3
    }
    return res;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop

0800c460 <lwpkt_process>:
 * \param[in]       pkt: Packet instance
 * \param[in]       time: Current time in units of milliseconds
 * \return          \ref lwpktOK if processing OK, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_process(lwpkt_t* pkt, uint32_t time) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
    lwpktr_t pktres;

    if (pkt == NULL) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <lwpkt_process+0x14>
        return lwpktERR;
 800c470:	2301      	movs	r3, #1
 800c472:	e039      	b.n	800c4e8 <lwpkt_process+0x88>
    }

    /* Packet protocol data read */
    pktres = lwpkt_read(pkt);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff fea7 	bl	800c1c8 <lwpkt_read>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]
    if (pktres == lwpktVALID) {
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d10f      	bne.n	800c4a4 <lwpkt_process+0x44>
        pkt->last_rx_time = time;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        SEND_EVT(pkt, LWPKT_EVT_PKT);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d027      	beq.n	800c4e6 <lwpkt_process+0x86>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c49c:	2100      	movs	r1, #0
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4798      	blx	r3
 800c4a2:	e020      	b.n	800c4e6 <lwpkt_process+0x86>
    } else if (pktres == lwpktINPROG) {
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d119      	bne.n	800c4de <lwpkt_process+0x7e>
        if ((time - pkt->last_rx_time) >= LWPKT_CFG_PROCESS_INPROG_TIMEOUT) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	2b63      	cmp	r3, #99	; 0x63
 800c4b6:	d916      	bls.n	800c4e6 <lwpkt_process+0x86>
            lwpkt_reset(pkt);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f8d5 	bl	800c668 <lwpkt_reset>
            pkt->last_rx_time = time;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            SEND_EVT(pkt, LWPKT_EVT_TIMEOUT);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00a      	beq.n	800c4e6 <lwpkt_process+0x86>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	4798      	blx	r3
 800c4dc:	e003      	b.n	800c4e6 <lwpkt_process+0x86>
        }
    } else {
        pkt->last_rx_time = time;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    }
    return lwpktOK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <lwpkt_write>:
            lwpkt_addr_t to,
#endif /* LWPKT_CFG_USE_ADDR || __DOXYGEN__ */
#if LWPKT_CFG_USE_CMD || __DOXYGEN__
            uint8_t cmd,
#endif /* LWPKT_CFG_USE_CMD || __DOXYGEN__ */
            const void* data, size_t len) {
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
    lwpktr_t res = lwpktOK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lwpkt_crc_t crc;
#endif /* LWPKT_CFG_USE_CRC */
#if LWPKT_CFG_ADDR_EXTENDED
    lwpkt_addr_t addr;
#endif /* LWPKT_CFG_ADDR_EXTENDED */
    size_t org_len = len;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	61bb      	str	r3, [r7, #24]
    uint8_t b;

    SEND_EVT(pkt, LWPKT_EVT_PRE_WRITE);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d005      	beq.n	800c51c <lwpkt_write+0x2c>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c516:	2104      	movs	r1, #4
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	4798      	blx	r3

    if (!LWPKT_IS_VALID(pkt)) {
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d103      	bne.n	800c52a <lwpkt_write+0x3a>
        res = lwpktERR;
 800c522:	2301      	movs	r3, #1
 800c524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto fast_return;
 800c528:	e07e      	b.n	800c628 <lwpkt_write+0x138>
    } else {
        /* Check for required memory for packet */
        size_t min_mem = 2U, tmp_len = 0;
 800c52a:	2302      	movs	r3, #2
 800c52c:	623b      	str	r3, [r7, #32]
 800c52e:	2300      	movs	r3, #0
 800c530:	61fb      	str	r3, [r7, #28]
        /* CMD part */
        ++min_mem;
#endif /* LWPKT_CFG_USE_CMD */

        /* Data length */
        tmp_len = len;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	61fb      	str	r3, [r7, #28]
        do {
            ++min_mem;
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	3301      	adds	r3, #1
 800c53a:	623b      	str	r3, [r7, #32]
            tmp_len >>= 7U;
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	09db      	lsrs	r3, r3, #7
 800c540:	61fb      	str	r3, [r7, #28]
        } while (tmp_len > 0);
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f6      	bne.n	800c536 <lwpkt_write+0x46>

        /* Data length */
        min_mem += len;
 800c548:	6a3a      	ldr	r2, [r7, #32]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	623b      	str	r3, [r7, #32]

#if LWPKT_CFG_USE_CRC
        /* CRC part */
        ++min_mem;
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	3301      	adds	r3, #1
 800c554:	623b      	str	r3, [r7, #32]
#endif /* LWPKT_CFG_USE_CRC */

        /* Verify enough memory */
        if (lwrb_get_free(pkt->tx_rb) < min_mem) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fa4d 	bl	800c9fc <lwrb_get_free>
 800c562:	4602      	mov	r2, r0
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	4293      	cmp	r3, r2
 800c568:	d903      	bls.n	800c572 <lwpkt_write+0x82>
            res = lwpktERRMEM;
 800c56a:	2307      	movs	r3, #7
 800c56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto fast_return;
 800c570:	e05a      	b.n	800c628 <lwpkt_write+0x138>
        }
    }

#if LWPKT_CFG_USE_CRC
    prv_crc_init(&crc);
 800c572:	f107 0314 	add.w	r3, r7, #20
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fdee 	bl	800c158 <prv_crc_init>
#endif /* LWPKT_CFG_USE_CRC */

    /* Start byte */
    b = LWPKT_START_BYTE;
 800c57c:	23aa      	movs	r3, #170	; 0xaa
 800c57e:	74fb      	strb	r3, [r7, #19]
    lwrb_write(pkt->tx_rb, &b, 1U);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c586:	f107 0113 	add.w	r1, r7, #19
 800c58a:	2201      	movs	r2, #1
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 f8df 	bl	800c750 <lwrb_write>
    WRITE_WITH_CRC(&crc, pkt->tx_rb, &cmd, 1);
#endif /* LWPKT_CFG_USE_CMD */

    /* Length bytes */
    do {
        b = (len & 0x7FU) | (len > 0x7FU ? 0x80U : 0);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	2a7f      	cmp	r2, #127	; 0x7f
 800c5a0:	d901      	bls.n	800c5a6 <lwpkt_write+0xb6>
 800c5a2:	2280      	movs	r2, #128	; 0x80
 800c5a4:	e000      	b.n	800c5a8 <lwpkt_write+0xb8>
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	74fb      	strb	r3, [r7, #19]
        WRITE_WITH_CRC(&crc, pkt->tx_rb, &b, 1);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c5b4:	f107 0113 	add.w	r1, r7, #19
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f8c8 	bl	800c750 <lwrb_write>
 800c5c0:	f107 0113 	add.w	r1, r7, #19
 800c5c4:	f107 0314 	add.w	r3, r7, #20
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7ff fd74 	bl	800c0b8 <prv_crc_in>
        len >>= 7U;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	09db      	lsrs	r3, r3, #7
 800c5d4:	607b      	str	r3, [r7, #4]
    } while (len > 0);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1da      	bne.n	800c592 <lwpkt_write+0xa2>

    /* Data bytes */
    if (org_len > 0) {
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00e      	beq.n	800c600 <lwpkt_write+0x110>
        WRITE_WITH_CRC(&crc, pkt->tx_rb, data, org_len);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f8af 	bl	800c750 <lwrb_write>
 800c5f2:	f107 0314 	add.w	r3, r7, #20
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff fd5c 	bl	800c0b8 <prv_crc_in>
    }

#if LWPKT_CFG_USE_CRC
    /* CRC byte */
    lwrb_write(pkt->tx_rb, &crc.crc, 1);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c606:	f107 0114 	add.w	r1, r7, #20
 800c60a:	2201      	movs	r2, #1
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 f89f 	bl	800c750 <lwrb_write>
#endif /* LWPKT_CFG_USE_CRC */

    /* Stop byte */
    b = LWPKT_STOP_BYTE;
 800c612:	2355      	movs	r3, #85	; 0x55
 800c614:	74fb      	strb	r3, [r7, #19]
    lwrb_write(pkt->tx_rb, &b, 1U);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c61c:	f107 0113 	add.w	r1, r7, #19
 800c620:	2201      	movs	r2, #1
 800c622:	4618      	mov	r0, r3
 800c624:	f000 f894 	bl	800c750 <lwrb_write>

fast_return:
    /* Final step to notify app */
    SEND_EVT(pkt, LWPKT_EVT_POST_WRITE); /* Release write event */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <lwpkt_write+0x14e>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c638:	2105      	movs	r1, #5
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	4798      	blx	r3
    if (res == lwpktOK) {
 800c63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <lwpkt_write+0x16c>
        SEND_EVT(pkt, LWPKT_EVT_WRITE); /* Send write event */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <lwpkt_write+0x16c>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c656:	2103      	movs	r1, #3
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	4798      	blx	r3
    }
    return res;
 800c65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c660:	4618      	mov	r0, r3
 800c662:	3728      	adds	r7, #40	; 0x28
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <lwpkt_reset>:
 * \brief           Reset packet state
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_reset(lwpkt_t* pkt) {
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
    if (!LWPKT_IS_VALID(pkt)) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <lwpkt_reset+0x12>
        return lwpktERR;
 800c676:	2301      	movs	r3, #1
 800c678:	e00c      	b.n	800c694 <lwpkt_reset+0x2c>
    }
    LWPKT_RESET(pkt);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c680:	220c      	movs	r2, #12
 800c682:	2100      	movs	r1, #0
 800c684:	4618      	mov	r0, r3
 800c686:	f002 fb8f 	bl	800eda8 <memset>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    return lwpktOK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <lwpkt_set_evt_fn>:
 * \param[in]       pkt: Packet structure
 * \param[in]       evt_fn: Function pointer for events
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_set_evt_fn(lwpkt_t* pkt, lwpkt_evt_fn evt_fn) {
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
    pkt->evt_fn = evt_fn;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    return lwpktOK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, lwrb_sz_t size) {
 800c6bc:	b480      	push	{r7}
 800c6be:	b089      	sub	sp, #36	; 0x24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <lwrb_init+0x1e>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <lwrb_init+0x1e>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <lwrb_init+0x22>
        return 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e019      	b.n	800c712 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	330c      	adds	r3, #12
 800c6f4:	61fb      	str	r3, [r7, #28]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3308      	adds	r3, #8
 800c704:	61bb      	str	r3, [r7, #24]
 800c706:	2300      	movs	r3, #0
 800c708:	613b      	str	r3, [r7, #16]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	601a      	str	r2, [r3, #0]
    return 1;
 800c710:	2301      	movs	r3, #1
}
 800c712:	4618      	mov	r0, r3
 800c714:	3724      	adds	r7, #36	; 0x24
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Ring buffer instance
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800c71e:	b480      	push	{r7}
 800c720:	b083      	sub	sp, #12
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00a      	beq.n	800c744 <lwrb_set_evt_fn+0x26>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d006      	beq.n	800c744 <lwrb_set_evt_fn+0x26>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	611a      	str	r2, [r3, #16]
    }
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array.
 */
lwrb_sz_t
lwrb_write(lwrb_t* buff, const void* data, lwrb_sz_t btw) {
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af02      	add	r7, sp, #8
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
    lwrb_sz_t written = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]

    if (lwrb_write_ex(buff, data, btw, &written, 0)) {
 800c760:	f107 0314 	add.w	r3, r7, #20
 800c764:	2200      	movs	r2, #0
 800c766:	9200      	str	r2, [sp, #0]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	68b9      	ldr	r1, [r7, #8]
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 f80a 	bl	800c786 <lwrb_write_ex>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <lwrb_write+0x2c>
        return written;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	e000      	b.n	800c77e <lwrb_write+0x2e>
    }
    return 0;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <lwrb_write_ex>:
 *                      \ref LWRB_FLAG_WRITE_ALL: Request to write all data (up to btw).
 *                          Will early return if no memory available
 * \return          `1` if write operation OK, `0` otherwise
 */
uint8_t
lwrb_write_ex(lwrb_t* buff, const void* data, lwrb_sz_t btw, lwrb_sz_t* bw, uint16_t flags) {
 800c786:	b580      	push	{r7, lr}
 800c788:	b08c      	sub	sp, #48	; 0x30
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	60f8      	str	r0, [r7, #12]
 800c78e:	60b9      	str	r1, [r7, #8]
 800c790:	607a      	str	r2, [r7, #4]
 800c792:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00d      	beq.n	800c7ba <lwrb_write_ex+0x34>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d009      	beq.n	800c7ba <lwrb_write_ex+0x34>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d005      	beq.n	800c7ba <lwrb_write_ex+0x34>
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <lwrb_write_ex+0x34>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <lwrb_write_ex+0x38>
        return 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e06f      	b.n	800c89e <lwrb_write_ex+0x118>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f000 f91c 	bl	800c9fc <lwrb_get_free>
 800c7c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* If no memory, or if user wants to write ALL data but no enough space, exit early */
    if (free == 0 || (free < btw && flags & LWRB_FLAG_WRITE_ALL)) {
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d008      	beq.n	800c7de <lwrb_write_ex+0x58>
 800c7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d206      	bcs.n	800c7e2 <lwrb_write_ex+0x5c>
 800c7d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <lwrb_write_ex+0x5c>
        return 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e05d      	b.n	800c89e <lwrb_write_ex+0x118>
    }
    btw = BUF_MIN(free, btw);
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	bf28      	it	cs
 800c7ea:	4613      	movcs	r3, r2
 800c7ec:	607b      	str	r3, [r7, #4]
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	623b      	str	r3, [r7, #32]
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f3bf 8f5b 	dmb	ish
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	bf28      	it	cs
 800c810:	4613      	movcs	r3, r2
 800c812:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	4413      	add	r3, r2
 800c81c:	69fa      	ldr	r2, [r7, #28]
 800c81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c820:	4618      	mov	r0, r3
 800c822:	f002 fbb8 	bl	800ef96 <memcpy>
    buff_w_ptr += tocopy;
 800c826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	4413      	add	r3, r2
 800c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00a      	beq.n	800c852 <lwrb_write_ex+0xcc>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6818      	ldr	r0, [r3, #0]
 800c840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	4413      	add	r3, r2
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	4619      	mov	r1, r3
 800c84a:	f002 fba4 	bl	800ef96 <memcpy>
        buff_w_ptr = btw;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c858:	429a      	cmp	r2, r3
 800c85a:	d301      	bcc.n	800c860 <lwrb_write_ex+0xda>
        buff_w_ptr = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	330c      	adds	r3, #12
 800c864:	61bb      	str	r3, [r7, #24]
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	613b      	str	r3, [r7, #16]
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	f3bf 8f5b 	dmb	ish
 800c872:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d007      	beq.n	800c88c <lwrb_write_ex+0x106>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	69f9      	ldr	r1, [r7, #28]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	440a      	add	r2, r1
 800c886:	2101      	movs	r1, #1
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	4798      	blx	r3
    if (bw != NULL) {
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d004      	beq.n	800c89c <lwrb_write_ex+0x116>
        *bw = tocopy + btw;
 800c892:	69fa      	ldr	r2, [r7, #28]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	441a      	add	r2, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800c89c:	2301      	movs	r3, #1
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3730      	adds	r7, #48	; 0x30
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
lwrb_sz_t
lwrb_read(lwrb_t* buff, void* data, lwrb_sz_t btr) {
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b088      	sub	sp, #32
 800c8aa:	af02      	add	r7, sp, #8
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
    lwrb_sz_t read = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]

    if (lwrb_read_ex(buff, data, btr, &read, 0)) {
 800c8b6:	f107 0314 	add.w	r3, r7, #20
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	9200      	str	r2, [sp, #0]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 f80a 	bl	800c8dc <lwrb_read_ex>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <lwrb_read+0x2c>
        return read;
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	e000      	b.n	800c8d4 <lwrb_read+0x2e>
    }
    return 0;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <lwrb_read_ex>:
 *                      \ref LWRB_FLAG_READ_ALL: Request to read all data (up to btr).
 *                          Will early return if no enough bytes in the buffer
 * \return          `1` if read operation OK, `0` otherwise
 */
uint8_t
lwrb_read_ex(lwrb_t* buff, void* data, lwrb_sz_t btr, lwrb_sz_t* br, uint16_t flags) {
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08c      	sub	sp, #48	; 0x30
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00d      	beq.n	800c910 <lwrb_read_ex+0x34>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <lwrb_read_ex+0x34>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d005      	beq.n	800c910 <lwrb_read_ex+0x34>
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <lwrb_read_ex+0x34>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <lwrb_read_ex+0x38>
        return 0;
 800c910:	2300      	movs	r3, #0
 800c912:	e06f      	b.n	800c9f4 <lwrb_read_ex+0x118>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f8b2 	bl	800ca7e <lwrb_get_full>
 800c91a:	6278      	str	r0, [r7, #36]	; 0x24
    if (full == 0 || (full < btr && (flags & LWRB_FLAG_READ_ALL))) {
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d008      	beq.n	800c934 <lwrb_read_ex+0x58>
 800c922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	429a      	cmp	r2, r3
 800c928:	d206      	bcs.n	800c938 <lwrb_read_ex+0x5c>
 800c92a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <lwrb_read_ex+0x5c>
        return 0;
 800c934:	2300      	movs	r3, #0
 800c936:	e05d      	b.n	800c9f4 <lwrb_read_ex+0x118>
    }
    btr = BUF_MIN(full, btr);
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	4293      	cmp	r3, r2
 800c93e:	bf28      	it	cs
 800c940:	4613      	movcs	r3, r2
 800c942:	607b      	str	r3, [r7, #4]
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3308      	adds	r3, #8
 800c948:	623b      	str	r3, [r7, #32]
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f3bf 8f5b 	dmb	ish
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	4293      	cmp	r3, r2
 800c964:	bf28      	it	cs
 800c966:	4613      	movcs	r3, r2
 800c968:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	4413      	add	r3, r2
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	4619      	mov	r1, r3
 800c976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c978:	f002 fb0d 	bl	800ef96 <memcpy>
    buff_r_ptr += tocopy;
 800c97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	4413      	add	r3, r2
 800c982:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00a      	beq.n	800c9a8 <lwrb_read_ex+0xcc>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800c992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	18d0      	adds	r0, r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	4619      	mov	r1, r3
 800c9a0:	f002 faf9 	bl	800ef96 <memcpy>
        buff_r_ptr = btr;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d301      	bcc.n	800c9b6 <lwrb_read_ex+0xda>
        buff_r_ptr = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	61bb      	str	r3, [r7, #24]
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	613b      	str	r3, [r7, #16]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	f3bf 8f5b 	dmb	ish
 800c9c8:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d007      	beq.n	800c9e2 <lwrb_read_ex+0x106>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	69f9      	ldr	r1, [r7, #28]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	440a      	add	r2, r1
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	4798      	blx	r3
    if (br != NULL) {
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <lwrb_read_ex+0x116>
        *br = tocopy + btr;
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	441a      	add	r2, r3
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800c9f2:	2301      	movs	r3, #1
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3730      	adds	r7, #48	; 0x30
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Ring buffer instance
 * \return          Number of free bytes in memory
 */
lwrb_sz_t
lwrb_get_free(const lwrb_t* buff) {
 800c9fc:	b480      	push	{r7}
 800c9fe:	b08b      	sub	sp, #44	; 0x2c
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <lwrb_get_free+0x1e>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <lwrb_get_free+0x1e>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <lwrb_get_free+0x22>
        return 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e029      	b.n	800ca72 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	330c      	adds	r3, #12
 800ca22:	623b      	str	r3, [r7, #32]
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	613b      	str	r3, [r7, #16]
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3308      	adds	r3, #8
 800ca32:	61bb      	str	r3, [r7, #24]
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	60fb      	str	r3, [r7, #12]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800ca3e:	69fa      	ldr	r2, [r7, #28]
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d103      	bne.n	800ca4e <lwrb_get_free+0x52>
        size = buff->size;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4c:	e00f      	b.n	800ca6e <lwrb_get_free+0x72>
    } else if (r > w) {
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d904      	bls.n	800ca60 <lwrb_get_free+0x64>
        size = r - w;
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5e:	e006      	b.n	800ca6e <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	6979      	ldr	r1, [r7, #20]
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	1acb      	subs	r3, r1, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	3b01      	subs	r3, #1
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	372c      	adds	r7, #44	; 0x2c
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Ring buffer instance
 * \return          Number of bytes ready to be read
 */
lwrb_sz_t
lwrb_get_full(const lwrb_t* buff) {
 800ca7e:	b480      	push	{r7}
 800ca80:	b08b      	sub	sp, #44	; 0x2c
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d007      	beq.n	800ca9c <lwrb_get_full+0x1e>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <lwrb_get_full+0x1e>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <lwrb_get_full+0x22>
        return 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e027      	b.n	800caf0 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	330c      	adds	r3, #12
 800caa4:	623b      	str	r3, [r7, #32]
 800caa6:	6a3b      	ldr	r3, [r7, #32]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	613b      	str	r3, [r7, #16]
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3308      	adds	r3, #8
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800cac0:	69fa      	ldr	r2, [r7, #28]
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d102      	bne.n	800cace <lwrb_get_full+0x50>
        size = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
 800cacc:	e00f      	b.n	800caee <lwrb_get_full+0x70>
    } else if (w > r) {
 800cace:	69fa      	ldr	r2, [r7, #28]
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d904      	bls.n	800cae0 <lwrb_get_full+0x62>
        size = w - r;
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
 800cade:	e006      	b.n	800caee <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	69f9      	ldr	r1, [r7, #28]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	1acb      	subs	r3, r1, r3
 800caea:	4413      	add	r3, r2
 800caec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	372c      	adds	r7, #44	; 0x2c
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d007      	beq.n	800cb1a <lwrb_get_linear_block_read_address+0x1e>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <lwrb_get_linear_block_read_address+0x1e>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e004      	b.n	800cb28 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	4413      	add	r3, r2
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer size in units of bytes for read operation
 */
lwrb_sz_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 800cb34:	b480      	push	{r7}
 800cb36:	b08b      	sub	sp, #44	; 0x2c
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    lwrb_sz_t len, w, r;

    if (!BUF_IS_VALID(buff)) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d007      	beq.n	800cb52 <lwrb_get_linear_block_read_length+0x1e>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <lwrb_get_linear_block_read_length+0x1e>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	e025      	b.n	800cba2 <lwrb_get_linear_block_read_length+0x6e>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	330c      	adds	r3, #12
 800cb5a:	623b      	str	r3, [r7, #32]
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	613b      	str	r3, [r7, #16]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3308      	adds	r3, #8
 800cb6a:	61bb      	str	r3, [r7, #24]
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	617b      	str	r3, [r7, #20]

    if (w > r) {
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d904      	bls.n	800cb88 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 800cb7e:	69fa      	ldr	r2, [r7, #28]
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
 800cb86:	e00b      	b.n	800cba0 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d905      	bls.n	800cb9c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
 800cb9a:	e001      	b.n	800cba0 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return len;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	372c      	adds	r7, #44	; 0x2c
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <lwrb_skip>:
 * \param[in]       buff: Ring buffer instance
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
lwrb_sz_t
lwrb_skip(lwrb_t* buff, lwrb_sz_t len) {
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b088      	sub	sp, #32
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
    lwrb_sz_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <lwrb_skip+0x26>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d006      	beq.n	800cbd4 <lwrb_skip+0x26>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <lwrb_skip+0x26>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <lwrb_skip+0x2a>
        return 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e036      	b.n	800cc46 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ff50 	bl	800ca7e <lwrb_get_full>
 800cbde:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	bf28      	it	cs
 800cbe8:	4613      	movcs	r3, r2
 800cbea:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	617b      	str	r3, [r7, #20]
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f3bf 8f5b 	dmb	ish
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	61fb      	str	r3, [r7, #28]
    r += len;
 800cc00:	69fa      	ldr	r2, [r7, #28]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	4413      	add	r3, r2
 800cc06:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d304      	bcc.n	800cc1c <lwrb_skip+0x6e>
        r -= buff->size;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	69fa      	ldr	r2, [r7, #28]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3308      	adds	r3, #8
 800cc20:	613b      	str	r3, [r7, #16]
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	60bb      	str	r3, [r7, #8]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f3bf 8f5b 	dmb	ish
 800cc2e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <lwrb_skip+0x96>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	2100      	movs	r1, #0
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	4798      	blx	r3
    return len;
 800cc44:	683b      	ldr	r3, [r7, #0]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 800cc4e:	b480      	push	{r7}
 800cc50:	b083      	sub	sp, #12
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	619a      	str	r2, [r3, #24]
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b082      	sub	sp, #8
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	889b      	ldrh	r3, [r3, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7f6 fc39 	bl	80034f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6898      	ldr	r0, [r3, #8]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	899b      	ldrh	r3, [r3, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	4619      	mov	r1, r3
 800cc92:	f7f6 fc31 	bl	80034f8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691a      	ldr	r2, [r3, #16]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	8a9b      	ldrh	r3, [r3, #20]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f7f7 fae1 	bl	8004268 <HAL_TIM_PWM_Stop>
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 800ccba:	edd7 7a00 	vldr	s15, [r7]
 800ccbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ccc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc6:	f000 8095 	beq.w	800cdf4 <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 800ccca:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800ccce:	ed97 0a00 	vldr	s0, [r7]
 800ccd2:	f005 fa1d 	bl	8012110 <fmaxf>
 800ccd6:	eef0 7a40 	vmov.f32	s15, s0
 800ccda:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ccde:	eeb0 0a67 	vmov.f32	s0, s15
 800cce2:	f005 fa30 	bl	8012146 <fminf>
 800cce6:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 800ccea:	edd7 7a00 	vldr	s15, [r7]
 800ccee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	bfcc      	ite	gt
 800ccf8:	2301      	movgt	r3, #1
 800ccfa:	2300      	movle	r3, #0
 800ccfc:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6818      	ldr	r0, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	889b      	ldrh	r3, [r3, #4]
 800cd06:	7bfa      	ldrb	r2, [r7, #15]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f7f6 fbf5 	bl	80034f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6898      	ldr	r0, [r3, #8]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8999      	ldrh	r1, [r3, #12]
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	f083 0301 	eor.w	r3, r3, #1
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f7f6 fbea 	bl	80034f8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8a9b      	ldrh	r3, [r3, #20]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d114      	bne.n	800cd56 <motor_run+0xa8>
 800cd2c:	edd7 7a00 	vldr	s15, [r7]
 800cd30:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	ee07 3a90 	vmov	s15, r3
 800cd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4e:	ee17 2a90 	vmov	r2, s15
 800cd52:	635a      	str	r2, [r3, #52]	; 0x34
 800cd54:	e045      	b.n	800cde2 <motor_run+0x134>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	8a9b      	ldrh	r3, [r3, #20]
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	d114      	bne.n	800cd88 <motor_run+0xda>
 800cd5e:	edd7 7a00 	vldr	s15, [r7]
 800cd62:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd80:	ee17 3a90 	vmov	r3, s15
 800cd84:	6393      	str	r3, [r2, #56]	; 0x38
 800cd86:	e02c      	b.n	800cde2 <motor_run+0x134>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	8a9b      	ldrh	r3, [r3, #20]
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d114      	bne.n	800cdba <motor_run+0x10c>
 800cd90:	edd7 7a00 	vldr	s15, [r7]
 800cd94:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	ee07 3a90 	vmov	s15, r3
 800cda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb2:	ee17 3a90 	vmov	r3, s15
 800cdb6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800cdb8:	e013      	b.n	800cde2 <motor_run+0x134>
 800cdba:	edd7 7a00 	vldr	s15, [r7]
 800cdbe:	eeb0 7ae7 	vabs.f32	s14, s15
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	ee07 3a90 	vmov	s15, r3
 800cdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cddc:	ee17 3a90 	vmov	r3, s15
 800cde0:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691a      	ldr	r2, [r3, #16]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8a9b      	ldrh	r3, [r3, #20]
 800cdea:	4619      	mov	r1, r3
 800cdec:	4610      	mov	r0, r2
 800cdee:	f7f7 f98b 	bl	8004108 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 800cdf2:	e002      	b.n	800cdfa <motor_run+0x14c>
		motor_stop(motor);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff ff3a 	bl	800cc6e <motor_stop>
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <encoder_init>:


void encoder_init(encoder_t* encoder, uint32_t time){
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
	encoder->last_time = time;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	609a      	str	r2, [r3, #8]
	encoder->half_auto_reload = (int32_t)__HAL_TIM_GET_AUTORELOAD(encoder->timer) / 2;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1a:	0fda      	lsrs	r2, r3, #31
 800ce1c:	4413      	add	r3, r2
 800ce1e:	105b      	asrs	r3, r3, #1
 800ce20:	461a      	mov	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(encoder->timer, TIM_CHANNEL_ALL);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	213c      	movs	r1, #60	; 0x3c
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f7 fb25 	bl	800447c <HAL_TIM_Encoder_Start>
}
 800ce32:	bf00      	nop
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <encoder_callback>:

void encoder_callback(encoder_t* encoder, uint32_t time){
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	6039      	str	r1, [r7, #0]
	uint32_t d_t = time - encoder->last_time;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	60fb      	str	r3, [r7, #12]
	int32_t d_p = (int32_t)__HAL_TIM_GET_COUNTER(encoder->timer) - encoder->half_auto_reload;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	461a      	mov	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	60bb      	str	r3, [r7, #8]
	encoder->speed = (encoder_speed_t)d_p / (encoder_speed_t)d_t;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	ee07 3a90 	vmov	s15, r3
 800ce70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->last_time = time;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(encoder->timer, (uint32_t)encoder->half_auto_reload);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	625a      	str	r2, [r3, #36]	; 0x24

	//printf("d_p: %li, d_t: %lu\r\n", d_p, d_t);
}
 800ce90:	bf00      	nop
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <encoder_get_speed>:

encoder_speed_t encoder_get_speed(encoder_t* encoder){
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
	return encoder->speed;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	ee07 3a90 	vmov	s15, r3
}
 800ceac:	eeb0 0a67 	vmov.f32	s0, s15
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <mecanum_robot_init>:


void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	6039      	str	r1, [r7, #0]
	motor_init(mecanum_robot->fl_motor);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff fec0 	bl	800cc4e <motor_init>
	motor_init(mecanum_robot->fr_motor);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff febb 	bl	800cc4e <motor_init>
	motor_init(mecanum_robot->bl_motor);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff feb6 	bl	800cc4e <motor_init>
	motor_init(mecanum_robot->br_motor);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff feb1 	bl	800cc4e <motor_init>

	encoder_init(mecanum_robot->fl_encoder, time);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ff85 	bl	800ce02 <encoder_init>
	encoder_init(mecanum_robot->fr_encoder, time);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff ff7f 	bl	800ce02 <encoder_init>
	encoder_init(mecanum_robot->bl_encoder, time);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff ff79 	bl	800ce02 <encoder_init>
	encoder_init(mecanum_robot->br_encoder, time);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ff73 	bl	800ce02 <encoder_init>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fe9c 	bl	800cc6e <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff fe97 	bl	800cc6e <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fe92 	bl	800cc6e <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff fe8d 	bl	800cc6e <motor_stop>
}
 800cf54:	bf00      	nop
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	0000      	movs	r0, r0
	...

0800cf60 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08e      	sub	sp, #56	; 0x38
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	ed87 0a02 	vstr	s0, [r7, #8]
 800cf6c:	edc7 0a01 	vstr	s1, [r7, #4]
 800cf70:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 800cf74:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf80:	d10a      	bne.n	800cf98 <mecanum_robot_move+0x38>
 800cf82:	edd7 7a00 	vldr	s15, [r7]
 800cf86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8e:	d103      	bne.n	800cf98 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff ffc7 	bl	800cf24 <mecanum_robot_stop>
		return;
 800cf96:	e0e4      	b.n	800d162 <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 800cf98:	eddf 0a75 	vldr	s1, [pc, #468]	; 800d170 <mecanum_robot_move+0x210>
 800cf9c:	ed97 0a02 	vldr	s0, [r7, #8]
 800cfa0:	f005 f8b6 	bl	8012110 <fmaxf>
 800cfa4:	eef0 7a40 	vmov.f32	s15, s0
 800cfa8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800cfac:	eeb0 0a67 	vmov.f32	s0, s15
 800cfb0:	f005 f8c9 	bl	8012146 <fminf>
 800cfb4:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7f3 fadd 	bl	8000578 <__aeabi_f2d>
 800cfbe:	a36a      	add	r3, pc, #424	; (adr r3, 800d168 <mecanum_robot_move+0x208>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 f978 	bl	80002b8 <__aeabi_dsub>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	f7f3 fe22 	bl	8000c18 <__aeabi_d2f>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 800cfd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfda:	f7f3 facd 	bl	8000578 <__aeabi_f2d>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	ec43 2b10 	vmov	d0, r2, r3
 800cfe6:	f005 f83b 	bl	8012060 <sin>
 800cfea:	ec53 2b10 	vmov	r2, r3, d0
 800cfee:	4610      	mov	r0, r2
 800cff0:	4619      	mov	r1, r3
 800cff2:	f7f3 fe11 	bl	8000c18 <__aeabi_d2f>
 800cff6:	4603      	mov	r3, r0
 800cff8:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 800cffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cffc:	f7f3 fabc 	bl	8000578 <__aeabi_f2d>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	ec43 2b10 	vmov	d0, r2, r3
 800d008:	f004 ffd6 	bl	8011fb8 <cos>
 800d00c:	ec53 2b10 	vmov	r2, r3, d0
 800d010:	4610      	mov	r0, r2
 800d012:	4619      	mov	r1, r3
 800d014:	f7f3 fe00 	bl	8000c18 <__aeabi_d2f>
 800d018:	4603      	mov	r3, r0
 800d01a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 800d01c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d020:	eeb0 7ae7 	vabs.f32	s14, s15
 800d024:	edd7 7a07 	vldr	s15, [r7, #28]
 800d028:	eef0 7ae7 	vabs.f32	s15, s15
 800d02c:	eef0 0a67 	vmov.f32	s1, s15
 800d030:	eeb0 0a47 	vmov.f32	s0, s14
 800d034:	f005 f86c 	bl	8012110 <fmaxf>
 800d038:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 800d03c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d040:	edd7 7a07 	vldr	s15, [r7, #28]
 800d044:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d048:	ed97 7a06 	vldr	s14, [r7, #24]
 800d04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d050:	ed97 7a00 	vldr	s14, [r7]
 800d054:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d058:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 800d05c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d060:	edd7 7a08 	vldr	s15, [r7, #32]
 800d064:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d068:	edd7 7a06 	vldr	s15, [r7, #24]
 800d06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d070:	edd7 7a00 	vldr	s15, [r7]
 800d074:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d078:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 800d07c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d080:	edd7 7a08 	vldr	s15, [r7, #32]
 800d084:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d088:	ed97 7a06 	vldr	s14, [r7, #24]
 800d08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d090:	ed97 7a00 	vldr	s14, [r7]
 800d094:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d098:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 800d09c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d0a0:	edd7 7a07 	vldr	s15, [r7, #28]
 800d0a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d0a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800d0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0b0:	edd7 7a00 	vldr	s15, [r7]
 800d0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 800d0bc:	edd7 7a00 	vldr	s15, [r7]
 800d0c0:	eeb0 7ae7 	vabs.f32	s14, s15
 800d0c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d0c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d8:	dd27      	ble.n	800d12a <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 800d0da:	ed97 7a02 	vldr	s14, [r7, #8]
 800d0de:	edd7 7a00 	vldr	s15, [r7]
 800d0e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0e6:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 800d0ea:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d0ee:	ed97 7a05 	vldr	s14, [r7, #20]
 800d0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 800d0fa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800d0fe:	ed97 7a05 	vldr	s14, [r7, #20]
 800d102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d106:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 800d10a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d10e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d116:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 800d11a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d11e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d126:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff fdbb 	bl	800ccae <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff fdb4 	bl	800ccae <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff fdad 	bl	800ccae <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7ff fda6 	bl	800ccae <motor_run>
}
 800d162:	3738      	adds	r7, #56	; 0x38
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	54442d18 	.word	0x54442d18
 800d16c:	3fe921fb 	.word	0x3fe921fb
 800d170:	00000000 	.word	0x00000000

0800d174 <mecanum_robot_encoders_callback>:

void mecanum_robot_encoders_callback(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
	encoder_callback(mecanum_robot->fl_encoder, time);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fe58 	bl	800ce3a <encoder_callback>
	encoder_callback(mecanum_robot->fr_encoder, time);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fe52 	bl	800ce3a <encoder_callback>
	encoder_callback(mecanum_robot->bl_encoder, time);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fe4c 	bl	800ce3a <encoder_callback>
	encoder_callback(mecanum_robot->br_encoder, time);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	69db      	ldr	r3, [r3, #28]
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff fe46 	bl	800ce3a <encoder_callback>
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <mecanum_robot_get_encoder_speeds>:

void mecanum_robot_get_encoder_speeds(four_wheeled_robot_t *mecanum_robot, four_wheeled_robot_encoders_speeds_t* encoders_speeds){
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
	encoders_speeds->fl_speed = encoder_get_speed(mecanum_robot->fl_encoder);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff fe69 	bl	800ce9c <encoder_get_speed>
 800d1ca:	eef0 7a40 	vmov.f32	s15, s0
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	edc3 7a00 	vstr	s15, [r3]
	encoders_speeds->fr_speed = encoder_get_speed(mecanum_robot->fr_encoder);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff fe5f 	bl	800ce9c <encoder_get_speed>
 800d1de:	eef0 7a40 	vmov.f32	s15, s0
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	edc3 7a01 	vstr	s15, [r3, #4]
	encoders_speeds->bl_speed = encoder_get_speed(mecanum_robot->bl_encoder);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff fe55 	bl	800ce9c <encoder_get_speed>
 800d1f2:	eef0 7a40 	vmov.f32	s15, s0
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	edc3 7a02 	vstr	s15, [r3, #8]
	encoders_speeds->br_speed = encoder_get_speed(mecanum_robot->br_encoder);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff fe4b 	bl	800ce9c <encoder_get_speed>
 800d206:	eef0 7a40 	vmov.f32	s15, s0
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <malloc>:
 800d218:	4b02      	ldr	r3, [pc, #8]	; (800d224 <malloc+0xc>)
 800d21a:	4601      	mov	r1, r0
 800d21c:	6818      	ldr	r0, [r3, #0]
 800d21e:	f000 b82b 	b.w	800d278 <_malloc_r>
 800d222:	bf00      	nop
 800d224:	200002b0 	.word	0x200002b0

0800d228 <free>:
 800d228:	4b02      	ldr	r3, [pc, #8]	; (800d234 <free+0xc>)
 800d22a:	4601      	mov	r1, r0
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	f002 bd45 	b.w	800fcbc <_free_r>
 800d232:	bf00      	nop
 800d234:	200002b0 	.word	0x200002b0

0800d238 <sbrk_aligned>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	4e0e      	ldr	r6, [pc, #56]	; (800d274 <sbrk_aligned+0x3c>)
 800d23c:	460c      	mov	r4, r1
 800d23e:	6831      	ldr	r1, [r6, #0]
 800d240:	4605      	mov	r5, r0
 800d242:	b911      	cbnz	r1, 800d24a <sbrk_aligned+0x12>
 800d244:	f001 fe58 	bl	800eef8 <_sbrk_r>
 800d248:	6030      	str	r0, [r6, #0]
 800d24a:	4621      	mov	r1, r4
 800d24c:	4628      	mov	r0, r5
 800d24e:	f001 fe53 	bl	800eef8 <_sbrk_r>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d00a      	beq.n	800d26c <sbrk_aligned+0x34>
 800d256:	1cc4      	adds	r4, r0, #3
 800d258:	f024 0403 	bic.w	r4, r4, #3
 800d25c:	42a0      	cmp	r0, r4
 800d25e:	d007      	beq.n	800d270 <sbrk_aligned+0x38>
 800d260:	1a21      	subs	r1, r4, r0
 800d262:	4628      	mov	r0, r5
 800d264:	f001 fe48 	bl	800eef8 <_sbrk_r>
 800d268:	3001      	adds	r0, #1
 800d26a:	d101      	bne.n	800d270 <sbrk_aligned+0x38>
 800d26c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d270:	4620      	mov	r0, r4
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	20005614 	.word	0x20005614

0800d278 <_malloc_r>:
 800d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	1ccd      	adds	r5, r1, #3
 800d27e:	f025 0503 	bic.w	r5, r5, #3
 800d282:	3508      	adds	r5, #8
 800d284:	2d0c      	cmp	r5, #12
 800d286:	bf38      	it	cc
 800d288:	250c      	movcc	r5, #12
 800d28a:	2d00      	cmp	r5, #0
 800d28c:	4607      	mov	r7, r0
 800d28e:	db01      	blt.n	800d294 <_malloc_r+0x1c>
 800d290:	42a9      	cmp	r1, r5
 800d292:	d905      	bls.n	800d2a0 <_malloc_r+0x28>
 800d294:	230c      	movs	r3, #12
 800d296:	603b      	str	r3, [r7, #0]
 800d298:	2600      	movs	r6, #0
 800d29a:	4630      	mov	r0, r6
 800d29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d374 <_malloc_r+0xfc>
 800d2a4:	f000 f868 	bl	800d378 <__malloc_lock>
 800d2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ac:	461c      	mov	r4, r3
 800d2ae:	bb5c      	cbnz	r4, 800d308 <_malloc_r+0x90>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f7ff ffc0 	bl	800d238 <sbrk_aligned>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	d155      	bne.n	800d36a <_malloc_r+0xf2>
 800d2be:	f8d8 4000 	ldr.w	r4, [r8]
 800d2c2:	4626      	mov	r6, r4
 800d2c4:	2e00      	cmp	r6, #0
 800d2c6:	d145      	bne.n	800d354 <_malloc_r+0xdc>
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	d048      	beq.n	800d35e <_malloc_r+0xe6>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	eb04 0903 	add.w	r9, r4, r3
 800d2d6:	f001 fe0f 	bl	800eef8 <_sbrk_r>
 800d2da:	4581      	cmp	r9, r0
 800d2dc:	d13f      	bne.n	800d35e <_malloc_r+0xe6>
 800d2de:	6821      	ldr	r1, [r4, #0]
 800d2e0:	1a6d      	subs	r5, r5, r1
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff ffa7 	bl	800d238 <sbrk_aligned>
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d037      	beq.n	800d35e <_malloc_r+0xe6>
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	442b      	add	r3, r5
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d038      	beq.n	800d36e <_malloc_r+0xf6>
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	42a2      	cmp	r2, r4
 800d300:	d12b      	bne.n	800d35a <_malloc_r+0xe2>
 800d302:	2200      	movs	r2, #0
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	e00f      	b.n	800d328 <_malloc_r+0xb0>
 800d308:	6822      	ldr	r2, [r4, #0]
 800d30a:	1b52      	subs	r2, r2, r5
 800d30c:	d41f      	bmi.n	800d34e <_malloc_r+0xd6>
 800d30e:	2a0b      	cmp	r2, #11
 800d310:	d917      	bls.n	800d342 <_malloc_r+0xca>
 800d312:	1961      	adds	r1, r4, r5
 800d314:	42a3      	cmp	r3, r4
 800d316:	6025      	str	r5, [r4, #0]
 800d318:	bf18      	it	ne
 800d31a:	6059      	strne	r1, [r3, #4]
 800d31c:	6863      	ldr	r3, [r4, #4]
 800d31e:	bf08      	it	eq
 800d320:	f8c8 1000 	streq.w	r1, [r8]
 800d324:	5162      	str	r2, [r4, r5]
 800d326:	604b      	str	r3, [r1, #4]
 800d328:	4638      	mov	r0, r7
 800d32a:	f104 060b 	add.w	r6, r4, #11
 800d32e:	f000 f829 	bl	800d384 <__malloc_unlock>
 800d332:	f026 0607 	bic.w	r6, r6, #7
 800d336:	1d23      	adds	r3, r4, #4
 800d338:	1af2      	subs	r2, r6, r3
 800d33a:	d0ae      	beq.n	800d29a <_malloc_r+0x22>
 800d33c:	1b9b      	subs	r3, r3, r6
 800d33e:	50a3      	str	r3, [r4, r2]
 800d340:	e7ab      	b.n	800d29a <_malloc_r+0x22>
 800d342:	42a3      	cmp	r3, r4
 800d344:	6862      	ldr	r2, [r4, #4]
 800d346:	d1dd      	bne.n	800d304 <_malloc_r+0x8c>
 800d348:	f8c8 2000 	str.w	r2, [r8]
 800d34c:	e7ec      	b.n	800d328 <_malloc_r+0xb0>
 800d34e:	4623      	mov	r3, r4
 800d350:	6864      	ldr	r4, [r4, #4]
 800d352:	e7ac      	b.n	800d2ae <_malloc_r+0x36>
 800d354:	4634      	mov	r4, r6
 800d356:	6876      	ldr	r6, [r6, #4]
 800d358:	e7b4      	b.n	800d2c4 <_malloc_r+0x4c>
 800d35a:	4613      	mov	r3, r2
 800d35c:	e7cc      	b.n	800d2f8 <_malloc_r+0x80>
 800d35e:	230c      	movs	r3, #12
 800d360:	603b      	str	r3, [r7, #0]
 800d362:	4638      	mov	r0, r7
 800d364:	f000 f80e 	bl	800d384 <__malloc_unlock>
 800d368:	e797      	b.n	800d29a <_malloc_r+0x22>
 800d36a:	6025      	str	r5, [r4, #0]
 800d36c:	e7dc      	b.n	800d328 <_malloc_r+0xb0>
 800d36e:	605b      	str	r3, [r3, #4]
 800d370:	deff      	udf	#255	; 0xff
 800d372:	bf00      	nop
 800d374:	20005610 	.word	0x20005610

0800d378 <__malloc_lock>:
 800d378:	4801      	ldr	r0, [pc, #4]	; (800d380 <__malloc_lock+0x8>)
 800d37a:	f001 be0a 	b.w	800ef92 <__retarget_lock_acquire_recursive>
 800d37e:	bf00      	nop
 800d380:	20005758 	.word	0x20005758

0800d384 <__malloc_unlock>:
 800d384:	4801      	ldr	r0, [pc, #4]	; (800d38c <__malloc_unlock+0x8>)
 800d386:	f001 be05 	b.w	800ef94 <__retarget_lock_release_recursive>
 800d38a:	bf00      	nop
 800d38c:	20005758 	.word	0x20005758

0800d390 <realloc>:
 800d390:	4b02      	ldr	r3, [pc, #8]	; (800d39c <realloc+0xc>)
 800d392:	460a      	mov	r2, r1
 800d394:	4601      	mov	r1, r0
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	f000 b802 	b.w	800d3a0 <_realloc_r>
 800d39c:	200002b0 	.word	0x200002b0

0800d3a0 <_realloc_r>:
 800d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4614      	mov	r4, r2
 800d3a8:	460e      	mov	r6, r1
 800d3aa:	b921      	cbnz	r1, 800d3b6 <_realloc_r+0x16>
 800d3ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	f7ff bf61 	b.w	800d278 <_malloc_r>
 800d3b6:	b92a      	cbnz	r2, 800d3c4 <_realloc_r+0x24>
 800d3b8:	f002 fc80 	bl	800fcbc <_free_r>
 800d3bc:	4625      	mov	r5, r4
 800d3be:	4628      	mov	r0, r5
 800d3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c4:	f003 fcdd 	bl	8010d82 <_malloc_usable_size_r>
 800d3c8:	4284      	cmp	r4, r0
 800d3ca:	4607      	mov	r7, r0
 800d3cc:	d802      	bhi.n	800d3d4 <_realloc_r+0x34>
 800d3ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3d2:	d812      	bhi.n	800d3fa <_realloc_r+0x5a>
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	f7ff ff4e 	bl	800d278 <_malloc_r>
 800d3dc:	4605      	mov	r5, r0
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d0ed      	beq.n	800d3be <_realloc_r+0x1e>
 800d3e2:	42bc      	cmp	r4, r7
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	bf28      	it	cs
 800d3ea:	463a      	movcs	r2, r7
 800d3ec:	f001 fdd3 	bl	800ef96 <memcpy>
 800d3f0:	4631      	mov	r1, r6
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	f002 fc62 	bl	800fcbc <_free_r>
 800d3f8:	e7e1      	b.n	800d3be <_realloc_r+0x1e>
 800d3fa:	4635      	mov	r5, r6
 800d3fc:	e7df      	b.n	800d3be <_realloc_r+0x1e>

0800d3fe <sulp>:
 800d3fe:	b570      	push	{r4, r5, r6, lr}
 800d400:	4604      	mov	r4, r0
 800d402:	460d      	mov	r5, r1
 800d404:	ec45 4b10 	vmov	d0, r4, r5
 800d408:	4616      	mov	r6, r2
 800d40a:	f003 fb79 	bl	8010b00 <__ulp>
 800d40e:	ec51 0b10 	vmov	r0, r1, d0
 800d412:	b17e      	cbz	r6, 800d434 <sulp+0x36>
 800d414:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d418:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dd09      	ble.n	800d434 <sulp+0x36>
 800d420:	051b      	lsls	r3, r3, #20
 800d422:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d426:	2400      	movs	r4, #0
 800d428:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d42c:	4622      	mov	r2, r4
 800d42e:	462b      	mov	r3, r5
 800d430:	f7f3 f8fa 	bl	8000628 <__aeabi_dmul>
 800d434:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d438 <_strtod_l>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	ed2d 8b02 	vpush	{d8}
 800d440:	b09b      	sub	sp, #108	; 0x6c
 800d442:	4604      	mov	r4, r0
 800d444:	9213      	str	r2, [sp, #76]	; 0x4c
 800d446:	2200      	movs	r2, #0
 800d448:	9216      	str	r2, [sp, #88]	; 0x58
 800d44a:	460d      	mov	r5, r1
 800d44c:	f04f 0800 	mov.w	r8, #0
 800d450:	f04f 0900 	mov.w	r9, #0
 800d454:	460a      	mov	r2, r1
 800d456:	9215      	str	r2, [sp, #84]	; 0x54
 800d458:	7811      	ldrb	r1, [r2, #0]
 800d45a:	292b      	cmp	r1, #43	; 0x2b
 800d45c:	d04c      	beq.n	800d4f8 <_strtod_l+0xc0>
 800d45e:	d83a      	bhi.n	800d4d6 <_strtod_l+0x9e>
 800d460:	290d      	cmp	r1, #13
 800d462:	d834      	bhi.n	800d4ce <_strtod_l+0x96>
 800d464:	2908      	cmp	r1, #8
 800d466:	d834      	bhi.n	800d4d2 <_strtod_l+0x9a>
 800d468:	2900      	cmp	r1, #0
 800d46a:	d03d      	beq.n	800d4e8 <_strtod_l+0xb0>
 800d46c:	2200      	movs	r2, #0
 800d46e:	920a      	str	r2, [sp, #40]	; 0x28
 800d470:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d472:	7832      	ldrb	r2, [r6, #0]
 800d474:	2a30      	cmp	r2, #48	; 0x30
 800d476:	f040 80b4 	bne.w	800d5e2 <_strtod_l+0x1aa>
 800d47a:	7872      	ldrb	r2, [r6, #1]
 800d47c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d480:	2a58      	cmp	r2, #88	; 0x58
 800d482:	d170      	bne.n	800d566 <_strtod_l+0x12e>
 800d484:	9302      	str	r3, [sp, #8]
 800d486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d488:	9301      	str	r3, [sp, #4]
 800d48a:	ab16      	add	r3, sp, #88	; 0x58
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	4a8e      	ldr	r2, [pc, #568]	; (800d6c8 <_strtod_l+0x290>)
 800d490:	ab17      	add	r3, sp, #92	; 0x5c
 800d492:	a915      	add	r1, sp, #84	; 0x54
 800d494:	4620      	mov	r0, r4
 800d496:	f002 fcc5 	bl	800fe24 <__gethex>
 800d49a:	f010 070f 	ands.w	r7, r0, #15
 800d49e:	4605      	mov	r5, r0
 800d4a0:	d005      	beq.n	800d4ae <_strtod_l+0x76>
 800d4a2:	2f06      	cmp	r7, #6
 800d4a4:	d12a      	bne.n	800d4fc <_strtod_l+0xc4>
 800d4a6:	3601      	adds	r6, #1
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9615      	str	r6, [sp, #84]	; 0x54
 800d4ac:	930a      	str	r3, [sp, #40]	; 0x28
 800d4ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f040 857f 	bne.w	800dfb4 <_strtod_l+0xb7c>
 800d4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4b8:	b1db      	cbz	r3, 800d4f2 <_strtod_l+0xba>
 800d4ba:	4642      	mov	r2, r8
 800d4bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d4c0:	ec43 2b10 	vmov	d0, r2, r3
 800d4c4:	b01b      	add	sp, #108	; 0x6c
 800d4c6:	ecbd 8b02 	vpop	{d8}
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	2920      	cmp	r1, #32
 800d4d0:	d1cc      	bne.n	800d46c <_strtod_l+0x34>
 800d4d2:	3201      	adds	r2, #1
 800d4d4:	e7bf      	b.n	800d456 <_strtod_l+0x1e>
 800d4d6:	292d      	cmp	r1, #45	; 0x2d
 800d4d8:	d1c8      	bne.n	800d46c <_strtod_l+0x34>
 800d4da:	2101      	movs	r1, #1
 800d4dc:	910a      	str	r1, [sp, #40]	; 0x28
 800d4de:	1c51      	adds	r1, r2, #1
 800d4e0:	9115      	str	r1, [sp, #84]	; 0x54
 800d4e2:	7852      	ldrb	r2, [r2, #1]
 800d4e4:	2a00      	cmp	r2, #0
 800d4e6:	d1c3      	bne.n	800d470 <_strtod_l+0x38>
 800d4e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4ea:	9515      	str	r5, [sp, #84]	; 0x54
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f040 855f 	bne.w	800dfb0 <_strtod_l+0xb78>
 800d4f2:	4642      	mov	r2, r8
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	e7e3      	b.n	800d4c0 <_strtod_l+0x88>
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	e7ef      	b.n	800d4dc <_strtod_l+0xa4>
 800d4fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4fe:	b13a      	cbz	r2, 800d510 <_strtod_l+0xd8>
 800d500:	2135      	movs	r1, #53	; 0x35
 800d502:	a818      	add	r0, sp, #96	; 0x60
 800d504:	f003 fbf9 	bl	8010cfa <__copybits>
 800d508:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d50a:	4620      	mov	r0, r4
 800d50c:	f002 ffcc 	bl	80104a8 <_Bfree>
 800d510:	3f01      	subs	r7, #1
 800d512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d514:	2f04      	cmp	r7, #4
 800d516:	d806      	bhi.n	800d526 <_strtod_l+0xee>
 800d518:	e8df f007 	tbb	[pc, r7]
 800d51c:	201d0314 	.word	0x201d0314
 800d520:	14          	.byte	0x14
 800d521:	00          	.byte	0x00
 800d522:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d526:	05e9      	lsls	r1, r5, #23
 800d528:	bf48      	it	mi
 800d52a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d52e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d532:	0d1b      	lsrs	r3, r3, #20
 800d534:	051b      	lsls	r3, r3, #20
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1b9      	bne.n	800d4ae <_strtod_l+0x76>
 800d53a:	f001 fcff 	bl	800ef3c <__errno>
 800d53e:	2322      	movs	r3, #34	; 0x22
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	e7b4      	b.n	800d4ae <_strtod_l+0x76>
 800d544:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d548:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d54c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d550:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d554:	e7e7      	b.n	800d526 <_strtod_l+0xee>
 800d556:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d6d0 <_strtod_l+0x298>
 800d55a:	e7e4      	b.n	800d526 <_strtod_l+0xee>
 800d55c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d560:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d564:	e7df      	b.n	800d526 <_strtod_l+0xee>
 800d566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	9215      	str	r2, [sp, #84]	; 0x54
 800d56c:	785b      	ldrb	r3, [r3, #1]
 800d56e:	2b30      	cmp	r3, #48	; 0x30
 800d570:	d0f9      	beq.n	800d566 <_strtod_l+0x12e>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d09b      	beq.n	800d4ae <_strtod_l+0x76>
 800d576:	2301      	movs	r3, #1
 800d578:	f04f 0a00 	mov.w	sl, #0
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d580:	930b      	str	r3, [sp, #44]	; 0x2c
 800d582:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d586:	46d3      	mov	fp, sl
 800d588:	220a      	movs	r2, #10
 800d58a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d58c:	7806      	ldrb	r6, [r0, #0]
 800d58e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d592:	b2d9      	uxtb	r1, r3
 800d594:	2909      	cmp	r1, #9
 800d596:	d926      	bls.n	800d5e6 <_strtod_l+0x1ae>
 800d598:	494c      	ldr	r1, [pc, #304]	; (800d6cc <_strtod_l+0x294>)
 800d59a:	2201      	movs	r2, #1
 800d59c:	f001 fc0c 	bl	800edb8 <strncmp>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d030      	beq.n	800d606 <_strtod_l+0x1ce>
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	9005      	str	r0, [sp, #20]
 800d5aa:	465e      	mov	r6, fp
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2a65      	cmp	r2, #101	; 0x65
 800d5b0:	d001      	beq.n	800d5b6 <_strtod_l+0x17e>
 800d5b2:	2a45      	cmp	r2, #69	; 0x45
 800d5b4:	d113      	bne.n	800d5de <_strtod_l+0x1a6>
 800d5b6:	b91e      	cbnz	r6, 800d5c0 <_strtod_l+0x188>
 800d5b8:	9a04      	ldr	r2, [sp, #16]
 800d5ba:	4302      	orrs	r2, r0
 800d5bc:	d094      	beq.n	800d4e8 <_strtod_l+0xb0>
 800d5be:	2600      	movs	r6, #0
 800d5c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d5c2:	1c6a      	adds	r2, r5, #1
 800d5c4:	9215      	str	r2, [sp, #84]	; 0x54
 800d5c6:	786a      	ldrb	r2, [r5, #1]
 800d5c8:	2a2b      	cmp	r2, #43	; 0x2b
 800d5ca:	d074      	beq.n	800d6b6 <_strtod_l+0x27e>
 800d5cc:	2a2d      	cmp	r2, #45	; 0x2d
 800d5ce:	d078      	beq.n	800d6c2 <_strtod_l+0x28a>
 800d5d0:	f04f 0c00 	mov.w	ip, #0
 800d5d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d5d8:	2909      	cmp	r1, #9
 800d5da:	d97f      	bls.n	800d6dc <_strtod_l+0x2a4>
 800d5dc:	9515      	str	r5, [sp, #84]	; 0x54
 800d5de:	2700      	movs	r7, #0
 800d5e0:	e09e      	b.n	800d720 <_strtod_l+0x2e8>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e7c8      	b.n	800d578 <_strtod_l+0x140>
 800d5e6:	f1bb 0f08 	cmp.w	fp, #8
 800d5ea:	bfd8      	it	le
 800d5ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d5ee:	f100 0001 	add.w	r0, r0, #1
 800d5f2:	bfda      	itte	le
 800d5f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5f8:	9309      	strle	r3, [sp, #36]	; 0x24
 800d5fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d5fe:	f10b 0b01 	add.w	fp, fp, #1
 800d602:	9015      	str	r0, [sp, #84]	; 0x54
 800d604:	e7c1      	b.n	800d58a <_strtod_l+0x152>
 800d606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	9215      	str	r2, [sp, #84]	; 0x54
 800d60c:	785a      	ldrb	r2, [r3, #1]
 800d60e:	f1bb 0f00 	cmp.w	fp, #0
 800d612:	d037      	beq.n	800d684 <_strtod_l+0x24c>
 800d614:	9005      	str	r0, [sp, #20]
 800d616:	465e      	mov	r6, fp
 800d618:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d61c:	2b09      	cmp	r3, #9
 800d61e:	d912      	bls.n	800d646 <_strtod_l+0x20e>
 800d620:	2301      	movs	r3, #1
 800d622:	e7c4      	b.n	800d5ae <_strtod_l+0x176>
 800d624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	9215      	str	r2, [sp, #84]	; 0x54
 800d62a:	785a      	ldrb	r2, [r3, #1]
 800d62c:	3001      	adds	r0, #1
 800d62e:	2a30      	cmp	r2, #48	; 0x30
 800d630:	d0f8      	beq.n	800d624 <_strtod_l+0x1ec>
 800d632:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d636:	2b08      	cmp	r3, #8
 800d638:	f200 84c1 	bhi.w	800dfbe <_strtod_l+0xb86>
 800d63c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d63e:	9005      	str	r0, [sp, #20]
 800d640:	2000      	movs	r0, #0
 800d642:	930b      	str	r3, [sp, #44]	; 0x2c
 800d644:	4606      	mov	r6, r0
 800d646:	3a30      	subs	r2, #48	; 0x30
 800d648:	f100 0301 	add.w	r3, r0, #1
 800d64c:	d014      	beq.n	800d678 <_strtod_l+0x240>
 800d64e:	9905      	ldr	r1, [sp, #20]
 800d650:	4419      	add	r1, r3
 800d652:	9105      	str	r1, [sp, #20]
 800d654:	4633      	mov	r3, r6
 800d656:	eb00 0c06 	add.w	ip, r0, r6
 800d65a:	210a      	movs	r1, #10
 800d65c:	4563      	cmp	r3, ip
 800d65e:	d113      	bne.n	800d688 <_strtod_l+0x250>
 800d660:	1833      	adds	r3, r6, r0
 800d662:	2b08      	cmp	r3, #8
 800d664:	f106 0601 	add.w	r6, r6, #1
 800d668:	4406      	add	r6, r0
 800d66a:	dc1a      	bgt.n	800d6a2 <_strtod_l+0x26a>
 800d66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d66e:	230a      	movs	r3, #10
 800d670:	fb03 2301 	mla	r3, r3, r1, r2
 800d674:	9309      	str	r3, [sp, #36]	; 0x24
 800d676:	2300      	movs	r3, #0
 800d678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d67a:	1c51      	adds	r1, r2, #1
 800d67c:	9115      	str	r1, [sp, #84]	; 0x54
 800d67e:	7852      	ldrb	r2, [r2, #1]
 800d680:	4618      	mov	r0, r3
 800d682:	e7c9      	b.n	800d618 <_strtod_l+0x1e0>
 800d684:	4658      	mov	r0, fp
 800d686:	e7d2      	b.n	800d62e <_strtod_l+0x1f6>
 800d688:	2b08      	cmp	r3, #8
 800d68a:	f103 0301 	add.w	r3, r3, #1
 800d68e:	dc03      	bgt.n	800d698 <_strtod_l+0x260>
 800d690:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d692:	434f      	muls	r7, r1
 800d694:	9709      	str	r7, [sp, #36]	; 0x24
 800d696:	e7e1      	b.n	800d65c <_strtod_l+0x224>
 800d698:	2b10      	cmp	r3, #16
 800d69a:	bfd8      	it	le
 800d69c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d6a0:	e7dc      	b.n	800d65c <_strtod_l+0x224>
 800d6a2:	2e10      	cmp	r6, #16
 800d6a4:	bfdc      	itt	le
 800d6a6:	230a      	movle	r3, #10
 800d6a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d6ac:	e7e3      	b.n	800d676 <_strtod_l+0x23e>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	9305      	str	r3, [sp, #20]
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e780      	b.n	800d5b8 <_strtod_l+0x180>
 800d6b6:	f04f 0c00 	mov.w	ip, #0
 800d6ba:	1caa      	adds	r2, r5, #2
 800d6bc:	9215      	str	r2, [sp, #84]	; 0x54
 800d6be:	78aa      	ldrb	r2, [r5, #2]
 800d6c0:	e788      	b.n	800d5d4 <_strtod_l+0x19c>
 800d6c2:	f04f 0c01 	mov.w	ip, #1
 800d6c6:	e7f8      	b.n	800d6ba <_strtod_l+0x282>
 800d6c8:	08013480 	.word	0x08013480
 800d6cc:	0801347c 	.word	0x0801347c
 800d6d0:	7ff00000 	.word	0x7ff00000
 800d6d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d6d6:	1c51      	adds	r1, r2, #1
 800d6d8:	9115      	str	r1, [sp, #84]	; 0x54
 800d6da:	7852      	ldrb	r2, [r2, #1]
 800d6dc:	2a30      	cmp	r2, #48	; 0x30
 800d6de:	d0f9      	beq.n	800d6d4 <_strtod_l+0x29c>
 800d6e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d6e4:	2908      	cmp	r1, #8
 800d6e6:	f63f af7a 	bhi.w	800d5de <_strtod_l+0x1a6>
 800d6ea:	3a30      	subs	r2, #48	; 0x30
 800d6ec:	9208      	str	r2, [sp, #32]
 800d6ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d6f0:	920c      	str	r2, [sp, #48]	; 0x30
 800d6f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d6f4:	1c57      	adds	r7, r2, #1
 800d6f6:	9715      	str	r7, [sp, #84]	; 0x54
 800d6f8:	7852      	ldrb	r2, [r2, #1]
 800d6fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d6fe:	f1be 0f09 	cmp.w	lr, #9
 800d702:	d938      	bls.n	800d776 <_strtod_l+0x33e>
 800d704:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d706:	1a7f      	subs	r7, r7, r1
 800d708:	2f08      	cmp	r7, #8
 800d70a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d70e:	dc03      	bgt.n	800d718 <_strtod_l+0x2e0>
 800d710:	9908      	ldr	r1, [sp, #32]
 800d712:	428f      	cmp	r7, r1
 800d714:	bfa8      	it	ge
 800d716:	460f      	movge	r7, r1
 800d718:	f1bc 0f00 	cmp.w	ip, #0
 800d71c:	d000      	beq.n	800d720 <_strtod_l+0x2e8>
 800d71e:	427f      	negs	r7, r7
 800d720:	2e00      	cmp	r6, #0
 800d722:	d14f      	bne.n	800d7c4 <_strtod_l+0x38c>
 800d724:	9904      	ldr	r1, [sp, #16]
 800d726:	4301      	orrs	r1, r0
 800d728:	f47f aec1 	bne.w	800d4ae <_strtod_l+0x76>
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f47f aedb 	bne.w	800d4e8 <_strtod_l+0xb0>
 800d732:	2a69      	cmp	r2, #105	; 0x69
 800d734:	d029      	beq.n	800d78a <_strtod_l+0x352>
 800d736:	dc26      	bgt.n	800d786 <_strtod_l+0x34e>
 800d738:	2a49      	cmp	r2, #73	; 0x49
 800d73a:	d026      	beq.n	800d78a <_strtod_l+0x352>
 800d73c:	2a4e      	cmp	r2, #78	; 0x4e
 800d73e:	f47f aed3 	bne.w	800d4e8 <_strtod_l+0xb0>
 800d742:	499b      	ldr	r1, [pc, #620]	; (800d9b0 <_strtod_l+0x578>)
 800d744:	a815      	add	r0, sp, #84	; 0x54
 800d746:	f002 fdad 	bl	80102a4 <__match>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	f43f aecc 	beq.w	800d4e8 <_strtod_l+0xb0>
 800d750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b28      	cmp	r3, #40	; 0x28
 800d756:	d12f      	bne.n	800d7b8 <_strtod_l+0x380>
 800d758:	4996      	ldr	r1, [pc, #600]	; (800d9b4 <_strtod_l+0x57c>)
 800d75a:	aa18      	add	r2, sp, #96	; 0x60
 800d75c:	a815      	add	r0, sp, #84	; 0x54
 800d75e:	f002 fdb5 	bl	80102cc <__hexnan>
 800d762:	2805      	cmp	r0, #5
 800d764:	d128      	bne.n	800d7b8 <_strtod_l+0x380>
 800d766:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d76c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d770:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d774:	e69b      	b.n	800d4ae <_strtod_l+0x76>
 800d776:	9f08      	ldr	r7, [sp, #32]
 800d778:	210a      	movs	r1, #10
 800d77a:	fb01 2107 	mla	r1, r1, r7, r2
 800d77e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d782:	9208      	str	r2, [sp, #32]
 800d784:	e7b5      	b.n	800d6f2 <_strtod_l+0x2ba>
 800d786:	2a6e      	cmp	r2, #110	; 0x6e
 800d788:	e7d9      	b.n	800d73e <_strtod_l+0x306>
 800d78a:	498b      	ldr	r1, [pc, #556]	; (800d9b8 <_strtod_l+0x580>)
 800d78c:	a815      	add	r0, sp, #84	; 0x54
 800d78e:	f002 fd89 	bl	80102a4 <__match>
 800d792:	2800      	cmp	r0, #0
 800d794:	f43f aea8 	beq.w	800d4e8 <_strtod_l+0xb0>
 800d798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d79a:	4988      	ldr	r1, [pc, #544]	; (800d9bc <_strtod_l+0x584>)
 800d79c:	3b01      	subs	r3, #1
 800d79e:	a815      	add	r0, sp, #84	; 0x54
 800d7a0:	9315      	str	r3, [sp, #84]	; 0x54
 800d7a2:	f002 fd7f 	bl	80102a4 <__match>
 800d7a6:	b910      	cbnz	r0, 800d7ae <_strtod_l+0x376>
 800d7a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	9315      	str	r3, [sp, #84]	; 0x54
 800d7ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d9cc <_strtod_l+0x594>
 800d7b2:	f04f 0800 	mov.w	r8, #0
 800d7b6:	e67a      	b.n	800d4ae <_strtod_l+0x76>
 800d7b8:	4881      	ldr	r0, [pc, #516]	; (800d9c0 <_strtod_l+0x588>)
 800d7ba:	f001 fbfd 	bl	800efb8 <nan>
 800d7be:	ec59 8b10 	vmov	r8, r9, d0
 800d7c2:	e674      	b.n	800d4ae <_strtod_l+0x76>
 800d7c4:	9b05      	ldr	r3, [sp, #20]
 800d7c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7c8:	1afb      	subs	r3, r7, r3
 800d7ca:	f1bb 0f00 	cmp.w	fp, #0
 800d7ce:	bf08      	it	eq
 800d7d0:	46b3      	moveq	fp, r6
 800d7d2:	2e10      	cmp	r6, #16
 800d7d4:	9308      	str	r3, [sp, #32]
 800d7d6:	4635      	mov	r5, r6
 800d7d8:	bfa8      	it	ge
 800d7da:	2510      	movge	r5, #16
 800d7dc:	f7f2 feaa 	bl	8000534 <__aeabi_ui2d>
 800d7e0:	2e09      	cmp	r6, #9
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	dd13      	ble.n	800d810 <_strtod_l+0x3d8>
 800d7e8:	4b76      	ldr	r3, [pc, #472]	; (800d9c4 <_strtod_l+0x58c>)
 800d7ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d7ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d7f2:	f7f2 ff19 	bl	8000628 <__aeabi_dmul>
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	4689      	mov	r9, r1
 800d7fc:	f7f2 fe9a 	bl	8000534 <__aeabi_ui2d>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4640      	mov	r0, r8
 800d806:	4649      	mov	r1, r9
 800d808:	f7f2 fd58 	bl	80002bc <__adddf3>
 800d80c:	4680      	mov	r8, r0
 800d80e:	4689      	mov	r9, r1
 800d810:	2e0f      	cmp	r6, #15
 800d812:	dc38      	bgt.n	800d886 <_strtod_l+0x44e>
 800d814:	9b08      	ldr	r3, [sp, #32]
 800d816:	2b00      	cmp	r3, #0
 800d818:	f43f ae49 	beq.w	800d4ae <_strtod_l+0x76>
 800d81c:	dd24      	ble.n	800d868 <_strtod_l+0x430>
 800d81e:	2b16      	cmp	r3, #22
 800d820:	dc0b      	bgt.n	800d83a <_strtod_l+0x402>
 800d822:	4968      	ldr	r1, [pc, #416]	; (800d9c4 <_strtod_l+0x58c>)
 800d824:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d82c:	4642      	mov	r2, r8
 800d82e:	464b      	mov	r3, r9
 800d830:	f7f2 fefa 	bl	8000628 <__aeabi_dmul>
 800d834:	4680      	mov	r8, r0
 800d836:	4689      	mov	r9, r1
 800d838:	e639      	b.n	800d4ae <_strtod_l+0x76>
 800d83a:	9a08      	ldr	r2, [sp, #32]
 800d83c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d840:	4293      	cmp	r3, r2
 800d842:	db20      	blt.n	800d886 <_strtod_l+0x44e>
 800d844:	4c5f      	ldr	r4, [pc, #380]	; (800d9c4 <_strtod_l+0x58c>)
 800d846:	f1c6 060f 	rsb	r6, r6, #15
 800d84a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d84e:	4642      	mov	r2, r8
 800d850:	464b      	mov	r3, r9
 800d852:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d856:	f7f2 fee7 	bl	8000628 <__aeabi_dmul>
 800d85a:	9b08      	ldr	r3, [sp, #32]
 800d85c:	1b9e      	subs	r6, r3, r6
 800d85e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d862:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d866:	e7e3      	b.n	800d830 <_strtod_l+0x3f8>
 800d868:	9b08      	ldr	r3, [sp, #32]
 800d86a:	3316      	adds	r3, #22
 800d86c:	db0b      	blt.n	800d886 <_strtod_l+0x44e>
 800d86e:	9b05      	ldr	r3, [sp, #20]
 800d870:	1bdf      	subs	r7, r3, r7
 800d872:	4b54      	ldr	r3, [pc, #336]	; (800d9c4 <_strtod_l+0x58c>)
 800d874:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d87c:	4640      	mov	r0, r8
 800d87e:	4649      	mov	r1, r9
 800d880:	f7f2 fffc 	bl	800087c <__aeabi_ddiv>
 800d884:	e7d6      	b.n	800d834 <_strtod_l+0x3fc>
 800d886:	9b08      	ldr	r3, [sp, #32]
 800d888:	1b75      	subs	r5, r6, r5
 800d88a:	441d      	add	r5, r3
 800d88c:	2d00      	cmp	r5, #0
 800d88e:	dd70      	ble.n	800d972 <_strtod_l+0x53a>
 800d890:	f015 030f 	ands.w	r3, r5, #15
 800d894:	d00a      	beq.n	800d8ac <_strtod_l+0x474>
 800d896:	494b      	ldr	r1, [pc, #300]	; (800d9c4 <_strtod_l+0x58c>)
 800d898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d89c:	4642      	mov	r2, r8
 800d89e:	464b      	mov	r3, r9
 800d8a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a4:	f7f2 fec0 	bl	8000628 <__aeabi_dmul>
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	4689      	mov	r9, r1
 800d8ac:	f035 050f 	bics.w	r5, r5, #15
 800d8b0:	d04d      	beq.n	800d94e <_strtod_l+0x516>
 800d8b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d8b6:	dd22      	ble.n	800d8fe <_strtod_l+0x4c6>
 800d8b8:	2500      	movs	r5, #0
 800d8ba:	46ab      	mov	fp, r5
 800d8bc:	9509      	str	r5, [sp, #36]	; 0x24
 800d8be:	9505      	str	r5, [sp, #20]
 800d8c0:	2322      	movs	r3, #34	; 0x22
 800d8c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d9cc <_strtod_l+0x594>
 800d8c6:	6023      	str	r3, [r4, #0]
 800d8c8:	f04f 0800 	mov.w	r8, #0
 800d8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f43f aded 	beq.w	800d4ae <_strtod_l+0x76>
 800d8d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f002 fde6 	bl	80104a8 <_Bfree>
 800d8dc:	9905      	ldr	r1, [sp, #20]
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f002 fde2 	bl	80104a8 <_Bfree>
 800d8e4:	4659      	mov	r1, fp
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f002 fdde 	bl	80104a8 <_Bfree>
 800d8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f002 fdda 	bl	80104a8 <_Bfree>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f002 fdd6 	bl	80104a8 <_Bfree>
 800d8fc:	e5d7      	b.n	800d4ae <_strtod_l+0x76>
 800d8fe:	4b32      	ldr	r3, [pc, #200]	; (800d9c8 <_strtod_l+0x590>)
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	2300      	movs	r3, #0
 800d904:	112d      	asrs	r5, r5, #4
 800d906:	4640      	mov	r0, r8
 800d908:	4649      	mov	r1, r9
 800d90a:	469a      	mov	sl, r3
 800d90c:	2d01      	cmp	r5, #1
 800d90e:	dc21      	bgt.n	800d954 <_strtod_l+0x51c>
 800d910:	b10b      	cbz	r3, 800d916 <_strtod_l+0x4de>
 800d912:	4680      	mov	r8, r0
 800d914:	4689      	mov	r9, r1
 800d916:	492c      	ldr	r1, [pc, #176]	; (800d9c8 <_strtod_l+0x590>)
 800d918:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d91c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d920:	4642      	mov	r2, r8
 800d922:	464b      	mov	r3, r9
 800d924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d928:	f7f2 fe7e 	bl	8000628 <__aeabi_dmul>
 800d92c:	4b27      	ldr	r3, [pc, #156]	; (800d9cc <_strtod_l+0x594>)
 800d92e:	460a      	mov	r2, r1
 800d930:	400b      	ands	r3, r1
 800d932:	4927      	ldr	r1, [pc, #156]	; (800d9d0 <_strtod_l+0x598>)
 800d934:	428b      	cmp	r3, r1
 800d936:	4680      	mov	r8, r0
 800d938:	d8be      	bhi.n	800d8b8 <_strtod_l+0x480>
 800d93a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d93e:	428b      	cmp	r3, r1
 800d940:	bf86      	itte	hi
 800d942:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d9d4 <_strtod_l+0x59c>
 800d946:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800d94a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d94e:	2300      	movs	r3, #0
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	e07b      	b.n	800da4c <_strtod_l+0x614>
 800d954:	07ea      	lsls	r2, r5, #31
 800d956:	d505      	bpl.n	800d964 <_strtod_l+0x52c>
 800d958:	9b04      	ldr	r3, [sp, #16]
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7f2 fe63 	bl	8000628 <__aeabi_dmul>
 800d962:	2301      	movs	r3, #1
 800d964:	9a04      	ldr	r2, [sp, #16]
 800d966:	3208      	adds	r2, #8
 800d968:	f10a 0a01 	add.w	sl, sl, #1
 800d96c:	106d      	asrs	r5, r5, #1
 800d96e:	9204      	str	r2, [sp, #16]
 800d970:	e7cc      	b.n	800d90c <_strtod_l+0x4d4>
 800d972:	d0ec      	beq.n	800d94e <_strtod_l+0x516>
 800d974:	426d      	negs	r5, r5
 800d976:	f015 020f 	ands.w	r2, r5, #15
 800d97a:	d00a      	beq.n	800d992 <_strtod_l+0x55a>
 800d97c:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <_strtod_l+0x58c>)
 800d97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 ff77 	bl	800087c <__aeabi_ddiv>
 800d98e:	4680      	mov	r8, r0
 800d990:	4689      	mov	r9, r1
 800d992:	112d      	asrs	r5, r5, #4
 800d994:	d0db      	beq.n	800d94e <_strtod_l+0x516>
 800d996:	2d1f      	cmp	r5, #31
 800d998:	dd1e      	ble.n	800d9d8 <_strtod_l+0x5a0>
 800d99a:	2500      	movs	r5, #0
 800d99c:	46ab      	mov	fp, r5
 800d99e:	9509      	str	r5, [sp, #36]	; 0x24
 800d9a0:	9505      	str	r5, [sp, #20]
 800d9a2:	2322      	movs	r3, #34	; 0x22
 800d9a4:	f04f 0800 	mov.w	r8, #0
 800d9a8:	f04f 0900 	mov.w	r9, #0
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	e78d      	b.n	800d8cc <_strtod_l+0x494>
 800d9b0:	080135de 	.word	0x080135de
 800d9b4:	08013494 	.word	0x08013494
 800d9b8:	080135d6 	.word	0x080135d6
 800d9bc:	0801360e 	.word	0x0801360e
 800d9c0:	080138bb 	.word	0x080138bb
 800d9c4:	08013780 	.word	0x08013780
 800d9c8:	08013758 	.word	0x08013758
 800d9cc:	7ff00000 	.word	0x7ff00000
 800d9d0:	7ca00000 	.word	0x7ca00000
 800d9d4:	7fefffff 	.word	0x7fefffff
 800d9d8:	f015 0310 	ands.w	r3, r5, #16
 800d9dc:	bf18      	it	ne
 800d9de:	236a      	movne	r3, #106	; 0x6a
 800d9e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800dd84 <_strtod_l+0x94c>
 800d9e4:	9304      	str	r3, [sp, #16]
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	07ea      	lsls	r2, r5, #31
 800d9ee:	d504      	bpl.n	800d9fa <_strtod_l+0x5c2>
 800d9f0:	e9da 2300 	ldrd	r2, r3, [sl]
 800d9f4:	f7f2 fe18 	bl	8000628 <__aeabi_dmul>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	106d      	asrs	r5, r5, #1
 800d9fc:	f10a 0a08 	add.w	sl, sl, #8
 800da00:	d1f4      	bne.n	800d9ec <_strtod_l+0x5b4>
 800da02:	b10b      	cbz	r3, 800da08 <_strtod_l+0x5d0>
 800da04:	4680      	mov	r8, r0
 800da06:	4689      	mov	r9, r1
 800da08:	9b04      	ldr	r3, [sp, #16]
 800da0a:	b1bb      	cbz	r3, 800da3c <_strtod_l+0x604>
 800da0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800da10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da14:	2b00      	cmp	r3, #0
 800da16:	4649      	mov	r1, r9
 800da18:	dd10      	ble.n	800da3c <_strtod_l+0x604>
 800da1a:	2b1f      	cmp	r3, #31
 800da1c:	f340 811e 	ble.w	800dc5c <_strtod_l+0x824>
 800da20:	2b34      	cmp	r3, #52	; 0x34
 800da22:	bfde      	ittt	le
 800da24:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800da28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800da2c:	4093      	lslle	r3, r2
 800da2e:	f04f 0800 	mov.w	r8, #0
 800da32:	bfcc      	ite	gt
 800da34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800da38:	ea03 0901 	andle.w	r9, r3, r1
 800da3c:	2200      	movs	r2, #0
 800da3e:	2300      	movs	r3, #0
 800da40:	4640      	mov	r0, r8
 800da42:	4649      	mov	r1, r9
 800da44:	f7f3 f858 	bl	8000af8 <__aeabi_dcmpeq>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d1a6      	bne.n	800d99a <_strtod_l+0x562>
 800da4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da52:	4633      	mov	r3, r6
 800da54:	465a      	mov	r2, fp
 800da56:	4620      	mov	r0, r4
 800da58:	f002 fd8e 	bl	8010578 <__s2b>
 800da5c:	9009      	str	r0, [sp, #36]	; 0x24
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f af2a 	beq.w	800d8b8 <_strtod_l+0x480>
 800da64:	9a08      	ldr	r2, [sp, #32]
 800da66:	9b05      	ldr	r3, [sp, #20]
 800da68:	2a00      	cmp	r2, #0
 800da6a:	eba3 0307 	sub.w	r3, r3, r7
 800da6e:	bfa8      	it	ge
 800da70:	2300      	movge	r3, #0
 800da72:	930c      	str	r3, [sp, #48]	; 0x30
 800da74:	2500      	movs	r5, #0
 800da76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da7a:	9312      	str	r3, [sp, #72]	; 0x48
 800da7c:	46ab      	mov	fp, r5
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	4620      	mov	r0, r4
 800da82:	6859      	ldr	r1, [r3, #4]
 800da84:	f002 fcd0 	bl	8010428 <_Balloc>
 800da88:	9005      	str	r0, [sp, #20]
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f af18 	beq.w	800d8c0 <_strtod_l+0x488>
 800da90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	3202      	adds	r2, #2
 800da96:	f103 010c 	add.w	r1, r3, #12
 800da9a:	0092      	lsls	r2, r2, #2
 800da9c:	300c      	adds	r0, #12
 800da9e:	f001 fa7a 	bl	800ef96 <memcpy>
 800daa2:	ec49 8b10 	vmov	d0, r8, r9
 800daa6:	aa18      	add	r2, sp, #96	; 0x60
 800daa8:	a917      	add	r1, sp, #92	; 0x5c
 800daaa:	4620      	mov	r0, r4
 800daac:	f003 f898 	bl	8010be0 <__d2b>
 800dab0:	ec49 8b18 	vmov	d8, r8, r9
 800dab4:	9016      	str	r0, [sp, #88]	; 0x58
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f43f af02 	beq.w	800d8c0 <_strtod_l+0x488>
 800dabc:	2101      	movs	r1, #1
 800dabe:	4620      	mov	r0, r4
 800dac0:	f002 fdf2 	bl	80106a8 <__i2b>
 800dac4:	4683      	mov	fp, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	f43f aefa 	beq.w	800d8c0 <_strtod_l+0x488>
 800dacc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dad0:	2e00      	cmp	r6, #0
 800dad2:	bfab      	itete	ge
 800dad4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800dad6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800dad8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dada:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800dade:	bfac      	ite	ge
 800dae0:	eb06 0a03 	addge.w	sl, r6, r3
 800dae4:	1b9f      	sublt	r7, r3, r6
 800dae6:	9b04      	ldr	r3, [sp, #16]
 800dae8:	1af6      	subs	r6, r6, r3
 800daea:	4416      	add	r6, r2
 800daec:	4ba0      	ldr	r3, [pc, #640]	; (800dd70 <_strtod_l+0x938>)
 800daee:	3e01      	subs	r6, #1
 800daf0:	429e      	cmp	r6, r3
 800daf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800daf6:	f280 80c4 	bge.w	800dc82 <_strtod_l+0x84a>
 800dafa:	1b9b      	subs	r3, r3, r6
 800dafc:	2b1f      	cmp	r3, #31
 800dafe:	eba2 0203 	sub.w	r2, r2, r3
 800db02:	f04f 0101 	mov.w	r1, #1
 800db06:	f300 80b0 	bgt.w	800dc6a <_strtod_l+0x832>
 800db0a:	fa01 f303 	lsl.w	r3, r1, r3
 800db0e:	930e      	str	r3, [sp, #56]	; 0x38
 800db10:	2300      	movs	r3, #0
 800db12:	930d      	str	r3, [sp, #52]	; 0x34
 800db14:	eb0a 0602 	add.w	r6, sl, r2
 800db18:	9b04      	ldr	r3, [sp, #16]
 800db1a:	45b2      	cmp	sl, r6
 800db1c:	4417      	add	r7, r2
 800db1e:	441f      	add	r7, r3
 800db20:	4653      	mov	r3, sl
 800db22:	bfa8      	it	ge
 800db24:	4633      	movge	r3, r6
 800db26:	42bb      	cmp	r3, r7
 800db28:	bfa8      	it	ge
 800db2a:	463b      	movge	r3, r7
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	bfc2      	ittt	gt
 800db30:	1af6      	subgt	r6, r6, r3
 800db32:	1aff      	subgt	r7, r7, r3
 800db34:	ebaa 0a03 	subgt.w	sl, sl, r3
 800db38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	dd17      	ble.n	800db6e <_strtod_l+0x736>
 800db3e:	4659      	mov	r1, fp
 800db40:	461a      	mov	r2, r3
 800db42:	4620      	mov	r0, r4
 800db44:	f002 fe70 	bl	8010828 <__pow5mult>
 800db48:	4683      	mov	fp, r0
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f43f aeb8 	beq.w	800d8c0 <_strtod_l+0x488>
 800db50:	4601      	mov	r1, r0
 800db52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800db54:	4620      	mov	r0, r4
 800db56:	f002 fdbd 	bl	80106d4 <__multiply>
 800db5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f43f aeaf 	beq.w	800d8c0 <_strtod_l+0x488>
 800db62:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db64:	4620      	mov	r0, r4
 800db66:	f002 fc9f 	bl	80104a8 <_Bfree>
 800db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db6c:	9316      	str	r3, [sp, #88]	; 0x58
 800db6e:	2e00      	cmp	r6, #0
 800db70:	f300 808c 	bgt.w	800dc8c <_strtod_l+0x854>
 800db74:	9b08      	ldr	r3, [sp, #32]
 800db76:	2b00      	cmp	r3, #0
 800db78:	dd08      	ble.n	800db8c <_strtod_l+0x754>
 800db7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db7c:	9905      	ldr	r1, [sp, #20]
 800db7e:	4620      	mov	r0, r4
 800db80:	f002 fe52 	bl	8010828 <__pow5mult>
 800db84:	9005      	str	r0, [sp, #20]
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f ae9a 	beq.w	800d8c0 <_strtod_l+0x488>
 800db8c:	2f00      	cmp	r7, #0
 800db8e:	dd08      	ble.n	800dba2 <_strtod_l+0x76a>
 800db90:	9905      	ldr	r1, [sp, #20]
 800db92:	463a      	mov	r2, r7
 800db94:	4620      	mov	r0, r4
 800db96:	f002 fea1 	bl	80108dc <__lshift>
 800db9a:	9005      	str	r0, [sp, #20]
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f43f ae8f 	beq.w	800d8c0 <_strtod_l+0x488>
 800dba2:	f1ba 0f00 	cmp.w	sl, #0
 800dba6:	dd08      	ble.n	800dbba <_strtod_l+0x782>
 800dba8:	4659      	mov	r1, fp
 800dbaa:	4652      	mov	r2, sl
 800dbac:	4620      	mov	r0, r4
 800dbae:	f002 fe95 	bl	80108dc <__lshift>
 800dbb2:	4683      	mov	fp, r0
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f43f ae83 	beq.w	800d8c0 <_strtod_l+0x488>
 800dbba:	9a05      	ldr	r2, [sp, #20]
 800dbbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f002 ff14 	bl	80109ec <__mdiff>
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f43f ae7a 	beq.w	800d8c0 <_strtod_l+0x488>
 800dbcc:	68c3      	ldr	r3, [r0, #12]
 800dbce:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	60c3      	str	r3, [r0, #12]
 800dbd4:	4659      	mov	r1, fp
 800dbd6:	f002 feed 	bl	80109b4 <__mcmp>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	da60      	bge.n	800dca0 <_strtod_l+0x868>
 800dbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe0:	ea53 0308 	orrs.w	r3, r3, r8
 800dbe4:	f040 8084 	bne.w	800dcf0 <_strtod_l+0x8b8>
 800dbe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d17f      	bne.n	800dcf0 <_strtod_l+0x8b8>
 800dbf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbf4:	0d1b      	lsrs	r3, r3, #20
 800dbf6:	051b      	lsls	r3, r3, #20
 800dbf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dbfc:	d978      	bls.n	800dcf0 <_strtod_l+0x8b8>
 800dbfe:	696b      	ldr	r3, [r5, #20]
 800dc00:	b913      	cbnz	r3, 800dc08 <_strtod_l+0x7d0>
 800dc02:	692b      	ldr	r3, [r5, #16]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	dd73      	ble.n	800dcf0 <_strtod_l+0x8b8>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f002 fe65 	bl	80108dc <__lshift>
 800dc12:	4659      	mov	r1, fp
 800dc14:	4605      	mov	r5, r0
 800dc16:	f002 fecd 	bl	80109b4 <__mcmp>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	dd68      	ble.n	800dcf0 <_strtod_l+0x8b8>
 800dc1e:	9904      	ldr	r1, [sp, #16]
 800dc20:	4a54      	ldr	r2, [pc, #336]	; (800dd74 <_strtod_l+0x93c>)
 800dc22:	464b      	mov	r3, r9
 800dc24:	2900      	cmp	r1, #0
 800dc26:	f000 8084 	beq.w	800dd32 <_strtod_l+0x8fa>
 800dc2a:	ea02 0109 	and.w	r1, r2, r9
 800dc2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc32:	dc7e      	bgt.n	800dd32 <_strtod_l+0x8fa>
 800dc34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc38:	f77f aeb3 	ble.w	800d9a2 <_strtod_l+0x56a>
 800dc3c:	4b4e      	ldr	r3, [pc, #312]	; (800dd78 <_strtod_l+0x940>)
 800dc3e:	4640      	mov	r0, r8
 800dc40:	4649      	mov	r1, r9
 800dc42:	2200      	movs	r2, #0
 800dc44:	f7f2 fcf0 	bl	8000628 <__aeabi_dmul>
 800dc48:	4b4a      	ldr	r3, [pc, #296]	; (800dd74 <_strtod_l+0x93c>)
 800dc4a:	400b      	ands	r3, r1
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4689      	mov	r9, r1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f47f ae3f 	bne.w	800d8d4 <_strtod_l+0x49c>
 800dc56:	2322      	movs	r3, #34	; 0x22
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	e63b      	b.n	800d8d4 <_strtod_l+0x49c>
 800dc5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc60:	fa02 f303 	lsl.w	r3, r2, r3
 800dc64:	ea03 0808 	and.w	r8, r3, r8
 800dc68:	e6e8      	b.n	800da3c <_strtod_l+0x604>
 800dc6a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dc6e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dc72:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dc76:	36e2      	adds	r6, #226	; 0xe2
 800dc78:	fa01 f306 	lsl.w	r3, r1, r6
 800dc7c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800dc80:	e748      	b.n	800db14 <_strtod_l+0x6dc>
 800dc82:	2100      	movs	r1, #0
 800dc84:	2301      	movs	r3, #1
 800dc86:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800dc8a:	e743      	b.n	800db14 <_strtod_l+0x6dc>
 800dc8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc8e:	4632      	mov	r2, r6
 800dc90:	4620      	mov	r0, r4
 800dc92:	f002 fe23 	bl	80108dc <__lshift>
 800dc96:	9016      	str	r0, [sp, #88]	; 0x58
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	f47f af6b 	bne.w	800db74 <_strtod_l+0x73c>
 800dc9e:	e60f      	b.n	800d8c0 <_strtod_l+0x488>
 800dca0:	46ca      	mov	sl, r9
 800dca2:	d171      	bne.n	800dd88 <_strtod_l+0x950>
 800dca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dca6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcaa:	b352      	cbz	r2, 800dd02 <_strtod_l+0x8ca>
 800dcac:	4a33      	ldr	r2, [pc, #204]	; (800dd7c <_strtod_l+0x944>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d12a      	bne.n	800dd08 <_strtod_l+0x8d0>
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	4641      	mov	r1, r8
 800dcb6:	b1fb      	cbz	r3, 800dcf8 <_strtod_l+0x8c0>
 800dcb8:	4b2e      	ldr	r3, [pc, #184]	; (800dd74 <_strtod_l+0x93c>)
 800dcba:	ea09 0303 	and.w	r3, r9, r3
 800dcbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcc6:	d81a      	bhi.n	800dcfe <_strtod_l+0x8c6>
 800dcc8:	0d1b      	lsrs	r3, r3, #20
 800dcca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcce:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	d118      	bne.n	800dd08 <_strtod_l+0x8d0>
 800dcd6:	4b2a      	ldr	r3, [pc, #168]	; (800dd80 <_strtod_l+0x948>)
 800dcd8:	459a      	cmp	sl, r3
 800dcda:	d102      	bne.n	800dce2 <_strtod_l+0x8aa>
 800dcdc:	3101      	adds	r1, #1
 800dcde:	f43f adef 	beq.w	800d8c0 <_strtod_l+0x488>
 800dce2:	4b24      	ldr	r3, [pc, #144]	; (800dd74 <_strtod_l+0x93c>)
 800dce4:	ea0a 0303 	and.w	r3, sl, r3
 800dce8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800dcec:	f04f 0800 	mov.w	r8, #0
 800dcf0:	9b04      	ldr	r3, [sp, #16]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1a2      	bne.n	800dc3c <_strtod_l+0x804>
 800dcf6:	e5ed      	b.n	800d8d4 <_strtod_l+0x49c>
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcfc:	e7e9      	b.n	800dcd2 <_strtod_l+0x89a>
 800dcfe:	4613      	mov	r3, r2
 800dd00:	e7e7      	b.n	800dcd2 <_strtod_l+0x89a>
 800dd02:	ea53 0308 	orrs.w	r3, r3, r8
 800dd06:	d08a      	beq.n	800dc1e <_strtod_l+0x7e6>
 800dd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd0a:	b1e3      	cbz	r3, 800dd46 <_strtod_l+0x90e>
 800dd0c:	ea13 0f0a 	tst.w	r3, sl
 800dd10:	d0ee      	beq.n	800dcf0 <_strtod_l+0x8b8>
 800dd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd14:	9a04      	ldr	r2, [sp, #16]
 800dd16:	4640      	mov	r0, r8
 800dd18:	4649      	mov	r1, r9
 800dd1a:	b1c3      	cbz	r3, 800dd4e <_strtod_l+0x916>
 800dd1c:	f7ff fb6f 	bl	800d3fe <sulp>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	ec51 0b18 	vmov	r0, r1, d8
 800dd28:	f7f2 fac8 	bl	80002bc <__adddf3>
 800dd2c:	4680      	mov	r8, r0
 800dd2e:	4689      	mov	r9, r1
 800dd30:	e7de      	b.n	800dcf0 <_strtod_l+0x8b8>
 800dd32:	4013      	ands	r3, r2
 800dd34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd38:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800dd3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800dd40:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800dd44:	e7d4      	b.n	800dcf0 <_strtod_l+0x8b8>
 800dd46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd48:	ea13 0f08 	tst.w	r3, r8
 800dd4c:	e7e0      	b.n	800dd10 <_strtod_l+0x8d8>
 800dd4e:	f7ff fb56 	bl	800d3fe <sulp>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	ec51 0b18 	vmov	r0, r1, d8
 800dd5a:	f7f2 faad 	bl	80002b8 <__aeabi_dsub>
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2300      	movs	r3, #0
 800dd62:	4680      	mov	r8, r0
 800dd64:	4689      	mov	r9, r1
 800dd66:	f7f2 fec7 	bl	8000af8 <__aeabi_dcmpeq>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d0c0      	beq.n	800dcf0 <_strtod_l+0x8b8>
 800dd6e:	e618      	b.n	800d9a2 <_strtod_l+0x56a>
 800dd70:	fffffc02 	.word	0xfffffc02
 800dd74:	7ff00000 	.word	0x7ff00000
 800dd78:	39500000 	.word	0x39500000
 800dd7c:	000fffff 	.word	0x000fffff
 800dd80:	7fefffff 	.word	0x7fefffff
 800dd84:	080134a8 	.word	0x080134a8
 800dd88:	4659      	mov	r1, fp
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f002 ff82 	bl	8010c94 <__ratio>
 800dd90:	ec57 6b10 	vmov	r6, r7, d0
 800dd94:	ee10 0a10 	vmov	r0, s0
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 febe 	bl	8000b20 <__aeabi_dcmple>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d071      	beq.n	800de8c <_strtod_l+0xa54>
 800dda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d17c      	bne.n	800dea8 <_strtod_l+0xa70>
 800ddae:	f1b8 0f00 	cmp.w	r8, #0
 800ddb2:	d15a      	bne.n	800de6a <_strtod_l+0xa32>
 800ddb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d15d      	bne.n	800de78 <_strtod_l+0xa40>
 800ddbc:	4b90      	ldr	r3, [pc, #576]	; (800e000 <_strtod_l+0xbc8>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 fea2 	bl	8000b0c <__aeabi_dcmplt>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d15c      	bne.n	800de86 <_strtod_l+0xa4e>
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4639      	mov	r1, r7
 800ddd0:	4b8c      	ldr	r3, [pc, #560]	; (800e004 <_strtod_l+0xbcc>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f7f2 fc28 	bl	8000628 <__aeabi_dmul>
 800ddd8:	4606      	mov	r6, r0
 800ddda:	460f      	mov	r7, r1
 800dddc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dde0:	9606      	str	r6, [sp, #24]
 800dde2:	9307      	str	r3, [sp, #28]
 800dde4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dde8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ddec:	4b86      	ldr	r3, [pc, #536]	; (800e008 <_strtod_l+0xbd0>)
 800ddee:	ea0a 0303 	and.w	r3, sl, r3
 800ddf2:	930d      	str	r3, [sp, #52]	; 0x34
 800ddf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddf6:	4b85      	ldr	r3, [pc, #532]	; (800e00c <_strtod_l+0xbd4>)
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f040 8090 	bne.w	800df1e <_strtod_l+0xae6>
 800ddfe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800de02:	ec49 8b10 	vmov	d0, r8, r9
 800de06:	f002 fe7b 	bl	8010b00 <__ulp>
 800de0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de0e:	ec51 0b10 	vmov	r0, r1, d0
 800de12:	f7f2 fc09 	bl	8000628 <__aeabi_dmul>
 800de16:	4642      	mov	r2, r8
 800de18:	464b      	mov	r3, r9
 800de1a:	f7f2 fa4f 	bl	80002bc <__adddf3>
 800de1e:	460b      	mov	r3, r1
 800de20:	4979      	ldr	r1, [pc, #484]	; (800e008 <_strtod_l+0xbd0>)
 800de22:	4a7b      	ldr	r2, [pc, #492]	; (800e010 <_strtod_l+0xbd8>)
 800de24:	4019      	ands	r1, r3
 800de26:	4291      	cmp	r1, r2
 800de28:	4680      	mov	r8, r0
 800de2a:	d944      	bls.n	800deb6 <_strtod_l+0xa7e>
 800de2c:	ee18 2a90 	vmov	r2, s17
 800de30:	4b78      	ldr	r3, [pc, #480]	; (800e014 <_strtod_l+0xbdc>)
 800de32:	429a      	cmp	r2, r3
 800de34:	d104      	bne.n	800de40 <_strtod_l+0xa08>
 800de36:	ee18 3a10 	vmov	r3, s16
 800de3a:	3301      	adds	r3, #1
 800de3c:	f43f ad40 	beq.w	800d8c0 <_strtod_l+0x488>
 800de40:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e014 <_strtod_l+0xbdc>
 800de44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800de48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800de4a:	4620      	mov	r0, r4
 800de4c:	f002 fb2c 	bl	80104a8 <_Bfree>
 800de50:	9905      	ldr	r1, [sp, #20]
 800de52:	4620      	mov	r0, r4
 800de54:	f002 fb28 	bl	80104a8 <_Bfree>
 800de58:	4659      	mov	r1, fp
 800de5a:	4620      	mov	r0, r4
 800de5c:	f002 fb24 	bl	80104a8 <_Bfree>
 800de60:	4629      	mov	r1, r5
 800de62:	4620      	mov	r0, r4
 800de64:	f002 fb20 	bl	80104a8 <_Bfree>
 800de68:	e609      	b.n	800da7e <_strtod_l+0x646>
 800de6a:	f1b8 0f01 	cmp.w	r8, #1
 800de6e:	d103      	bne.n	800de78 <_strtod_l+0xa40>
 800de70:	f1b9 0f00 	cmp.w	r9, #0
 800de74:	f43f ad95 	beq.w	800d9a2 <_strtod_l+0x56a>
 800de78:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dfd0 <_strtod_l+0xb98>
 800de7c:	4f60      	ldr	r7, [pc, #384]	; (800e000 <_strtod_l+0xbc8>)
 800de7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de82:	2600      	movs	r6, #0
 800de84:	e7ae      	b.n	800dde4 <_strtod_l+0x9ac>
 800de86:	4f5f      	ldr	r7, [pc, #380]	; (800e004 <_strtod_l+0xbcc>)
 800de88:	2600      	movs	r6, #0
 800de8a:	e7a7      	b.n	800dddc <_strtod_l+0x9a4>
 800de8c:	4b5d      	ldr	r3, [pc, #372]	; (800e004 <_strtod_l+0xbcc>)
 800de8e:	4630      	mov	r0, r6
 800de90:	4639      	mov	r1, r7
 800de92:	2200      	movs	r2, #0
 800de94:	f7f2 fbc8 	bl	8000628 <__aeabi_dmul>
 800de98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de9a:	4606      	mov	r6, r0
 800de9c:	460f      	mov	r7, r1
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d09c      	beq.n	800dddc <_strtod_l+0x9a4>
 800dea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dea6:	e79d      	b.n	800dde4 <_strtod_l+0x9ac>
 800dea8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dfd8 <_strtod_l+0xba0>
 800deac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800deb0:	ec57 6b17 	vmov	r6, r7, d7
 800deb4:	e796      	b.n	800dde4 <_strtod_l+0x9ac>
 800deb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800deba:	9b04      	ldr	r3, [sp, #16]
 800debc:	46ca      	mov	sl, r9
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1c2      	bne.n	800de48 <_strtod_l+0xa10>
 800dec2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dec6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dec8:	0d1b      	lsrs	r3, r3, #20
 800deca:	051b      	lsls	r3, r3, #20
 800decc:	429a      	cmp	r2, r3
 800dece:	d1bb      	bne.n	800de48 <_strtod_l+0xa10>
 800ded0:	4630      	mov	r0, r6
 800ded2:	4639      	mov	r1, r7
 800ded4:	f7f2 ff08 	bl	8000ce8 <__aeabi_d2lz>
 800ded8:	f7f2 fb78 	bl	80005cc <__aeabi_l2d>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4630      	mov	r0, r6
 800dee2:	4639      	mov	r1, r7
 800dee4:	f7f2 f9e8 	bl	80002b8 <__aeabi_dsub>
 800dee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800deea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800deee:	ea43 0308 	orr.w	r3, r3, r8
 800def2:	4313      	orrs	r3, r2
 800def4:	4606      	mov	r6, r0
 800def6:	460f      	mov	r7, r1
 800def8:	d054      	beq.n	800dfa4 <_strtod_l+0xb6c>
 800defa:	a339      	add	r3, pc, #228	; (adr r3, 800dfe0 <_strtod_l+0xba8>)
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	f7f2 fe04 	bl	8000b0c <__aeabi_dcmplt>
 800df04:	2800      	cmp	r0, #0
 800df06:	f47f ace5 	bne.w	800d8d4 <_strtod_l+0x49c>
 800df0a:	a337      	add	r3, pc, #220	; (adr r3, 800dfe8 <_strtod_l+0xbb0>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	4630      	mov	r0, r6
 800df12:	4639      	mov	r1, r7
 800df14:	f7f2 fe18 	bl	8000b48 <__aeabi_dcmpgt>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d095      	beq.n	800de48 <_strtod_l+0xa10>
 800df1c:	e4da      	b.n	800d8d4 <_strtod_l+0x49c>
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	b333      	cbz	r3, 800df70 <_strtod_l+0xb38>
 800df22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df28:	d822      	bhi.n	800df70 <_strtod_l+0xb38>
 800df2a:	a331      	add	r3, pc, #196	; (adr r3, 800dff0 <_strtod_l+0xbb8>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	4630      	mov	r0, r6
 800df32:	4639      	mov	r1, r7
 800df34:	f7f2 fdf4 	bl	8000b20 <__aeabi_dcmple>
 800df38:	b1a0      	cbz	r0, 800df64 <_strtod_l+0xb2c>
 800df3a:	4639      	mov	r1, r7
 800df3c:	4630      	mov	r0, r6
 800df3e:	f7f2 fe4b 	bl	8000bd8 <__aeabi_d2uiz>
 800df42:	2801      	cmp	r0, #1
 800df44:	bf38      	it	cc
 800df46:	2001      	movcc	r0, #1
 800df48:	f7f2 faf4 	bl	8000534 <__aeabi_ui2d>
 800df4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df4e:	4606      	mov	r6, r0
 800df50:	460f      	mov	r7, r1
 800df52:	bb23      	cbnz	r3, 800df9e <_strtod_l+0xb66>
 800df54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df58:	9010      	str	r0, [sp, #64]	; 0x40
 800df5a:	9311      	str	r3, [sp, #68]	; 0x44
 800df5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800df64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df6c:	1a9b      	subs	r3, r3, r2
 800df6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df74:	eeb0 0a48 	vmov.f32	s0, s16
 800df78:	eef0 0a68 	vmov.f32	s1, s17
 800df7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800df80:	f002 fdbe 	bl	8010b00 <__ulp>
 800df84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df88:	ec53 2b10 	vmov	r2, r3, d0
 800df8c:	f7f2 fb4c 	bl	8000628 <__aeabi_dmul>
 800df90:	ec53 2b18 	vmov	r2, r3, d8
 800df94:	f7f2 f992 	bl	80002bc <__adddf3>
 800df98:	4680      	mov	r8, r0
 800df9a:	4689      	mov	r9, r1
 800df9c:	e78d      	b.n	800deba <_strtod_l+0xa82>
 800df9e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dfa2:	e7db      	b.n	800df5c <_strtod_l+0xb24>
 800dfa4:	a314      	add	r3, pc, #80	; (adr r3, 800dff8 <_strtod_l+0xbc0>)
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	f7f2 fdaf 	bl	8000b0c <__aeabi_dcmplt>
 800dfae:	e7b3      	b.n	800df18 <_strtod_l+0xae0>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	f7ff ba7c 	b.w	800d4b6 <_strtod_l+0x7e>
 800dfbe:	2a65      	cmp	r2, #101	; 0x65
 800dfc0:	f43f ab75 	beq.w	800d6ae <_strtod_l+0x276>
 800dfc4:	2a45      	cmp	r2, #69	; 0x45
 800dfc6:	f43f ab72 	beq.w	800d6ae <_strtod_l+0x276>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f7ff bbaa 	b.w	800d724 <_strtod_l+0x2ec>
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	bff00000 	.word	0xbff00000
 800dfd8:	00000000 	.word	0x00000000
 800dfdc:	3ff00000 	.word	0x3ff00000
 800dfe0:	94a03595 	.word	0x94a03595
 800dfe4:	3fdfffff 	.word	0x3fdfffff
 800dfe8:	35afe535 	.word	0x35afe535
 800dfec:	3fe00000 	.word	0x3fe00000
 800dff0:	ffc00000 	.word	0xffc00000
 800dff4:	41dfffff 	.word	0x41dfffff
 800dff8:	94a03595 	.word	0x94a03595
 800dffc:	3fcfffff 	.word	0x3fcfffff
 800e000:	3ff00000 	.word	0x3ff00000
 800e004:	3fe00000 	.word	0x3fe00000
 800e008:	7ff00000 	.word	0x7ff00000
 800e00c:	7fe00000 	.word	0x7fe00000
 800e010:	7c9fffff 	.word	0x7c9fffff
 800e014:	7fefffff 	.word	0x7fefffff

0800e018 <strtod>:
 800e018:	460a      	mov	r2, r1
 800e01a:	4601      	mov	r1, r0
 800e01c:	4802      	ldr	r0, [pc, #8]	; (800e028 <strtod+0x10>)
 800e01e:	4b03      	ldr	r3, [pc, #12]	; (800e02c <strtod+0x14>)
 800e020:	6800      	ldr	r0, [r0, #0]
 800e022:	f7ff ba09 	b.w	800d438 <_strtod_l>
 800e026:	bf00      	nop
 800e028:	200002b0 	.word	0x200002b0
 800e02c:	200000f8 	.word	0x200000f8

0800e030 <__cvt>:
 800e030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e034:	ec55 4b10 	vmov	r4, r5, d0
 800e038:	2d00      	cmp	r5, #0
 800e03a:	460e      	mov	r6, r1
 800e03c:	4619      	mov	r1, r3
 800e03e:	462b      	mov	r3, r5
 800e040:	bfbb      	ittet	lt
 800e042:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e046:	461d      	movlt	r5, r3
 800e048:	2300      	movge	r3, #0
 800e04a:	232d      	movlt	r3, #45	; 0x2d
 800e04c:	700b      	strb	r3, [r1, #0]
 800e04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e054:	4691      	mov	r9, r2
 800e056:	f023 0820 	bic.w	r8, r3, #32
 800e05a:	bfbc      	itt	lt
 800e05c:	4622      	movlt	r2, r4
 800e05e:	4614      	movlt	r4, r2
 800e060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e064:	d005      	beq.n	800e072 <__cvt+0x42>
 800e066:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e06a:	d100      	bne.n	800e06e <__cvt+0x3e>
 800e06c:	3601      	adds	r6, #1
 800e06e:	2102      	movs	r1, #2
 800e070:	e000      	b.n	800e074 <__cvt+0x44>
 800e072:	2103      	movs	r1, #3
 800e074:	ab03      	add	r3, sp, #12
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	ab02      	add	r3, sp, #8
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	ec45 4b10 	vmov	d0, r4, r5
 800e080:	4653      	mov	r3, sl
 800e082:	4632      	mov	r2, r6
 800e084:	f001 f828 	bl	800f0d8 <_dtoa_r>
 800e088:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e08c:	4607      	mov	r7, r0
 800e08e:	d102      	bne.n	800e096 <__cvt+0x66>
 800e090:	f019 0f01 	tst.w	r9, #1
 800e094:	d022      	beq.n	800e0dc <__cvt+0xac>
 800e096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e09a:	eb07 0906 	add.w	r9, r7, r6
 800e09e:	d110      	bne.n	800e0c2 <__cvt+0x92>
 800e0a0:	783b      	ldrb	r3, [r7, #0]
 800e0a2:	2b30      	cmp	r3, #48	; 0x30
 800e0a4:	d10a      	bne.n	800e0bc <__cvt+0x8c>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	f7f2 fd23 	bl	8000af8 <__aeabi_dcmpeq>
 800e0b2:	b918      	cbnz	r0, 800e0bc <__cvt+0x8c>
 800e0b4:	f1c6 0601 	rsb	r6, r6, #1
 800e0b8:	f8ca 6000 	str.w	r6, [sl]
 800e0bc:	f8da 3000 	ldr.w	r3, [sl]
 800e0c0:	4499      	add	r9, r3
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	f7f2 fd15 	bl	8000af8 <__aeabi_dcmpeq>
 800e0ce:	b108      	cbz	r0, 800e0d4 <__cvt+0xa4>
 800e0d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0d4:	2230      	movs	r2, #48	; 0x30
 800e0d6:	9b03      	ldr	r3, [sp, #12]
 800e0d8:	454b      	cmp	r3, r9
 800e0da:	d307      	bcc.n	800e0ec <__cvt+0xbc>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0e0:	1bdb      	subs	r3, r3, r7
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	b004      	add	sp, #16
 800e0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ec:	1c59      	adds	r1, r3, #1
 800e0ee:	9103      	str	r1, [sp, #12]
 800e0f0:	701a      	strb	r2, [r3, #0]
 800e0f2:	e7f0      	b.n	800e0d6 <__cvt+0xa6>

0800e0f4 <__exponent>:
 800e0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2900      	cmp	r1, #0
 800e0fa:	bfb8      	it	lt
 800e0fc:	4249      	neglt	r1, r1
 800e0fe:	f803 2b02 	strb.w	r2, [r3], #2
 800e102:	bfb4      	ite	lt
 800e104:	222d      	movlt	r2, #45	; 0x2d
 800e106:	222b      	movge	r2, #43	; 0x2b
 800e108:	2909      	cmp	r1, #9
 800e10a:	7042      	strb	r2, [r0, #1]
 800e10c:	dd2a      	ble.n	800e164 <__exponent+0x70>
 800e10e:	f10d 0207 	add.w	r2, sp, #7
 800e112:	4617      	mov	r7, r2
 800e114:	260a      	movs	r6, #10
 800e116:	4694      	mov	ip, r2
 800e118:	fb91 f5f6 	sdiv	r5, r1, r6
 800e11c:	fb06 1415 	mls	r4, r6, r5, r1
 800e120:	3430      	adds	r4, #48	; 0x30
 800e122:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e126:	460c      	mov	r4, r1
 800e128:	2c63      	cmp	r4, #99	; 0x63
 800e12a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800e12e:	4629      	mov	r1, r5
 800e130:	dcf1      	bgt.n	800e116 <__exponent+0x22>
 800e132:	3130      	adds	r1, #48	; 0x30
 800e134:	f1ac 0402 	sub.w	r4, ip, #2
 800e138:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e13c:	1c41      	adds	r1, r0, #1
 800e13e:	4622      	mov	r2, r4
 800e140:	42ba      	cmp	r2, r7
 800e142:	d30a      	bcc.n	800e15a <__exponent+0x66>
 800e144:	f10d 0209 	add.w	r2, sp, #9
 800e148:	eba2 020c 	sub.w	r2, r2, ip
 800e14c:	42bc      	cmp	r4, r7
 800e14e:	bf88      	it	hi
 800e150:	2200      	movhi	r2, #0
 800e152:	4413      	add	r3, r2
 800e154:	1a18      	subs	r0, r3, r0
 800e156:	b003      	add	sp, #12
 800e158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e15e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e162:	e7ed      	b.n	800e140 <__exponent+0x4c>
 800e164:	2330      	movs	r3, #48	; 0x30
 800e166:	3130      	adds	r1, #48	; 0x30
 800e168:	7083      	strb	r3, [r0, #2]
 800e16a:	70c1      	strb	r1, [r0, #3]
 800e16c:	1d03      	adds	r3, r0, #4
 800e16e:	e7f1      	b.n	800e154 <__exponent+0x60>

0800e170 <_printf_float>:
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	ed2d 8b02 	vpush	{d8}
 800e178:	b08d      	sub	sp, #52	; 0x34
 800e17a:	460c      	mov	r4, r1
 800e17c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e180:	4616      	mov	r6, r2
 800e182:	461f      	mov	r7, r3
 800e184:	4605      	mov	r5, r0
 800e186:	f000 fe29 	bl	800eddc <_localeconv_r>
 800e18a:	f8d0 a000 	ldr.w	sl, [r0]
 800e18e:	4650      	mov	r0, sl
 800e190:	f7f2 f886 	bl	80002a0 <strlen>
 800e194:	2300      	movs	r3, #0
 800e196:	930a      	str	r3, [sp, #40]	; 0x28
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	9305      	str	r3, [sp, #20]
 800e19c:	f8d8 3000 	ldr.w	r3, [r8]
 800e1a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e1a4:	3307      	adds	r3, #7
 800e1a6:	f023 0307 	bic.w	r3, r3, #7
 800e1aa:	f103 0208 	add.w	r2, r3, #8
 800e1ae:	f8c8 2000 	str.w	r2, [r8]
 800e1b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1ba:	9307      	str	r3, [sp, #28]
 800e1bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1c0:	ee08 0a10 	vmov	s16, r0
 800e1c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e1c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1cc:	4b9e      	ldr	r3, [pc, #632]	; (800e448 <_printf_float+0x2d8>)
 800e1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1d2:	f7f2 fcc3 	bl	8000b5c <__aeabi_dcmpun>
 800e1d6:	bb88      	cbnz	r0, 800e23c <_printf_float+0xcc>
 800e1d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1dc:	4b9a      	ldr	r3, [pc, #616]	; (800e448 <_printf_float+0x2d8>)
 800e1de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1e2:	f7f2 fc9d 	bl	8000b20 <__aeabi_dcmple>
 800e1e6:	bb48      	cbnz	r0, 800e23c <_printf_float+0xcc>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	f7f2 fc8c 	bl	8000b0c <__aeabi_dcmplt>
 800e1f4:	b110      	cbz	r0, 800e1fc <_printf_float+0x8c>
 800e1f6:	232d      	movs	r3, #45	; 0x2d
 800e1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1fc:	4a93      	ldr	r2, [pc, #588]	; (800e44c <_printf_float+0x2dc>)
 800e1fe:	4b94      	ldr	r3, [pc, #592]	; (800e450 <_printf_float+0x2e0>)
 800e200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e204:	bf94      	ite	ls
 800e206:	4690      	movls	r8, r2
 800e208:	4698      	movhi	r8, r3
 800e20a:	2303      	movs	r3, #3
 800e20c:	6123      	str	r3, [r4, #16]
 800e20e:	9b05      	ldr	r3, [sp, #20]
 800e210:	f023 0304 	bic.w	r3, r3, #4
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	f04f 0900 	mov.w	r9, #0
 800e21a:	9700      	str	r7, [sp, #0]
 800e21c:	4633      	mov	r3, r6
 800e21e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e220:	4621      	mov	r1, r4
 800e222:	4628      	mov	r0, r5
 800e224:	f000 f9da 	bl	800e5dc <_printf_common>
 800e228:	3001      	adds	r0, #1
 800e22a:	f040 8090 	bne.w	800e34e <_printf_float+0x1de>
 800e22e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e232:	b00d      	add	sp, #52	; 0x34
 800e234:	ecbd 8b02 	vpop	{d8}
 800e238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23c:	4642      	mov	r2, r8
 800e23e:	464b      	mov	r3, r9
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	f7f2 fc8a 	bl	8000b5c <__aeabi_dcmpun>
 800e248:	b140      	cbz	r0, 800e25c <_printf_float+0xec>
 800e24a:	464b      	mov	r3, r9
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	bfbc      	itt	lt
 800e250:	232d      	movlt	r3, #45	; 0x2d
 800e252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e256:	4a7f      	ldr	r2, [pc, #508]	; (800e454 <_printf_float+0x2e4>)
 800e258:	4b7f      	ldr	r3, [pc, #508]	; (800e458 <_printf_float+0x2e8>)
 800e25a:	e7d1      	b.n	800e200 <_printf_float+0x90>
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e262:	9206      	str	r2, [sp, #24]
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	d13f      	bne.n	800e2e8 <_printf_float+0x178>
 800e268:	2306      	movs	r3, #6
 800e26a:	6063      	str	r3, [r4, #4]
 800e26c:	9b05      	ldr	r3, [sp, #20]
 800e26e:	6861      	ldr	r1, [r4, #4]
 800e270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e274:	2300      	movs	r3, #0
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	ab0a      	add	r3, sp, #40	; 0x28
 800e27a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e27e:	ab09      	add	r3, sp, #36	; 0x24
 800e280:	ec49 8b10 	vmov	d0, r8, r9
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	6022      	str	r2, [r4, #0]
 800e288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7ff fecf 	bl	800e030 <__cvt>
 800e292:	9b06      	ldr	r3, [sp, #24]
 800e294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e296:	2b47      	cmp	r3, #71	; 0x47
 800e298:	4680      	mov	r8, r0
 800e29a:	d108      	bne.n	800e2ae <_printf_float+0x13e>
 800e29c:	1cc8      	adds	r0, r1, #3
 800e29e:	db02      	blt.n	800e2a6 <_printf_float+0x136>
 800e2a0:	6863      	ldr	r3, [r4, #4]
 800e2a2:	4299      	cmp	r1, r3
 800e2a4:	dd41      	ble.n	800e32a <_printf_float+0x1ba>
 800e2a6:	f1ab 0302 	sub.w	r3, fp, #2
 800e2aa:	fa5f fb83 	uxtb.w	fp, r3
 800e2ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e2b2:	d820      	bhi.n	800e2f6 <_printf_float+0x186>
 800e2b4:	3901      	subs	r1, #1
 800e2b6:	465a      	mov	r2, fp
 800e2b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2bc:	9109      	str	r1, [sp, #36]	; 0x24
 800e2be:	f7ff ff19 	bl	800e0f4 <__exponent>
 800e2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2c4:	1813      	adds	r3, r2, r0
 800e2c6:	2a01      	cmp	r2, #1
 800e2c8:	4681      	mov	r9, r0
 800e2ca:	6123      	str	r3, [r4, #16]
 800e2cc:	dc02      	bgt.n	800e2d4 <_printf_float+0x164>
 800e2ce:	6822      	ldr	r2, [r4, #0]
 800e2d0:	07d2      	lsls	r2, r2, #31
 800e2d2:	d501      	bpl.n	800e2d8 <_printf_float+0x168>
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	6123      	str	r3, [r4, #16]
 800e2d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d09c      	beq.n	800e21a <_printf_float+0xaa>
 800e2e0:	232d      	movs	r3, #45	; 0x2d
 800e2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e6:	e798      	b.n	800e21a <_printf_float+0xaa>
 800e2e8:	9a06      	ldr	r2, [sp, #24]
 800e2ea:	2a47      	cmp	r2, #71	; 0x47
 800e2ec:	d1be      	bne.n	800e26c <_printf_float+0xfc>
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1bc      	bne.n	800e26c <_printf_float+0xfc>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e7b9      	b.n	800e26a <_printf_float+0xfa>
 800e2f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e2fa:	d118      	bne.n	800e32e <_printf_float+0x1be>
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	6863      	ldr	r3, [r4, #4]
 800e300:	dd0b      	ble.n	800e31a <_printf_float+0x1aa>
 800e302:	6121      	str	r1, [r4, #16]
 800e304:	b913      	cbnz	r3, 800e30c <_printf_float+0x19c>
 800e306:	6822      	ldr	r2, [r4, #0]
 800e308:	07d0      	lsls	r0, r2, #31
 800e30a:	d502      	bpl.n	800e312 <_printf_float+0x1a2>
 800e30c:	3301      	adds	r3, #1
 800e30e:	440b      	add	r3, r1
 800e310:	6123      	str	r3, [r4, #16]
 800e312:	65a1      	str	r1, [r4, #88]	; 0x58
 800e314:	f04f 0900 	mov.w	r9, #0
 800e318:	e7de      	b.n	800e2d8 <_printf_float+0x168>
 800e31a:	b913      	cbnz	r3, 800e322 <_printf_float+0x1b2>
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	07d2      	lsls	r2, r2, #31
 800e320:	d501      	bpl.n	800e326 <_printf_float+0x1b6>
 800e322:	3302      	adds	r3, #2
 800e324:	e7f4      	b.n	800e310 <_printf_float+0x1a0>
 800e326:	2301      	movs	r3, #1
 800e328:	e7f2      	b.n	800e310 <_printf_float+0x1a0>
 800e32a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e330:	4299      	cmp	r1, r3
 800e332:	db05      	blt.n	800e340 <_printf_float+0x1d0>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	6121      	str	r1, [r4, #16]
 800e338:	07d8      	lsls	r0, r3, #31
 800e33a:	d5ea      	bpl.n	800e312 <_printf_float+0x1a2>
 800e33c:	1c4b      	adds	r3, r1, #1
 800e33e:	e7e7      	b.n	800e310 <_printf_float+0x1a0>
 800e340:	2900      	cmp	r1, #0
 800e342:	bfd4      	ite	le
 800e344:	f1c1 0202 	rsble	r2, r1, #2
 800e348:	2201      	movgt	r2, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	e7e0      	b.n	800e310 <_printf_float+0x1a0>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	055a      	lsls	r2, r3, #21
 800e352:	d407      	bmi.n	800e364 <_printf_float+0x1f4>
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	4642      	mov	r2, r8
 800e358:	4631      	mov	r1, r6
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	d12c      	bne.n	800e3bc <_printf_float+0x24c>
 800e362:	e764      	b.n	800e22e <_printf_float+0xbe>
 800e364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e368:	f240 80e0 	bls.w	800e52c <_printf_float+0x3bc>
 800e36c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e370:	2200      	movs	r2, #0
 800e372:	2300      	movs	r3, #0
 800e374:	f7f2 fbc0 	bl	8000af8 <__aeabi_dcmpeq>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d034      	beq.n	800e3e6 <_printf_float+0x276>
 800e37c:	4a37      	ldr	r2, [pc, #220]	; (800e45c <_printf_float+0x2ec>)
 800e37e:	2301      	movs	r3, #1
 800e380:	4631      	mov	r1, r6
 800e382:	4628      	mov	r0, r5
 800e384:	47b8      	blx	r7
 800e386:	3001      	adds	r0, #1
 800e388:	f43f af51 	beq.w	800e22e <_printf_float+0xbe>
 800e38c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e390:	429a      	cmp	r2, r3
 800e392:	db02      	blt.n	800e39a <_printf_float+0x22a>
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	07d8      	lsls	r0, r3, #31
 800e398:	d510      	bpl.n	800e3bc <_printf_float+0x24c>
 800e39a:	ee18 3a10 	vmov	r3, s16
 800e39e:	4652      	mov	r2, sl
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	47b8      	blx	r7
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	f43f af41 	beq.w	800e22e <_printf_float+0xbe>
 800e3ac:	f04f 0800 	mov.w	r8, #0
 800e3b0:	f104 091a 	add.w	r9, r4, #26
 800e3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4543      	cmp	r3, r8
 800e3ba:	dc09      	bgt.n	800e3d0 <_printf_float+0x260>
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	079b      	lsls	r3, r3, #30
 800e3c0:	f100 8107 	bmi.w	800e5d2 <_printf_float+0x462>
 800e3c4:	68e0      	ldr	r0, [r4, #12]
 800e3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3c8:	4298      	cmp	r0, r3
 800e3ca:	bfb8      	it	lt
 800e3cc:	4618      	movlt	r0, r3
 800e3ce:	e730      	b.n	800e232 <_printf_float+0xc2>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	464a      	mov	r2, r9
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af27 	beq.w	800e22e <_printf_float+0xbe>
 800e3e0:	f108 0801 	add.w	r8, r8, #1
 800e3e4:	e7e6      	b.n	800e3b4 <_printf_float+0x244>
 800e3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dc39      	bgt.n	800e460 <_printf_float+0x2f0>
 800e3ec:	4a1b      	ldr	r2, [pc, #108]	; (800e45c <_printf_float+0x2ec>)
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	f43f af19 	beq.w	800e22e <_printf_float+0xbe>
 800e3fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e400:	4313      	orrs	r3, r2
 800e402:	d102      	bne.n	800e40a <_printf_float+0x29a>
 800e404:	6823      	ldr	r3, [r4, #0]
 800e406:	07d9      	lsls	r1, r3, #31
 800e408:	d5d8      	bpl.n	800e3bc <_printf_float+0x24c>
 800e40a:	ee18 3a10 	vmov	r3, s16
 800e40e:	4652      	mov	r2, sl
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	47b8      	blx	r7
 800e416:	3001      	adds	r0, #1
 800e418:	f43f af09 	beq.w	800e22e <_printf_float+0xbe>
 800e41c:	f04f 0900 	mov.w	r9, #0
 800e420:	f104 0a1a 	add.w	sl, r4, #26
 800e424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e426:	425b      	negs	r3, r3
 800e428:	454b      	cmp	r3, r9
 800e42a:	dc01      	bgt.n	800e430 <_printf_float+0x2c0>
 800e42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e42e:	e792      	b.n	800e356 <_printf_float+0x1e6>
 800e430:	2301      	movs	r3, #1
 800e432:	4652      	mov	r2, sl
 800e434:	4631      	mov	r1, r6
 800e436:	4628      	mov	r0, r5
 800e438:	47b8      	blx	r7
 800e43a:	3001      	adds	r0, #1
 800e43c:	f43f aef7 	beq.w	800e22e <_printf_float+0xbe>
 800e440:	f109 0901 	add.w	r9, r9, #1
 800e444:	e7ee      	b.n	800e424 <_printf_float+0x2b4>
 800e446:	bf00      	nop
 800e448:	7fefffff 	.word	0x7fefffff
 800e44c:	080135d1 	.word	0x080135d1
 800e450:	080135d5 	.word	0x080135d5
 800e454:	080135d9 	.word	0x080135d9
 800e458:	080135dd 	.word	0x080135dd
 800e45c:	0801387b 	.word	0x0801387b
 800e460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e464:	429a      	cmp	r2, r3
 800e466:	bfa8      	it	ge
 800e468:	461a      	movge	r2, r3
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	4691      	mov	r9, r2
 800e46e:	dc37      	bgt.n	800e4e0 <_printf_float+0x370>
 800e470:	f04f 0b00 	mov.w	fp, #0
 800e474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e478:	f104 021a 	add.w	r2, r4, #26
 800e47c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e47e:	9305      	str	r3, [sp, #20]
 800e480:	eba3 0309 	sub.w	r3, r3, r9
 800e484:	455b      	cmp	r3, fp
 800e486:	dc33      	bgt.n	800e4f0 <_printf_float+0x380>
 800e488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e48c:	429a      	cmp	r2, r3
 800e48e:	db3b      	blt.n	800e508 <_printf_float+0x398>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	07da      	lsls	r2, r3, #31
 800e494:	d438      	bmi.n	800e508 <_printf_float+0x398>
 800e496:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e49a:	eba2 0903 	sub.w	r9, r2, r3
 800e49e:	9b05      	ldr	r3, [sp, #20]
 800e4a0:	1ad2      	subs	r2, r2, r3
 800e4a2:	4591      	cmp	r9, r2
 800e4a4:	bfa8      	it	ge
 800e4a6:	4691      	movge	r9, r2
 800e4a8:	f1b9 0f00 	cmp.w	r9, #0
 800e4ac:	dc35      	bgt.n	800e51a <_printf_float+0x3aa>
 800e4ae:	f04f 0800 	mov.w	r8, #0
 800e4b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4b6:	f104 0a1a 	add.w	sl, r4, #26
 800e4ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4be:	1a9b      	subs	r3, r3, r2
 800e4c0:	eba3 0309 	sub.w	r3, r3, r9
 800e4c4:	4543      	cmp	r3, r8
 800e4c6:	f77f af79 	ble.w	800e3bc <_printf_float+0x24c>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	4652      	mov	r2, sl
 800e4ce:	4631      	mov	r1, r6
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	47b8      	blx	r7
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	f43f aeaa 	beq.w	800e22e <_printf_float+0xbe>
 800e4da:	f108 0801 	add.w	r8, r8, #1
 800e4de:	e7ec      	b.n	800e4ba <_printf_float+0x34a>
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	47b8      	blx	r7
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	d1c0      	bne.n	800e470 <_printf_float+0x300>
 800e4ee:	e69e      	b.n	800e22e <_printf_float+0xbe>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	9205      	str	r2, [sp, #20]
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	f43f ae97 	beq.w	800e22e <_printf_float+0xbe>
 800e500:	9a05      	ldr	r2, [sp, #20]
 800e502:	f10b 0b01 	add.w	fp, fp, #1
 800e506:	e7b9      	b.n	800e47c <_printf_float+0x30c>
 800e508:	ee18 3a10 	vmov	r3, s16
 800e50c:	4652      	mov	r2, sl
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	d1be      	bne.n	800e496 <_printf_float+0x326>
 800e518:	e689      	b.n	800e22e <_printf_float+0xbe>
 800e51a:	9a05      	ldr	r2, [sp, #20]
 800e51c:	464b      	mov	r3, r9
 800e51e:	4442      	add	r2, r8
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	d1c1      	bne.n	800e4ae <_printf_float+0x33e>
 800e52a:	e680      	b.n	800e22e <_printf_float+0xbe>
 800e52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e52e:	2a01      	cmp	r2, #1
 800e530:	dc01      	bgt.n	800e536 <_printf_float+0x3c6>
 800e532:	07db      	lsls	r3, r3, #31
 800e534:	d53a      	bpl.n	800e5ac <_printf_float+0x43c>
 800e536:	2301      	movs	r3, #1
 800e538:	4642      	mov	r2, r8
 800e53a:	4631      	mov	r1, r6
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b8      	blx	r7
 800e540:	3001      	adds	r0, #1
 800e542:	f43f ae74 	beq.w	800e22e <_printf_float+0xbe>
 800e546:	ee18 3a10 	vmov	r3, s16
 800e54a:	4652      	mov	r2, sl
 800e54c:	4631      	mov	r1, r6
 800e54e:	4628      	mov	r0, r5
 800e550:	47b8      	blx	r7
 800e552:	3001      	adds	r0, #1
 800e554:	f43f ae6b 	beq.w	800e22e <_printf_float+0xbe>
 800e558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e55c:	2200      	movs	r2, #0
 800e55e:	2300      	movs	r3, #0
 800e560:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e564:	f7f2 fac8 	bl	8000af8 <__aeabi_dcmpeq>
 800e568:	b9d8      	cbnz	r0, 800e5a2 <_printf_float+0x432>
 800e56a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e56e:	f108 0201 	add.w	r2, r8, #1
 800e572:	4631      	mov	r1, r6
 800e574:	4628      	mov	r0, r5
 800e576:	47b8      	blx	r7
 800e578:	3001      	adds	r0, #1
 800e57a:	d10e      	bne.n	800e59a <_printf_float+0x42a>
 800e57c:	e657      	b.n	800e22e <_printf_float+0xbe>
 800e57e:	2301      	movs	r3, #1
 800e580:	4652      	mov	r2, sl
 800e582:	4631      	mov	r1, r6
 800e584:	4628      	mov	r0, r5
 800e586:	47b8      	blx	r7
 800e588:	3001      	adds	r0, #1
 800e58a:	f43f ae50 	beq.w	800e22e <_printf_float+0xbe>
 800e58e:	f108 0801 	add.w	r8, r8, #1
 800e592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e594:	3b01      	subs	r3, #1
 800e596:	4543      	cmp	r3, r8
 800e598:	dcf1      	bgt.n	800e57e <_printf_float+0x40e>
 800e59a:	464b      	mov	r3, r9
 800e59c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5a0:	e6da      	b.n	800e358 <_printf_float+0x1e8>
 800e5a2:	f04f 0800 	mov.w	r8, #0
 800e5a6:	f104 0a1a 	add.w	sl, r4, #26
 800e5aa:	e7f2      	b.n	800e592 <_printf_float+0x422>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	4642      	mov	r2, r8
 800e5b0:	e7df      	b.n	800e572 <_printf_float+0x402>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	464a      	mov	r2, r9
 800e5b6:	4631      	mov	r1, r6
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	47b8      	blx	r7
 800e5bc:	3001      	adds	r0, #1
 800e5be:	f43f ae36 	beq.w	800e22e <_printf_float+0xbe>
 800e5c2:	f108 0801 	add.w	r8, r8, #1
 800e5c6:	68e3      	ldr	r3, [r4, #12]
 800e5c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5ca:	1a5b      	subs	r3, r3, r1
 800e5cc:	4543      	cmp	r3, r8
 800e5ce:	dcf0      	bgt.n	800e5b2 <_printf_float+0x442>
 800e5d0:	e6f8      	b.n	800e3c4 <_printf_float+0x254>
 800e5d2:	f04f 0800 	mov.w	r8, #0
 800e5d6:	f104 0919 	add.w	r9, r4, #25
 800e5da:	e7f4      	b.n	800e5c6 <_printf_float+0x456>

0800e5dc <_printf_common>:
 800e5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e0:	4616      	mov	r6, r2
 800e5e2:	4699      	mov	r9, r3
 800e5e4:	688a      	ldr	r2, [r1, #8]
 800e5e6:	690b      	ldr	r3, [r1, #16]
 800e5e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	bfb8      	it	lt
 800e5f0:	4613      	movlt	r3, r2
 800e5f2:	6033      	str	r3, [r6, #0]
 800e5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5f8:	4607      	mov	r7, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	b10a      	cbz	r2, 800e602 <_printf_common+0x26>
 800e5fe:	3301      	adds	r3, #1
 800e600:	6033      	str	r3, [r6, #0]
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	0699      	lsls	r1, r3, #26
 800e606:	bf42      	ittt	mi
 800e608:	6833      	ldrmi	r3, [r6, #0]
 800e60a:	3302      	addmi	r3, #2
 800e60c:	6033      	strmi	r3, [r6, #0]
 800e60e:	6825      	ldr	r5, [r4, #0]
 800e610:	f015 0506 	ands.w	r5, r5, #6
 800e614:	d106      	bne.n	800e624 <_printf_common+0x48>
 800e616:	f104 0a19 	add.w	sl, r4, #25
 800e61a:	68e3      	ldr	r3, [r4, #12]
 800e61c:	6832      	ldr	r2, [r6, #0]
 800e61e:	1a9b      	subs	r3, r3, r2
 800e620:	42ab      	cmp	r3, r5
 800e622:	dc26      	bgt.n	800e672 <_printf_common+0x96>
 800e624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e628:	1e13      	subs	r3, r2, #0
 800e62a:	6822      	ldr	r2, [r4, #0]
 800e62c:	bf18      	it	ne
 800e62e:	2301      	movne	r3, #1
 800e630:	0692      	lsls	r2, r2, #26
 800e632:	d42b      	bmi.n	800e68c <_printf_common+0xb0>
 800e634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e638:	4649      	mov	r1, r9
 800e63a:	4638      	mov	r0, r7
 800e63c:	47c0      	blx	r8
 800e63e:	3001      	adds	r0, #1
 800e640:	d01e      	beq.n	800e680 <_printf_common+0xa4>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	6922      	ldr	r2, [r4, #16]
 800e646:	f003 0306 	and.w	r3, r3, #6
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	bf02      	ittt	eq
 800e64e:	68e5      	ldreq	r5, [r4, #12]
 800e650:	6833      	ldreq	r3, [r6, #0]
 800e652:	1aed      	subeq	r5, r5, r3
 800e654:	68a3      	ldr	r3, [r4, #8]
 800e656:	bf0c      	ite	eq
 800e658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e65c:	2500      	movne	r5, #0
 800e65e:	4293      	cmp	r3, r2
 800e660:	bfc4      	itt	gt
 800e662:	1a9b      	subgt	r3, r3, r2
 800e664:	18ed      	addgt	r5, r5, r3
 800e666:	2600      	movs	r6, #0
 800e668:	341a      	adds	r4, #26
 800e66a:	42b5      	cmp	r5, r6
 800e66c:	d11a      	bne.n	800e6a4 <_printf_common+0xc8>
 800e66e:	2000      	movs	r0, #0
 800e670:	e008      	b.n	800e684 <_printf_common+0xa8>
 800e672:	2301      	movs	r3, #1
 800e674:	4652      	mov	r2, sl
 800e676:	4649      	mov	r1, r9
 800e678:	4638      	mov	r0, r7
 800e67a:	47c0      	blx	r8
 800e67c:	3001      	adds	r0, #1
 800e67e:	d103      	bne.n	800e688 <_printf_common+0xac>
 800e680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e688:	3501      	adds	r5, #1
 800e68a:	e7c6      	b.n	800e61a <_printf_common+0x3e>
 800e68c:	18e1      	adds	r1, r4, r3
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	2030      	movs	r0, #48	; 0x30
 800e692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e696:	4422      	add	r2, r4
 800e698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e69c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6a0:	3302      	adds	r3, #2
 800e6a2:	e7c7      	b.n	800e634 <_printf_common+0x58>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	47c0      	blx	r8
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	d0e6      	beq.n	800e680 <_printf_common+0xa4>
 800e6b2:	3601      	adds	r6, #1
 800e6b4:	e7d9      	b.n	800e66a <_printf_common+0x8e>
	...

0800e6b8 <_printf_i>:
 800e6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	7e0f      	ldrb	r7, [r1, #24]
 800e6be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6c0:	2f78      	cmp	r7, #120	; 0x78
 800e6c2:	4691      	mov	r9, r2
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	469a      	mov	sl, r3
 800e6ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6ce:	d807      	bhi.n	800e6e0 <_printf_i+0x28>
 800e6d0:	2f62      	cmp	r7, #98	; 0x62
 800e6d2:	d80a      	bhi.n	800e6ea <_printf_i+0x32>
 800e6d4:	2f00      	cmp	r7, #0
 800e6d6:	f000 80d4 	beq.w	800e882 <_printf_i+0x1ca>
 800e6da:	2f58      	cmp	r7, #88	; 0x58
 800e6dc:	f000 80c0 	beq.w	800e860 <_printf_i+0x1a8>
 800e6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6e8:	e03a      	b.n	800e760 <_printf_i+0xa8>
 800e6ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6ee:	2b15      	cmp	r3, #21
 800e6f0:	d8f6      	bhi.n	800e6e0 <_printf_i+0x28>
 800e6f2:	a101      	add	r1, pc, #4	; (adr r1, 800e6f8 <_printf_i+0x40>)
 800e6f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6f8:	0800e751 	.word	0x0800e751
 800e6fc:	0800e765 	.word	0x0800e765
 800e700:	0800e6e1 	.word	0x0800e6e1
 800e704:	0800e6e1 	.word	0x0800e6e1
 800e708:	0800e6e1 	.word	0x0800e6e1
 800e70c:	0800e6e1 	.word	0x0800e6e1
 800e710:	0800e765 	.word	0x0800e765
 800e714:	0800e6e1 	.word	0x0800e6e1
 800e718:	0800e6e1 	.word	0x0800e6e1
 800e71c:	0800e6e1 	.word	0x0800e6e1
 800e720:	0800e6e1 	.word	0x0800e6e1
 800e724:	0800e869 	.word	0x0800e869
 800e728:	0800e791 	.word	0x0800e791
 800e72c:	0800e823 	.word	0x0800e823
 800e730:	0800e6e1 	.word	0x0800e6e1
 800e734:	0800e6e1 	.word	0x0800e6e1
 800e738:	0800e88b 	.word	0x0800e88b
 800e73c:	0800e6e1 	.word	0x0800e6e1
 800e740:	0800e791 	.word	0x0800e791
 800e744:	0800e6e1 	.word	0x0800e6e1
 800e748:	0800e6e1 	.word	0x0800e6e1
 800e74c:	0800e82b 	.word	0x0800e82b
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	1d1a      	adds	r2, r3, #4
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	602a      	str	r2, [r5, #0]
 800e758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e75c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e760:	2301      	movs	r3, #1
 800e762:	e09f      	b.n	800e8a4 <_printf_i+0x1ec>
 800e764:	6820      	ldr	r0, [r4, #0]
 800e766:	682b      	ldr	r3, [r5, #0]
 800e768:	0607      	lsls	r7, r0, #24
 800e76a:	f103 0104 	add.w	r1, r3, #4
 800e76e:	6029      	str	r1, [r5, #0]
 800e770:	d501      	bpl.n	800e776 <_printf_i+0xbe>
 800e772:	681e      	ldr	r6, [r3, #0]
 800e774:	e003      	b.n	800e77e <_printf_i+0xc6>
 800e776:	0646      	lsls	r6, r0, #25
 800e778:	d5fb      	bpl.n	800e772 <_printf_i+0xba>
 800e77a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e77e:	2e00      	cmp	r6, #0
 800e780:	da03      	bge.n	800e78a <_printf_i+0xd2>
 800e782:	232d      	movs	r3, #45	; 0x2d
 800e784:	4276      	negs	r6, r6
 800e786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e78a:	485a      	ldr	r0, [pc, #360]	; (800e8f4 <_printf_i+0x23c>)
 800e78c:	230a      	movs	r3, #10
 800e78e:	e012      	b.n	800e7b6 <_printf_i+0xfe>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	6820      	ldr	r0, [r4, #0]
 800e794:	1d19      	adds	r1, r3, #4
 800e796:	6029      	str	r1, [r5, #0]
 800e798:	0605      	lsls	r5, r0, #24
 800e79a:	d501      	bpl.n	800e7a0 <_printf_i+0xe8>
 800e79c:	681e      	ldr	r6, [r3, #0]
 800e79e:	e002      	b.n	800e7a6 <_printf_i+0xee>
 800e7a0:	0641      	lsls	r1, r0, #25
 800e7a2:	d5fb      	bpl.n	800e79c <_printf_i+0xe4>
 800e7a4:	881e      	ldrh	r6, [r3, #0]
 800e7a6:	4853      	ldr	r0, [pc, #332]	; (800e8f4 <_printf_i+0x23c>)
 800e7a8:	2f6f      	cmp	r7, #111	; 0x6f
 800e7aa:	bf0c      	ite	eq
 800e7ac:	2308      	moveq	r3, #8
 800e7ae:	230a      	movne	r3, #10
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7b6:	6865      	ldr	r5, [r4, #4]
 800e7b8:	60a5      	str	r5, [r4, #8]
 800e7ba:	2d00      	cmp	r5, #0
 800e7bc:	bfa2      	ittt	ge
 800e7be:	6821      	ldrge	r1, [r4, #0]
 800e7c0:	f021 0104 	bicge.w	r1, r1, #4
 800e7c4:	6021      	strge	r1, [r4, #0]
 800e7c6:	b90e      	cbnz	r6, 800e7cc <_printf_i+0x114>
 800e7c8:	2d00      	cmp	r5, #0
 800e7ca:	d04b      	beq.n	800e864 <_printf_i+0x1ac>
 800e7cc:	4615      	mov	r5, r2
 800e7ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7d2:	fb03 6711 	mls	r7, r3, r1, r6
 800e7d6:	5dc7      	ldrb	r7, [r0, r7]
 800e7d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7dc:	4637      	mov	r7, r6
 800e7de:	42bb      	cmp	r3, r7
 800e7e0:	460e      	mov	r6, r1
 800e7e2:	d9f4      	bls.n	800e7ce <_printf_i+0x116>
 800e7e4:	2b08      	cmp	r3, #8
 800e7e6:	d10b      	bne.n	800e800 <_printf_i+0x148>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	07de      	lsls	r6, r3, #31
 800e7ec:	d508      	bpl.n	800e800 <_printf_i+0x148>
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	6861      	ldr	r1, [r4, #4]
 800e7f2:	4299      	cmp	r1, r3
 800e7f4:	bfde      	ittt	le
 800e7f6:	2330      	movle	r3, #48	; 0x30
 800e7f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e800:	1b52      	subs	r2, r2, r5
 800e802:	6122      	str	r2, [r4, #16]
 800e804:	f8cd a000 	str.w	sl, [sp]
 800e808:	464b      	mov	r3, r9
 800e80a:	aa03      	add	r2, sp, #12
 800e80c:	4621      	mov	r1, r4
 800e80e:	4640      	mov	r0, r8
 800e810:	f7ff fee4 	bl	800e5dc <_printf_common>
 800e814:	3001      	adds	r0, #1
 800e816:	d14a      	bne.n	800e8ae <_printf_i+0x1f6>
 800e818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e81c:	b004      	add	sp, #16
 800e81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	f043 0320 	orr.w	r3, r3, #32
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	4833      	ldr	r0, [pc, #204]	; (800e8f8 <_printf_i+0x240>)
 800e82c:	2778      	movs	r7, #120	; 0x78
 800e82e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	6829      	ldr	r1, [r5, #0]
 800e836:	061f      	lsls	r7, r3, #24
 800e838:	f851 6b04 	ldr.w	r6, [r1], #4
 800e83c:	d402      	bmi.n	800e844 <_printf_i+0x18c>
 800e83e:	065f      	lsls	r7, r3, #25
 800e840:	bf48      	it	mi
 800e842:	b2b6      	uxthmi	r6, r6
 800e844:	07df      	lsls	r7, r3, #31
 800e846:	bf48      	it	mi
 800e848:	f043 0320 	orrmi.w	r3, r3, #32
 800e84c:	6029      	str	r1, [r5, #0]
 800e84e:	bf48      	it	mi
 800e850:	6023      	strmi	r3, [r4, #0]
 800e852:	b91e      	cbnz	r6, 800e85c <_printf_i+0x1a4>
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	f023 0320 	bic.w	r3, r3, #32
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	2310      	movs	r3, #16
 800e85e:	e7a7      	b.n	800e7b0 <_printf_i+0xf8>
 800e860:	4824      	ldr	r0, [pc, #144]	; (800e8f4 <_printf_i+0x23c>)
 800e862:	e7e4      	b.n	800e82e <_printf_i+0x176>
 800e864:	4615      	mov	r5, r2
 800e866:	e7bd      	b.n	800e7e4 <_printf_i+0x12c>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	6826      	ldr	r6, [r4, #0]
 800e86c:	6961      	ldr	r1, [r4, #20]
 800e86e:	1d18      	adds	r0, r3, #4
 800e870:	6028      	str	r0, [r5, #0]
 800e872:	0635      	lsls	r5, r6, #24
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	d501      	bpl.n	800e87c <_printf_i+0x1c4>
 800e878:	6019      	str	r1, [r3, #0]
 800e87a:	e002      	b.n	800e882 <_printf_i+0x1ca>
 800e87c:	0670      	lsls	r0, r6, #25
 800e87e:	d5fb      	bpl.n	800e878 <_printf_i+0x1c0>
 800e880:	8019      	strh	r1, [r3, #0]
 800e882:	2300      	movs	r3, #0
 800e884:	6123      	str	r3, [r4, #16]
 800e886:	4615      	mov	r5, r2
 800e888:	e7bc      	b.n	800e804 <_printf_i+0x14c>
 800e88a:	682b      	ldr	r3, [r5, #0]
 800e88c:	1d1a      	adds	r2, r3, #4
 800e88e:	602a      	str	r2, [r5, #0]
 800e890:	681d      	ldr	r5, [r3, #0]
 800e892:	6862      	ldr	r2, [r4, #4]
 800e894:	2100      	movs	r1, #0
 800e896:	4628      	mov	r0, r5
 800e898:	f7f1 fcb2 	bl	8000200 <memchr>
 800e89c:	b108      	cbz	r0, 800e8a2 <_printf_i+0x1ea>
 800e89e:	1b40      	subs	r0, r0, r5
 800e8a0:	6060      	str	r0, [r4, #4]
 800e8a2:	6863      	ldr	r3, [r4, #4]
 800e8a4:	6123      	str	r3, [r4, #16]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ac:	e7aa      	b.n	800e804 <_printf_i+0x14c>
 800e8ae:	6923      	ldr	r3, [r4, #16]
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	47d0      	blx	sl
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	d0ad      	beq.n	800e818 <_printf_i+0x160>
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	079b      	lsls	r3, r3, #30
 800e8c0:	d413      	bmi.n	800e8ea <_printf_i+0x232>
 800e8c2:	68e0      	ldr	r0, [r4, #12]
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	4298      	cmp	r0, r3
 800e8c8:	bfb8      	it	lt
 800e8ca:	4618      	movlt	r0, r3
 800e8cc:	e7a6      	b.n	800e81c <_printf_i+0x164>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	47d0      	blx	sl
 800e8d8:	3001      	adds	r0, #1
 800e8da:	d09d      	beq.n	800e818 <_printf_i+0x160>
 800e8dc:	3501      	adds	r5, #1
 800e8de:	68e3      	ldr	r3, [r4, #12]
 800e8e0:	9903      	ldr	r1, [sp, #12]
 800e8e2:	1a5b      	subs	r3, r3, r1
 800e8e4:	42ab      	cmp	r3, r5
 800e8e6:	dcf2      	bgt.n	800e8ce <_printf_i+0x216>
 800e8e8:	e7eb      	b.n	800e8c2 <_printf_i+0x20a>
 800e8ea:	2500      	movs	r5, #0
 800e8ec:	f104 0619 	add.w	r6, r4, #25
 800e8f0:	e7f5      	b.n	800e8de <_printf_i+0x226>
 800e8f2:	bf00      	nop
 800e8f4:	080135e1 	.word	0x080135e1
 800e8f8:	080135f2 	.word	0x080135f2

0800e8fc <std>:
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	b510      	push	{r4, lr}
 800e900:	4604      	mov	r4, r0
 800e902:	e9c0 3300 	strd	r3, r3, [r0]
 800e906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e90a:	6083      	str	r3, [r0, #8]
 800e90c:	8181      	strh	r1, [r0, #12]
 800e90e:	6643      	str	r3, [r0, #100]	; 0x64
 800e910:	81c2      	strh	r2, [r0, #14]
 800e912:	6183      	str	r3, [r0, #24]
 800e914:	4619      	mov	r1, r3
 800e916:	2208      	movs	r2, #8
 800e918:	305c      	adds	r0, #92	; 0x5c
 800e91a:	f000 fa45 	bl	800eda8 <memset>
 800e91e:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <std+0x58>)
 800e920:	6263      	str	r3, [r4, #36]	; 0x24
 800e922:	4b0d      	ldr	r3, [pc, #52]	; (800e958 <std+0x5c>)
 800e924:	62a3      	str	r3, [r4, #40]	; 0x28
 800e926:	4b0d      	ldr	r3, [pc, #52]	; (800e95c <std+0x60>)
 800e928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e92a:	4b0d      	ldr	r3, [pc, #52]	; (800e960 <std+0x64>)
 800e92c:	6323      	str	r3, [r4, #48]	; 0x30
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <std+0x68>)
 800e930:	6224      	str	r4, [r4, #32]
 800e932:	429c      	cmp	r4, r3
 800e934:	d006      	beq.n	800e944 <std+0x48>
 800e936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e93a:	4294      	cmp	r4, r2
 800e93c:	d002      	beq.n	800e944 <std+0x48>
 800e93e:	33d0      	adds	r3, #208	; 0xd0
 800e940:	429c      	cmp	r4, r3
 800e942:	d105      	bne.n	800e950 <std+0x54>
 800e944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e94c:	f000 bb20 	b.w	800ef90 <__retarget_lock_init_recursive>
 800e950:	bd10      	pop	{r4, pc}
 800e952:	bf00      	nop
 800e954:	0800ebf5 	.word	0x0800ebf5
 800e958:	0800ec1b 	.word	0x0800ec1b
 800e95c:	0800ec53 	.word	0x0800ec53
 800e960:	0800ec77 	.word	0x0800ec77
 800e964:	20005618 	.word	0x20005618

0800e968 <stdio_exit_handler>:
 800e968:	4a02      	ldr	r2, [pc, #8]	; (800e974 <stdio_exit_handler+0xc>)
 800e96a:	4903      	ldr	r1, [pc, #12]	; (800e978 <stdio_exit_handler+0x10>)
 800e96c:	4803      	ldr	r0, [pc, #12]	; (800e97c <stdio_exit_handler+0x14>)
 800e96e:	f000 b869 	b.w	800ea44 <_fwalk_sglue>
 800e972:	bf00      	nop
 800e974:	200000ec 	.word	0x200000ec
 800e978:	08011a31 	.word	0x08011a31
 800e97c:	20000264 	.word	0x20000264

0800e980 <cleanup_stdio>:
 800e980:	6841      	ldr	r1, [r0, #4]
 800e982:	4b0c      	ldr	r3, [pc, #48]	; (800e9b4 <cleanup_stdio+0x34>)
 800e984:	4299      	cmp	r1, r3
 800e986:	b510      	push	{r4, lr}
 800e988:	4604      	mov	r4, r0
 800e98a:	d001      	beq.n	800e990 <cleanup_stdio+0x10>
 800e98c:	f003 f850 	bl	8011a30 <_fflush_r>
 800e990:	68a1      	ldr	r1, [r4, #8]
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <cleanup_stdio+0x38>)
 800e994:	4299      	cmp	r1, r3
 800e996:	d002      	beq.n	800e99e <cleanup_stdio+0x1e>
 800e998:	4620      	mov	r0, r4
 800e99a:	f003 f849 	bl	8011a30 <_fflush_r>
 800e99e:	68e1      	ldr	r1, [r4, #12]
 800e9a0:	4b06      	ldr	r3, [pc, #24]	; (800e9bc <cleanup_stdio+0x3c>)
 800e9a2:	4299      	cmp	r1, r3
 800e9a4:	d004      	beq.n	800e9b0 <cleanup_stdio+0x30>
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ac:	f003 b840 	b.w	8011a30 <_fflush_r>
 800e9b0:	bd10      	pop	{r4, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20005618 	.word	0x20005618
 800e9b8:	20005680 	.word	0x20005680
 800e9bc:	200056e8 	.word	0x200056e8

0800e9c0 <global_stdio_init.part.0>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <global_stdio_init.part.0+0x30>)
 800e9c4:	4c0b      	ldr	r4, [pc, #44]	; (800e9f4 <global_stdio_init.part.0+0x34>)
 800e9c6:	4a0c      	ldr	r2, [pc, #48]	; (800e9f8 <global_stdio_init.part.0+0x38>)
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2104      	movs	r1, #4
 800e9d0:	f7ff ff94 	bl	800e8fc <std>
 800e9d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e9d8:	2201      	movs	r2, #1
 800e9da:	2109      	movs	r1, #9
 800e9dc:	f7ff ff8e 	bl	800e8fc <std>
 800e9e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e9e4:	2202      	movs	r2, #2
 800e9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ea:	2112      	movs	r1, #18
 800e9ec:	f7ff bf86 	b.w	800e8fc <std>
 800e9f0:	20005750 	.word	0x20005750
 800e9f4:	20005618 	.word	0x20005618
 800e9f8:	0800e969 	.word	0x0800e969

0800e9fc <__sfp_lock_acquire>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__sfp_lock_acquire+0x8>)
 800e9fe:	f000 bac8 	b.w	800ef92 <__retarget_lock_acquire_recursive>
 800ea02:	bf00      	nop
 800ea04:	20005759 	.word	0x20005759

0800ea08 <__sfp_lock_release>:
 800ea08:	4801      	ldr	r0, [pc, #4]	; (800ea10 <__sfp_lock_release+0x8>)
 800ea0a:	f000 bac3 	b.w	800ef94 <__retarget_lock_release_recursive>
 800ea0e:	bf00      	nop
 800ea10:	20005759 	.word	0x20005759

0800ea14 <__sinit>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	4604      	mov	r4, r0
 800ea18:	f7ff fff0 	bl	800e9fc <__sfp_lock_acquire>
 800ea1c:	6a23      	ldr	r3, [r4, #32]
 800ea1e:	b11b      	cbz	r3, 800ea28 <__sinit+0x14>
 800ea20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea24:	f7ff bff0 	b.w	800ea08 <__sfp_lock_release>
 800ea28:	4b04      	ldr	r3, [pc, #16]	; (800ea3c <__sinit+0x28>)
 800ea2a:	6223      	str	r3, [r4, #32]
 800ea2c:	4b04      	ldr	r3, [pc, #16]	; (800ea40 <__sinit+0x2c>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1f5      	bne.n	800ea20 <__sinit+0xc>
 800ea34:	f7ff ffc4 	bl	800e9c0 <global_stdio_init.part.0>
 800ea38:	e7f2      	b.n	800ea20 <__sinit+0xc>
 800ea3a:	bf00      	nop
 800ea3c:	0800e981 	.word	0x0800e981
 800ea40:	20005750 	.word	0x20005750

0800ea44 <_fwalk_sglue>:
 800ea44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea48:	4607      	mov	r7, r0
 800ea4a:	4688      	mov	r8, r1
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	2600      	movs	r6, #0
 800ea50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea54:	f1b9 0901 	subs.w	r9, r9, #1
 800ea58:	d505      	bpl.n	800ea66 <_fwalk_sglue+0x22>
 800ea5a:	6824      	ldr	r4, [r4, #0]
 800ea5c:	2c00      	cmp	r4, #0
 800ea5e:	d1f7      	bne.n	800ea50 <_fwalk_sglue+0xc>
 800ea60:	4630      	mov	r0, r6
 800ea62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea66:	89ab      	ldrh	r3, [r5, #12]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d907      	bls.n	800ea7c <_fwalk_sglue+0x38>
 800ea6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea70:	3301      	adds	r3, #1
 800ea72:	d003      	beq.n	800ea7c <_fwalk_sglue+0x38>
 800ea74:	4629      	mov	r1, r5
 800ea76:	4638      	mov	r0, r7
 800ea78:	47c0      	blx	r8
 800ea7a:	4306      	orrs	r6, r0
 800ea7c:	3568      	adds	r5, #104	; 0x68
 800ea7e:	e7e9      	b.n	800ea54 <_fwalk_sglue+0x10>

0800ea80 <iprintf>:
 800ea80:	b40f      	push	{r0, r1, r2, r3}
 800ea82:	b507      	push	{r0, r1, r2, lr}
 800ea84:	4906      	ldr	r1, [pc, #24]	; (800eaa0 <iprintf+0x20>)
 800ea86:	ab04      	add	r3, sp, #16
 800ea88:	6808      	ldr	r0, [r1, #0]
 800ea8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8e:	6881      	ldr	r1, [r0, #8]
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	f002 fcdf 	bl	8011454 <_vfiprintf_r>
 800ea96:	b003      	add	sp, #12
 800ea98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea9c:	b004      	add	sp, #16
 800ea9e:	4770      	bx	lr
 800eaa0:	200002b0 	.word	0x200002b0

0800eaa4 <_puts_r>:
 800eaa4:	6a03      	ldr	r3, [r0, #32]
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	6884      	ldr	r4, [r0, #8]
 800eaaa:	4605      	mov	r5, r0
 800eaac:	460e      	mov	r6, r1
 800eaae:	b90b      	cbnz	r3, 800eab4 <_puts_r+0x10>
 800eab0:	f7ff ffb0 	bl	800ea14 <__sinit>
 800eab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eab6:	07db      	lsls	r3, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_puts_r+0x22>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	0598      	lsls	r0, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_puts_r+0x22>
 800eac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac2:	f000 fa66 	bl	800ef92 <__retarget_lock_acquire_recursive>
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	0719      	lsls	r1, r3, #28
 800eaca:	d513      	bpl.n	800eaf4 <_puts_r+0x50>
 800eacc:	6923      	ldr	r3, [r4, #16]
 800eace:	b18b      	cbz	r3, 800eaf4 <_puts_r+0x50>
 800ead0:	3e01      	subs	r6, #1
 800ead2:	68a3      	ldr	r3, [r4, #8]
 800ead4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ead8:	3b01      	subs	r3, #1
 800eada:	60a3      	str	r3, [r4, #8]
 800eadc:	b9e9      	cbnz	r1, 800eb1a <_puts_r+0x76>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	da2e      	bge.n	800eb40 <_puts_r+0x9c>
 800eae2:	4622      	mov	r2, r4
 800eae4:	210a      	movs	r1, #10
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 f8c9 	bl	800ec7e <__swbuf_r>
 800eaec:	3001      	adds	r0, #1
 800eaee:	d007      	beq.n	800eb00 <_puts_r+0x5c>
 800eaf0:	250a      	movs	r5, #10
 800eaf2:	e007      	b.n	800eb04 <_puts_r+0x60>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f8fe 	bl	800ecf8 <__swsetup_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d0e7      	beq.n	800ead0 <_puts_r+0x2c>
 800eb00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eb04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb06:	07da      	lsls	r2, r3, #31
 800eb08:	d405      	bmi.n	800eb16 <_puts_r+0x72>
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	059b      	lsls	r3, r3, #22
 800eb0e:	d402      	bmi.n	800eb16 <_puts_r+0x72>
 800eb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb12:	f000 fa3f 	bl	800ef94 <__retarget_lock_release_recursive>
 800eb16:	4628      	mov	r0, r5
 800eb18:	bd70      	pop	{r4, r5, r6, pc}
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da04      	bge.n	800eb28 <_puts_r+0x84>
 800eb1e:	69a2      	ldr	r2, [r4, #24]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	dc06      	bgt.n	800eb32 <_puts_r+0x8e>
 800eb24:	290a      	cmp	r1, #10
 800eb26:	d004      	beq.n	800eb32 <_puts_r+0x8e>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	1c5a      	adds	r2, r3, #1
 800eb2c:	6022      	str	r2, [r4, #0]
 800eb2e:	7019      	strb	r1, [r3, #0]
 800eb30:	e7cf      	b.n	800ead2 <_puts_r+0x2e>
 800eb32:	4622      	mov	r2, r4
 800eb34:	4628      	mov	r0, r5
 800eb36:	f000 f8a2 	bl	800ec7e <__swbuf_r>
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	d1c9      	bne.n	800ead2 <_puts_r+0x2e>
 800eb3e:	e7df      	b.n	800eb00 <_puts_r+0x5c>
 800eb40:	6823      	ldr	r3, [r4, #0]
 800eb42:	250a      	movs	r5, #10
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	6022      	str	r2, [r4, #0]
 800eb48:	701d      	strb	r5, [r3, #0]
 800eb4a:	e7db      	b.n	800eb04 <_puts_r+0x60>

0800eb4c <puts>:
 800eb4c:	4b02      	ldr	r3, [pc, #8]	; (800eb58 <puts+0xc>)
 800eb4e:	4601      	mov	r1, r0
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	f7ff bfa7 	b.w	800eaa4 <_puts_r>
 800eb56:	bf00      	nop
 800eb58:	200002b0 	.word	0x200002b0

0800eb5c <siprintf>:
 800eb5c:	b40e      	push	{r1, r2, r3}
 800eb5e:	b500      	push	{lr}
 800eb60:	b09c      	sub	sp, #112	; 0x70
 800eb62:	ab1d      	add	r3, sp, #116	; 0x74
 800eb64:	9002      	str	r0, [sp, #8]
 800eb66:	9006      	str	r0, [sp, #24]
 800eb68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb6c:	4809      	ldr	r0, [pc, #36]	; (800eb94 <siprintf+0x38>)
 800eb6e:	9107      	str	r1, [sp, #28]
 800eb70:	9104      	str	r1, [sp, #16]
 800eb72:	4909      	ldr	r1, [pc, #36]	; (800eb98 <siprintf+0x3c>)
 800eb74:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	6800      	ldr	r0, [r0, #0]
 800eb7c:	9301      	str	r3, [sp, #4]
 800eb7e:	a902      	add	r1, sp, #8
 800eb80:	f002 f96e 	bl	8010e60 <_svfiprintf_r>
 800eb84:	9b02      	ldr	r3, [sp, #8]
 800eb86:	2200      	movs	r2, #0
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	b01c      	add	sp, #112	; 0x70
 800eb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb90:	b003      	add	sp, #12
 800eb92:	4770      	bx	lr
 800eb94:	200002b0 	.word	0x200002b0
 800eb98:	ffff0208 	.word	0xffff0208

0800eb9c <siscanf>:
 800eb9c:	b40e      	push	{r1, r2, r3}
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	b09f      	sub	sp, #124	; 0x7c
 800eba2:	ac21      	add	r4, sp, #132	; 0x84
 800eba4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800eba8:	f854 2b04 	ldr.w	r2, [r4], #4
 800ebac:	9201      	str	r2, [sp, #4]
 800ebae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ebb2:	9004      	str	r0, [sp, #16]
 800ebb4:	9008      	str	r0, [sp, #32]
 800ebb6:	f7f1 fb73 	bl	80002a0 <strlen>
 800ebba:	4b0c      	ldr	r3, [pc, #48]	; (800ebec <siscanf+0x50>)
 800ebbc:	9005      	str	r0, [sp, #20]
 800ebbe:	9009      	str	r0, [sp, #36]	; 0x24
 800ebc0:	930d      	str	r3, [sp, #52]	; 0x34
 800ebc2:	480b      	ldr	r0, [pc, #44]	; (800ebf0 <siscanf+0x54>)
 800ebc4:	9a01      	ldr	r2, [sp, #4]
 800ebc6:	6800      	ldr	r0, [r0, #0]
 800ebc8:	9403      	str	r4, [sp, #12]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9311      	str	r3, [sp, #68]	; 0x44
 800ebce:	9316      	str	r3, [sp, #88]	; 0x58
 800ebd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ebd8:	a904      	add	r1, sp, #16
 800ebda:	4623      	mov	r3, r4
 800ebdc:	f002 fa98 	bl	8011110 <__ssvfiscanf_r>
 800ebe0:	b01f      	add	sp, #124	; 0x7c
 800ebe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe6:	b003      	add	sp, #12
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	0800ec17 	.word	0x0800ec17
 800ebf0:	200002b0 	.word	0x200002b0

0800ebf4 <__sread>:
 800ebf4:	b510      	push	{r4, lr}
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebfc:	f000 f96a 	bl	800eed4 <_read_r>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	bfab      	itete	ge
 800ec04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec06:	89a3      	ldrhlt	r3, [r4, #12]
 800ec08:	181b      	addge	r3, r3, r0
 800ec0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec0e:	bfac      	ite	ge
 800ec10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec12:	81a3      	strhlt	r3, [r4, #12]
 800ec14:	bd10      	pop	{r4, pc}

0800ec16 <__seofread>:
 800ec16:	2000      	movs	r0, #0
 800ec18:	4770      	bx	lr

0800ec1a <__swrite>:
 800ec1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	461f      	mov	r7, r3
 800ec20:	898b      	ldrh	r3, [r1, #12]
 800ec22:	05db      	lsls	r3, r3, #23
 800ec24:	4605      	mov	r5, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4616      	mov	r6, r2
 800ec2a:	d505      	bpl.n	800ec38 <__swrite+0x1e>
 800ec2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec30:	2302      	movs	r3, #2
 800ec32:	2200      	movs	r2, #0
 800ec34:	f000 f93c 	bl	800eeb0 <_lseek_r>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	4632      	mov	r2, r6
 800ec46:	463b      	mov	r3, r7
 800ec48:	4628      	mov	r0, r5
 800ec4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4e:	f000 b963 	b.w	800ef18 <_write_r>

0800ec52 <__sseek>:
 800ec52:	b510      	push	{r4, lr}
 800ec54:	460c      	mov	r4, r1
 800ec56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5a:	f000 f929 	bl	800eeb0 <_lseek_r>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	bf15      	itete	ne
 800ec64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec6e:	81a3      	strheq	r3, [r4, #12]
 800ec70:	bf18      	it	ne
 800ec72:	81a3      	strhne	r3, [r4, #12]
 800ec74:	bd10      	pop	{r4, pc}

0800ec76 <__sclose>:
 800ec76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec7a:	f000 b8b3 	b.w	800ede4 <_close_r>

0800ec7e <__swbuf_r>:
 800ec7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec80:	460e      	mov	r6, r1
 800ec82:	4614      	mov	r4, r2
 800ec84:	4605      	mov	r5, r0
 800ec86:	b118      	cbz	r0, 800ec90 <__swbuf_r+0x12>
 800ec88:	6a03      	ldr	r3, [r0, #32]
 800ec8a:	b90b      	cbnz	r3, 800ec90 <__swbuf_r+0x12>
 800ec8c:	f7ff fec2 	bl	800ea14 <__sinit>
 800ec90:	69a3      	ldr	r3, [r4, #24]
 800ec92:	60a3      	str	r3, [r4, #8]
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	071a      	lsls	r2, r3, #28
 800ec98:	d525      	bpl.n	800ece6 <__swbuf_r+0x68>
 800ec9a:	6923      	ldr	r3, [r4, #16]
 800ec9c:	b31b      	cbz	r3, 800ece6 <__swbuf_r+0x68>
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	6922      	ldr	r2, [r4, #16]
 800eca2:	1a98      	subs	r0, r3, r2
 800eca4:	6963      	ldr	r3, [r4, #20]
 800eca6:	b2f6      	uxtb	r6, r6
 800eca8:	4283      	cmp	r3, r0
 800ecaa:	4637      	mov	r7, r6
 800ecac:	dc04      	bgt.n	800ecb8 <__swbuf_r+0x3a>
 800ecae:	4621      	mov	r1, r4
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f002 febd 	bl	8011a30 <_fflush_r>
 800ecb6:	b9e0      	cbnz	r0, 800ecf2 <__swbuf_r+0x74>
 800ecb8:	68a3      	ldr	r3, [r4, #8]
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	60a3      	str	r3, [r4, #8]
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	6022      	str	r2, [r4, #0]
 800ecc4:	701e      	strb	r6, [r3, #0]
 800ecc6:	6962      	ldr	r2, [r4, #20]
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d004      	beq.n	800ecd8 <__swbuf_r+0x5a>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	07db      	lsls	r3, r3, #31
 800ecd2:	d506      	bpl.n	800ece2 <__swbuf_r+0x64>
 800ecd4:	2e0a      	cmp	r6, #10
 800ecd6:	d104      	bne.n	800ece2 <__swbuf_r+0x64>
 800ecd8:	4621      	mov	r1, r4
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f002 fea8 	bl	8011a30 <_fflush_r>
 800ece0:	b938      	cbnz	r0, 800ecf2 <__swbuf_r+0x74>
 800ece2:	4638      	mov	r0, r7
 800ece4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f000 f805 	bl	800ecf8 <__swsetup_r>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d0d5      	beq.n	800ec9e <__swbuf_r+0x20>
 800ecf2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ecf6:	e7f4      	b.n	800ece2 <__swbuf_r+0x64>

0800ecf8 <__swsetup_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4b2a      	ldr	r3, [pc, #168]	; (800eda4 <__swsetup_r+0xac>)
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	6818      	ldr	r0, [r3, #0]
 800ed00:	460c      	mov	r4, r1
 800ed02:	b118      	cbz	r0, 800ed0c <__swsetup_r+0x14>
 800ed04:	6a03      	ldr	r3, [r0, #32]
 800ed06:	b90b      	cbnz	r3, 800ed0c <__swsetup_r+0x14>
 800ed08:	f7ff fe84 	bl	800ea14 <__sinit>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed12:	0718      	lsls	r0, r3, #28
 800ed14:	d422      	bmi.n	800ed5c <__swsetup_r+0x64>
 800ed16:	06d9      	lsls	r1, r3, #27
 800ed18:	d407      	bmi.n	800ed2a <__swsetup_r+0x32>
 800ed1a:	2309      	movs	r3, #9
 800ed1c:	602b      	str	r3, [r5, #0]
 800ed1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed22:	81a3      	strh	r3, [r4, #12]
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed28:	e034      	b.n	800ed94 <__swsetup_r+0x9c>
 800ed2a:	0758      	lsls	r0, r3, #29
 800ed2c:	d512      	bpl.n	800ed54 <__swsetup_r+0x5c>
 800ed2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed30:	b141      	cbz	r1, 800ed44 <__swsetup_r+0x4c>
 800ed32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed36:	4299      	cmp	r1, r3
 800ed38:	d002      	beq.n	800ed40 <__swsetup_r+0x48>
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f000 ffbe 	bl	800fcbc <_free_r>
 800ed40:	2300      	movs	r3, #0
 800ed42:	6363      	str	r3, [r4, #52]	; 0x34
 800ed44:	89a3      	ldrh	r3, [r4, #12]
 800ed46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed4a:	81a3      	strh	r3, [r4, #12]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	6063      	str	r3, [r4, #4]
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	89a3      	ldrh	r3, [r4, #12]
 800ed56:	f043 0308 	orr.w	r3, r3, #8
 800ed5a:	81a3      	strh	r3, [r4, #12]
 800ed5c:	6923      	ldr	r3, [r4, #16]
 800ed5e:	b94b      	cbnz	r3, 800ed74 <__swsetup_r+0x7c>
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed6a:	d003      	beq.n	800ed74 <__swsetup_r+0x7c>
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f002 feac 	bl	8011acc <__smakebuf_r>
 800ed74:	89a0      	ldrh	r0, [r4, #12]
 800ed76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed7a:	f010 0301 	ands.w	r3, r0, #1
 800ed7e:	d00a      	beq.n	800ed96 <__swsetup_r+0x9e>
 800ed80:	2300      	movs	r3, #0
 800ed82:	60a3      	str	r3, [r4, #8]
 800ed84:	6963      	ldr	r3, [r4, #20]
 800ed86:	425b      	negs	r3, r3
 800ed88:	61a3      	str	r3, [r4, #24]
 800ed8a:	6923      	ldr	r3, [r4, #16]
 800ed8c:	b943      	cbnz	r3, 800eda0 <__swsetup_r+0xa8>
 800ed8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed92:	d1c4      	bne.n	800ed1e <__swsetup_r+0x26>
 800ed94:	bd38      	pop	{r3, r4, r5, pc}
 800ed96:	0781      	lsls	r1, r0, #30
 800ed98:	bf58      	it	pl
 800ed9a:	6963      	ldrpl	r3, [r4, #20]
 800ed9c:	60a3      	str	r3, [r4, #8]
 800ed9e:	e7f4      	b.n	800ed8a <__swsetup_r+0x92>
 800eda0:	2000      	movs	r0, #0
 800eda2:	e7f7      	b.n	800ed94 <__swsetup_r+0x9c>
 800eda4:	200002b0 	.word	0x200002b0

0800eda8 <memset>:
 800eda8:	4402      	add	r2, r0
 800edaa:	4603      	mov	r3, r0
 800edac:	4293      	cmp	r3, r2
 800edae:	d100      	bne.n	800edb2 <memset+0xa>
 800edb0:	4770      	bx	lr
 800edb2:	f803 1b01 	strb.w	r1, [r3], #1
 800edb6:	e7f9      	b.n	800edac <memset+0x4>

0800edb8 <strncmp>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	b16a      	cbz	r2, 800edd8 <strncmp+0x20>
 800edbc:	3901      	subs	r1, #1
 800edbe:	1884      	adds	r4, r0, r2
 800edc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800edc8:	429a      	cmp	r2, r3
 800edca:	d103      	bne.n	800edd4 <strncmp+0x1c>
 800edcc:	42a0      	cmp	r0, r4
 800edce:	d001      	beq.n	800edd4 <strncmp+0x1c>
 800edd0:	2a00      	cmp	r2, #0
 800edd2:	d1f5      	bne.n	800edc0 <strncmp+0x8>
 800edd4:	1ad0      	subs	r0, r2, r3
 800edd6:	bd10      	pop	{r4, pc}
 800edd8:	4610      	mov	r0, r2
 800edda:	e7fc      	b.n	800edd6 <strncmp+0x1e>

0800eddc <_localeconv_r>:
 800eddc:	4800      	ldr	r0, [pc, #0]	; (800ede0 <_localeconv_r+0x4>)
 800edde:	4770      	bx	lr
 800ede0:	200001e8 	.word	0x200001e8

0800ede4 <_close_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d06      	ldr	r5, [pc, #24]	; (800ee00 <_close_r+0x1c>)
 800ede8:	2300      	movs	r3, #0
 800edea:	4604      	mov	r4, r0
 800edec:	4608      	mov	r0, r1
 800edee:	602b      	str	r3, [r5, #0]
 800edf0:	f7f3 fc19 	bl	8002626 <_close>
 800edf4:	1c43      	adds	r3, r0, #1
 800edf6:	d102      	bne.n	800edfe <_close_r+0x1a>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	b103      	cbz	r3, 800edfe <_close_r+0x1a>
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	20005754 	.word	0x20005754

0800ee04 <_reclaim_reent>:
 800ee04:	4b29      	ldr	r3, [pc, #164]	; (800eeac <_reclaim_reent+0xa8>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4283      	cmp	r3, r0
 800ee0a:	b570      	push	{r4, r5, r6, lr}
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	d04b      	beq.n	800eea8 <_reclaim_reent+0xa4>
 800ee10:	69c3      	ldr	r3, [r0, #28]
 800ee12:	b143      	cbz	r3, 800ee26 <_reclaim_reent+0x22>
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d144      	bne.n	800eea4 <_reclaim_reent+0xa0>
 800ee1a:	69e3      	ldr	r3, [r4, #28]
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	b111      	cbz	r1, 800ee26 <_reclaim_reent+0x22>
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 ff4b 	bl	800fcbc <_free_r>
 800ee26:	6961      	ldr	r1, [r4, #20]
 800ee28:	b111      	cbz	r1, 800ee30 <_reclaim_reent+0x2c>
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 ff46 	bl	800fcbc <_free_r>
 800ee30:	69e1      	ldr	r1, [r4, #28]
 800ee32:	b111      	cbz	r1, 800ee3a <_reclaim_reent+0x36>
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 ff41 	bl	800fcbc <_free_r>
 800ee3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ee3c:	b111      	cbz	r1, 800ee44 <_reclaim_reent+0x40>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 ff3c 	bl	800fcbc <_free_r>
 800ee44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee46:	b111      	cbz	r1, 800ee4e <_reclaim_reent+0x4a>
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 ff37 	bl	800fcbc <_free_r>
 800ee4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ee50:	b111      	cbz	r1, 800ee58 <_reclaim_reent+0x54>
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 ff32 	bl	800fcbc <_free_r>
 800ee58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ee5a:	b111      	cbz	r1, 800ee62 <_reclaim_reent+0x5e>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f000 ff2d 	bl	800fcbc <_free_r>
 800ee62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ee64:	b111      	cbz	r1, 800ee6c <_reclaim_reent+0x68>
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 ff28 	bl	800fcbc <_free_r>
 800ee6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ee6e:	b111      	cbz	r1, 800ee76 <_reclaim_reent+0x72>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 ff23 	bl	800fcbc <_free_r>
 800ee76:	6a23      	ldr	r3, [r4, #32]
 800ee78:	b1b3      	cbz	r3, 800eea8 <_reclaim_reent+0xa4>
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee80:	4718      	bx	r3
 800ee82:	5949      	ldr	r1, [r1, r5]
 800ee84:	b941      	cbnz	r1, 800ee98 <_reclaim_reent+0x94>
 800ee86:	3504      	adds	r5, #4
 800ee88:	69e3      	ldr	r3, [r4, #28]
 800ee8a:	2d80      	cmp	r5, #128	; 0x80
 800ee8c:	68d9      	ldr	r1, [r3, #12]
 800ee8e:	d1f8      	bne.n	800ee82 <_reclaim_reent+0x7e>
 800ee90:	4620      	mov	r0, r4
 800ee92:	f000 ff13 	bl	800fcbc <_free_r>
 800ee96:	e7c0      	b.n	800ee1a <_reclaim_reent+0x16>
 800ee98:	680e      	ldr	r6, [r1, #0]
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f000 ff0e 	bl	800fcbc <_free_r>
 800eea0:	4631      	mov	r1, r6
 800eea2:	e7ef      	b.n	800ee84 <_reclaim_reent+0x80>
 800eea4:	2500      	movs	r5, #0
 800eea6:	e7ef      	b.n	800ee88 <_reclaim_reent+0x84>
 800eea8:	bd70      	pop	{r4, r5, r6, pc}
 800eeaa:	bf00      	nop
 800eeac:	200002b0 	.word	0x200002b0

0800eeb0 <_lseek_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	; (800eed0 <_lseek_r+0x20>)
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	4608      	mov	r0, r1
 800eeb8:	4611      	mov	r1, r2
 800eeba:	2200      	movs	r2, #0
 800eebc:	602a      	str	r2, [r5, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	f7f3 fbd8 	bl	8002674 <_lseek>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d102      	bne.n	800eece <_lseek_r+0x1e>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	b103      	cbz	r3, 800eece <_lseek_r+0x1e>
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	20005754 	.word	0x20005754

0800eed4 <_read_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4d07      	ldr	r5, [pc, #28]	; (800eef4 <_read_r+0x20>)
 800eed8:	4604      	mov	r4, r0
 800eeda:	4608      	mov	r0, r1
 800eedc:	4611      	mov	r1, r2
 800eede:	2200      	movs	r2, #0
 800eee0:	602a      	str	r2, [r5, #0]
 800eee2:	461a      	mov	r2, r3
 800eee4:	f7f3 fb82 	bl	80025ec <_read>
 800eee8:	1c43      	adds	r3, r0, #1
 800eeea:	d102      	bne.n	800eef2 <_read_r+0x1e>
 800eeec:	682b      	ldr	r3, [r5, #0]
 800eeee:	b103      	cbz	r3, 800eef2 <_read_r+0x1e>
 800eef0:	6023      	str	r3, [r4, #0]
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
 800eef4:	20005754 	.word	0x20005754

0800eef8 <_sbrk_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4d06      	ldr	r5, [pc, #24]	; (800ef14 <_sbrk_r+0x1c>)
 800eefc:	2300      	movs	r3, #0
 800eefe:	4604      	mov	r4, r0
 800ef00:	4608      	mov	r0, r1
 800ef02:	602b      	str	r3, [r5, #0]
 800ef04:	f7f3 fbc4 	bl	8002690 <_sbrk>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d102      	bne.n	800ef12 <_sbrk_r+0x1a>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <_sbrk_r+0x1a>
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
 800ef14:	20005754 	.word	0x20005754

0800ef18 <_write_r>:
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4d07      	ldr	r5, [pc, #28]	; (800ef38 <_write_r+0x20>)
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	4608      	mov	r0, r1
 800ef20:	4611      	mov	r1, r2
 800ef22:	2200      	movs	r2, #0
 800ef24:	602a      	str	r2, [r5, #0]
 800ef26:	461a      	mov	r2, r3
 800ef28:	f7f2 fd5a 	bl	80019e0 <_write>
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	d102      	bne.n	800ef36 <_write_r+0x1e>
 800ef30:	682b      	ldr	r3, [r5, #0]
 800ef32:	b103      	cbz	r3, 800ef36 <_write_r+0x1e>
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	bd38      	pop	{r3, r4, r5, pc}
 800ef38:	20005754 	.word	0x20005754

0800ef3c <__errno>:
 800ef3c:	4b01      	ldr	r3, [pc, #4]	; (800ef44 <__errno+0x8>)
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	200002b0 	.word	0x200002b0

0800ef48 <__libc_init_array>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4d0d      	ldr	r5, [pc, #52]	; (800ef80 <__libc_init_array+0x38>)
 800ef4c:	4c0d      	ldr	r4, [pc, #52]	; (800ef84 <__libc_init_array+0x3c>)
 800ef4e:	1b64      	subs	r4, r4, r5
 800ef50:	10a4      	asrs	r4, r4, #2
 800ef52:	2600      	movs	r6, #0
 800ef54:	42a6      	cmp	r6, r4
 800ef56:	d109      	bne.n	800ef6c <__libc_init_array+0x24>
 800ef58:	4d0b      	ldr	r5, [pc, #44]	; (800ef88 <__libc_init_array+0x40>)
 800ef5a:	4c0c      	ldr	r4, [pc, #48]	; (800ef8c <__libc_init_array+0x44>)
 800ef5c:	f004 f914 	bl	8013188 <_init>
 800ef60:	1b64      	subs	r4, r4, r5
 800ef62:	10a4      	asrs	r4, r4, #2
 800ef64:	2600      	movs	r6, #0
 800ef66:	42a6      	cmp	r6, r4
 800ef68:	d105      	bne.n	800ef76 <__libc_init_array+0x2e>
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}
 800ef6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef70:	4798      	blx	r3
 800ef72:	3601      	adds	r6, #1
 800ef74:	e7ee      	b.n	800ef54 <__libc_init_array+0xc>
 800ef76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef7a:	4798      	blx	r3
 800ef7c:	3601      	adds	r6, #1
 800ef7e:	e7f2      	b.n	800ef66 <__libc_init_array+0x1e>
 800ef80:	08013aa0 	.word	0x08013aa0
 800ef84:	08013aa0 	.word	0x08013aa0
 800ef88:	08013aa0 	.word	0x08013aa0
 800ef8c:	08013aa4 	.word	0x08013aa4

0800ef90 <__retarget_lock_init_recursive>:
 800ef90:	4770      	bx	lr

0800ef92 <__retarget_lock_acquire_recursive>:
 800ef92:	4770      	bx	lr

0800ef94 <__retarget_lock_release_recursive>:
 800ef94:	4770      	bx	lr

0800ef96 <memcpy>:
 800ef96:	440a      	add	r2, r1
 800ef98:	4291      	cmp	r1, r2
 800ef9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef9e:	d100      	bne.n	800efa2 <memcpy+0xc>
 800efa0:	4770      	bx	lr
 800efa2:	b510      	push	{r4, lr}
 800efa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efac:	4291      	cmp	r1, r2
 800efae:	d1f9      	bne.n	800efa4 <memcpy+0xe>
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	0000      	movs	r0, r0
 800efb4:	0000      	movs	r0, r0
	...

0800efb8 <nan>:
 800efb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efc0 <nan+0x8>
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	00000000 	.word	0x00000000
 800efc4:	7ff80000 	.word	0x7ff80000

0800efc8 <quorem>:
 800efc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	6903      	ldr	r3, [r0, #16]
 800efce:	690c      	ldr	r4, [r1, #16]
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	4607      	mov	r7, r0
 800efd4:	db7e      	blt.n	800f0d4 <quorem+0x10c>
 800efd6:	3c01      	subs	r4, #1
 800efd8:	f101 0814 	add.w	r8, r1, #20
 800efdc:	f100 0514 	add.w	r5, r0, #20
 800efe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efee:	3301      	adds	r3, #1
 800eff0:	429a      	cmp	r2, r3
 800eff2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800effa:	fbb2 f6f3 	udiv	r6, r2, r3
 800effe:	d331      	bcc.n	800f064 <quorem+0x9c>
 800f000:	f04f 0e00 	mov.w	lr, #0
 800f004:	4640      	mov	r0, r8
 800f006:	46ac      	mov	ip, r5
 800f008:	46f2      	mov	sl, lr
 800f00a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f00e:	b293      	uxth	r3, r2
 800f010:	fb06 e303 	mla	r3, r6, r3, lr
 800f014:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f018:	0c1a      	lsrs	r2, r3, #16
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	ebaa 0303 	sub.w	r3, sl, r3
 800f020:	f8dc a000 	ldr.w	sl, [ip]
 800f024:	fa13 f38a 	uxtah	r3, r3, sl
 800f028:	fb06 220e 	mla	r2, r6, lr, r2
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	9b00      	ldr	r3, [sp, #0]
 800f030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f034:	b292      	uxth	r2, r2
 800f036:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f03a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f03e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f042:	4581      	cmp	r9, r0
 800f044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f048:	f84c 3b04 	str.w	r3, [ip], #4
 800f04c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f050:	d2db      	bcs.n	800f00a <quorem+0x42>
 800f052:	f855 300b 	ldr.w	r3, [r5, fp]
 800f056:	b92b      	cbnz	r3, 800f064 <quorem+0x9c>
 800f058:	9b01      	ldr	r3, [sp, #4]
 800f05a:	3b04      	subs	r3, #4
 800f05c:	429d      	cmp	r5, r3
 800f05e:	461a      	mov	r2, r3
 800f060:	d32c      	bcc.n	800f0bc <quorem+0xf4>
 800f062:	613c      	str	r4, [r7, #16]
 800f064:	4638      	mov	r0, r7
 800f066:	f001 fca5 	bl	80109b4 <__mcmp>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	db22      	blt.n	800f0b4 <quorem+0xec>
 800f06e:	3601      	adds	r6, #1
 800f070:	4629      	mov	r1, r5
 800f072:	2000      	movs	r0, #0
 800f074:	f858 2b04 	ldr.w	r2, [r8], #4
 800f078:	f8d1 c000 	ldr.w	ip, [r1]
 800f07c:	b293      	uxth	r3, r2
 800f07e:	1ac3      	subs	r3, r0, r3
 800f080:	0c12      	lsrs	r2, r2, #16
 800f082:	fa13 f38c 	uxtah	r3, r3, ip
 800f086:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f08a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f08e:	b29b      	uxth	r3, r3
 800f090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f094:	45c1      	cmp	r9, r8
 800f096:	f841 3b04 	str.w	r3, [r1], #4
 800f09a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f09e:	d2e9      	bcs.n	800f074 <quorem+0xac>
 800f0a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0a8:	b922      	cbnz	r2, 800f0b4 <quorem+0xec>
 800f0aa:	3b04      	subs	r3, #4
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	d30a      	bcc.n	800f0c8 <quorem+0x100>
 800f0b2:	613c      	str	r4, [r7, #16]
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	b003      	add	sp, #12
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	6812      	ldr	r2, [r2, #0]
 800f0be:	3b04      	subs	r3, #4
 800f0c0:	2a00      	cmp	r2, #0
 800f0c2:	d1ce      	bne.n	800f062 <quorem+0x9a>
 800f0c4:	3c01      	subs	r4, #1
 800f0c6:	e7c9      	b.n	800f05c <quorem+0x94>
 800f0c8:	6812      	ldr	r2, [r2, #0]
 800f0ca:	3b04      	subs	r3, #4
 800f0cc:	2a00      	cmp	r2, #0
 800f0ce:	d1f0      	bne.n	800f0b2 <quorem+0xea>
 800f0d0:	3c01      	subs	r4, #1
 800f0d2:	e7eb      	b.n	800f0ac <quorem+0xe4>
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	e7ee      	b.n	800f0b6 <quorem+0xee>

0800f0d8 <_dtoa_r>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	ed2d 8b04 	vpush	{d8-d9}
 800f0e0:	69c5      	ldr	r5, [r0, #28]
 800f0e2:	b093      	sub	sp, #76	; 0x4c
 800f0e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0e8:	ec57 6b10 	vmov	r6, r7, d0
 800f0ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0f0:	9107      	str	r1, [sp, #28]
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800f0f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f0f8:	b975      	cbnz	r5, 800f118 <_dtoa_r+0x40>
 800f0fa:	2010      	movs	r0, #16
 800f0fc:	f7fe f88c 	bl	800d218 <malloc>
 800f100:	4602      	mov	r2, r0
 800f102:	61e0      	str	r0, [r4, #28]
 800f104:	b920      	cbnz	r0, 800f110 <_dtoa_r+0x38>
 800f106:	4bae      	ldr	r3, [pc, #696]	; (800f3c0 <_dtoa_r+0x2e8>)
 800f108:	21ef      	movs	r1, #239	; 0xef
 800f10a:	48ae      	ldr	r0, [pc, #696]	; (800f3c4 <_dtoa_r+0x2ec>)
 800f10c:	f002 fdca 	bl	8011ca4 <__assert_func>
 800f110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f114:	6005      	str	r5, [r0, #0]
 800f116:	60c5      	str	r5, [r0, #12]
 800f118:	69e3      	ldr	r3, [r4, #28]
 800f11a:	6819      	ldr	r1, [r3, #0]
 800f11c:	b151      	cbz	r1, 800f134 <_dtoa_r+0x5c>
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	604a      	str	r2, [r1, #4]
 800f122:	2301      	movs	r3, #1
 800f124:	4093      	lsls	r3, r2
 800f126:	608b      	str	r3, [r1, #8]
 800f128:	4620      	mov	r0, r4
 800f12a:	f001 f9bd 	bl	80104a8 <_Bfree>
 800f12e:	69e3      	ldr	r3, [r4, #28]
 800f130:	2200      	movs	r2, #0
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	1e3b      	subs	r3, r7, #0
 800f136:	bfbb      	ittet	lt
 800f138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f13c:	9303      	strlt	r3, [sp, #12]
 800f13e:	2300      	movge	r3, #0
 800f140:	2201      	movlt	r2, #1
 800f142:	bfac      	ite	ge
 800f144:	f8c8 3000 	strge.w	r3, [r8]
 800f148:	f8c8 2000 	strlt.w	r2, [r8]
 800f14c:	4b9e      	ldr	r3, [pc, #632]	; (800f3c8 <_dtoa_r+0x2f0>)
 800f14e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f152:	ea33 0308 	bics.w	r3, r3, r8
 800f156:	d11b      	bne.n	800f190 <_dtoa_r+0xb8>
 800f158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f15a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f15e:	6013      	str	r3, [r2, #0]
 800f160:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f164:	4333      	orrs	r3, r6
 800f166:	f000 8593 	beq.w	800fc90 <_dtoa_r+0xbb8>
 800f16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f16c:	b963      	cbnz	r3, 800f188 <_dtoa_r+0xb0>
 800f16e:	4b97      	ldr	r3, [pc, #604]	; (800f3cc <_dtoa_r+0x2f4>)
 800f170:	e027      	b.n	800f1c2 <_dtoa_r+0xea>
 800f172:	4b97      	ldr	r3, [pc, #604]	; (800f3d0 <_dtoa_r+0x2f8>)
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	3308      	adds	r3, #8
 800f178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f17a:	6013      	str	r3, [r2, #0]
 800f17c:	9800      	ldr	r0, [sp, #0]
 800f17e:	b013      	add	sp, #76	; 0x4c
 800f180:	ecbd 8b04 	vpop	{d8-d9}
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	4b90      	ldr	r3, [pc, #576]	; (800f3cc <_dtoa_r+0x2f4>)
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	3303      	adds	r3, #3
 800f18e:	e7f3      	b.n	800f178 <_dtoa_r+0xa0>
 800f190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f194:	2200      	movs	r2, #0
 800f196:	ec51 0b17 	vmov	r0, r1, d7
 800f19a:	eeb0 8a47 	vmov.f32	s16, s14
 800f19e:	eef0 8a67 	vmov.f32	s17, s15
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f7f1 fca8 	bl	8000af8 <__aeabi_dcmpeq>
 800f1a8:	4681      	mov	r9, r0
 800f1aa:	b160      	cbz	r0, 800f1c6 <_dtoa_r+0xee>
 800f1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	6013      	str	r3, [r2, #0]
 800f1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 8568 	beq.w	800fc8a <_dtoa_r+0xbb2>
 800f1ba:	4b86      	ldr	r3, [pc, #536]	; (800f3d4 <_dtoa_r+0x2fc>)
 800f1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	e7da      	b.n	800f17c <_dtoa_r+0xa4>
 800f1c6:	aa10      	add	r2, sp, #64	; 0x40
 800f1c8:	a911      	add	r1, sp, #68	; 0x44
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f1d0:	eef0 0a68 	vmov.f32	s1, s17
 800f1d4:	f001 fd04 	bl	8010be0 <__d2b>
 800f1d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f1dc:	4682      	mov	sl, r0
 800f1de:	2d00      	cmp	r5, #0
 800f1e0:	d07f      	beq.n	800f2e2 <_dtoa_r+0x20a>
 800f1e2:	ee18 3a90 	vmov	r3, s17
 800f1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f1ee:	ec51 0b18 	vmov	r0, r1, d8
 800f1f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f1f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f1fe:	4619      	mov	r1, r3
 800f200:	2200      	movs	r2, #0
 800f202:	4b75      	ldr	r3, [pc, #468]	; (800f3d8 <_dtoa_r+0x300>)
 800f204:	f7f1 f858 	bl	80002b8 <__aeabi_dsub>
 800f208:	a367      	add	r3, pc, #412	; (adr r3, 800f3a8 <_dtoa_r+0x2d0>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f7f1 fa0b 	bl	8000628 <__aeabi_dmul>
 800f212:	a367      	add	r3, pc, #412	; (adr r3, 800f3b0 <_dtoa_r+0x2d8>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	f7f1 f850 	bl	80002bc <__adddf3>
 800f21c:	4606      	mov	r6, r0
 800f21e:	4628      	mov	r0, r5
 800f220:	460f      	mov	r7, r1
 800f222:	f7f1 f997 	bl	8000554 <__aeabi_i2d>
 800f226:	a364      	add	r3, pc, #400	; (adr r3, 800f3b8 <_dtoa_r+0x2e0>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f9fc 	bl	8000628 <__aeabi_dmul>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4630      	mov	r0, r6
 800f236:	4639      	mov	r1, r7
 800f238:	f7f1 f840 	bl	80002bc <__adddf3>
 800f23c:	4606      	mov	r6, r0
 800f23e:	460f      	mov	r7, r1
 800f240:	f7f1 fca2 	bl	8000b88 <__aeabi_d2iz>
 800f244:	2200      	movs	r2, #0
 800f246:	4683      	mov	fp, r0
 800f248:	2300      	movs	r3, #0
 800f24a:	4630      	mov	r0, r6
 800f24c:	4639      	mov	r1, r7
 800f24e:	f7f1 fc5d 	bl	8000b0c <__aeabi_dcmplt>
 800f252:	b148      	cbz	r0, 800f268 <_dtoa_r+0x190>
 800f254:	4658      	mov	r0, fp
 800f256:	f7f1 f97d 	bl	8000554 <__aeabi_i2d>
 800f25a:	4632      	mov	r2, r6
 800f25c:	463b      	mov	r3, r7
 800f25e:	f7f1 fc4b 	bl	8000af8 <__aeabi_dcmpeq>
 800f262:	b908      	cbnz	r0, 800f268 <_dtoa_r+0x190>
 800f264:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f268:	f1bb 0f16 	cmp.w	fp, #22
 800f26c:	d857      	bhi.n	800f31e <_dtoa_r+0x246>
 800f26e:	4b5b      	ldr	r3, [pc, #364]	; (800f3dc <_dtoa_r+0x304>)
 800f270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	ec51 0b18 	vmov	r0, r1, d8
 800f27c:	f7f1 fc46 	bl	8000b0c <__aeabi_dcmplt>
 800f280:	2800      	cmp	r0, #0
 800f282:	d04e      	beq.n	800f322 <_dtoa_r+0x24a>
 800f284:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f288:	2300      	movs	r3, #0
 800f28a:	930c      	str	r3, [sp, #48]	; 0x30
 800f28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f28e:	1b5b      	subs	r3, r3, r5
 800f290:	1e5a      	subs	r2, r3, #1
 800f292:	bf45      	ittet	mi
 800f294:	f1c3 0301 	rsbmi	r3, r3, #1
 800f298:	9305      	strmi	r3, [sp, #20]
 800f29a:	2300      	movpl	r3, #0
 800f29c:	2300      	movmi	r3, #0
 800f29e:	9206      	str	r2, [sp, #24]
 800f2a0:	bf54      	ite	pl
 800f2a2:	9305      	strpl	r3, [sp, #20]
 800f2a4:	9306      	strmi	r3, [sp, #24]
 800f2a6:	f1bb 0f00 	cmp.w	fp, #0
 800f2aa:	db3c      	blt.n	800f326 <_dtoa_r+0x24e>
 800f2ac:	9b06      	ldr	r3, [sp, #24]
 800f2ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f2b2:	445b      	add	r3, fp
 800f2b4:	9306      	str	r3, [sp, #24]
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	9b07      	ldr	r3, [sp, #28]
 800f2bc:	2b09      	cmp	r3, #9
 800f2be:	d868      	bhi.n	800f392 <_dtoa_r+0x2ba>
 800f2c0:	2b05      	cmp	r3, #5
 800f2c2:	bfc4      	itt	gt
 800f2c4:	3b04      	subgt	r3, #4
 800f2c6:	9307      	strgt	r3, [sp, #28]
 800f2c8:	9b07      	ldr	r3, [sp, #28]
 800f2ca:	f1a3 0302 	sub.w	r3, r3, #2
 800f2ce:	bfcc      	ite	gt
 800f2d0:	2500      	movgt	r5, #0
 800f2d2:	2501      	movle	r5, #1
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	f200 8085 	bhi.w	800f3e4 <_dtoa_r+0x30c>
 800f2da:	e8df f003 	tbb	[pc, r3]
 800f2de:	3b2e      	.short	0x3b2e
 800f2e0:	5839      	.short	0x5839
 800f2e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f2e6:	441d      	add	r5, r3
 800f2e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	bfc1      	itttt	gt
 800f2f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800f2f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f2fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f300:	bfd6      	itet	le
 800f302:	f1c3 0320 	rsble	r3, r3, #32
 800f306:	ea48 0003 	orrgt.w	r0, r8, r3
 800f30a:	fa06 f003 	lslle.w	r0, r6, r3
 800f30e:	f7f1 f911 	bl	8000534 <__aeabi_ui2d>
 800f312:	2201      	movs	r2, #1
 800f314:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f318:	3d01      	subs	r5, #1
 800f31a:	920e      	str	r2, [sp, #56]	; 0x38
 800f31c:	e76f      	b.n	800f1fe <_dtoa_r+0x126>
 800f31e:	2301      	movs	r3, #1
 800f320:	e7b3      	b.n	800f28a <_dtoa_r+0x1b2>
 800f322:	900c      	str	r0, [sp, #48]	; 0x30
 800f324:	e7b2      	b.n	800f28c <_dtoa_r+0x1b4>
 800f326:	9b05      	ldr	r3, [sp, #20]
 800f328:	eba3 030b 	sub.w	r3, r3, fp
 800f32c:	9305      	str	r3, [sp, #20]
 800f32e:	f1cb 0300 	rsb	r3, fp, #0
 800f332:	9308      	str	r3, [sp, #32]
 800f334:	2300      	movs	r3, #0
 800f336:	930b      	str	r3, [sp, #44]	; 0x2c
 800f338:	e7bf      	b.n	800f2ba <_dtoa_r+0x1e2>
 800f33a:	2300      	movs	r3, #0
 800f33c:	9309      	str	r3, [sp, #36]	; 0x24
 800f33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f340:	2b00      	cmp	r3, #0
 800f342:	dc52      	bgt.n	800f3ea <_dtoa_r+0x312>
 800f344:	2301      	movs	r3, #1
 800f346:	9301      	str	r3, [sp, #4]
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	461a      	mov	r2, r3
 800f34c:	920a      	str	r2, [sp, #40]	; 0x28
 800f34e:	e00b      	b.n	800f368 <_dtoa_r+0x290>
 800f350:	2301      	movs	r3, #1
 800f352:	e7f3      	b.n	800f33c <_dtoa_r+0x264>
 800f354:	2300      	movs	r3, #0
 800f356:	9309      	str	r3, [sp, #36]	; 0x24
 800f358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f35a:	445b      	add	r3, fp
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	3301      	adds	r3, #1
 800f360:	2b01      	cmp	r3, #1
 800f362:	9304      	str	r3, [sp, #16]
 800f364:	bfb8      	it	lt
 800f366:	2301      	movlt	r3, #1
 800f368:	69e0      	ldr	r0, [r4, #28]
 800f36a:	2100      	movs	r1, #0
 800f36c:	2204      	movs	r2, #4
 800f36e:	f102 0614 	add.w	r6, r2, #20
 800f372:	429e      	cmp	r6, r3
 800f374:	d93d      	bls.n	800f3f2 <_dtoa_r+0x31a>
 800f376:	6041      	str	r1, [r0, #4]
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 f855 	bl	8010428 <_Balloc>
 800f37e:	9000      	str	r0, [sp, #0]
 800f380:	2800      	cmp	r0, #0
 800f382:	d139      	bne.n	800f3f8 <_dtoa_r+0x320>
 800f384:	4b16      	ldr	r3, [pc, #88]	; (800f3e0 <_dtoa_r+0x308>)
 800f386:	4602      	mov	r2, r0
 800f388:	f240 11af 	movw	r1, #431	; 0x1af
 800f38c:	e6bd      	b.n	800f10a <_dtoa_r+0x32>
 800f38e:	2301      	movs	r3, #1
 800f390:	e7e1      	b.n	800f356 <_dtoa_r+0x27e>
 800f392:	2501      	movs	r5, #1
 800f394:	2300      	movs	r3, #0
 800f396:	9307      	str	r3, [sp, #28]
 800f398:	9509      	str	r5, [sp, #36]	; 0x24
 800f39a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	9304      	str	r3, [sp, #16]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2312      	movs	r3, #18
 800f3a6:	e7d1      	b.n	800f34c <_dtoa_r+0x274>
 800f3a8:	636f4361 	.word	0x636f4361
 800f3ac:	3fd287a7 	.word	0x3fd287a7
 800f3b0:	8b60c8b3 	.word	0x8b60c8b3
 800f3b4:	3fc68a28 	.word	0x3fc68a28
 800f3b8:	509f79fb 	.word	0x509f79fb
 800f3bc:	3fd34413 	.word	0x3fd34413
 800f3c0:	08013618 	.word	0x08013618
 800f3c4:	0801362f 	.word	0x0801362f
 800f3c8:	7ff00000 	.word	0x7ff00000
 800f3cc:	08013614 	.word	0x08013614
 800f3d0:	0801360b 	.word	0x0801360b
 800f3d4:	0801387c 	.word	0x0801387c
 800f3d8:	3ff80000 	.word	0x3ff80000
 800f3dc:	08013780 	.word	0x08013780
 800f3e0:	08013687 	.word	0x08013687
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e8:	e7d7      	b.n	800f39a <_dtoa_r+0x2c2>
 800f3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	e7ba      	b.n	800f368 <_dtoa_r+0x290>
 800f3f2:	3101      	adds	r1, #1
 800f3f4:	0052      	lsls	r2, r2, #1
 800f3f6:	e7ba      	b.n	800f36e <_dtoa_r+0x296>
 800f3f8:	69e3      	ldr	r3, [r4, #28]
 800f3fa:	9a00      	ldr	r2, [sp, #0]
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	9b04      	ldr	r3, [sp, #16]
 800f400:	2b0e      	cmp	r3, #14
 800f402:	f200 80a8 	bhi.w	800f556 <_dtoa_r+0x47e>
 800f406:	2d00      	cmp	r5, #0
 800f408:	f000 80a5 	beq.w	800f556 <_dtoa_r+0x47e>
 800f40c:	f1bb 0f00 	cmp.w	fp, #0
 800f410:	dd38      	ble.n	800f484 <_dtoa_r+0x3ac>
 800f412:	4bc0      	ldr	r3, [pc, #768]	; (800f714 <_dtoa_r+0x63c>)
 800f414:	f00b 020f 	and.w	r2, fp, #15
 800f418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f41c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f420:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f424:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f428:	d019      	beq.n	800f45e <_dtoa_r+0x386>
 800f42a:	4bbb      	ldr	r3, [pc, #748]	; (800f718 <_dtoa_r+0x640>)
 800f42c:	ec51 0b18 	vmov	r0, r1, d8
 800f430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f434:	f7f1 fa22 	bl	800087c <__aeabi_ddiv>
 800f438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f43c:	f008 080f 	and.w	r8, r8, #15
 800f440:	2503      	movs	r5, #3
 800f442:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f718 <_dtoa_r+0x640>
 800f446:	f1b8 0f00 	cmp.w	r8, #0
 800f44a:	d10a      	bne.n	800f462 <_dtoa_r+0x38a>
 800f44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f450:	4632      	mov	r2, r6
 800f452:	463b      	mov	r3, r7
 800f454:	f7f1 fa12 	bl	800087c <__aeabi_ddiv>
 800f458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f45c:	e02b      	b.n	800f4b6 <_dtoa_r+0x3de>
 800f45e:	2502      	movs	r5, #2
 800f460:	e7ef      	b.n	800f442 <_dtoa_r+0x36a>
 800f462:	f018 0f01 	tst.w	r8, #1
 800f466:	d008      	beq.n	800f47a <_dtoa_r+0x3a2>
 800f468:	4630      	mov	r0, r6
 800f46a:	4639      	mov	r1, r7
 800f46c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f470:	f7f1 f8da 	bl	8000628 <__aeabi_dmul>
 800f474:	3501      	adds	r5, #1
 800f476:	4606      	mov	r6, r0
 800f478:	460f      	mov	r7, r1
 800f47a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f47e:	f109 0908 	add.w	r9, r9, #8
 800f482:	e7e0      	b.n	800f446 <_dtoa_r+0x36e>
 800f484:	f000 809f 	beq.w	800f5c6 <_dtoa_r+0x4ee>
 800f488:	f1cb 0600 	rsb	r6, fp, #0
 800f48c:	4ba1      	ldr	r3, [pc, #644]	; (800f714 <_dtoa_r+0x63c>)
 800f48e:	4fa2      	ldr	r7, [pc, #648]	; (800f718 <_dtoa_r+0x640>)
 800f490:	f006 020f 	and.w	r2, r6, #15
 800f494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49c:	ec51 0b18 	vmov	r0, r1, d8
 800f4a0:	f7f1 f8c2 	bl	8000628 <__aeabi_dmul>
 800f4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a8:	1136      	asrs	r6, r6, #4
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	2502      	movs	r5, #2
 800f4ae:	2e00      	cmp	r6, #0
 800f4b0:	d17e      	bne.n	800f5b0 <_dtoa_r+0x4d8>
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1d0      	bne.n	800f458 <_dtoa_r+0x380>
 800f4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f000 8084 	beq.w	800f5ca <_dtoa_r+0x4f2>
 800f4c2:	4b96      	ldr	r3, [pc, #600]	; (800f71c <_dtoa_r+0x644>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	4649      	mov	r1, r9
 800f4ca:	f7f1 fb1f 	bl	8000b0c <__aeabi_dcmplt>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d07b      	beq.n	800f5ca <_dtoa_r+0x4f2>
 800f4d2:	9b04      	ldr	r3, [sp, #16]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d078      	beq.n	800f5ca <_dtoa_r+0x4f2>
 800f4d8:	9b01      	ldr	r3, [sp, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	dd39      	ble.n	800f552 <_dtoa_r+0x47a>
 800f4de:	4b90      	ldr	r3, [pc, #576]	; (800f720 <_dtoa_r+0x648>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4640      	mov	r0, r8
 800f4e4:	4649      	mov	r1, r9
 800f4e6:	f7f1 f89f 	bl	8000628 <__aeabi_dmul>
 800f4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ee:	9e01      	ldr	r6, [sp, #4]
 800f4f0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f7f1 f82a 	bl	8000554 <__aeabi_i2d>
 800f500:	4642      	mov	r2, r8
 800f502:	464b      	mov	r3, r9
 800f504:	f7f1 f890 	bl	8000628 <__aeabi_dmul>
 800f508:	4b86      	ldr	r3, [pc, #536]	; (800f724 <_dtoa_r+0x64c>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	f7f0 fed6 	bl	80002bc <__adddf3>
 800f510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f518:	9303      	str	r3, [sp, #12]
 800f51a:	2e00      	cmp	r6, #0
 800f51c:	d158      	bne.n	800f5d0 <_dtoa_r+0x4f8>
 800f51e:	4b82      	ldr	r3, [pc, #520]	; (800f728 <_dtoa_r+0x650>)
 800f520:	2200      	movs	r2, #0
 800f522:	4640      	mov	r0, r8
 800f524:	4649      	mov	r1, r9
 800f526:	f7f0 fec7 	bl	80002b8 <__aeabi_dsub>
 800f52a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f52e:	4680      	mov	r8, r0
 800f530:	4689      	mov	r9, r1
 800f532:	f7f1 fb09 	bl	8000b48 <__aeabi_dcmpgt>
 800f536:	2800      	cmp	r0, #0
 800f538:	f040 8296 	bne.w	800fa68 <_dtoa_r+0x990>
 800f53c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f540:	4640      	mov	r0, r8
 800f542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f546:	4649      	mov	r1, r9
 800f548:	f7f1 fae0 	bl	8000b0c <__aeabi_dcmplt>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	f040 8289 	bne.w	800fa64 <_dtoa_r+0x98c>
 800f552:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f2c0 814e 	blt.w	800f7fa <_dtoa_r+0x722>
 800f55e:	f1bb 0f0e 	cmp.w	fp, #14
 800f562:	f300 814a 	bgt.w	800f7fa <_dtoa_r+0x722>
 800f566:	4b6b      	ldr	r3, [pc, #428]	; (800f714 <_dtoa_r+0x63c>)
 800f568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f56c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f572:	2b00      	cmp	r3, #0
 800f574:	f280 80dc 	bge.w	800f730 <_dtoa_r+0x658>
 800f578:	9b04      	ldr	r3, [sp, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f300 80d8 	bgt.w	800f730 <_dtoa_r+0x658>
 800f580:	f040 826f 	bne.w	800fa62 <_dtoa_r+0x98a>
 800f584:	4b68      	ldr	r3, [pc, #416]	; (800f728 <_dtoa_r+0x650>)
 800f586:	2200      	movs	r2, #0
 800f588:	4640      	mov	r0, r8
 800f58a:	4649      	mov	r1, r9
 800f58c:	f7f1 f84c 	bl	8000628 <__aeabi_dmul>
 800f590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f594:	f7f1 face 	bl	8000b34 <__aeabi_dcmpge>
 800f598:	9e04      	ldr	r6, [sp, #16]
 800f59a:	4637      	mov	r7, r6
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f040 8245 	bne.w	800fa2c <_dtoa_r+0x954>
 800f5a2:	9d00      	ldr	r5, [sp, #0]
 800f5a4:	2331      	movs	r3, #49	; 0x31
 800f5a6:	f805 3b01 	strb.w	r3, [r5], #1
 800f5aa:	f10b 0b01 	add.w	fp, fp, #1
 800f5ae:	e241      	b.n	800fa34 <_dtoa_r+0x95c>
 800f5b0:	07f2      	lsls	r2, r6, #31
 800f5b2:	d505      	bpl.n	800f5c0 <_dtoa_r+0x4e8>
 800f5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5b8:	f7f1 f836 	bl	8000628 <__aeabi_dmul>
 800f5bc:	3501      	adds	r5, #1
 800f5be:	2301      	movs	r3, #1
 800f5c0:	1076      	asrs	r6, r6, #1
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	e773      	b.n	800f4ae <_dtoa_r+0x3d6>
 800f5c6:	2502      	movs	r5, #2
 800f5c8:	e775      	b.n	800f4b6 <_dtoa_r+0x3de>
 800f5ca:	9e04      	ldr	r6, [sp, #16]
 800f5cc:	465f      	mov	r7, fp
 800f5ce:	e792      	b.n	800f4f6 <_dtoa_r+0x41e>
 800f5d0:	9900      	ldr	r1, [sp, #0]
 800f5d2:	4b50      	ldr	r3, [pc, #320]	; (800f714 <_dtoa_r+0x63c>)
 800f5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5d8:	4431      	add	r1, r6
 800f5da:	9102      	str	r1, [sp, #8]
 800f5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5de:	eeb0 9a47 	vmov.f32	s18, s14
 800f5e2:	eef0 9a67 	vmov.f32	s19, s15
 800f5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	d044      	beq.n	800f67c <_dtoa_r+0x5a4>
 800f5f2:	494e      	ldr	r1, [pc, #312]	; (800f72c <_dtoa_r+0x654>)
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f7f1 f941 	bl	800087c <__aeabi_ddiv>
 800f5fa:	ec53 2b19 	vmov	r2, r3, d9
 800f5fe:	f7f0 fe5b 	bl	80002b8 <__aeabi_dsub>
 800f602:	9d00      	ldr	r5, [sp, #0]
 800f604:	ec41 0b19 	vmov	d9, r0, r1
 800f608:	4649      	mov	r1, r9
 800f60a:	4640      	mov	r0, r8
 800f60c:	f7f1 fabc 	bl	8000b88 <__aeabi_d2iz>
 800f610:	4606      	mov	r6, r0
 800f612:	f7f0 ff9f 	bl	8000554 <__aeabi_i2d>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4640      	mov	r0, r8
 800f61c:	4649      	mov	r1, r9
 800f61e:	f7f0 fe4b 	bl	80002b8 <__aeabi_dsub>
 800f622:	3630      	adds	r6, #48	; 0x30
 800f624:	f805 6b01 	strb.w	r6, [r5], #1
 800f628:	ec53 2b19 	vmov	r2, r3, d9
 800f62c:	4680      	mov	r8, r0
 800f62e:	4689      	mov	r9, r1
 800f630:	f7f1 fa6c 	bl	8000b0c <__aeabi_dcmplt>
 800f634:	2800      	cmp	r0, #0
 800f636:	d164      	bne.n	800f702 <_dtoa_r+0x62a>
 800f638:	4642      	mov	r2, r8
 800f63a:	464b      	mov	r3, r9
 800f63c:	4937      	ldr	r1, [pc, #220]	; (800f71c <_dtoa_r+0x644>)
 800f63e:	2000      	movs	r0, #0
 800f640:	f7f0 fe3a 	bl	80002b8 <__aeabi_dsub>
 800f644:	ec53 2b19 	vmov	r2, r3, d9
 800f648:	f7f1 fa60 	bl	8000b0c <__aeabi_dcmplt>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	f040 80b6 	bne.w	800f7be <_dtoa_r+0x6e6>
 800f652:	9b02      	ldr	r3, [sp, #8]
 800f654:	429d      	cmp	r5, r3
 800f656:	f43f af7c 	beq.w	800f552 <_dtoa_r+0x47a>
 800f65a:	4b31      	ldr	r3, [pc, #196]	; (800f720 <_dtoa_r+0x648>)
 800f65c:	ec51 0b19 	vmov	r0, r1, d9
 800f660:	2200      	movs	r2, #0
 800f662:	f7f0 ffe1 	bl	8000628 <__aeabi_dmul>
 800f666:	4b2e      	ldr	r3, [pc, #184]	; (800f720 <_dtoa_r+0x648>)
 800f668:	ec41 0b19 	vmov	d9, r0, r1
 800f66c:	2200      	movs	r2, #0
 800f66e:	4640      	mov	r0, r8
 800f670:	4649      	mov	r1, r9
 800f672:	f7f0 ffd9 	bl	8000628 <__aeabi_dmul>
 800f676:	4680      	mov	r8, r0
 800f678:	4689      	mov	r9, r1
 800f67a:	e7c5      	b.n	800f608 <_dtoa_r+0x530>
 800f67c:	ec51 0b17 	vmov	r0, r1, d7
 800f680:	f7f0 ffd2 	bl	8000628 <__aeabi_dmul>
 800f684:	9b02      	ldr	r3, [sp, #8]
 800f686:	9d00      	ldr	r5, [sp, #0]
 800f688:	930f      	str	r3, [sp, #60]	; 0x3c
 800f68a:	ec41 0b19 	vmov	d9, r0, r1
 800f68e:	4649      	mov	r1, r9
 800f690:	4640      	mov	r0, r8
 800f692:	f7f1 fa79 	bl	8000b88 <__aeabi_d2iz>
 800f696:	4606      	mov	r6, r0
 800f698:	f7f0 ff5c 	bl	8000554 <__aeabi_i2d>
 800f69c:	3630      	adds	r6, #48	; 0x30
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	f7f0 fe07 	bl	80002b8 <__aeabi_dsub>
 800f6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800f6ae:	9b02      	ldr	r3, [sp, #8]
 800f6b0:	429d      	cmp	r5, r3
 800f6b2:	4680      	mov	r8, r0
 800f6b4:	4689      	mov	r9, r1
 800f6b6:	f04f 0200 	mov.w	r2, #0
 800f6ba:	d124      	bne.n	800f706 <_dtoa_r+0x62e>
 800f6bc:	4b1b      	ldr	r3, [pc, #108]	; (800f72c <_dtoa_r+0x654>)
 800f6be:	ec51 0b19 	vmov	r0, r1, d9
 800f6c2:	f7f0 fdfb 	bl	80002bc <__adddf3>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	f7f1 fa3b 	bl	8000b48 <__aeabi_dcmpgt>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d173      	bne.n	800f7be <_dtoa_r+0x6e6>
 800f6d6:	ec53 2b19 	vmov	r2, r3, d9
 800f6da:	4914      	ldr	r1, [pc, #80]	; (800f72c <_dtoa_r+0x654>)
 800f6dc:	2000      	movs	r0, #0
 800f6de:	f7f0 fdeb 	bl	80002b8 <__aeabi_dsub>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	f7f1 fa0f 	bl	8000b0c <__aeabi_dcmplt>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	f43f af2f 	beq.w	800f552 <_dtoa_r+0x47a>
 800f6f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6f6:	1e6b      	subs	r3, r5, #1
 800f6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6fe:	2b30      	cmp	r3, #48	; 0x30
 800f700:	d0f8      	beq.n	800f6f4 <_dtoa_r+0x61c>
 800f702:	46bb      	mov	fp, r7
 800f704:	e04a      	b.n	800f79c <_dtoa_r+0x6c4>
 800f706:	4b06      	ldr	r3, [pc, #24]	; (800f720 <_dtoa_r+0x648>)
 800f708:	f7f0 ff8e 	bl	8000628 <__aeabi_dmul>
 800f70c:	4680      	mov	r8, r0
 800f70e:	4689      	mov	r9, r1
 800f710:	e7bd      	b.n	800f68e <_dtoa_r+0x5b6>
 800f712:	bf00      	nop
 800f714:	08013780 	.word	0x08013780
 800f718:	08013758 	.word	0x08013758
 800f71c:	3ff00000 	.word	0x3ff00000
 800f720:	40240000 	.word	0x40240000
 800f724:	401c0000 	.word	0x401c0000
 800f728:	40140000 	.word	0x40140000
 800f72c:	3fe00000 	.word	0x3fe00000
 800f730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f734:	9d00      	ldr	r5, [sp, #0]
 800f736:	4642      	mov	r2, r8
 800f738:	464b      	mov	r3, r9
 800f73a:	4630      	mov	r0, r6
 800f73c:	4639      	mov	r1, r7
 800f73e:	f7f1 f89d 	bl	800087c <__aeabi_ddiv>
 800f742:	f7f1 fa21 	bl	8000b88 <__aeabi_d2iz>
 800f746:	9001      	str	r0, [sp, #4]
 800f748:	f7f0 ff04 	bl	8000554 <__aeabi_i2d>
 800f74c:	4642      	mov	r2, r8
 800f74e:	464b      	mov	r3, r9
 800f750:	f7f0 ff6a 	bl	8000628 <__aeabi_dmul>
 800f754:	4602      	mov	r2, r0
 800f756:	460b      	mov	r3, r1
 800f758:	4630      	mov	r0, r6
 800f75a:	4639      	mov	r1, r7
 800f75c:	f7f0 fdac 	bl	80002b8 <__aeabi_dsub>
 800f760:	9e01      	ldr	r6, [sp, #4]
 800f762:	9f04      	ldr	r7, [sp, #16]
 800f764:	3630      	adds	r6, #48	; 0x30
 800f766:	f805 6b01 	strb.w	r6, [r5], #1
 800f76a:	9e00      	ldr	r6, [sp, #0]
 800f76c:	1bae      	subs	r6, r5, r6
 800f76e:	42b7      	cmp	r7, r6
 800f770:	4602      	mov	r2, r0
 800f772:	460b      	mov	r3, r1
 800f774:	d134      	bne.n	800f7e0 <_dtoa_r+0x708>
 800f776:	f7f0 fda1 	bl	80002bc <__adddf3>
 800f77a:	4642      	mov	r2, r8
 800f77c:	464b      	mov	r3, r9
 800f77e:	4606      	mov	r6, r0
 800f780:	460f      	mov	r7, r1
 800f782:	f7f1 f9e1 	bl	8000b48 <__aeabi_dcmpgt>
 800f786:	b9c8      	cbnz	r0, 800f7bc <_dtoa_r+0x6e4>
 800f788:	4642      	mov	r2, r8
 800f78a:	464b      	mov	r3, r9
 800f78c:	4630      	mov	r0, r6
 800f78e:	4639      	mov	r1, r7
 800f790:	f7f1 f9b2 	bl	8000af8 <__aeabi_dcmpeq>
 800f794:	b110      	cbz	r0, 800f79c <_dtoa_r+0x6c4>
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	07db      	lsls	r3, r3, #31
 800f79a:	d40f      	bmi.n	800f7bc <_dtoa_r+0x6e4>
 800f79c:	4651      	mov	r1, sl
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fe82 	bl	80104a8 <_Bfree>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7a8:	702b      	strb	r3, [r5, #0]
 800f7aa:	f10b 0301 	add.w	r3, fp, #1
 800f7ae:	6013      	str	r3, [r2, #0]
 800f7b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f43f ace2 	beq.w	800f17c <_dtoa_r+0xa4>
 800f7b8:	601d      	str	r5, [r3, #0]
 800f7ba:	e4df      	b.n	800f17c <_dtoa_r+0xa4>
 800f7bc:	465f      	mov	r7, fp
 800f7be:	462b      	mov	r3, r5
 800f7c0:	461d      	mov	r5, r3
 800f7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7c6:	2a39      	cmp	r2, #57	; 0x39
 800f7c8:	d106      	bne.n	800f7d8 <_dtoa_r+0x700>
 800f7ca:	9a00      	ldr	r2, [sp, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d1f7      	bne.n	800f7c0 <_dtoa_r+0x6e8>
 800f7d0:	9900      	ldr	r1, [sp, #0]
 800f7d2:	2230      	movs	r2, #48	; 0x30
 800f7d4:	3701      	adds	r7, #1
 800f7d6:	700a      	strb	r2, [r1, #0]
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	3201      	adds	r2, #1
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	e790      	b.n	800f702 <_dtoa_r+0x62a>
 800f7e0:	4ba3      	ldr	r3, [pc, #652]	; (800fa70 <_dtoa_r+0x998>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f7f0 ff20 	bl	8000628 <__aeabi_dmul>
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	460f      	mov	r7, r1
 800f7f0:	f7f1 f982 	bl	8000af8 <__aeabi_dcmpeq>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d09e      	beq.n	800f736 <_dtoa_r+0x65e>
 800f7f8:	e7d0      	b.n	800f79c <_dtoa_r+0x6c4>
 800f7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7fc:	2a00      	cmp	r2, #0
 800f7fe:	f000 80ca 	beq.w	800f996 <_dtoa_r+0x8be>
 800f802:	9a07      	ldr	r2, [sp, #28]
 800f804:	2a01      	cmp	r2, #1
 800f806:	f300 80ad 	bgt.w	800f964 <_dtoa_r+0x88c>
 800f80a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f80c:	2a00      	cmp	r2, #0
 800f80e:	f000 80a5 	beq.w	800f95c <_dtoa_r+0x884>
 800f812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f816:	9e08      	ldr	r6, [sp, #32]
 800f818:	9d05      	ldr	r5, [sp, #20]
 800f81a:	9a05      	ldr	r2, [sp, #20]
 800f81c:	441a      	add	r2, r3
 800f81e:	9205      	str	r2, [sp, #20]
 800f820:	9a06      	ldr	r2, [sp, #24]
 800f822:	2101      	movs	r1, #1
 800f824:	441a      	add	r2, r3
 800f826:	4620      	mov	r0, r4
 800f828:	9206      	str	r2, [sp, #24]
 800f82a:	f000 ff3d 	bl	80106a8 <__i2b>
 800f82e:	4607      	mov	r7, r0
 800f830:	b165      	cbz	r5, 800f84c <_dtoa_r+0x774>
 800f832:	9b06      	ldr	r3, [sp, #24]
 800f834:	2b00      	cmp	r3, #0
 800f836:	dd09      	ble.n	800f84c <_dtoa_r+0x774>
 800f838:	42ab      	cmp	r3, r5
 800f83a:	9a05      	ldr	r2, [sp, #20]
 800f83c:	bfa8      	it	ge
 800f83e:	462b      	movge	r3, r5
 800f840:	1ad2      	subs	r2, r2, r3
 800f842:	9205      	str	r2, [sp, #20]
 800f844:	9a06      	ldr	r2, [sp, #24]
 800f846:	1aed      	subs	r5, r5, r3
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	9306      	str	r3, [sp, #24]
 800f84c:	9b08      	ldr	r3, [sp, #32]
 800f84e:	b1f3      	cbz	r3, 800f88e <_dtoa_r+0x7b6>
 800f850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 80a3 	beq.w	800f99e <_dtoa_r+0x8c6>
 800f858:	2e00      	cmp	r6, #0
 800f85a:	dd10      	ble.n	800f87e <_dtoa_r+0x7a6>
 800f85c:	4639      	mov	r1, r7
 800f85e:	4632      	mov	r2, r6
 800f860:	4620      	mov	r0, r4
 800f862:	f000 ffe1 	bl	8010828 <__pow5mult>
 800f866:	4652      	mov	r2, sl
 800f868:	4601      	mov	r1, r0
 800f86a:	4607      	mov	r7, r0
 800f86c:	4620      	mov	r0, r4
 800f86e:	f000 ff31 	bl	80106d4 <__multiply>
 800f872:	4651      	mov	r1, sl
 800f874:	4680      	mov	r8, r0
 800f876:	4620      	mov	r0, r4
 800f878:	f000 fe16 	bl	80104a8 <_Bfree>
 800f87c:	46c2      	mov	sl, r8
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	1b9a      	subs	r2, r3, r6
 800f882:	d004      	beq.n	800f88e <_dtoa_r+0x7b6>
 800f884:	4651      	mov	r1, sl
 800f886:	4620      	mov	r0, r4
 800f888:	f000 ffce 	bl	8010828 <__pow5mult>
 800f88c:	4682      	mov	sl, r0
 800f88e:	2101      	movs	r1, #1
 800f890:	4620      	mov	r0, r4
 800f892:	f000 ff09 	bl	80106a8 <__i2b>
 800f896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	4606      	mov	r6, r0
 800f89c:	f340 8081 	ble.w	800f9a2 <_dtoa_r+0x8ca>
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 ffbf 	bl	8010828 <__pow5mult>
 800f8aa:	9b07      	ldr	r3, [sp, #28]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	dd7a      	ble.n	800f9a8 <_dtoa_r+0x8d0>
 800f8b2:	f04f 0800 	mov.w	r8, #0
 800f8b6:	6933      	ldr	r3, [r6, #16]
 800f8b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8bc:	6918      	ldr	r0, [r3, #16]
 800f8be:	f000 fea5 	bl	801060c <__hi0bits>
 800f8c2:	f1c0 0020 	rsb	r0, r0, #32
 800f8c6:	9b06      	ldr	r3, [sp, #24]
 800f8c8:	4418      	add	r0, r3
 800f8ca:	f010 001f 	ands.w	r0, r0, #31
 800f8ce:	f000 8094 	beq.w	800f9fa <_dtoa_r+0x922>
 800f8d2:	f1c0 0320 	rsb	r3, r0, #32
 800f8d6:	2b04      	cmp	r3, #4
 800f8d8:	f340 8085 	ble.w	800f9e6 <_dtoa_r+0x90e>
 800f8dc:	9b05      	ldr	r3, [sp, #20]
 800f8de:	f1c0 001c 	rsb	r0, r0, #28
 800f8e2:	4403      	add	r3, r0
 800f8e4:	9305      	str	r3, [sp, #20]
 800f8e6:	9b06      	ldr	r3, [sp, #24]
 800f8e8:	4403      	add	r3, r0
 800f8ea:	4405      	add	r5, r0
 800f8ec:	9306      	str	r3, [sp, #24]
 800f8ee:	9b05      	ldr	r3, [sp, #20]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	dd05      	ble.n	800f900 <_dtoa_r+0x828>
 800f8f4:	4651      	mov	r1, sl
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f000 ffef 	bl	80108dc <__lshift>
 800f8fe:	4682      	mov	sl, r0
 800f900:	9b06      	ldr	r3, [sp, #24]
 800f902:	2b00      	cmp	r3, #0
 800f904:	dd05      	ble.n	800f912 <_dtoa_r+0x83a>
 800f906:	4631      	mov	r1, r6
 800f908:	461a      	mov	r2, r3
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 ffe6 	bl	80108dc <__lshift>
 800f910:	4606      	mov	r6, r0
 800f912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f914:	2b00      	cmp	r3, #0
 800f916:	d072      	beq.n	800f9fe <_dtoa_r+0x926>
 800f918:	4631      	mov	r1, r6
 800f91a:	4650      	mov	r0, sl
 800f91c:	f001 f84a 	bl	80109b4 <__mcmp>
 800f920:	2800      	cmp	r0, #0
 800f922:	da6c      	bge.n	800f9fe <_dtoa_r+0x926>
 800f924:	2300      	movs	r3, #0
 800f926:	4651      	mov	r1, sl
 800f928:	220a      	movs	r2, #10
 800f92a:	4620      	mov	r0, r4
 800f92c:	f000 fdde 	bl	80104ec <__multadd>
 800f930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f932:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f936:	4682      	mov	sl, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 81b0 	beq.w	800fc9e <_dtoa_r+0xbc6>
 800f93e:	2300      	movs	r3, #0
 800f940:	4639      	mov	r1, r7
 800f942:	220a      	movs	r2, #10
 800f944:	4620      	mov	r0, r4
 800f946:	f000 fdd1 	bl	80104ec <__multadd>
 800f94a:	9b01      	ldr	r3, [sp, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	4607      	mov	r7, r0
 800f950:	f300 8096 	bgt.w	800fa80 <_dtoa_r+0x9a8>
 800f954:	9b07      	ldr	r3, [sp, #28]
 800f956:	2b02      	cmp	r3, #2
 800f958:	dc59      	bgt.n	800fa0e <_dtoa_r+0x936>
 800f95a:	e091      	b.n	800fa80 <_dtoa_r+0x9a8>
 800f95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f95e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f962:	e758      	b.n	800f816 <_dtoa_r+0x73e>
 800f964:	9b04      	ldr	r3, [sp, #16]
 800f966:	1e5e      	subs	r6, r3, #1
 800f968:	9b08      	ldr	r3, [sp, #32]
 800f96a:	42b3      	cmp	r3, r6
 800f96c:	bfbf      	itttt	lt
 800f96e:	9b08      	ldrlt	r3, [sp, #32]
 800f970:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f972:	9608      	strlt	r6, [sp, #32]
 800f974:	1af3      	sublt	r3, r6, r3
 800f976:	bfb4      	ite	lt
 800f978:	18d2      	addlt	r2, r2, r3
 800f97a:	1b9e      	subge	r6, r3, r6
 800f97c:	9b04      	ldr	r3, [sp, #16]
 800f97e:	bfbc      	itt	lt
 800f980:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f982:	2600      	movlt	r6, #0
 800f984:	2b00      	cmp	r3, #0
 800f986:	bfb7      	itett	lt
 800f988:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f98c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f990:	1a9d      	sublt	r5, r3, r2
 800f992:	2300      	movlt	r3, #0
 800f994:	e741      	b.n	800f81a <_dtoa_r+0x742>
 800f996:	9e08      	ldr	r6, [sp, #32]
 800f998:	9d05      	ldr	r5, [sp, #20]
 800f99a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f99c:	e748      	b.n	800f830 <_dtoa_r+0x758>
 800f99e:	9a08      	ldr	r2, [sp, #32]
 800f9a0:	e770      	b.n	800f884 <_dtoa_r+0x7ac>
 800f9a2:	9b07      	ldr	r3, [sp, #28]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	dc19      	bgt.n	800f9dc <_dtoa_r+0x904>
 800f9a8:	9b02      	ldr	r3, [sp, #8]
 800f9aa:	b9bb      	cbnz	r3, 800f9dc <_dtoa_r+0x904>
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9b2:	b99b      	cbnz	r3, 800f9dc <_dtoa_r+0x904>
 800f9b4:	9b03      	ldr	r3, [sp, #12]
 800f9b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9ba:	0d1b      	lsrs	r3, r3, #20
 800f9bc:	051b      	lsls	r3, r3, #20
 800f9be:	b183      	cbz	r3, 800f9e2 <_dtoa_r+0x90a>
 800f9c0:	9b05      	ldr	r3, [sp, #20]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	9305      	str	r3, [sp, #20]
 800f9c6:	9b06      	ldr	r3, [sp, #24]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	9306      	str	r3, [sp, #24]
 800f9cc:	f04f 0801 	mov.w	r8, #1
 800f9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f47f af6f 	bne.w	800f8b6 <_dtoa_r+0x7de>
 800f9d8:	2001      	movs	r0, #1
 800f9da:	e774      	b.n	800f8c6 <_dtoa_r+0x7ee>
 800f9dc:	f04f 0800 	mov.w	r8, #0
 800f9e0:	e7f6      	b.n	800f9d0 <_dtoa_r+0x8f8>
 800f9e2:	4698      	mov	r8, r3
 800f9e4:	e7f4      	b.n	800f9d0 <_dtoa_r+0x8f8>
 800f9e6:	d082      	beq.n	800f8ee <_dtoa_r+0x816>
 800f9e8:	9a05      	ldr	r2, [sp, #20]
 800f9ea:	331c      	adds	r3, #28
 800f9ec:	441a      	add	r2, r3
 800f9ee:	9205      	str	r2, [sp, #20]
 800f9f0:	9a06      	ldr	r2, [sp, #24]
 800f9f2:	441a      	add	r2, r3
 800f9f4:	441d      	add	r5, r3
 800f9f6:	9206      	str	r2, [sp, #24]
 800f9f8:	e779      	b.n	800f8ee <_dtoa_r+0x816>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	e7f4      	b.n	800f9e8 <_dtoa_r+0x910>
 800f9fe:	9b04      	ldr	r3, [sp, #16]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dc37      	bgt.n	800fa74 <_dtoa_r+0x99c>
 800fa04:	9b07      	ldr	r3, [sp, #28]
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	dd34      	ble.n	800fa74 <_dtoa_r+0x99c>
 800fa0a:	9b04      	ldr	r3, [sp, #16]
 800fa0c:	9301      	str	r3, [sp, #4]
 800fa0e:	9b01      	ldr	r3, [sp, #4]
 800fa10:	b963      	cbnz	r3, 800fa2c <_dtoa_r+0x954>
 800fa12:	4631      	mov	r1, r6
 800fa14:	2205      	movs	r2, #5
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 fd68 	bl	80104ec <__multadd>
 800fa1c:	4601      	mov	r1, r0
 800fa1e:	4606      	mov	r6, r0
 800fa20:	4650      	mov	r0, sl
 800fa22:	f000 ffc7 	bl	80109b4 <__mcmp>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f73f adbb 	bgt.w	800f5a2 <_dtoa_r+0x4ca>
 800fa2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa2e:	9d00      	ldr	r5, [sp, #0]
 800fa30:	ea6f 0b03 	mvn.w	fp, r3
 800fa34:	f04f 0800 	mov.w	r8, #0
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 fd34 	bl	80104a8 <_Bfree>
 800fa40:	2f00      	cmp	r7, #0
 800fa42:	f43f aeab 	beq.w	800f79c <_dtoa_r+0x6c4>
 800fa46:	f1b8 0f00 	cmp.w	r8, #0
 800fa4a:	d005      	beq.n	800fa58 <_dtoa_r+0x980>
 800fa4c:	45b8      	cmp	r8, r7
 800fa4e:	d003      	beq.n	800fa58 <_dtoa_r+0x980>
 800fa50:	4641      	mov	r1, r8
 800fa52:	4620      	mov	r0, r4
 800fa54:	f000 fd28 	bl	80104a8 <_Bfree>
 800fa58:	4639      	mov	r1, r7
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 fd24 	bl	80104a8 <_Bfree>
 800fa60:	e69c      	b.n	800f79c <_dtoa_r+0x6c4>
 800fa62:	2600      	movs	r6, #0
 800fa64:	4637      	mov	r7, r6
 800fa66:	e7e1      	b.n	800fa2c <_dtoa_r+0x954>
 800fa68:	46bb      	mov	fp, r7
 800fa6a:	4637      	mov	r7, r6
 800fa6c:	e599      	b.n	800f5a2 <_dtoa_r+0x4ca>
 800fa6e:	bf00      	nop
 800fa70:	40240000 	.word	0x40240000
 800fa74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	f000 80c8 	beq.w	800fc0c <_dtoa_r+0xb34>
 800fa7c:	9b04      	ldr	r3, [sp, #16]
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	2d00      	cmp	r5, #0
 800fa82:	dd05      	ble.n	800fa90 <_dtoa_r+0x9b8>
 800fa84:	4639      	mov	r1, r7
 800fa86:	462a      	mov	r2, r5
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f000 ff27 	bl	80108dc <__lshift>
 800fa8e:	4607      	mov	r7, r0
 800fa90:	f1b8 0f00 	cmp.w	r8, #0
 800fa94:	d05b      	beq.n	800fb4e <_dtoa_r+0xa76>
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f000 fcc5 	bl	8010428 <_Balloc>
 800fa9e:	4605      	mov	r5, r0
 800faa0:	b928      	cbnz	r0, 800faae <_dtoa_r+0x9d6>
 800faa2:	4b83      	ldr	r3, [pc, #524]	; (800fcb0 <_dtoa_r+0xbd8>)
 800faa4:	4602      	mov	r2, r0
 800faa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800faaa:	f7ff bb2e 	b.w	800f10a <_dtoa_r+0x32>
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	3202      	adds	r2, #2
 800fab2:	0092      	lsls	r2, r2, #2
 800fab4:	f107 010c 	add.w	r1, r7, #12
 800fab8:	300c      	adds	r0, #12
 800faba:	f7ff fa6c 	bl	800ef96 <memcpy>
 800fabe:	2201      	movs	r2, #1
 800fac0:	4629      	mov	r1, r5
 800fac2:	4620      	mov	r0, r4
 800fac4:	f000 ff0a 	bl	80108dc <__lshift>
 800fac8:	9b00      	ldr	r3, [sp, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	9304      	str	r3, [sp, #16]
 800face:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fad2:	4413      	add	r3, r2
 800fad4:	9308      	str	r3, [sp, #32]
 800fad6:	9b02      	ldr	r3, [sp, #8]
 800fad8:	f003 0301 	and.w	r3, r3, #1
 800fadc:	46b8      	mov	r8, r7
 800fade:	9306      	str	r3, [sp, #24]
 800fae0:	4607      	mov	r7, r0
 800fae2:	9b04      	ldr	r3, [sp, #16]
 800fae4:	4631      	mov	r1, r6
 800fae6:	3b01      	subs	r3, #1
 800fae8:	4650      	mov	r0, sl
 800faea:	9301      	str	r3, [sp, #4]
 800faec:	f7ff fa6c 	bl	800efc8 <quorem>
 800faf0:	4641      	mov	r1, r8
 800faf2:	9002      	str	r0, [sp, #8]
 800faf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800faf8:	4650      	mov	r0, sl
 800fafa:	f000 ff5b 	bl	80109b4 <__mcmp>
 800fafe:	463a      	mov	r2, r7
 800fb00:	9005      	str	r0, [sp, #20]
 800fb02:	4631      	mov	r1, r6
 800fb04:	4620      	mov	r0, r4
 800fb06:	f000 ff71 	bl	80109ec <__mdiff>
 800fb0a:	68c2      	ldr	r2, [r0, #12]
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	bb02      	cbnz	r2, 800fb52 <_dtoa_r+0xa7a>
 800fb10:	4601      	mov	r1, r0
 800fb12:	4650      	mov	r0, sl
 800fb14:	f000 ff4e 	bl	80109b4 <__mcmp>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb20:	f000 fcc2 	bl	80104a8 <_Bfree>
 800fb24:	9b07      	ldr	r3, [sp, #28]
 800fb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb28:	9d04      	ldr	r5, [sp, #16]
 800fb2a:	ea43 0102 	orr.w	r1, r3, r2
 800fb2e:	9b06      	ldr	r3, [sp, #24]
 800fb30:	4319      	orrs	r1, r3
 800fb32:	d110      	bne.n	800fb56 <_dtoa_r+0xa7e>
 800fb34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb38:	d029      	beq.n	800fb8e <_dtoa_r+0xab6>
 800fb3a:	9b05      	ldr	r3, [sp, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dd02      	ble.n	800fb46 <_dtoa_r+0xa6e>
 800fb40:	9b02      	ldr	r3, [sp, #8]
 800fb42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb46:	9b01      	ldr	r3, [sp, #4]
 800fb48:	f883 9000 	strb.w	r9, [r3]
 800fb4c:	e774      	b.n	800fa38 <_dtoa_r+0x960>
 800fb4e:	4638      	mov	r0, r7
 800fb50:	e7ba      	b.n	800fac8 <_dtoa_r+0x9f0>
 800fb52:	2201      	movs	r2, #1
 800fb54:	e7e1      	b.n	800fb1a <_dtoa_r+0xa42>
 800fb56:	9b05      	ldr	r3, [sp, #20]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	db04      	blt.n	800fb66 <_dtoa_r+0xa8e>
 800fb5c:	9907      	ldr	r1, [sp, #28]
 800fb5e:	430b      	orrs	r3, r1
 800fb60:	9906      	ldr	r1, [sp, #24]
 800fb62:	430b      	orrs	r3, r1
 800fb64:	d120      	bne.n	800fba8 <_dtoa_r+0xad0>
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	dded      	ble.n	800fb46 <_dtoa_r+0xa6e>
 800fb6a:	4651      	mov	r1, sl
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 feb4 	bl	80108dc <__lshift>
 800fb74:	4631      	mov	r1, r6
 800fb76:	4682      	mov	sl, r0
 800fb78:	f000 ff1c 	bl	80109b4 <__mcmp>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	dc03      	bgt.n	800fb88 <_dtoa_r+0xab0>
 800fb80:	d1e1      	bne.n	800fb46 <_dtoa_r+0xa6e>
 800fb82:	f019 0f01 	tst.w	r9, #1
 800fb86:	d0de      	beq.n	800fb46 <_dtoa_r+0xa6e>
 800fb88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb8c:	d1d8      	bne.n	800fb40 <_dtoa_r+0xa68>
 800fb8e:	9a01      	ldr	r2, [sp, #4]
 800fb90:	2339      	movs	r3, #57	; 0x39
 800fb92:	7013      	strb	r3, [r2, #0]
 800fb94:	462b      	mov	r3, r5
 800fb96:	461d      	mov	r5, r3
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb9e:	2a39      	cmp	r2, #57	; 0x39
 800fba0:	d06c      	beq.n	800fc7c <_dtoa_r+0xba4>
 800fba2:	3201      	adds	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	e747      	b.n	800fa38 <_dtoa_r+0x960>
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	dd07      	ble.n	800fbbc <_dtoa_r+0xae4>
 800fbac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbb0:	d0ed      	beq.n	800fb8e <_dtoa_r+0xab6>
 800fbb2:	9a01      	ldr	r2, [sp, #4]
 800fbb4:	f109 0301 	add.w	r3, r9, #1
 800fbb8:	7013      	strb	r3, [r2, #0]
 800fbba:	e73d      	b.n	800fa38 <_dtoa_r+0x960>
 800fbbc:	9b04      	ldr	r3, [sp, #16]
 800fbbe:	9a08      	ldr	r2, [sp, #32]
 800fbc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d043      	beq.n	800fc50 <_dtoa_r+0xb78>
 800fbc8:	4651      	mov	r1, sl
 800fbca:	2300      	movs	r3, #0
 800fbcc:	220a      	movs	r2, #10
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f000 fc8c 	bl	80104ec <__multadd>
 800fbd4:	45b8      	cmp	r8, r7
 800fbd6:	4682      	mov	sl, r0
 800fbd8:	f04f 0300 	mov.w	r3, #0
 800fbdc:	f04f 020a 	mov.w	r2, #10
 800fbe0:	4641      	mov	r1, r8
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	d107      	bne.n	800fbf6 <_dtoa_r+0xb1e>
 800fbe6:	f000 fc81 	bl	80104ec <__multadd>
 800fbea:	4680      	mov	r8, r0
 800fbec:	4607      	mov	r7, r0
 800fbee:	9b04      	ldr	r3, [sp, #16]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	9304      	str	r3, [sp, #16]
 800fbf4:	e775      	b.n	800fae2 <_dtoa_r+0xa0a>
 800fbf6:	f000 fc79 	bl	80104ec <__multadd>
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	4680      	mov	r8, r0
 800fbfe:	2300      	movs	r3, #0
 800fc00:	220a      	movs	r2, #10
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fc72 	bl	80104ec <__multadd>
 800fc08:	4607      	mov	r7, r0
 800fc0a:	e7f0      	b.n	800fbee <_dtoa_r+0xb16>
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	9301      	str	r3, [sp, #4]
 800fc10:	9d00      	ldr	r5, [sp, #0]
 800fc12:	4631      	mov	r1, r6
 800fc14:	4650      	mov	r0, sl
 800fc16:	f7ff f9d7 	bl	800efc8 <quorem>
 800fc1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fc1e:	9b00      	ldr	r3, [sp, #0]
 800fc20:	f805 9b01 	strb.w	r9, [r5], #1
 800fc24:	1aea      	subs	r2, r5, r3
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	dd07      	ble.n	800fc3c <_dtoa_r+0xb64>
 800fc2c:	4651      	mov	r1, sl
 800fc2e:	2300      	movs	r3, #0
 800fc30:	220a      	movs	r2, #10
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 fc5a 	bl	80104ec <__multadd>
 800fc38:	4682      	mov	sl, r0
 800fc3a:	e7ea      	b.n	800fc12 <_dtoa_r+0xb3a>
 800fc3c:	9b01      	ldr	r3, [sp, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	bfc8      	it	gt
 800fc42:	461d      	movgt	r5, r3
 800fc44:	9b00      	ldr	r3, [sp, #0]
 800fc46:	bfd8      	it	le
 800fc48:	2501      	movle	r5, #1
 800fc4a:	441d      	add	r5, r3
 800fc4c:	f04f 0800 	mov.w	r8, #0
 800fc50:	4651      	mov	r1, sl
 800fc52:	2201      	movs	r2, #1
 800fc54:	4620      	mov	r0, r4
 800fc56:	f000 fe41 	bl	80108dc <__lshift>
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	4682      	mov	sl, r0
 800fc5e:	f000 fea9 	bl	80109b4 <__mcmp>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	dc96      	bgt.n	800fb94 <_dtoa_r+0xabc>
 800fc66:	d102      	bne.n	800fc6e <_dtoa_r+0xb96>
 800fc68:	f019 0f01 	tst.w	r9, #1
 800fc6c:	d192      	bne.n	800fb94 <_dtoa_r+0xabc>
 800fc6e:	462b      	mov	r3, r5
 800fc70:	461d      	mov	r5, r3
 800fc72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc76:	2a30      	cmp	r2, #48	; 0x30
 800fc78:	d0fa      	beq.n	800fc70 <_dtoa_r+0xb98>
 800fc7a:	e6dd      	b.n	800fa38 <_dtoa_r+0x960>
 800fc7c:	9a00      	ldr	r2, [sp, #0]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d189      	bne.n	800fb96 <_dtoa_r+0xabe>
 800fc82:	f10b 0b01 	add.w	fp, fp, #1
 800fc86:	2331      	movs	r3, #49	; 0x31
 800fc88:	e796      	b.n	800fbb8 <_dtoa_r+0xae0>
 800fc8a:	4b0a      	ldr	r3, [pc, #40]	; (800fcb4 <_dtoa_r+0xbdc>)
 800fc8c:	f7ff ba99 	b.w	800f1c2 <_dtoa_r+0xea>
 800fc90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f47f aa6d 	bne.w	800f172 <_dtoa_r+0x9a>
 800fc98:	4b07      	ldr	r3, [pc, #28]	; (800fcb8 <_dtoa_r+0xbe0>)
 800fc9a:	f7ff ba92 	b.w	800f1c2 <_dtoa_r+0xea>
 800fc9e:	9b01      	ldr	r3, [sp, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	dcb5      	bgt.n	800fc10 <_dtoa_r+0xb38>
 800fca4:	9b07      	ldr	r3, [sp, #28]
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	f73f aeb1 	bgt.w	800fa0e <_dtoa_r+0x936>
 800fcac:	e7b0      	b.n	800fc10 <_dtoa_r+0xb38>
 800fcae:	bf00      	nop
 800fcb0:	08013687 	.word	0x08013687
 800fcb4:	0801387b 	.word	0x0801387b
 800fcb8:	0801360b 	.word	0x0801360b

0800fcbc <_free_r>:
 800fcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcbe:	2900      	cmp	r1, #0
 800fcc0:	d044      	beq.n	800fd4c <_free_r+0x90>
 800fcc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcc6:	9001      	str	r0, [sp, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	f1a1 0404 	sub.w	r4, r1, #4
 800fcce:	bfb8      	it	lt
 800fcd0:	18e4      	addlt	r4, r4, r3
 800fcd2:	f7fd fb51 	bl	800d378 <__malloc_lock>
 800fcd6:	4a1e      	ldr	r2, [pc, #120]	; (800fd50 <_free_r+0x94>)
 800fcd8:	9801      	ldr	r0, [sp, #4]
 800fcda:	6813      	ldr	r3, [r2, #0]
 800fcdc:	b933      	cbnz	r3, 800fcec <_free_r+0x30>
 800fcde:	6063      	str	r3, [r4, #4]
 800fce0:	6014      	str	r4, [r2, #0]
 800fce2:	b003      	add	sp, #12
 800fce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fce8:	f7fd bb4c 	b.w	800d384 <__malloc_unlock>
 800fcec:	42a3      	cmp	r3, r4
 800fcee:	d908      	bls.n	800fd02 <_free_r+0x46>
 800fcf0:	6825      	ldr	r5, [r4, #0]
 800fcf2:	1961      	adds	r1, r4, r5
 800fcf4:	428b      	cmp	r3, r1
 800fcf6:	bf01      	itttt	eq
 800fcf8:	6819      	ldreq	r1, [r3, #0]
 800fcfa:	685b      	ldreq	r3, [r3, #4]
 800fcfc:	1949      	addeq	r1, r1, r5
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	e7ed      	b.n	800fcde <_free_r+0x22>
 800fd02:	461a      	mov	r2, r3
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	b10b      	cbz	r3, 800fd0c <_free_r+0x50>
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	d9fa      	bls.n	800fd02 <_free_r+0x46>
 800fd0c:	6811      	ldr	r1, [r2, #0]
 800fd0e:	1855      	adds	r5, r2, r1
 800fd10:	42a5      	cmp	r5, r4
 800fd12:	d10b      	bne.n	800fd2c <_free_r+0x70>
 800fd14:	6824      	ldr	r4, [r4, #0]
 800fd16:	4421      	add	r1, r4
 800fd18:	1854      	adds	r4, r2, r1
 800fd1a:	42a3      	cmp	r3, r4
 800fd1c:	6011      	str	r1, [r2, #0]
 800fd1e:	d1e0      	bne.n	800fce2 <_free_r+0x26>
 800fd20:	681c      	ldr	r4, [r3, #0]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	6053      	str	r3, [r2, #4]
 800fd26:	440c      	add	r4, r1
 800fd28:	6014      	str	r4, [r2, #0]
 800fd2a:	e7da      	b.n	800fce2 <_free_r+0x26>
 800fd2c:	d902      	bls.n	800fd34 <_free_r+0x78>
 800fd2e:	230c      	movs	r3, #12
 800fd30:	6003      	str	r3, [r0, #0]
 800fd32:	e7d6      	b.n	800fce2 <_free_r+0x26>
 800fd34:	6825      	ldr	r5, [r4, #0]
 800fd36:	1961      	adds	r1, r4, r5
 800fd38:	428b      	cmp	r3, r1
 800fd3a:	bf04      	itt	eq
 800fd3c:	6819      	ldreq	r1, [r3, #0]
 800fd3e:	685b      	ldreq	r3, [r3, #4]
 800fd40:	6063      	str	r3, [r4, #4]
 800fd42:	bf04      	itt	eq
 800fd44:	1949      	addeq	r1, r1, r5
 800fd46:	6021      	streq	r1, [r4, #0]
 800fd48:	6054      	str	r4, [r2, #4]
 800fd4a:	e7ca      	b.n	800fce2 <_free_r+0x26>
 800fd4c:	b003      	add	sp, #12
 800fd4e:	bd30      	pop	{r4, r5, pc}
 800fd50:	20005610 	.word	0x20005610

0800fd54 <rshift>:
 800fd54:	6903      	ldr	r3, [r0, #16]
 800fd56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd62:	f100 0414 	add.w	r4, r0, #20
 800fd66:	dd45      	ble.n	800fdf4 <rshift+0xa0>
 800fd68:	f011 011f 	ands.w	r1, r1, #31
 800fd6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd74:	d10c      	bne.n	800fd90 <rshift+0x3c>
 800fd76:	f100 0710 	add.w	r7, r0, #16
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	42b1      	cmp	r1, r6
 800fd7e:	d334      	bcc.n	800fdea <rshift+0x96>
 800fd80:	1a9b      	subs	r3, r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	1eea      	subs	r2, r5, #3
 800fd86:	4296      	cmp	r6, r2
 800fd88:	bf38      	it	cc
 800fd8a:	2300      	movcc	r3, #0
 800fd8c:	4423      	add	r3, r4
 800fd8e:	e015      	b.n	800fdbc <rshift+0x68>
 800fd90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd94:	f1c1 0820 	rsb	r8, r1, #32
 800fd98:	40cf      	lsrs	r7, r1
 800fd9a:	f105 0e04 	add.w	lr, r5, #4
 800fd9e:	46a1      	mov	r9, r4
 800fda0:	4576      	cmp	r6, lr
 800fda2:	46f4      	mov	ip, lr
 800fda4:	d815      	bhi.n	800fdd2 <rshift+0x7e>
 800fda6:	1a9a      	subs	r2, r3, r2
 800fda8:	0092      	lsls	r2, r2, #2
 800fdaa:	3a04      	subs	r2, #4
 800fdac:	3501      	adds	r5, #1
 800fdae:	42ae      	cmp	r6, r5
 800fdb0:	bf38      	it	cc
 800fdb2:	2200      	movcc	r2, #0
 800fdb4:	18a3      	adds	r3, r4, r2
 800fdb6:	50a7      	str	r7, [r4, r2]
 800fdb8:	b107      	cbz	r7, 800fdbc <rshift+0x68>
 800fdba:	3304      	adds	r3, #4
 800fdbc:	1b1a      	subs	r2, r3, r4
 800fdbe:	42a3      	cmp	r3, r4
 800fdc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fdc4:	bf08      	it	eq
 800fdc6:	2300      	moveq	r3, #0
 800fdc8:	6102      	str	r2, [r0, #16]
 800fdca:	bf08      	it	eq
 800fdcc:	6143      	streq	r3, [r0, #20]
 800fdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdd2:	f8dc c000 	ldr.w	ip, [ip]
 800fdd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800fdda:	ea4c 0707 	orr.w	r7, ip, r7
 800fdde:	f849 7b04 	str.w	r7, [r9], #4
 800fde2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fde6:	40cf      	lsrs	r7, r1
 800fde8:	e7da      	b.n	800fda0 <rshift+0x4c>
 800fdea:	f851 cb04 	ldr.w	ip, [r1], #4
 800fdee:	f847 cf04 	str.w	ip, [r7, #4]!
 800fdf2:	e7c3      	b.n	800fd7c <rshift+0x28>
 800fdf4:	4623      	mov	r3, r4
 800fdf6:	e7e1      	b.n	800fdbc <rshift+0x68>

0800fdf8 <__hexdig_fun>:
 800fdf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fdfc:	2b09      	cmp	r3, #9
 800fdfe:	d802      	bhi.n	800fe06 <__hexdig_fun+0xe>
 800fe00:	3820      	subs	r0, #32
 800fe02:	b2c0      	uxtb	r0, r0
 800fe04:	4770      	bx	lr
 800fe06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe0a:	2b05      	cmp	r3, #5
 800fe0c:	d801      	bhi.n	800fe12 <__hexdig_fun+0x1a>
 800fe0e:	3847      	subs	r0, #71	; 0x47
 800fe10:	e7f7      	b.n	800fe02 <__hexdig_fun+0xa>
 800fe12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe16:	2b05      	cmp	r3, #5
 800fe18:	d801      	bhi.n	800fe1e <__hexdig_fun+0x26>
 800fe1a:	3827      	subs	r0, #39	; 0x27
 800fe1c:	e7f1      	b.n	800fe02 <__hexdig_fun+0xa>
 800fe1e:	2000      	movs	r0, #0
 800fe20:	4770      	bx	lr
	...

0800fe24 <__gethex>:
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	4617      	mov	r7, r2
 800fe2a:	680a      	ldr	r2, [r1, #0]
 800fe2c:	b085      	sub	sp, #20
 800fe2e:	f102 0b02 	add.w	fp, r2, #2
 800fe32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe3a:	4681      	mov	r9, r0
 800fe3c:	468a      	mov	sl, r1
 800fe3e:	9302      	str	r3, [sp, #8]
 800fe40:	32fe      	adds	r2, #254	; 0xfe
 800fe42:	eb02 030b 	add.w	r3, r2, fp
 800fe46:	46d8      	mov	r8, fp
 800fe48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	2830      	cmp	r0, #48	; 0x30
 800fe50:	d0f7      	beq.n	800fe42 <__gethex+0x1e>
 800fe52:	f7ff ffd1 	bl	800fdf8 <__hexdig_fun>
 800fe56:	4604      	mov	r4, r0
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	d138      	bne.n	800fece <__gethex+0xaa>
 800fe5c:	49a7      	ldr	r1, [pc, #668]	; (80100fc <__gethex+0x2d8>)
 800fe5e:	2201      	movs	r2, #1
 800fe60:	4640      	mov	r0, r8
 800fe62:	f7fe ffa9 	bl	800edb8 <strncmp>
 800fe66:	4606      	mov	r6, r0
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d169      	bne.n	800ff40 <__gethex+0x11c>
 800fe6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fe70:	465d      	mov	r5, fp
 800fe72:	f7ff ffc1 	bl	800fdf8 <__hexdig_fun>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d064      	beq.n	800ff44 <__gethex+0x120>
 800fe7a:	465a      	mov	r2, fp
 800fe7c:	7810      	ldrb	r0, [r2, #0]
 800fe7e:	2830      	cmp	r0, #48	; 0x30
 800fe80:	4690      	mov	r8, r2
 800fe82:	f102 0201 	add.w	r2, r2, #1
 800fe86:	d0f9      	beq.n	800fe7c <__gethex+0x58>
 800fe88:	f7ff ffb6 	bl	800fdf8 <__hexdig_fun>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	fab0 f480 	clz	r4, r0
 800fe92:	0964      	lsrs	r4, r4, #5
 800fe94:	465e      	mov	r6, fp
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	4642      	mov	r2, r8
 800fe9a:	4615      	mov	r5, r2
 800fe9c:	3201      	adds	r2, #1
 800fe9e:	7828      	ldrb	r0, [r5, #0]
 800fea0:	f7ff ffaa 	bl	800fdf8 <__hexdig_fun>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d1f8      	bne.n	800fe9a <__gethex+0x76>
 800fea8:	4994      	ldr	r1, [pc, #592]	; (80100fc <__gethex+0x2d8>)
 800feaa:	2201      	movs	r2, #1
 800feac:	4628      	mov	r0, r5
 800feae:	f7fe ff83 	bl	800edb8 <strncmp>
 800feb2:	b978      	cbnz	r0, 800fed4 <__gethex+0xb0>
 800feb4:	b946      	cbnz	r6, 800fec8 <__gethex+0xa4>
 800feb6:	1c6e      	adds	r6, r5, #1
 800feb8:	4632      	mov	r2, r6
 800feba:	4615      	mov	r5, r2
 800febc:	3201      	adds	r2, #1
 800febe:	7828      	ldrb	r0, [r5, #0]
 800fec0:	f7ff ff9a 	bl	800fdf8 <__hexdig_fun>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d1f8      	bne.n	800feba <__gethex+0x96>
 800fec8:	1b73      	subs	r3, r6, r5
 800feca:	009e      	lsls	r6, r3, #2
 800fecc:	e004      	b.n	800fed8 <__gethex+0xb4>
 800fece:	2400      	movs	r4, #0
 800fed0:	4626      	mov	r6, r4
 800fed2:	e7e1      	b.n	800fe98 <__gethex+0x74>
 800fed4:	2e00      	cmp	r6, #0
 800fed6:	d1f7      	bne.n	800fec8 <__gethex+0xa4>
 800fed8:	782b      	ldrb	r3, [r5, #0]
 800feda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fede:	2b50      	cmp	r3, #80	; 0x50
 800fee0:	d13d      	bne.n	800ff5e <__gethex+0x13a>
 800fee2:	786b      	ldrb	r3, [r5, #1]
 800fee4:	2b2b      	cmp	r3, #43	; 0x2b
 800fee6:	d02f      	beq.n	800ff48 <__gethex+0x124>
 800fee8:	2b2d      	cmp	r3, #45	; 0x2d
 800feea:	d031      	beq.n	800ff50 <__gethex+0x12c>
 800feec:	1c69      	adds	r1, r5, #1
 800feee:	f04f 0b00 	mov.w	fp, #0
 800fef2:	7808      	ldrb	r0, [r1, #0]
 800fef4:	f7ff ff80 	bl	800fdf8 <__hexdig_fun>
 800fef8:	1e42      	subs	r2, r0, #1
 800fefa:	b2d2      	uxtb	r2, r2
 800fefc:	2a18      	cmp	r2, #24
 800fefe:	d82e      	bhi.n	800ff5e <__gethex+0x13a>
 800ff00:	f1a0 0210 	sub.w	r2, r0, #16
 800ff04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff08:	f7ff ff76 	bl	800fdf8 <__hexdig_fun>
 800ff0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ff10:	fa5f fc8c 	uxtb.w	ip, ip
 800ff14:	f1bc 0f18 	cmp.w	ip, #24
 800ff18:	d91d      	bls.n	800ff56 <__gethex+0x132>
 800ff1a:	f1bb 0f00 	cmp.w	fp, #0
 800ff1e:	d000      	beq.n	800ff22 <__gethex+0xfe>
 800ff20:	4252      	negs	r2, r2
 800ff22:	4416      	add	r6, r2
 800ff24:	f8ca 1000 	str.w	r1, [sl]
 800ff28:	b1dc      	cbz	r4, 800ff62 <__gethex+0x13e>
 800ff2a:	9b01      	ldr	r3, [sp, #4]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf14      	ite	ne
 800ff30:	f04f 0800 	movne.w	r8, #0
 800ff34:	f04f 0806 	moveq.w	r8, #6
 800ff38:	4640      	mov	r0, r8
 800ff3a:	b005      	add	sp, #20
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff40:	4645      	mov	r5, r8
 800ff42:	4626      	mov	r6, r4
 800ff44:	2401      	movs	r4, #1
 800ff46:	e7c7      	b.n	800fed8 <__gethex+0xb4>
 800ff48:	f04f 0b00 	mov.w	fp, #0
 800ff4c:	1ca9      	adds	r1, r5, #2
 800ff4e:	e7d0      	b.n	800fef2 <__gethex+0xce>
 800ff50:	f04f 0b01 	mov.w	fp, #1
 800ff54:	e7fa      	b.n	800ff4c <__gethex+0x128>
 800ff56:	230a      	movs	r3, #10
 800ff58:	fb03 0002 	mla	r0, r3, r2, r0
 800ff5c:	e7d0      	b.n	800ff00 <__gethex+0xdc>
 800ff5e:	4629      	mov	r1, r5
 800ff60:	e7e0      	b.n	800ff24 <__gethex+0x100>
 800ff62:	eba5 0308 	sub.w	r3, r5, r8
 800ff66:	3b01      	subs	r3, #1
 800ff68:	4621      	mov	r1, r4
 800ff6a:	2b07      	cmp	r3, #7
 800ff6c:	dc0a      	bgt.n	800ff84 <__gethex+0x160>
 800ff6e:	4648      	mov	r0, r9
 800ff70:	f000 fa5a 	bl	8010428 <_Balloc>
 800ff74:	4604      	mov	r4, r0
 800ff76:	b940      	cbnz	r0, 800ff8a <__gethex+0x166>
 800ff78:	4b61      	ldr	r3, [pc, #388]	; (8010100 <__gethex+0x2dc>)
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	21e4      	movs	r1, #228	; 0xe4
 800ff7e:	4861      	ldr	r0, [pc, #388]	; (8010104 <__gethex+0x2e0>)
 800ff80:	f001 fe90 	bl	8011ca4 <__assert_func>
 800ff84:	3101      	adds	r1, #1
 800ff86:	105b      	asrs	r3, r3, #1
 800ff88:	e7ef      	b.n	800ff6a <__gethex+0x146>
 800ff8a:	f100 0a14 	add.w	sl, r0, #20
 800ff8e:	2300      	movs	r3, #0
 800ff90:	495a      	ldr	r1, [pc, #360]	; (80100fc <__gethex+0x2d8>)
 800ff92:	f8cd a004 	str.w	sl, [sp, #4]
 800ff96:	469b      	mov	fp, r3
 800ff98:	45a8      	cmp	r8, r5
 800ff9a:	d342      	bcc.n	8010022 <__gethex+0x1fe>
 800ff9c:	9801      	ldr	r0, [sp, #4]
 800ff9e:	f840 bb04 	str.w	fp, [r0], #4
 800ffa2:	eba0 000a 	sub.w	r0, r0, sl
 800ffa6:	1080      	asrs	r0, r0, #2
 800ffa8:	6120      	str	r0, [r4, #16]
 800ffaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ffae:	4658      	mov	r0, fp
 800ffb0:	f000 fb2c 	bl	801060c <__hi0bits>
 800ffb4:	683d      	ldr	r5, [r7, #0]
 800ffb6:	eba8 0000 	sub.w	r0, r8, r0
 800ffba:	42a8      	cmp	r0, r5
 800ffbc:	dd59      	ble.n	8010072 <__gethex+0x24e>
 800ffbe:	eba0 0805 	sub.w	r8, r0, r5
 800ffc2:	4641      	mov	r1, r8
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f000 febb 	bl	8010d40 <__any_on>
 800ffca:	4683      	mov	fp, r0
 800ffcc:	b1b8      	cbz	r0, 800fffe <__gethex+0x1da>
 800ffce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ffd2:	1159      	asrs	r1, r3, #5
 800ffd4:	f003 021f 	and.w	r2, r3, #31
 800ffd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ffdc:	f04f 0b01 	mov.w	fp, #1
 800ffe0:	fa0b f202 	lsl.w	r2, fp, r2
 800ffe4:	420a      	tst	r2, r1
 800ffe6:	d00a      	beq.n	800fffe <__gethex+0x1da>
 800ffe8:	455b      	cmp	r3, fp
 800ffea:	dd06      	ble.n	800fffa <__gethex+0x1d6>
 800ffec:	f1a8 0102 	sub.w	r1, r8, #2
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fea5 	bl	8010d40 <__any_on>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d138      	bne.n	801006c <__gethex+0x248>
 800fffa:	f04f 0b02 	mov.w	fp, #2
 800fffe:	4641      	mov	r1, r8
 8010000:	4620      	mov	r0, r4
 8010002:	f7ff fea7 	bl	800fd54 <rshift>
 8010006:	4446      	add	r6, r8
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	42b3      	cmp	r3, r6
 801000c:	da41      	bge.n	8010092 <__gethex+0x26e>
 801000e:	4621      	mov	r1, r4
 8010010:	4648      	mov	r0, r9
 8010012:	f000 fa49 	bl	80104a8 <_Bfree>
 8010016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010018:	2300      	movs	r3, #0
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010020:	e78a      	b.n	800ff38 <__gethex+0x114>
 8010022:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010026:	2a2e      	cmp	r2, #46	; 0x2e
 8010028:	d014      	beq.n	8010054 <__gethex+0x230>
 801002a:	2b20      	cmp	r3, #32
 801002c:	d106      	bne.n	801003c <__gethex+0x218>
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	f843 bb04 	str.w	fp, [r3], #4
 8010034:	f04f 0b00 	mov.w	fp, #0
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	465b      	mov	r3, fp
 801003c:	7828      	ldrb	r0, [r5, #0]
 801003e:	9303      	str	r3, [sp, #12]
 8010040:	f7ff feda 	bl	800fdf8 <__hexdig_fun>
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	f000 000f 	and.w	r0, r0, #15
 801004a:	4098      	lsls	r0, r3
 801004c:	ea4b 0b00 	orr.w	fp, fp, r0
 8010050:	3304      	adds	r3, #4
 8010052:	e7a1      	b.n	800ff98 <__gethex+0x174>
 8010054:	45a8      	cmp	r8, r5
 8010056:	d8e8      	bhi.n	801002a <__gethex+0x206>
 8010058:	2201      	movs	r2, #1
 801005a:	4628      	mov	r0, r5
 801005c:	9303      	str	r3, [sp, #12]
 801005e:	f7fe feab 	bl	800edb8 <strncmp>
 8010062:	4926      	ldr	r1, [pc, #152]	; (80100fc <__gethex+0x2d8>)
 8010064:	9b03      	ldr	r3, [sp, #12]
 8010066:	2800      	cmp	r0, #0
 8010068:	d1df      	bne.n	801002a <__gethex+0x206>
 801006a:	e795      	b.n	800ff98 <__gethex+0x174>
 801006c:	f04f 0b03 	mov.w	fp, #3
 8010070:	e7c5      	b.n	800fffe <__gethex+0x1da>
 8010072:	da0b      	bge.n	801008c <__gethex+0x268>
 8010074:	eba5 0800 	sub.w	r8, r5, r0
 8010078:	4621      	mov	r1, r4
 801007a:	4642      	mov	r2, r8
 801007c:	4648      	mov	r0, r9
 801007e:	f000 fc2d 	bl	80108dc <__lshift>
 8010082:	eba6 0608 	sub.w	r6, r6, r8
 8010086:	4604      	mov	r4, r0
 8010088:	f100 0a14 	add.w	sl, r0, #20
 801008c:	f04f 0b00 	mov.w	fp, #0
 8010090:	e7ba      	b.n	8010008 <__gethex+0x1e4>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	42b3      	cmp	r3, r6
 8010096:	dd73      	ble.n	8010180 <__gethex+0x35c>
 8010098:	1b9e      	subs	r6, r3, r6
 801009a:	42b5      	cmp	r5, r6
 801009c:	dc34      	bgt.n	8010108 <__gethex+0x2e4>
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b02      	cmp	r3, #2
 80100a2:	d023      	beq.n	80100ec <__gethex+0x2c8>
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d025      	beq.n	80100f4 <__gethex+0x2d0>
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d115      	bne.n	80100d8 <__gethex+0x2b4>
 80100ac:	42b5      	cmp	r5, r6
 80100ae:	d113      	bne.n	80100d8 <__gethex+0x2b4>
 80100b0:	2d01      	cmp	r5, #1
 80100b2:	d10b      	bne.n	80100cc <__gethex+0x2a8>
 80100b4:	9a02      	ldr	r2, [sp, #8]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6013      	str	r3, [r2, #0]
 80100ba:	2301      	movs	r3, #1
 80100bc:	6123      	str	r3, [r4, #16]
 80100be:	f8ca 3000 	str.w	r3, [sl]
 80100c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80100c8:	601c      	str	r4, [r3, #0]
 80100ca:	e735      	b.n	800ff38 <__gethex+0x114>
 80100cc:	1e69      	subs	r1, r5, #1
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 fe36 	bl	8010d40 <__any_on>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d1ed      	bne.n	80100b4 <__gethex+0x290>
 80100d8:	4621      	mov	r1, r4
 80100da:	4648      	mov	r0, r9
 80100dc:	f000 f9e4 	bl	80104a8 <_Bfree>
 80100e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100e2:	2300      	movs	r3, #0
 80100e4:	6013      	str	r3, [r2, #0]
 80100e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80100ea:	e725      	b.n	800ff38 <__gethex+0x114>
 80100ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1f2      	bne.n	80100d8 <__gethex+0x2b4>
 80100f2:	e7df      	b.n	80100b4 <__gethex+0x290>
 80100f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1dc      	bne.n	80100b4 <__gethex+0x290>
 80100fa:	e7ed      	b.n	80100d8 <__gethex+0x2b4>
 80100fc:	0801347c 	.word	0x0801347c
 8010100:	08013687 	.word	0x08013687
 8010104:	08013698 	.word	0x08013698
 8010108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801010c:	f1bb 0f00 	cmp.w	fp, #0
 8010110:	d133      	bne.n	801017a <__gethex+0x356>
 8010112:	f1b8 0f00 	cmp.w	r8, #0
 8010116:	d004      	beq.n	8010122 <__gethex+0x2fe>
 8010118:	4641      	mov	r1, r8
 801011a:	4620      	mov	r0, r4
 801011c:	f000 fe10 	bl	8010d40 <__any_on>
 8010120:	4683      	mov	fp, r0
 8010122:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010126:	2301      	movs	r3, #1
 8010128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801012c:	f008 081f 	and.w	r8, r8, #31
 8010130:	fa03 f308 	lsl.w	r3, r3, r8
 8010134:	4213      	tst	r3, r2
 8010136:	4631      	mov	r1, r6
 8010138:	4620      	mov	r0, r4
 801013a:	bf18      	it	ne
 801013c:	f04b 0b02 	orrne.w	fp, fp, #2
 8010140:	1bad      	subs	r5, r5, r6
 8010142:	f7ff fe07 	bl	800fd54 <rshift>
 8010146:	687e      	ldr	r6, [r7, #4]
 8010148:	f04f 0802 	mov.w	r8, #2
 801014c:	f1bb 0f00 	cmp.w	fp, #0
 8010150:	d04a      	beq.n	80101e8 <__gethex+0x3c4>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d016      	beq.n	8010186 <__gethex+0x362>
 8010158:	2b03      	cmp	r3, #3
 801015a:	d018      	beq.n	801018e <__gethex+0x36a>
 801015c:	2b01      	cmp	r3, #1
 801015e:	d109      	bne.n	8010174 <__gethex+0x350>
 8010160:	f01b 0f02 	tst.w	fp, #2
 8010164:	d006      	beq.n	8010174 <__gethex+0x350>
 8010166:	f8da 3000 	ldr.w	r3, [sl]
 801016a:	ea4b 0b03 	orr.w	fp, fp, r3
 801016e:	f01b 0f01 	tst.w	fp, #1
 8010172:	d10f      	bne.n	8010194 <__gethex+0x370>
 8010174:	f048 0810 	orr.w	r8, r8, #16
 8010178:	e036      	b.n	80101e8 <__gethex+0x3c4>
 801017a:	f04f 0b01 	mov.w	fp, #1
 801017e:	e7d0      	b.n	8010122 <__gethex+0x2fe>
 8010180:	f04f 0801 	mov.w	r8, #1
 8010184:	e7e2      	b.n	801014c <__gethex+0x328>
 8010186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010188:	f1c3 0301 	rsb	r3, r3, #1
 801018c:	930f      	str	r3, [sp, #60]	; 0x3c
 801018e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0ef      	beq.n	8010174 <__gethex+0x350>
 8010194:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010198:	f104 0214 	add.w	r2, r4, #20
 801019c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80101a6:	2300      	movs	r3, #0
 80101a8:	4694      	mov	ip, r2
 80101aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80101ae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80101b2:	d01e      	beq.n	80101f2 <__gethex+0x3ce>
 80101b4:	3101      	adds	r1, #1
 80101b6:	f8cc 1000 	str.w	r1, [ip]
 80101ba:	f1b8 0f02 	cmp.w	r8, #2
 80101be:	f104 0214 	add.w	r2, r4, #20
 80101c2:	d13d      	bne.n	8010240 <__gethex+0x41c>
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	42ab      	cmp	r3, r5
 80101ca:	d10b      	bne.n	80101e4 <__gethex+0x3c0>
 80101cc:	1169      	asrs	r1, r5, #5
 80101ce:	2301      	movs	r3, #1
 80101d0:	f005 051f 	and.w	r5, r5, #31
 80101d4:	fa03 f505 	lsl.w	r5, r3, r5
 80101d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101dc:	421d      	tst	r5, r3
 80101de:	bf18      	it	ne
 80101e0:	f04f 0801 	movne.w	r8, #1
 80101e4:	f048 0820 	orr.w	r8, r8, #32
 80101e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101ea:	601c      	str	r4, [r3, #0]
 80101ec:	9b02      	ldr	r3, [sp, #8]
 80101ee:	601e      	str	r6, [r3, #0]
 80101f0:	e6a2      	b.n	800ff38 <__gethex+0x114>
 80101f2:	4290      	cmp	r0, r2
 80101f4:	f842 3c04 	str.w	r3, [r2, #-4]
 80101f8:	d8d6      	bhi.n	80101a8 <__gethex+0x384>
 80101fa:	68a2      	ldr	r2, [r4, #8]
 80101fc:	4593      	cmp	fp, r2
 80101fe:	db17      	blt.n	8010230 <__gethex+0x40c>
 8010200:	6861      	ldr	r1, [r4, #4]
 8010202:	4648      	mov	r0, r9
 8010204:	3101      	adds	r1, #1
 8010206:	f000 f90f 	bl	8010428 <_Balloc>
 801020a:	4682      	mov	sl, r0
 801020c:	b918      	cbnz	r0, 8010216 <__gethex+0x3f2>
 801020e:	4b1b      	ldr	r3, [pc, #108]	; (801027c <__gethex+0x458>)
 8010210:	4602      	mov	r2, r0
 8010212:	2184      	movs	r1, #132	; 0x84
 8010214:	e6b3      	b.n	800ff7e <__gethex+0x15a>
 8010216:	6922      	ldr	r2, [r4, #16]
 8010218:	3202      	adds	r2, #2
 801021a:	f104 010c 	add.w	r1, r4, #12
 801021e:	0092      	lsls	r2, r2, #2
 8010220:	300c      	adds	r0, #12
 8010222:	f7fe feb8 	bl	800ef96 <memcpy>
 8010226:	4621      	mov	r1, r4
 8010228:	4648      	mov	r0, r9
 801022a:	f000 f93d 	bl	80104a8 <_Bfree>
 801022e:	4654      	mov	r4, sl
 8010230:	6922      	ldr	r2, [r4, #16]
 8010232:	1c51      	adds	r1, r2, #1
 8010234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010238:	6121      	str	r1, [r4, #16]
 801023a:	2101      	movs	r1, #1
 801023c:	6151      	str	r1, [r2, #20]
 801023e:	e7bc      	b.n	80101ba <__gethex+0x396>
 8010240:	6921      	ldr	r1, [r4, #16]
 8010242:	4559      	cmp	r1, fp
 8010244:	dd0b      	ble.n	801025e <__gethex+0x43a>
 8010246:	2101      	movs	r1, #1
 8010248:	4620      	mov	r0, r4
 801024a:	f7ff fd83 	bl	800fd54 <rshift>
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	3601      	adds	r6, #1
 8010252:	42b3      	cmp	r3, r6
 8010254:	f6ff aedb 	blt.w	801000e <__gethex+0x1ea>
 8010258:	f04f 0801 	mov.w	r8, #1
 801025c:	e7c2      	b.n	80101e4 <__gethex+0x3c0>
 801025e:	f015 051f 	ands.w	r5, r5, #31
 8010262:	d0f9      	beq.n	8010258 <__gethex+0x434>
 8010264:	9b01      	ldr	r3, [sp, #4]
 8010266:	441a      	add	r2, r3
 8010268:	f1c5 0520 	rsb	r5, r5, #32
 801026c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010270:	f000 f9cc 	bl	801060c <__hi0bits>
 8010274:	42a8      	cmp	r0, r5
 8010276:	dbe6      	blt.n	8010246 <__gethex+0x422>
 8010278:	e7ee      	b.n	8010258 <__gethex+0x434>
 801027a:	bf00      	nop
 801027c:	08013687 	.word	0x08013687

08010280 <L_shift>:
 8010280:	f1c2 0208 	rsb	r2, r2, #8
 8010284:	0092      	lsls	r2, r2, #2
 8010286:	b570      	push	{r4, r5, r6, lr}
 8010288:	f1c2 0620 	rsb	r6, r2, #32
 801028c:	6843      	ldr	r3, [r0, #4]
 801028e:	6804      	ldr	r4, [r0, #0]
 8010290:	fa03 f506 	lsl.w	r5, r3, r6
 8010294:	432c      	orrs	r4, r5
 8010296:	40d3      	lsrs	r3, r2
 8010298:	6004      	str	r4, [r0, #0]
 801029a:	f840 3f04 	str.w	r3, [r0, #4]!
 801029e:	4288      	cmp	r0, r1
 80102a0:	d3f4      	bcc.n	801028c <L_shift+0xc>
 80102a2:	bd70      	pop	{r4, r5, r6, pc}

080102a4 <__match>:
 80102a4:	b530      	push	{r4, r5, lr}
 80102a6:	6803      	ldr	r3, [r0, #0]
 80102a8:	3301      	adds	r3, #1
 80102aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102ae:	b914      	cbnz	r4, 80102b6 <__match+0x12>
 80102b0:	6003      	str	r3, [r0, #0]
 80102b2:	2001      	movs	r0, #1
 80102b4:	bd30      	pop	{r4, r5, pc}
 80102b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80102be:	2d19      	cmp	r5, #25
 80102c0:	bf98      	it	ls
 80102c2:	3220      	addls	r2, #32
 80102c4:	42a2      	cmp	r2, r4
 80102c6:	d0f0      	beq.n	80102aa <__match+0x6>
 80102c8:	2000      	movs	r0, #0
 80102ca:	e7f3      	b.n	80102b4 <__match+0x10>

080102cc <__hexnan>:
 80102cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d0:	680b      	ldr	r3, [r1, #0]
 80102d2:	6801      	ldr	r1, [r0, #0]
 80102d4:	115e      	asrs	r6, r3, #5
 80102d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80102da:	f013 031f 	ands.w	r3, r3, #31
 80102de:	b087      	sub	sp, #28
 80102e0:	bf18      	it	ne
 80102e2:	3604      	addne	r6, #4
 80102e4:	2500      	movs	r5, #0
 80102e6:	1f37      	subs	r7, r6, #4
 80102e8:	4682      	mov	sl, r0
 80102ea:	4690      	mov	r8, r2
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80102f2:	46b9      	mov	r9, r7
 80102f4:	463c      	mov	r4, r7
 80102f6:	9502      	str	r5, [sp, #8]
 80102f8:	46ab      	mov	fp, r5
 80102fa:	784a      	ldrb	r2, [r1, #1]
 80102fc:	1c4b      	adds	r3, r1, #1
 80102fe:	9303      	str	r3, [sp, #12]
 8010300:	b342      	cbz	r2, 8010354 <__hexnan+0x88>
 8010302:	4610      	mov	r0, r2
 8010304:	9105      	str	r1, [sp, #20]
 8010306:	9204      	str	r2, [sp, #16]
 8010308:	f7ff fd76 	bl	800fdf8 <__hexdig_fun>
 801030c:	2800      	cmp	r0, #0
 801030e:	d14f      	bne.n	80103b0 <__hexnan+0xe4>
 8010310:	9a04      	ldr	r2, [sp, #16]
 8010312:	9905      	ldr	r1, [sp, #20]
 8010314:	2a20      	cmp	r2, #32
 8010316:	d818      	bhi.n	801034a <__hexnan+0x7e>
 8010318:	9b02      	ldr	r3, [sp, #8]
 801031a:	459b      	cmp	fp, r3
 801031c:	dd13      	ble.n	8010346 <__hexnan+0x7a>
 801031e:	454c      	cmp	r4, r9
 8010320:	d206      	bcs.n	8010330 <__hexnan+0x64>
 8010322:	2d07      	cmp	r5, #7
 8010324:	dc04      	bgt.n	8010330 <__hexnan+0x64>
 8010326:	462a      	mov	r2, r5
 8010328:	4649      	mov	r1, r9
 801032a:	4620      	mov	r0, r4
 801032c:	f7ff ffa8 	bl	8010280 <L_shift>
 8010330:	4544      	cmp	r4, r8
 8010332:	d950      	bls.n	80103d6 <__hexnan+0x10a>
 8010334:	2300      	movs	r3, #0
 8010336:	f1a4 0904 	sub.w	r9, r4, #4
 801033a:	f844 3c04 	str.w	r3, [r4, #-4]
 801033e:	f8cd b008 	str.w	fp, [sp, #8]
 8010342:	464c      	mov	r4, r9
 8010344:	461d      	mov	r5, r3
 8010346:	9903      	ldr	r1, [sp, #12]
 8010348:	e7d7      	b.n	80102fa <__hexnan+0x2e>
 801034a:	2a29      	cmp	r2, #41	; 0x29
 801034c:	d155      	bne.n	80103fa <__hexnan+0x12e>
 801034e:	3102      	adds	r1, #2
 8010350:	f8ca 1000 	str.w	r1, [sl]
 8010354:	f1bb 0f00 	cmp.w	fp, #0
 8010358:	d04f      	beq.n	80103fa <__hexnan+0x12e>
 801035a:	454c      	cmp	r4, r9
 801035c:	d206      	bcs.n	801036c <__hexnan+0xa0>
 801035e:	2d07      	cmp	r5, #7
 8010360:	dc04      	bgt.n	801036c <__hexnan+0xa0>
 8010362:	462a      	mov	r2, r5
 8010364:	4649      	mov	r1, r9
 8010366:	4620      	mov	r0, r4
 8010368:	f7ff ff8a 	bl	8010280 <L_shift>
 801036c:	4544      	cmp	r4, r8
 801036e:	d934      	bls.n	80103da <__hexnan+0x10e>
 8010370:	f1a8 0204 	sub.w	r2, r8, #4
 8010374:	4623      	mov	r3, r4
 8010376:	f853 1b04 	ldr.w	r1, [r3], #4
 801037a:	f842 1f04 	str.w	r1, [r2, #4]!
 801037e:	429f      	cmp	r7, r3
 8010380:	d2f9      	bcs.n	8010376 <__hexnan+0xaa>
 8010382:	1b3b      	subs	r3, r7, r4
 8010384:	f023 0303 	bic.w	r3, r3, #3
 8010388:	3304      	adds	r3, #4
 801038a:	3e03      	subs	r6, #3
 801038c:	3401      	adds	r4, #1
 801038e:	42a6      	cmp	r6, r4
 8010390:	bf38      	it	cc
 8010392:	2304      	movcc	r3, #4
 8010394:	4443      	add	r3, r8
 8010396:	2200      	movs	r2, #0
 8010398:	f843 2b04 	str.w	r2, [r3], #4
 801039c:	429f      	cmp	r7, r3
 801039e:	d2fb      	bcs.n	8010398 <__hexnan+0xcc>
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	b91b      	cbnz	r3, 80103ac <__hexnan+0xe0>
 80103a4:	4547      	cmp	r7, r8
 80103a6:	d126      	bne.n	80103f6 <__hexnan+0x12a>
 80103a8:	2301      	movs	r3, #1
 80103aa:	603b      	str	r3, [r7, #0]
 80103ac:	2005      	movs	r0, #5
 80103ae:	e025      	b.n	80103fc <__hexnan+0x130>
 80103b0:	3501      	adds	r5, #1
 80103b2:	2d08      	cmp	r5, #8
 80103b4:	f10b 0b01 	add.w	fp, fp, #1
 80103b8:	dd06      	ble.n	80103c8 <__hexnan+0xfc>
 80103ba:	4544      	cmp	r4, r8
 80103bc:	d9c3      	bls.n	8010346 <__hexnan+0x7a>
 80103be:	2300      	movs	r3, #0
 80103c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80103c4:	2501      	movs	r5, #1
 80103c6:	3c04      	subs	r4, #4
 80103c8:	6822      	ldr	r2, [r4, #0]
 80103ca:	f000 000f 	and.w	r0, r0, #15
 80103ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80103d2:	6020      	str	r0, [r4, #0]
 80103d4:	e7b7      	b.n	8010346 <__hexnan+0x7a>
 80103d6:	2508      	movs	r5, #8
 80103d8:	e7b5      	b.n	8010346 <__hexnan+0x7a>
 80103da:	9b01      	ldr	r3, [sp, #4]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d0df      	beq.n	80103a0 <__hexnan+0xd4>
 80103e0:	f1c3 0320 	rsb	r3, r3, #32
 80103e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103e8:	40da      	lsrs	r2, r3
 80103ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80103ee:	4013      	ands	r3, r2
 80103f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80103f4:	e7d4      	b.n	80103a0 <__hexnan+0xd4>
 80103f6:	3f04      	subs	r7, #4
 80103f8:	e7d2      	b.n	80103a0 <__hexnan+0xd4>
 80103fa:	2004      	movs	r0, #4
 80103fc:	b007      	add	sp, #28
 80103fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010402 <__ascii_mbtowc>:
 8010402:	b082      	sub	sp, #8
 8010404:	b901      	cbnz	r1, 8010408 <__ascii_mbtowc+0x6>
 8010406:	a901      	add	r1, sp, #4
 8010408:	b142      	cbz	r2, 801041c <__ascii_mbtowc+0x1a>
 801040a:	b14b      	cbz	r3, 8010420 <__ascii_mbtowc+0x1e>
 801040c:	7813      	ldrb	r3, [r2, #0]
 801040e:	600b      	str	r3, [r1, #0]
 8010410:	7812      	ldrb	r2, [r2, #0]
 8010412:	1e10      	subs	r0, r2, #0
 8010414:	bf18      	it	ne
 8010416:	2001      	movne	r0, #1
 8010418:	b002      	add	sp, #8
 801041a:	4770      	bx	lr
 801041c:	4610      	mov	r0, r2
 801041e:	e7fb      	b.n	8010418 <__ascii_mbtowc+0x16>
 8010420:	f06f 0001 	mvn.w	r0, #1
 8010424:	e7f8      	b.n	8010418 <__ascii_mbtowc+0x16>
	...

08010428 <_Balloc>:
 8010428:	b570      	push	{r4, r5, r6, lr}
 801042a:	69c6      	ldr	r6, [r0, #28]
 801042c:	4604      	mov	r4, r0
 801042e:	460d      	mov	r5, r1
 8010430:	b976      	cbnz	r6, 8010450 <_Balloc+0x28>
 8010432:	2010      	movs	r0, #16
 8010434:	f7fc fef0 	bl	800d218 <malloc>
 8010438:	4602      	mov	r2, r0
 801043a:	61e0      	str	r0, [r4, #28]
 801043c:	b920      	cbnz	r0, 8010448 <_Balloc+0x20>
 801043e:	4b18      	ldr	r3, [pc, #96]	; (80104a0 <_Balloc+0x78>)
 8010440:	4818      	ldr	r0, [pc, #96]	; (80104a4 <_Balloc+0x7c>)
 8010442:	216b      	movs	r1, #107	; 0x6b
 8010444:	f001 fc2e 	bl	8011ca4 <__assert_func>
 8010448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801044c:	6006      	str	r6, [r0, #0]
 801044e:	60c6      	str	r6, [r0, #12]
 8010450:	69e6      	ldr	r6, [r4, #28]
 8010452:	68f3      	ldr	r3, [r6, #12]
 8010454:	b183      	cbz	r3, 8010478 <_Balloc+0x50>
 8010456:	69e3      	ldr	r3, [r4, #28]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801045e:	b9b8      	cbnz	r0, 8010490 <_Balloc+0x68>
 8010460:	2101      	movs	r1, #1
 8010462:	fa01 f605 	lsl.w	r6, r1, r5
 8010466:	1d72      	adds	r2, r6, #5
 8010468:	0092      	lsls	r2, r2, #2
 801046a:	4620      	mov	r0, r4
 801046c:	f001 fc38 	bl	8011ce0 <_calloc_r>
 8010470:	b160      	cbz	r0, 801048c <_Balloc+0x64>
 8010472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010476:	e00e      	b.n	8010496 <_Balloc+0x6e>
 8010478:	2221      	movs	r2, #33	; 0x21
 801047a:	2104      	movs	r1, #4
 801047c:	4620      	mov	r0, r4
 801047e:	f001 fc2f 	bl	8011ce0 <_calloc_r>
 8010482:	69e3      	ldr	r3, [r4, #28]
 8010484:	60f0      	str	r0, [r6, #12]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1e4      	bne.n	8010456 <_Balloc+0x2e>
 801048c:	2000      	movs	r0, #0
 801048e:	bd70      	pop	{r4, r5, r6, pc}
 8010490:	6802      	ldr	r2, [r0, #0]
 8010492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010496:	2300      	movs	r3, #0
 8010498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801049c:	e7f7      	b.n	801048e <_Balloc+0x66>
 801049e:	bf00      	nop
 80104a0:	08013618 	.word	0x08013618
 80104a4:	080136f8 	.word	0x080136f8

080104a8 <_Bfree>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	69c6      	ldr	r6, [r0, #28]
 80104ac:	4605      	mov	r5, r0
 80104ae:	460c      	mov	r4, r1
 80104b0:	b976      	cbnz	r6, 80104d0 <_Bfree+0x28>
 80104b2:	2010      	movs	r0, #16
 80104b4:	f7fc feb0 	bl	800d218 <malloc>
 80104b8:	4602      	mov	r2, r0
 80104ba:	61e8      	str	r0, [r5, #28]
 80104bc:	b920      	cbnz	r0, 80104c8 <_Bfree+0x20>
 80104be:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <_Bfree+0x3c>)
 80104c0:	4809      	ldr	r0, [pc, #36]	; (80104e8 <_Bfree+0x40>)
 80104c2:	218f      	movs	r1, #143	; 0x8f
 80104c4:	f001 fbee 	bl	8011ca4 <__assert_func>
 80104c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104cc:	6006      	str	r6, [r0, #0]
 80104ce:	60c6      	str	r6, [r0, #12]
 80104d0:	b13c      	cbz	r4, 80104e2 <_Bfree+0x3a>
 80104d2:	69eb      	ldr	r3, [r5, #28]
 80104d4:	6862      	ldr	r2, [r4, #4]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104dc:	6021      	str	r1, [r4, #0]
 80104de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104e2:	bd70      	pop	{r4, r5, r6, pc}
 80104e4:	08013618 	.word	0x08013618
 80104e8:	080136f8 	.word	0x080136f8

080104ec <__multadd>:
 80104ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f0:	690d      	ldr	r5, [r1, #16]
 80104f2:	4607      	mov	r7, r0
 80104f4:	460c      	mov	r4, r1
 80104f6:	461e      	mov	r6, r3
 80104f8:	f101 0c14 	add.w	ip, r1, #20
 80104fc:	2000      	movs	r0, #0
 80104fe:	f8dc 3000 	ldr.w	r3, [ip]
 8010502:	b299      	uxth	r1, r3
 8010504:	fb02 6101 	mla	r1, r2, r1, r6
 8010508:	0c1e      	lsrs	r6, r3, #16
 801050a:	0c0b      	lsrs	r3, r1, #16
 801050c:	fb02 3306 	mla	r3, r2, r6, r3
 8010510:	b289      	uxth	r1, r1
 8010512:	3001      	adds	r0, #1
 8010514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010518:	4285      	cmp	r5, r0
 801051a:	f84c 1b04 	str.w	r1, [ip], #4
 801051e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010522:	dcec      	bgt.n	80104fe <__multadd+0x12>
 8010524:	b30e      	cbz	r6, 801056a <__multadd+0x7e>
 8010526:	68a3      	ldr	r3, [r4, #8]
 8010528:	42ab      	cmp	r3, r5
 801052a:	dc19      	bgt.n	8010560 <__multadd+0x74>
 801052c:	6861      	ldr	r1, [r4, #4]
 801052e:	4638      	mov	r0, r7
 8010530:	3101      	adds	r1, #1
 8010532:	f7ff ff79 	bl	8010428 <_Balloc>
 8010536:	4680      	mov	r8, r0
 8010538:	b928      	cbnz	r0, 8010546 <__multadd+0x5a>
 801053a:	4602      	mov	r2, r0
 801053c:	4b0c      	ldr	r3, [pc, #48]	; (8010570 <__multadd+0x84>)
 801053e:	480d      	ldr	r0, [pc, #52]	; (8010574 <__multadd+0x88>)
 8010540:	21ba      	movs	r1, #186	; 0xba
 8010542:	f001 fbaf 	bl	8011ca4 <__assert_func>
 8010546:	6922      	ldr	r2, [r4, #16]
 8010548:	3202      	adds	r2, #2
 801054a:	f104 010c 	add.w	r1, r4, #12
 801054e:	0092      	lsls	r2, r2, #2
 8010550:	300c      	adds	r0, #12
 8010552:	f7fe fd20 	bl	800ef96 <memcpy>
 8010556:	4621      	mov	r1, r4
 8010558:	4638      	mov	r0, r7
 801055a:	f7ff ffa5 	bl	80104a8 <_Bfree>
 801055e:	4644      	mov	r4, r8
 8010560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010564:	3501      	adds	r5, #1
 8010566:	615e      	str	r6, [r3, #20]
 8010568:	6125      	str	r5, [r4, #16]
 801056a:	4620      	mov	r0, r4
 801056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010570:	08013687 	.word	0x08013687
 8010574:	080136f8 	.word	0x080136f8

08010578 <__s2b>:
 8010578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801057c:	460c      	mov	r4, r1
 801057e:	4615      	mov	r5, r2
 8010580:	461f      	mov	r7, r3
 8010582:	2209      	movs	r2, #9
 8010584:	3308      	adds	r3, #8
 8010586:	4606      	mov	r6, r0
 8010588:	fb93 f3f2 	sdiv	r3, r3, r2
 801058c:	2100      	movs	r1, #0
 801058e:	2201      	movs	r2, #1
 8010590:	429a      	cmp	r2, r3
 8010592:	db09      	blt.n	80105a8 <__s2b+0x30>
 8010594:	4630      	mov	r0, r6
 8010596:	f7ff ff47 	bl	8010428 <_Balloc>
 801059a:	b940      	cbnz	r0, 80105ae <__s2b+0x36>
 801059c:	4602      	mov	r2, r0
 801059e:	4b19      	ldr	r3, [pc, #100]	; (8010604 <__s2b+0x8c>)
 80105a0:	4819      	ldr	r0, [pc, #100]	; (8010608 <__s2b+0x90>)
 80105a2:	21d3      	movs	r1, #211	; 0xd3
 80105a4:	f001 fb7e 	bl	8011ca4 <__assert_func>
 80105a8:	0052      	lsls	r2, r2, #1
 80105aa:	3101      	adds	r1, #1
 80105ac:	e7f0      	b.n	8010590 <__s2b+0x18>
 80105ae:	9b08      	ldr	r3, [sp, #32]
 80105b0:	6143      	str	r3, [r0, #20]
 80105b2:	2d09      	cmp	r5, #9
 80105b4:	f04f 0301 	mov.w	r3, #1
 80105b8:	6103      	str	r3, [r0, #16]
 80105ba:	dd16      	ble.n	80105ea <__s2b+0x72>
 80105bc:	f104 0909 	add.w	r9, r4, #9
 80105c0:	46c8      	mov	r8, r9
 80105c2:	442c      	add	r4, r5
 80105c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80105c8:	4601      	mov	r1, r0
 80105ca:	3b30      	subs	r3, #48	; 0x30
 80105cc:	220a      	movs	r2, #10
 80105ce:	4630      	mov	r0, r6
 80105d0:	f7ff ff8c 	bl	80104ec <__multadd>
 80105d4:	45a0      	cmp	r8, r4
 80105d6:	d1f5      	bne.n	80105c4 <__s2b+0x4c>
 80105d8:	f1a5 0408 	sub.w	r4, r5, #8
 80105dc:	444c      	add	r4, r9
 80105de:	1b2d      	subs	r5, r5, r4
 80105e0:	1963      	adds	r3, r4, r5
 80105e2:	42bb      	cmp	r3, r7
 80105e4:	db04      	blt.n	80105f0 <__s2b+0x78>
 80105e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ea:	340a      	adds	r4, #10
 80105ec:	2509      	movs	r5, #9
 80105ee:	e7f6      	b.n	80105de <__s2b+0x66>
 80105f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105f4:	4601      	mov	r1, r0
 80105f6:	3b30      	subs	r3, #48	; 0x30
 80105f8:	220a      	movs	r2, #10
 80105fa:	4630      	mov	r0, r6
 80105fc:	f7ff ff76 	bl	80104ec <__multadd>
 8010600:	e7ee      	b.n	80105e0 <__s2b+0x68>
 8010602:	bf00      	nop
 8010604:	08013687 	.word	0x08013687
 8010608:	080136f8 	.word	0x080136f8

0801060c <__hi0bits>:
 801060c:	0c03      	lsrs	r3, r0, #16
 801060e:	041b      	lsls	r3, r3, #16
 8010610:	b9d3      	cbnz	r3, 8010648 <__hi0bits+0x3c>
 8010612:	0400      	lsls	r0, r0, #16
 8010614:	2310      	movs	r3, #16
 8010616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801061a:	bf04      	itt	eq
 801061c:	0200      	lsleq	r0, r0, #8
 801061e:	3308      	addeq	r3, #8
 8010620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010624:	bf04      	itt	eq
 8010626:	0100      	lsleq	r0, r0, #4
 8010628:	3304      	addeq	r3, #4
 801062a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801062e:	bf04      	itt	eq
 8010630:	0080      	lsleq	r0, r0, #2
 8010632:	3302      	addeq	r3, #2
 8010634:	2800      	cmp	r0, #0
 8010636:	db05      	blt.n	8010644 <__hi0bits+0x38>
 8010638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801063c:	f103 0301 	add.w	r3, r3, #1
 8010640:	bf08      	it	eq
 8010642:	2320      	moveq	r3, #32
 8010644:	4618      	mov	r0, r3
 8010646:	4770      	bx	lr
 8010648:	2300      	movs	r3, #0
 801064a:	e7e4      	b.n	8010616 <__hi0bits+0xa>

0801064c <__lo0bits>:
 801064c:	6803      	ldr	r3, [r0, #0]
 801064e:	f013 0207 	ands.w	r2, r3, #7
 8010652:	d00c      	beq.n	801066e <__lo0bits+0x22>
 8010654:	07d9      	lsls	r1, r3, #31
 8010656:	d422      	bmi.n	801069e <__lo0bits+0x52>
 8010658:	079a      	lsls	r2, r3, #30
 801065a:	bf49      	itett	mi
 801065c:	085b      	lsrmi	r3, r3, #1
 801065e:	089b      	lsrpl	r3, r3, #2
 8010660:	6003      	strmi	r3, [r0, #0]
 8010662:	2201      	movmi	r2, #1
 8010664:	bf5c      	itt	pl
 8010666:	6003      	strpl	r3, [r0, #0]
 8010668:	2202      	movpl	r2, #2
 801066a:	4610      	mov	r0, r2
 801066c:	4770      	bx	lr
 801066e:	b299      	uxth	r1, r3
 8010670:	b909      	cbnz	r1, 8010676 <__lo0bits+0x2a>
 8010672:	0c1b      	lsrs	r3, r3, #16
 8010674:	2210      	movs	r2, #16
 8010676:	b2d9      	uxtb	r1, r3
 8010678:	b909      	cbnz	r1, 801067e <__lo0bits+0x32>
 801067a:	3208      	adds	r2, #8
 801067c:	0a1b      	lsrs	r3, r3, #8
 801067e:	0719      	lsls	r1, r3, #28
 8010680:	bf04      	itt	eq
 8010682:	091b      	lsreq	r3, r3, #4
 8010684:	3204      	addeq	r2, #4
 8010686:	0799      	lsls	r1, r3, #30
 8010688:	bf04      	itt	eq
 801068a:	089b      	lsreq	r3, r3, #2
 801068c:	3202      	addeq	r2, #2
 801068e:	07d9      	lsls	r1, r3, #31
 8010690:	d403      	bmi.n	801069a <__lo0bits+0x4e>
 8010692:	085b      	lsrs	r3, r3, #1
 8010694:	f102 0201 	add.w	r2, r2, #1
 8010698:	d003      	beq.n	80106a2 <__lo0bits+0x56>
 801069a:	6003      	str	r3, [r0, #0]
 801069c:	e7e5      	b.n	801066a <__lo0bits+0x1e>
 801069e:	2200      	movs	r2, #0
 80106a0:	e7e3      	b.n	801066a <__lo0bits+0x1e>
 80106a2:	2220      	movs	r2, #32
 80106a4:	e7e1      	b.n	801066a <__lo0bits+0x1e>
	...

080106a8 <__i2b>:
 80106a8:	b510      	push	{r4, lr}
 80106aa:	460c      	mov	r4, r1
 80106ac:	2101      	movs	r1, #1
 80106ae:	f7ff febb 	bl	8010428 <_Balloc>
 80106b2:	4602      	mov	r2, r0
 80106b4:	b928      	cbnz	r0, 80106c2 <__i2b+0x1a>
 80106b6:	4b05      	ldr	r3, [pc, #20]	; (80106cc <__i2b+0x24>)
 80106b8:	4805      	ldr	r0, [pc, #20]	; (80106d0 <__i2b+0x28>)
 80106ba:	f240 1145 	movw	r1, #325	; 0x145
 80106be:	f001 faf1 	bl	8011ca4 <__assert_func>
 80106c2:	2301      	movs	r3, #1
 80106c4:	6144      	str	r4, [r0, #20]
 80106c6:	6103      	str	r3, [r0, #16]
 80106c8:	bd10      	pop	{r4, pc}
 80106ca:	bf00      	nop
 80106cc:	08013687 	.word	0x08013687
 80106d0:	080136f8 	.word	0x080136f8

080106d4 <__multiply>:
 80106d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d8:	4691      	mov	r9, r2
 80106da:	690a      	ldr	r2, [r1, #16]
 80106dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	bfb8      	it	lt
 80106e4:	460b      	movlt	r3, r1
 80106e6:	460c      	mov	r4, r1
 80106e8:	bfbc      	itt	lt
 80106ea:	464c      	movlt	r4, r9
 80106ec:	4699      	movlt	r9, r3
 80106ee:	6927      	ldr	r7, [r4, #16]
 80106f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106f4:	68a3      	ldr	r3, [r4, #8]
 80106f6:	6861      	ldr	r1, [r4, #4]
 80106f8:	eb07 060a 	add.w	r6, r7, sl
 80106fc:	42b3      	cmp	r3, r6
 80106fe:	b085      	sub	sp, #20
 8010700:	bfb8      	it	lt
 8010702:	3101      	addlt	r1, #1
 8010704:	f7ff fe90 	bl	8010428 <_Balloc>
 8010708:	b930      	cbnz	r0, 8010718 <__multiply+0x44>
 801070a:	4602      	mov	r2, r0
 801070c:	4b44      	ldr	r3, [pc, #272]	; (8010820 <__multiply+0x14c>)
 801070e:	4845      	ldr	r0, [pc, #276]	; (8010824 <__multiply+0x150>)
 8010710:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010714:	f001 fac6 	bl	8011ca4 <__assert_func>
 8010718:	f100 0514 	add.w	r5, r0, #20
 801071c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010720:	462b      	mov	r3, r5
 8010722:	2200      	movs	r2, #0
 8010724:	4543      	cmp	r3, r8
 8010726:	d321      	bcc.n	801076c <__multiply+0x98>
 8010728:	f104 0314 	add.w	r3, r4, #20
 801072c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010730:	f109 0314 	add.w	r3, r9, #20
 8010734:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010738:	9202      	str	r2, [sp, #8]
 801073a:	1b3a      	subs	r2, r7, r4
 801073c:	3a15      	subs	r2, #21
 801073e:	f022 0203 	bic.w	r2, r2, #3
 8010742:	3204      	adds	r2, #4
 8010744:	f104 0115 	add.w	r1, r4, #21
 8010748:	428f      	cmp	r7, r1
 801074a:	bf38      	it	cc
 801074c:	2204      	movcc	r2, #4
 801074e:	9201      	str	r2, [sp, #4]
 8010750:	9a02      	ldr	r2, [sp, #8]
 8010752:	9303      	str	r3, [sp, #12]
 8010754:	429a      	cmp	r2, r3
 8010756:	d80c      	bhi.n	8010772 <__multiply+0x9e>
 8010758:	2e00      	cmp	r6, #0
 801075a:	dd03      	ble.n	8010764 <__multiply+0x90>
 801075c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010760:	2b00      	cmp	r3, #0
 8010762:	d05b      	beq.n	801081c <__multiply+0x148>
 8010764:	6106      	str	r6, [r0, #16]
 8010766:	b005      	add	sp, #20
 8010768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801076c:	f843 2b04 	str.w	r2, [r3], #4
 8010770:	e7d8      	b.n	8010724 <__multiply+0x50>
 8010772:	f8b3 a000 	ldrh.w	sl, [r3]
 8010776:	f1ba 0f00 	cmp.w	sl, #0
 801077a:	d024      	beq.n	80107c6 <__multiply+0xf2>
 801077c:	f104 0e14 	add.w	lr, r4, #20
 8010780:	46a9      	mov	r9, r5
 8010782:	f04f 0c00 	mov.w	ip, #0
 8010786:	f85e 2b04 	ldr.w	r2, [lr], #4
 801078a:	f8d9 1000 	ldr.w	r1, [r9]
 801078e:	fa1f fb82 	uxth.w	fp, r2
 8010792:	b289      	uxth	r1, r1
 8010794:	fb0a 110b 	mla	r1, sl, fp, r1
 8010798:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801079c:	f8d9 2000 	ldr.w	r2, [r9]
 80107a0:	4461      	add	r1, ip
 80107a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80107aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107ae:	b289      	uxth	r1, r1
 80107b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107b4:	4577      	cmp	r7, lr
 80107b6:	f849 1b04 	str.w	r1, [r9], #4
 80107ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107be:	d8e2      	bhi.n	8010786 <__multiply+0xb2>
 80107c0:	9a01      	ldr	r2, [sp, #4]
 80107c2:	f845 c002 	str.w	ip, [r5, r2]
 80107c6:	9a03      	ldr	r2, [sp, #12]
 80107c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107cc:	3304      	adds	r3, #4
 80107ce:	f1b9 0f00 	cmp.w	r9, #0
 80107d2:	d021      	beq.n	8010818 <__multiply+0x144>
 80107d4:	6829      	ldr	r1, [r5, #0]
 80107d6:	f104 0c14 	add.w	ip, r4, #20
 80107da:	46ae      	mov	lr, r5
 80107dc:	f04f 0a00 	mov.w	sl, #0
 80107e0:	f8bc b000 	ldrh.w	fp, [ip]
 80107e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107e8:	fb09 220b 	mla	r2, r9, fp, r2
 80107ec:	4452      	add	r2, sl
 80107ee:	b289      	uxth	r1, r1
 80107f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107f4:	f84e 1b04 	str.w	r1, [lr], #4
 80107f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80107fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010800:	f8be 1000 	ldrh.w	r1, [lr]
 8010804:	fb09 110a 	mla	r1, r9, sl, r1
 8010808:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801080c:	4567      	cmp	r7, ip
 801080e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010812:	d8e5      	bhi.n	80107e0 <__multiply+0x10c>
 8010814:	9a01      	ldr	r2, [sp, #4]
 8010816:	50a9      	str	r1, [r5, r2]
 8010818:	3504      	adds	r5, #4
 801081a:	e799      	b.n	8010750 <__multiply+0x7c>
 801081c:	3e01      	subs	r6, #1
 801081e:	e79b      	b.n	8010758 <__multiply+0x84>
 8010820:	08013687 	.word	0x08013687
 8010824:	080136f8 	.word	0x080136f8

08010828 <__pow5mult>:
 8010828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801082c:	4615      	mov	r5, r2
 801082e:	f012 0203 	ands.w	r2, r2, #3
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	d007      	beq.n	8010848 <__pow5mult+0x20>
 8010838:	4c25      	ldr	r4, [pc, #148]	; (80108d0 <__pow5mult+0xa8>)
 801083a:	3a01      	subs	r2, #1
 801083c:	2300      	movs	r3, #0
 801083e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010842:	f7ff fe53 	bl	80104ec <__multadd>
 8010846:	4607      	mov	r7, r0
 8010848:	10ad      	asrs	r5, r5, #2
 801084a:	d03d      	beq.n	80108c8 <__pow5mult+0xa0>
 801084c:	69f4      	ldr	r4, [r6, #28]
 801084e:	b97c      	cbnz	r4, 8010870 <__pow5mult+0x48>
 8010850:	2010      	movs	r0, #16
 8010852:	f7fc fce1 	bl	800d218 <malloc>
 8010856:	4602      	mov	r2, r0
 8010858:	61f0      	str	r0, [r6, #28]
 801085a:	b928      	cbnz	r0, 8010868 <__pow5mult+0x40>
 801085c:	4b1d      	ldr	r3, [pc, #116]	; (80108d4 <__pow5mult+0xac>)
 801085e:	481e      	ldr	r0, [pc, #120]	; (80108d8 <__pow5mult+0xb0>)
 8010860:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010864:	f001 fa1e 	bl	8011ca4 <__assert_func>
 8010868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801086c:	6004      	str	r4, [r0, #0]
 801086e:	60c4      	str	r4, [r0, #12]
 8010870:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010878:	b94c      	cbnz	r4, 801088e <__pow5mult+0x66>
 801087a:	f240 2171 	movw	r1, #625	; 0x271
 801087e:	4630      	mov	r0, r6
 8010880:	f7ff ff12 	bl	80106a8 <__i2b>
 8010884:	2300      	movs	r3, #0
 8010886:	f8c8 0008 	str.w	r0, [r8, #8]
 801088a:	4604      	mov	r4, r0
 801088c:	6003      	str	r3, [r0, #0]
 801088e:	f04f 0900 	mov.w	r9, #0
 8010892:	07eb      	lsls	r3, r5, #31
 8010894:	d50a      	bpl.n	80108ac <__pow5mult+0x84>
 8010896:	4639      	mov	r1, r7
 8010898:	4622      	mov	r2, r4
 801089a:	4630      	mov	r0, r6
 801089c:	f7ff ff1a 	bl	80106d4 <__multiply>
 80108a0:	4639      	mov	r1, r7
 80108a2:	4680      	mov	r8, r0
 80108a4:	4630      	mov	r0, r6
 80108a6:	f7ff fdff 	bl	80104a8 <_Bfree>
 80108aa:	4647      	mov	r7, r8
 80108ac:	106d      	asrs	r5, r5, #1
 80108ae:	d00b      	beq.n	80108c8 <__pow5mult+0xa0>
 80108b0:	6820      	ldr	r0, [r4, #0]
 80108b2:	b938      	cbnz	r0, 80108c4 <__pow5mult+0x9c>
 80108b4:	4622      	mov	r2, r4
 80108b6:	4621      	mov	r1, r4
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7ff ff0b 	bl	80106d4 <__multiply>
 80108be:	6020      	str	r0, [r4, #0]
 80108c0:	f8c0 9000 	str.w	r9, [r0]
 80108c4:	4604      	mov	r4, r0
 80108c6:	e7e4      	b.n	8010892 <__pow5mult+0x6a>
 80108c8:	4638      	mov	r0, r7
 80108ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ce:	bf00      	nop
 80108d0:	08013848 	.word	0x08013848
 80108d4:	08013618 	.word	0x08013618
 80108d8:	080136f8 	.word	0x080136f8

080108dc <__lshift>:
 80108dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e0:	460c      	mov	r4, r1
 80108e2:	6849      	ldr	r1, [r1, #4]
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108ea:	68a3      	ldr	r3, [r4, #8]
 80108ec:	4607      	mov	r7, r0
 80108ee:	4691      	mov	r9, r2
 80108f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108f4:	f108 0601 	add.w	r6, r8, #1
 80108f8:	42b3      	cmp	r3, r6
 80108fa:	db0b      	blt.n	8010914 <__lshift+0x38>
 80108fc:	4638      	mov	r0, r7
 80108fe:	f7ff fd93 	bl	8010428 <_Balloc>
 8010902:	4605      	mov	r5, r0
 8010904:	b948      	cbnz	r0, 801091a <__lshift+0x3e>
 8010906:	4602      	mov	r2, r0
 8010908:	4b28      	ldr	r3, [pc, #160]	; (80109ac <__lshift+0xd0>)
 801090a:	4829      	ldr	r0, [pc, #164]	; (80109b0 <__lshift+0xd4>)
 801090c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010910:	f001 f9c8 	bl	8011ca4 <__assert_func>
 8010914:	3101      	adds	r1, #1
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	e7ee      	b.n	80108f8 <__lshift+0x1c>
 801091a:	2300      	movs	r3, #0
 801091c:	f100 0114 	add.w	r1, r0, #20
 8010920:	f100 0210 	add.w	r2, r0, #16
 8010924:	4618      	mov	r0, r3
 8010926:	4553      	cmp	r3, sl
 8010928:	db33      	blt.n	8010992 <__lshift+0xb6>
 801092a:	6920      	ldr	r0, [r4, #16]
 801092c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010930:	f104 0314 	add.w	r3, r4, #20
 8010934:	f019 091f 	ands.w	r9, r9, #31
 8010938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801093c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010940:	d02b      	beq.n	801099a <__lshift+0xbe>
 8010942:	f1c9 0e20 	rsb	lr, r9, #32
 8010946:	468a      	mov	sl, r1
 8010948:	2200      	movs	r2, #0
 801094a:	6818      	ldr	r0, [r3, #0]
 801094c:	fa00 f009 	lsl.w	r0, r0, r9
 8010950:	4310      	orrs	r0, r2
 8010952:	f84a 0b04 	str.w	r0, [sl], #4
 8010956:	f853 2b04 	ldr.w	r2, [r3], #4
 801095a:	459c      	cmp	ip, r3
 801095c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010960:	d8f3      	bhi.n	801094a <__lshift+0x6e>
 8010962:	ebac 0304 	sub.w	r3, ip, r4
 8010966:	3b15      	subs	r3, #21
 8010968:	f023 0303 	bic.w	r3, r3, #3
 801096c:	3304      	adds	r3, #4
 801096e:	f104 0015 	add.w	r0, r4, #21
 8010972:	4584      	cmp	ip, r0
 8010974:	bf38      	it	cc
 8010976:	2304      	movcc	r3, #4
 8010978:	50ca      	str	r2, [r1, r3]
 801097a:	b10a      	cbz	r2, 8010980 <__lshift+0xa4>
 801097c:	f108 0602 	add.w	r6, r8, #2
 8010980:	3e01      	subs	r6, #1
 8010982:	4638      	mov	r0, r7
 8010984:	612e      	str	r6, [r5, #16]
 8010986:	4621      	mov	r1, r4
 8010988:	f7ff fd8e 	bl	80104a8 <_Bfree>
 801098c:	4628      	mov	r0, r5
 801098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010992:	f842 0f04 	str.w	r0, [r2, #4]!
 8010996:	3301      	adds	r3, #1
 8010998:	e7c5      	b.n	8010926 <__lshift+0x4a>
 801099a:	3904      	subs	r1, #4
 801099c:	f853 2b04 	ldr.w	r2, [r3], #4
 80109a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80109a4:	459c      	cmp	ip, r3
 80109a6:	d8f9      	bhi.n	801099c <__lshift+0xc0>
 80109a8:	e7ea      	b.n	8010980 <__lshift+0xa4>
 80109aa:	bf00      	nop
 80109ac:	08013687 	.word	0x08013687
 80109b0:	080136f8 	.word	0x080136f8

080109b4 <__mcmp>:
 80109b4:	b530      	push	{r4, r5, lr}
 80109b6:	6902      	ldr	r2, [r0, #16]
 80109b8:	690c      	ldr	r4, [r1, #16]
 80109ba:	1b12      	subs	r2, r2, r4
 80109bc:	d10e      	bne.n	80109dc <__mcmp+0x28>
 80109be:	f100 0314 	add.w	r3, r0, #20
 80109c2:	3114      	adds	r1, #20
 80109c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109d4:	42a5      	cmp	r5, r4
 80109d6:	d003      	beq.n	80109e0 <__mcmp+0x2c>
 80109d8:	d305      	bcc.n	80109e6 <__mcmp+0x32>
 80109da:	2201      	movs	r2, #1
 80109dc:	4610      	mov	r0, r2
 80109de:	bd30      	pop	{r4, r5, pc}
 80109e0:	4283      	cmp	r3, r0
 80109e2:	d3f3      	bcc.n	80109cc <__mcmp+0x18>
 80109e4:	e7fa      	b.n	80109dc <__mcmp+0x28>
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ea:	e7f7      	b.n	80109dc <__mcmp+0x28>

080109ec <__mdiff>:
 80109ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f0:	460c      	mov	r4, r1
 80109f2:	4606      	mov	r6, r0
 80109f4:	4611      	mov	r1, r2
 80109f6:	4620      	mov	r0, r4
 80109f8:	4690      	mov	r8, r2
 80109fa:	f7ff ffdb 	bl	80109b4 <__mcmp>
 80109fe:	1e05      	subs	r5, r0, #0
 8010a00:	d110      	bne.n	8010a24 <__mdiff+0x38>
 8010a02:	4629      	mov	r1, r5
 8010a04:	4630      	mov	r0, r6
 8010a06:	f7ff fd0f 	bl	8010428 <_Balloc>
 8010a0a:	b930      	cbnz	r0, 8010a1a <__mdiff+0x2e>
 8010a0c:	4b3a      	ldr	r3, [pc, #232]	; (8010af8 <__mdiff+0x10c>)
 8010a0e:	4602      	mov	r2, r0
 8010a10:	f240 2137 	movw	r1, #567	; 0x237
 8010a14:	4839      	ldr	r0, [pc, #228]	; (8010afc <__mdiff+0x110>)
 8010a16:	f001 f945 	bl	8011ca4 <__assert_func>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a24:	bfa4      	itt	ge
 8010a26:	4643      	movge	r3, r8
 8010a28:	46a0      	movge	r8, r4
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a30:	bfa6      	itte	ge
 8010a32:	461c      	movge	r4, r3
 8010a34:	2500      	movge	r5, #0
 8010a36:	2501      	movlt	r5, #1
 8010a38:	f7ff fcf6 	bl	8010428 <_Balloc>
 8010a3c:	b920      	cbnz	r0, 8010a48 <__mdiff+0x5c>
 8010a3e:	4b2e      	ldr	r3, [pc, #184]	; (8010af8 <__mdiff+0x10c>)
 8010a40:	4602      	mov	r2, r0
 8010a42:	f240 2145 	movw	r1, #581	; 0x245
 8010a46:	e7e5      	b.n	8010a14 <__mdiff+0x28>
 8010a48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a4c:	6926      	ldr	r6, [r4, #16]
 8010a4e:	60c5      	str	r5, [r0, #12]
 8010a50:	f104 0914 	add.w	r9, r4, #20
 8010a54:	f108 0514 	add.w	r5, r8, #20
 8010a58:	f100 0e14 	add.w	lr, r0, #20
 8010a5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a64:	f108 0210 	add.w	r2, r8, #16
 8010a68:	46f2      	mov	sl, lr
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a74:	fa11 f88b 	uxtah	r8, r1, fp
 8010a78:	b299      	uxth	r1, r3
 8010a7a:	0c1b      	lsrs	r3, r3, #16
 8010a7c:	eba8 0801 	sub.w	r8, r8, r1
 8010a80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a88:	fa1f f888 	uxth.w	r8, r8
 8010a8c:	1419      	asrs	r1, r3, #16
 8010a8e:	454e      	cmp	r6, r9
 8010a90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a94:	f84a 3b04 	str.w	r3, [sl], #4
 8010a98:	d8e8      	bhi.n	8010a6c <__mdiff+0x80>
 8010a9a:	1b33      	subs	r3, r6, r4
 8010a9c:	3b15      	subs	r3, #21
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	3415      	adds	r4, #21
 8010aa6:	42a6      	cmp	r6, r4
 8010aa8:	bf38      	it	cc
 8010aaa:	2304      	movcc	r3, #4
 8010aac:	441d      	add	r5, r3
 8010aae:	4473      	add	r3, lr
 8010ab0:	469e      	mov	lr, r3
 8010ab2:	462e      	mov	r6, r5
 8010ab4:	4566      	cmp	r6, ip
 8010ab6:	d30e      	bcc.n	8010ad6 <__mdiff+0xea>
 8010ab8:	f10c 0203 	add.w	r2, ip, #3
 8010abc:	1b52      	subs	r2, r2, r5
 8010abe:	f022 0203 	bic.w	r2, r2, #3
 8010ac2:	3d03      	subs	r5, #3
 8010ac4:	45ac      	cmp	ip, r5
 8010ac6:	bf38      	it	cc
 8010ac8:	2200      	movcc	r2, #0
 8010aca:	4413      	add	r3, r2
 8010acc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ad0:	b17a      	cbz	r2, 8010af2 <__mdiff+0x106>
 8010ad2:	6107      	str	r7, [r0, #16]
 8010ad4:	e7a4      	b.n	8010a20 <__mdiff+0x34>
 8010ad6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ada:	fa11 f288 	uxtah	r2, r1, r8
 8010ade:	1414      	asrs	r4, r2, #16
 8010ae0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ae4:	b292      	uxth	r2, r2
 8010ae6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010aea:	f84e 2b04 	str.w	r2, [lr], #4
 8010aee:	1421      	asrs	r1, r4, #16
 8010af0:	e7e0      	b.n	8010ab4 <__mdiff+0xc8>
 8010af2:	3f01      	subs	r7, #1
 8010af4:	e7ea      	b.n	8010acc <__mdiff+0xe0>
 8010af6:	bf00      	nop
 8010af8:	08013687 	.word	0x08013687
 8010afc:	080136f8 	.word	0x080136f8

08010b00 <__ulp>:
 8010b00:	b082      	sub	sp, #8
 8010b02:	ed8d 0b00 	vstr	d0, [sp]
 8010b06:	9a01      	ldr	r2, [sp, #4]
 8010b08:	4b0f      	ldr	r3, [pc, #60]	; (8010b48 <__ulp+0x48>)
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	dc08      	bgt.n	8010b26 <__ulp+0x26>
 8010b14:	425b      	negs	r3, r3
 8010b16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010b1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b1e:	da04      	bge.n	8010b2a <__ulp+0x2a>
 8010b20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010b24:	4113      	asrs	r3, r2
 8010b26:	2200      	movs	r2, #0
 8010b28:	e008      	b.n	8010b3c <__ulp+0x3c>
 8010b2a:	f1a2 0314 	sub.w	r3, r2, #20
 8010b2e:	2b1e      	cmp	r3, #30
 8010b30:	bfda      	itte	le
 8010b32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010b36:	40da      	lsrle	r2, r3
 8010b38:	2201      	movgt	r2, #1
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	4610      	mov	r0, r2
 8010b40:	ec41 0b10 	vmov	d0, r0, r1
 8010b44:	b002      	add	sp, #8
 8010b46:	4770      	bx	lr
 8010b48:	7ff00000 	.word	0x7ff00000

08010b4c <__b2d>:
 8010b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b50:	6906      	ldr	r6, [r0, #16]
 8010b52:	f100 0814 	add.w	r8, r0, #20
 8010b56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010b5a:	1f37      	subs	r7, r6, #4
 8010b5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010b60:	4610      	mov	r0, r2
 8010b62:	f7ff fd53 	bl	801060c <__hi0bits>
 8010b66:	f1c0 0320 	rsb	r3, r0, #32
 8010b6a:	280a      	cmp	r0, #10
 8010b6c:	600b      	str	r3, [r1, #0]
 8010b6e:	491b      	ldr	r1, [pc, #108]	; (8010bdc <__b2d+0x90>)
 8010b70:	dc15      	bgt.n	8010b9e <__b2d+0x52>
 8010b72:	f1c0 0c0b 	rsb	ip, r0, #11
 8010b76:	fa22 f30c 	lsr.w	r3, r2, ip
 8010b7a:	45b8      	cmp	r8, r7
 8010b7c:	ea43 0501 	orr.w	r5, r3, r1
 8010b80:	bf34      	ite	cc
 8010b82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b86:	2300      	movcs	r3, #0
 8010b88:	3015      	adds	r0, #21
 8010b8a:	fa02 f000 	lsl.w	r0, r2, r0
 8010b8e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010b92:	4303      	orrs	r3, r0
 8010b94:	461c      	mov	r4, r3
 8010b96:	ec45 4b10 	vmov	d0, r4, r5
 8010b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9e:	45b8      	cmp	r8, r7
 8010ba0:	bf3a      	itte	cc
 8010ba2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010ba6:	f1a6 0708 	subcc.w	r7, r6, #8
 8010baa:	2300      	movcs	r3, #0
 8010bac:	380b      	subs	r0, #11
 8010bae:	d012      	beq.n	8010bd6 <__b2d+0x8a>
 8010bb0:	f1c0 0120 	rsb	r1, r0, #32
 8010bb4:	fa23 f401 	lsr.w	r4, r3, r1
 8010bb8:	4082      	lsls	r2, r0
 8010bba:	4322      	orrs	r2, r4
 8010bbc:	4547      	cmp	r7, r8
 8010bbe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010bc2:	bf8c      	ite	hi
 8010bc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010bc8:	2200      	movls	r2, #0
 8010bca:	4083      	lsls	r3, r0
 8010bcc:	40ca      	lsrs	r2, r1
 8010bce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	e7de      	b.n	8010b94 <__b2d+0x48>
 8010bd6:	ea42 0501 	orr.w	r5, r2, r1
 8010bda:	e7db      	b.n	8010b94 <__b2d+0x48>
 8010bdc:	3ff00000 	.word	0x3ff00000

08010be0 <__d2b>:
 8010be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010be4:	460f      	mov	r7, r1
 8010be6:	2101      	movs	r1, #1
 8010be8:	ec59 8b10 	vmov	r8, r9, d0
 8010bec:	4616      	mov	r6, r2
 8010bee:	f7ff fc1b 	bl	8010428 <_Balloc>
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	b930      	cbnz	r0, 8010c04 <__d2b+0x24>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	4b24      	ldr	r3, [pc, #144]	; (8010c8c <__d2b+0xac>)
 8010bfa:	4825      	ldr	r0, [pc, #148]	; (8010c90 <__d2b+0xb0>)
 8010bfc:	f240 310f 	movw	r1, #783	; 0x30f
 8010c00:	f001 f850 	bl	8011ca4 <__assert_func>
 8010c04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c0c:	bb2d      	cbnz	r5, 8010c5a <__d2b+0x7a>
 8010c0e:	9301      	str	r3, [sp, #4]
 8010c10:	f1b8 0300 	subs.w	r3, r8, #0
 8010c14:	d026      	beq.n	8010c64 <__d2b+0x84>
 8010c16:	4668      	mov	r0, sp
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	f7ff fd17 	bl	801064c <__lo0bits>
 8010c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c22:	b1e8      	cbz	r0, 8010c60 <__d2b+0x80>
 8010c24:	f1c0 0320 	rsb	r3, r0, #32
 8010c28:	fa02 f303 	lsl.w	r3, r2, r3
 8010c2c:	430b      	orrs	r3, r1
 8010c2e:	40c2      	lsrs	r2, r0
 8010c30:	6163      	str	r3, [r4, #20]
 8010c32:	9201      	str	r2, [sp, #4]
 8010c34:	9b01      	ldr	r3, [sp, #4]
 8010c36:	61a3      	str	r3, [r4, #24]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bf14      	ite	ne
 8010c3c:	2202      	movne	r2, #2
 8010c3e:	2201      	moveq	r2, #1
 8010c40:	6122      	str	r2, [r4, #16]
 8010c42:	b1bd      	cbz	r5, 8010c74 <__d2b+0x94>
 8010c44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c48:	4405      	add	r5, r0
 8010c4a:	603d      	str	r5, [r7, #0]
 8010c4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c50:	6030      	str	r0, [r6, #0]
 8010c52:	4620      	mov	r0, r4
 8010c54:	b003      	add	sp, #12
 8010c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c5e:	e7d6      	b.n	8010c0e <__d2b+0x2e>
 8010c60:	6161      	str	r1, [r4, #20]
 8010c62:	e7e7      	b.n	8010c34 <__d2b+0x54>
 8010c64:	a801      	add	r0, sp, #4
 8010c66:	f7ff fcf1 	bl	801064c <__lo0bits>
 8010c6a:	9b01      	ldr	r3, [sp, #4]
 8010c6c:	6163      	str	r3, [r4, #20]
 8010c6e:	3020      	adds	r0, #32
 8010c70:	2201      	movs	r2, #1
 8010c72:	e7e5      	b.n	8010c40 <__d2b+0x60>
 8010c74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c7c:	6038      	str	r0, [r7, #0]
 8010c7e:	6918      	ldr	r0, [r3, #16]
 8010c80:	f7ff fcc4 	bl	801060c <__hi0bits>
 8010c84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c88:	e7e2      	b.n	8010c50 <__d2b+0x70>
 8010c8a:	bf00      	nop
 8010c8c:	08013687 	.word	0x08013687
 8010c90:	080136f8 	.word	0x080136f8

08010c94 <__ratio>:
 8010c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	4688      	mov	r8, r1
 8010c9a:	4669      	mov	r1, sp
 8010c9c:	4681      	mov	r9, r0
 8010c9e:	f7ff ff55 	bl	8010b4c <__b2d>
 8010ca2:	a901      	add	r1, sp, #4
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	ec55 4b10 	vmov	r4, r5, d0
 8010caa:	f7ff ff4f 	bl	8010b4c <__b2d>
 8010cae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010cb6:	eba3 0c02 	sub.w	ip, r3, r2
 8010cba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cbe:	1a9b      	subs	r3, r3, r2
 8010cc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cc4:	ec51 0b10 	vmov	r0, r1, d0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	bfd6      	itet	le
 8010ccc:	460a      	movle	r2, r1
 8010cce:	462a      	movgt	r2, r5
 8010cd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010cd4:	468b      	mov	fp, r1
 8010cd6:	462f      	mov	r7, r5
 8010cd8:	bfd4      	ite	le
 8010cda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010cde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	ee10 2a10 	vmov	r2, s0
 8010ce8:	465b      	mov	r3, fp
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef fdc6 	bl	800087c <__aeabi_ddiv>
 8010cf0:	ec41 0b10 	vmov	d0, r0, r1
 8010cf4:	b003      	add	sp, #12
 8010cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cfa <__copybits>:
 8010cfa:	3901      	subs	r1, #1
 8010cfc:	b570      	push	{r4, r5, r6, lr}
 8010cfe:	1149      	asrs	r1, r1, #5
 8010d00:	6914      	ldr	r4, [r2, #16]
 8010d02:	3101      	adds	r1, #1
 8010d04:	f102 0314 	add.w	r3, r2, #20
 8010d08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d10:	1f05      	subs	r5, r0, #4
 8010d12:	42a3      	cmp	r3, r4
 8010d14:	d30c      	bcc.n	8010d30 <__copybits+0x36>
 8010d16:	1aa3      	subs	r3, r4, r2
 8010d18:	3b11      	subs	r3, #17
 8010d1a:	f023 0303 	bic.w	r3, r3, #3
 8010d1e:	3211      	adds	r2, #17
 8010d20:	42a2      	cmp	r2, r4
 8010d22:	bf88      	it	hi
 8010d24:	2300      	movhi	r3, #0
 8010d26:	4418      	add	r0, r3
 8010d28:	2300      	movs	r3, #0
 8010d2a:	4288      	cmp	r0, r1
 8010d2c:	d305      	bcc.n	8010d3a <__copybits+0x40>
 8010d2e:	bd70      	pop	{r4, r5, r6, pc}
 8010d30:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d34:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d38:	e7eb      	b.n	8010d12 <__copybits+0x18>
 8010d3a:	f840 3b04 	str.w	r3, [r0], #4
 8010d3e:	e7f4      	b.n	8010d2a <__copybits+0x30>

08010d40 <__any_on>:
 8010d40:	f100 0214 	add.w	r2, r0, #20
 8010d44:	6900      	ldr	r0, [r0, #16]
 8010d46:	114b      	asrs	r3, r1, #5
 8010d48:	4298      	cmp	r0, r3
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	db11      	blt.n	8010d72 <__any_on+0x32>
 8010d4e:	dd0a      	ble.n	8010d66 <__any_on+0x26>
 8010d50:	f011 011f 	ands.w	r1, r1, #31
 8010d54:	d007      	beq.n	8010d66 <__any_on+0x26>
 8010d56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d5a:	fa24 f001 	lsr.w	r0, r4, r1
 8010d5e:	fa00 f101 	lsl.w	r1, r0, r1
 8010d62:	428c      	cmp	r4, r1
 8010d64:	d10b      	bne.n	8010d7e <__any_on+0x3e>
 8010d66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d803      	bhi.n	8010d76 <__any_on+0x36>
 8010d6e:	2000      	movs	r0, #0
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	4603      	mov	r3, r0
 8010d74:	e7f7      	b.n	8010d66 <__any_on+0x26>
 8010d76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d7a:	2900      	cmp	r1, #0
 8010d7c:	d0f5      	beq.n	8010d6a <__any_on+0x2a>
 8010d7e:	2001      	movs	r0, #1
 8010d80:	e7f6      	b.n	8010d70 <__any_on+0x30>

08010d82 <_malloc_usable_size_r>:
 8010d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d86:	1f18      	subs	r0, r3, #4
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	bfbc      	itt	lt
 8010d8c:	580b      	ldrlt	r3, [r1, r0]
 8010d8e:	18c0      	addlt	r0, r0, r3
 8010d90:	4770      	bx	lr

08010d92 <__ascii_wctomb>:
 8010d92:	b149      	cbz	r1, 8010da8 <__ascii_wctomb+0x16>
 8010d94:	2aff      	cmp	r2, #255	; 0xff
 8010d96:	bf85      	ittet	hi
 8010d98:	238a      	movhi	r3, #138	; 0x8a
 8010d9a:	6003      	strhi	r3, [r0, #0]
 8010d9c:	700a      	strbls	r2, [r1, #0]
 8010d9e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010da2:	bf98      	it	ls
 8010da4:	2001      	movls	r0, #1
 8010da6:	4770      	bx	lr
 8010da8:	4608      	mov	r0, r1
 8010daa:	4770      	bx	lr

08010dac <__ssputs_r>:
 8010dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db0:	688e      	ldr	r6, [r1, #8]
 8010db2:	461f      	mov	r7, r3
 8010db4:	42be      	cmp	r6, r7
 8010db6:	680b      	ldr	r3, [r1, #0]
 8010db8:	4682      	mov	sl, r0
 8010dba:	460c      	mov	r4, r1
 8010dbc:	4690      	mov	r8, r2
 8010dbe:	d82c      	bhi.n	8010e1a <__ssputs_r+0x6e>
 8010dc0:	898a      	ldrh	r2, [r1, #12]
 8010dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010dc6:	d026      	beq.n	8010e16 <__ssputs_r+0x6a>
 8010dc8:	6965      	ldr	r5, [r4, #20]
 8010dca:	6909      	ldr	r1, [r1, #16]
 8010dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dd0:	eba3 0901 	sub.w	r9, r3, r1
 8010dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dd8:	1c7b      	adds	r3, r7, #1
 8010dda:	444b      	add	r3, r9
 8010ddc:	106d      	asrs	r5, r5, #1
 8010dde:	429d      	cmp	r5, r3
 8010de0:	bf38      	it	cc
 8010de2:	461d      	movcc	r5, r3
 8010de4:	0553      	lsls	r3, r2, #21
 8010de6:	d527      	bpl.n	8010e38 <__ssputs_r+0x8c>
 8010de8:	4629      	mov	r1, r5
 8010dea:	f7fc fa45 	bl	800d278 <_malloc_r>
 8010dee:	4606      	mov	r6, r0
 8010df0:	b360      	cbz	r0, 8010e4c <__ssputs_r+0xa0>
 8010df2:	6921      	ldr	r1, [r4, #16]
 8010df4:	464a      	mov	r2, r9
 8010df6:	f7fe f8ce 	bl	800ef96 <memcpy>
 8010dfa:	89a3      	ldrh	r3, [r4, #12]
 8010dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e04:	81a3      	strh	r3, [r4, #12]
 8010e06:	6126      	str	r6, [r4, #16]
 8010e08:	6165      	str	r5, [r4, #20]
 8010e0a:	444e      	add	r6, r9
 8010e0c:	eba5 0509 	sub.w	r5, r5, r9
 8010e10:	6026      	str	r6, [r4, #0]
 8010e12:	60a5      	str	r5, [r4, #8]
 8010e14:	463e      	mov	r6, r7
 8010e16:	42be      	cmp	r6, r7
 8010e18:	d900      	bls.n	8010e1c <__ssputs_r+0x70>
 8010e1a:	463e      	mov	r6, r7
 8010e1c:	6820      	ldr	r0, [r4, #0]
 8010e1e:	4632      	mov	r2, r6
 8010e20:	4641      	mov	r1, r8
 8010e22:	f000 ff02 	bl	8011c2a <memmove>
 8010e26:	68a3      	ldr	r3, [r4, #8]
 8010e28:	1b9b      	subs	r3, r3, r6
 8010e2a:	60a3      	str	r3, [r4, #8]
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	4433      	add	r3, r6
 8010e30:	6023      	str	r3, [r4, #0]
 8010e32:	2000      	movs	r0, #0
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	462a      	mov	r2, r5
 8010e3a:	f7fc fab1 	bl	800d3a0 <_realloc_r>
 8010e3e:	4606      	mov	r6, r0
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d1e0      	bne.n	8010e06 <__ssputs_r+0x5a>
 8010e44:	6921      	ldr	r1, [r4, #16]
 8010e46:	4650      	mov	r0, sl
 8010e48:	f7fe ff38 	bl	800fcbc <_free_r>
 8010e4c:	230c      	movs	r3, #12
 8010e4e:	f8ca 3000 	str.w	r3, [sl]
 8010e52:	89a3      	ldrh	r3, [r4, #12]
 8010e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e5e:	e7e9      	b.n	8010e34 <__ssputs_r+0x88>

08010e60 <_svfiprintf_r>:
 8010e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e64:	4698      	mov	r8, r3
 8010e66:	898b      	ldrh	r3, [r1, #12]
 8010e68:	061b      	lsls	r3, r3, #24
 8010e6a:	b09d      	sub	sp, #116	; 0x74
 8010e6c:	4607      	mov	r7, r0
 8010e6e:	460d      	mov	r5, r1
 8010e70:	4614      	mov	r4, r2
 8010e72:	d50e      	bpl.n	8010e92 <_svfiprintf_r+0x32>
 8010e74:	690b      	ldr	r3, [r1, #16]
 8010e76:	b963      	cbnz	r3, 8010e92 <_svfiprintf_r+0x32>
 8010e78:	2140      	movs	r1, #64	; 0x40
 8010e7a:	f7fc f9fd 	bl	800d278 <_malloc_r>
 8010e7e:	6028      	str	r0, [r5, #0]
 8010e80:	6128      	str	r0, [r5, #16]
 8010e82:	b920      	cbnz	r0, 8010e8e <_svfiprintf_r+0x2e>
 8010e84:	230c      	movs	r3, #12
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e8c:	e0d0      	b.n	8011030 <_svfiprintf_r+0x1d0>
 8010e8e:	2340      	movs	r3, #64	; 0x40
 8010e90:	616b      	str	r3, [r5, #20]
 8010e92:	2300      	movs	r3, #0
 8010e94:	9309      	str	r3, [sp, #36]	; 0x24
 8010e96:	2320      	movs	r3, #32
 8010e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ea0:	2330      	movs	r3, #48	; 0x30
 8010ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011048 <_svfiprintf_r+0x1e8>
 8010ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010eaa:	f04f 0901 	mov.w	r9, #1
 8010eae:	4623      	mov	r3, r4
 8010eb0:	469a      	mov	sl, r3
 8010eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eb6:	b10a      	cbz	r2, 8010ebc <_svfiprintf_r+0x5c>
 8010eb8:	2a25      	cmp	r2, #37	; 0x25
 8010eba:	d1f9      	bne.n	8010eb0 <_svfiprintf_r+0x50>
 8010ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ec0:	d00b      	beq.n	8010eda <_svfiprintf_r+0x7a>
 8010ec2:	465b      	mov	r3, fp
 8010ec4:	4622      	mov	r2, r4
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ff ff6f 	bl	8010dac <__ssputs_r>
 8010ece:	3001      	adds	r0, #1
 8010ed0:	f000 80a9 	beq.w	8011026 <_svfiprintf_r+0x1c6>
 8010ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ed6:	445a      	add	r2, fp
 8010ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8010eda:	f89a 3000 	ldrb.w	r3, [sl]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f000 80a1 	beq.w	8011026 <_svfiprintf_r+0x1c6>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eee:	f10a 0a01 	add.w	sl, sl, #1
 8010ef2:	9304      	str	r3, [sp, #16]
 8010ef4:	9307      	str	r3, [sp, #28]
 8010ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010efa:	931a      	str	r3, [sp, #104]	; 0x68
 8010efc:	4654      	mov	r4, sl
 8010efe:	2205      	movs	r2, #5
 8010f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f04:	4850      	ldr	r0, [pc, #320]	; (8011048 <_svfiprintf_r+0x1e8>)
 8010f06:	f7ef f97b 	bl	8000200 <memchr>
 8010f0a:	9a04      	ldr	r2, [sp, #16]
 8010f0c:	b9d8      	cbnz	r0, 8010f46 <_svfiprintf_r+0xe6>
 8010f0e:	06d0      	lsls	r0, r2, #27
 8010f10:	bf44      	itt	mi
 8010f12:	2320      	movmi	r3, #32
 8010f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f18:	0711      	lsls	r1, r2, #28
 8010f1a:	bf44      	itt	mi
 8010f1c:	232b      	movmi	r3, #43	; 0x2b
 8010f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f22:	f89a 3000 	ldrb.w	r3, [sl]
 8010f26:	2b2a      	cmp	r3, #42	; 0x2a
 8010f28:	d015      	beq.n	8010f56 <_svfiprintf_r+0xf6>
 8010f2a:	9a07      	ldr	r2, [sp, #28]
 8010f2c:	4654      	mov	r4, sl
 8010f2e:	2000      	movs	r0, #0
 8010f30:	f04f 0c0a 	mov.w	ip, #10
 8010f34:	4621      	mov	r1, r4
 8010f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f3a:	3b30      	subs	r3, #48	; 0x30
 8010f3c:	2b09      	cmp	r3, #9
 8010f3e:	d94d      	bls.n	8010fdc <_svfiprintf_r+0x17c>
 8010f40:	b1b0      	cbz	r0, 8010f70 <_svfiprintf_r+0x110>
 8010f42:	9207      	str	r2, [sp, #28]
 8010f44:	e014      	b.n	8010f70 <_svfiprintf_r+0x110>
 8010f46:	eba0 0308 	sub.w	r3, r0, r8
 8010f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	46a2      	mov	sl, r4
 8010f54:	e7d2      	b.n	8010efc <_svfiprintf_r+0x9c>
 8010f56:	9b03      	ldr	r3, [sp, #12]
 8010f58:	1d19      	adds	r1, r3, #4
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	9103      	str	r1, [sp, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	bfbb      	ittet	lt
 8010f62:	425b      	neglt	r3, r3
 8010f64:	f042 0202 	orrlt.w	r2, r2, #2
 8010f68:	9307      	strge	r3, [sp, #28]
 8010f6a:	9307      	strlt	r3, [sp, #28]
 8010f6c:	bfb8      	it	lt
 8010f6e:	9204      	strlt	r2, [sp, #16]
 8010f70:	7823      	ldrb	r3, [r4, #0]
 8010f72:	2b2e      	cmp	r3, #46	; 0x2e
 8010f74:	d10c      	bne.n	8010f90 <_svfiprintf_r+0x130>
 8010f76:	7863      	ldrb	r3, [r4, #1]
 8010f78:	2b2a      	cmp	r3, #42	; 0x2a
 8010f7a:	d134      	bne.n	8010fe6 <_svfiprintf_r+0x186>
 8010f7c:	9b03      	ldr	r3, [sp, #12]
 8010f7e:	1d1a      	adds	r2, r3, #4
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	9203      	str	r2, [sp, #12]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	bfb8      	it	lt
 8010f88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f8c:	3402      	adds	r4, #2
 8010f8e:	9305      	str	r3, [sp, #20]
 8010f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011058 <_svfiprintf_r+0x1f8>
 8010f94:	7821      	ldrb	r1, [r4, #0]
 8010f96:	2203      	movs	r2, #3
 8010f98:	4650      	mov	r0, sl
 8010f9a:	f7ef f931 	bl	8000200 <memchr>
 8010f9e:	b138      	cbz	r0, 8010fb0 <_svfiprintf_r+0x150>
 8010fa0:	9b04      	ldr	r3, [sp, #16]
 8010fa2:	eba0 000a 	sub.w	r0, r0, sl
 8010fa6:	2240      	movs	r2, #64	; 0x40
 8010fa8:	4082      	lsls	r2, r0
 8010faa:	4313      	orrs	r3, r2
 8010fac:	3401      	adds	r4, #1
 8010fae:	9304      	str	r3, [sp, #16]
 8010fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fb4:	4825      	ldr	r0, [pc, #148]	; (801104c <_svfiprintf_r+0x1ec>)
 8010fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fba:	2206      	movs	r2, #6
 8010fbc:	f7ef f920 	bl	8000200 <memchr>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d038      	beq.n	8011036 <_svfiprintf_r+0x1d6>
 8010fc4:	4b22      	ldr	r3, [pc, #136]	; (8011050 <_svfiprintf_r+0x1f0>)
 8010fc6:	bb1b      	cbnz	r3, 8011010 <_svfiprintf_r+0x1b0>
 8010fc8:	9b03      	ldr	r3, [sp, #12]
 8010fca:	3307      	adds	r3, #7
 8010fcc:	f023 0307 	bic.w	r3, r3, #7
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	9303      	str	r3, [sp, #12]
 8010fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fd6:	4433      	add	r3, r6
 8010fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8010fda:	e768      	b.n	8010eae <_svfiprintf_r+0x4e>
 8010fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	2001      	movs	r0, #1
 8010fe4:	e7a6      	b.n	8010f34 <_svfiprintf_r+0xd4>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	3401      	adds	r4, #1
 8010fea:	9305      	str	r3, [sp, #20]
 8010fec:	4619      	mov	r1, r3
 8010fee:	f04f 0c0a 	mov.w	ip, #10
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ff8:	3a30      	subs	r2, #48	; 0x30
 8010ffa:	2a09      	cmp	r2, #9
 8010ffc:	d903      	bls.n	8011006 <_svfiprintf_r+0x1a6>
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0c6      	beq.n	8010f90 <_svfiprintf_r+0x130>
 8011002:	9105      	str	r1, [sp, #20]
 8011004:	e7c4      	b.n	8010f90 <_svfiprintf_r+0x130>
 8011006:	fb0c 2101 	mla	r1, ip, r1, r2
 801100a:	4604      	mov	r4, r0
 801100c:	2301      	movs	r3, #1
 801100e:	e7f0      	b.n	8010ff2 <_svfiprintf_r+0x192>
 8011010:	ab03      	add	r3, sp, #12
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	462a      	mov	r2, r5
 8011016:	4b0f      	ldr	r3, [pc, #60]	; (8011054 <_svfiprintf_r+0x1f4>)
 8011018:	a904      	add	r1, sp, #16
 801101a:	4638      	mov	r0, r7
 801101c:	f7fd f8a8 	bl	800e170 <_printf_float>
 8011020:	1c42      	adds	r2, r0, #1
 8011022:	4606      	mov	r6, r0
 8011024:	d1d6      	bne.n	8010fd4 <_svfiprintf_r+0x174>
 8011026:	89ab      	ldrh	r3, [r5, #12]
 8011028:	065b      	lsls	r3, r3, #25
 801102a:	f53f af2d 	bmi.w	8010e88 <_svfiprintf_r+0x28>
 801102e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011030:	b01d      	add	sp, #116	; 0x74
 8011032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011036:	ab03      	add	r3, sp, #12
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	462a      	mov	r2, r5
 801103c:	4b05      	ldr	r3, [pc, #20]	; (8011054 <_svfiprintf_r+0x1f4>)
 801103e:	a904      	add	r1, sp, #16
 8011040:	4638      	mov	r0, r7
 8011042:	f7fd fb39 	bl	800e6b8 <_printf_i>
 8011046:	e7eb      	b.n	8011020 <_svfiprintf_r+0x1c0>
 8011048:	08013854 	.word	0x08013854
 801104c:	0801385e 	.word	0x0801385e
 8011050:	0800e171 	.word	0x0800e171
 8011054:	08010dad 	.word	0x08010dad
 8011058:	0801385a 	.word	0x0801385a

0801105c <_sungetc_r>:
 801105c:	b538      	push	{r3, r4, r5, lr}
 801105e:	1c4b      	adds	r3, r1, #1
 8011060:	4614      	mov	r4, r2
 8011062:	d103      	bne.n	801106c <_sungetc_r+0x10>
 8011064:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011068:	4628      	mov	r0, r5
 801106a:	bd38      	pop	{r3, r4, r5, pc}
 801106c:	8993      	ldrh	r3, [r2, #12]
 801106e:	f023 0320 	bic.w	r3, r3, #32
 8011072:	8193      	strh	r3, [r2, #12]
 8011074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011076:	6852      	ldr	r2, [r2, #4]
 8011078:	b2cd      	uxtb	r5, r1
 801107a:	b18b      	cbz	r3, 80110a0 <_sungetc_r+0x44>
 801107c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801107e:	4293      	cmp	r3, r2
 8011080:	dd08      	ble.n	8011094 <_sungetc_r+0x38>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	1e5a      	subs	r2, r3, #1
 8011086:	6022      	str	r2, [r4, #0]
 8011088:	f803 5c01 	strb.w	r5, [r3, #-1]
 801108c:	6863      	ldr	r3, [r4, #4]
 801108e:	3301      	adds	r3, #1
 8011090:	6063      	str	r3, [r4, #4]
 8011092:	e7e9      	b.n	8011068 <_sungetc_r+0xc>
 8011094:	4621      	mov	r1, r4
 8011096:	f000 fd8e 	bl	8011bb6 <__submore>
 801109a:	2800      	cmp	r0, #0
 801109c:	d0f1      	beq.n	8011082 <_sungetc_r+0x26>
 801109e:	e7e1      	b.n	8011064 <_sungetc_r+0x8>
 80110a0:	6921      	ldr	r1, [r4, #16]
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	b151      	cbz	r1, 80110bc <_sungetc_r+0x60>
 80110a6:	4299      	cmp	r1, r3
 80110a8:	d208      	bcs.n	80110bc <_sungetc_r+0x60>
 80110aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80110ae:	42a9      	cmp	r1, r5
 80110b0:	d104      	bne.n	80110bc <_sungetc_r+0x60>
 80110b2:	3b01      	subs	r3, #1
 80110b4:	3201      	adds	r2, #1
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	6062      	str	r2, [r4, #4]
 80110ba:	e7d5      	b.n	8011068 <_sungetc_r+0xc>
 80110bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80110c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110c4:	6363      	str	r3, [r4, #52]	; 0x34
 80110c6:	2303      	movs	r3, #3
 80110c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80110ca:	4623      	mov	r3, r4
 80110cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80110d0:	6023      	str	r3, [r4, #0]
 80110d2:	2301      	movs	r3, #1
 80110d4:	e7dc      	b.n	8011090 <_sungetc_r+0x34>

080110d6 <__ssrefill_r>:
 80110d6:	b510      	push	{r4, lr}
 80110d8:	460c      	mov	r4, r1
 80110da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80110dc:	b169      	cbz	r1, 80110fa <__ssrefill_r+0x24>
 80110de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110e2:	4299      	cmp	r1, r3
 80110e4:	d001      	beq.n	80110ea <__ssrefill_r+0x14>
 80110e6:	f7fe fde9 	bl	800fcbc <_free_r>
 80110ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110ec:	6063      	str	r3, [r4, #4]
 80110ee:	2000      	movs	r0, #0
 80110f0:	6360      	str	r0, [r4, #52]	; 0x34
 80110f2:	b113      	cbz	r3, 80110fa <__ssrefill_r+0x24>
 80110f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110f6:	6023      	str	r3, [r4, #0]
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	6923      	ldr	r3, [r4, #16]
 80110fc:	6023      	str	r3, [r4, #0]
 80110fe:	2300      	movs	r3, #0
 8011100:	6063      	str	r3, [r4, #4]
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f043 0320 	orr.w	r3, r3, #32
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801110e:	e7f3      	b.n	80110f8 <__ssrefill_r+0x22>

08011110 <__ssvfiscanf_r>:
 8011110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011114:	460c      	mov	r4, r1
 8011116:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801111a:	2100      	movs	r1, #0
 801111c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011120:	49a6      	ldr	r1, [pc, #664]	; (80113bc <__ssvfiscanf_r+0x2ac>)
 8011122:	91a0      	str	r1, [sp, #640]	; 0x280
 8011124:	f10d 0804 	add.w	r8, sp, #4
 8011128:	49a5      	ldr	r1, [pc, #660]	; (80113c0 <__ssvfiscanf_r+0x2b0>)
 801112a:	4fa6      	ldr	r7, [pc, #664]	; (80113c4 <__ssvfiscanf_r+0x2b4>)
 801112c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80113c8 <__ssvfiscanf_r+0x2b8>
 8011130:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011134:	4606      	mov	r6, r0
 8011136:	91a1      	str	r1, [sp, #644]	; 0x284
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	7813      	ldrb	r3, [r2, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	f000 815a 	beq.w	80113f6 <__ssvfiscanf_r+0x2e6>
 8011142:	5cf9      	ldrb	r1, [r7, r3]
 8011144:	f011 0108 	ands.w	r1, r1, #8
 8011148:	f102 0501 	add.w	r5, r2, #1
 801114c:	d019      	beq.n	8011182 <__ssvfiscanf_r+0x72>
 801114e:	6863      	ldr	r3, [r4, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	dd0f      	ble.n	8011174 <__ssvfiscanf_r+0x64>
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	781a      	ldrb	r2, [r3, #0]
 8011158:	5cba      	ldrb	r2, [r7, r2]
 801115a:	0712      	lsls	r2, r2, #28
 801115c:	d401      	bmi.n	8011162 <__ssvfiscanf_r+0x52>
 801115e:	462a      	mov	r2, r5
 8011160:	e7eb      	b.n	801113a <__ssvfiscanf_r+0x2a>
 8011162:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011164:	3201      	adds	r2, #1
 8011166:	9245      	str	r2, [sp, #276]	; 0x114
 8011168:	6862      	ldr	r2, [r4, #4]
 801116a:	3301      	adds	r3, #1
 801116c:	3a01      	subs	r2, #1
 801116e:	6062      	str	r2, [r4, #4]
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	e7ec      	b.n	801114e <__ssvfiscanf_r+0x3e>
 8011174:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011176:	4621      	mov	r1, r4
 8011178:	4630      	mov	r0, r6
 801117a:	4798      	blx	r3
 801117c:	2800      	cmp	r0, #0
 801117e:	d0e9      	beq.n	8011154 <__ssvfiscanf_r+0x44>
 8011180:	e7ed      	b.n	801115e <__ssvfiscanf_r+0x4e>
 8011182:	2b25      	cmp	r3, #37	; 0x25
 8011184:	d012      	beq.n	80111ac <__ssvfiscanf_r+0x9c>
 8011186:	469a      	mov	sl, r3
 8011188:	6863      	ldr	r3, [r4, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	f340 8091 	ble.w	80112b2 <__ssvfiscanf_r+0x1a2>
 8011190:	6822      	ldr	r2, [r4, #0]
 8011192:	7813      	ldrb	r3, [r2, #0]
 8011194:	4553      	cmp	r3, sl
 8011196:	f040 812e 	bne.w	80113f6 <__ssvfiscanf_r+0x2e6>
 801119a:	6863      	ldr	r3, [r4, #4]
 801119c:	3b01      	subs	r3, #1
 801119e:	6063      	str	r3, [r4, #4]
 80111a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80111a2:	3201      	adds	r2, #1
 80111a4:	3301      	adds	r3, #1
 80111a6:	6022      	str	r2, [r4, #0]
 80111a8:	9345      	str	r3, [sp, #276]	; 0x114
 80111aa:	e7d8      	b.n	801115e <__ssvfiscanf_r+0x4e>
 80111ac:	9141      	str	r1, [sp, #260]	; 0x104
 80111ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80111b0:	7853      	ldrb	r3, [r2, #1]
 80111b2:	2b2a      	cmp	r3, #42	; 0x2a
 80111b4:	bf02      	ittt	eq
 80111b6:	2310      	moveq	r3, #16
 80111b8:	1c95      	addeq	r5, r2, #2
 80111ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80111bc:	220a      	movs	r2, #10
 80111be:	46aa      	mov	sl, r5
 80111c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80111c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80111c8:	2b09      	cmp	r3, #9
 80111ca:	d91c      	bls.n	8011206 <__ssvfiscanf_r+0xf6>
 80111cc:	487e      	ldr	r0, [pc, #504]	; (80113c8 <__ssvfiscanf_r+0x2b8>)
 80111ce:	2203      	movs	r2, #3
 80111d0:	f7ef f816 	bl	8000200 <memchr>
 80111d4:	b138      	cbz	r0, 80111e6 <__ssvfiscanf_r+0xd6>
 80111d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80111d8:	eba0 0009 	sub.w	r0, r0, r9
 80111dc:	2301      	movs	r3, #1
 80111de:	4083      	lsls	r3, r0
 80111e0:	4313      	orrs	r3, r2
 80111e2:	9341      	str	r3, [sp, #260]	; 0x104
 80111e4:	4655      	mov	r5, sl
 80111e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80111ea:	2b78      	cmp	r3, #120	; 0x78
 80111ec:	d806      	bhi.n	80111fc <__ssvfiscanf_r+0xec>
 80111ee:	2b57      	cmp	r3, #87	; 0x57
 80111f0:	d810      	bhi.n	8011214 <__ssvfiscanf_r+0x104>
 80111f2:	2b25      	cmp	r3, #37	; 0x25
 80111f4:	d0c7      	beq.n	8011186 <__ssvfiscanf_r+0x76>
 80111f6:	d857      	bhi.n	80112a8 <__ssvfiscanf_r+0x198>
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d065      	beq.n	80112c8 <__ssvfiscanf_r+0x1b8>
 80111fc:	2303      	movs	r3, #3
 80111fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8011200:	230a      	movs	r3, #10
 8011202:	9342      	str	r3, [sp, #264]	; 0x108
 8011204:	e076      	b.n	80112f4 <__ssvfiscanf_r+0x1e4>
 8011206:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011208:	fb02 1103 	mla	r1, r2, r3, r1
 801120c:	3930      	subs	r1, #48	; 0x30
 801120e:	9143      	str	r1, [sp, #268]	; 0x10c
 8011210:	4655      	mov	r5, sl
 8011212:	e7d4      	b.n	80111be <__ssvfiscanf_r+0xae>
 8011214:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011218:	2a20      	cmp	r2, #32
 801121a:	d8ef      	bhi.n	80111fc <__ssvfiscanf_r+0xec>
 801121c:	a101      	add	r1, pc, #4	; (adr r1, 8011224 <__ssvfiscanf_r+0x114>)
 801121e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011222:	bf00      	nop
 8011224:	080112d7 	.word	0x080112d7
 8011228:	080111fd 	.word	0x080111fd
 801122c:	080111fd 	.word	0x080111fd
 8011230:	08011335 	.word	0x08011335
 8011234:	080111fd 	.word	0x080111fd
 8011238:	080111fd 	.word	0x080111fd
 801123c:	080111fd 	.word	0x080111fd
 8011240:	080111fd 	.word	0x080111fd
 8011244:	080111fd 	.word	0x080111fd
 8011248:	080111fd 	.word	0x080111fd
 801124c:	080111fd 	.word	0x080111fd
 8011250:	0801134b 	.word	0x0801134b
 8011254:	08011331 	.word	0x08011331
 8011258:	080112af 	.word	0x080112af
 801125c:	080112af 	.word	0x080112af
 8011260:	080112af 	.word	0x080112af
 8011264:	080111fd 	.word	0x080111fd
 8011268:	080112ed 	.word	0x080112ed
 801126c:	080111fd 	.word	0x080111fd
 8011270:	080111fd 	.word	0x080111fd
 8011274:	080111fd 	.word	0x080111fd
 8011278:	080111fd 	.word	0x080111fd
 801127c:	0801135b 	.word	0x0801135b
 8011280:	08011329 	.word	0x08011329
 8011284:	080112cf 	.word	0x080112cf
 8011288:	080111fd 	.word	0x080111fd
 801128c:	080111fd 	.word	0x080111fd
 8011290:	08011357 	.word	0x08011357
 8011294:	080111fd 	.word	0x080111fd
 8011298:	08011331 	.word	0x08011331
 801129c:	080111fd 	.word	0x080111fd
 80112a0:	080111fd 	.word	0x080111fd
 80112a4:	080112d7 	.word	0x080112d7
 80112a8:	3b45      	subs	r3, #69	; 0x45
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d8a6      	bhi.n	80111fc <__ssvfiscanf_r+0xec>
 80112ae:	2305      	movs	r3, #5
 80112b0:	e01f      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 80112b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80112b4:	4621      	mov	r1, r4
 80112b6:	4630      	mov	r0, r6
 80112b8:	4798      	blx	r3
 80112ba:	2800      	cmp	r0, #0
 80112bc:	f43f af68 	beq.w	8011190 <__ssvfiscanf_r+0x80>
 80112c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80112c2:	2800      	cmp	r0, #0
 80112c4:	f040 808d 	bne.w	80113e2 <__ssvfiscanf_r+0x2d2>
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112cc:	e08f      	b.n	80113ee <__ssvfiscanf_r+0x2de>
 80112ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80112d0:	f042 0220 	orr.w	r2, r2, #32
 80112d4:	9241      	str	r2, [sp, #260]	; 0x104
 80112d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80112d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112dc:	9241      	str	r2, [sp, #260]	; 0x104
 80112de:	2210      	movs	r2, #16
 80112e0:	2b6f      	cmp	r3, #111	; 0x6f
 80112e2:	9242      	str	r2, [sp, #264]	; 0x108
 80112e4:	bf34      	ite	cc
 80112e6:	2303      	movcc	r3, #3
 80112e8:	2304      	movcs	r3, #4
 80112ea:	e002      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 80112ec:	2300      	movs	r3, #0
 80112ee:	9342      	str	r3, [sp, #264]	; 0x108
 80112f0:	2303      	movs	r3, #3
 80112f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80112f4:	6863      	ldr	r3, [r4, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	dd3d      	ble.n	8011376 <__ssvfiscanf_r+0x266>
 80112fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80112fc:	0659      	lsls	r1, r3, #25
 80112fe:	d404      	bmi.n	801130a <__ssvfiscanf_r+0x1fa>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	781a      	ldrb	r2, [r3, #0]
 8011304:	5cba      	ldrb	r2, [r7, r2]
 8011306:	0712      	lsls	r2, r2, #28
 8011308:	d43c      	bmi.n	8011384 <__ssvfiscanf_r+0x274>
 801130a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801130c:	2b02      	cmp	r3, #2
 801130e:	dc4b      	bgt.n	80113a8 <__ssvfiscanf_r+0x298>
 8011310:	466b      	mov	r3, sp
 8011312:	4622      	mov	r2, r4
 8011314:	a941      	add	r1, sp, #260	; 0x104
 8011316:	4630      	mov	r0, r6
 8011318:	f000 f9b6 	bl	8011688 <_scanf_chars>
 801131c:	2801      	cmp	r0, #1
 801131e:	d06a      	beq.n	80113f6 <__ssvfiscanf_r+0x2e6>
 8011320:	2802      	cmp	r0, #2
 8011322:	f47f af1c 	bne.w	801115e <__ssvfiscanf_r+0x4e>
 8011326:	e7cb      	b.n	80112c0 <__ssvfiscanf_r+0x1b0>
 8011328:	2308      	movs	r3, #8
 801132a:	9342      	str	r3, [sp, #264]	; 0x108
 801132c:	2304      	movs	r3, #4
 801132e:	e7e0      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 8011330:	220a      	movs	r2, #10
 8011332:	e7d5      	b.n	80112e0 <__ssvfiscanf_r+0x1d0>
 8011334:	4629      	mov	r1, r5
 8011336:	4640      	mov	r0, r8
 8011338:	f000 fc04 	bl	8011b44 <__sccl>
 801133c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801133e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011342:	9341      	str	r3, [sp, #260]	; 0x104
 8011344:	4605      	mov	r5, r0
 8011346:	2301      	movs	r3, #1
 8011348:	e7d3      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 801134a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011350:	9341      	str	r3, [sp, #260]	; 0x104
 8011352:	2300      	movs	r3, #0
 8011354:	e7cd      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 8011356:	2302      	movs	r3, #2
 8011358:	e7cb      	b.n	80112f2 <__ssvfiscanf_r+0x1e2>
 801135a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801135c:	06c3      	lsls	r3, r0, #27
 801135e:	f53f aefe 	bmi.w	801115e <__ssvfiscanf_r+0x4e>
 8011362:	9b00      	ldr	r3, [sp, #0]
 8011364:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011366:	1d19      	adds	r1, r3, #4
 8011368:	9100      	str	r1, [sp, #0]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	07c0      	lsls	r0, r0, #31
 801136e:	bf4c      	ite	mi
 8011370:	801a      	strhmi	r2, [r3, #0]
 8011372:	601a      	strpl	r2, [r3, #0]
 8011374:	e6f3      	b.n	801115e <__ssvfiscanf_r+0x4e>
 8011376:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011378:	4621      	mov	r1, r4
 801137a:	4630      	mov	r0, r6
 801137c:	4798      	blx	r3
 801137e:	2800      	cmp	r0, #0
 8011380:	d0bb      	beq.n	80112fa <__ssvfiscanf_r+0x1ea>
 8011382:	e79d      	b.n	80112c0 <__ssvfiscanf_r+0x1b0>
 8011384:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011386:	3201      	adds	r2, #1
 8011388:	9245      	str	r2, [sp, #276]	; 0x114
 801138a:	6862      	ldr	r2, [r4, #4]
 801138c:	3a01      	subs	r2, #1
 801138e:	2a00      	cmp	r2, #0
 8011390:	6062      	str	r2, [r4, #4]
 8011392:	dd02      	ble.n	801139a <__ssvfiscanf_r+0x28a>
 8011394:	3301      	adds	r3, #1
 8011396:	6023      	str	r3, [r4, #0]
 8011398:	e7b2      	b.n	8011300 <__ssvfiscanf_r+0x1f0>
 801139a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801139c:	4621      	mov	r1, r4
 801139e:	4630      	mov	r0, r6
 80113a0:	4798      	blx	r3
 80113a2:	2800      	cmp	r0, #0
 80113a4:	d0ac      	beq.n	8011300 <__ssvfiscanf_r+0x1f0>
 80113a6:	e78b      	b.n	80112c0 <__ssvfiscanf_r+0x1b0>
 80113a8:	2b04      	cmp	r3, #4
 80113aa:	dc0f      	bgt.n	80113cc <__ssvfiscanf_r+0x2bc>
 80113ac:	466b      	mov	r3, sp
 80113ae:	4622      	mov	r2, r4
 80113b0:	a941      	add	r1, sp, #260	; 0x104
 80113b2:	4630      	mov	r0, r6
 80113b4:	f000 f9c2 	bl	801173c <_scanf_i>
 80113b8:	e7b0      	b.n	801131c <__ssvfiscanf_r+0x20c>
 80113ba:	bf00      	nop
 80113bc:	0801105d 	.word	0x0801105d
 80113c0:	080110d7 	.word	0x080110d7
 80113c4:	080134d1 	.word	0x080134d1
 80113c8:	0801385a 	.word	0x0801385a
 80113cc:	4b0b      	ldr	r3, [pc, #44]	; (80113fc <__ssvfiscanf_r+0x2ec>)
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f43f aec5 	beq.w	801115e <__ssvfiscanf_r+0x4e>
 80113d4:	466b      	mov	r3, sp
 80113d6:	4622      	mov	r2, r4
 80113d8:	a941      	add	r1, sp, #260	; 0x104
 80113da:	4630      	mov	r0, r6
 80113dc:	f3af 8000 	nop.w
 80113e0:	e79c      	b.n	801131c <__ssvfiscanf_r+0x20c>
 80113e2:	89a3      	ldrh	r3, [r4, #12]
 80113e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80113e8:	bf18      	it	ne
 80113ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80113ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80113f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80113f8:	e7f9      	b.n	80113ee <__ssvfiscanf_r+0x2de>
 80113fa:	bf00      	nop
 80113fc:	00000000 	.word	0x00000000

08011400 <__sfputc_r>:
 8011400:	6893      	ldr	r3, [r2, #8]
 8011402:	3b01      	subs	r3, #1
 8011404:	2b00      	cmp	r3, #0
 8011406:	b410      	push	{r4}
 8011408:	6093      	str	r3, [r2, #8]
 801140a:	da08      	bge.n	801141e <__sfputc_r+0x1e>
 801140c:	6994      	ldr	r4, [r2, #24]
 801140e:	42a3      	cmp	r3, r4
 8011410:	db01      	blt.n	8011416 <__sfputc_r+0x16>
 8011412:	290a      	cmp	r1, #10
 8011414:	d103      	bne.n	801141e <__sfputc_r+0x1e>
 8011416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801141a:	f7fd bc30 	b.w	800ec7e <__swbuf_r>
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	1c58      	adds	r0, r3, #1
 8011422:	6010      	str	r0, [r2, #0]
 8011424:	7019      	strb	r1, [r3, #0]
 8011426:	4608      	mov	r0, r1
 8011428:	f85d 4b04 	ldr.w	r4, [sp], #4
 801142c:	4770      	bx	lr

0801142e <__sfputs_r>:
 801142e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011430:	4606      	mov	r6, r0
 8011432:	460f      	mov	r7, r1
 8011434:	4614      	mov	r4, r2
 8011436:	18d5      	adds	r5, r2, r3
 8011438:	42ac      	cmp	r4, r5
 801143a:	d101      	bne.n	8011440 <__sfputs_r+0x12>
 801143c:	2000      	movs	r0, #0
 801143e:	e007      	b.n	8011450 <__sfputs_r+0x22>
 8011440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011444:	463a      	mov	r2, r7
 8011446:	4630      	mov	r0, r6
 8011448:	f7ff ffda 	bl	8011400 <__sfputc_r>
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	d1f3      	bne.n	8011438 <__sfputs_r+0xa>
 8011450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011454 <_vfiprintf_r>:
 8011454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011458:	460d      	mov	r5, r1
 801145a:	b09d      	sub	sp, #116	; 0x74
 801145c:	4614      	mov	r4, r2
 801145e:	4698      	mov	r8, r3
 8011460:	4606      	mov	r6, r0
 8011462:	b118      	cbz	r0, 801146c <_vfiprintf_r+0x18>
 8011464:	6a03      	ldr	r3, [r0, #32]
 8011466:	b90b      	cbnz	r3, 801146c <_vfiprintf_r+0x18>
 8011468:	f7fd fad4 	bl	800ea14 <__sinit>
 801146c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801146e:	07d9      	lsls	r1, r3, #31
 8011470:	d405      	bmi.n	801147e <_vfiprintf_r+0x2a>
 8011472:	89ab      	ldrh	r3, [r5, #12]
 8011474:	059a      	lsls	r2, r3, #22
 8011476:	d402      	bmi.n	801147e <_vfiprintf_r+0x2a>
 8011478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801147a:	f7fd fd8a 	bl	800ef92 <__retarget_lock_acquire_recursive>
 801147e:	89ab      	ldrh	r3, [r5, #12]
 8011480:	071b      	lsls	r3, r3, #28
 8011482:	d501      	bpl.n	8011488 <_vfiprintf_r+0x34>
 8011484:	692b      	ldr	r3, [r5, #16]
 8011486:	b99b      	cbnz	r3, 80114b0 <_vfiprintf_r+0x5c>
 8011488:	4629      	mov	r1, r5
 801148a:	4630      	mov	r0, r6
 801148c:	f7fd fc34 	bl	800ecf8 <__swsetup_r>
 8011490:	b170      	cbz	r0, 80114b0 <_vfiprintf_r+0x5c>
 8011492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011494:	07dc      	lsls	r4, r3, #31
 8011496:	d504      	bpl.n	80114a2 <_vfiprintf_r+0x4e>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801149c:	b01d      	add	sp, #116	; 0x74
 801149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a2:	89ab      	ldrh	r3, [r5, #12]
 80114a4:	0598      	lsls	r0, r3, #22
 80114a6:	d4f7      	bmi.n	8011498 <_vfiprintf_r+0x44>
 80114a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114aa:	f7fd fd73 	bl	800ef94 <__retarget_lock_release_recursive>
 80114ae:	e7f3      	b.n	8011498 <_vfiprintf_r+0x44>
 80114b0:	2300      	movs	r3, #0
 80114b2:	9309      	str	r3, [sp, #36]	; 0x24
 80114b4:	2320      	movs	r3, #32
 80114b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80114be:	2330      	movs	r3, #48	; 0x30
 80114c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011674 <_vfiprintf_r+0x220>
 80114c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114c8:	f04f 0901 	mov.w	r9, #1
 80114cc:	4623      	mov	r3, r4
 80114ce:	469a      	mov	sl, r3
 80114d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114d4:	b10a      	cbz	r2, 80114da <_vfiprintf_r+0x86>
 80114d6:	2a25      	cmp	r2, #37	; 0x25
 80114d8:	d1f9      	bne.n	80114ce <_vfiprintf_r+0x7a>
 80114da:	ebba 0b04 	subs.w	fp, sl, r4
 80114de:	d00b      	beq.n	80114f8 <_vfiprintf_r+0xa4>
 80114e0:	465b      	mov	r3, fp
 80114e2:	4622      	mov	r2, r4
 80114e4:	4629      	mov	r1, r5
 80114e6:	4630      	mov	r0, r6
 80114e8:	f7ff ffa1 	bl	801142e <__sfputs_r>
 80114ec:	3001      	adds	r0, #1
 80114ee:	f000 80a9 	beq.w	8011644 <_vfiprintf_r+0x1f0>
 80114f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114f4:	445a      	add	r2, fp
 80114f6:	9209      	str	r2, [sp, #36]	; 0x24
 80114f8:	f89a 3000 	ldrb.w	r3, [sl]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f000 80a1 	beq.w	8011644 <_vfiprintf_r+0x1f0>
 8011502:	2300      	movs	r3, #0
 8011504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801150c:	f10a 0a01 	add.w	sl, sl, #1
 8011510:	9304      	str	r3, [sp, #16]
 8011512:	9307      	str	r3, [sp, #28]
 8011514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011518:	931a      	str	r3, [sp, #104]	; 0x68
 801151a:	4654      	mov	r4, sl
 801151c:	2205      	movs	r2, #5
 801151e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011522:	4854      	ldr	r0, [pc, #336]	; (8011674 <_vfiprintf_r+0x220>)
 8011524:	f7ee fe6c 	bl	8000200 <memchr>
 8011528:	9a04      	ldr	r2, [sp, #16]
 801152a:	b9d8      	cbnz	r0, 8011564 <_vfiprintf_r+0x110>
 801152c:	06d1      	lsls	r1, r2, #27
 801152e:	bf44      	itt	mi
 8011530:	2320      	movmi	r3, #32
 8011532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011536:	0713      	lsls	r3, r2, #28
 8011538:	bf44      	itt	mi
 801153a:	232b      	movmi	r3, #43	; 0x2b
 801153c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011540:	f89a 3000 	ldrb.w	r3, [sl]
 8011544:	2b2a      	cmp	r3, #42	; 0x2a
 8011546:	d015      	beq.n	8011574 <_vfiprintf_r+0x120>
 8011548:	9a07      	ldr	r2, [sp, #28]
 801154a:	4654      	mov	r4, sl
 801154c:	2000      	movs	r0, #0
 801154e:	f04f 0c0a 	mov.w	ip, #10
 8011552:	4621      	mov	r1, r4
 8011554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011558:	3b30      	subs	r3, #48	; 0x30
 801155a:	2b09      	cmp	r3, #9
 801155c:	d94d      	bls.n	80115fa <_vfiprintf_r+0x1a6>
 801155e:	b1b0      	cbz	r0, 801158e <_vfiprintf_r+0x13a>
 8011560:	9207      	str	r2, [sp, #28]
 8011562:	e014      	b.n	801158e <_vfiprintf_r+0x13a>
 8011564:	eba0 0308 	sub.w	r3, r0, r8
 8011568:	fa09 f303 	lsl.w	r3, r9, r3
 801156c:	4313      	orrs	r3, r2
 801156e:	9304      	str	r3, [sp, #16]
 8011570:	46a2      	mov	sl, r4
 8011572:	e7d2      	b.n	801151a <_vfiprintf_r+0xc6>
 8011574:	9b03      	ldr	r3, [sp, #12]
 8011576:	1d19      	adds	r1, r3, #4
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	9103      	str	r1, [sp, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	bfbb      	ittet	lt
 8011580:	425b      	neglt	r3, r3
 8011582:	f042 0202 	orrlt.w	r2, r2, #2
 8011586:	9307      	strge	r3, [sp, #28]
 8011588:	9307      	strlt	r3, [sp, #28]
 801158a:	bfb8      	it	lt
 801158c:	9204      	strlt	r2, [sp, #16]
 801158e:	7823      	ldrb	r3, [r4, #0]
 8011590:	2b2e      	cmp	r3, #46	; 0x2e
 8011592:	d10c      	bne.n	80115ae <_vfiprintf_r+0x15a>
 8011594:	7863      	ldrb	r3, [r4, #1]
 8011596:	2b2a      	cmp	r3, #42	; 0x2a
 8011598:	d134      	bne.n	8011604 <_vfiprintf_r+0x1b0>
 801159a:	9b03      	ldr	r3, [sp, #12]
 801159c:	1d1a      	adds	r2, r3, #4
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	9203      	str	r2, [sp, #12]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	bfb8      	it	lt
 80115a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80115aa:	3402      	adds	r4, #2
 80115ac:	9305      	str	r3, [sp, #20]
 80115ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011684 <_vfiprintf_r+0x230>
 80115b2:	7821      	ldrb	r1, [r4, #0]
 80115b4:	2203      	movs	r2, #3
 80115b6:	4650      	mov	r0, sl
 80115b8:	f7ee fe22 	bl	8000200 <memchr>
 80115bc:	b138      	cbz	r0, 80115ce <_vfiprintf_r+0x17a>
 80115be:	9b04      	ldr	r3, [sp, #16]
 80115c0:	eba0 000a 	sub.w	r0, r0, sl
 80115c4:	2240      	movs	r2, #64	; 0x40
 80115c6:	4082      	lsls	r2, r0
 80115c8:	4313      	orrs	r3, r2
 80115ca:	3401      	adds	r4, #1
 80115cc:	9304      	str	r3, [sp, #16]
 80115ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115d2:	4829      	ldr	r0, [pc, #164]	; (8011678 <_vfiprintf_r+0x224>)
 80115d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115d8:	2206      	movs	r2, #6
 80115da:	f7ee fe11 	bl	8000200 <memchr>
 80115de:	2800      	cmp	r0, #0
 80115e0:	d03f      	beq.n	8011662 <_vfiprintf_r+0x20e>
 80115e2:	4b26      	ldr	r3, [pc, #152]	; (801167c <_vfiprintf_r+0x228>)
 80115e4:	bb1b      	cbnz	r3, 801162e <_vfiprintf_r+0x1da>
 80115e6:	9b03      	ldr	r3, [sp, #12]
 80115e8:	3307      	adds	r3, #7
 80115ea:	f023 0307 	bic.w	r3, r3, #7
 80115ee:	3308      	adds	r3, #8
 80115f0:	9303      	str	r3, [sp, #12]
 80115f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f4:	443b      	add	r3, r7
 80115f6:	9309      	str	r3, [sp, #36]	; 0x24
 80115f8:	e768      	b.n	80114cc <_vfiprintf_r+0x78>
 80115fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80115fe:	460c      	mov	r4, r1
 8011600:	2001      	movs	r0, #1
 8011602:	e7a6      	b.n	8011552 <_vfiprintf_r+0xfe>
 8011604:	2300      	movs	r3, #0
 8011606:	3401      	adds	r4, #1
 8011608:	9305      	str	r3, [sp, #20]
 801160a:	4619      	mov	r1, r3
 801160c:	f04f 0c0a 	mov.w	ip, #10
 8011610:	4620      	mov	r0, r4
 8011612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011616:	3a30      	subs	r2, #48	; 0x30
 8011618:	2a09      	cmp	r2, #9
 801161a:	d903      	bls.n	8011624 <_vfiprintf_r+0x1d0>
 801161c:	2b00      	cmp	r3, #0
 801161e:	d0c6      	beq.n	80115ae <_vfiprintf_r+0x15a>
 8011620:	9105      	str	r1, [sp, #20]
 8011622:	e7c4      	b.n	80115ae <_vfiprintf_r+0x15a>
 8011624:	fb0c 2101 	mla	r1, ip, r1, r2
 8011628:	4604      	mov	r4, r0
 801162a:	2301      	movs	r3, #1
 801162c:	e7f0      	b.n	8011610 <_vfiprintf_r+0x1bc>
 801162e:	ab03      	add	r3, sp, #12
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	462a      	mov	r2, r5
 8011634:	4b12      	ldr	r3, [pc, #72]	; (8011680 <_vfiprintf_r+0x22c>)
 8011636:	a904      	add	r1, sp, #16
 8011638:	4630      	mov	r0, r6
 801163a:	f7fc fd99 	bl	800e170 <_printf_float>
 801163e:	4607      	mov	r7, r0
 8011640:	1c78      	adds	r0, r7, #1
 8011642:	d1d6      	bne.n	80115f2 <_vfiprintf_r+0x19e>
 8011644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011646:	07d9      	lsls	r1, r3, #31
 8011648:	d405      	bmi.n	8011656 <_vfiprintf_r+0x202>
 801164a:	89ab      	ldrh	r3, [r5, #12]
 801164c:	059a      	lsls	r2, r3, #22
 801164e:	d402      	bmi.n	8011656 <_vfiprintf_r+0x202>
 8011650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011652:	f7fd fc9f 	bl	800ef94 <__retarget_lock_release_recursive>
 8011656:	89ab      	ldrh	r3, [r5, #12]
 8011658:	065b      	lsls	r3, r3, #25
 801165a:	f53f af1d 	bmi.w	8011498 <_vfiprintf_r+0x44>
 801165e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011660:	e71c      	b.n	801149c <_vfiprintf_r+0x48>
 8011662:	ab03      	add	r3, sp, #12
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	462a      	mov	r2, r5
 8011668:	4b05      	ldr	r3, [pc, #20]	; (8011680 <_vfiprintf_r+0x22c>)
 801166a:	a904      	add	r1, sp, #16
 801166c:	4630      	mov	r0, r6
 801166e:	f7fd f823 	bl	800e6b8 <_printf_i>
 8011672:	e7e4      	b.n	801163e <_vfiprintf_r+0x1ea>
 8011674:	08013854 	.word	0x08013854
 8011678:	0801385e 	.word	0x0801385e
 801167c:	0800e171 	.word	0x0800e171
 8011680:	0801142f 	.word	0x0801142f
 8011684:	0801385a 	.word	0x0801385a

08011688 <_scanf_chars>:
 8011688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801168c:	4615      	mov	r5, r2
 801168e:	688a      	ldr	r2, [r1, #8]
 8011690:	4680      	mov	r8, r0
 8011692:	460c      	mov	r4, r1
 8011694:	b932      	cbnz	r2, 80116a4 <_scanf_chars+0x1c>
 8011696:	698a      	ldr	r2, [r1, #24]
 8011698:	2a00      	cmp	r2, #0
 801169a:	bf0c      	ite	eq
 801169c:	2201      	moveq	r2, #1
 801169e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80116a2:	608a      	str	r2, [r1, #8]
 80116a4:	6822      	ldr	r2, [r4, #0]
 80116a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011738 <_scanf_chars+0xb0>
 80116aa:	06d1      	lsls	r1, r2, #27
 80116ac:	bf5f      	itttt	pl
 80116ae:	681a      	ldrpl	r2, [r3, #0]
 80116b0:	1d11      	addpl	r1, r2, #4
 80116b2:	6019      	strpl	r1, [r3, #0]
 80116b4:	6816      	ldrpl	r6, [r2, #0]
 80116b6:	2700      	movs	r7, #0
 80116b8:	69a0      	ldr	r0, [r4, #24]
 80116ba:	b188      	cbz	r0, 80116e0 <_scanf_chars+0x58>
 80116bc:	2801      	cmp	r0, #1
 80116be:	d107      	bne.n	80116d0 <_scanf_chars+0x48>
 80116c0:	682a      	ldr	r2, [r5, #0]
 80116c2:	7811      	ldrb	r1, [r2, #0]
 80116c4:	6962      	ldr	r2, [r4, #20]
 80116c6:	5c52      	ldrb	r2, [r2, r1]
 80116c8:	b952      	cbnz	r2, 80116e0 <_scanf_chars+0x58>
 80116ca:	2f00      	cmp	r7, #0
 80116cc:	d031      	beq.n	8011732 <_scanf_chars+0xaa>
 80116ce:	e022      	b.n	8011716 <_scanf_chars+0x8e>
 80116d0:	2802      	cmp	r0, #2
 80116d2:	d120      	bne.n	8011716 <_scanf_chars+0x8e>
 80116d4:	682b      	ldr	r3, [r5, #0]
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80116dc:	071b      	lsls	r3, r3, #28
 80116de:	d41a      	bmi.n	8011716 <_scanf_chars+0x8e>
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	06da      	lsls	r2, r3, #27
 80116e4:	bf5e      	ittt	pl
 80116e6:	682b      	ldrpl	r3, [r5, #0]
 80116e8:	781b      	ldrbpl	r3, [r3, #0]
 80116ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 80116ee:	682a      	ldr	r2, [r5, #0]
 80116f0:	686b      	ldr	r3, [r5, #4]
 80116f2:	3201      	adds	r2, #1
 80116f4:	602a      	str	r2, [r5, #0]
 80116f6:	68a2      	ldr	r2, [r4, #8]
 80116f8:	3b01      	subs	r3, #1
 80116fa:	3a01      	subs	r2, #1
 80116fc:	606b      	str	r3, [r5, #4]
 80116fe:	3701      	adds	r7, #1
 8011700:	60a2      	str	r2, [r4, #8]
 8011702:	b142      	cbz	r2, 8011716 <_scanf_chars+0x8e>
 8011704:	2b00      	cmp	r3, #0
 8011706:	dcd7      	bgt.n	80116b8 <_scanf_chars+0x30>
 8011708:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801170c:	4629      	mov	r1, r5
 801170e:	4640      	mov	r0, r8
 8011710:	4798      	blx	r3
 8011712:	2800      	cmp	r0, #0
 8011714:	d0d0      	beq.n	80116b8 <_scanf_chars+0x30>
 8011716:	6823      	ldr	r3, [r4, #0]
 8011718:	f013 0310 	ands.w	r3, r3, #16
 801171c:	d105      	bne.n	801172a <_scanf_chars+0xa2>
 801171e:	68e2      	ldr	r2, [r4, #12]
 8011720:	3201      	adds	r2, #1
 8011722:	60e2      	str	r2, [r4, #12]
 8011724:	69a2      	ldr	r2, [r4, #24]
 8011726:	b102      	cbz	r2, 801172a <_scanf_chars+0xa2>
 8011728:	7033      	strb	r3, [r6, #0]
 801172a:	6923      	ldr	r3, [r4, #16]
 801172c:	443b      	add	r3, r7
 801172e:	6123      	str	r3, [r4, #16]
 8011730:	2000      	movs	r0, #0
 8011732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011736:	bf00      	nop
 8011738:	080134d1 	.word	0x080134d1

0801173c <_scanf_i>:
 801173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011740:	4698      	mov	r8, r3
 8011742:	4b74      	ldr	r3, [pc, #464]	; (8011914 <_scanf_i+0x1d8>)
 8011744:	460c      	mov	r4, r1
 8011746:	4682      	mov	sl, r0
 8011748:	4616      	mov	r6, r2
 801174a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801174e:	b087      	sub	sp, #28
 8011750:	ab03      	add	r3, sp, #12
 8011752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011756:	4b70      	ldr	r3, [pc, #448]	; (8011918 <_scanf_i+0x1dc>)
 8011758:	69a1      	ldr	r1, [r4, #24]
 801175a:	4a70      	ldr	r2, [pc, #448]	; (801191c <_scanf_i+0x1e0>)
 801175c:	2903      	cmp	r1, #3
 801175e:	bf18      	it	ne
 8011760:	461a      	movne	r2, r3
 8011762:	68a3      	ldr	r3, [r4, #8]
 8011764:	9201      	str	r2, [sp, #4]
 8011766:	1e5a      	subs	r2, r3, #1
 8011768:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801176c:	bf88      	it	hi
 801176e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011772:	4627      	mov	r7, r4
 8011774:	bf82      	ittt	hi
 8011776:	eb03 0905 	addhi.w	r9, r3, r5
 801177a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801177e:	60a3      	strhi	r3, [r4, #8]
 8011780:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011784:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011788:	bf98      	it	ls
 801178a:	f04f 0900 	movls.w	r9, #0
 801178e:	6023      	str	r3, [r4, #0]
 8011790:	463d      	mov	r5, r7
 8011792:	f04f 0b00 	mov.w	fp, #0
 8011796:	6831      	ldr	r1, [r6, #0]
 8011798:	ab03      	add	r3, sp, #12
 801179a:	7809      	ldrb	r1, [r1, #0]
 801179c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80117a0:	2202      	movs	r2, #2
 80117a2:	f7ee fd2d 	bl	8000200 <memchr>
 80117a6:	b328      	cbz	r0, 80117f4 <_scanf_i+0xb8>
 80117a8:	f1bb 0f01 	cmp.w	fp, #1
 80117ac:	d159      	bne.n	8011862 <_scanf_i+0x126>
 80117ae:	6862      	ldr	r2, [r4, #4]
 80117b0:	b92a      	cbnz	r2, 80117be <_scanf_i+0x82>
 80117b2:	6822      	ldr	r2, [r4, #0]
 80117b4:	2308      	movs	r3, #8
 80117b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80117ba:	6063      	str	r3, [r4, #4]
 80117bc:	6022      	str	r2, [r4, #0]
 80117be:	6822      	ldr	r2, [r4, #0]
 80117c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80117c4:	6022      	str	r2, [r4, #0]
 80117c6:	68a2      	ldr	r2, [r4, #8]
 80117c8:	1e51      	subs	r1, r2, #1
 80117ca:	60a1      	str	r1, [r4, #8]
 80117cc:	b192      	cbz	r2, 80117f4 <_scanf_i+0xb8>
 80117ce:	6832      	ldr	r2, [r6, #0]
 80117d0:	1c51      	adds	r1, r2, #1
 80117d2:	6031      	str	r1, [r6, #0]
 80117d4:	7812      	ldrb	r2, [r2, #0]
 80117d6:	f805 2b01 	strb.w	r2, [r5], #1
 80117da:	6872      	ldr	r2, [r6, #4]
 80117dc:	3a01      	subs	r2, #1
 80117de:	2a00      	cmp	r2, #0
 80117e0:	6072      	str	r2, [r6, #4]
 80117e2:	dc07      	bgt.n	80117f4 <_scanf_i+0xb8>
 80117e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80117e8:	4631      	mov	r1, r6
 80117ea:	4650      	mov	r0, sl
 80117ec:	4790      	blx	r2
 80117ee:	2800      	cmp	r0, #0
 80117f0:	f040 8085 	bne.w	80118fe <_scanf_i+0x1c2>
 80117f4:	f10b 0b01 	add.w	fp, fp, #1
 80117f8:	f1bb 0f03 	cmp.w	fp, #3
 80117fc:	d1cb      	bne.n	8011796 <_scanf_i+0x5a>
 80117fe:	6863      	ldr	r3, [r4, #4]
 8011800:	b90b      	cbnz	r3, 8011806 <_scanf_i+0xca>
 8011802:	230a      	movs	r3, #10
 8011804:	6063      	str	r3, [r4, #4]
 8011806:	6863      	ldr	r3, [r4, #4]
 8011808:	4945      	ldr	r1, [pc, #276]	; (8011920 <_scanf_i+0x1e4>)
 801180a:	6960      	ldr	r0, [r4, #20]
 801180c:	1ac9      	subs	r1, r1, r3
 801180e:	f000 f999 	bl	8011b44 <__sccl>
 8011812:	f04f 0b00 	mov.w	fp, #0
 8011816:	68a3      	ldr	r3, [r4, #8]
 8011818:	6822      	ldr	r2, [r4, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d03d      	beq.n	801189a <_scanf_i+0x15e>
 801181e:	6831      	ldr	r1, [r6, #0]
 8011820:	6960      	ldr	r0, [r4, #20]
 8011822:	f891 c000 	ldrb.w	ip, [r1]
 8011826:	f810 000c 	ldrb.w	r0, [r0, ip]
 801182a:	2800      	cmp	r0, #0
 801182c:	d035      	beq.n	801189a <_scanf_i+0x15e>
 801182e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011832:	d124      	bne.n	801187e <_scanf_i+0x142>
 8011834:	0510      	lsls	r0, r2, #20
 8011836:	d522      	bpl.n	801187e <_scanf_i+0x142>
 8011838:	f10b 0b01 	add.w	fp, fp, #1
 801183c:	f1b9 0f00 	cmp.w	r9, #0
 8011840:	d003      	beq.n	801184a <_scanf_i+0x10e>
 8011842:	3301      	adds	r3, #1
 8011844:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011848:	60a3      	str	r3, [r4, #8]
 801184a:	6873      	ldr	r3, [r6, #4]
 801184c:	3b01      	subs	r3, #1
 801184e:	2b00      	cmp	r3, #0
 8011850:	6073      	str	r3, [r6, #4]
 8011852:	dd1b      	ble.n	801188c <_scanf_i+0x150>
 8011854:	6833      	ldr	r3, [r6, #0]
 8011856:	3301      	adds	r3, #1
 8011858:	6033      	str	r3, [r6, #0]
 801185a:	68a3      	ldr	r3, [r4, #8]
 801185c:	3b01      	subs	r3, #1
 801185e:	60a3      	str	r3, [r4, #8]
 8011860:	e7d9      	b.n	8011816 <_scanf_i+0xda>
 8011862:	f1bb 0f02 	cmp.w	fp, #2
 8011866:	d1ae      	bne.n	80117c6 <_scanf_i+0x8a>
 8011868:	6822      	ldr	r2, [r4, #0]
 801186a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801186e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011872:	d1bf      	bne.n	80117f4 <_scanf_i+0xb8>
 8011874:	2310      	movs	r3, #16
 8011876:	6063      	str	r3, [r4, #4]
 8011878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801187c:	e7a2      	b.n	80117c4 <_scanf_i+0x88>
 801187e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011882:	6022      	str	r2, [r4, #0]
 8011884:	780b      	ldrb	r3, [r1, #0]
 8011886:	f805 3b01 	strb.w	r3, [r5], #1
 801188a:	e7de      	b.n	801184a <_scanf_i+0x10e>
 801188c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011890:	4631      	mov	r1, r6
 8011892:	4650      	mov	r0, sl
 8011894:	4798      	blx	r3
 8011896:	2800      	cmp	r0, #0
 8011898:	d0df      	beq.n	801185a <_scanf_i+0x11e>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	05d9      	lsls	r1, r3, #23
 801189e:	d50d      	bpl.n	80118bc <_scanf_i+0x180>
 80118a0:	42bd      	cmp	r5, r7
 80118a2:	d909      	bls.n	80118b8 <_scanf_i+0x17c>
 80118a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80118a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118ac:	4632      	mov	r2, r6
 80118ae:	4650      	mov	r0, sl
 80118b0:	4798      	blx	r3
 80118b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80118b6:	464d      	mov	r5, r9
 80118b8:	42bd      	cmp	r5, r7
 80118ba:	d028      	beq.n	801190e <_scanf_i+0x1d2>
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	f012 0210 	ands.w	r2, r2, #16
 80118c2:	d113      	bne.n	80118ec <_scanf_i+0x1b0>
 80118c4:	702a      	strb	r2, [r5, #0]
 80118c6:	6863      	ldr	r3, [r4, #4]
 80118c8:	9e01      	ldr	r6, [sp, #4]
 80118ca:	4639      	mov	r1, r7
 80118cc:	4650      	mov	r0, sl
 80118ce:	47b0      	blx	r6
 80118d0:	f8d8 3000 	ldr.w	r3, [r8]
 80118d4:	6821      	ldr	r1, [r4, #0]
 80118d6:	1d1a      	adds	r2, r3, #4
 80118d8:	f8c8 2000 	str.w	r2, [r8]
 80118dc:	f011 0f20 	tst.w	r1, #32
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	d00f      	beq.n	8011904 <_scanf_i+0x1c8>
 80118e4:	6018      	str	r0, [r3, #0]
 80118e6:	68e3      	ldr	r3, [r4, #12]
 80118e8:	3301      	adds	r3, #1
 80118ea:	60e3      	str	r3, [r4, #12]
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	1bed      	subs	r5, r5, r7
 80118f0:	445d      	add	r5, fp
 80118f2:	442b      	add	r3, r5
 80118f4:	6123      	str	r3, [r4, #16]
 80118f6:	2000      	movs	r0, #0
 80118f8:	b007      	add	sp, #28
 80118fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118fe:	f04f 0b00 	mov.w	fp, #0
 8011902:	e7ca      	b.n	801189a <_scanf_i+0x15e>
 8011904:	07ca      	lsls	r2, r1, #31
 8011906:	bf4c      	ite	mi
 8011908:	8018      	strhmi	r0, [r3, #0]
 801190a:	6018      	strpl	r0, [r3, #0]
 801190c:	e7eb      	b.n	80118e6 <_scanf_i+0x1aa>
 801190e:	2001      	movs	r0, #1
 8011910:	e7f2      	b.n	80118f8 <_scanf_i+0x1bc>
 8011912:	bf00      	nop
 8011914:	080133b4 	.word	0x080133b4
 8011918:	08011ef9 	.word	0x08011ef9
 801191c:	08011e11 	.word	0x08011e11
 8011920:	08013875 	.word	0x08013875

08011924 <__sflush_r>:
 8011924:	898a      	ldrh	r2, [r1, #12]
 8011926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801192a:	4605      	mov	r5, r0
 801192c:	0710      	lsls	r0, r2, #28
 801192e:	460c      	mov	r4, r1
 8011930:	d458      	bmi.n	80119e4 <__sflush_r+0xc0>
 8011932:	684b      	ldr	r3, [r1, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	dc05      	bgt.n	8011944 <__sflush_r+0x20>
 8011938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801193a:	2b00      	cmp	r3, #0
 801193c:	dc02      	bgt.n	8011944 <__sflush_r+0x20>
 801193e:	2000      	movs	r0, #0
 8011940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011946:	2e00      	cmp	r6, #0
 8011948:	d0f9      	beq.n	801193e <__sflush_r+0x1a>
 801194a:	2300      	movs	r3, #0
 801194c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011950:	682f      	ldr	r7, [r5, #0]
 8011952:	6a21      	ldr	r1, [r4, #32]
 8011954:	602b      	str	r3, [r5, #0]
 8011956:	d032      	beq.n	80119be <__sflush_r+0x9a>
 8011958:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801195a:	89a3      	ldrh	r3, [r4, #12]
 801195c:	075a      	lsls	r2, r3, #29
 801195e:	d505      	bpl.n	801196c <__sflush_r+0x48>
 8011960:	6863      	ldr	r3, [r4, #4]
 8011962:	1ac0      	subs	r0, r0, r3
 8011964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011966:	b10b      	cbz	r3, 801196c <__sflush_r+0x48>
 8011968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801196a:	1ac0      	subs	r0, r0, r3
 801196c:	2300      	movs	r3, #0
 801196e:	4602      	mov	r2, r0
 8011970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011972:	6a21      	ldr	r1, [r4, #32]
 8011974:	4628      	mov	r0, r5
 8011976:	47b0      	blx	r6
 8011978:	1c43      	adds	r3, r0, #1
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	d106      	bne.n	801198c <__sflush_r+0x68>
 801197e:	6829      	ldr	r1, [r5, #0]
 8011980:	291d      	cmp	r1, #29
 8011982:	d82b      	bhi.n	80119dc <__sflush_r+0xb8>
 8011984:	4a29      	ldr	r2, [pc, #164]	; (8011a2c <__sflush_r+0x108>)
 8011986:	410a      	asrs	r2, r1
 8011988:	07d6      	lsls	r6, r2, #31
 801198a:	d427      	bmi.n	80119dc <__sflush_r+0xb8>
 801198c:	2200      	movs	r2, #0
 801198e:	6062      	str	r2, [r4, #4]
 8011990:	04d9      	lsls	r1, r3, #19
 8011992:	6922      	ldr	r2, [r4, #16]
 8011994:	6022      	str	r2, [r4, #0]
 8011996:	d504      	bpl.n	80119a2 <__sflush_r+0x7e>
 8011998:	1c42      	adds	r2, r0, #1
 801199a:	d101      	bne.n	80119a0 <__sflush_r+0x7c>
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	b903      	cbnz	r3, 80119a2 <__sflush_r+0x7e>
 80119a0:	6560      	str	r0, [r4, #84]	; 0x54
 80119a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119a4:	602f      	str	r7, [r5, #0]
 80119a6:	2900      	cmp	r1, #0
 80119a8:	d0c9      	beq.n	801193e <__sflush_r+0x1a>
 80119aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119ae:	4299      	cmp	r1, r3
 80119b0:	d002      	beq.n	80119b8 <__sflush_r+0x94>
 80119b2:	4628      	mov	r0, r5
 80119b4:	f7fe f982 	bl	800fcbc <_free_r>
 80119b8:	2000      	movs	r0, #0
 80119ba:	6360      	str	r0, [r4, #52]	; 0x34
 80119bc:	e7c0      	b.n	8011940 <__sflush_r+0x1c>
 80119be:	2301      	movs	r3, #1
 80119c0:	4628      	mov	r0, r5
 80119c2:	47b0      	blx	r6
 80119c4:	1c41      	adds	r1, r0, #1
 80119c6:	d1c8      	bne.n	801195a <__sflush_r+0x36>
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0c5      	beq.n	801195a <__sflush_r+0x36>
 80119ce:	2b1d      	cmp	r3, #29
 80119d0:	d001      	beq.n	80119d6 <__sflush_r+0xb2>
 80119d2:	2b16      	cmp	r3, #22
 80119d4:	d101      	bne.n	80119da <__sflush_r+0xb6>
 80119d6:	602f      	str	r7, [r5, #0]
 80119d8:	e7b1      	b.n	801193e <__sflush_r+0x1a>
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119e0:	81a3      	strh	r3, [r4, #12]
 80119e2:	e7ad      	b.n	8011940 <__sflush_r+0x1c>
 80119e4:	690f      	ldr	r7, [r1, #16]
 80119e6:	2f00      	cmp	r7, #0
 80119e8:	d0a9      	beq.n	801193e <__sflush_r+0x1a>
 80119ea:	0793      	lsls	r3, r2, #30
 80119ec:	680e      	ldr	r6, [r1, #0]
 80119ee:	bf08      	it	eq
 80119f0:	694b      	ldreq	r3, [r1, #20]
 80119f2:	600f      	str	r7, [r1, #0]
 80119f4:	bf18      	it	ne
 80119f6:	2300      	movne	r3, #0
 80119f8:	eba6 0807 	sub.w	r8, r6, r7
 80119fc:	608b      	str	r3, [r1, #8]
 80119fe:	f1b8 0f00 	cmp.w	r8, #0
 8011a02:	dd9c      	ble.n	801193e <__sflush_r+0x1a>
 8011a04:	6a21      	ldr	r1, [r4, #32]
 8011a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a08:	4643      	mov	r3, r8
 8011a0a:	463a      	mov	r2, r7
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	47b0      	blx	r6
 8011a10:	2800      	cmp	r0, #0
 8011a12:	dc06      	bgt.n	8011a22 <__sflush_r+0xfe>
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a1a:	81a3      	strh	r3, [r4, #12]
 8011a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a20:	e78e      	b.n	8011940 <__sflush_r+0x1c>
 8011a22:	4407      	add	r7, r0
 8011a24:	eba8 0800 	sub.w	r8, r8, r0
 8011a28:	e7e9      	b.n	80119fe <__sflush_r+0xda>
 8011a2a:	bf00      	nop
 8011a2c:	dfbffffe 	.word	0xdfbffffe

08011a30 <_fflush_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	690b      	ldr	r3, [r1, #16]
 8011a34:	4605      	mov	r5, r0
 8011a36:	460c      	mov	r4, r1
 8011a38:	b913      	cbnz	r3, 8011a40 <_fflush_r+0x10>
 8011a3a:	2500      	movs	r5, #0
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	bd38      	pop	{r3, r4, r5, pc}
 8011a40:	b118      	cbz	r0, 8011a4a <_fflush_r+0x1a>
 8011a42:	6a03      	ldr	r3, [r0, #32]
 8011a44:	b90b      	cbnz	r3, 8011a4a <_fflush_r+0x1a>
 8011a46:	f7fc ffe5 	bl	800ea14 <__sinit>
 8011a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d0f3      	beq.n	8011a3a <_fflush_r+0xa>
 8011a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a54:	07d0      	lsls	r0, r2, #31
 8011a56:	d404      	bmi.n	8011a62 <_fflush_r+0x32>
 8011a58:	0599      	lsls	r1, r3, #22
 8011a5a:	d402      	bmi.n	8011a62 <_fflush_r+0x32>
 8011a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a5e:	f7fd fa98 	bl	800ef92 <__retarget_lock_acquire_recursive>
 8011a62:	4628      	mov	r0, r5
 8011a64:	4621      	mov	r1, r4
 8011a66:	f7ff ff5d 	bl	8011924 <__sflush_r>
 8011a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a6c:	07da      	lsls	r2, r3, #31
 8011a6e:	4605      	mov	r5, r0
 8011a70:	d4e4      	bmi.n	8011a3c <_fflush_r+0xc>
 8011a72:	89a3      	ldrh	r3, [r4, #12]
 8011a74:	059b      	lsls	r3, r3, #22
 8011a76:	d4e1      	bmi.n	8011a3c <_fflush_r+0xc>
 8011a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a7a:	f7fd fa8b 	bl	800ef94 <__retarget_lock_release_recursive>
 8011a7e:	e7dd      	b.n	8011a3c <_fflush_r+0xc>

08011a80 <__swhatbuf_r>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	460c      	mov	r4, r1
 8011a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	b096      	sub	sp, #88	; 0x58
 8011a8c:	4615      	mov	r5, r2
 8011a8e:	461e      	mov	r6, r3
 8011a90:	da0d      	bge.n	8011aae <__swhatbuf_r+0x2e>
 8011a92:	89a3      	ldrh	r3, [r4, #12]
 8011a94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011a98:	f04f 0100 	mov.w	r1, #0
 8011a9c:	bf0c      	ite	eq
 8011a9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011aa2:	2340      	movne	r3, #64	; 0x40
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	6031      	str	r1, [r6, #0]
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	b016      	add	sp, #88	; 0x58
 8011aac:	bd70      	pop	{r4, r5, r6, pc}
 8011aae:	466a      	mov	r2, sp
 8011ab0:	f000 f8d6 	bl	8011c60 <_fstat_r>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	dbec      	blt.n	8011a92 <__swhatbuf_r+0x12>
 8011ab8:	9901      	ldr	r1, [sp, #4]
 8011aba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011abe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011ac2:	4259      	negs	r1, r3
 8011ac4:	4159      	adcs	r1, r3
 8011ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011aca:	e7eb      	b.n	8011aa4 <__swhatbuf_r+0x24>

08011acc <__smakebuf_r>:
 8011acc:	898b      	ldrh	r3, [r1, #12]
 8011ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ad0:	079d      	lsls	r5, r3, #30
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	d507      	bpl.n	8011ae8 <__smakebuf_r+0x1c>
 8011ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	6123      	str	r3, [r4, #16]
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	6163      	str	r3, [r4, #20]
 8011ae4:	b002      	add	sp, #8
 8011ae6:	bd70      	pop	{r4, r5, r6, pc}
 8011ae8:	ab01      	add	r3, sp, #4
 8011aea:	466a      	mov	r2, sp
 8011aec:	f7ff ffc8 	bl	8011a80 <__swhatbuf_r>
 8011af0:	9900      	ldr	r1, [sp, #0]
 8011af2:	4605      	mov	r5, r0
 8011af4:	4630      	mov	r0, r6
 8011af6:	f7fb fbbf 	bl	800d278 <_malloc_r>
 8011afa:	b948      	cbnz	r0, 8011b10 <__smakebuf_r+0x44>
 8011afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b00:	059a      	lsls	r2, r3, #22
 8011b02:	d4ef      	bmi.n	8011ae4 <__smakebuf_r+0x18>
 8011b04:	f023 0303 	bic.w	r3, r3, #3
 8011b08:	f043 0302 	orr.w	r3, r3, #2
 8011b0c:	81a3      	strh	r3, [r4, #12]
 8011b0e:	e7e3      	b.n	8011ad8 <__smakebuf_r+0xc>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	6020      	str	r0, [r4, #0]
 8011b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b18:	81a3      	strh	r3, [r4, #12]
 8011b1a:	9b00      	ldr	r3, [sp, #0]
 8011b1c:	6163      	str	r3, [r4, #20]
 8011b1e:	9b01      	ldr	r3, [sp, #4]
 8011b20:	6120      	str	r0, [r4, #16]
 8011b22:	b15b      	cbz	r3, 8011b3c <__smakebuf_r+0x70>
 8011b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f000 f8ab 	bl	8011c84 <_isatty_r>
 8011b2e:	b128      	cbz	r0, 8011b3c <__smakebuf_r+0x70>
 8011b30:	89a3      	ldrh	r3, [r4, #12]
 8011b32:	f023 0303 	bic.w	r3, r3, #3
 8011b36:	f043 0301 	orr.w	r3, r3, #1
 8011b3a:	81a3      	strh	r3, [r4, #12]
 8011b3c:	89a3      	ldrh	r3, [r4, #12]
 8011b3e:	431d      	orrs	r5, r3
 8011b40:	81a5      	strh	r5, [r4, #12]
 8011b42:	e7cf      	b.n	8011ae4 <__smakebuf_r+0x18>

08011b44 <__sccl>:
 8011b44:	b570      	push	{r4, r5, r6, lr}
 8011b46:	780b      	ldrb	r3, [r1, #0]
 8011b48:	4604      	mov	r4, r0
 8011b4a:	2b5e      	cmp	r3, #94	; 0x5e
 8011b4c:	bf0b      	itete	eq
 8011b4e:	784b      	ldrbeq	r3, [r1, #1]
 8011b50:	1c4a      	addne	r2, r1, #1
 8011b52:	1c8a      	addeq	r2, r1, #2
 8011b54:	2100      	movne	r1, #0
 8011b56:	bf08      	it	eq
 8011b58:	2101      	moveq	r1, #1
 8011b5a:	3801      	subs	r0, #1
 8011b5c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011b60:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011b64:	42a8      	cmp	r0, r5
 8011b66:	d1fb      	bne.n	8011b60 <__sccl+0x1c>
 8011b68:	b90b      	cbnz	r3, 8011b6e <__sccl+0x2a>
 8011b6a:	1e50      	subs	r0, r2, #1
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	f081 0101 	eor.w	r1, r1, #1
 8011b72:	54e1      	strb	r1, [r4, r3]
 8011b74:	4610      	mov	r0, r2
 8011b76:	4602      	mov	r2, r0
 8011b78:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b7c:	2d2d      	cmp	r5, #45	; 0x2d
 8011b7e:	d005      	beq.n	8011b8c <__sccl+0x48>
 8011b80:	2d5d      	cmp	r5, #93	; 0x5d
 8011b82:	d016      	beq.n	8011bb2 <__sccl+0x6e>
 8011b84:	2d00      	cmp	r5, #0
 8011b86:	d0f1      	beq.n	8011b6c <__sccl+0x28>
 8011b88:	462b      	mov	r3, r5
 8011b8a:	e7f2      	b.n	8011b72 <__sccl+0x2e>
 8011b8c:	7846      	ldrb	r6, [r0, #1]
 8011b8e:	2e5d      	cmp	r6, #93	; 0x5d
 8011b90:	d0fa      	beq.n	8011b88 <__sccl+0x44>
 8011b92:	42b3      	cmp	r3, r6
 8011b94:	dcf8      	bgt.n	8011b88 <__sccl+0x44>
 8011b96:	3002      	adds	r0, #2
 8011b98:	461a      	mov	r2, r3
 8011b9a:	3201      	adds	r2, #1
 8011b9c:	4296      	cmp	r6, r2
 8011b9e:	54a1      	strb	r1, [r4, r2]
 8011ba0:	dcfb      	bgt.n	8011b9a <__sccl+0x56>
 8011ba2:	1af2      	subs	r2, r6, r3
 8011ba4:	3a01      	subs	r2, #1
 8011ba6:	1c5d      	adds	r5, r3, #1
 8011ba8:	42b3      	cmp	r3, r6
 8011baa:	bfa8      	it	ge
 8011bac:	2200      	movge	r2, #0
 8011bae:	18ab      	adds	r3, r5, r2
 8011bb0:	e7e1      	b.n	8011b76 <__sccl+0x32>
 8011bb2:	4610      	mov	r0, r2
 8011bb4:	e7da      	b.n	8011b6c <__sccl+0x28>

08011bb6 <__submore>:
 8011bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bba:	460c      	mov	r4, r1
 8011bbc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bc2:	4299      	cmp	r1, r3
 8011bc4:	d11d      	bne.n	8011c02 <__submore+0x4c>
 8011bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011bca:	f7fb fb55 	bl	800d278 <_malloc_r>
 8011bce:	b918      	cbnz	r0, 8011bd8 <__submore+0x22>
 8011bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8011bde:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011be2:	6360      	str	r0, [r4, #52]	; 0x34
 8011be4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011be8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011bec:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011bf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011bf4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011bf8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011bfc:	6020      	str	r0, [r4, #0]
 8011bfe:	2000      	movs	r0, #0
 8011c00:	e7e8      	b.n	8011bd4 <__submore+0x1e>
 8011c02:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011c04:	0077      	lsls	r7, r6, #1
 8011c06:	463a      	mov	r2, r7
 8011c08:	f7fb fbca 	bl	800d3a0 <_realloc_r>
 8011c0c:	4605      	mov	r5, r0
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d0de      	beq.n	8011bd0 <__submore+0x1a>
 8011c12:	eb00 0806 	add.w	r8, r0, r6
 8011c16:	4601      	mov	r1, r0
 8011c18:	4632      	mov	r2, r6
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	f7fd f9bb 	bl	800ef96 <memcpy>
 8011c20:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011c24:	f8c4 8000 	str.w	r8, [r4]
 8011c28:	e7e9      	b.n	8011bfe <__submore+0x48>

08011c2a <memmove>:
 8011c2a:	4288      	cmp	r0, r1
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	eb01 0402 	add.w	r4, r1, r2
 8011c32:	d902      	bls.n	8011c3a <memmove+0x10>
 8011c34:	4284      	cmp	r4, r0
 8011c36:	4623      	mov	r3, r4
 8011c38:	d807      	bhi.n	8011c4a <memmove+0x20>
 8011c3a:	1e43      	subs	r3, r0, #1
 8011c3c:	42a1      	cmp	r1, r4
 8011c3e:	d008      	beq.n	8011c52 <memmove+0x28>
 8011c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c48:	e7f8      	b.n	8011c3c <memmove+0x12>
 8011c4a:	4402      	add	r2, r0
 8011c4c:	4601      	mov	r1, r0
 8011c4e:	428a      	cmp	r2, r1
 8011c50:	d100      	bne.n	8011c54 <memmove+0x2a>
 8011c52:	bd10      	pop	{r4, pc}
 8011c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c5c:	e7f7      	b.n	8011c4e <memmove+0x24>
	...

08011c60 <_fstat_r>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4d07      	ldr	r5, [pc, #28]	; (8011c80 <_fstat_r+0x20>)
 8011c64:	2300      	movs	r3, #0
 8011c66:	4604      	mov	r4, r0
 8011c68:	4608      	mov	r0, r1
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	f7f0 fce6 	bl	800263e <_fstat>
 8011c72:	1c43      	adds	r3, r0, #1
 8011c74:	d102      	bne.n	8011c7c <_fstat_r+0x1c>
 8011c76:	682b      	ldr	r3, [r5, #0]
 8011c78:	b103      	cbz	r3, 8011c7c <_fstat_r+0x1c>
 8011c7a:	6023      	str	r3, [r4, #0]
 8011c7c:	bd38      	pop	{r3, r4, r5, pc}
 8011c7e:	bf00      	nop
 8011c80:	20005754 	.word	0x20005754

08011c84 <_isatty_r>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	4d06      	ldr	r5, [pc, #24]	; (8011ca0 <_isatty_r+0x1c>)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	602b      	str	r3, [r5, #0]
 8011c90:	f7f0 fce5 	bl	800265e <_isatty>
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	d102      	bne.n	8011c9e <_isatty_r+0x1a>
 8011c98:	682b      	ldr	r3, [r5, #0]
 8011c9a:	b103      	cbz	r3, 8011c9e <_isatty_r+0x1a>
 8011c9c:	6023      	str	r3, [r4, #0]
 8011c9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ca0:	20005754 	.word	0x20005754

08011ca4 <__assert_func>:
 8011ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ca6:	4614      	mov	r4, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	4b09      	ldr	r3, [pc, #36]	; (8011cd0 <__assert_func+0x2c>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4605      	mov	r5, r0
 8011cb0:	68d8      	ldr	r0, [r3, #12]
 8011cb2:	b14c      	cbz	r4, 8011cc8 <__assert_func+0x24>
 8011cb4:	4b07      	ldr	r3, [pc, #28]	; (8011cd4 <__assert_func+0x30>)
 8011cb6:	9100      	str	r1, [sp, #0]
 8011cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cbc:	4906      	ldr	r1, [pc, #24]	; (8011cd8 <__assert_func+0x34>)
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	f000 f91c 	bl	8011efc <fiprintf>
 8011cc4:	f000 f92c 	bl	8011f20 <abort>
 8011cc8:	4b04      	ldr	r3, [pc, #16]	; (8011cdc <__assert_func+0x38>)
 8011cca:	461c      	mov	r4, r3
 8011ccc:	e7f3      	b.n	8011cb6 <__assert_func+0x12>
 8011cce:	bf00      	nop
 8011cd0:	200002b0 	.word	0x200002b0
 8011cd4:	08013880 	.word	0x08013880
 8011cd8:	0801388d 	.word	0x0801388d
 8011cdc:	080138bb 	.word	0x080138bb

08011ce0 <_calloc_r>:
 8011ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ce2:	fba1 2402 	umull	r2, r4, r1, r2
 8011ce6:	b94c      	cbnz	r4, 8011cfc <_calloc_r+0x1c>
 8011ce8:	4611      	mov	r1, r2
 8011cea:	9201      	str	r2, [sp, #4]
 8011cec:	f7fb fac4 	bl	800d278 <_malloc_r>
 8011cf0:	9a01      	ldr	r2, [sp, #4]
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	b930      	cbnz	r0, 8011d04 <_calloc_r+0x24>
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	b003      	add	sp, #12
 8011cfa:	bd30      	pop	{r4, r5, pc}
 8011cfc:	220c      	movs	r2, #12
 8011cfe:	6002      	str	r2, [r0, #0]
 8011d00:	2500      	movs	r5, #0
 8011d02:	e7f8      	b.n	8011cf6 <_calloc_r+0x16>
 8011d04:	4621      	mov	r1, r4
 8011d06:	f7fd f84f 	bl	800eda8 <memset>
 8011d0a:	e7f4      	b.n	8011cf6 <_calloc_r+0x16>

08011d0c <_strtol_l.constprop.0>:
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d12:	d001      	beq.n	8011d18 <_strtol_l.constprop.0+0xc>
 8011d14:	2b24      	cmp	r3, #36	; 0x24
 8011d16:	d906      	bls.n	8011d26 <_strtol_l.constprop.0+0x1a>
 8011d18:	f7fd f910 	bl	800ef3c <__errno>
 8011d1c:	2316      	movs	r3, #22
 8011d1e:	6003      	str	r3, [r0, #0]
 8011d20:	2000      	movs	r0, #0
 8011d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011e0c <_strtol_l.constprop.0+0x100>
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	462e      	mov	r6, r5
 8011d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011d36:	f017 0708 	ands.w	r7, r7, #8
 8011d3a:	d1f7      	bne.n	8011d2c <_strtol_l.constprop.0+0x20>
 8011d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8011d3e:	d132      	bne.n	8011da6 <_strtol_l.constprop.0+0x9a>
 8011d40:	782c      	ldrb	r4, [r5, #0]
 8011d42:	2701      	movs	r7, #1
 8011d44:	1cb5      	adds	r5, r6, #2
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d05b      	beq.n	8011e02 <_strtol_l.constprop.0+0xf6>
 8011d4a:	2b10      	cmp	r3, #16
 8011d4c:	d109      	bne.n	8011d62 <_strtol_l.constprop.0+0x56>
 8011d4e:	2c30      	cmp	r4, #48	; 0x30
 8011d50:	d107      	bne.n	8011d62 <_strtol_l.constprop.0+0x56>
 8011d52:	782c      	ldrb	r4, [r5, #0]
 8011d54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d58:	2c58      	cmp	r4, #88	; 0x58
 8011d5a:	d14d      	bne.n	8011df8 <_strtol_l.constprop.0+0xec>
 8011d5c:	786c      	ldrb	r4, [r5, #1]
 8011d5e:	2310      	movs	r3, #16
 8011d60:	3502      	adds	r5, #2
 8011d62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011d66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011d6a:	f04f 0e00 	mov.w	lr, #0
 8011d6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011d72:	4676      	mov	r6, lr
 8011d74:	fb03 8a19 	mls	sl, r3, r9, r8
 8011d78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011d7c:	f1bc 0f09 	cmp.w	ip, #9
 8011d80:	d816      	bhi.n	8011db0 <_strtol_l.constprop.0+0xa4>
 8011d82:	4664      	mov	r4, ip
 8011d84:	42a3      	cmp	r3, r4
 8011d86:	dd24      	ble.n	8011dd2 <_strtol_l.constprop.0+0xc6>
 8011d88:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8011d8c:	d008      	beq.n	8011da0 <_strtol_l.constprop.0+0x94>
 8011d8e:	45b1      	cmp	r9, r6
 8011d90:	d31c      	bcc.n	8011dcc <_strtol_l.constprop.0+0xc0>
 8011d92:	d101      	bne.n	8011d98 <_strtol_l.constprop.0+0x8c>
 8011d94:	45a2      	cmp	sl, r4
 8011d96:	db19      	blt.n	8011dcc <_strtol_l.constprop.0+0xc0>
 8011d98:	fb06 4603 	mla	r6, r6, r3, r4
 8011d9c:	f04f 0e01 	mov.w	lr, #1
 8011da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011da4:	e7e8      	b.n	8011d78 <_strtol_l.constprop.0+0x6c>
 8011da6:	2c2b      	cmp	r4, #43	; 0x2b
 8011da8:	bf04      	itt	eq
 8011daa:	782c      	ldrbeq	r4, [r5, #0]
 8011dac:	1cb5      	addeq	r5, r6, #2
 8011dae:	e7ca      	b.n	8011d46 <_strtol_l.constprop.0+0x3a>
 8011db0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011db4:	f1bc 0f19 	cmp.w	ip, #25
 8011db8:	d801      	bhi.n	8011dbe <_strtol_l.constprop.0+0xb2>
 8011dba:	3c37      	subs	r4, #55	; 0x37
 8011dbc:	e7e2      	b.n	8011d84 <_strtol_l.constprop.0+0x78>
 8011dbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011dc2:	f1bc 0f19 	cmp.w	ip, #25
 8011dc6:	d804      	bhi.n	8011dd2 <_strtol_l.constprop.0+0xc6>
 8011dc8:	3c57      	subs	r4, #87	; 0x57
 8011dca:	e7db      	b.n	8011d84 <_strtol_l.constprop.0+0x78>
 8011dcc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8011dd0:	e7e6      	b.n	8011da0 <_strtol_l.constprop.0+0x94>
 8011dd2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8011dd6:	d105      	bne.n	8011de4 <_strtol_l.constprop.0+0xd8>
 8011dd8:	2322      	movs	r3, #34	; 0x22
 8011dda:	6003      	str	r3, [r0, #0]
 8011ddc:	4646      	mov	r6, r8
 8011dde:	b942      	cbnz	r2, 8011df2 <_strtol_l.constprop.0+0xe6>
 8011de0:	4630      	mov	r0, r6
 8011de2:	e79e      	b.n	8011d22 <_strtol_l.constprop.0+0x16>
 8011de4:	b107      	cbz	r7, 8011de8 <_strtol_l.constprop.0+0xdc>
 8011de6:	4276      	negs	r6, r6
 8011de8:	2a00      	cmp	r2, #0
 8011dea:	d0f9      	beq.n	8011de0 <_strtol_l.constprop.0+0xd4>
 8011dec:	f1be 0f00 	cmp.w	lr, #0
 8011df0:	d000      	beq.n	8011df4 <_strtol_l.constprop.0+0xe8>
 8011df2:	1e69      	subs	r1, r5, #1
 8011df4:	6011      	str	r1, [r2, #0]
 8011df6:	e7f3      	b.n	8011de0 <_strtol_l.constprop.0+0xd4>
 8011df8:	2430      	movs	r4, #48	; 0x30
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1b1      	bne.n	8011d62 <_strtol_l.constprop.0+0x56>
 8011dfe:	2308      	movs	r3, #8
 8011e00:	e7af      	b.n	8011d62 <_strtol_l.constprop.0+0x56>
 8011e02:	2c30      	cmp	r4, #48	; 0x30
 8011e04:	d0a5      	beq.n	8011d52 <_strtol_l.constprop.0+0x46>
 8011e06:	230a      	movs	r3, #10
 8011e08:	e7ab      	b.n	8011d62 <_strtol_l.constprop.0+0x56>
 8011e0a:	bf00      	nop
 8011e0c:	080134d1 	.word	0x080134d1

08011e10 <_strtol_r>:
 8011e10:	f7ff bf7c 	b.w	8011d0c <_strtol_l.constprop.0>

08011e14 <_strtoul_l.constprop.0>:
 8011e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e18:	4f36      	ldr	r7, [pc, #216]	; (8011ef4 <_strtoul_l.constprop.0+0xe0>)
 8011e1a:	4686      	mov	lr, r0
 8011e1c:	460d      	mov	r5, r1
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e24:	5d3e      	ldrb	r6, [r7, r4]
 8011e26:	f016 0608 	ands.w	r6, r6, #8
 8011e2a:	d1f8      	bne.n	8011e1e <_strtoul_l.constprop.0+0xa>
 8011e2c:	2c2d      	cmp	r4, #45	; 0x2d
 8011e2e:	d130      	bne.n	8011e92 <_strtoul_l.constprop.0+0x7e>
 8011e30:	782c      	ldrb	r4, [r5, #0]
 8011e32:	2601      	movs	r6, #1
 8011e34:	1c85      	adds	r5, r0, #2
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d057      	beq.n	8011eea <_strtoul_l.constprop.0+0xd6>
 8011e3a:	2b10      	cmp	r3, #16
 8011e3c:	d109      	bne.n	8011e52 <_strtoul_l.constprop.0+0x3e>
 8011e3e:	2c30      	cmp	r4, #48	; 0x30
 8011e40:	d107      	bne.n	8011e52 <_strtoul_l.constprop.0+0x3e>
 8011e42:	7828      	ldrb	r0, [r5, #0]
 8011e44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011e48:	2858      	cmp	r0, #88	; 0x58
 8011e4a:	d149      	bne.n	8011ee0 <_strtoul_l.constprop.0+0xcc>
 8011e4c:	786c      	ldrb	r4, [r5, #1]
 8011e4e:	2310      	movs	r3, #16
 8011e50:	3502      	adds	r5, #2
 8011e52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011e56:	2700      	movs	r7, #0
 8011e58:	fbb8 f8f3 	udiv	r8, r8, r3
 8011e5c:	fb03 f908 	mul.w	r9, r3, r8
 8011e60:	ea6f 0909 	mvn.w	r9, r9
 8011e64:	4638      	mov	r0, r7
 8011e66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011e6a:	f1bc 0f09 	cmp.w	ip, #9
 8011e6e:	d815      	bhi.n	8011e9c <_strtoul_l.constprop.0+0x88>
 8011e70:	4664      	mov	r4, ip
 8011e72:	42a3      	cmp	r3, r4
 8011e74:	dd23      	ble.n	8011ebe <_strtoul_l.constprop.0+0xaa>
 8011e76:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8011e7a:	d007      	beq.n	8011e8c <_strtoul_l.constprop.0+0x78>
 8011e7c:	4580      	cmp	r8, r0
 8011e7e:	d31b      	bcc.n	8011eb8 <_strtoul_l.constprop.0+0xa4>
 8011e80:	d101      	bne.n	8011e86 <_strtoul_l.constprop.0+0x72>
 8011e82:	45a1      	cmp	r9, r4
 8011e84:	db18      	blt.n	8011eb8 <_strtoul_l.constprop.0+0xa4>
 8011e86:	fb00 4003 	mla	r0, r0, r3, r4
 8011e8a:	2701      	movs	r7, #1
 8011e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e90:	e7e9      	b.n	8011e66 <_strtoul_l.constprop.0+0x52>
 8011e92:	2c2b      	cmp	r4, #43	; 0x2b
 8011e94:	bf04      	itt	eq
 8011e96:	782c      	ldrbeq	r4, [r5, #0]
 8011e98:	1c85      	addeq	r5, r0, #2
 8011e9a:	e7cc      	b.n	8011e36 <_strtoul_l.constprop.0+0x22>
 8011e9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011ea0:	f1bc 0f19 	cmp.w	ip, #25
 8011ea4:	d801      	bhi.n	8011eaa <_strtoul_l.constprop.0+0x96>
 8011ea6:	3c37      	subs	r4, #55	; 0x37
 8011ea8:	e7e3      	b.n	8011e72 <_strtoul_l.constprop.0+0x5e>
 8011eaa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011eae:	f1bc 0f19 	cmp.w	ip, #25
 8011eb2:	d804      	bhi.n	8011ebe <_strtoul_l.constprop.0+0xaa>
 8011eb4:	3c57      	subs	r4, #87	; 0x57
 8011eb6:	e7dc      	b.n	8011e72 <_strtoul_l.constprop.0+0x5e>
 8011eb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011ebc:	e7e6      	b.n	8011e8c <_strtoul_l.constprop.0+0x78>
 8011ebe:	1c7b      	adds	r3, r7, #1
 8011ec0:	d106      	bne.n	8011ed0 <_strtoul_l.constprop.0+0xbc>
 8011ec2:	2322      	movs	r3, #34	; 0x22
 8011ec4:	f8ce 3000 	str.w	r3, [lr]
 8011ec8:	4638      	mov	r0, r7
 8011eca:	b932      	cbnz	r2, 8011eda <_strtoul_l.constprop.0+0xc6>
 8011ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ed0:	b106      	cbz	r6, 8011ed4 <_strtoul_l.constprop.0+0xc0>
 8011ed2:	4240      	negs	r0, r0
 8011ed4:	2a00      	cmp	r2, #0
 8011ed6:	d0f9      	beq.n	8011ecc <_strtoul_l.constprop.0+0xb8>
 8011ed8:	b107      	cbz	r7, 8011edc <_strtoul_l.constprop.0+0xc8>
 8011eda:	1e69      	subs	r1, r5, #1
 8011edc:	6011      	str	r1, [r2, #0]
 8011ede:	e7f5      	b.n	8011ecc <_strtoul_l.constprop.0+0xb8>
 8011ee0:	2430      	movs	r4, #48	; 0x30
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1b5      	bne.n	8011e52 <_strtoul_l.constprop.0+0x3e>
 8011ee6:	2308      	movs	r3, #8
 8011ee8:	e7b3      	b.n	8011e52 <_strtoul_l.constprop.0+0x3e>
 8011eea:	2c30      	cmp	r4, #48	; 0x30
 8011eec:	d0a9      	beq.n	8011e42 <_strtoul_l.constprop.0+0x2e>
 8011eee:	230a      	movs	r3, #10
 8011ef0:	e7af      	b.n	8011e52 <_strtoul_l.constprop.0+0x3e>
 8011ef2:	bf00      	nop
 8011ef4:	080134d1 	.word	0x080134d1

08011ef8 <_strtoul_r>:
 8011ef8:	f7ff bf8c 	b.w	8011e14 <_strtoul_l.constprop.0>

08011efc <fiprintf>:
 8011efc:	b40e      	push	{r1, r2, r3}
 8011efe:	b503      	push	{r0, r1, lr}
 8011f00:	4601      	mov	r1, r0
 8011f02:	ab03      	add	r3, sp, #12
 8011f04:	4805      	ldr	r0, [pc, #20]	; (8011f1c <fiprintf+0x20>)
 8011f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f0a:	6800      	ldr	r0, [r0, #0]
 8011f0c:	9301      	str	r3, [sp, #4]
 8011f0e:	f7ff faa1 	bl	8011454 <_vfiprintf_r>
 8011f12:	b002      	add	sp, #8
 8011f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f18:	b003      	add	sp, #12
 8011f1a:	4770      	bx	lr
 8011f1c:	200002b0 	.word	0x200002b0

08011f20 <abort>:
 8011f20:	b508      	push	{r3, lr}
 8011f22:	2006      	movs	r0, #6
 8011f24:	f000 f82c 	bl	8011f80 <raise>
 8011f28:	2001      	movs	r0, #1
 8011f2a:	f7f0 fb55 	bl	80025d8 <_exit>

08011f2e <_raise_r>:
 8011f2e:	291f      	cmp	r1, #31
 8011f30:	b538      	push	{r3, r4, r5, lr}
 8011f32:	4604      	mov	r4, r0
 8011f34:	460d      	mov	r5, r1
 8011f36:	d904      	bls.n	8011f42 <_raise_r+0x14>
 8011f38:	2316      	movs	r3, #22
 8011f3a:	6003      	str	r3, [r0, #0]
 8011f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f40:	bd38      	pop	{r3, r4, r5, pc}
 8011f42:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011f44:	b112      	cbz	r2, 8011f4c <_raise_r+0x1e>
 8011f46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f4a:	b94b      	cbnz	r3, 8011f60 <_raise_r+0x32>
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f000 f831 	bl	8011fb4 <_getpid_r>
 8011f52:	462a      	mov	r2, r5
 8011f54:	4601      	mov	r1, r0
 8011f56:	4620      	mov	r0, r4
 8011f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f5c:	f000 b818 	b.w	8011f90 <_kill_r>
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d00a      	beq.n	8011f7a <_raise_r+0x4c>
 8011f64:	1c59      	adds	r1, r3, #1
 8011f66:	d103      	bne.n	8011f70 <_raise_r+0x42>
 8011f68:	2316      	movs	r3, #22
 8011f6a:	6003      	str	r3, [r0, #0]
 8011f6c:	2001      	movs	r0, #1
 8011f6e:	e7e7      	b.n	8011f40 <_raise_r+0x12>
 8011f70:	2400      	movs	r4, #0
 8011f72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f76:	4628      	mov	r0, r5
 8011f78:	4798      	blx	r3
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e7e0      	b.n	8011f40 <_raise_r+0x12>
	...

08011f80 <raise>:
 8011f80:	4b02      	ldr	r3, [pc, #8]	; (8011f8c <raise+0xc>)
 8011f82:	4601      	mov	r1, r0
 8011f84:	6818      	ldr	r0, [r3, #0]
 8011f86:	f7ff bfd2 	b.w	8011f2e <_raise_r>
 8011f8a:	bf00      	nop
 8011f8c:	200002b0 	.word	0x200002b0

08011f90 <_kill_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d07      	ldr	r5, [pc, #28]	; (8011fb0 <_kill_r+0x20>)
 8011f94:	2300      	movs	r3, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	4611      	mov	r1, r2
 8011f9c:	602b      	str	r3, [r5, #0]
 8011f9e:	f7f0 fb0b 	bl	80025b8 <_kill>
 8011fa2:	1c43      	adds	r3, r0, #1
 8011fa4:	d102      	bne.n	8011fac <_kill_r+0x1c>
 8011fa6:	682b      	ldr	r3, [r5, #0]
 8011fa8:	b103      	cbz	r3, 8011fac <_kill_r+0x1c>
 8011faa:	6023      	str	r3, [r4, #0]
 8011fac:	bd38      	pop	{r3, r4, r5, pc}
 8011fae:	bf00      	nop
 8011fb0:	20005754 	.word	0x20005754

08011fb4 <_getpid_r>:
 8011fb4:	f7f0 baf8 	b.w	80025a8 <_getpid>

08011fb8 <cos>:
 8011fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fba:	ec53 2b10 	vmov	r2, r3, d0
 8011fbe:	4826      	ldr	r0, [pc, #152]	; (8012058 <cos+0xa0>)
 8011fc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011fc4:	4281      	cmp	r1, r0
 8011fc6:	dc06      	bgt.n	8011fd6 <cos+0x1e>
 8011fc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012050 <cos+0x98>
 8011fcc:	b005      	add	sp, #20
 8011fce:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fd2:	f000 b8f1 	b.w	80121b8 <__kernel_cos>
 8011fd6:	4821      	ldr	r0, [pc, #132]	; (801205c <cos+0xa4>)
 8011fd8:	4281      	cmp	r1, r0
 8011fda:	dd09      	ble.n	8011ff0 <cos+0x38>
 8011fdc:	ee10 0a10 	vmov	r0, s0
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	f7ee f969 	bl	80002b8 <__aeabi_dsub>
 8011fe6:	ec41 0b10 	vmov	d0, r0, r1
 8011fea:	b005      	add	sp, #20
 8011fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ff0:	4668      	mov	r0, sp
 8011ff2:	f000 fa69 	bl	80124c8 <__ieee754_rem_pio2>
 8011ff6:	f000 0003 	and.w	r0, r0, #3
 8011ffa:	2801      	cmp	r0, #1
 8011ffc:	d00b      	beq.n	8012016 <cos+0x5e>
 8011ffe:	2802      	cmp	r0, #2
 8012000:	d016      	beq.n	8012030 <cos+0x78>
 8012002:	b9e0      	cbnz	r0, 801203e <cos+0x86>
 8012004:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012008:	ed9d 0b00 	vldr	d0, [sp]
 801200c:	f000 f8d4 	bl	80121b8 <__kernel_cos>
 8012010:	ec51 0b10 	vmov	r0, r1, d0
 8012014:	e7e7      	b.n	8011fe6 <cos+0x2e>
 8012016:	ed9d 1b02 	vldr	d1, [sp, #8]
 801201a:	ed9d 0b00 	vldr	d0, [sp]
 801201e:	f000 f993 	bl	8012348 <__kernel_sin>
 8012022:	ec53 2b10 	vmov	r2, r3, d0
 8012026:	ee10 0a10 	vmov	r0, s0
 801202a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801202e:	e7da      	b.n	8011fe6 <cos+0x2e>
 8012030:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012034:	ed9d 0b00 	vldr	d0, [sp]
 8012038:	f000 f8be 	bl	80121b8 <__kernel_cos>
 801203c:	e7f1      	b.n	8012022 <cos+0x6a>
 801203e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012042:	ed9d 0b00 	vldr	d0, [sp]
 8012046:	2001      	movs	r0, #1
 8012048:	f000 f97e 	bl	8012348 <__kernel_sin>
 801204c:	e7e0      	b.n	8012010 <cos+0x58>
 801204e:	bf00      	nop
	...
 8012058:	3fe921fb 	.word	0x3fe921fb
 801205c:	7fefffff 	.word	0x7fefffff

08012060 <sin>:
 8012060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012062:	ec53 2b10 	vmov	r2, r3, d0
 8012066:	4828      	ldr	r0, [pc, #160]	; (8012108 <sin+0xa8>)
 8012068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801206c:	4281      	cmp	r1, r0
 801206e:	dc07      	bgt.n	8012080 <sin+0x20>
 8012070:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012100 <sin+0xa0>
 8012074:	2000      	movs	r0, #0
 8012076:	b005      	add	sp, #20
 8012078:	f85d eb04 	ldr.w	lr, [sp], #4
 801207c:	f000 b964 	b.w	8012348 <__kernel_sin>
 8012080:	4822      	ldr	r0, [pc, #136]	; (801210c <sin+0xac>)
 8012082:	4281      	cmp	r1, r0
 8012084:	dd09      	ble.n	801209a <sin+0x3a>
 8012086:	ee10 0a10 	vmov	r0, s0
 801208a:	4619      	mov	r1, r3
 801208c:	f7ee f914 	bl	80002b8 <__aeabi_dsub>
 8012090:	ec41 0b10 	vmov	d0, r0, r1
 8012094:	b005      	add	sp, #20
 8012096:	f85d fb04 	ldr.w	pc, [sp], #4
 801209a:	4668      	mov	r0, sp
 801209c:	f000 fa14 	bl	80124c8 <__ieee754_rem_pio2>
 80120a0:	f000 0003 	and.w	r0, r0, #3
 80120a4:	2801      	cmp	r0, #1
 80120a6:	d00c      	beq.n	80120c2 <sin+0x62>
 80120a8:	2802      	cmp	r0, #2
 80120aa:	d011      	beq.n	80120d0 <sin+0x70>
 80120ac:	b9f0      	cbnz	r0, 80120ec <sin+0x8c>
 80120ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120b2:	ed9d 0b00 	vldr	d0, [sp]
 80120b6:	2001      	movs	r0, #1
 80120b8:	f000 f946 	bl	8012348 <__kernel_sin>
 80120bc:	ec51 0b10 	vmov	r0, r1, d0
 80120c0:	e7e6      	b.n	8012090 <sin+0x30>
 80120c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120c6:	ed9d 0b00 	vldr	d0, [sp]
 80120ca:	f000 f875 	bl	80121b8 <__kernel_cos>
 80120ce:	e7f5      	b.n	80120bc <sin+0x5c>
 80120d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120d4:	ed9d 0b00 	vldr	d0, [sp]
 80120d8:	2001      	movs	r0, #1
 80120da:	f000 f935 	bl	8012348 <__kernel_sin>
 80120de:	ec53 2b10 	vmov	r2, r3, d0
 80120e2:	ee10 0a10 	vmov	r0, s0
 80120e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80120ea:	e7d1      	b.n	8012090 <sin+0x30>
 80120ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120f0:	ed9d 0b00 	vldr	d0, [sp]
 80120f4:	f000 f860 	bl	80121b8 <__kernel_cos>
 80120f8:	e7f1      	b.n	80120de <sin+0x7e>
 80120fa:	bf00      	nop
 80120fc:	f3af 8000 	nop.w
	...
 8012108:	3fe921fb 	.word	0x3fe921fb
 801210c:	7fefffff 	.word	0x7fefffff

08012110 <fmaxf>:
 8012110:	b508      	push	{r3, lr}
 8012112:	ed2d 8b02 	vpush	{d8}
 8012116:	eeb0 8a40 	vmov.f32	s16, s0
 801211a:	eef0 8a60 	vmov.f32	s17, s1
 801211e:	f000 f82d 	bl	801217c <__fpclassifyf>
 8012122:	b148      	cbz	r0, 8012138 <fmaxf+0x28>
 8012124:	eeb0 0a68 	vmov.f32	s0, s17
 8012128:	f000 f828 	bl	801217c <__fpclassifyf>
 801212c:	b130      	cbz	r0, 801213c <fmaxf+0x2c>
 801212e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012136:	dc01      	bgt.n	801213c <fmaxf+0x2c>
 8012138:	eeb0 8a68 	vmov.f32	s16, s17
 801213c:	eeb0 0a48 	vmov.f32	s0, s16
 8012140:	ecbd 8b02 	vpop	{d8}
 8012144:	bd08      	pop	{r3, pc}

08012146 <fminf>:
 8012146:	b508      	push	{r3, lr}
 8012148:	ed2d 8b02 	vpush	{d8}
 801214c:	eeb0 8a40 	vmov.f32	s16, s0
 8012150:	eef0 8a60 	vmov.f32	s17, s1
 8012154:	f000 f812 	bl	801217c <__fpclassifyf>
 8012158:	b148      	cbz	r0, 801216e <fminf+0x28>
 801215a:	eeb0 0a68 	vmov.f32	s0, s17
 801215e:	f000 f80d 	bl	801217c <__fpclassifyf>
 8012162:	b130      	cbz	r0, 8012172 <fminf+0x2c>
 8012164:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216c:	d401      	bmi.n	8012172 <fminf+0x2c>
 801216e:	eeb0 8a68 	vmov.f32	s16, s17
 8012172:	eeb0 0a48 	vmov.f32	s0, s16
 8012176:	ecbd 8b02 	vpop	{d8}
 801217a:	bd08      	pop	{r3, pc}

0801217c <__fpclassifyf>:
 801217c:	ee10 3a10 	vmov	r3, s0
 8012180:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8012184:	d00d      	beq.n	80121a2 <__fpclassifyf+0x26>
 8012186:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801218a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801218e:	d30a      	bcc.n	80121a6 <__fpclassifyf+0x2a>
 8012190:	4b07      	ldr	r3, [pc, #28]	; (80121b0 <__fpclassifyf+0x34>)
 8012192:	1e42      	subs	r2, r0, #1
 8012194:	429a      	cmp	r2, r3
 8012196:	d908      	bls.n	80121aa <__fpclassifyf+0x2e>
 8012198:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801219c:	4258      	negs	r0, r3
 801219e:	4158      	adcs	r0, r3
 80121a0:	4770      	bx	lr
 80121a2:	2002      	movs	r0, #2
 80121a4:	4770      	bx	lr
 80121a6:	2004      	movs	r0, #4
 80121a8:	4770      	bx	lr
 80121aa:	2003      	movs	r0, #3
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	007ffffe 	.word	0x007ffffe
 80121b4:	00000000 	.word	0x00000000

080121b8 <__kernel_cos>:
 80121b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121bc:	ec57 6b10 	vmov	r6, r7, d0
 80121c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80121c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80121c8:	ed8d 1b00 	vstr	d1, [sp]
 80121cc:	da07      	bge.n	80121de <__kernel_cos+0x26>
 80121ce:	ee10 0a10 	vmov	r0, s0
 80121d2:	4639      	mov	r1, r7
 80121d4:	f7ee fcd8 	bl	8000b88 <__aeabi_d2iz>
 80121d8:	2800      	cmp	r0, #0
 80121da:	f000 8088 	beq.w	80122ee <__kernel_cos+0x136>
 80121de:	4632      	mov	r2, r6
 80121e0:	463b      	mov	r3, r7
 80121e2:	4630      	mov	r0, r6
 80121e4:	4639      	mov	r1, r7
 80121e6:	f7ee fa1f 	bl	8000628 <__aeabi_dmul>
 80121ea:	4b51      	ldr	r3, [pc, #324]	; (8012330 <__kernel_cos+0x178>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	f7ee fa19 	bl	8000628 <__aeabi_dmul>
 80121f6:	a340      	add	r3, pc, #256	; (adr r3, 80122f8 <__kernel_cos+0x140>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	4682      	mov	sl, r0
 80121fe:	468b      	mov	fp, r1
 8012200:	4620      	mov	r0, r4
 8012202:	4629      	mov	r1, r5
 8012204:	f7ee fa10 	bl	8000628 <__aeabi_dmul>
 8012208:	a33d      	add	r3, pc, #244	; (adr r3, 8012300 <__kernel_cos+0x148>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f855 	bl	80002bc <__adddf3>
 8012212:	4622      	mov	r2, r4
 8012214:	462b      	mov	r3, r5
 8012216:	f7ee fa07 	bl	8000628 <__aeabi_dmul>
 801221a:	a33b      	add	r3, pc, #236	; (adr r3, 8012308 <__kernel_cos+0x150>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	f7ee f84a 	bl	80002b8 <__aeabi_dsub>
 8012224:	4622      	mov	r2, r4
 8012226:	462b      	mov	r3, r5
 8012228:	f7ee f9fe 	bl	8000628 <__aeabi_dmul>
 801222c:	a338      	add	r3, pc, #224	; (adr r3, 8012310 <__kernel_cos+0x158>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f7ee f843 	bl	80002bc <__adddf3>
 8012236:	4622      	mov	r2, r4
 8012238:	462b      	mov	r3, r5
 801223a:	f7ee f9f5 	bl	8000628 <__aeabi_dmul>
 801223e:	a336      	add	r3, pc, #216	; (adr r3, 8012318 <__kernel_cos+0x160>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	f7ee f838 	bl	80002b8 <__aeabi_dsub>
 8012248:	4622      	mov	r2, r4
 801224a:	462b      	mov	r3, r5
 801224c:	f7ee f9ec 	bl	8000628 <__aeabi_dmul>
 8012250:	a333      	add	r3, pc, #204	; (adr r3, 8012320 <__kernel_cos+0x168>)
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f7ee f831 	bl	80002bc <__adddf3>
 801225a:	4622      	mov	r2, r4
 801225c:	462b      	mov	r3, r5
 801225e:	f7ee f9e3 	bl	8000628 <__aeabi_dmul>
 8012262:	4622      	mov	r2, r4
 8012264:	462b      	mov	r3, r5
 8012266:	f7ee f9df 	bl	8000628 <__aeabi_dmul>
 801226a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	4630      	mov	r0, r6
 8012274:	4639      	mov	r1, r7
 8012276:	f7ee f9d7 	bl	8000628 <__aeabi_dmul>
 801227a:	460b      	mov	r3, r1
 801227c:	4602      	mov	r2, r0
 801227e:	4629      	mov	r1, r5
 8012280:	4620      	mov	r0, r4
 8012282:	f7ee f819 	bl	80002b8 <__aeabi_dsub>
 8012286:	4b2b      	ldr	r3, [pc, #172]	; (8012334 <__kernel_cos+0x17c>)
 8012288:	4598      	cmp	r8, r3
 801228a:	4606      	mov	r6, r0
 801228c:	460f      	mov	r7, r1
 801228e:	dc10      	bgt.n	80122b2 <__kernel_cos+0xfa>
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	4650      	mov	r0, sl
 8012296:	4659      	mov	r1, fp
 8012298:	f7ee f80e 	bl	80002b8 <__aeabi_dsub>
 801229c:	460b      	mov	r3, r1
 801229e:	4926      	ldr	r1, [pc, #152]	; (8012338 <__kernel_cos+0x180>)
 80122a0:	4602      	mov	r2, r0
 80122a2:	2000      	movs	r0, #0
 80122a4:	f7ee f808 	bl	80002b8 <__aeabi_dsub>
 80122a8:	ec41 0b10 	vmov	d0, r0, r1
 80122ac:	b003      	add	sp, #12
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	4b22      	ldr	r3, [pc, #136]	; (801233c <__kernel_cos+0x184>)
 80122b4:	4920      	ldr	r1, [pc, #128]	; (8012338 <__kernel_cos+0x180>)
 80122b6:	4598      	cmp	r8, r3
 80122b8:	bfcc      	ite	gt
 80122ba:	4d21      	ldrgt	r5, [pc, #132]	; (8012340 <__kernel_cos+0x188>)
 80122bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80122c0:	2400      	movs	r4, #0
 80122c2:	4622      	mov	r2, r4
 80122c4:	462b      	mov	r3, r5
 80122c6:	2000      	movs	r0, #0
 80122c8:	f7ed fff6 	bl	80002b8 <__aeabi_dsub>
 80122cc:	4622      	mov	r2, r4
 80122ce:	4680      	mov	r8, r0
 80122d0:	4689      	mov	r9, r1
 80122d2:	462b      	mov	r3, r5
 80122d4:	4650      	mov	r0, sl
 80122d6:	4659      	mov	r1, fp
 80122d8:	f7ed ffee 	bl	80002b8 <__aeabi_dsub>
 80122dc:	4632      	mov	r2, r6
 80122de:	463b      	mov	r3, r7
 80122e0:	f7ed ffea 	bl	80002b8 <__aeabi_dsub>
 80122e4:	4602      	mov	r2, r0
 80122e6:	460b      	mov	r3, r1
 80122e8:	4640      	mov	r0, r8
 80122ea:	4649      	mov	r1, r9
 80122ec:	e7da      	b.n	80122a4 <__kernel_cos+0xec>
 80122ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012328 <__kernel_cos+0x170>
 80122f2:	e7db      	b.n	80122ac <__kernel_cos+0xf4>
 80122f4:	f3af 8000 	nop.w
 80122f8:	be8838d4 	.word	0xbe8838d4
 80122fc:	bda8fae9 	.word	0xbda8fae9
 8012300:	bdb4b1c4 	.word	0xbdb4b1c4
 8012304:	3e21ee9e 	.word	0x3e21ee9e
 8012308:	809c52ad 	.word	0x809c52ad
 801230c:	3e927e4f 	.word	0x3e927e4f
 8012310:	19cb1590 	.word	0x19cb1590
 8012314:	3efa01a0 	.word	0x3efa01a0
 8012318:	16c15177 	.word	0x16c15177
 801231c:	3f56c16c 	.word	0x3f56c16c
 8012320:	5555554c 	.word	0x5555554c
 8012324:	3fa55555 	.word	0x3fa55555
 8012328:	00000000 	.word	0x00000000
 801232c:	3ff00000 	.word	0x3ff00000
 8012330:	3fe00000 	.word	0x3fe00000
 8012334:	3fd33332 	.word	0x3fd33332
 8012338:	3ff00000 	.word	0x3ff00000
 801233c:	3fe90000 	.word	0x3fe90000
 8012340:	3fd20000 	.word	0x3fd20000
 8012344:	00000000 	.word	0x00000000

08012348 <__kernel_sin>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	ed2d 8b04 	vpush	{d8-d9}
 8012350:	eeb0 8a41 	vmov.f32	s16, s2
 8012354:	eef0 8a61 	vmov.f32	s17, s3
 8012358:	ec55 4b10 	vmov	r4, r5, d0
 801235c:	b083      	sub	sp, #12
 801235e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012366:	9001      	str	r0, [sp, #4]
 8012368:	da06      	bge.n	8012378 <__kernel_sin+0x30>
 801236a:	ee10 0a10 	vmov	r0, s0
 801236e:	4629      	mov	r1, r5
 8012370:	f7ee fc0a 	bl	8000b88 <__aeabi_d2iz>
 8012374:	2800      	cmp	r0, #0
 8012376:	d051      	beq.n	801241c <__kernel_sin+0xd4>
 8012378:	4622      	mov	r2, r4
 801237a:	462b      	mov	r3, r5
 801237c:	4620      	mov	r0, r4
 801237e:	4629      	mov	r1, r5
 8012380:	f7ee f952 	bl	8000628 <__aeabi_dmul>
 8012384:	4682      	mov	sl, r0
 8012386:	468b      	mov	fp, r1
 8012388:	4602      	mov	r2, r0
 801238a:	460b      	mov	r3, r1
 801238c:	4620      	mov	r0, r4
 801238e:	4629      	mov	r1, r5
 8012390:	f7ee f94a 	bl	8000628 <__aeabi_dmul>
 8012394:	a341      	add	r3, pc, #260	; (adr r3, 801249c <__kernel_sin+0x154>)
 8012396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239a:	4680      	mov	r8, r0
 801239c:	4689      	mov	r9, r1
 801239e:	4650      	mov	r0, sl
 80123a0:	4659      	mov	r1, fp
 80123a2:	f7ee f941 	bl	8000628 <__aeabi_dmul>
 80123a6:	a33f      	add	r3, pc, #252	; (adr r3, 80124a4 <__kernel_sin+0x15c>)
 80123a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ac:	f7ed ff84 	bl	80002b8 <__aeabi_dsub>
 80123b0:	4652      	mov	r2, sl
 80123b2:	465b      	mov	r3, fp
 80123b4:	f7ee f938 	bl	8000628 <__aeabi_dmul>
 80123b8:	a33c      	add	r3, pc, #240	; (adr r3, 80124ac <__kernel_sin+0x164>)
 80123ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123be:	f7ed ff7d 	bl	80002bc <__adddf3>
 80123c2:	4652      	mov	r2, sl
 80123c4:	465b      	mov	r3, fp
 80123c6:	f7ee f92f 	bl	8000628 <__aeabi_dmul>
 80123ca:	a33a      	add	r3, pc, #232	; (adr r3, 80124b4 <__kernel_sin+0x16c>)
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	f7ed ff72 	bl	80002b8 <__aeabi_dsub>
 80123d4:	4652      	mov	r2, sl
 80123d6:	465b      	mov	r3, fp
 80123d8:	f7ee f926 	bl	8000628 <__aeabi_dmul>
 80123dc:	a337      	add	r3, pc, #220	; (adr r3, 80124bc <__kernel_sin+0x174>)
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	f7ed ff6b 	bl	80002bc <__adddf3>
 80123e6:	9b01      	ldr	r3, [sp, #4]
 80123e8:	4606      	mov	r6, r0
 80123ea:	460f      	mov	r7, r1
 80123ec:	b9eb      	cbnz	r3, 801242a <__kernel_sin+0xe2>
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	4650      	mov	r0, sl
 80123f4:	4659      	mov	r1, fp
 80123f6:	f7ee f917 	bl	8000628 <__aeabi_dmul>
 80123fa:	a325      	add	r3, pc, #148	; (adr r3, 8012490 <__kernel_sin+0x148>)
 80123fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012400:	f7ed ff5a 	bl	80002b8 <__aeabi_dsub>
 8012404:	4642      	mov	r2, r8
 8012406:	464b      	mov	r3, r9
 8012408:	f7ee f90e 	bl	8000628 <__aeabi_dmul>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	4620      	mov	r0, r4
 8012412:	4629      	mov	r1, r5
 8012414:	f7ed ff52 	bl	80002bc <__adddf3>
 8012418:	4604      	mov	r4, r0
 801241a:	460d      	mov	r5, r1
 801241c:	ec45 4b10 	vmov	d0, r4, r5
 8012420:	b003      	add	sp, #12
 8012422:	ecbd 8b04 	vpop	{d8-d9}
 8012426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242a:	4b1b      	ldr	r3, [pc, #108]	; (8012498 <__kernel_sin+0x150>)
 801242c:	ec51 0b18 	vmov	r0, r1, d8
 8012430:	2200      	movs	r2, #0
 8012432:	f7ee f8f9 	bl	8000628 <__aeabi_dmul>
 8012436:	4632      	mov	r2, r6
 8012438:	ec41 0b19 	vmov	d9, r0, r1
 801243c:	463b      	mov	r3, r7
 801243e:	4640      	mov	r0, r8
 8012440:	4649      	mov	r1, r9
 8012442:	f7ee f8f1 	bl	8000628 <__aeabi_dmul>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	ec51 0b19 	vmov	r0, r1, d9
 801244e:	f7ed ff33 	bl	80002b8 <__aeabi_dsub>
 8012452:	4652      	mov	r2, sl
 8012454:	465b      	mov	r3, fp
 8012456:	f7ee f8e7 	bl	8000628 <__aeabi_dmul>
 801245a:	ec53 2b18 	vmov	r2, r3, d8
 801245e:	f7ed ff2b 	bl	80002b8 <__aeabi_dsub>
 8012462:	a30b      	add	r3, pc, #44	; (adr r3, 8012490 <__kernel_sin+0x148>)
 8012464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012468:	4606      	mov	r6, r0
 801246a:	460f      	mov	r7, r1
 801246c:	4640      	mov	r0, r8
 801246e:	4649      	mov	r1, r9
 8012470:	f7ee f8da 	bl	8000628 <__aeabi_dmul>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	4630      	mov	r0, r6
 801247a:	4639      	mov	r1, r7
 801247c:	f7ed ff1e 	bl	80002bc <__adddf3>
 8012480:	4602      	mov	r2, r0
 8012482:	460b      	mov	r3, r1
 8012484:	4620      	mov	r0, r4
 8012486:	4629      	mov	r1, r5
 8012488:	f7ed ff16 	bl	80002b8 <__aeabi_dsub>
 801248c:	e7c4      	b.n	8012418 <__kernel_sin+0xd0>
 801248e:	bf00      	nop
 8012490:	55555549 	.word	0x55555549
 8012494:	3fc55555 	.word	0x3fc55555
 8012498:	3fe00000 	.word	0x3fe00000
 801249c:	5acfd57c 	.word	0x5acfd57c
 80124a0:	3de5d93a 	.word	0x3de5d93a
 80124a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80124a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80124ac:	57b1fe7d 	.word	0x57b1fe7d
 80124b0:	3ec71de3 	.word	0x3ec71de3
 80124b4:	19c161d5 	.word	0x19c161d5
 80124b8:	3f2a01a0 	.word	0x3f2a01a0
 80124bc:	1110f8a6 	.word	0x1110f8a6
 80124c0:	3f811111 	.word	0x3f811111
 80124c4:	00000000 	.word	0x00000000

080124c8 <__ieee754_rem_pio2>:
 80124c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	ed2d 8b02 	vpush	{d8}
 80124d0:	ec55 4b10 	vmov	r4, r5, d0
 80124d4:	4bca      	ldr	r3, [pc, #808]	; (8012800 <__ieee754_rem_pio2+0x338>)
 80124d6:	b08b      	sub	sp, #44	; 0x2c
 80124d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80124dc:	4598      	cmp	r8, r3
 80124de:	4682      	mov	sl, r0
 80124e0:	9502      	str	r5, [sp, #8]
 80124e2:	dc08      	bgt.n	80124f6 <__ieee754_rem_pio2+0x2e>
 80124e4:	2200      	movs	r2, #0
 80124e6:	2300      	movs	r3, #0
 80124e8:	ed80 0b00 	vstr	d0, [r0]
 80124ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80124f0:	f04f 0b00 	mov.w	fp, #0
 80124f4:	e028      	b.n	8012548 <__ieee754_rem_pio2+0x80>
 80124f6:	4bc3      	ldr	r3, [pc, #780]	; (8012804 <__ieee754_rem_pio2+0x33c>)
 80124f8:	4598      	cmp	r8, r3
 80124fa:	dc78      	bgt.n	80125ee <__ieee754_rem_pio2+0x126>
 80124fc:	9b02      	ldr	r3, [sp, #8]
 80124fe:	4ec2      	ldr	r6, [pc, #776]	; (8012808 <__ieee754_rem_pio2+0x340>)
 8012500:	2b00      	cmp	r3, #0
 8012502:	ee10 0a10 	vmov	r0, s0
 8012506:	a3b0      	add	r3, pc, #704	; (adr r3, 80127c8 <__ieee754_rem_pio2+0x300>)
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	4629      	mov	r1, r5
 801250e:	dd39      	ble.n	8012584 <__ieee754_rem_pio2+0xbc>
 8012510:	f7ed fed2 	bl	80002b8 <__aeabi_dsub>
 8012514:	45b0      	cmp	r8, r6
 8012516:	4604      	mov	r4, r0
 8012518:	460d      	mov	r5, r1
 801251a:	d01b      	beq.n	8012554 <__ieee754_rem_pio2+0x8c>
 801251c:	a3ac      	add	r3, pc, #688	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x308>)
 801251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012522:	f7ed fec9 	bl	80002b8 <__aeabi_dsub>
 8012526:	4602      	mov	r2, r0
 8012528:	460b      	mov	r3, r1
 801252a:	e9ca 2300 	strd	r2, r3, [sl]
 801252e:	4620      	mov	r0, r4
 8012530:	4629      	mov	r1, r5
 8012532:	f7ed fec1 	bl	80002b8 <__aeabi_dsub>
 8012536:	a3a6      	add	r3, pc, #664	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x308>)
 8012538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253c:	f7ed febc 	bl	80002b8 <__aeabi_dsub>
 8012540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012544:	f04f 0b01 	mov.w	fp, #1
 8012548:	4658      	mov	r0, fp
 801254a:	b00b      	add	sp, #44	; 0x2c
 801254c:	ecbd 8b02 	vpop	{d8}
 8012550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012554:	a3a0      	add	r3, pc, #640	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x310>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	f7ed fead 	bl	80002b8 <__aeabi_dsub>
 801255e:	a3a0      	add	r3, pc, #640	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x318>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	f7ed fea6 	bl	80002b8 <__aeabi_dsub>
 801256c:	4602      	mov	r2, r0
 801256e:	460b      	mov	r3, r1
 8012570:	e9ca 2300 	strd	r2, r3, [sl]
 8012574:	4620      	mov	r0, r4
 8012576:	4629      	mov	r1, r5
 8012578:	f7ed fe9e 	bl	80002b8 <__aeabi_dsub>
 801257c:	a398      	add	r3, pc, #608	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x318>)
 801257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012582:	e7db      	b.n	801253c <__ieee754_rem_pio2+0x74>
 8012584:	f7ed fe9a 	bl	80002bc <__adddf3>
 8012588:	45b0      	cmp	r8, r6
 801258a:	4604      	mov	r4, r0
 801258c:	460d      	mov	r5, r1
 801258e:	d016      	beq.n	80125be <__ieee754_rem_pio2+0xf6>
 8012590:	a38f      	add	r3, pc, #572	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x308>)
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	f7ed fe91 	bl	80002bc <__adddf3>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	e9ca 2300 	strd	r2, r3, [sl]
 80125a2:	4620      	mov	r0, r4
 80125a4:	4629      	mov	r1, r5
 80125a6:	f7ed fe87 	bl	80002b8 <__aeabi_dsub>
 80125aa:	a389      	add	r3, pc, #548	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x308>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	f7ed fe84 	bl	80002bc <__adddf3>
 80125b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80125b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80125bc:	e7c4      	b.n	8012548 <__ieee754_rem_pio2+0x80>
 80125be:	a386      	add	r3, pc, #536	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x310>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ed fe7a 	bl	80002bc <__adddf3>
 80125c8:	a385      	add	r3, pc, #532	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x318>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	4604      	mov	r4, r0
 80125d0:	460d      	mov	r5, r1
 80125d2:	f7ed fe73 	bl	80002bc <__adddf3>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	e9ca 2300 	strd	r2, r3, [sl]
 80125de:	4620      	mov	r0, r4
 80125e0:	4629      	mov	r1, r5
 80125e2:	f7ed fe69 	bl	80002b8 <__aeabi_dsub>
 80125e6:	a37e      	add	r3, pc, #504	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x318>)
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	e7e0      	b.n	80125b0 <__ieee754_rem_pio2+0xe8>
 80125ee:	4b87      	ldr	r3, [pc, #540]	; (801280c <__ieee754_rem_pio2+0x344>)
 80125f0:	4598      	cmp	r8, r3
 80125f2:	f300 80d8 	bgt.w	80127a6 <__ieee754_rem_pio2+0x2de>
 80125f6:	f000 f96d 	bl	80128d4 <fabs>
 80125fa:	ec55 4b10 	vmov	r4, r5, d0
 80125fe:	ee10 0a10 	vmov	r0, s0
 8012602:	a379      	add	r3, pc, #484	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x320>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	4629      	mov	r1, r5
 801260a:	f7ee f80d 	bl	8000628 <__aeabi_dmul>
 801260e:	4b80      	ldr	r3, [pc, #512]	; (8012810 <__ieee754_rem_pio2+0x348>)
 8012610:	2200      	movs	r2, #0
 8012612:	f7ed fe53 	bl	80002bc <__adddf3>
 8012616:	f7ee fab7 	bl	8000b88 <__aeabi_d2iz>
 801261a:	4683      	mov	fp, r0
 801261c:	f7ed ff9a 	bl	8000554 <__aeabi_i2d>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	ec43 2b18 	vmov	d8, r2, r3
 8012628:	a367      	add	r3, pc, #412	; (adr r3, 80127c8 <__ieee754_rem_pio2+0x300>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	f7ed fffb 	bl	8000628 <__aeabi_dmul>
 8012632:	4602      	mov	r2, r0
 8012634:	460b      	mov	r3, r1
 8012636:	4620      	mov	r0, r4
 8012638:	4629      	mov	r1, r5
 801263a:	f7ed fe3d 	bl	80002b8 <__aeabi_dsub>
 801263e:	a364      	add	r3, pc, #400	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x308>)
 8012640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012644:	4606      	mov	r6, r0
 8012646:	460f      	mov	r7, r1
 8012648:	ec51 0b18 	vmov	r0, r1, d8
 801264c:	f7ed ffec 	bl	8000628 <__aeabi_dmul>
 8012650:	f1bb 0f1f 	cmp.w	fp, #31
 8012654:	4604      	mov	r4, r0
 8012656:	460d      	mov	r5, r1
 8012658:	dc0d      	bgt.n	8012676 <__ieee754_rem_pio2+0x1ae>
 801265a:	4b6e      	ldr	r3, [pc, #440]	; (8012814 <__ieee754_rem_pio2+0x34c>)
 801265c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8012660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012664:	4543      	cmp	r3, r8
 8012666:	d006      	beq.n	8012676 <__ieee754_rem_pio2+0x1ae>
 8012668:	4622      	mov	r2, r4
 801266a:	462b      	mov	r3, r5
 801266c:	4630      	mov	r0, r6
 801266e:	4639      	mov	r1, r7
 8012670:	f7ed fe22 	bl	80002b8 <__aeabi_dsub>
 8012674:	e00e      	b.n	8012694 <__ieee754_rem_pio2+0x1cc>
 8012676:	462b      	mov	r3, r5
 8012678:	4622      	mov	r2, r4
 801267a:	4630      	mov	r0, r6
 801267c:	4639      	mov	r1, r7
 801267e:	f7ed fe1b 	bl	80002b8 <__aeabi_dsub>
 8012682:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012686:	9303      	str	r3, [sp, #12]
 8012688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801268c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012690:	2b10      	cmp	r3, #16
 8012692:	dc02      	bgt.n	801269a <__ieee754_rem_pio2+0x1d2>
 8012694:	e9ca 0100 	strd	r0, r1, [sl]
 8012698:	e039      	b.n	801270e <__ieee754_rem_pio2+0x246>
 801269a:	a34f      	add	r3, pc, #316	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x310>)
 801269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a0:	ec51 0b18 	vmov	r0, r1, d8
 80126a4:	f7ed ffc0 	bl	8000628 <__aeabi_dmul>
 80126a8:	4604      	mov	r4, r0
 80126aa:	460d      	mov	r5, r1
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	4630      	mov	r0, r6
 80126b2:	4639      	mov	r1, r7
 80126b4:	f7ed fe00 	bl	80002b8 <__aeabi_dsub>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	4680      	mov	r8, r0
 80126be:	4689      	mov	r9, r1
 80126c0:	4630      	mov	r0, r6
 80126c2:	4639      	mov	r1, r7
 80126c4:	f7ed fdf8 	bl	80002b8 <__aeabi_dsub>
 80126c8:	4622      	mov	r2, r4
 80126ca:	462b      	mov	r3, r5
 80126cc:	f7ed fdf4 	bl	80002b8 <__aeabi_dsub>
 80126d0:	a343      	add	r3, pc, #268	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x318>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	4604      	mov	r4, r0
 80126d8:	460d      	mov	r5, r1
 80126da:	ec51 0b18 	vmov	r0, r1, d8
 80126de:	f7ed ffa3 	bl	8000628 <__aeabi_dmul>
 80126e2:	4622      	mov	r2, r4
 80126e4:	462b      	mov	r3, r5
 80126e6:	f7ed fde7 	bl	80002b8 <__aeabi_dsub>
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
 80126f2:	4640      	mov	r0, r8
 80126f4:	4649      	mov	r1, r9
 80126f6:	f7ed fddf 	bl	80002b8 <__aeabi_dsub>
 80126fa:	9a03      	ldr	r2, [sp, #12]
 80126fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	2b31      	cmp	r3, #49	; 0x31
 8012704:	dc24      	bgt.n	8012750 <__ieee754_rem_pio2+0x288>
 8012706:	e9ca 0100 	strd	r0, r1, [sl]
 801270a:	4646      	mov	r6, r8
 801270c:	464f      	mov	r7, r9
 801270e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012712:	4630      	mov	r0, r6
 8012714:	4642      	mov	r2, r8
 8012716:	464b      	mov	r3, r9
 8012718:	4639      	mov	r1, r7
 801271a:	f7ed fdcd 	bl	80002b8 <__aeabi_dsub>
 801271e:	462b      	mov	r3, r5
 8012720:	4622      	mov	r2, r4
 8012722:	f7ed fdc9 	bl	80002b8 <__aeabi_dsub>
 8012726:	9b02      	ldr	r3, [sp, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801272e:	f6bf af0b 	bge.w	8012548 <__ieee754_rem_pio2+0x80>
 8012732:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012736:	f8ca 3004 	str.w	r3, [sl, #4]
 801273a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801273e:	f8ca 8000 	str.w	r8, [sl]
 8012742:	f8ca 0008 	str.w	r0, [sl, #8]
 8012746:	f8ca 300c 	str.w	r3, [sl, #12]
 801274a:	f1cb 0b00 	rsb	fp, fp, #0
 801274e:	e6fb      	b.n	8012548 <__ieee754_rem_pio2+0x80>
 8012750:	a327      	add	r3, pc, #156	; (adr r3, 80127f0 <__ieee754_rem_pio2+0x328>)
 8012752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012756:	ec51 0b18 	vmov	r0, r1, d8
 801275a:	f7ed ff65 	bl	8000628 <__aeabi_dmul>
 801275e:	4604      	mov	r4, r0
 8012760:	460d      	mov	r5, r1
 8012762:	4602      	mov	r2, r0
 8012764:	460b      	mov	r3, r1
 8012766:	4640      	mov	r0, r8
 8012768:	4649      	mov	r1, r9
 801276a:	f7ed fda5 	bl	80002b8 <__aeabi_dsub>
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	4606      	mov	r6, r0
 8012774:	460f      	mov	r7, r1
 8012776:	4640      	mov	r0, r8
 8012778:	4649      	mov	r1, r9
 801277a:	f7ed fd9d 	bl	80002b8 <__aeabi_dsub>
 801277e:	4622      	mov	r2, r4
 8012780:	462b      	mov	r3, r5
 8012782:	f7ed fd99 	bl	80002b8 <__aeabi_dsub>
 8012786:	a31c      	add	r3, pc, #112	; (adr r3, 80127f8 <__ieee754_rem_pio2+0x330>)
 8012788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278c:	4604      	mov	r4, r0
 801278e:	460d      	mov	r5, r1
 8012790:	ec51 0b18 	vmov	r0, r1, d8
 8012794:	f7ed ff48 	bl	8000628 <__aeabi_dmul>
 8012798:	4622      	mov	r2, r4
 801279a:	462b      	mov	r3, r5
 801279c:	f7ed fd8c 	bl	80002b8 <__aeabi_dsub>
 80127a0:	4604      	mov	r4, r0
 80127a2:	460d      	mov	r5, r1
 80127a4:	e760      	b.n	8012668 <__ieee754_rem_pio2+0x1a0>
 80127a6:	4b1c      	ldr	r3, [pc, #112]	; (8012818 <__ieee754_rem_pio2+0x350>)
 80127a8:	4598      	cmp	r8, r3
 80127aa:	dd37      	ble.n	801281c <__ieee754_rem_pio2+0x354>
 80127ac:	ee10 2a10 	vmov	r2, s0
 80127b0:	462b      	mov	r3, r5
 80127b2:	4620      	mov	r0, r4
 80127b4:	4629      	mov	r1, r5
 80127b6:	f7ed fd7f 	bl	80002b8 <__aeabi_dsub>
 80127ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80127be:	e9ca 0100 	strd	r0, r1, [sl]
 80127c2:	e695      	b.n	80124f0 <__ieee754_rem_pio2+0x28>
 80127c4:	f3af 8000 	nop.w
 80127c8:	54400000 	.word	0x54400000
 80127cc:	3ff921fb 	.word	0x3ff921fb
 80127d0:	1a626331 	.word	0x1a626331
 80127d4:	3dd0b461 	.word	0x3dd0b461
 80127d8:	1a600000 	.word	0x1a600000
 80127dc:	3dd0b461 	.word	0x3dd0b461
 80127e0:	2e037073 	.word	0x2e037073
 80127e4:	3ba3198a 	.word	0x3ba3198a
 80127e8:	6dc9c883 	.word	0x6dc9c883
 80127ec:	3fe45f30 	.word	0x3fe45f30
 80127f0:	2e000000 	.word	0x2e000000
 80127f4:	3ba3198a 	.word	0x3ba3198a
 80127f8:	252049c1 	.word	0x252049c1
 80127fc:	397b839a 	.word	0x397b839a
 8012800:	3fe921fb 	.word	0x3fe921fb
 8012804:	4002d97b 	.word	0x4002d97b
 8012808:	3ff921fb 	.word	0x3ff921fb
 801280c:	413921fb 	.word	0x413921fb
 8012810:	3fe00000 	.word	0x3fe00000
 8012814:	080138bc 	.word	0x080138bc
 8012818:	7fefffff 	.word	0x7fefffff
 801281c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012820:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012824:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012828:	4620      	mov	r0, r4
 801282a:	460d      	mov	r5, r1
 801282c:	f7ee f9ac 	bl	8000b88 <__aeabi_d2iz>
 8012830:	f7ed fe90 	bl	8000554 <__aeabi_i2d>
 8012834:	4602      	mov	r2, r0
 8012836:	460b      	mov	r3, r1
 8012838:	4620      	mov	r0, r4
 801283a:	4629      	mov	r1, r5
 801283c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012840:	f7ed fd3a 	bl	80002b8 <__aeabi_dsub>
 8012844:	4b21      	ldr	r3, [pc, #132]	; (80128cc <__ieee754_rem_pio2+0x404>)
 8012846:	2200      	movs	r2, #0
 8012848:	f7ed feee 	bl	8000628 <__aeabi_dmul>
 801284c:	460d      	mov	r5, r1
 801284e:	4604      	mov	r4, r0
 8012850:	f7ee f99a 	bl	8000b88 <__aeabi_d2iz>
 8012854:	f7ed fe7e 	bl	8000554 <__aeabi_i2d>
 8012858:	4602      	mov	r2, r0
 801285a:	460b      	mov	r3, r1
 801285c:	4620      	mov	r0, r4
 801285e:	4629      	mov	r1, r5
 8012860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012864:	f7ed fd28 	bl	80002b8 <__aeabi_dsub>
 8012868:	4b18      	ldr	r3, [pc, #96]	; (80128cc <__ieee754_rem_pio2+0x404>)
 801286a:	2200      	movs	r2, #0
 801286c:	f7ed fedc 	bl	8000628 <__aeabi_dmul>
 8012870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012874:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012878:	2703      	movs	r7, #3
 801287a:	2400      	movs	r4, #0
 801287c:	2500      	movs	r5, #0
 801287e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012882:	4622      	mov	r2, r4
 8012884:	462b      	mov	r3, r5
 8012886:	46b9      	mov	r9, r7
 8012888:	3f01      	subs	r7, #1
 801288a:	f7ee f935 	bl	8000af8 <__aeabi_dcmpeq>
 801288e:	2800      	cmp	r0, #0
 8012890:	d1f5      	bne.n	801287e <__ieee754_rem_pio2+0x3b6>
 8012892:	4b0f      	ldr	r3, [pc, #60]	; (80128d0 <__ieee754_rem_pio2+0x408>)
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	2302      	movs	r3, #2
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	4632      	mov	r2, r6
 801289c:	464b      	mov	r3, r9
 801289e:	4651      	mov	r1, sl
 80128a0:	a804      	add	r0, sp, #16
 80128a2:	f000 f821 	bl	80128e8 <__kernel_rem_pio2>
 80128a6:	9b02      	ldr	r3, [sp, #8]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	4683      	mov	fp, r0
 80128ac:	f6bf ae4c 	bge.w	8012548 <__ieee754_rem_pio2+0x80>
 80128b0:	e9da 2100 	ldrd	r2, r1, [sl]
 80128b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128b8:	e9ca 2300 	strd	r2, r3, [sl]
 80128bc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80128c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128c4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80128c8:	e73f      	b.n	801274a <__ieee754_rem_pio2+0x282>
 80128ca:	bf00      	nop
 80128cc:	41700000 	.word	0x41700000
 80128d0:	0801393c 	.word	0x0801393c

080128d4 <fabs>:
 80128d4:	ec51 0b10 	vmov	r0, r1, d0
 80128d8:	ee10 2a10 	vmov	r2, s0
 80128dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128e0:	ec43 2b10 	vmov	d0, r2, r3
 80128e4:	4770      	bx	lr
	...

080128e8 <__kernel_rem_pio2>:
 80128e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ec:	ed2d 8b02 	vpush	{d8}
 80128f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80128f4:	f112 0f14 	cmn.w	r2, #20
 80128f8:	9306      	str	r3, [sp, #24]
 80128fa:	9104      	str	r1, [sp, #16]
 80128fc:	4bc2      	ldr	r3, [pc, #776]	; (8012c08 <__kernel_rem_pio2+0x320>)
 80128fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012900:	9009      	str	r0, [sp, #36]	; 0x24
 8012902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	9b06      	ldr	r3, [sp, #24]
 801290a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801290e:	bfa8      	it	ge
 8012910:	1ed4      	subge	r4, r2, #3
 8012912:	9305      	str	r3, [sp, #20]
 8012914:	bfb2      	itee	lt
 8012916:	2400      	movlt	r4, #0
 8012918:	2318      	movge	r3, #24
 801291a:	fb94 f4f3 	sdivge	r4, r4, r3
 801291e:	f06f 0317 	mvn.w	r3, #23
 8012922:	fb04 3303 	mla	r3, r4, r3, r3
 8012926:	eb03 0a02 	add.w	sl, r3, r2
 801292a:	9b00      	ldr	r3, [sp, #0]
 801292c:	9a05      	ldr	r2, [sp, #20]
 801292e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012bf8 <__kernel_rem_pio2+0x310>
 8012932:	eb03 0802 	add.w	r8, r3, r2
 8012936:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012938:	1aa7      	subs	r7, r4, r2
 801293a:	ae20      	add	r6, sp, #128	; 0x80
 801293c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012940:	2500      	movs	r5, #0
 8012942:	4545      	cmp	r5, r8
 8012944:	dd13      	ble.n	801296e <__kernel_rem_pio2+0x86>
 8012946:	9b06      	ldr	r3, [sp, #24]
 8012948:	aa20      	add	r2, sp, #128	; 0x80
 801294a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801294e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012952:	f04f 0800 	mov.w	r8, #0
 8012956:	9b00      	ldr	r3, [sp, #0]
 8012958:	4598      	cmp	r8, r3
 801295a:	dc31      	bgt.n	80129c0 <__kernel_rem_pio2+0xd8>
 801295c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012bf8 <__kernel_rem_pio2+0x310>
 8012960:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012968:	462f      	mov	r7, r5
 801296a:	2600      	movs	r6, #0
 801296c:	e01b      	b.n	80129a6 <__kernel_rem_pio2+0xbe>
 801296e:	42ef      	cmn	r7, r5
 8012970:	d407      	bmi.n	8012982 <__kernel_rem_pio2+0x9a>
 8012972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012976:	f7ed fded 	bl	8000554 <__aeabi_i2d>
 801297a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801297e:	3501      	adds	r5, #1
 8012980:	e7df      	b.n	8012942 <__kernel_rem_pio2+0x5a>
 8012982:	ec51 0b18 	vmov	r0, r1, d8
 8012986:	e7f8      	b.n	801297a <__kernel_rem_pio2+0x92>
 8012988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801298c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012990:	f7ed fe4a 	bl	8000628 <__aeabi_dmul>
 8012994:	4602      	mov	r2, r0
 8012996:	460b      	mov	r3, r1
 8012998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801299c:	f7ed fc8e 	bl	80002bc <__adddf3>
 80129a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129a4:	3601      	adds	r6, #1
 80129a6:	9b05      	ldr	r3, [sp, #20]
 80129a8:	429e      	cmp	r6, r3
 80129aa:	f1a7 0708 	sub.w	r7, r7, #8
 80129ae:	ddeb      	ble.n	8012988 <__kernel_rem_pio2+0xa0>
 80129b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129b4:	f108 0801 	add.w	r8, r8, #1
 80129b8:	ecab 7b02 	vstmia	fp!, {d7}
 80129bc:	3508      	adds	r5, #8
 80129be:	e7ca      	b.n	8012956 <__kernel_rem_pio2+0x6e>
 80129c0:	9b00      	ldr	r3, [sp, #0]
 80129c2:	aa0c      	add	r2, sp, #48	; 0x30
 80129c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80129ca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80129cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80129d0:	9c00      	ldr	r4, [sp, #0]
 80129d2:	930a      	str	r3, [sp, #40]	; 0x28
 80129d4:	00e3      	lsls	r3, r4, #3
 80129d6:	9308      	str	r3, [sp, #32]
 80129d8:	ab98      	add	r3, sp, #608	; 0x260
 80129da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80129de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80129e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80129e6:	ab70      	add	r3, sp, #448	; 0x1c0
 80129e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80129ec:	46c3      	mov	fp, r8
 80129ee:	46a1      	mov	r9, r4
 80129f0:	f1b9 0f00 	cmp.w	r9, #0
 80129f4:	f1a5 0508 	sub.w	r5, r5, #8
 80129f8:	dc77      	bgt.n	8012aea <__kernel_rem_pio2+0x202>
 80129fa:	ec47 6b10 	vmov	d0, r6, r7
 80129fe:	4650      	mov	r0, sl
 8012a00:	f000 fac2 	bl	8012f88 <scalbn>
 8012a04:	ec57 6b10 	vmov	r6, r7, d0
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012a0e:	ee10 0a10 	vmov	r0, s0
 8012a12:	4639      	mov	r1, r7
 8012a14:	f7ed fe08 	bl	8000628 <__aeabi_dmul>
 8012a18:	ec41 0b10 	vmov	d0, r0, r1
 8012a1c:	f000 fb34 	bl	8013088 <floor>
 8012a20:	4b7a      	ldr	r3, [pc, #488]	; (8012c0c <__kernel_rem_pio2+0x324>)
 8012a22:	ec51 0b10 	vmov	r0, r1, d0
 8012a26:	2200      	movs	r2, #0
 8012a28:	f7ed fdfe 	bl	8000628 <__aeabi_dmul>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	4630      	mov	r0, r6
 8012a32:	4639      	mov	r1, r7
 8012a34:	f7ed fc40 	bl	80002b8 <__aeabi_dsub>
 8012a38:	460f      	mov	r7, r1
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	f7ee f8a4 	bl	8000b88 <__aeabi_d2iz>
 8012a40:	9002      	str	r0, [sp, #8]
 8012a42:	f7ed fd87 	bl	8000554 <__aeabi_i2d>
 8012a46:	4602      	mov	r2, r0
 8012a48:	460b      	mov	r3, r1
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	4639      	mov	r1, r7
 8012a4e:	f7ed fc33 	bl	80002b8 <__aeabi_dsub>
 8012a52:	f1ba 0f00 	cmp.w	sl, #0
 8012a56:	4606      	mov	r6, r0
 8012a58:	460f      	mov	r7, r1
 8012a5a:	dd6d      	ble.n	8012b38 <__kernel_rem_pio2+0x250>
 8012a5c:	1e61      	subs	r1, r4, #1
 8012a5e:	ab0c      	add	r3, sp, #48	; 0x30
 8012a60:	9d02      	ldr	r5, [sp, #8]
 8012a62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a66:	f1ca 0018 	rsb	r0, sl, #24
 8012a6a:	fa43 f200 	asr.w	r2, r3, r0
 8012a6e:	4415      	add	r5, r2
 8012a70:	4082      	lsls	r2, r0
 8012a72:	1a9b      	subs	r3, r3, r2
 8012a74:	aa0c      	add	r2, sp, #48	; 0x30
 8012a76:	9502      	str	r5, [sp, #8]
 8012a78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012a7c:	f1ca 0217 	rsb	r2, sl, #23
 8012a80:	fa43 fb02 	asr.w	fp, r3, r2
 8012a84:	f1bb 0f00 	cmp.w	fp, #0
 8012a88:	dd65      	ble.n	8012b56 <__kernel_rem_pio2+0x26e>
 8012a8a:	9b02      	ldr	r3, [sp, #8]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	3301      	adds	r3, #1
 8012a90:	9302      	str	r3, [sp, #8]
 8012a92:	4615      	mov	r5, r2
 8012a94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012a98:	4294      	cmp	r4, r2
 8012a9a:	f300 809f 	bgt.w	8012bdc <__kernel_rem_pio2+0x2f4>
 8012a9e:	f1ba 0f00 	cmp.w	sl, #0
 8012aa2:	dd07      	ble.n	8012ab4 <__kernel_rem_pio2+0x1cc>
 8012aa4:	f1ba 0f01 	cmp.w	sl, #1
 8012aa8:	f000 80c1 	beq.w	8012c2e <__kernel_rem_pio2+0x346>
 8012aac:	f1ba 0f02 	cmp.w	sl, #2
 8012ab0:	f000 80c7 	beq.w	8012c42 <__kernel_rem_pio2+0x35a>
 8012ab4:	f1bb 0f02 	cmp.w	fp, #2
 8012ab8:	d14d      	bne.n	8012b56 <__kernel_rem_pio2+0x26e>
 8012aba:	4632      	mov	r2, r6
 8012abc:	463b      	mov	r3, r7
 8012abe:	4954      	ldr	r1, [pc, #336]	; (8012c10 <__kernel_rem_pio2+0x328>)
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	f7ed fbf9 	bl	80002b8 <__aeabi_dsub>
 8012ac6:	4606      	mov	r6, r0
 8012ac8:	460f      	mov	r7, r1
 8012aca:	2d00      	cmp	r5, #0
 8012acc:	d043      	beq.n	8012b56 <__kernel_rem_pio2+0x26e>
 8012ace:	4650      	mov	r0, sl
 8012ad0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012c00 <__kernel_rem_pio2+0x318>
 8012ad4:	f000 fa58 	bl	8012f88 <scalbn>
 8012ad8:	4630      	mov	r0, r6
 8012ada:	4639      	mov	r1, r7
 8012adc:	ec53 2b10 	vmov	r2, r3, d0
 8012ae0:	f7ed fbea 	bl	80002b8 <__aeabi_dsub>
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	460f      	mov	r7, r1
 8012ae8:	e035      	b.n	8012b56 <__kernel_rem_pio2+0x26e>
 8012aea:	4b4a      	ldr	r3, [pc, #296]	; (8012c14 <__kernel_rem_pio2+0x32c>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	4630      	mov	r0, r6
 8012af0:	4639      	mov	r1, r7
 8012af2:	f7ed fd99 	bl	8000628 <__aeabi_dmul>
 8012af6:	f7ee f847 	bl	8000b88 <__aeabi_d2iz>
 8012afa:	f7ed fd2b 	bl	8000554 <__aeabi_i2d>
 8012afe:	4602      	mov	r2, r0
 8012b00:	460b      	mov	r3, r1
 8012b02:	ec43 2b18 	vmov	d8, r2, r3
 8012b06:	4b44      	ldr	r3, [pc, #272]	; (8012c18 <__kernel_rem_pio2+0x330>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f7ed fd8d 	bl	8000628 <__aeabi_dmul>
 8012b0e:	4602      	mov	r2, r0
 8012b10:	460b      	mov	r3, r1
 8012b12:	4630      	mov	r0, r6
 8012b14:	4639      	mov	r1, r7
 8012b16:	f7ed fbcf 	bl	80002b8 <__aeabi_dsub>
 8012b1a:	f7ee f835 	bl	8000b88 <__aeabi_d2iz>
 8012b1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b22:	f84b 0b04 	str.w	r0, [fp], #4
 8012b26:	ec51 0b18 	vmov	r0, r1, d8
 8012b2a:	f7ed fbc7 	bl	80002bc <__adddf3>
 8012b2e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012b32:	4606      	mov	r6, r0
 8012b34:	460f      	mov	r7, r1
 8012b36:	e75b      	b.n	80129f0 <__kernel_rem_pio2+0x108>
 8012b38:	d106      	bne.n	8012b48 <__kernel_rem_pio2+0x260>
 8012b3a:	1e63      	subs	r3, r4, #1
 8012b3c:	aa0c      	add	r2, sp, #48	; 0x30
 8012b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b42:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8012b46:	e79d      	b.n	8012a84 <__kernel_rem_pio2+0x19c>
 8012b48:	4b34      	ldr	r3, [pc, #208]	; (8012c1c <__kernel_rem_pio2+0x334>)
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f7ed fff2 	bl	8000b34 <__aeabi_dcmpge>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d140      	bne.n	8012bd6 <__kernel_rem_pio2+0x2ee>
 8012b54:	4683      	mov	fp, r0
 8012b56:	2200      	movs	r2, #0
 8012b58:	2300      	movs	r3, #0
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	f7ed ffcb 	bl	8000af8 <__aeabi_dcmpeq>
 8012b62:	2800      	cmp	r0, #0
 8012b64:	f000 80c1 	beq.w	8012cea <__kernel_rem_pio2+0x402>
 8012b68:	1e65      	subs	r5, r4, #1
 8012b6a:	462b      	mov	r3, r5
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	9900      	ldr	r1, [sp, #0]
 8012b70:	428b      	cmp	r3, r1
 8012b72:	da6d      	bge.n	8012c50 <__kernel_rem_pio2+0x368>
 8012b74:	2a00      	cmp	r2, #0
 8012b76:	f000 808a 	beq.w	8012c8e <__kernel_rem_pio2+0x3a6>
 8012b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8012b7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012b80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	f000 80ae 	beq.w	8012ce6 <__kernel_rem_pio2+0x3fe>
 8012b8a:	4650      	mov	r0, sl
 8012b8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012c00 <__kernel_rem_pio2+0x318>
 8012b90:	f000 f9fa 	bl	8012f88 <scalbn>
 8012b94:	1c6b      	adds	r3, r5, #1
 8012b96:	00da      	lsls	r2, r3, #3
 8012b98:	9205      	str	r2, [sp, #20]
 8012b9a:	ec57 6b10 	vmov	r6, r7, d0
 8012b9e:	aa70      	add	r2, sp, #448	; 0x1c0
 8012ba0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8012c14 <__kernel_rem_pio2+0x32c>
 8012ba4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012ba8:	462c      	mov	r4, r5
 8012baa:	f04f 0800 	mov.w	r8, #0
 8012bae:	2c00      	cmp	r4, #0
 8012bb0:	f280 80d4 	bge.w	8012d5c <__kernel_rem_pio2+0x474>
 8012bb4:	462c      	mov	r4, r5
 8012bb6:	2c00      	cmp	r4, #0
 8012bb8:	f2c0 8102 	blt.w	8012dc0 <__kernel_rem_pio2+0x4d8>
 8012bbc:	4b18      	ldr	r3, [pc, #96]	; (8012c20 <__kernel_rem_pio2+0x338>)
 8012bbe:	461e      	mov	r6, r3
 8012bc0:	ab70      	add	r3, sp, #448	; 0x1c0
 8012bc2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8012bc6:	1b2b      	subs	r3, r5, r4
 8012bc8:	f04f 0900 	mov.w	r9, #0
 8012bcc:	f04f 0a00 	mov.w	sl, #0
 8012bd0:	2700      	movs	r7, #0
 8012bd2:	9306      	str	r3, [sp, #24]
 8012bd4:	e0e6      	b.n	8012da4 <__kernel_rem_pio2+0x4bc>
 8012bd6:	f04f 0b02 	mov.w	fp, #2
 8012bda:	e756      	b.n	8012a8a <__kernel_rem_pio2+0x1a2>
 8012bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8012be0:	bb05      	cbnz	r5, 8012c24 <__kernel_rem_pio2+0x33c>
 8012be2:	b123      	cbz	r3, 8012bee <__kernel_rem_pio2+0x306>
 8012be4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012be8:	f8c8 3000 	str.w	r3, [r8]
 8012bec:	2301      	movs	r3, #1
 8012bee:	3201      	adds	r2, #1
 8012bf0:	f108 0804 	add.w	r8, r8, #4
 8012bf4:	461d      	mov	r5, r3
 8012bf6:	e74f      	b.n	8012a98 <__kernel_rem_pio2+0x1b0>
	...
 8012c04:	3ff00000 	.word	0x3ff00000
 8012c08:	08013a88 	.word	0x08013a88
 8012c0c:	40200000 	.word	0x40200000
 8012c10:	3ff00000 	.word	0x3ff00000
 8012c14:	3e700000 	.word	0x3e700000
 8012c18:	41700000 	.word	0x41700000
 8012c1c:	3fe00000 	.word	0x3fe00000
 8012c20:	08013a48 	.word	0x08013a48
 8012c24:	1acb      	subs	r3, r1, r3
 8012c26:	f8c8 3000 	str.w	r3, [r8]
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	e7df      	b.n	8012bee <__kernel_rem_pio2+0x306>
 8012c2e:	1e62      	subs	r2, r4, #1
 8012c30:	ab0c      	add	r3, sp, #48	; 0x30
 8012c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012c3a:	a90c      	add	r1, sp, #48	; 0x30
 8012c3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012c40:	e738      	b.n	8012ab4 <__kernel_rem_pio2+0x1cc>
 8012c42:	1e62      	subs	r2, r4, #1
 8012c44:	ab0c      	add	r3, sp, #48	; 0x30
 8012c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012c4e:	e7f4      	b.n	8012c3a <__kernel_rem_pio2+0x352>
 8012c50:	a90c      	add	r1, sp, #48	; 0x30
 8012c52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012c56:	3b01      	subs	r3, #1
 8012c58:	430a      	orrs	r2, r1
 8012c5a:	e788      	b.n	8012b6e <__kernel_rem_pio2+0x286>
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012c62:	2900      	cmp	r1, #0
 8012c64:	d0fa      	beq.n	8012c5c <__kernel_rem_pio2+0x374>
 8012c66:	9a08      	ldr	r2, [sp, #32]
 8012c68:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012c6c:	446a      	add	r2, sp
 8012c6e:	3a98      	subs	r2, #152	; 0x98
 8012c70:	9208      	str	r2, [sp, #32]
 8012c72:	9a06      	ldr	r2, [sp, #24]
 8012c74:	a920      	add	r1, sp, #128	; 0x80
 8012c76:	18a2      	adds	r2, r4, r2
 8012c78:	18e3      	adds	r3, r4, r3
 8012c7a:	f104 0801 	add.w	r8, r4, #1
 8012c7e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012c82:	9302      	str	r3, [sp, #8]
 8012c84:	9b02      	ldr	r3, [sp, #8]
 8012c86:	4543      	cmp	r3, r8
 8012c88:	da04      	bge.n	8012c94 <__kernel_rem_pio2+0x3ac>
 8012c8a:	461c      	mov	r4, r3
 8012c8c:	e6a2      	b.n	80129d4 <__kernel_rem_pio2+0xec>
 8012c8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c90:	2301      	movs	r3, #1
 8012c92:	e7e4      	b.n	8012c5e <__kernel_rem_pio2+0x376>
 8012c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012c9a:	f7ed fc5b 	bl	8000554 <__aeabi_i2d>
 8012c9e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ca4:	46ab      	mov	fp, r5
 8012ca6:	461c      	mov	r4, r3
 8012ca8:	f04f 0900 	mov.w	r9, #0
 8012cac:	2600      	movs	r6, #0
 8012cae:	2700      	movs	r7, #0
 8012cb0:	9b05      	ldr	r3, [sp, #20]
 8012cb2:	4599      	cmp	r9, r3
 8012cb4:	dd06      	ble.n	8012cc4 <__kernel_rem_pio2+0x3dc>
 8012cb6:	9b08      	ldr	r3, [sp, #32]
 8012cb8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012cbc:	f108 0801 	add.w	r8, r8, #1
 8012cc0:	9308      	str	r3, [sp, #32]
 8012cc2:	e7df      	b.n	8012c84 <__kernel_rem_pio2+0x39c>
 8012cc4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012cc8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ccc:	f7ed fcac 	bl	8000628 <__aeabi_dmul>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	f7ed faf0 	bl	80002bc <__adddf3>
 8012cdc:	f109 0901 	add.w	r9, r9, #1
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	460f      	mov	r7, r1
 8012ce4:	e7e4      	b.n	8012cb0 <__kernel_rem_pio2+0x3c8>
 8012ce6:	3d01      	subs	r5, #1
 8012ce8:	e747      	b.n	8012b7a <__kernel_rem_pio2+0x292>
 8012cea:	ec47 6b10 	vmov	d0, r6, r7
 8012cee:	f1ca 0000 	rsb	r0, sl, #0
 8012cf2:	f000 f949 	bl	8012f88 <scalbn>
 8012cf6:	ec57 6b10 	vmov	r6, r7, d0
 8012cfa:	4ba0      	ldr	r3, [pc, #640]	; (8012f7c <__kernel_rem_pio2+0x694>)
 8012cfc:	ee10 0a10 	vmov	r0, s0
 8012d00:	2200      	movs	r2, #0
 8012d02:	4639      	mov	r1, r7
 8012d04:	f7ed ff16 	bl	8000b34 <__aeabi_dcmpge>
 8012d08:	b1f8      	cbz	r0, 8012d4a <__kernel_rem_pio2+0x462>
 8012d0a:	4b9d      	ldr	r3, [pc, #628]	; (8012f80 <__kernel_rem_pio2+0x698>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4630      	mov	r0, r6
 8012d10:	4639      	mov	r1, r7
 8012d12:	f7ed fc89 	bl	8000628 <__aeabi_dmul>
 8012d16:	f7ed ff37 	bl	8000b88 <__aeabi_d2iz>
 8012d1a:	4680      	mov	r8, r0
 8012d1c:	f7ed fc1a 	bl	8000554 <__aeabi_i2d>
 8012d20:	4b96      	ldr	r3, [pc, #600]	; (8012f7c <__kernel_rem_pio2+0x694>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	f7ed fc80 	bl	8000628 <__aeabi_dmul>
 8012d28:	460b      	mov	r3, r1
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	4639      	mov	r1, r7
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f7ed fac2 	bl	80002b8 <__aeabi_dsub>
 8012d34:	f7ed ff28 	bl	8000b88 <__aeabi_d2iz>
 8012d38:	1c65      	adds	r5, r4, #1
 8012d3a:	ab0c      	add	r3, sp, #48	; 0x30
 8012d3c:	f10a 0a18 	add.w	sl, sl, #24
 8012d40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d44:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012d48:	e71f      	b.n	8012b8a <__kernel_rem_pio2+0x2a2>
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	4639      	mov	r1, r7
 8012d4e:	f7ed ff1b 	bl	8000b88 <__aeabi_d2iz>
 8012d52:	ab0c      	add	r3, sp, #48	; 0x30
 8012d54:	4625      	mov	r5, r4
 8012d56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d5a:	e716      	b.n	8012b8a <__kernel_rem_pio2+0x2a2>
 8012d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8012d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012d62:	f7ed fbf7 	bl	8000554 <__aeabi_i2d>
 8012d66:	4632      	mov	r2, r6
 8012d68:	463b      	mov	r3, r7
 8012d6a:	f7ed fc5d 	bl	8000628 <__aeabi_dmul>
 8012d6e:	4642      	mov	r2, r8
 8012d70:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012d74:	464b      	mov	r3, r9
 8012d76:	4630      	mov	r0, r6
 8012d78:	4639      	mov	r1, r7
 8012d7a:	f7ed fc55 	bl	8000628 <__aeabi_dmul>
 8012d7e:	3c01      	subs	r4, #1
 8012d80:	4606      	mov	r6, r0
 8012d82:	460f      	mov	r7, r1
 8012d84:	e713      	b.n	8012bae <__kernel_rem_pio2+0x2c6>
 8012d86:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012d8a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012d8e:	f7ed fc4b 	bl	8000628 <__aeabi_dmul>
 8012d92:	4602      	mov	r2, r0
 8012d94:	460b      	mov	r3, r1
 8012d96:	4648      	mov	r0, r9
 8012d98:	4651      	mov	r1, sl
 8012d9a:	f7ed fa8f 	bl	80002bc <__adddf3>
 8012d9e:	3701      	adds	r7, #1
 8012da0:	4681      	mov	r9, r0
 8012da2:	468a      	mov	sl, r1
 8012da4:	9b00      	ldr	r3, [sp, #0]
 8012da6:	429f      	cmp	r7, r3
 8012da8:	dc02      	bgt.n	8012db0 <__kernel_rem_pio2+0x4c8>
 8012daa:	9b06      	ldr	r3, [sp, #24]
 8012dac:	429f      	cmp	r7, r3
 8012dae:	ddea      	ble.n	8012d86 <__kernel_rem_pio2+0x49e>
 8012db0:	9a06      	ldr	r2, [sp, #24]
 8012db2:	ab48      	add	r3, sp, #288	; 0x120
 8012db4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8012db8:	e9c6 9a00 	strd	r9, sl, [r6]
 8012dbc:	3c01      	subs	r4, #1
 8012dbe:	e6fa      	b.n	8012bb6 <__kernel_rem_pio2+0x2ce>
 8012dc0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012dc2:	2b02      	cmp	r3, #2
 8012dc4:	dc0b      	bgt.n	8012dde <__kernel_rem_pio2+0x4f6>
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	dc39      	bgt.n	8012e3e <__kernel_rem_pio2+0x556>
 8012dca:	d05d      	beq.n	8012e88 <__kernel_rem_pio2+0x5a0>
 8012dcc:	9b02      	ldr	r3, [sp, #8]
 8012dce:	f003 0007 	and.w	r0, r3, #7
 8012dd2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012dd6:	ecbd 8b02 	vpop	{d8}
 8012dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dde:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012de0:	2b03      	cmp	r3, #3
 8012de2:	d1f3      	bne.n	8012dcc <__kernel_rem_pio2+0x4e4>
 8012de4:	9b05      	ldr	r3, [sp, #20]
 8012de6:	9500      	str	r5, [sp, #0]
 8012de8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012dec:	eb0d 0403 	add.w	r4, sp, r3
 8012df0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8012df4:	46a2      	mov	sl, r4
 8012df6:	9b00      	ldr	r3, [sp, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f1aa 0a08 	sub.w	sl, sl, #8
 8012dfe:	dc69      	bgt.n	8012ed4 <__kernel_rem_pio2+0x5ec>
 8012e00:	46aa      	mov	sl, r5
 8012e02:	f1ba 0f01 	cmp.w	sl, #1
 8012e06:	f1a4 0408 	sub.w	r4, r4, #8
 8012e0a:	f300 8083 	bgt.w	8012f14 <__kernel_rem_pio2+0x62c>
 8012e0e:	9c05      	ldr	r4, [sp, #20]
 8012e10:	ab48      	add	r3, sp, #288	; 0x120
 8012e12:	441c      	add	r4, r3
 8012e14:	2000      	movs	r0, #0
 8012e16:	2100      	movs	r1, #0
 8012e18:	2d01      	cmp	r5, #1
 8012e1a:	f300 809a 	bgt.w	8012f52 <__kernel_rem_pio2+0x66a>
 8012e1e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8012e22:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012e26:	f1bb 0f00 	cmp.w	fp, #0
 8012e2a:	f040 8098 	bne.w	8012f5e <__kernel_rem_pio2+0x676>
 8012e2e:	9b04      	ldr	r3, [sp, #16]
 8012e30:	e9c3 7800 	strd	r7, r8, [r3]
 8012e34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012e38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012e3c:	e7c6      	b.n	8012dcc <__kernel_rem_pio2+0x4e4>
 8012e3e:	9e05      	ldr	r6, [sp, #20]
 8012e40:	ab48      	add	r3, sp, #288	; 0x120
 8012e42:	441e      	add	r6, r3
 8012e44:	462c      	mov	r4, r5
 8012e46:	2000      	movs	r0, #0
 8012e48:	2100      	movs	r1, #0
 8012e4a:	2c00      	cmp	r4, #0
 8012e4c:	da33      	bge.n	8012eb6 <__kernel_rem_pio2+0x5ce>
 8012e4e:	f1bb 0f00 	cmp.w	fp, #0
 8012e52:	d036      	beq.n	8012ec2 <__kernel_rem_pio2+0x5da>
 8012e54:	4602      	mov	r2, r0
 8012e56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e5a:	9c04      	ldr	r4, [sp, #16]
 8012e5c:	e9c4 2300 	strd	r2, r3, [r4]
 8012e60:	4602      	mov	r2, r0
 8012e62:	460b      	mov	r3, r1
 8012e64:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012e68:	f7ed fa26 	bl	80002b8 <__aeabi_dsub>
 8012e6c:	ae4a      	add	r6, sp, #296	; 0x128
 8012e6e:	2401      	movs	r4, #1
 8012e70:	42a5      	cmp	r5, r4
 8012e72:	da29      	bge.n	8012ec8 <__kernel_rem_pio2+0x5e0>
 8012e74:	f1bb 0f00 	cmp.w	fp, #0
 8012e78:	d002      	beq.n	8012e80 <__kernel_rem_pio2+0x598>
 8012e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e7e:	4619      	mov	r1, r3
 8012e80:	9b04      	ldr	r3, [sp, #16]
 8012e82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e86:	e7a1      	b.n	8012dcc <__kernel_rem_pio2+0x4e4>
 8012e88:	9c05      	ldr	r4, [sp, #20]
 8012e8a:	ab48      	add	r3, sp, #288	; 0x120
 8012e8c:	441c      	add	r4, r3
 8012e8e:	2000      	movs	r0, #0
 8012e90:	2100      	movs	r1, #0
 8012e92:	2d00      	cmp	r5, #0
 8012e94:	da09      	bge.n	8012eaa <__kernel_rem_pio2+0x5c2>
 8012e96:	f1bb 0f00 	cmp.w	fp, #0
 8012e9a:	d002      	beq.n	8012ea2 <__kernel_rem_pio2+0x5ba>
 8012e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	9b04      	ldr	r3, [sp, #16]
 8012ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8012ea8:	e790      	b.n	8012dcc <__kernel_rem_pio2+0x4e4>
 8012eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012eae:	f7ed fa05 	bl	80002bc <__adddf3>
 8012eb2:	3d01      	subs	r5, #1
 8012eb4:	e7ed      	b.n	8012e92 <__kernel_rem_pio2+0x5aa>
 8012eb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012eba:	f7ed f9ff 	bl	80002bc <__adddf3>
 8012ebe:	3c01      	subs	r4, #1
 8012ec0:	e7c3      	b.n	8012e4a <__kernel_rem_pio2+0x562>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	e7c8      	b.n	8012e5a <__kernel_rem_pio2+0x572>
 8012ec8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012ecc:	f7ed f9f6 	bl	80002bc <__adddf3>
 8012ed0:	3401      	adds	r4, #1
 8012ed2:	e7cd      	b.n	8012e70 <__kernel_rem_pio2+0x588>
 8012ed4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ed8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012edc:	9b00      	ldr	r3, [sp, #0]
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	4640      	mov	r0, r8
 8012ee8:	4649      	mov	r1, r9
 8012eea:	f7ed f9e7 	bl	80002bc <__adddf3>
 8012eee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	4649      	mov	r1, r9
 8012efa:	f7ed f9dd 	bl	80002b8 <__aeabi_dsub>
 8012efe:	4632      	mov	r2, r6
 8012f00:	463b      	mov	r3, r7
 8012f02:	f7ed f9db 	bl	80002bc <__adddf3>
 8012f06:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012f0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012f0e:	ed8a 7b00 	vstr	d7, [sl]
 8012f12:	e770      	b.n	8012df6 <__kernel_rem_pio2+0x50e>
 8012f14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012f18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012f1c:	4640      	mov	r0, r8
 8012f1e:	4632      	mov	r2, r6
 8012f20:	463b      	mov	r3, r7
 8012f22:	4649      	mov	r1, r9
 8012f24:	f7ed f9ca 	bl	80002bc <__adddf3>
 8012f28:	e9cd 0100 	strd	r0, r1, [sp]
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4640      	mov	r0, r8
 8012f32:	4649      	mov	r1, r9
 8012f34:	f7ed f9c0 	bl	80002b8 <__aeabi_dsub>
 8012f38:	4632      	mov	r2, r6
 8012f3a:	463b      	mov	r3, r7
 8012f3c:	f7ed f9be 	bl	80002bc <__adddf3>
 8012f40:	ed9d 7b00 	vldr	d7, [sp]
 8012f44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f48:	ed84 7b00 	vstr	d7, [r4]
 8012f4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012f50:	e757      	b.n	8012e02 <__kernel_rem_pio2+0x51a>
 8012f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012f56:	f7ed f9b1 	bl	80002bc <__adddf3>
 8012f5a:	3d01      	subs	r5, #1
 8012f5c:	e75c      	b.n	8012e18 <__kernel_rem_pio2+0x530>
 8012f5e:	9b04      	ldr	r3, [sp, #16]
 8012f60:	9a04      	ldr	r2, [sp, #16]
 8012f62:	601f      	str	r7, [r3, #0]
 8012f64:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012f68:	605c      	str	r4, [r3, #4]
 8012f6a:	609d      	str	r5, [r3, #8]
 8012f6c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012f70:	60d3      	str	r3, [r2, #12]
 8012f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f76:	6110      	str	r0, [r2, #16]
 8012f78:	6153      	str	r3, [r2, #20]
 8012f7a:	e727      	b.n	8012dcc <__kernel_rem_pio2+0x4e4>
 8012f7c:	41700000 	.word	0x41700000
 8012f80:	3e700000 	.word	0x3e700000
 8012f84:	00000000 	.word	0x00000000

08012f88 <scalbn>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	ec55 4b10 	vmov	r4, r5, d0
 8012f8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012f92:	4606      	mov	r6, r0
 8012f94:	462b      	mov	r3, r5
 8012f96:	b999      	cbnz	r1, 8012fc0 <scalbn+0x38>
 8012f98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f9c:	4323      	orrs	r3, r4
 8012f9e:	d03f      	beq.n	8013020 <scalbn+0x98>
 8012fa0:	4b35      	ldr	r3, [pc, #212]	; (8013078 <scalbn+0xf0>)
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	ee10 0a10 	vmov	r0, s0
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f7ed fb3d 	bl	8000628 <__aeabi_dmul>
 8012fae:	4b33      	ldr	r3, [pc, #204]	; (801307c <scalbn+0xf4>)
 8012fb0:	429e      	cmp	r6, r3
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	460d      	mov	r5, r1
 8012fb6:	da10      	bge.n	8012fda <scalbn+0x52>
 8012fb8:	a327      	add	r3, pc, #156	; (adr r3, 8013058 <scalbn+0xd0>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	e01f      	b.n	8013000 <scalbn+0x78>
 8012fc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012fc4:	4291      	cmp	r1, r2
 8012fc6:	d10c      	bne.n	8012fe2 <scalbn+0x5a>
 8012fc8:	ee10 2a10 	vmov	r2, s0
 8012fcc:	4620      	mov	r0, r4
 8012fce:	4629      	mov	r1, r5
 8012fd0:	f7ed f974 	bl	80002bc <__adddf3>
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	e022      	b.n	8013020 <scalbn+0x98>
 8012fda:	460b      	mov	r3, r1
 8012fdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012fe0:	3936      	subs	r1, #54	; 0x36
 8012fe2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012fe6:	4296      	cmp	r6, r2
 8012fe8:	dd0d      	ble.n	8013006 <scalbn+0x7e>
 8012fea:	2d00      	cmp	r5, #0
 8012fec:	a11c      	add	r1, pc, #112	; (adr r1, 8013060 <scalbn+0xd8>)
 8012fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ff2:	da02      	bge.n	8012ffa <scalbn+0x72>
 8012ff4:	a11c      	add	r1, pc, #112	; (adr r1, 8013068 <scalbn+0xe0>)
 8012ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ffa:	a319      	add	r3, pc, #100	; (adr r3, 8013060 <scalbn+0xd8>)
 8012ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013000:	f7ed fb12 	bl	8000628 <__aeabi_dmul>
 8013004:	e7e6      	b.n	8012fd4 <scalbn+0x4c>
 8013006:	1872      	adds	r2, r6, r1
 8013008:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801300c:	428a      	cmp	r2, r1
 801300e:	dcec      	bgt.n	8012fea <scalbn+0x62>
 8013010:	2a00      	cmp	r2, #0
 8013012:	dd08      	ble.n	8013026 <scalbn+0x9e>
 8013014:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013018:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801301c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013020:	ec45 4b10 	vmov	d0, r4, r5
 8013024:	bd70      	pop	{r4, r5, r6, pc}
 8013026:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801302a:	da08      	bge.n	801303e <scalbn+0xb6>
 801302c:	2d00      	cmp	r5, #0
 801302e:	a10a      	add	r1, pc, #40	; (adr r1, 8013058 <scalbn+0xd0>)
 8013030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013034:	dac0      	bge.n	8012fb8 <scalbn+0x30>
 8013036:	a10e      	add	r1, pc, #56	; (adr r1, 8013070 <scalbn+0xe8>)
 8013038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801303c:	e7bc      	b.n	8012fb8 <scalbn+0x30>
 801303e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013042:	3236      	adds	r2, #54	; 0x36
 8013044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013048:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801304c:	4620      	mov	r0, r4
 801304e:	4b0c      	ldr	r3, [pc, #48]	; (8013080 <scalbn+0xf8>)
 8013050:	2200      	movs	r2, #0
 8013052:	e7d5      	b.n	8013000 <scalbn+0x78>
 8013054:	f3af 8000 	nop.w
 8013058:	c2f8f359 	.word	0xc2f8f359
 801305c:	01a56e1f 	.word	0x01a56e1f
 8013060:	8800759c 	.word	0x8800759c
 8013064:	7e37e43c 	.word	0x7e37e43c
 8013068:	8800759c 	.word	0x8800759c
 801306c:	fe37e43c 	.word	0xfe37e43c
 8013070:	c2f8f359 	.word	0xc2f8f359
 8013074:	81a56e1f 	.word	0x81a56e1f
 8013078:	43500000 	.word	0x43500000
 801307c:	ffff3cb0 	.word	0xffff3cb0
 8013080:	3c900000 	.word	0x3c900000
 8013084:	00000000 	.word	0x00000000

08013088 <floor>:
 8013088:	ec51 0b10 	vmov	r0, r1, d0
 801308c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013094:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013098:	2e13      	cmp	r6, #19
 801309a:	ee10 5a10 	vmov	r5, s0
 801309e:	ee10 8a10 	vmov	r8, s0
 80130a2:	460c      	mov	r4, r1
 80130a4:	dc31      	bgt.n	801310a <floor+0x82>
 80130a6:	2e00      	cmp	r6, #0
 80130a8:	da14      	bge.n	80130d4 <floor+0x4c>
 80130aa:	a333      	add	r3, pc, #204	; (adr r3, 8013178 <floor+0xf0>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	f7ed f904 	bl	80002bc <__adddf3>
 80130b4:	2200      	movs	r2, #0
 80130b6:	2300      	movs	r3, #0
 80130b8:	f7ed fd46 	bl	8000b48 <__aeabi_dcmpgt>
 80130bc:	b138      	cbz	r0, 80130ce <floor+0x46>
 80130be:	2c00      	cmp	r4, #0
 80130c0:	da53      	bge.n	801316a <floor+0xe2>
 80130c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80130c6:	4325      	orrs	r5, r4
 80130c8:	d052      	beq.n	8013170 <floor+0xe8>
 80130ca:	4c2d      	ldr	r4, [pc, #180]	; (8013180 <floor+0xf8>)
 80130cc:	2500      	movs	r5, #0
 80130ce:	4621      	mov	r1, r4
 80130d0:	4628      	mov	r0, r5
 80130d2:	e024      	b.n	801311e <floor+0x96>
 80130d4:	4f2b      	ldr	r7, [pc, #172]	; (8013184 <floor+0xfc>)
 80130d6:	4137      	asrs	r7, r6
 80130d8:	ea01 0307 	and.w	r3, r1, r7
 80130dc:	4303      	orrs	r3, r0
 80130de:	d01e      	beq.n	801311e <floor+0x96>
 80130e0:	a325      	add	r3, pc, #148	; (adr r3, 8013178 <floor+0xf0>)
 80130e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e6:	f7ed f8e9 	bl	80002bc <__adddf3>
 80130ea:	2200      	movs	r2, #0
 80130ec:	2300      	movs	r3, #0
 80130ee:	f7ed fd2b 	bl	8000b48 <__aeabi_dcmpgt>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d0eb      	beq.n	80130ce <floor+0x46>
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	bfbe      	ittt	lt
 80130fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80130fe:	4133      	asrlt	r3, r6
 8013100:	18e4      	addlt	r4, r4, r3
 8013102:	ea24 0407 	bic.w	r4, r4, r7
 8013106:	2500      	movs	r5, #0
 8013108:	e7e1      	b.n	80130ce <floor+0x46>
 801310a:	2e33      	cmp	r6, #51	; 0x33
 801310c:	dd0b      	ble.n	8013126 <floor+0x9e>
 801310e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013112:	d104      	bne.n	801311e <floor+0x96>
 8013114:	ee10 2a10 	vmov	r2, s0
 8013118:	460b      	mov	r3, r1
 801311a:	f7ed f8cf 	bl	80002bc <__adddf3>
 801311e:	ec41 0b10 	vmov	d0, r0, r1
 8013122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013126:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801312a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801312e:	40df      	lsrs	r7, r3
 8013130:	4238      	tst	r0, r7
 8013132:	d0f4      	beq.n	801311e <floor+0x96>
 8013134:	a310      	add	r3, pc, #64	; (adr r3, 8013178 <floor+0xf0>)
 8013136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313a:	f7ed f8bf 	bl	80002bc <__adddf3>
 801313e:	2200      	movs	r2, #0
 8013140:	2300      	movs	r3, #0
 8013142:	f7ed fd01 	bl	8000b48 <__aeabi_dcmpgt>
 8013146:	2800      	cmp	r0, #0
 8013148:	d0c1      	beq.n	80130ce <floor+0x46>
 801314a:	2c00      	cmp	r4, #0
 801314c:	da0a      	bge.n	8013164 <floor+0xdc>
 801314e:	2e14      	cmp	r6, #20
 8013150:	d101      	bne.n	8013156 <floor+0xce>
 8013152:	3401      	adds	r4, #1
 8013154:	e006      	b.n	8013164 <floor+0xdc>
 8013156:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801315a:	2301      	movs	r3, #1
 801315c:	40b3      	lsls	r3, r6
 801315e:	441d      	add	r5, r3
 8013160:	45a8      	cmp	r8, r5
 8013162:	d8f6      	bhi.n	8013152 <floor+0xca>
 8013164:	ea25 0507 	bic.w	r5, r5, r7
 8013168:	e7b1      	b.n	80130ce <floor+0x46>
 801316a:	2500      	movs	r5, #0
 801316c:	462c      	mov	r4, r5
 801316e:	e7ae      	b.n	80130ce <floor+0x46>
 8013170:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013174:	e7ab      	b.n	80130ce <floor+0x46>
 8013176:	bf00      	nop
 8013178:	8800759c 	.word	0x8800759c
 801317c:	7e37e43c 	.word	0x7e37e43c
 8013180:	bff00000 	.word	0xbff00000
 8013184:	000fffff 	.word	0x000fffff

08013188 <_init>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	bf00      	nop
 801318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318e:	bc08      	pop	{r3}
 8013190:	469e      	mov	lr, r3
 8013192:	4770      	bx	lr

08013194 <_fini>:
 8013194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013196:	bf00      	nop
 8013198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801319a:	bc08      	pop	{r3}
 801319c:	469e      	mov	lr, r3
 801319e:	4770      	bx	lr
