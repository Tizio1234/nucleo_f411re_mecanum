
rover_mecanum_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eff8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800f198  0800f198  0001f198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8b0  0800f8b0  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8b0  0800f8b0  0001f8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8b8  0800f8b8  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8b8  0800f8b8  0001f8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8bc  0800f8bc  0001f8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056e4  20000258  0800fb18  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000593c  0800fb18  0002593c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6e5  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb8  00000000  00000000  0003b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113d  00000000  00000000  00040ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e82  00000000  00000000  00041ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bea  00000000  00000000  00046b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf46  00000000  00000000  0005e751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077f8  00000000  00000000  000fb698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00102e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f180 	.word	0x0800f180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800f180 	.word	0x0800f180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f001 f930 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f820 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fa0c 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001010:	f000 f9ea 	bl	80013e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001014:	f000 f9be 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001018:	f000 f882 	bl	8001120 <MX_TIM1_Init>
  MX_TIM2_Init();
 800101c:	f000 f938 	bl	8001290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001020:	f000 f98e 	bl	8001340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001024:	f004 ff74 	bl	8005f10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <main+0x40>)
 800102a:	2100      	movs	r1, #0
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <main+0x44>)
 800102e:	f004 ffb9 	bl	8005fa4 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <main+0x48>)
 8001036:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001038:	f004 ff8e 	bl	8005f58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x3c>
 800103e:	bf00      	nop
 8001040:	0800f230 	.word	0x0800f230
 8001044:	080015dd 	.word	0x080015dd
 8001048:	200003f4 	.word	0x200003f4

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 ff0f 	bl	8009e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 ff8c 	bl	8002ff0 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010de:	f000 fb67 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f9ee 	bl	80034e0 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 fb51 	bl	80017b0 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f008 fe90 	bl	8009e7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <MX_TIM1_Init+0x168>)
 8001160:	4a4a      	ldr	r2, [pc, #296]	; (800128c <MX_TIM1_Init+0x16c>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_TIM1_Init+0x168>)
 8001166:	2209      	movs	r2, #9
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <MX_TIM1_Init+0x168>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_TIM1_Init+0x168>)
 8001172:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_TIM1_Init+0x168>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_TIM1_Init+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_TIM1_Init+0x168>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	483f      	ldr	r0, [pc, #252]	; (8001288 <MX_TIM1_Init+0x168>)
 800118c:	f002 fbfa 	bl	8003984 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 fb0b 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a4:	4619      	mov	r1, r3
 80011a6:	4838      	ldr	r0, [pc, #224]	; (8001288 <MX_TIM1_Init+0x168>)
 80011a8:	f002 ffb4 	bl	8004114 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 fafd 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b6:	4834      	ldr	r0, [pc, #208]	; (8001288 <MX_TIM1_Init+0x168>)
 80011b8:	f002 fc96 	bl	8003ae8 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011c2:	f000 faf5 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	482c      	ldr	r0, [pc, #176]	; (8001288 <MX_TIM1_Init+0x168>)
 80011d6:	f003 fb65 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f000 fae6 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_TIM1_Init+0x168>)
 800120a:	f002 fec1 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001214:	f000 facc 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2204      	movs	r2, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <MX_TIM1_Init+0x168>)
 8001222:	f002 feb5 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800122c:	f000 fac0 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x168>)
 800123a:	f002 fea9 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001244:	f000 fab4 	bl	80017b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM1_Init+0x168>)
 800126c:	f003 fb88 	bl	8004980 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001276:	f000 fa9b 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM1_Init+0x168>)
 800127c:	f000 fd2e 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000274 	.word	0x20000274
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_TIM2_Init+0xac>)
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM2_Init+0xac>)
 80012bc:	2209      	movs	r2, #9
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM2_Init+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM2_Init+0xac>)
 80012c8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM2_Init+0xac>)
 80012dc:	f002 fc04 	bl	8003ae8 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 fa63 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM2_Init+0xac>)
 80012fa:	f003 fad3 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fa54 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xac>)
 8001320:	f002 fe36 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 fa41 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xac>)
 8001330:	f000 fcd4 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002bc 	.word	0x200002bc

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001378:	f003 fb68 	bl	8004a4c <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 fa15 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000304 	.word	0x20000304
 8001390:	40011000 	.word	0x40011000

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fb3e 	bl	8004a4c <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f9eb 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000034c 	.word	0x2000034c
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2105      	movs	r1, #5
 800140e:	203a      	movs	r0, #58	; 0x3a
 8001410:	f001 f824 	bl	800245c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001414:	203a      	movs	r0, #58	; 0x3a
 8001416:	f001 f83d 	bl	8002494 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <MX_GPIO_Init+0x120>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <MX_GPIO_Init+0x120>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <MX_GPIO_Init+0x120>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_GPIO_Init+0x120>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a39      	ldr	r2, [pc, #228]	; (8001548 <MX_GPIO_Init+0x120>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_GPIO_Init+0x120>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <MX_GPIO_Init+0x120>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <MX_GPIO_Init+0x120>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_GPIO_Init+0x120>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MX_GPIO_Init+0x120>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <MX_GPIO_Init+0x120>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_GPIO_Init+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	21c0      	movs	r1, #192	; 0xc0
 80014b2:	4826      	ldr	r0, [pc, #152]	; (800154c <MX_GPIO_Init+0x124>)
 80014b4:	f001 fd82 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80014be:	4824      	ldr	r0, [pc, #144]	; (8001550 <MX_GPIO_Init+0x128>)
 80014c0:	f001 fd7c 	bl	8002fbc <HAL_GPIO_WritePin>
                          |ROBOT_IN2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROBOT_IN1_A_GPIO_Port, ROBOT_IN1_A_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014ca:	f001 fd77 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014e6:	f001 fbe5 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_A_Pin ROBOT_IN3_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_GPIO_Init+0x124>)
 8001502:	f001 fbd7 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_B_Pin ROBOT_IN1_B_Pin ROBOT_IN3_B_Pin ROBOT_IN2_B_Pin
                           ROBOT_IN2_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 8001506:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800150a:	617b      	str	r3, [r7, #20]
                          |ROBOT_IN2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x128>)
 8001520:	f001 fbc8 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROBOT_IN1_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN1_A_Pin;
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROBOT_IN1_A_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_GPIO_Init+0x12c>)
 800153c:	f001 fbba 	bl	8002cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800

08001558 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b29a      	uxth	r2, r3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <_write+0x28>)
 8001570:	f003 fabc 	bl	8004aec <HAL_UART_Transmit>
	return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000034c 	.word	0x2000034c

08001584 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d116      	bne.n	80015c8 <HAL_UARTEx_RxEventCallback+0x44>
    static uint16_t pos = 0;
    lwrb_advance(&uart_buffer, Size >= pos ? Size - pos : Size - pos + sizeof(uart_buffer_data));
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x50>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d304      	bcc.n	80015ae <HAL_UARTEx_RxEventCallback+0x2a>
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x50>)
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	e005      	b.n	80015ba <HAL_UARTEx_RxEventCallback+0x36>
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x50>)
 80015b2:	8812      	ldrh	r2, [r2, #0]
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_UARTEx_RxEventCallback+0x54>)
 80015be:	f007 fba6 	bl	8008d0e <lwrb_advance>
    pos = Size;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x50>)
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	8013      	strh	r3, [r2, #0]
  }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40011000 	.word	0x40011000
 80015d4:	20000db4 	.word	0x20000db4
 80015d8:	20000ca0 	.word	0x20000ca0

080015dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e0:	b0d0      	sub	sp, #320	; 0x140
 80015e2:	af04      	add	r7, sp, #16
 80015e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ec:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  mecanum_robot_init(&robot);
 80015ee:	485d      	ldr	r0, [pc, #372]	; (8001764 <StartDefaultTask+0x188>)
 80015f0:	f000 f9bd 	bl	800196e <mecanum_robot_init>

  lwrb_init(&uart_buffer, uart_buffer_data, sizeof(uart_buffer_data));
 80015f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f8:	495b      	ldr	r1, [pc, #364]	; (8001768 <StartDefaultTask+0x18c>)
 80015fa:	485c      	ldr	r0, [pc, #368]	; (800176c <StartDefaultTask+0x190>)
 80015fc:	f007 fa06 	bl	8008a0c <lwrb_init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buffer_data, sizeof(uart_buffer_data));
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	4958      	ldr	r1, [pc, #352]	; (8001768 <StartDefaultTask+0x18c>)
 8001606:	485a      	ldr	r0, [pc, #360]	; (8001770 <StartDefaultTask+0x194>)
 8001608:	f003 fafb 	bl	8004c02 <HAL_UARTEx_ReceiveToIdle_DMA>

  size_t full = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  size_t old_full = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  /* Infinite loop */
  for (;;) {
    old_full = full;
 8001618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800161c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    osDelay(2);
 8001620:	2002      	movs	r0, #2
 8001622:	f004 fd51 	bl	80060c8 <osDelay>

    full = lwrb_get_full(&uart_buffer);
 8001626:	4851      	ldr	r0, [pc, #324]	; (800176c <StartDefaultTask+0x190>)
 8001628:	f007 fae2 	bl	8008bf0 <lwrb_get_full>
 800162c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    if (full == old_full && full != UART_BUFFER_SIZE){
 8001630:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001638:	429a      	cmp	r2, r3
 800163a:	d105      	bne.n	8001648 <StartDefaultTask+0x6c>
 800163c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	f040 8087 	bne.w	8001756 <StartDefaultTask+0x17a>
      continue;
    }

    size_t found_start;
    if (lwrb_find(&uart_buffer, packet_start_sequence, sizeof(packet_start_sequence), 0, &found_start) != 1){
 8001648:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2300      	movs	r3, #0
 8001650:	2202      	movs	r2, #2
 8001652:	4948      	ldr	r1, [pc, #288]	; (8001774 <StartDefaultTask+0x198>)
 8001654:	4845      	ldr	r0, [pc, #276]	; (800176c <StartDefaultTask+0x190>)
 8001656:	f007 fbaa 	bl	8008dae <lwrb_find>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d17c      	bne.n	800175a <StartDefaultTask+0x17e>
      continue;
    }

    size_t found_end;
    if (lwrb_find(&uart_buffer, packet_end_sequence, sizeof(packet_end_sequence), found_start + sizeof(packet_start_sequence), &found_end) != 1){
 8001660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001664:	1c9a      	adds	r2, r3, #2
 8001666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	2202      	movs	r2, #2
 8001670:	4941      	ldr	r1, [pc, #260]	; (8001778 <StartDefaultTask+0x19c>)
 8001672:	483e      	ldr	r0, [pc, #248]	; (800176c <StartDefaultTask+0x190>)
 8001674:	f007 fb9b 	bl	8008dae <lwrb_find>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d16f      	bne.n	800175e <StartDefaultTask+0x182>
      continue;
    }

    (void)lwrb_skip(&uart_buffer, found_start + sizeof(packet_start_sequence));
 800167e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001682:	3302      	adds	r3, #2
 8001684:	4619      	mov	r1, r3
 8001686:	4839      	ldr	r0, [pc, #228]	; (800176c <StartDefaultTask+0x190>)
 8001688:	f007 faf1 	bl	8008c6e <lwrb_skip>
    char temp_buff[UART_BUFFER_SIZE];

    size_t read_size = lwrb_read(&uart_buffer, temp_buff, found_end - found_start - sizeof(packet_start_sequence));
 800168c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	1e9a      	subs	r2, r3, #2
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <StartDefaultTask+0x190>)
 80016a0:	f007 f9e5 	bl	8008a6e <lwrb_read>
 80016a4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    (void)lwrb_skip(&uart_buffer, sizeof(packet_end_sequence));
 80016a8:	2102      	movs	r1, #2
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <StartDefaultTask+0x190>)
 80016ac:	f007 fadf 	bl	8008c6e <lwrb_skip>

    printf("Selected packet: %.*s\r\n", read_size, temp_buff);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	461a      	mov	r2, r3
 80016b6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80016ba:	4830      	ldr	r0, [pc, #192]	; (800177c <StartDefaultTask+0x1a0>)
 80016bc:	f008 fb3c 	bl	8009d38 <iprintf>
    float power, angle, angular_speed;
    int res;
    if ((res = sscanf(temp_buff, packet_format, &power, &angle, &angular_speed)) == 3) {
 80016c0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80016c4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80016c8:	f107 000c 	add.w	r0, r7, #12
 80016cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	460b      	mov	r3, r1
 80016d4:	492a      	ldr	r1, [pc, #168]	; (8001780 <StartDefaultTask+0x1a4>)
 80016d6:	f008 fb61 	bl	8009d9c <siscanf>
 80016da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80016de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d131      	bne.n	800174a <StartDefaultTask+0x16e>
      printf("Power: %f, Angle: %f, Angular Speed: %f\r\n", power, angle, angular_speed);
 80016e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff34 	bl	8000558 <__aeabi_f2d>
 80016f0:	4680      	mov	r8, r0
 80016f2:	4689      	mov	r9, r1
 80016f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff2d 	bl	8000558 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff26 	bl	8000558 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001714:	e9cd 4500 	strd	r4, r5, [sp]
 8001718:	4642      	mov	r2, r8
 800171a:	464b      	mov	r3, r9
 800171c:	4819      	ldr	r0, [pc, #100]	; (8001784 <StartDefaultTask+0x1a8>)
 800171e:	f008 fb0b 	bl	8009d38 <iprintf>
      mecanum_robot_move(&robot, power, angle, angular_speed / 5.0f);
 8001722:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8001726:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 800172a:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 800172e:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8001732:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001736:	eeb0 1a46 	vmov.f32	s2, s12
 800173a:	eef0 0a66 	vmov.f32	s1, s13
 800173e:	eeb0 0a47 	vmov.f32	s0, s14
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <StartDefaultTask+0x188>)
 8001744:	f000 f94c 	bl	80019e0 <mecanum_robot_move>
 8001748:	e766      	b.n	8001618 <StartDefaultTask+0x3c>
    } else {
      printf("Wrong packet payload format(%i)\r\n", res);
 800174a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <StartDefaultTask+0x1ac>)
 8001750:	f008 faf2 	bl	8009d38 <iprintf>
 8001754:	e760      	b.n	8001618 <StartDefaultTask+0x3c>
      continue;
 8001756:	bf00      	nop
 8001758:	e75e      	b.n	8001618 <StartDefaultTask+0x3c>
      continue;
 800175a:	bf00      	nop
 800175c:	e75c      	b.n	8001618 <StartDefaultTask+0x3c>
      continue;
 800175e:	bf00      	nop
  for (;;) {
 8001760:	e75a      	b.n	8001618 <StartDefaultTask+0x3c>
 8001762:	bf00      	nop
 8001764:	20000070 	.word	0x20000070
 8001768:	20000cb4 	.word	0x20000cb4
 800176c:	20000ca0 	.word	0x20000ca0
 8001770:	20000304 	.word	0x20000304
 8001774:	0800f254 	.word	0x0800f254
 8001778:	0800f258 	.word	0x0800f258
 800177c:	0800f1a4 	.word	0x0800f1a4
 8001780:	0800f25c 	.word	0x0800f25c
 8001784:	0800f1bc 	.word	0x0800f1bc
 8001788:	0800f1e8 	.word	0x0800f1e8

0800178c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179e:	f000 fd85 	bl	80022ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40014800 	.word	0x40014800

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>

080017ba <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	619a      	str	r2, [r3, #24]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	889b      	ldrh	r3, [r3, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	f001 fbe5 	bl	8002fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6898      	ldr	r0, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	899b      	ldrh	r3, [r3, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	f001 fbdd 	bl	8002fbc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8a9b      	ldrh	r3, [r3, #20]
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f002 fa6b 	bl	8003ce8 <HAL_TIM_PWM_Stop>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	f000 8095 	beq.w	8001960 <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 8001836:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800183a:	ed97 0a00 	vldr	s0, [r7]
 800183e:	f00c fc63 	bl	800e108 <fmaxf>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
 8001846:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f00c fc76 	bl	800e13e <fminf>
 8001852:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 8001856:	edd7 7a00 	vldr	s15, [r7]
 800185a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	bfcc      	ite	gt
 8001864:	2301      	movgt	r3, #1
 8001866:	2300      	movle	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	4619      	mov	r1, r3
 8001876:	f001 fba1 	bl	8002fbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6898      	ldr	r0, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	8999      	ldrh	r1, [r3, #12]
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	f001 fb96 	bl	8002fbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8a9b      	ldrh	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d114      	bne.n	80018c2 <motor_run+0xa8>
 8001898:	edd7 7a00 	vldr	s15, [r7]
 800189c:	eeb0 7ae7 	vabs.f32	s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
 80018c0:	e045      	b.n	800194e <motor_run+0x134>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8a9b      	ldrh	r3, [r3, #20]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d114      	bne.n	80018f4 <motor_run+0xda>
 80018ca:	edd7 7a00 	vldr	s15, [r7]
 80018ce:	eeb0 7ae7 	vabs.f32	s14, s15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	6393      	str	r3, [r2, #56]	; 0x38
 80018f2:	e02c      	b.n	800194e <motor_run+0x134>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	8a9b      	ldrh	r3, [r3, #20]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d114      	bne.n	8001926 <motor_run+0x10c>
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eeb0 7ae7 	vabs.f32	s14, s15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191e:	ee17 3a90 	vmov	r3, s15
 8001922:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001924:	e013      	b.n	800194e <motor_run+0x134>
 8001926:	edd7 7a00 	vldr	s15, [r7]
 800192a:	eeb0 7ae7 	vabs.f32	s14, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8a9b      	ldrh	r3, [r3, #20]
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f002 f915 	bl	8003b88 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 800195e:	e002      	b.n	8001966 <motor_run+0x14c>
		motor_stop(motor);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff3a 	bl	80017da <motor_stop>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <mecanum_robot_init>:

void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot){
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	motor_init(mecanum_robot->fl_motor);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff1d 	bl	80017ba <motor_init>
	motor_init(mecanum_robot->fr_motor);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff18 	bl	80017ba <motor_init>
	motor_init(mecanum_robot->bl_motor);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff13 	bl	80017ba <motor_init>
	motor_init(mecanum_robot->br_motor);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff0e 	bl	80017ba <motor_init>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff11 	bl	80017da <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff0c 	bl	80017da <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff07 	bl	80017da <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff02 	bl	80017da <motor_stop>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	; 0x38
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80019f0:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 80019f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d10a      	bne.n	8001a18 <mecanum_robot_move+0x38>
 8001a02:	edd7 7a00 	vldr	s15, [r7]
 8001a06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d103      	bne.n	8001a18 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff ffc8 	bl	80019a6 <mecanum_robot_stop>
		return;
 8001a16:	e0e4      	b.n	8001be2 <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 8001a18:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001bf0 <mecanum_robot_move+0x210>
 8001a1c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a20:	f00c fb72 	bl	800e108 <fmaxf>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	f00c fb85 	bl	800e13e <fminf>
 8001a34:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fd8d 	bl	8000558 <__aeabi_f2d>
 8001a3e:	a36a      	add	r3, pc, #424	; (adr r3, 8001be8 <mecanum_robot_move+0x208>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc28 	bl	8000298 <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8d2 	bl	8000bf8 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 8001a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5a:	f7fe fd7d 	bl	8000558 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	ec43 2b10 	vmov	d0, r2, r3
 8001a66:	f00c faf7 	bl	800e058 <sin>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8c1 	bl	8000bf8 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 8001a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a7c:	f7fe fd6c 	bl	8000558 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	ec43 2b10 	vmov	d0, r2, r3
 8001a88:	f00c fa92 	bl	800dfb0 <cos>
 8001a8c:	ec53 2b10 	vmov	r2, r3, d0
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f8b0 	bl	8000bf8 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 8001a9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa8:	eef0 7ae7 	vabs.f32	s15, s15
 8001aac:	eef0 0a67 	vmov.f32	s1, s15
 8001ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab4:	f00c fb28 	bl	800e108 <fmaxf>
 8001ab8:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 8001abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ac0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ac4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ac8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad0:	ed97 7a00 	vldr	s14, [r7]
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 8001adc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ae4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ae8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001af0:	edd7 7a00 	vldr	s15, [r7]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 8001afc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b08:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b10:	ed97 7a00 	vldr	s14, [r7]
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 8001b1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b30:	edd7 7a00 	vldr	s15, [r7]
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	dd27      	ble.n	8001baa <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 8001b5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b5e:	edd7 7a00 	vldr	s15, [r7]
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 8001b6a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 8001b7a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b86:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 8001b8a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 8001b9a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fe31 	bl	800181a <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe2a 	bl	800181a <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe23 	bl	800181a <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe1c 	bl	800181a <motor_run>
}
 8001be2:	3738      	adds	r7, #56	; 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	54442d18 	.word	0x54442d18
 8001bec:	3fe921fb 	.word	0x3fe921fb
 8001bf0:	00000000 	.word	0x00000000

08001bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_MspInit+0x54>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_MspInit+0x54>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x54>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_MspInit+0x54>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_MspInit+0x54>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_MspInit+0x54>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	210f      	movs	r1, #15
 8001c36:	f06f 0001 	mvn.w	r0, #1
 8001c3a:	f000 fc0f 	bl	800245c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_TIM_Base_MspInit+0x48>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d115      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_TIM_Base_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_TIM_Base_MspInit+0x4c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_TIM_Base_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2105      	movs	r1, #5
 8001c7e:	201a      	movs	r0, #26
 8001c80:	f000 fbec 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c84:	201a      	movs	r0, #26
 8001c86:	f000 fc05 	bl	8002494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d10d      	bne.n	8001cca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_TIM_MspPostInit+0xb0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d11f      	bne.n	8001d3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ROBOT_ENB_B_Pin|ROBOT_ENA_A_Pin|ROBOT_ENA_B_Pin;
 8001d1a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4817      	ldr	r0, [pc, #92]	; (8001d94 <HAL_TIM_MspPostInit+0xb8>)
 8001d38:	f000 ffbc 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d3c:	e022      	b.n	8001d84 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d46:	d11d      	bne.n	8001d84 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROBOT_ENB_A_Pin;
 8001d64:	2320      	movs	r3, #32
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d74:	2301      	movs	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROBOT_ENB_A_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_TIM_MspPostInit+0xb8>)
 8001d80:	f000 ff98 	bl	8002cb4 <HAL_GPIO_Init>
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_UART_MspInit+0x194>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f040 8083 	bne.w	8001ec2 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6453      	str	r3, [r2, #68]	; 0x44
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a53      	ldr	r2, [pc, #332]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e22:	2307      	movs	r3, #7
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4841      	ldr	r0, [pc, #260]	; (8001f34 <HAL_UART_MspInit+0x19c>)
 8001e2e:	f000 ff41 	bl	8002cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e42:	2307      	movs	r3, #7
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	483a      	ldr	r0, [pc, #232]	; (8001f38 <HAL_UART_MspInit+0x1a0>)
 8001e4e:	f000 ff31 	bl	8002cb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e54:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <HAL_UART_MspInit+0x1a8>)
 8001e56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e94:	4829      	ldr	r0, [pc, #164]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001e96:	f000 fb0b 	bl	80024b0 <HAL_DMA_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001ea0:	f7ff fc86 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001ea8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eaa:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_UART_MspInit+0x1a4>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2105      	movs	r1, #5
 8001eb4:	2025      	movs	r0, #37	; 0x25
 8001eb6:	f000 fad1 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eba:	2025      	movs	r0, #37	; 0x25
 8001ebc:	f000 faea 	bl	8002494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec0:	e030      	b.n	8001f24 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_UART_MspInit+0x1ac>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d12b      	bne.n	8001f24 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eda:	6413      	str	r3, [r2, #64]	; 0x40
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_UART_MspInit+0x198>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f04:	230c      	movs	r3, #12
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f14:	2307      	movs	r3, #7
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_UART_MspInit+0x19c>)
 8001f20:	f000 fec8 	bl	8002cb4 <HAL_GPIO_Init>
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	20000394 	.word	0x20000394
 8001f40:	40026440 	.word	0x40026440
 8001f44:	40004400 	.word	0x40004400

08001f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_InitTick+0xd0>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <HAL_InitTick+0xd0>)
 8001f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f66:	6453      	str	r3, [r2, #68]	; 0x44
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_InitTick+0xd0>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f74:	f107 020c 	add.w	r2, r7, #12
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fcce 	bl	8003920 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f84:	f001 fcb8 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8001f88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_InitTick+0xd4>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9b      	lsrs	r3, r3, #18
 8001f94:	3b01      	subs	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_InitTick+0xd8>)
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_InitTick+0xdc>)
 8001f9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_InitTick+0xd8>)
 8001fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_InitTick+0xd8>)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_InitTick+0xd8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_InitTick+0xd8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_InitTick+0xd8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001fbe:	4818      	ldr	r0, [pc, #96]	; (8002020 <HAL_InitTick+0xd8>)
 8001fc0:	f001 fce0 	bl	8003984 <HAL_TIM_Base_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11b      	bne.n	800200a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001fd2:	4813      	ldr	r0, [pc, #76]	; (8002020 <HAL_InitTick+0xd8>)
 8001fd4:	f001 fd26 	bl	8003a24 <HAL_TIM_Base_Start_IT>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d111      	bne.n	800200a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fe6:	201a      	movs	r0, #26
 8001fe8:	f000 fa54 	bl	8002494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	d808      	bhi.n	8002004 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	201a      	movs	r0, #26
 8001ff8:	f000 fa30 	bl	800245c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0xe0>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e002      	b.n	800200a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800200a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800200e:	4618      	mov	r0, r3
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	431bde83 	.word	0x431bde83
 8002020:	20000db8 	.word	0x20000db8
 8002024:	40014800 	.word	0x40014800
 8002028:	20000084 	.word	0x20000084

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800205e:	f001 fea7 	bl	8003db0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002064:	f001 fea4 	bl	8003db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000274 	.word	0x20000274
 8002070:	20000db8 	.word	0x20000db8

08002074 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <USART1_IRQHandler+0x10>)
 800207a:	f002 fe1f 	bl	8004cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000304 	.word	0x20000304

08002088 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <DMA2_Stream2_IRQHandler+0x10>)
 800208e:	f000 fba7 	bl	80027e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000394 	.word	0x20000394

0800209c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_kill>:

int _kill(int pid, int sig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b6:	f007 ff8b 	bl	8009fd0 <__errno>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2216      	movs	r2, #22
 80020be:	601a      	str	r2, [r3, #0]
  return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_exit>:

void _exit (int status)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ffe7 	bl	80020ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80020de:	e7fe      	b.n	80020de <_exit+0x12>

080020e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e00a      	b.n	8002108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f2:	f3af 8000 	nop.w
 80020f6:	4601      	mov	r1, r0
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	60ba      	str	r2, [r7, #8]
 80020fe:	b2ca      	uxtb	r2, r1
 8002100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbf0      	blt.n	80020f2 <_read+0x12>
  }

  return len;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_close>:
  }
  return len;
}

int _close(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
  return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_isatty>:

int _isatty(int file)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f007 ff0c 	bl	8009fd0 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20020000 	.word	0x20020000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	20000e00 	.word	0x20000e00
 80021ec:	20005940 	.word	0x20005940

080021f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002230:	4c0b      	ldr	r4, [pc, #44]	; (8002260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800223e:	f7ff ffd7 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f007 fecb 	bl	8009fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7fe fedb 	bl	8001000 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800224c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002258:	0800f8c0 	.word	0x0800f8c0
  ldr r2, =_sbss
 800225c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002260:	2000593c 	.word	0x2000593c

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f8d8 	bl	8002446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	2005      	movs	r0, #5
 8002298:	f7ff fe56 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fcaa 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000088 	.word	0x20000088
 80022d0:	20000e04 	.word	0x20000e04

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000e04 	.word	0x20000e04

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff4c 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246e:	f7ff ff61 	bl	8002334 <__NVIC_GetPriorityGrouping>
 8002472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7ff ffb1 	bl	80023e0 <NVIC_EncodePriority>
 800247e:	4602      	mov	r2, r0
 8002480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff80 	bl	800238c <__NVIC_SetPriority>
}
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff54 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ff0a 	bl	80022d4 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e099      	b.n	8002600 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ec:	e00f      	b.n	800250e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ee:	f7ff fef1 	bl	80022d4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d908      	bls.n	800250e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e078      	b.n	8002600 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e8      	bne.n	80024ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_DMA_Init+0x158>)
 8002528:	4013      	ands	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4313      	orrs	r3, r2
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d117      	bne.n	80025d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fb01 	bl	8002bbc <DMA_CheckFifoParam>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ce:	2301      	movs	r3, #1
 80025d0:	e016      	b.n	8002600 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fab8 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	223f      	movs	r2, #63	; 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	f010803f 	.word	0xf010803f

0800260c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Start_IT+0x26>
 800262e:	2302      	movs	r3, #2
 8002630:	e040      	b.n	80026b4 <HAL_DMA_Start_IT+0xa8>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d12f      	bne.n	80026a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa4a 	bl	8002af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0216 	orr.w	r2, r2, #22
 800267a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0208 	orr.w	r2, r2, #8
 8002692:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e005      	b.n	80026b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff fe03 	bl	80022d4 <HAL_GetTick>
 80026ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e052      	b.n	8002794 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0216 	bic.w	r2, r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_DMA_Abort+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0208 	bic.w	r2, r2, #8
 800272c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	e013      	b.n	8002768 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002740:	f7ff fdc8 	bl	80022d4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d90c      	bls.n	8002768 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e015      	b.n	8002794 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e4      	bne.n	8002740 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00c      	b.n	80027d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2205      	movs	r2, #5
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ec:	4b8e      	ldr	r3, [pc, #568]	; (8002a28 <HAL_DMA_IRQHandler+0x248>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8e      	ldr	r2, [pc, #568]	; (8002a2c <HAL_DMA_IRQHandler+0x24c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2208      	movs	r2, #8
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01a      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2208      	movs	r2, #8
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2201      	movs	r2, #1
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2204      	movs	r2, #4
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2204      	movs	r2, #4
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0204 	orr.w	r2, r3, #4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2210      	movs	r2, #16
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d043      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03c      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2210      	movs	r2, #16
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d018      	beq.n	8002922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e01f      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e016      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2220      	movs	r2, #32
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 808f 	beq.w	8002a80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8087 	beq.w	8002a80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2220      	movs	r2, #32
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d136      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0216 	bic.w	r2, r2, #22
 8002998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_DMA_IRQHandler+0x1da>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	223f      	movs	r2, #63	; 0x3f
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d07e      	beq.n	8002aec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
        }
        return;
 80029f6:	e079      	b.n	8002aec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01d      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d031      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e02c      	b.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
 8002a26:	bf00      	nop
 8002a28:	20000080 	.word	0x20000080
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d023      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e01e      	b.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0210 	bic.w	r2, r2, #16
 8002a5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d032      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d022      	beq.n	8002ada <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2205      	movs	r2, #5
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d307      	bcc.n	8002ac8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f2      	bne.n	8002aac <HAL_DMA_IRQHandler+0x2cc>
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ac8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
 8002aea:	e000      	b.n	8002aee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aec:	bf00      	nop
    }
  }
}
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d108      	bne.n	8002b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b32:	e007      	b.n	8002b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3b10      	subs	r3, #16
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d909      	bls.n	8002b92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b90:	e007      	b.n	8002ba2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab
 8002bb8:	0800f284 	.word	0x0800f284

08002bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d856      	bhi.n	8002c8a <DMA_CheckFifoParam+0xce>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <DMA_CheckFifoParam+0x28>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c07 	.word	0x08002c07
 8002bec:	08002bf5 	.word	0x08002bf5
 8002bf0:	08002c8b 	.word	0x08002c8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d046      	beq.n	8002c8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e043      	b.n	8002c8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0e:	d140      	bne.n	8002c92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e03d      	b.n	8002c92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d121      	bne.n	8002c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d837      	bhi.n	8002c96 <DMA_CheckFifoParam+0xda>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <DMA_CheckFifoParam+0x70>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c43 	.word	0x08002c43
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e030      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d025      	beq.n	8002c9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e022      	b.n	8002c9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c62:	e01c      	b.n	8002c9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d903      	bls.n	8002c72 <DMA_CheckFifoParam+0xb6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c70:	e018      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      break;
 8002c76:	e015      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e00b      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e00a      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e008      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e006      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e004      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e002      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e159      	b.n	8002f84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f040 8148 	bne.w	8002f7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d005      	beq.n	8002d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d130      	bne.n	8002d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0201 	and.w	r2, r3, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d017      	beq.n	8002da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d123      	bne.n	8002df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a2 	beq.w	8002f7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <HAL_GPIO_Init+0x2e8>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	4a56      	ldr	r2, [pc, #344]	; (8002f9c <HAL_GPIO_Init+0x2e8>)
 8002e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e48:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4a:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <HAL_GPIO_Init+0x2e8>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e56:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_GPIO_Init+0x2ec>)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a49      	ldr	r2, [pc, #292]	; (8002fa4 <HAL_GPIO_Init+0x2f0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_GPIO_Init+0x202>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a48      	ldr	r2, [pc, #288]	; (8002fa8 <HAL_GPIO_Init+0x2f4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0x1fe>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a47      	ldr	r2, [pc, #284]	; (8002fac <HAL_GPIO_Init+0x2f8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00d      	beq.n	8002eae <HAL_GPIO_Init+0x1fa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a46      	ldr	r2, [pc, #280]	; (8002fb0 <HAL_GPIO_Init+0x2fc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x1f6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a45      	ldr	r2, [pc, #276]	; (8002fb4 <HAL_GPIO_Init+0x300>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_GPIO_Init+0x1f2>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	e008      	b.n	8002eb8 <HAL_GPIO_Init+0x204>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x204>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e004      	b.n	8002eb8 <HAL_GPIO_Init+0x204>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_Init+0x204>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x204>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f002 0203 	and.w	r2, r2, #3
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec8:	4935      	ldr	r1, [pc, #212]	; (8002fa0 <HAL_GPIO_Init+0x2ec>)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f aea2 	bls.w	8002cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3724      	adds	r7, #36	; 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40013c00 	.word	0x40013c00

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e267      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b85      	ldr	r3, [pc, #532]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b82      	ldr	r3, [pc, #520]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e242      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b76      	ldr	r3, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a75      	ldr	r2, [pc, #468]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b70      	ldr	r3, [pc, #448]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6f      	ldr	r2, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6c      	ldr	r2, [pc, #432]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a68      	ldr	r2, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff f914 	bl	80022d4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff f910 	bl	80022d4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e207      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7ff f900 	bl	80022d4 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff f8fc 	bl	80022d4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1f3      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c7      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4937      	ldr	r1, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x244>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7ff f8b5 	bl	80022d4 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316e:	f7ff f8b1 	bl	80022d4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a8      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4925      	ldr	r1, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x244>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f894 	bl	80022d4 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7ff f890 	bl	80022d4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e187      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d036      	beq.n	8003248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x248>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7ff f874 	bl	80022d4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7ff f870 	bl	80022d4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e167      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_OscConfig+0x240>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
 800320e:	e01b      	b.n	8003248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_OscConfig+0x248>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7ff f85d 	bl	80022d4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e00e      	b.n	800323c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7ff f859 	bl	80022d4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d907      	bls.n	800323c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e150      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ea      	bne.n	800321e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8097 	beq.w	8003384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a7c      	ldr	r2, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b7a      	ldr	r3, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b77      	ldr	r3, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003292:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7ff f819 	bl	80022d4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7ff f815 	bl	80022d4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e10c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_OscConfig+0x474>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x2ea>
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a63      	ldr	r2, [pc, #396]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x30c>
 80032e2:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032fc:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	4b55      	ldr	r3, [pc, #340]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a54      	ldr	r2, [pc, #336]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe ffda 	bl	80022d4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe ffd6 	bl	80022d4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0cb      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCC_OscConfig+0x334>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe ffc4 	bl	80022d4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe ffc0 	bl	80022d4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ee      	bne.n	8003350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a1 	beq.w	80034d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d05c      	beq.n	8003454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d141      	bne.n	8003426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe ff94 	bl	80022d4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe ff90 	bl	80022d4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e087      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe ff69 	bl	80022d4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe ff65 	bl	80022d4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e05c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x416>
 8003424:	e054      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x478>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe ff52 	bl	80022d4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe ff4e 	bl	80022d4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e045      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x470>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x444>
 8003452:	e03d      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e038      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x4ec>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d028      	beq.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d121      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0cc      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d90c      	bls.n	800351c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b65      	ldr	r3, [pc, #404]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b63      	ldr	r3, [pc, #396]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0b8      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003534:	4b59      	ldr	r3, [pc, #356]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800353e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	494d      	ldr	r1, [pc, #308]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d044      	beq.n	8003600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e067      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b37      	ldr	r3, [pc, #220]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4934      	ldr	r1, [pc, #208]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fe80 	bl	80022d4 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe fe7c 	bl	80022d4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d20c      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e032      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4916      	ldr	r1, [pc, #88]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	490e      	ldr	r1, [pc, #56]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003666:	f000 f821 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490a      	ldr	r1, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fc5e 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800f26c 	.word	0x0800f26c
 80036a4:	20000080 	.word	0x20000080
 80036a8:	20000084 	.word	0x20000084

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b094      	sub	sp, #80	; 0x50
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	647b      	str	r3, [r7, #68]	; 0x44
 80036b8:	2300      	movs	r3, #0
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036bc:	2300      	movs	r3, #0
 80036be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c4:	4b79      	ldr	r3, [pc, #484]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d00d      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x40>
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f200 80e1 	bhi.w	8003898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036de:	e0db      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b73      	ldr	r3, [pc, #460]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036e4:	e0db      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e6:	4b73      	ldr	r3, [pc, #460]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80036e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ea:	e0d8      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d063      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
 800370c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003714:	633b      	str	r3, [r7, #48]	; 0x30
 8003716:	2300      	movs	r3, #0
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
 800371a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800371e:	4622      	mov	r2, r4
 8003720:	462b      	mov	r3, r5
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	0159      	lsls	r1, r3, #5
 800372c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003730:	0150      	lsls	r0, r2, #5
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4621      	mov	r1, r4
 8003738:	1a51      	subs	r1, r2, r1
 800373a:	6139      	str	r1, [r7, #16]
 800373c:	4629      	mov	r1, r5
 800373e:	eb63 0301 	sbc.w	r3, r3, r1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003750:	4659      	mov	r1, fp
 8003752:	018b      	lsls	r3, r1, #6
 8003754:	4651      	mov	r1, sl
 8003756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800375a:	4651      	mov	r1, sl
 800375c:	018a      	lsls	r2, r1, #6
 800375e:	4651      	mov	r1, sl
 8003760:	ebb2 0801 	subs.w	r8, r2, r1
 8003764:	4659      	mov	r1, fp
 8003766:	eb63 0901 	sbc.w	r9, r3, r1
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377e:	4690      	mov	r8, r2
 8003780:	4699      	mov	r9, r3
 8003782:	4623      	mov	r3, r4
 8003784:	eb18 0303 	adds.w	r3, r8, r3
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	462b      	mov	r3, r5
 800378c:	eb49 0303 	adc.w	r3, r9, r3
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800379e:	4629      	mov	r1, r5
 80037a0:	024b      	lsls	r3, r1, #9
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a8:	4621      	mov	r1, r4
 80037aa:	024a      	lsls	r2, r1, #9
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037bc:	f7fd fa6c 	bl	8000c98 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	e058      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	2200      	movs	r2, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	4611      	mov	r1, r2
 80037d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	f04f 0000 	mov.w	r0, #0
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	0159      	lsls	r1, r3, #5
 80037f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f6:	0150      	lsls	r0, r2, #5
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4641      	mov	r1, r8
 80037fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003802:	4649      	mov	r1, r9
 8003804:	eb63 0b01 	sbc.w	fp, r3, r1
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800381c:	ebb2 040a 	subs.w	r4, r2, sl
 8003820:	eb63 050b 	sbc.w	r5, r3, fp
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	00eb      	lsls	r3, r5, #3
 800382e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	4614      	mov	r4, r2
 8003836:	461d      	mov	r5, r3
 8003838:	4643      	mov	r3, r8
 800383a:	18e3      	adds	r3, r4, r3
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	464b      	mov	r3, r9
 8003840:	eb45 0303 	adc.w	r3, r5, r3
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003852:	4629      	mov	r1, r5
 8003854:	028b      	lsls	r3, r1, #10
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800385c:	4621      	mov	r1, r4
 800385e:	028a      	lsls	r2, r1, #10
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003866:	2200      	movs	r2, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	61fa      	str	r2, [r7, #28]
 800386c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003870:	f7fd fa12 	bl	8000c98 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_GetSysClockFreq+0x200>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	3301      	adds	r3, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800388c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003896:	e002      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800389c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3750      	adds	r7, #80	; 0x50
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000080 	.word	0x20000080

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	0800f27c 	.word	0x0800f27c

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	0800f27c 	.word	0x0800f27c

08003920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	220f      	movs	r2, #15
 800392e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_GetClockConfig+0x5c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCC_GetClockConfig+0x5c>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	08db      	lsrs	r3, r3, #3
 800395a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_RCC_GetClockConfig+0x60>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0207 	and.w	r2, r3, #7
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	601a      	str	r2, [r3, #0]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	40023c00 	.word	0x40023c00

08003984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f94e 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fc96 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e044      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x6c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d013      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x6c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x6c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_TIM_Base_Start_IT+0xb8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x6c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x6c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d010      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40014000 	.word	0x40014000

08003ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe f8c4 	bl	8001c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fbe4 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x24>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e022      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d109      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x3e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e015      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x58>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e008      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e068      	b.n	8003ccc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x82>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	e013      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x92>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	e00b      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	e003      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fe0c 	bl	8004858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <HAL_TIM_PWM_Start+0x14c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d107      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_TIM_PWM_Start+0x14c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_TIM_PWM_Start+0x150>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_TIM_PWM_Start+0x154>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_TIM_PWM_Start+0x158>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x10e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <HAL_TIM_PWM_Start+0x15c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d010      	beq.n	8003cca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	e007      	b.n	8003cca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40014000 	.word	0x40014000

08003ce8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fdac 	bl	8004858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_TIM_PWM_Stop+0xc4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d117      	bne.n	8003d3a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_TIM_PWM_Stop+0x52>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	f240 4344 	movw	r3, #1092	; 0x444
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_PWM_Stop+0x52>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <HAL_TIM_PWM_Stop+0x82>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	f240 4344 	movw	r3, #1092	; 0x444
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_TIM_PWM_Stop+0x82>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_PWM_Stop+0x92>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_PWM_Stop+0xba>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Stop+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d88:	e00b      	b.n	8003da2 <HAL_TIM_PWM_Stop+0xba>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_PWM_Stop+0xb2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	e003      	b.n	8003da2 <HAL_TIM_PWM_Stop+0xba>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40010000 	.word	0x40010000

08003db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0202 	mvn.w	r2, #2
 8003de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa5b 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa4d 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa5e 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0204 	mvn.w	r2, #4
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa35 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa27 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa38 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0208 	mvn.w	r2, #8
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa0f 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa01 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa12 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0210 	mvn.w	r2, #16
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9e9 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f9db 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f9ec 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0201 	mvn.w	r2, #1
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fc38 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd7c 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9bd 	bl	80042de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0220 	mvn.w	r2, #32
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fd4e 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0ae      	b.n	800410c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	f200 809f 	bhi.w	80040fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	080040fd 	.word	0x080040fd
 8003fcc:	080040fd 	.word	0x080040fd
 8003fd0:	080040fd 	.word	0x080040fd
 8003fd4:	08004039 	.word	0x08004039
 8003fd8:	080040fd 	.word	0x080040fd
 8003fdc:	080040fd 	.word	0x080040fd
 8003fe0:	080040fd 	.word	0x080040fd
 8003fe4:	0800407b 	.word	0x0800407b
 8003fe8:	080040fd 	.word	0x080040fd
 8003fec:	080040fd 	.word	0x080040fd
 8003ff0:	080040fd 	.word	0x080040fd
 8003ff4:	080040bb 	.word	0x080040bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fa04 	bl	800440c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0208 	orr.w	r2, r2, #8
 8004012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0204 	bic.w	r2, r2, #4
 8004022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	619a      	str	r2, [r3, #24]
      break;
 8004036:	e064      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa4a 	bl	80044d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	619a      	str	r2, [r3, #24]
      break;
 8004078:	e043      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fa95 	bl	80045b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0208 	orr.w	r2, r2, #8
 8004094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0204 	bic.w	r2, r2, #4
 80040a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
      break;
 80040b8:	e023      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fadf 	bl	8004684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	021a      	lsls	r2, r3, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	61da      	str	r2, [r3, #28]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_ConfigClockSource+0x1c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0b4      	b.n	800429a <HAL_TIM_ConfigClockSource+0x186>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004168:	d03e      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xd4>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	f200 8087 	bhi.w	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	f000 8086 	beq.w	8004286 <HAL_TIM_ConfigClockSource+0x172>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d87f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b70      	cmp	r3, #112	; 0x70
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xa6>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d87b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b60      	cmp	r3, #96	; 0x60
 800418a:	d050      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x11a>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d877      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d03c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xfa>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d873      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d058      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x13a>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d86f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d064      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d86b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d060      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d867      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d05a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	e062      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	f000 fb25 	bl	8004818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04f      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	f000 fb0e 	bl	8004818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e03c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 fa82 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	; 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fadb 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 800422c:	e02c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 faa1 	bl	8004782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	; 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 facb 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 800424c:	e01c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	461a      	mov	r2, r3
 800425c:	f000 fa62 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fabb 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 800426c:	e00c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 fab2 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 800427e:	e003      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e000      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3a      	ldr	r2, [pc, #232]	; (80043f0 <TIM_Base_SetConfig+0xfc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <TIM_Base_SetConfig+0x100>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a36      	ldr	r2, [pc, #216]	; (80043f8 <TIM_Base_SetConfig+0x104>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a35      	ldr	r2, [pc, #212]	; (80043fc <TIM_Base_SetConfig+0x108>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <TIM_Base_SetConfig+0xfc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <TIM_Base_SetConfig+0x100>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <TIM_Base_SetConfig+0x104>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <TIM_Base_SetConfig+0x108>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a25      	ldr	r2, [pc, #148]	; (8004400 <TIM_Base_SetConfig+0x10c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <TIM_Base_SetConfig+0x110>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <TIM_Base_SetConfig+0x114>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <TIM_Base_SetConfig+0xfc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	611a      	str	r2, [r3, #16]
  }
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f023 0201 	bic.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0302 	bic.w	r3, r3, #2
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <TIM_OC1_SetConfig+0xc8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10c      	bne.n	8004482 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0308 	bic.w	r3, r3, #8
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <TIM_OC1_SetConfig+0xc8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d111      	bne.n	80044ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40010000 	.word	0x40010000

080044d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f023 0210 	bic.w	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0320 	bic.w	r3, r3, #32
 8004522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <TIM_OC2_SetConfig+0xd4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10d      	bne.n	8004554 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a15      	ldr	r2, [pc, #84]	; (80045ac <TIM_OC2_SetConfig+0xd4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d113      	bne.n	8004584 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800456a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000

080045b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <TIM_OC3_SetConfig+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10d      	bne.n	800462a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <TIM_OC3_SetConfig+0xd0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000

08004684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	031b      	lsls	r3, r3, #12
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <TIM_OC4_SetConfig+0x9c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d109      	bne.n	80046f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40010000 	.word	0x40010000

08004724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 030a 	bic.w	r3, r3, #10
 8004760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004782:	b480      	push	{r7}
 8004784:	b087      	sub	sp, #28
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f023 0210 	bic.w	r2, r3, #16
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	031b      	lsls	r3, r3, #12
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f043 0307 	orr.w	r3, r3, #7
 8004804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	431a      	orrs	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2201      	movs	r2, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e050      	b.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d013      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a16      	ldr	r2, [pc, #88]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10c      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40014000 	.word	0x40014000

08004980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e03d      	b.n	8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e042      	b.n	8004ae4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd f990 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	; 0x24
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 ff85 	bl	80059a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d175      	bne.n	8004bf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_UART_Transmit+0x2c>
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e06e      	b.n	8004bfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2221      	movs	r2, #33	; 0x21
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2a:	f7fd fbd3 	bl	80022d4 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d108      	bne.n	8004b58 <HAL_UART_Transmit+0x6c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e003      	b.n	8004b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b60:	e02e      	b.n	8004bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	; 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fc5d 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e03a      	b.n	8004bfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1cb      	bne.n	8004b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2140      	movs	r1, #64	; 0x40
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fc29 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e006      	b.n	8004bfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b08c      	sub	sp, #48	; 0x30
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d14a      	bne.n	8004cb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e043      	b.n	8004cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fc4e 	bl	80054e0 <UART_Start_Receive_DMA>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12c      	bne.n	8004cac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d125      	bne.n	8004ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f043 0310 	orr.w	r3, r3, #16
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c90:	627a      	str	r2, [r7, #36]	; 0x24
 8004c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004ca4:	e002      	b.n	8004cac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cb0:	e000      	b.n	8004cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3730      	adds	r7, #48	; 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b0ba      	sub	sp, #232	; 0xe8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_UART_IRQHandler+0x66>
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fd81 	bl	8005822 <UART_Receive_IT>
      return;
 8004d20:	e25b      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80de 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x22c>
 8004d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80d1 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xae>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_UART_IRQHandler+0xd2>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f043 0202 	orr.w	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_UART_IRQHandler+0xf6>
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f043 0204 	orr.w	r2, r3, #4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <HAL_UART_IRQHandler+0x126>
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f043 0208 	orr.w	r2, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 81f2 	beq.w	80051d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14e>
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fd0c 	bl	8005822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_UART_IRQHandler+0x17a>
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d04f      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc14 	bl	8005664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d141      	bne.n	8004ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1d9      	bne.n	8004e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d013      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	4a7e      	ldr	r2, [pc, #504]	; (800509c <HAL_UART_IRQHandler+0x3e0>)
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fc76 	bl	800279c <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	e00e      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9a8 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	e00a      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9a4 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	e006      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9a0 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ee2:	e175      	b.n	80051d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	bf00      	nop
    return;
 8004ee6:	e173      	b.n	80051d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	f040 814f 	bne.w	8005190 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8148 	beq.w	8005190 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8141 	beq.w	8005190 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	f040 80b6 	bne.w	80050a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8145 	beq.w	80051d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f52:	429a      	cmp	r2, r3
 8004f54:	f080 813e 	bcs.w	80051d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	f000 8088 	beq.w	800507e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1d9      	bne.n	8004f6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e1      	bne.n	8004fba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800501a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800501c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e3      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800504c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005060:	65ba      	str	r2, [r7, #88]	; 0x58
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e3      	bne.n	800503c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	4618      	mov	r0, r3
 800507a:	f7fd fb1f 	bl	80026bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508c:	b29b      	uxth	r3, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	b29b      	uxth	r3, r3
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc fa75 	bl	8001584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800509a:	e09b      	b.n	80051d4 <HAL_UART_IRQHandler+0x518>
 800509c:	0800572b 	.word	0x0800572b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808e 	beq.w	80051d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8089 	beq.w	80051d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ea:	647a      	str	r2, [r7, #68]	; 0x44
 80050ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e3      	bne.n	80050c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	623b      	str	r3, [r7, #32]
   return(result);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005122:	633a      	str	r2, [r7, #48]	; 0x30
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e3      	bne.n	80050fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e3      	bne.n	8005144 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7fc f9fb 	bl	8001584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800518e:	e023      	b.n	80051d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x4f4>
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fad2 	bl	8005752 <UART_Transmit_IT>
    return;
 80051ae:	e014      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <HAL_UART_IRQHandler+0x51e>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb12 	bl	80057f2 <UART_EndTransmit_IT>
    return;
 80051ce:	e004      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
    return;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
      return;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
      return;
 80051d8:	bf00      	nop
  }
}
 80051da:	37e8      	adds	r7, #232	; 0xe8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b09c      	sub	sp, #112	; 0x70
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d172      	bne.n	8005332 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	2200      	movs	r2, #0
 8005250:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005268:	66bb      	str	r3, [r7, #104]	; 0x68
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005272:	65ba      	str	r2, [r7, #88]	; 0x58
 8005274:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e5      	bne.n	8005252 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	667b      	str	r3, [r7, #100]	; 0x64
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3314      	adds	r3, #20
 80052a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052a6:	647a      	str	r2, [r7, #68]	; 0x44
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d0:	663b      	str	r3, [r7, #96]	; 0x60
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052da:	633a      	str	r2, [r7, #48]	; 0x30
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d119      	bne.n	8005332 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	60fb      	str	r3, [r7, #12]
   return(result);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800531e:	61fa      	str	r2, [r7, #28]
 8005320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	617b      	str	r3, [r7, #20]
   return(result);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e5      	bne.n	80052fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005334:	2200      	movs	r2, #0
 8005336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005344:	4619      	mov	r1, r3
 8005346:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005348:	f7fc f91c 	bl	8001584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800534c:	e002      	b.n	8005354 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800534e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005350:	f7ff ff50 	bl	80051f4 <HAL_UART_RxCpltCallback>
}
 8005354:	bf00      	nop
 8005356:	3770      	adds	r7, #112	; 0x70
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d108      	bne.n	800538a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	4619      	mov	r1, r3
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7fc f8fe 	bl	8001584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005388:	e002      	b.n	8005390 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff ff3c 	bl	8005208 <HAL_UART_RxHalfCpltCallback>
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b21      	cmp	r3, #33	; 0x21
 80053ca:	d108      	bne.n	80053de <UART_DMAError+0x46>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053d8:	68b8      	ldr	r0, [r7, #8]
 80053da:	f000 f91b 	bl	8005614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b22      	cmp	r3, #34	; 0x22
 80053fe:	d108      	bne.n	8005412 <UART_DMAError+0x7a>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800540c:	68b8      	ldr	r0, [r7, #8]
 800540e:	f000 f929 	bl	8005664 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f043 0210 	orr.w	r2, r3, #16
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7ff fefc 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	e03b      	b.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005444:	d037      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fc ff45 	bl	80022d4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <UART_WaitOnFlagUntilTimeout+0x30>
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e03a      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d023      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b80      	cmp	r3, #128	; 0x80
 8005472:	d020      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d01d      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b08      	cmp	r3, #8
 8005486:	d116      	bne.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f8e0 	bl	8005664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2208      	movs	r2, #8
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e00f      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	bf0c      	ite	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2300      	movne	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d0b4      	beq.n	800543e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b098      	sub	sp, #96	; 0x60
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2222      	movs	r2, #34	; 0x22
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	4a3e      	ldr	r2, [pc, #248]	; (8005608 <UART_Start_Receive_DMA+0x128>)
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	4a3d      	ldr	r2, [pc, #244]	; (800560c <UART_Start_Receive_DMA+0x12c>)
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551c:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <UART_Start_Receive_DMA+0x130>)
 800551e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	2200      	movs	r2, #0
 8005526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	f7fd f864 	bl	800260c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d019      	beq.n	8005596 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005578:	65bb      	str	r3, [r7, #88]	; 0x58
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005582:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005584:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	617b      	str	r3, [r7, #20]
   return(result);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055ea:	627a      	str	r2, [r7, #36]	; 0x24
 80055ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6a39      	ldr	r1, [r7, #32]
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3760      	adds	r7, #96	; 0x60
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	08005231 	.word	0x08005231
 800560c:	0800535d 	.word	0x0800535d
 8005610:	08005399 	.word	0x08005399

08005614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60bb      	str	r3, [r7, #8]
   return(result);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	61ba      	str	r2, [r7, #24]
 800563e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005658:	bf00      	nop
 800565a:	3724      	adds	r7, #36	; 0x24
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b095      	sub	sp, #84	; 0x54
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800568c:	643a      	str	r2, [r7, #64]	; 0x40
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d119      	bne.n	8005710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0310 	bic.w	r3, r3, #16
 80056f2:	647b      	str	r3, [r7, #68]	; 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056fc:	61ba      	str	r2, [r7, #24]
 80056fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	613b      	str	r3, [r7, #16]
   return(result);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800571e:	bf00      	nop
 8005720:	3754      	adds	r7, #84	; 0x54
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fd69 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b21      	cmp	r3, #33	; 0x21
 8005764:	d13e      	bne.n	80057e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	d114      	bne.n	800579a <UART_Transmit_IT+0x48>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d110      	bne.n	800579a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]
 8005798:	e008      	b.n	80057ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6211      	str	r1, [r2, #32]
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fce4 	bl	80051e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b08c      	sub	sp, #48	; 0x30
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b22      	cmp	r3, #34	; 0x22
 8005834:	f040 80ae 	bne.w	8005994 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005840:	d117      	bne.n	8005872 <UART_Receive_IT+0x50>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d113      	bne.n	8005872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005860:	b29a      	uxth	r2, r3
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	1c9a      	adds	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
 8005870:	e026      	b.n	80058c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d007      	beq.n	8005896 <UART_Receive_IT+0x74>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <UART_Receive_IT+0x82>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e008      	b.n	80058b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d15d      	bne.n	8005990 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0220 	bic.w	r2, r2, #32
 80058e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	2b01      	cmp	r3, #1
 8005918:	d135      	bne.n	8005986 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f023 0310 	bic.w	r3, r3, #16
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	623a      	str	r2, [r7, #32]
 8005942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	61bb      	str	r3, [r7, #24]
   return(result);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d10a      	bne.n	8005978 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fe00 	bl	8001584 <HAL_UARTEx_RxEventCallback>
 8005984:	e002      	b.n	800598c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fc34 	bl	80051f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e002      	b.n	8005996 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3730      	adds	r7, #48	; 0x30
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a4:	b0c0      	sub	sp, #256	; 0x100
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	ea40 0301 	orr.w	r3, r0, r1
 80059c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	431a      	orrs	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059f8:	f021 010c 	bic.w	r1, r1, #12
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a06:	430b      	orrs	r3, r1
 8005a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1a:	6999      	ldr	r1, [r3, #24]
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	ea40 0301 	orr.w	r3, r0, r1
 8005a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <UART_SetConfig+0x2cc>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d005      	beq.n	8005a40 <UART_SetConfig+0xa0>
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	; (8005c70 <UART_SetConfig+0x2d0>)
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d104      	bne.n	8005a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a40:	f7fd ff5a 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8005a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a48:	e003      	b.n	8005a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a4a:	f7fd ff41 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8005a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5c:	f040 810c 	bne.w	8005c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	1891      	adds	r1, r2, r2
 8005a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a7a:	415b      	adcs	r3, r3
 8005a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a82:	4621      	mov	r1, r4
 8005a84:	eb12 0801 	adds.w	r8, r2, r1
 8005a88:	4629      	mov	r1, r5
 8005a8a:	eb43 0901 	adc.w	r9, r3, r1
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa2:	4690      	mov	r8, r2
 8005aa4:	4699      	mov	r9, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	eb18 0303 	adds.w	r3, r8, r3
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	eb49 0303 	adc.w	r3, r9, r3
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ace:	460b      	mov	r3, r1
 8005ad0:	18db      	adds	r3, r3, r3
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	657b      	str	r3, [r7, #84]	; 0x54
 8005adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ae4:	f7fb f8d8 	bl	8000c98 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b61      	ldr	r3, [pc, #388]	; (8005c74 <UART_SetConfig+0x2d4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b10:	415b      	adcs	r3, r3
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b18:	4641      	mov	r1, r8
 8005b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0b01 	adc.w	fp, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b38:	4692      	mov	sl, r2
 8005b3a:	469b      	mov	fp, r3
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b46:	464b      	mov	r3, r9
 8005b48:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b64:	460b      	mov	r3, r1
 8005b66:	18db      	adds	r3, r3, r3
 8005b68:	643b      	str	r3, [r7, #64]	; 0x40
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	eb42 0303 	adc.w	r3, r2, r3
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
 8005b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b7a:	f7fb f88d 	bl	8000c98 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <UART_SetConfig+0x2d4>)
 8005b86:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2264      	movs	r2, #100	; 0x64
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	1acb      	subs	r3, r1, r3
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <UART_SetConfig+0x2d4>)
 8005b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ba8:	441c      	add	r4, r3
 8005baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	1891      	adds	r1, r2, r2
 8005bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bc4:	415b      	adcs	r3, r3
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bcc:	4641      	mov	r1, r8
 8005bce:	1851      	adds	r1, r2, r1
 8005bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	414b      	adcs	r3, r1
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005be4:	4659      	mov	r1, fp
 8005be6:	00cb      	lsls	r3, r1, #3
 8005be8:	4651      	mov	r1, sl
 8005bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bee:	4651      	mov	r1, sl
 8005bf0:	00ca      	lsls	r2, r1, #3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c00:	464b      	mov	r3, r9
 8005c02:	460a      	mov	r2, r1
 8005c04:	eb42 0303 	adc.w	r3, r2, r3
 8005c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c20:	460b      	mov	r3, r1
 8005c22:	18db      	adds	r3, r3, r3
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c26:	4613      	mov	r3, r2
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c36:	f7fb f82f 	bl	8000c98 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <UART_SetConfig+0x2d4>)
 8005c40:	fba3 1302 	umull	r1, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2164      	movs	r1, #100	; 0x64
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	3332      	adds	r3, #50	; 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <UART_SetConfig+0x2d4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 0207 	and.w	r2, r3, #7
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4422      	add	r2, r4
 8005c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c68:	e106      	b.n	8005e78 <UART_SetConfig+0x4d8>
 8005c6a:	bf00      	nop
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	40011400 	.word	0x40011400
 8005c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	1891      	adds	r1, r2, r2
 8005c90:	6239      	str	r1, [r7, #32]
 8005c92:	415b      	adcs	r3, r3
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	1854      	adds	r4, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb43 0501 	adc.w	r5, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	00eb      	lsls	r3, r5, #3
 8005cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb2:	00e2      	lsls	r2, r4, #3
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	18e3      	adds	r3, r4, r3
 8005cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	eb45 0303 	adc.w	r3, r5, r3
 8005cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	4621      	mov	r1, r4
 8005cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	008a      	lsls	r2, r1, #2
 8005cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cf8:	f7fa ffce 	bl	8000c98 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4b60      	ldr	r3, [pc, #384]	; (8005e84 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2302 	umull	r2, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	011c      	lsls	r4, r3, #4
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	1891      	adds	r1, r2, r2
 8005d22:	61b9      	str	r1, [r7, #24]
 8005d24:	415b      	adcs	r3, r3
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	1851      	adds	r1, r2, r1
 8005d30:	6139      	str	r1, [r7, #16]
 8005d32:	4649      	mov	r1, r9
 8005d34:	414b      	adcs	r3, r1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d44:	4659      	mov	r1, fp
 8005d46:	00cb      	lsls	r3, r1, #3
 8005d48:	4651      	mov	r1, sl
 8005d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4e:	4651      	mov	r1, sl
 8005d50:	00ca      	lsls	r2, r1, #3
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	189b      	adds	r3, r3, r2
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d84:	4649      	mov	r1, r9
 8005d86:	008b      	lsls	r3, r1, #2
 8005d88:	4641      	mov	r1, r8
 8005d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8e:	4641      	mov	r1, r8
 8005d90:	008a      	lsls	r2, r1, #2
 8005d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d96:	f7fa ff7f 	bl	8000c98 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <UART_SetConfig+0x4e4>)
 8005da2:	fba3 2301 	umull	r2, r3, r3, r1
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2264      	movs	r2, #100	; 0x64
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	1acb      	subs	r3, r1, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	3332      	adds	r3, #50	; 0x32
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <UART_SetConfig+0x4e4>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc0:	441c      	add	r4, r3
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8005dca:	677a      	str	r2, [r7, #116]	; 0x74
 8005dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de0:	4641      	mov	r1, r8
 8005de2:	1851      	adds	r1, r2, r1
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	4649      	mov	r1, r9
 8005de8:	414b      	adcs	r3, r1
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	00cb      	lsls	r3, r1, #3
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e02:	4651      	mov	r1, sl
 8005e04:	00ca      	lsls	r2, r1, #3
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e12:	464b      	mov	r3, r9
 8005e14:	460a      	mov	r2, r1
 8005e16:	eb42 0303 	adc.w	r3, r2, r3
 8005e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
 8005e26:	667a      	str	r2, [r7, #100]	; 0x64
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e34:	4649      	mov	r1, r9
 8005e36:	008b      	lsls	r3, r1, #2
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3e:	4641      	mov	r1, r8
 8005e40:	008a      	lsls	r2, r1, #2
 8005e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e46:	f7fa ff27 	bl	8000c98 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <UART_SetConfig+0x4e4>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	; 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	; 0x32
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <UART_SetConfig+0x4e4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4422      	add	r2, r4
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <__NVIC_SetPriority>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db0a      	blt.n	8005eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	490c      	ldr	r1, [pc, #48]	; (8005ed4 <__NVIC_SetPriority+0x4c>)
 8005ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea6:	0112      	lsls	r2, r2, #4
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	440b      	add	r3, r1
 8005eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005eb0:	e00a      	b.n	8005ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4908      	ldr	r1, [pc, #32]	; (8005ed8 <__NVIC_SetPriority+0x50>)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	3b04      	subs	r3, #4
 8005ec0:	0112      	lsls	r2, r2, #4
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	761a      	strb	r2, [r3, #24]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	e000e100 	.word	0xe000e100
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <SysTick_Handler+0x1c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ee4:	f001 fd28 	bl	8007938 <xTaskGetSchedulerState>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d001      	beq.n	8005ef2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005eee:	f002 fb13 	bl	8008518 <xPortSysTickHandler>
  }
}
 8005ef2:	bf00      	nop
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	e000e010 	.word	0xe000e010

08005efc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f00:	2100      	movs	r1, #0
 8005f02:	f06f 0004 	mvn.w	r0, #4
 8005f06:	f7ff ffbf 	bl	8005e88 <__NVIC_SetPriority>
#endif
}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f16:	f3ef 8305 	mrs	r3, IPSR
 8005f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f22:	f06f 0305 	mvn.w	r3, #5
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	e00c      	b.n	8005f44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <osKernelInitialize+0x44>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f32:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <osKernelInitialize+0x44>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e002      	b.n	8005f44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f44:	687b      	ldr	r3, [r7, #4]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000e08 	.word	0x20000e08

08005f58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5e:	f3ef 8305 	mrs	r3, IPSR
 8005f62:	603b      	str	r3, [r7, #0]
  return(result);
 8005f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f6a:	f06f 0305 	mvn.w	r3, #5
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	e010      	b.n	8005f94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <osKernelStart+0x48>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d109      	bne.n	8005f8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f7a:	f7ff ffbf 	bl	8005efc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f7e:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <osKernelStart+0x48>)
 8005f80:	2202      	movs	r2, #2
 8005f82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f84:	f001 f87c 	bl	8007080 <vTaskStartScheduler>
      stat = osOK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e002      	b.n	8005f94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f94:	687b      	ldr	r3, [r7, #4]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000e08 	.word	0x20000e08

08005fa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08e      	sub	sp, #56	; 0x38
 8005fa8:	af04      	add	r7, sp, #16
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb4:	f3ef 8305 	mrs	r3, IPSR
 8005fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005fba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d17e      	bne.n	80060be <osThreadNew+0x11a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d07b      	beq.n	80060be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fca:	2318      	movs	r3, #24
 8005fcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d045      	beq.n	800606a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <osThreadNew+0x48>
        name = attr->name;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <osThreadNew+0x6e>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b38      	cmp	r3, #56	; 0x38
 8006004:	d805      	bhi.n	8006012 <osThreadNew+0x6e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <osThreadNew+0x72>
        return (NULL);
 8006012:	2300      	movs	r3, #0
 8006014:	e054      	b.n	80060c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <osThreadNew+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2ba7      	cmp	r3, #167	; 0xa7
 8006034:	d90a      	bls.n	800604c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800603a:	2b00      	cmp	r3, #0
 800603c:	d006      	beq.n	800604c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <osThreadNew+0xa8>
        mem = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e010      	b.n	800606e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10c      	bne.n	800606e <osThreadNew+0xca>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d108      	bne.n	800606e <osThreadNew+0xca>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <osThreadNew+0xca>
          mem = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	e001      	b.n	800606e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d110      	bne.n	8006096 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800607c:	9202      	str	r2, [sp, #8]
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fe0c 	bl	8006ca8 <xTaskCreateStatic>
 8006090:	4603      	mov	r3, r0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e013      	b.n	80060be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d110      	bne.n	80060be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fe57 	bl	8006d62 <xTaskCreate>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <osThreadNew+0x11a>
            hTask = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060be:	693b      	ldr	r3, [r7, #16]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d0:	f3ef 8305 	mrs	r3, IPSR
 80060d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <osDelay+0x1c>
    stat = osErrorISR;
 80060dc:	f06f 0305 	mvn.w	r3, #5
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e007      	b.n	80060f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 ff92 	bl	8007018 <vTaskDelay>
    }
  }

  return (stat);
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <vApplicationGetIdleTaskMemory+0x2c>)
 8006110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <vApplicationGetIdleTaskMemory+0x30>)
 8006116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000e0c 	.word	0x20000e0c
 8006130:	20000eb4 	.word	0x20000eb4

08006134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a07      	ldr	r2, [pc, #28]	; (8006160 <vApplicationGetTimerTaskMemory+0x2c>)
 8006144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4a06      	ldr	r2, [pc, #24]	; (8006164 <vApplicationGetTimerTaskMemory+0x30>)
 800614a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	200010b4 	.word	0x200010b4
 8006164:	2000115c 	.word	0x2000115c

08006168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 0208 	add.w	r2, r3, #8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f103 0208 	add.w	r2, r3, #8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0208 	add.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006220:	d103      	bne.n	800622a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e00c      	b.n	8006244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3308      	adds	r3, #8
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e002      	b.n	8006238 <vListInsert+0x2e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d2f6      	bcs.n	8006232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6892      	ldr	r2, [r2, #8]
 8006292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6852      	ldr	r2, [r2, #4]
 800629c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d103      	bne.n	80062b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062fa:	f002 f87b 	bl	80083f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	3b01      	subs	r3, #1
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d114      	bne.n	800637a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01a      	beq.n	800638e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3310      	adds	r3, #16
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f929 	bl	80075b4 <xTaskRemoveFromEventList>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d012      	beq.n	800638e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <xQueueGenericReset+0xcc>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	e009      	b.n	800638e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3310      	adds	r3, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fef2 	bl	8006168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff feed 	bl	8006168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f002 f861 	bl	8008454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006392:	2301      	movs	r3, #1
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <xQueueGenericCreateStatic+0x52>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <xQueueGenericCreateStatic+0x56>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueGenericCreateStatic+0x58>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <xQueueGenericCreateStatic+0x7e>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueGenericCreateStatic+0x82>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericCreateStatic+0x84>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fb      	str	r3, [r7, #28]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800643e:	2350      	movs	r3, #80	; 0x50
 8006440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b50      	cmp	r3, #80	; 0x50
 8006446:	d00a      	beq.n	800645e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61bb      	str	r3, [r7, #24]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800645e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006472:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f805 	bl	8006490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006488:	4618      	mov	r0, r3
 800648a:	3730      	adds	r7, #48	; 0x30
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064be:	2101      	movs	r1, #1
 80064c0:	69b8      	ldr	r0, [r7, #24]
 80064c2:	f7ff ff05 	bl	80062d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08e      	sub	sp, #56	; 0x38
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericSend+0x32>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d103      	bne.n	8006518 <xQueueGenericSend+0x40>
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <xQueueGenericSend+0x44>
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <xQueueGenericSend+0x46>
 800651c:	2300      	movs	r3, #0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <xQueueGenericSend+0x60>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d103      	bne.n	8006546 <xQueueGenericSend+0x6e>
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <xQueueGenericSend+0x72>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericSend+0x74>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueGenericSend+0x8e>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	623b      	str	r3, [r7, #32]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006566:	f001 f9e7 	bl	8007938 <xTaskGetSchedulerState>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <xQueueGenericSend+0x9e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueGenericSend+0xa2>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericSend+0xa4>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xQueueGenericSend+0xbe>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61fb      	str	r3, [r7, #28]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006596:	f001 ff2d 	bl	80083f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <xQueueGenericSend+0xd4>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d129      	bne.n	8006600 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b2:	f000 fa0b 	bl	80069cc <prvCopyDataToQueue>
 80065b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fff5 	bl	80075b4 <xTaskRemoveFromEventList>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d013      	beq.n	80065f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065d0:	4b3f      	ldr	r3, [pc, #252]	; (80066d0 <xQueueGenericSend+0x1f8>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	e00a      	b.n	80065f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065e8:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <xQueueGenericSend+0x1f8>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065f8:	f001 ff2c 	bl	8008454 <vPortExitCritical>
				return pdPASS;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e063      	b.n	80066c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006606:	f001 ff25 	bl	8008454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800660a:	2300      	movs	r3, #0
 800660c:	e05c      	b.n	80066c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006614:	f107 0314 	add.w	r3, r7, #20
 8006618:	4618      	mov	r0, r3
 800661a:	f001 f82f 	bl	800767c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006622:	f001 ff17 	bl	8008454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006626:	f000 fd9b 	bl	8007160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800662a:	f001 fee3 	bl	80083f4 <vPortEnterCritical>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006634:	b25b      	sxtb	r3, r3
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800663a:	d103      	bne.n	8006644 <xQueueGenericSend+0x16c>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006650:	d103      	bne.n	800665a <xQueueGenericSend+0x182>
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800665a:	f001 fefb 	bl	8008454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665e:	1d3a      	adds	r2, r7, #4
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f001 f81e 	bl	80076a8 <xTaskCheckForTimeOut>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d124      	bne.n	80066bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006674:	f000 faa2 	bl	8006bbc <prvIsQueueFull>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d018      	beq.n	80066b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	3310      	adds	r3, #16
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff44 	bl	8007514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800668c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668e:	f000 fa2d 	bl	8006aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006692:	f000 fd73 	bl	800717c <xTaskResumeAll>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f af7c 	bne.w	8006596 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <xQueueGenericSend+0x1f8>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	e772      	b.n	8006596 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b2:	f000 fa1b 	bl	8006aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b6:	f000 fd61 	bl	800717c <xTaskResumeAll>
 80066ba:	e76c      	b.n	8006596 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066be:	f000 fa15 	bl	8006aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066c2:	f000 fd5b 	bl	800717c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3738      	adds	r7, #56	; 0x38
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b090      	sub	sp, #64	; 0x40
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <xQueueGenericSendFromISR+0x3c>
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <xQueueGenericSendFromISR+0x40>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <xQueueGenericSendFromISR+0x42>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d103      	bne.n	800673e <xQueueGenericSendFromISR+0x6a>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <xQueueGenericSendFromISR+0x6e>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueGenericSendFromISR+0x70>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	623b      	str	r3, [r7, #32]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800675e:	f001 ff2b 	bl	80085b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006762:	f3ef 8211 	mrs	r2, BASEPRI
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800677a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	429a      	cmp	r2, r3
 8006788:	d302      	bcc.n	8006790 <xQueueGenericSendFromISR+0xbc>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d12f      	bne.n	80067f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067a6:	f000 f911 	bl	80069cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b2:	d112      	bne.n	80067da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fef7 	bl	80075b4 <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e007      	b.n	80067ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067de:	3301      	adds	r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	b25a      	sxtb	r2, r3
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067ea:	2301      	movs	r3, #1
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067ee:	e001      	b.n	80067f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006802:	4618      	mov	r0, r3
 8006804:	3740      	adds	r7, #64	; 0x40
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <xQueueReceive+0x30>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	623b      	str	r3, [r7, #32]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <xQueueReceive+0x3e>
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <xQueueReceive+0x42>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <xQueueReceive+0x44>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <xQueueReceive+0x5e>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	61fb      	str	r3, [r7, #28]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800686a:	f001 f865 	bl	8007938 <xTaskGetSchedulerState>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <xQueueReceive+0x6e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <xQueueReceive+0x72>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <xQueueReceive+0x74>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <xQueueReceive+0x8e>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	61bb      	str	r3, [r7, #24]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800689a:	f001 fdab 	bl	80083f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01f      	beq.n	80068ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ae:	f000 f8f7 	bl	8006aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	1e5a      	subs	r2, r3, #1
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	3310      	adds	r3, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fe74 	bl	80075b4 <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d007      	beq.n	80068e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068d2:	4b3d      	ldr	r3, [pc, #244]	; (80069c8 <xQueueReceive+0x1bc>)
 80068d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068e2:	f001 fdb7 	bl	8008454 <vPortExitCritical>
				return pdPASS;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e069      	b.n	80069be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068f0:	f001 fdb0 	bl	8008454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e062      	b.n	80069be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068fe:	f107 0310 	add.w	r3, r7, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f000 feba 	bl	800767c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800690c:	f001 fda2 	bl	8008454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006910:	f000 fc26 	bl	8007160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006914:	f001 fd6e 	bl	80083f4 <vPortEnterCritical>
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691e:	b25b      	sxtb	r3, r3
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006924:	d103      	bne.n	800692e <xQueueReceive+0x122>
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006934:	b25b      	sxtb	r3, r3
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800693a:	d103      	bne.n	8006944 <xQueueReceive+0x138>
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006944:	f001 fd86 	bl	8008454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006948:	1d3a      	adds	r2, r7, #4
 800694a:	f107 0310 	add.w	r3, r7, #16
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fea9 	bl	80076a8 <xTaskCheckForTimeOut>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d123      	bne.n	80069a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800695c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695e:	f000 f917 	bl	8006b90 <prvIsQueueEmpty>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	3324      	adds	r3, #36	; 0x24
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fdcf 	bl	8007514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006978:	f000 f8b8 	bl	8006aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800697c:	f000 fbfe 	bl	800717c <xTaskResumeAll>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d189      	bne.n	800689a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <xQueueReceive+0x1bc>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	e780      	b.n	800689a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699a:	f000 f8a7 	bl	8006aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800699e:	f000 fbed 	bl	800717c <xTaskResumeAll>
 80069a2:	e77a      	b.n	800689a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a6:	f000 f8a1 	bl	8006aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069aa:	f000 fbe7 	bl	800717c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b0:	f000 f8ee 	bl	8006b90 <prvIsQueueEmpty>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f af6f 	beq.w	800689a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d14d      	bne.n	8006a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 ffbc 	bl	8007974 <xTaskPriorityDisinherit>
 80069fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
 8006a04:	e043      	b.n	8006a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d119      	bne.n	8006a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6858      	ldr	r0, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	461a      	mov	r2, r3
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	f003 fb07 	bl	800a02a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d32b      	bcc.n	8006a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	e026      	b.n	8006a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68d8      	ldr	r0, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	f003 faed 	bl	800a02a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	425b      	negs	r3, r3
 8006a5a:	441a      	add	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d207      	bcs.n	8006a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	425b      	negs	r3, r3
 8006a76:	441a      	add	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d105      	bne.n	8006a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a96:	697b      	ldr	r3, [r7, #20]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d018      	beq.n	8006ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d303      	bcc.n	8006ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68d9      	ldr	r1, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	461a      	mov	r2, r3
 8006ade:	6838      	ldr	r0, [r7, #0]
 8006ae0:	f003 faa3 	bl	800a02a <memcpy>
	}
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006af4:	f001 fc7e 	bl	80083f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b00:	e011      	b.n	8006b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d012      	beq.n	8006b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3324      	adds	r3, #36	; 0x24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fd50 	bl	80075b4 <xTaskRemoveFromEventList>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b1a:	f000 fe27 	bl	800776c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dce9      	bgt.n	8006b02 <prvUnlockQueue+0x16>
 8006b2e:	e000      	b.n	8006b32 <prvUnlockQueue+0x46>
					break;
 8006b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	22ff      	movs	r2, #255	; 0xff
 8006b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b3a:	f001 fc8b 	bl	8008454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b3e:	f001 fc59 	bl	80083f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b4a:	e011      	b.n	8006b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3310      	adds	r3, #16
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fd2b 	bl	80075b4 <xTaskRemoveFromEventList>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b64:	f000 fe02 	bl	800776c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dce9      	bgt.n	8006b4c <prvUnlockQueue+0x60>
 8006b78:	e000      	b.n	8006b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b84:	f001 fc66 	bl	8008454 <vPortExitCritical>
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b98:	f001 fc2c 	bl	80083f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e001      	b.n	8006bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bae:	f001 fc51 	bl	8008454 <vPortExitCritical>

	return xReturn;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bc4:	f001 fc16 	bl	80083f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d102      	bne.n	8006bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e001      	b.n	8006bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bde:	f001 fc39 	bl	8008454 <vPortExitCritical>

	return xReturn;
 8006be2:	68fb      	ldr	r3, [r7, #12]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e014      	b.n	8006c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <vQueueAddToRegistry+0x50>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c08:	490c      	ldr	r1, [pc, #48]	; (8006c3c <vQueueAddToRegistry+0x50>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c12:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <vQueueAddToRegistry+0x50>)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4413      	add	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c1e:	e006      	b.n	8006c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	d9e7      	bls.n	8006bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000155c 	.word	0x2000155c

08006c40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c50:	f001 fbd0 	bl	80083f4 <vPortEnterCritical>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c60:	d103      	bne.n	8006c6a <vQueueWaitForMessageRestricted+0x2a>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c76:	d103      	bne.n	8006c80 <vQueueWaitForMessageRestricted+0x40>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c80:	f001 fbe8 	bl	8008454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	3324      	adds	r3, #36	; 0x24
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fc61 	bl	800755c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c9a:	6978      	ldr	r0, [r7, #20]
 8006c9c:	f7ff ff26 	bl	8006aec <prvUnlockQueue>
	}
 8006ca0:	bf00      	nop
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	; 0x38
 8006cac:	af04      	add	r7, sp, #16
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	623b      	str	r3, [r7, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xTaskCreateStatic+0x46>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	61fb      	str	r3, [r7, #28]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cee:	23a8      	movs	r3, #168	; 0xa8
 8006cf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2ba8      	cmp	r3, #168	; 0xa8
 8006cf6:	d00a      	beq.n	8006d0e <xTaskCreateStatic+0x66>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	61bb      	str	r3, [r7, #24]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01e      	beq.n	8006d54 <xTaskCreateStatic+0xac>
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f850 	bl	8006dec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d4e:	f000 f8f3 	bl	8006f38 <prvAddNewTaskToReadyList>
 8006d52:	e001      	b.n	8006d58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d58:	697b      	ldr	r3, [r7, #20]
	}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b08c      	sub	sp, #48	; 0x30
 8006d66:	af04      	add	r7, sp, #16
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fc5e 	bl	8008638 <pvPortMalloc>
 8006d7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00e      	beq.n	8006da2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d84:	20a8      	movs	r0, #168	; 0xa8
 8006d86:	f001 fc57 	bl	8008638 <pvPortMalloc>
 8006d8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
 8006d98:	e005      	b.n	8006da6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f001 fd18 	bl	80087d0 <vPortFree>
 8006da0:	e001      	b.n	8006da6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	9302      	str	r3, [sp, #8]
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f80e 	bl	8006dec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dd0:	69f8      	ldr	r0, [r7, #28]
 8006dd2:	f000 f8b1 	bl	8006f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e002      	b.n	8006de2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006de2:	69bb      	ldr	r3, [r7, #24]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	461a      	mov	r2, r3
 8006e04:	21a5      	movs	r1, #165	; 0xa5
 8006e06:	f003 f83a 	bl	8009e7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	3b01      	subs	r3, #1
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	617b      	str	r3, [r7, #20]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01f      	beq.n	8006e8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	e012      	b.n	8006e76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	7819      	ldrb	r1, [r3, #0]
 8006e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3334      	adds	r3, #52	; 0x34
 8006e60:	460a      	mov	r2, r1
 8006e62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d006      	beq.n	8006e7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	3301      	adds	r3, #1
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d9e9      	bls.n	8006e50 <prvInitialiseNewTask+0x64>
 8006e7c:	e000      	b.n	8006e80 <prvInitialiseNewTask+0x94>
			{
				break;
 8006e7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e88:	e003      	b.n	8006e92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2b37      	cmp	r3, #55	; 0x37
 8006e96:	d901      	bls.n	8006e9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e98:	2337      	movs	r3, #55	; 0x37
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	2200      	movs	r2, #0
 8006eac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff f978 	bl	80061a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	3318      	adds	r3, #24
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff f973 	bl	80061a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	3354      	adds	r3, #84	; 0x54
 8006eec:	224c      	movs	r2, #76	; 0x4c
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f002 ffc4 	bl	8009e7e <memset>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <prvInitialiseNewTask+0x140>)
 8006efa:	659a      	str	r2, [r3, #88]	; 0x58
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <prvInitialiseNewTask+0x144>)
 8006f00:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	4a0b      	ldr	r2, [pc, #44]	; (8006f34 <prvInitialiseNewTask+0x148>)
 8006f06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	69b8      	ldr	r0, [r7, #24]
 8006f0e:	f001 f941 	bl	8008194 <pxPortInitialiseStack>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f24:	bf00      	nop
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200057f0 	.word	0x200057f0
 8006f30:	20005858 	.word	0x20005858
 8006f34:	200058c0 	.word	0x200058c0

08006f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f40:	f001 fa58 	bl	80083f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f44:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <prvAddNewTaskToReadyList+0xc4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	4a2c      	ldr	r2, [pc, #176]	; (8006ffc <prvAddNewTaskToReadyList+0xc4>)
 8006f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f4e:	4b2c      	ldr	r3, [pc, #176]	; (8007000 <prvAddNewTaskToReadyList+0xc8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f56:	4a2a      	ldr	r2, [pc, #168]	; (8007000 <prvAddNewTaskToReadyList+0xc8>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <prvAddNewTaskToReadyList+0xc4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d110      	bne.n	8006f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f64:	f000 fc26 	bl	80077b4 <prvInitialiseTaskLists>
 8006f68:	e00d      	b.n	8006f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f6a:	4b26      	ldr	r3, [pc, #152]	; (8007004 <prvAddNewTaskToReadyList+0xcc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f72:	4b23      	ldr	r3, [pc, #140]	; (8007000 <prvAddNewTaskToReadyList+0xc8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d802      	bhi.n	8006f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <prvAddNewTaskToReadyList+0xc8>)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f86:	4b20      	ldr	r3, [pc, #128]	; (8007008 <prvAddNewTaskToReadyList+0xd0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <prvAddNewTaskToReadyList+0xd0>)
 8006f8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f90:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <prvAddNewTaskToReadyList+0xd0>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	; (800700c <prvAddNewTaskToReadyList+0xd4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d903      	bls.n	8006fac <prvAddNewTaskToReadyList+0x74>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a18      	ldr	r2, [pc, #96]	; (800700c <prvAddNewTaskToReadyList+0xd4>)
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4a15      	ldr	r2, [pc, #84]	; (8007010 <prvAddNewTaskToReadyList+0xd8>)
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7ff f8fd 	bl	80061c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fc8:	f001 fa44 	bl	8008454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <prvAddNewTaskToReadyList+0xcc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00e      	beq.n	8006ff2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <prvAddNewTaskToReadyList+0xc8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d207      	bcs.n	8006ff2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <prvAddNewTaskToReadyList+0xdc>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001a70 	.word	0x20001a70
 8007000:	2000159c 	.word	0x2000159c
 8007004:	20001a7c 	.word	0x20001a7c
 8007008:	20001a8c 	.word	0x20001a8c
 800700c:	20001a78 	.word	0x20001a78
 8007010:	200015a0 	.word	0x200015a0
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <vTaskDelay+0x60>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <vTaskDelay+0x30>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60bb      	str	r3, [r7, #8]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007048:	f000 f88a 	bl	8007160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fcfe 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007054:	f000 f892 	bl	800717c <xTaskResumeAll>
 8007058:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <vTaskDelay+0x64>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20001a98 	.word	0x20001a98
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800708e:	463a      	mov	r2, r7
 8007090:	1d39      	adds	r1, r7, #4
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff f832 	bl	8006100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	9202      	str	r2, [sp, #8]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	460a      	mov	r2, r1
 80070ae:	4924      	ldr	r1, [pc, #144]	; (8007140 <vTaskStartScheduler+0xc0>)
 80070b0:	4824      	ldr	r0, [pc, #144]	; (8007144 <vTaskStartScheduler+0xc4>)
 80070b2:	f7ff fdf9 	bl	8006ca8 <xTaskCreateStatic>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4a23      	ldr	r2, [pc, #140]	; (8007148 <vTaskStartScheduler+0xc8>)
 80070ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070bc:	4b22      	ldr	r3, [pc, #136]	; (8007148 <vTaskStartScheduler+0xc8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e001      	b.n	80070ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d102      	bne.n	80070da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070d4:	f000 fd10 	bl	8007af8 <xTimerCreateTimerTask>
 80070d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d11b      	bne.n	8007118 <vTaskStartScheduler+0x98>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <vTaskStartScheduler+0xcc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3354      	adds	r3, #84	; 0x54
 80070fa:	4a15      	ldr	r2, [pc, #84]	; (8007150 <vTaskStartScheduler+0xd0>)
 80070fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <vTaskStartScheduler+0xd4>)
 8007100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007106:	4b14      	ldr	r3, [pc, #80]	; (8007158 <vTaskStartScheduler+0xd8>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800710c:	4b13      	ldr	r3, [pc, #76]	; (800715c <vTaskStartScheduler+0xdc>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007112:	f001 f8cd 	bl	80082b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007116:	e00e      	b.n	8007136 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711e:	d10a      	bne.n	8007136 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <vTaskStartScheduler+0xb4>
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	0800f20c 	.word	0x0800f20c
 8007144:	08007785 	.word	0x08007785
 8007148:	20001a94 	.word	0x20001a94
 800714c:	2000159c 	.word	0x2000159c
 8007150:	200000e8 	.word	0x200000e8
 8007154:	20001a90 	.word	0x20001a90
 8007158:	20001a7c 	.word	0x20001a7c
 800715c:	20001a74 	.word	0x20001a74

08007160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <vTaskSuspendAll+0x18>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	4a03      	ldr	r2, [pc, #12]	; (8007178 <vTaskSuspendAll+0x18>)
 800716c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800716e:	bf00      	nop
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	20001a98 	.word	0x20001a98

0800717c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800718a:	4b42      	ldr	r3, [pc, #264]	; (8007294 <xTaskResumeAll+0x118>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071a8:	f001 f924 	bl	80083f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071ac:	4b39      	ldr	r3, [pc, #228]	; (8007294 <xTaskResumeAll+0x118>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	4a38      	ldr	r2, [pc, #224]	; (8007294 <xTaskResumeAll+0x118>)
 80071b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <xTaskResumeAll+0x118>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d162      	bne.n	8007284 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071be:	4b36      	ldr	r3, [pc, #216]	; (8007298 <xTaskResumeAll+0x11c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d05e      	beq.n	8007284 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071c6:	e02f      	b.n	8007228 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c8:	4b34      	ldr	r3, [pc, #208]	; (800729c <xTaskResumeAll+0x120>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3318      	adds	r3, #24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff f851 	bl	800627c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff f84c 	bl	800627c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4b2d      	ldr	r3, [pc, #180]	; (80072a0 <xTaskResumeAll+0x124>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d903      	bls.n	80071f8 <xTaskResumeAll+0x7c>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <xTaskResumeAll+0x124>)
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <xTaskResumeAll+0x128>)
 8007206:	441a      	add	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe ffd7 	bl	80061c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4b23      	ldr	r3, [pc, #140]	; (80072a8 <xTaskResumeAll+0x12c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <xTaskResumeAll+0x130>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007228:	4b1c      	ldr	r3, [pc, #112]	; (800729c <xTaskResumeAll+0x120>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1cb      	bne.n	80071c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007236:	f000 fb5f 	bl	80078f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800723a:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <xTaskResumeAll+0x134>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d010      	beq.n	8007268 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007246:	f000 f847 	bl	80072d8 <xTaskIncrementTick>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007250:	4b16      	ldr	r3, [pc, #88]	; (80072ac <xTaskResumeAll+0x130>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f1      	bne.n	8007246 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <xTaskResumeAll+0x134>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007268:	4b10      	ldr	r3, [pc, #64]	; (80072ac <xTaskResumeAll+0x130>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d009      	beq.n	8007284 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <xTaskResumeAll+0x138>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007284:	f001 f8e6 	bl	8008454 <vPortExitCritical>

	return xAlreadyYielded;
 8007288:	68bb      	ldr	r3, [r7, #8]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20001a98 	.word	0x20001a98
 8007298:	20001a70 	.word	0x20001a70
 800729c:	20001a30 	.word	0x20001a30
 80072a0:	20001a78 	.word	0x20001a78
 80072a4:	200015a0 	.word	0x200015a0
 80072a8:	2000159c 	.word	0x2000159c
 80072ac:	20001a84 	.word	0x20001a84
 80072b0:	20001a80 	.word	0x20001a80
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <xTaskGetTickCount+0x1c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072c4:	687b      	ldr	r3, [r7, #4]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20001a74 	.word	0x20001a74

080072d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e2:	4b4f      	ldr	r3, [pc, #316]	; (8007420 <xTaskIncrementTick+0x148>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 808f 	bne.w	800740a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072ec:	4b4d      	ldr	r3, [pc, #308]	; (8007424 <xTaskIncrementTick+0x14c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072f4:	4a4b      	ldr	r2, [pc, #300]	; (8007424 <xTaskIncrementTick+0x14c>)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d120      	bne.n	8007342 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007300:	4b49      	ldr	r3, [pc, #292]	; (8007428 <xTaskIncrementTick+0x150>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <xTaskIncrementTick+0x48>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	603b      	str	r3, [r7, #0]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <xTaskIncrementTick+0x46>
 8007320:	4b41      	ldr	r3, [pc, #260]	; (8007428 <xTaskIncrementTick+0x150>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	4b41      	ldr	r3, [pc, #260]	; (800742c <xTaskIncrementTick+0x154>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a3f      	ldr	r2, [pc, #252]	; (8007428 <xTaskIncrementTick+0x150>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4a3f      	ldr	r2, [pc, #252]	; (800742c <xTaskIncrementTick+0x154>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	4b3e      	ldr	r3, [pc, #248]	; (8007430 <xTaskIncrementTick+0x158>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a3d      	ldr	r2, [pc, #244]	; (8007430 <xTaskIncrementTick+0x158>)
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	f000 fadb 	bl	80078f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007342:	4b3c      	ldr	r3, [pc, #240]	; (8007434 <xTaskIncrementTick+0x15c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	429a      	cmp	r2, r3
 800734a:	d349      	bcc.n	80073e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <xTaskIncrementTick+0x150>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007356:	4b37      	ldr	r3, [pc, #220]	; (8007434 <xTaskIncrementTick+0x15c>)
 8007358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800735c:	601a      	str	r2, [r3, #0]
					break;
 800735e:	e03f      	b.n	80073e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007360:	4b31      	ldr	r3, [pc, #196]	; (8007428 <xTaskIncrementTick+0x150>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d203      	bcs.n	8007380 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007378:	4a2e      	ldr	r2, [pc, #184]	; (8007434 <xTaskIncrementTick+0x15c>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800737e:	e02f      	b.n	80073e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3304      	adds	r3, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe ff79 	bl	800627c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	3318      	adds	r3, #24
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe ff70 	bl	800627c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	4b25      	ldr	r3, [pc, #148]	; (8007438 <xTaskIncrementTick+0x160>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d903      	bls.n	80073b0 <xTaskIncrementTick+0xd8>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4a22      	ldr	r2, [pc, #136]	; (8007438 <xTaskIncrementTick+0x160>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a1f      	ldr	r2, [pc, #124]	; (800743c <xTaskIncrementTick+0x164>)
 80073be:	441a      	add	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fe fefb 	bl	80061c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <xTaskIncrementTick+0x168>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d3b8      	bcc.n	800734c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073da:	2301      	movs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073de:	e7b5      	b.n	800734c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073e0:	4b17      	ldr	r3, [pc, #92]	; (8007440 <xTaskIncrementTick+0x168>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4915      	ldr	r1, [pc, #84]	; (800743c <xTaskIncrementTick+0x164>)
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d901      	bls.n	80073fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073fc:	4b11      	ldr	r3, [pc, #68]	; (8007444 <xTaskIncrementTick+0x16c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	e004      	b.n	8007414 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <xTaskIncrementTick+0x170>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <xTaskIncrementTick+0x170>)
 8007412:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007414:	697b      	ldr	r3, [r7, #20]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20001a98 	.word	0x20001a98
 8007424:	20001a74 	.word	0x20001a74
 8007428:	20001a28 	.word	0x20001a28
 800742c:	20001a2c 	.word	0x20001a2c
 8007430:	20001a88 	.word	0x20001a88
 8007434:	20001a90 	.word	0x20001a90
 8007438:	20001a78 	.word	0x20001a78
 800743c:	200015a0 	.word	0x200015a0
 8007440:	2000159c 	.word	0x2000159c
 8007444:	20001a84 	.word	0x20001a84
 8007448:	20001a80 	.word	0x20001a80

0800744c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007452:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <vTaskSwitchContext+0xb0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800745a:	4b29      	ldr	r3, [pc, #164]	; (8007500 <vTaskSwitchContext+0xb4>)
 800745c:	2201      	movs	r2, #1
 800745e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007460:	e046      	b.n	80074f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007462:	4b27      	ldr	r3, [pc, #156]	; (8007500 <vTaskSwitchContext+0xb4>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007468:	4b26      	ldr	r3, [pc, #152]	; (8007504 <vTaskSwitchContext+0xb8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e010      	b.n	8007492 <vTaskSwitchContext+0x46>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <vTaskSwitchContext+0x40>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	607b      	str	r3, [r7, #4]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <vTaskSwitchContext+0x3e>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b01      	subs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	491d      	ldr	r1, [pc, #116]	; (8007508 <vTaskSwitchContext+0xbc>)
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0e4      	beq.n	8007470 <vTaskSwitchContext+0x24>
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4a15      	ldr	r2, [pc, #84]	; (8007508 <vTaskSwitchContext+0xbc>)
 80074b2:	4413      	add	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	605a      	str	r2, [r3, #4]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3308      	adds	r3, #8
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d104      	bne.n	80074d6 <vTaskSwitchContext+0x8a>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4a0b      	ldr	r2, [pc, #44]	; (800750c <vTaskSwitchContext+0xc0>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	4a08      	ldr	r2, [pc, #32]	; (8007504 <vTaskSwitchContext+0xb8>)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074e6:	4b09      	ldr	r3, [pc, #36]	; (800750c <vTaskSwitchContext+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3354      	adds	r3, #84	; 0x54
 80074ec:	4a08      	ldr	r2, [pc, #32]	; (8007510 <vTaskSwitchContext+0xc4>)
 80074ee:	6013      	str	r3, [r2, #0]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20001a98 	.word	0x20001a98
 8007500:	20001a84 	.word	0x20001a84
 8007504:	20001a78 	.word	0x20001a78
 8007508:	200015a0 	.word	0x200015a0
 800750c:	2000159c 	.word	0x2000159c
 8007510:	200000e8 	.word	0x200000e8

08007514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60fb      	str	r3, [r7, #12]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <vTaskPlaceOnEventList+0x44>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3318      	adds	r3, #24
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe fe61 	bl	800620a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007548:	2101      	movs	r1, #1
 800754a:	6838      	ldr	r0, [r7, #0]
 800754c:	f000 fa80 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	2000159c 	.word	0x2000159c

0800755c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	617b      	str	r3, [r7, #20]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007584:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3318      	adds	r3, #24
 800758a:	4619      	mov	r1, r3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7fe fe18 	bl	80061c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800759c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	68b8      	ldr	r0, [r7, #8]
 80075a2:	f000 fa55 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
	}
 80075a6:	bf00      	nop
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000159c 	.word	0x2000159c

080075b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60fb      	str	r3, [r7, #12]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fe49 	bl	800627c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ea:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <xTaskRemoveFromEventList+0xb0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11d      	bne.n	800762e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fe40 	bl	800627c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007600:	4b19      	ldr	r3, [pc, #100]	; (8007668 <xTaskRemoveFromEventList+0xb4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d903      	bls.n	8007610 <xTaskRemoveFromEventList+0x5c>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <xTaskRemoveFromEventList+0xb4>)
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4a13      	ldr	r2, [pc, #76]	; (800766c <xTaskRemoveFromEventList+0xb8>)
 800761e:	441a      	add	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fe fdcb 	bl	80061c2 <vListInsertEnd>
 800762c:	e005      	b.n	800763a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3318      	adds	r3, #24
 8007632:	4619      	mov	r1, r3
 8007634:	480e      	ldr	r0, [pc, #56]	; (8007670 <xTaskRemoveFromEventList+0xbc>)
 8007636:	f7fe fdc4 	bl	80061c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <xTaskRemoveFromEventList+0xc0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	429a      	cmp	r2, r3
 8007646:	d905      	bls.n	8007654 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <xTaskRemoveFromEventList+0xc4>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e001      	b.n	8007658 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007658:	697b      	ldr	r3, [r7, #20]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20001a98 	.word	0x20001a98
 8007668:	20001a78 	.word	0x20001a78
 800766c:	200015a0 	.word	0x200015a0
 8007670:	20001a30 	.word	0x20001a30
 8007674:	2000159c 	.word	0x2000159c
 8007678:	20001a84 	.word	0x20001a84

0800767c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <vTaskInternalSetTimeOutState+0x24>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <vTaskInternalSetTimeOutState+0x28>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20001a88 	.word	0x20001a88
 80076a4:	20001a74 	.word	0x20001a74

080076a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	613b      	str	r3, [r7, #16]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60fb      	str	r3, [r7, #12]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076ea:	f000 fe83 	bl	80083f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076ee:	4b1d      	ldr	r3, [pc, #116]	; (8007764 <xTaskCheckForTimeOut+0xbc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007706:	d102      	bne.n	800770e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e023      	b.n	8007756 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b15      	ldr	r3, [pc, #84]	; (8007768 <xTaskCheckForTimeOut+0xc0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d007      	beq.n	800772a <xTaskCheckForTimeOut+0x82>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	429a      	cmp	r2, r3
 8007722:	d302      	bcc.n	800772a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	e015      	b.n	8007756 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	429a      	cmp	r2, r3
 8007732:	d20b      	bcs.n	800774c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff ff9b 	bl	800767c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e004      	b.n	8007756 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007756:	f000 fe7d 	bl	8008454 <vPortExitCritical>

	return xReturn;
 800775a:	69fb      	ldr	r3, [r7, #28]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20001a74 	.word	0x20001a74
 8007768:	20001a88 	.word	0x20001a88

0800776c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <vTaskMissedYield+0x14>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20001a84 	.word	0x20001a84

08007784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800778c:	f000 f852 	bl	8007834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <prvIdleTask+0x28>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d9f9      	bls.n	800778c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <prvIdleTask+0x2c>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077a8:	e7f0      	b.n	800778c <prvIdleTask+0x8>
 80077aa:	bf00      	nop
 80077ac:	200015a0 	.word	0x200015a0
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e00c      	b.n	80077da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <prvInitialiseTaskLists+0x60>)
 80077cc:	4413      	add	r3, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fcca 	bl	8006168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3301      	adds	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b37      	cmp	r3, #55	; 0x37
 80077de:	d9ef      	bls.n	80077c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077e0:	480d      	ldr	r0, [pc, #52]	; (8007818 <prvInitialiseTaskLists+0x64>)
 80077e2:	f7fe fcc1 	bl	8006168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077e6:	480d      	ldr	r0, [pc, #52]	; (800781c <prvInitialiseTaskLists+0x68>)
 80077e8:	f7fe fcbe 	bl	8006168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077ec:	480c      	ldr	r0, [pc, #48]	; (8007820 <prvInitialiseTaskLists+0x6c>)
 80077ee:	f7fe fcbb 	bl	8006168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077f2:	480c      	ldr	r0, [pc, #48]	; (8007824 <prvInitialiseTaskLists+0x70>)
 80077f4:	f7fe fcb8 	bl	8006168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077f8:	480b      	ldr	r0, [pc, #44]	; (8007828 <prvInitialiseTaskLists+0x74>)
 80077fa:	f7fe fcb5 	bl	8006168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <prvInitialiseTaskLists+0x78>)
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <prvInitialiseTaskLists+0x64>)
 8007802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <prvInitialiseTaskLists+0x7c>)
 8007806:	4a05      	ldr	r2, [pc, #20]	; (800781c <prvInitialiseTaskLists+0x68>)
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200015a0 	.word	0x200015a0
 8007818:	20001a00 	.word	0x20001a00
 800781c:	20001a14 	.word	0x20001a14
 8007820:	20001a30 	.word	0x20001a30
 8007824:	20001a44 	.word	0x20001a44
 8007828:	20001a5c 	.word	0x20001a5c
 800782c:	20001a28 	.word	0x20001a28
 8007830:	20001a2c 	.word	0x20001a2c

08007834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800783a:	e019      	b.n	8007870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800783c:	f000 fdda 	bl	80083f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007840:	4b10      	ldr	r3, [pc, #64]	; (8007884 <prvCheckTasksWaitingTermination+0x50>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fd15 	bl	800627c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <prvCheckTasksWaitingTermination+0x54>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3b01      	subs	r3, #1
 8007858:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <prvCheckTasksWaitingTermination+0x54>)
 800785a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3b01      	subs	r3, #1
 8007862:	4a0a      	ldr	r2, [pc, #40]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 8007864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007866:	f000 fdf5 	bl	8008454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f810 	bl	8007890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e1      	bne.n	800783c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20001a44 	.word	0x20001a44
 8007888:	20001a70 	.word	0x20001a70
 800788c:	20001a58 	.word	0x20001a58

08007890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3354      	adds	r3, #84	; 0x54
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fb0b 	bl	8009eb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d108      	bne.n	80078be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 ff8d 	bl	80087d0 <vPortFree>
				vPortFree( pxTCB );
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 ff8a 	bl	80087d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078bc:	e018      	b.n	80078f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d103      	bne.n	80078d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 ff81 	bl	80087d0 <vPortFree>
	}
 80078ce:	e00f      	b.n	80078f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d00a      	beq.n	80078f0 <prvDeleteTCB+0x60>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60fb      	str	r3, [r7, #12]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <prvDeleteTCB+0x5e>
	}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078fe:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <prvResetNextTaskUnblockTime+0x38>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <prvResetNextTaskUnblockTime+0x3c>)
 800790a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007910:	e008      	b.n	8007924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <prvResetNextTaskUnblockTime+0x38>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	4a04      	ldr	r2, [pc, #16]	; (8007934 <prvResetNextTaskUnblockTime+0x3c>)
 8007922:	6013      	str	r3, [r2, #0]
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20001a28 	.word	0x20001a28
 8007934:	20001a90 	.word	0x20001a90

08007938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800793e:	4b0b      	ldr	r3, [pc, #44]	; (800796c <xTaskGetSchedulerState+0x34>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007946:	2301      	movs	r3, #1
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	e008      	b.n	800795e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <xTaskGetSchedulerState+0x38>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007954:	2302      	movs	r3, #2
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	e001      	b.n	800795e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800795e:	687b      	ldr	r3, [r7, #4]
	}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20001a7c 	.word	0x20001a7c
 8007970:	20001a98 	.word	0x20001a98

08007974 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d056      	beq.n	8007a38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800798a:	4b2e      	ldr	r3, [pc, #184]	; (8007a44 <xTaskPriorityDisinherit+0xd0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	429a      	cmp	r2, r3
 8007992:	d00a      	beq.n	80079aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	60fb      	str	r3, [r7, #12]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079cc:	1e5a      	subs	r2, r3, #1
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079da:	429a      	cmp	r2, r3
 80079dc:	d02c      	beq.n	8007a38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d128      	bne.n	8007a38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fc46 	bl	800627c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskPriorityDisinherit+0xd4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskPriorityDisinherit+0xa4>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <xTaskPriorityDisinherit+0xd4>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <xTaskPriorityDisinherit+0xd8>)
 8007a26:	441a      	add	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fbc7 	bl	80061c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a38:	697b      	ldr	r3, [r7, #20]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	2000159c 	.word	0x2000159c
 8007a48:	20001a78 	.word	0x20001a78
 8007a4c:	200015a0 	.word	0x200015a0

08007a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fc08 	bl	800627c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a72:	d10a      	bne.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a84:	f7fe fb9d 	bl	80061c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a88:	e026      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d209      	bcs.n	8007ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fe fbab 	bl	800620a <vListInsert>
}
 8007ab4:	e010      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fe fba1 	bl	800620a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d202      	bcs.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20001a74 	.word	0x20001a74
 8007ae4:	2000159c 	.word	0x2000159c
 8007ae8:	20001a5c 	.word	0x20001a5c
 8007aec:	20001a2c 	.word	0x20001a2c
 8007af0:	20001a28 	.word	0x20001a28
 8007af4:	20001a90 	.word	0x20001a90

08007af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b02:	f000 fb07 	bl	8008114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b06:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <xTimerCreateTimerTask+0x80>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d021      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b16:	1d3a      	adds	r2, r7, #4
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fb07 	bl	8006134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	2302      	movs	r3, #2
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	460a      	mov	r2, r1
 8007b38:	4910      	ldr	r1, [pc, #64]	; (8007b7c <xTimerCreateTimerTask+0x84>)
 8007b3a:	4811      	ldr	r0, [pc, #68]	; (8007b80 <xTimerCreateTimerTask+0x88>)
 8007b3c:	f7ff f8b4 	bl	8006ca8 <xTaskCreateStatic>
 8007b40:	4603      	mov	r3, r0
 8007b42:	4a10      	ldr	r2, [pc, #64]	; (8007b84 <xTimerCreateTimerTask+0x8c>)
 8007b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <xTimerCreateTimerTask+0x8c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	613b      	str	r3, [r7, #16]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b6e:	697b      	ldr	r3, [r7, #20]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20001acc 	.word	0x20001acc
 8007b7c:	0800f214 	.word	0x0800f214
 8007b80:	08007cbd 	.word	0x08007cbd
 8007b84:	20001ad0 	.word	0x20001ad0

08007b88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	623b      	str	r3, [r7, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bb6:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <xTimerGenericCommand+0x98>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02a      	beq.n	8007c14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	dc18      	bgt.n	8007c02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bd0:	f7ff feb2 	bl	8007938 <xTaskGetSchedulerState>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d109      	bne.n	8007bee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bda:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <xTimerGenericCommand+0x98>)
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f107 0110 	add.w	r1, r7, #16
 8007be2:	2300      	movs	r3, #0
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	f7fe fc77 	bl	80064d8 <xQueueGenericSend>
 8007bea:	6278      	str	r0, [r7, #36]	; 0x24
 8007bec:	e012      	b.n	8007c14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <xTimerGenericCommand+0x98>)
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f107 0110 	add.w	r1, r7, #16
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7fe fc6d 	bl	80064d8 <xQueueGenericSend>
 8007bfe:	6278      	str	r0, [r7, #36]	; 0x24
 8007c00:	e008      	b.n	8007c14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <xTimerGenericCommand+0x98>)
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	f107 0110 	add.w	r1, r7, #16
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	f7fe fd61 	bl	80066d4 <xQueueGenericSendFromISR>
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001acc 	.word	0x20001acc

08007c24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <prvProcessExpiredTimer+0x94>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fb1d 	bl	800627c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d022      	beq.n	8007c96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	699a      	ldr	r2, [r3, #24]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	18d1      	adds	r1, r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	6978      	ldr	r0, [r7, #20]
 8007c5e:	f000 f8d1 	bl	8007e04 <prvInsertTimerInActiveList>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01f      	beq.n	8007ca8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	2100      	movs	r1, #0
 8007c72:	6978      	ldr	r0, [r7, #20]
 8007c74:	f7ff ff88 	bl	8007b88 <xTimerGenericCommand>
 8007c78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d113      	bne.n	8007ca8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	6978      	ldr	r0, [r7, #20]
 8007cae:	4798      	blx	r3
}
 8007cb0:	bf00      	nop
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20001ac4 	.word	0x20001ac4

08007cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cc4:	f107 0308 	add.w	r3, r7, #8
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f857 	bl	8007d7c <prvGetNextExpireTime>
 8007cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f803 	bl	8007ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cda:	f000 f8d5 	bl	8007e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cde:	e7f1      	b.n	8007cc4 <prvTimerTask+0x8>

08007ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cea:	f7ff fa39 	bl	8007160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f866 	bl	8007dc4 <prvSampleTimeNow>
 8007cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d130      	bne.n	8007d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <prvProcessTimerOrBlockTask+0x3c>
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d806      	bhi.n	8007d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d0e:	f7ff fa35 	bl	800717c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ff85 	bl	8007c24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d1a:	e024      	b.n	8007d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <prvProcessTimerOrBlockTask+0x90>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <prvProcessTimerOrBlockTask+0x50>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <prvProcessTimerOrBlockTask+0x52>
 8007d30:	2300      	movs	r3, #0
 8007d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <prvProcessTimerOrBlockTask+0x94>)
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7fe ff7d 	bl	8006c40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d46:	f7ff fa19 	bl	800717c <xTaskResumeAll>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d50:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <prvProcessTimerOrBlockTask+0x98>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
}
 8007d60:	e001      	b.n	8007d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d62:	f7ff fa0b 	bl	800717c <xTaskResumeAll>
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001ac8 	.word	0x20001ac8
 8007d74:	20001acc 	.word	0x20001acc
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d84:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <prvGetNextExpireTime+0x44>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <prvGetNextExpireTime+0x16>
 8007d8e:	2201      	movs	r2, #1
 8007d90:	e000      	b.n	8007d94 <prvGetNextExpireTime+0x18>
 8007d92:	2200      	movs	r2, #0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvGetNextExpireTime+0x44>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e001      	b.n	8007db0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20001ac4 	.word	0x20001ac4

08007dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007dcc:	f7ff fa74 	bl	80072b8 <xTaskGetTickCount>
 8007dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <prvSampleTimeNow+0x3c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d205      	bcs.n	8007de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ddc:	f000 f936 	bl	800804c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e002      	b.n	8007dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007dee:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <prvSampleTimeNow+0x3c>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20001ad4 	.word	0x20001ad4

08007e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d812      	bhi.n	8007e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d302      	bcc.n	8007e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e01b      	b.n	8007e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <prvInsertTimerInActiveList+0x7c>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7fe f9de 	bl	800620a <vListInsert>
 8007e4e:	e012      	b.n	8007e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d206      	bcs.n	8007e66 <prvInsertTimerInActiveList+0x62>
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d302      	bcc.n	8007e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e60:	2301      	movs	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e007      	b.n	8007e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e66:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <prvInsertTimerInActiveList+0x80>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7fe f9ca 	bl	800620a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e76:	697b      	ldr	r3, [r7, #20]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20001ac8 	.word	0x20001ac8
 8007e84:	20001ac4 	.word	0x20001ac4

08007e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08e      	sub	sp, #56	; 0x38
 8007e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e8e:	e0ca      	b.n	8008026 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da18      	bge.n	8007ec8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e96:	1d3b      	adds	r3, r7, #4
 8007e98:	3304      	adds	r3, #4
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	61fb      	str	r3, [r7, #28]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebe:	6850      	ldr	r0, [r2, #4]
 8007ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec2:	6892      	ldr	r2, [r2, #8]
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f2c0 80ab 	blt.w	8008026 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f9cb 	bl	800627c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff ff6b 	bl	8007dc4 <prvSampleTimeNow>
 8007eee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	f200 8096 	bhi.w	8008024 <prvProcessReceivedCommands+0x19c>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <prvProcessReceivedCommands+0x78>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f29 	.word	0x08007f29
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f29 	.word	0x08007f29
 8007f0c:	08007f9d 	.word	0x08007f9d
 8007f10:	08007fb1 	.word	0x08007fb1
 8007f14:	08007ffb 	.word	0x08007ffb
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f29 	.word	0x08007f29
 8007f20:	08007f9d 	.word	0x08007f9d
 8007f24:	08007fb1 	.word	0x08007fb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	18d1      	adds	r1, r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f48:	f7ff ff5c 	bl	8007e04 <prvInsertTimerInActiveList>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d069      	beq.n	8008026 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d05e      	beq.n	8008026 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	441a      	add	r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	2300      	movs	r3, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7a:	f7ff fe05 	bl	8007b88 <xTimerGenericCommand>
 8007f7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d14f      	bne.n	8008026 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	61bb      	str	r3, [r7, #24]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007fae:	e03a      	b.n	8008026 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	617b      	str	r3, [r7, #20]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	18d1      	adds	r1, r2, r3
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff4:	f7ff ff06 	bl	8007e04 <prvInsertTimerInActiveList>
					break;
 8007ff8:	e015      	b.n	8008026 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800a:	f000 fbe1 	bl	80087d0 <vPortFree>
 800800e:	e00a      	b.n	8008026 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	b2da      	uxtb	r2, r3
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008022:	e000      	b.n	8008026 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008024:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <prvProcessReceivedCommands+0x1c0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	1d39      	adds	r1, r7, #4
 800802c:	2200      	movs	r2, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fbec 	bl	800680c <xQueueReceive>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	f47f af2a 	bne.w	8007e90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	3730      	adds	r7, #48	; 0x30
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20001acc 	.word	0x20001acc

0800804c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008052:	e048      	b.n	80080e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008054:	4b2d      	ldr	r3, [pc, #180]	; (800810c <prvSwitchTimerLists+0xc0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805e:	4b2b      	ldr	r3, [pc, #172]	; (800810c <prvSwitchTimerLists+0xc0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3304      	adds	r3, #4
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe f905 	bl	800627c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d02e      	beq.n	80080e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	d90e      	bls.n	80080b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080a6:	4b19      	ldr	r3, [pc, #100]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3304      	adds	r3, #4
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f7fe f8aa 	bl	800620a <vListInsert>
 80080b6:	e016      	b.n	80080e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080b8:	2300      	movs	r3, #0
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2300      	movs	r3, #0
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	2100      	movs	r1, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff fd60 	bl	8007b88 <xTimerGenericCommand>
 80080c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	603b      	str	r3, [r7, #0]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1b1      	bne.n	8008054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <prvSwitchTimerLists+0xc4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080fe:	4a04      	ldr	r2, [pc, #16]	; (8008110 <prvSwitchTimerLists+0xc4>)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	6013      	str	r3, [r2, #0]
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20001ac4 	.word	0x20001ac4
 8008110:	20001ac8 	.word	0x20001ac8

08008114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800811a:	f000 f96b 	bl	80083f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800811e:	4b15      	ldr	r3, [pc, #84]	; (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d120      	bne.n	8008168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008126:	4814      	ldr	r0, [pc, #80]	; (8008178 <prvCheckForValidListAndQueue+0x64>)
 8008128:	f7fe f81e 	bl	8006168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800812c:	4813      	ldr	r0, [pc, #76]	; (800817c <prvCheckForValidListAndQueue+0x68>)
 800812e:	f7fe f81b 	bl	8006168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <prvCheckForValidListAndQueue+0x6c>)
 8008134:	4a10      	ldr	r2, [pc, #64]	; (8008178 <prvCheckForValidListAndQueue+0x64>)
 8008136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008138:	4b12      	ldr	r3, [pc, #72]	; (8008184 <prvCheckForValidListAndQueue+0x70>)
 800813a:	4a10      	ldr	r2, [pc, #64]	; (800817c <prvCheckForValidListAndQueue+0x68>)
 800813c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800813e:	2300      	movs	r3, #0
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4b11      	ldr	r3, [pc, #68]	; (8008188 <prvCheckForValidListAndQueue+0x74>)
 8008144:	4a11      	ldr	r2, [pc, #68]	; (800818c <prvCheckForValidListAndQueue+0x78>)
 8008146:	2110      	movs	r1, #16
 8008148:	200a      	movs	r0, #10
 800814a:	f7fe f929 	bl	80063a0 <xQueueGenericCreateStatic>
 800814e:	4603      	mov	r3, r0
 8008150:	4a08      	ldr	r2, [pc, #32]	; (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008152:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008154:	4b07      	ldr	r3, [pc, #28]	; (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <prvCheckForValidListAndQueue+0x60>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	490b      	ldr	r1, [pc, #44]	; (8008190 <prvCheckForValidListAndQueue+0x7c>)
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fd42 	bl	8006bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008168:	f000 f974 	bl	8008454 <vPortExitCritical>
}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20001acc 	.word	0x20001acc
 8008178:	20001a9c 	.word	0x20001a9c
 800817c:	20001ab0 	.word	0x20001ab0
 8008180:	20001ac4 	.word	0x20001ac4
 8008184:	20001ac8 	.word	0x20001ac8
 8008188:	20001b78 	.word	0x20001b78
 800818c:	20001ad8 	.word	0x20001ad8
 8008190:	0800f21c 	.word	0x0800f21c

08008194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3b04      	subs	r3, #4
 80081a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0201 	bic.w	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3b04      	subs	r3, #4
 80081c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081c4:	4a0c      	ldr	r2, [pc, #48]	; (80081f8 <pxPortInitialiseStack+0x64>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b14      	subs	r3, #20
 80081ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b04      	subs	r3, #4
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f06f 0202 	mvn.w	r2, #2
 80081e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b20      	subs	r3, #32
 80081e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081ea:	68fb      	ldr	r3, [r7, #12]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	080081fd 	.word	0x080081fd

080081fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008206:	4b12      	ldr	r3, [pc, #72]	; (8008250 <prvTaskExitError+0x54>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820e:	d00a      	beq.n	8008226 <prvTaskExitError+0x2a>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <prvTaskExitError+0x28>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60bb      	str	r3, [r7, #8]
}
 8008238:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800823a:	bf00      	nop
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0fc      	beq.n	800823c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	2000008c 	.word	0x2000008c
	...

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	2000159c 	.word	0x2000159c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008288:	4808      	ldr	r0, [pc, #32]	; (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082aa:	bf00      	nop
 80082ac:	e000ed08 	.word	0xe000ed08

080082b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082b6:	4b46      	ldr	r3, [pc, #280]	; (80083d0 <xPortStartScheduler+0x120>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a46      	ldr	r2, [pc, #280]	; (80083d4 <xPortStartScheduler+0x124>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d10a      	bne.n	80082d6 <xPortStartScheduler+0x26>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082d6:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <xPortStartScheduler+0x120>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a3f      	ldr	r2, [pc, #252]	; (80083d8 <xPortStartScheduler+0x128>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10a      	bne.n	80082f6 <xPortStartScheduler+0x46>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082f6:	4b39      	ldr	r3, [pc, #228]	; (80083dc <xPortStartScheduler+0x12c>)
 80082f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	22ff      	movs	r2, #255	; 0xff
 8008306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008318:	b2da      	uxtb	r2, r3
 800831a:	4b31      	ldr	r3, [pc, #196]	; (80083e0 <xPortStartScheduler+0x130>)
 800831c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800831e:	4b31      	ldr	r3, [pc, #196]	; (80083e4 <xPortStartScheduler+0x134>)
 8008320:	2207      	movs	r2, #7
 8008322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008324:	e009      	b.n	800833a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008326:	4b2f      	ldr	r3, [pc, #188]	; (80083e4 <xPortStartScheduler+0x134>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3b01      	subs	r3, #1
 800832c:	4a2d      	ldr	r2, [pc, #180]	; (80083e4 <xPortStartScheduler+0x134>)
 800832e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b80      	cmp	r3, #128	; 0x80
 8008344:	d0ef      	beq.n	8008326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008346:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <xPortStartScheduler+0x134>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1c3 0307 	rsb	r3, r3, #7
 800834e:	2b04      	cmp	r3, #4
 8008350:	d00a      	beq.n	8008368 <xPortStartScheduler+0xb8>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	60bb      	str	r3, [r7, #8]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008368:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <xPortStartScheduler+0x134>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <xPortStartScheduler+0x134>)
 8008370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008372:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <xPortStartScheduler+0x134>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800837a:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <xPortStartScheduler+0x134>)
 800837c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008386:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <xPortStartScheduler+0x138>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <xPortStartScheduler+0x138>)
 800838c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008392:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <xPortStartScheduler+0x138>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a14      	ldr	r2, [pc, #80]	; (80083e8 <xPortStartScheduler+0x138>)
 8008398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800839c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800839e:	f000 f8dd 	bl	800855c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <xPortStartScheduler+0x13c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083a8:	f000 f8fc 	bl	80085a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083ac:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <xPortStartScheduler+0x140>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0f      	ldr	r2, [pc, #60]	; (80083f0 <xPortStartScheduler+0x140>)
 80083b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083b8:	f7ff ff66 	bl	8008288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083bc:	f7ff f846 	bl	800744c <vTaskSwitchContext>
	prvTaskExitError();
 80083c0:	f7ff ff1c 	bl	80081fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	e000ed00 	.word	0xe000ed00
 80083d4:	410fc271 	.word	0x410fc271
 80083d8:	410fc270 	.word	0x410fc270
 80083dc:	e000e400 	.word	0xe000e400
 80083e0:	20001bc8 	.word	0x20001bc8
 80083e4:	20001bcc 	.word	0x20001bcc
 80083e8:	e000ed20 	.word	0xe000ed20
 80083ec:	2000008c 	.word	0x2000008c
 80083f0:	e000ef34 	.word	0xe000ef34

080083f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	607b      	str	r3, [r7, #4]
}
 800840c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <vPortEnterCritical+0x58>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	4a0d      	ldr	r2, [pc, #52]	; (800844c <vPortEnterCritical+0x58>)
 8008416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008418:	4b0c      	ldr	r3, [pc, #48]	; (800844c <vPortEnterCritical+0x58>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10f      	bne.n	8008440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <vPortEnterCritical+0x5c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <vPortEnterCritical+0x4c>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	603b      	str	r3, [r7, #0]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <vPortEnterCritical+0x4a>
	}
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	2000008c 	.word	0x2000008c
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800845a:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <vPortExitCritical+0x50>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <vPortExitCritical+0x24>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	607b      	str	r3, [r7, #4]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <vPortExitCritical+0x50>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <vPortExitCritical+0x50>)
 8008480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008482:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <vPortExitCritical+0x50>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <vPortExitCritical+0x42>
 800848a:	2300      	movs	r3, #0
 800848c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	f383 8811 	msr	BASEPRI, r3
}
 8008494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	2000008c 	.word	0x2000008c
	...

080084b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084b0:	f3ef 8009 	mrs	r0, PSP
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4b15      	ldr	r3, [pc, #84]	; (8008510 <pxCurrentTCBConst>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f01e 0f10 	tst.w	lr, #16
 80084c0:	bf08      	it	eq
 80084c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	6010      	str	r0, [r2, #0]
 80084cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084d4:	f380 8811 	msr	BASEPRI, r0
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f7fe ffb4 	bl	800744c <vTaskSwitchContext>
 80084e4:	f04f 0000 	mov.w	r0, #0
 80084e8:	f380 8811 	msr	BASEPRI, r0
 80084ec:	bc09      	pop	{r0, r3}
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	6808      	ldr	r0, [r1, #0]
 80084f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f6:	f01e 0f10 	tst.w	lr, #16
 80084fa:	bf08      	it	eq
 80084fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008500:	f380 8809 	msr	PSP, r0
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst>:
 8008510:	2000159c 	.word	0x2000159c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	607b      	str	r3, [r7, #4]
}
 8008530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008532:	f7fe fed1 	bl	80072d8 <xTaskIncrementTick>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <xPortSysTickHandler+0x40>)
 800853e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f383 8811 	msr	BASEPRI, r3
}
 800854e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <vPortSetupTimerInterrupt+0x34>)
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008566:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <vPortSetupTimerInterrupt+0x38>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <vPortSetupTimerInterrupt+0x3c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a0a      	ldr	r2, [pc, #40]	; (800859c <vPortSetupTimerInterrupt+0x40>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	099b      	lsrs	r3, r3, #6
 8008578:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <vPortSetupTimerInterrupt+0x44>)
 800857a:	3b01      	subs	r3, #1
 800857c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <vPortSetupTimerInterrupt+0x34>)
 8008580:	2207      	movs	r2, #7
 8008582:	601a      	str	r2, [r3, #0]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	e000e010 	.word	0xe000e010
 8008594:	e000e018 	.word	0xe000e018
 8008598:	20000080 	.word	0x20000080
 800859c:	10624dd3 	.word	0x10624dd3
 80085a0:	e000e014 	.word	0xe000e014

080085a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085b4 <vPortEnableVFP+0x10>
 80085a8:	6801      	ldr	r1, [r0, #0]
 80085aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ae:	6001      	str	r1, [r0, #0]
 80085b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085b2:	bf00      	nop
 80085b4:	e000ed88 	.word	0xe000ed88

080085b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085be:	f3ef 8305 	mrs	r3, IPSR
 80085c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d914      	bls.n	80085f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085ca:	4a17      	ldr	r2, [pc, #92]	; (8008628 <vPortValidateInterruptPriority+0x70>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085d4:	4b15      	ldr	r3, [pc, #84]	; (800862c <vPortValidateInterruptPriority+0x74>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	7afa      	ldrb	r2, [r7, #11]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d20a      	bcs.n	80085f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <vPortValidateInterruptPriority+0x78>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <vPortValidateInterruptPriority+0x7c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d90a      	bls.n	800861a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	603b      	str	r3, [r7, #0]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <vPortValidateInterruptPriority+0x60>
	}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	e000e3f0 	.word	0xe000e3f0
 800862c:	20001bc8 	.word	0x20001bc8
 8008630:	e000ed0c 	.word	0xe000ed0c
 8008634:	20001bcc 	.word	0x20001bcc

08008638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008644:	f7fe fd8c 	bl	8007160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008648:	4b5b      	ldr	r3, [pc, #364]	; (80087b8 <pvPortMalloc+0x180>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008650:	f000 f920 	bl	8008894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008654:	4b59      	ldr	r3, [pc, #356]	; (80087bc <pvPortMalloc+0x184>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 8093 	bne.w	8008788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01d      	beq.n	80086a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008668:	2208      	movs	r2, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d014      	beq.n	80086a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f023 0307 	bic.w	r3, r3, #7
 8008680:	3308      	adds	r3, #8
 8008682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <pvPortMalloc+0x6c>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	617b      	str	r3, [r7, #20]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d06e      	beq.n	8008788 <pvPortMalloc+0x150>
 80086aa:	4b45      	ldr	r3, [pc, #276]	; (80087c0 <pvPortMalloc+0x188>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d869      	bhi.n	8008788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086b4:	4b43      	ldr	r3, [pc, #268]	; (80087c4 <pvPortMalloc+0x18c>)
 80086b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086b8:	4b42      	ldr	r3, [pc, #264]	; (80087c4 <pvPortMalloc+0x18c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086be:	e004      	b.n	80086ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d903      	bls.n	80086dc <pvPortMalloc+0xa4>
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f1      	bne.n	80086c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086dc:	4b36      	ldr	r3, [pc, #216]	; (80087b8 <pvPortMalloc+0x180>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d050      	beq.n	8008788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2208      	movs	r2, #8
 80086ec:	4413      	add	r3, r2
 80086ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	2308      	movs	r3, #8
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	429a      	cmp	r2, r3
 8008706:	d91f      	bls.n	8008748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <pvPortMalloc+0xf8>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	613b      	str	r3, [r7, #16]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008742:	69b8      	ldr	r0, [r7, #24]
 8008744:	f000 f908 	bl	8008958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <pvPortMalloc+0x188>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	4a1b      	ldr	r2, [pc, #108]	; (80087c0 <pvPortMalloc+0x188>)
 8008754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008756:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <pvPortMalloc+0x188>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <pvPortMalloc+0x190>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d203      	bcs.n	800876a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008762:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <pvPortMalloc+0x188>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a18      	ldr	r2, [pc, #96]	; (80087c8 <pvPortMalloc+0x190>)
 8008768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <pvPortMalloc+0x184>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	431a      	orrs	r2, r3
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <pvPortMalloc+0x194>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	4a11      	ldr	r2, [pc, #68]	; (80087cc <pvPortMalloc+0x194>)
 8008786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008788:	f7fe fcf8 	bl	800717c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <pvPortMalloc+0x174>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <pvPortMalloc+0x172>
	return pvReturn;
 80087ac:	69fb      	ldr	r3, [r7, #28]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3728      	adds	r7, #40	; 0x28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	200057d8 	.word	0x200057d8
 80087bc:	200057ec 	.word	0x200057ec
 80087c0:	200057dc 	.word	0x200057dc
 80087c4:	200057d0 	.word	0x200057d0
 80087c8:	200057e0 	.word	0x200057e0
 80087cc:	200057e4 	.word	0x200057e4

080087d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d04d      	beq.n	800887e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087e2:	2308      	movs	r3, #8
 80087e4:	425b      	negs	r3, r3
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <vPortFree+0xb8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <vPortFree+0x44>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	60fb      	str	r3, [r7, #12]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <vPortFree+0x62>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60bb      	str	r3, [r7, #8]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <vPortFree+0xb8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01e      	beq.n	800887e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d11a      	bne.n	800887e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <vPortFree+0xb8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	43db      	mvns	r3, r3
 8008852:	401a      	ands	r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008858:	f7fe fc82 	bl	8007160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <vPortFree+0xbc>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4413      	add	r3, r2
 8008866:	4a09      	ldr	r2, [pc, #36]	; (800888c <vPortFree+0xbc>)
 8008868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800886a:	6938      	ldr	r0, [r7, #16]
 800886c:	f000 f874 	bl	8008958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <vPortFree+0xc0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3301      	adds	r3, #1
 8008876:	4a06      	ldr	r2, [pc, #24]	; (8008890 <vPortFree+0xc0>)
 8008878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800887a:	f7fe fc7f 	bl	800717c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200057ec 	.word	0x200057ec
 800888c:	200057dc 	.word	0x200057dc
 8008890:	200057e8 	.word	0x200057e8

08008894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800889a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800889e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088a0:	4b27      	ldr	r3, [pc, #156]	; (8008940 <prvHeapInit+0xac>)
 80088a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3307      	adds	r3, #7
 80088b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0307 	bic.w	r3, r3, #7
 80088ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <prvHeapInit+0xac>)
 80088c4:	4413      	add	r3, r2
 80088c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <prvHeapInit+0xb0>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <prvHeapInit+0xb0>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088e0:	2208      	movs	r2, #8
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0307 	bic.w	r3, r3, #7
 80088ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a15      	ldr	r2, [pc, #84]	; (8008948 <prvHeapInit+0xb4>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <prvHeapInit+0xb4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088fe:	4b12      	ldr	r3, [pc, #72]	; (8008948 <prvHeapInit+0xb4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008914:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <prvHeapInit+0xb4>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	4a0a      	ldr	r2, [pc, #40]	; (800894c <prvHeapInit+0xb8>)
 8008922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4a09      	ldr	r2, [pc, #36]	; (8008950 <prvHeapInit+0xbc>)
 800892a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <prvHeapInit+0xc0>)
 800892e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20001bd0 	.word	0x20001bd0
 8008944:	200057d0 	.word	0x200057d0
 8008948:	200057d8 	.word	0x200057d8
 800894c:	200057e0 	.word	0x200057e0
 8008950:	200057dc 	.word	0x200057dc
 8008954:	200057ec 	.word	0x200057ec

08008958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <prvInsertBlockIntoFreeList+0xac>)
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e002      	b.n	800896c <prvInsertBlockIntoFreeList+0x14>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d8f7      	bhi.n	8008966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	4413      	add	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d108      	bne.n	800899a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d118      	bne.n	80089e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <prvInsertBlockIntoFreeList+0xb0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d00d      	beq.n	80089d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e008      	b.n	80089e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <prvInsertBlockIntoFreeList+0xb0>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e003      	b.n	80089e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d002      	beq.n	80089f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	200057d0 	.word	0x200057d0
 8008a08:	200057d8 	.word	0x200057d8

08008a0c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b089      	sub	sp, #36	; 0x24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <lwrb_init+0x1e>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <lwrb_init+0x1e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <lwrb_init+0x22>
        return 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e019      	b.n	8008a62 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	330c      	adds	r3, #12
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3308      	adds	r3, #8
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	601a      	str	r2, [r3, #0]
    return 1;
 8008a60:	2301      	movs	r3, #1
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3724      	adds	r7, #36	; 0x24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b08c      	sub	sp, #48	; 0x30
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00d      	beq.n	8008aa0 <lwrb_read+0x32>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <lwrb_read+0x32>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <lwrb_read+0x32>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <lwrb_read+0x32>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <lwrb_read+0x36>
        return 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e060      	b.n	8008b66 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f8a3 	bl	8008bf0 <lwrb_get_full>
 8008aaa:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bf28      	it	cs
 8008ab4:	4613      	movcs	r3, r2
 8008ab6:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <lwrb_read+0x54>
        return 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e051      	b.n	8008b66 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	623b      	str	r3, [r7, #32]
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f3bf 8f5b 	dmb	ish
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bf28      	it	cs
 8008ae4:	4613      	movcs	r3, r2
 8008ae6:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	4413      	add	r3, r2
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	4619      	mov	r1, r3
 8008af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af6:	f001 fa98 	bl	800a02a <memcpy>
    buff_r_ptr += tocopy;
 8008afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8008b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	18d0      	adds	r0, r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f001 fa84 	bl	800a02a <memcpy>
        buff_r_ptr = btr;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d301      	bcc.n	8008b34 <lwrb_read+0xc6>
        buff_r_ptr = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3308      	adds	r3, #8
 8008b38:	61bb      	str	r3, [r7, #24]
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f3bf 8f5b 	dmb	ish
 8008b46:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <lwrb_read+0xf2>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	440a      	add	r2, r1
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	4798      	blx	r3
    return tocopy + btr;
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4413      	add	r3, r2
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3730      	adds	r7, #48	; 0x30
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 8008b6e:	b480      	push	{r7}
 8008b70:	b08b      	sub	sp, #44	; 0x2c
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <lwrb_get_free+0x1e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <lwrb_get_free+0x1e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <lwrb_get_free+0x22>
        return 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e029      	b.n	8008be4 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	330c      	adds	r3, #12
 8008b94:	623b      	str	r3, [r7, #32]
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d103      	bne.n	8008bc0 <lwrb_get_free+0x52>
        size = buff->size;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbe:	e00f      	b.n	8008be0 <lwrb_get_free+0x72>
    } else if (r > w) {
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d904      	bls.n	8008bd2 <lwrb_get_free+0x64>
        size = r - w;
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd0:	e006      	b.n	8008be0 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	6979      	ldr	r1, [r7, #20]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	3b01      	subs	r3, #1
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	372c      	adds	r7, #44	; 0x2c
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 8008bf0:	b480      	push	{r7}
 8008bf2:	b08b      	sub	sp, #44	; 0x2c
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d007      	beq.n	8008c0e <lwrb_get_full+0x1e>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <lwrb_get_full+0x1e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <lwrb_get_full+0x22>
        return 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e027      	b.n	8008c62 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	330c      	adds	r3, #12
 8008c16:	623b      	str	r3, [r7, #32]
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3308      	adds	r3, #8
 8008c26:	61bb      	str	r3, [r7, #24]
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d102      	bne.n	8008c40 <lwrb_get_full+0x50>
        size = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3e:	e00f      	b.n	8008c60 <lwrb_get_full+0x70>
    } else if (w > r) {
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d904      	bls.n	8008c52 <lwrb_get_full+0x62>
        size = w - r;
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c50:	e006      	b.n	8008c60 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	69f9      	ldr	r1, [r7, #28]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	1acb      	subs	r3, r1, r3
 8008c5c:	4413      	add	r3, r2
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	372c      	adds	r7, #44	; 0x2c
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(lwrb_t* buff, size_t len) {
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b088      	sub	sp, #32
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
    size_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <lwrb_skip+0x26>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <lwrb_skip+0x26>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <lwrb_skip+0x26>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <lwrb_skip+0x2a>
        return 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e036      	b.n	8008d06 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ffa9 	bl	8008bf0 <lwrb_get_full>
 8008c9e:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	bf28      	it	cs
 8008ca8:	4613      	movcs	r3, r2
 8008caa:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f3bf 8f5b 	dmb	ish
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	61fb      	str	r3, [r7, #28]
    r += len;
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d304      	bcc.n	8008cdc <lwrb_skip+0x6e>
        r -= buff->size;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f3bf 8f5b 	dmb	ish
 8008cee:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <lwrb_skip+0x96>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
    return len;
 8008d04:	683b      	ldr	r3, [r7, #0]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <lwrb_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
lwrb_advance(lwrb_t* buff, size_t len) {
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
    size_t free, w;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <lwrb_advance+0x26>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <lwrb_advance+0x26>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <lwrb_advance+0x26>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <lwrb_advance+0x2a>
        return 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	e036      	b.n	8008da6 <lwrb_advance+0x98>
    }

    /* Use local variables before writing back to main structure */
    free = lwrb_get_free(buff);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff ff18 	bl	8008b6e <lwrb_get_free>
 8008d3e:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, free);
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bf28      	it	cs
 8008d48:	4613      	movcs	r3, r2
 8008d4a:	603b      	str	r3, [r7, #0]
    w = LWRB_LOAD(buff->w, memory_order_acquire);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	330c      	adds	r3, #12
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f3bf 8f5b 	dmb	ish
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	61fb      	str	r3, [r7, #28]
    w += len;
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	4413      	add	r3, r2
 8008d66:	61fb      	str	r3, [r7, #28]
    if (w >= buff->size) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d304      	bcc.n	8008d7c <lwrb_advance+0x6e>
        w -= buff->size;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->w, w, memory_order_release);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	60bb      	str	r3, [r7, #8]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f3bf 8f5b 	dmb	ish
 8008d8e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, len);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <lwrb_advance+0x96>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	2101      	movs	r1, #1
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
    return len;
 8008da4:	683b      	ldr	r3, [r7, #0]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <lwrb_find>:
 * \param           found_idx: Pointer to variable to write index in array where bts has been found
 *                      Must not be set to `NULL`
 * \return          `1` if \arg bts found, `0` otherwise
 */
uint8_t
lwrb_find(const lwrb_t* buff, const void* bts, size_t len, size_t start_offset, size_t* found_idx) {
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08c      	sub	sp, #48	; 0x30
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
    size_t full, r, max_x;
    uint8_t found = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    const uint8_t* needle = bts;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || needle == NULL || len == 0 || found_idx == NULL) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <lwrb_find+0x40>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <lwrb_find+0x40>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d008      	beq.n	8008dee <lwrb_find+0x40>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <lwrb_find+0x40>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <lwrb_find+0x40>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <lwrb_find+0x44>
        return 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e065      	b.n	8008ebe <lwrb_find+0x110>
    }
    *found_idx = 0;
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

    full = lwrb_get_full(buff);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fef9 	bl	8008bf0 <lwrb_get_full>
 8008dfe:	61b8      	str	r0, [r7, #24]
    /* Verify initial conditions */
    if (full < (len + start_offset)) {
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	4413      	add	r3, r2
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d201      	bcs.n	8008e10 <lwrb_find+0x62>
        return 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e056      	b.n	8008ebe <lwrb_find+0x110>
    }

    /* Max number of for loops is buff_full - input_len - start_offset of buffer length */
    max_x = full - len;
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	617b      	str	r3, [r7, #20]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1c:	e045      	b.n	8008eaa <lwrb_find+0xfc>
        found = 1; /* Found by default */
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* Prepare the starting point for reading */
        r = buff->r + skip_x;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3308      	adds	r3, #8
 8008e28:	f3bf 8f5b 	dmb	ish
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f3bf 8f5b 	dmb	ish
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	4413      	add	r3, r2
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (r >= buff->size) {
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d304      	bcc.n	8008e50 <lwrb_find+0xa2>
            r -= buff->size;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Search in the buffer */
        for (size_t i = 0; i < len; ++i) {
 8008e50:	2300      	movs	r3, #0
 8008e52:	623b      	str	r3, [r7, #32]
 8008e54:	e01b      	b.n	8008e8e <lwrb_find+0xe0>
            if (buff->buff[r] != needle[i]) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	4413      	add	r3, r2
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	440b      	add	r3, r1
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d003      	beq.n	8008e74 <lwrb_find+0xc6>
                found = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                break;
 8008e72:	e010      	b.n	8008e96 <lwrb_find+0xe8>
            }
            if (++r >= buff->size) {
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	3301      	adds	r3, #1
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d301      	bcc.n	8008e88 <lwrb_find+0xda>
                r = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t i = 0; i < len; ++i) {
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	623b      	str	r3, [r7, #32]
 8008e8e:	6a3a      	ldr	r2, [r7, #32]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d3df      	bcc.n	8008e56 <lwrb_find+0xa8>
            }
        }
        if (found) {
 8008e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <lwrb_find+0xf6>
            *found_idx = skip_x;
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	601a      	str	r2, [r3, #0]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d103      	bne.n	8008eba <lwrb_find+0x10c>
 8008eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d9b1      	bls.n	8008e1e <lwrb_find+0x70>
        }
    }
    return found;
 8008eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3730      	adds	r7, #48	; 0x30
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <__cvt>:
 8008ec6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eca:	ec55 4b10 	vmov	r4, r5, d0
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	bfbb      	ittet	lt
 8008ed8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008edc:	461d      	movlt	r5, r3
 8008ede:	2300      	movge	r3, #0
 8008ee0:	232d      	movlt	r3, #45	; 0x2d
 8008ee2:	700b      	strb	r3, [r1, #0]
 8008ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008eea:	4691      	mov	r9, r2
 8008eec:	f023 0820 	bic.w	r8, r3, #32
 8008ef0:	bfbc      	itt	lt
 8008ef2:	4622      	movlt	r2, r4
 8008ef4:	4614      	movlt	r4, r2
 8008ef6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008efa:	d005      	beq.n	8008f08 <__cvt+0x42>
 8008efc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f00:	d100      	bne.n	8008f04 <__cvt+0x3e>
 8008f02:	3601      	adds	r6, #1
 8008f04:	2102      	movs	r1, #2
 8008f06:	e000      	b.n	8008f0a <__cvt+0x44>
 8008f08:	2103      	movs	r1, #3
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	ab02      	add	r3, sp, #8
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	ec45 4b10 	vmov	d0, r4, r5
 8008f16:	4653      	mov	r3, sl
 8008f18:	4632      	mov	r2, r6
 8008f1a:	f001 f925 	bl	800a168 <_dtoa_r>
 8008f1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f22:	4607      	mov	r7, r0
 8008f24:	d102      	bne.n	8008f2c <__cvt+0x66>
 8008f26:	f019 0f01 	tst.w	r9, #1
 8008f2a:	d022      	beq.n	8008f72 <__cvt+0xac>
 8008f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f30:	eb07 0906 	add.w	r9, r7, r6
 8008f34:	d110      	bne.n	8008f58 <__cvt+0x92>
 8008f36:	783b      	ldrb	r3, [r7, #0]
 8008f38:	2b30      	cmp	r3, #48	; 0x30
 8008f3a:	d10a      	bne.n	8008f52 <__cvt+0x8c>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4620      	mov	r0, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	f7f7 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f48:	b918      	cbnz	r0, 8008f52 <__cvt+0x8c>
 8008f4a:	f1c6 0601 	rsb	r6, r6, #1
 8008f4e:	f8ca 6000 	str.w	r6, [sl]
 8008f52:	f8da 3000 	ldr.w	r3, [sl]
 8008f56:	4499      	add	r9, r3
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f7f7 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f64:	b108      	cbz	r0, 8008f6a <__cvt+0xa4>
 8008f66:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f6a:	2230      	movs	r2, #48	; 0x30
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	454b      	cmp	r3, r9
 8008f70:	d307      	bcc.n	8008f82 <__cvt+0xbc>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f76:	1bdb      	subs	r3, r3, r7
 8008f78:	4638      	mov	r0, r7
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	b004      	add	sp, #16
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	1c59      	adds	r1, r3, #1
 8008f84:	9103      	str	r1, [sp, #12]
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	e7f0      	b.n	8008f6c <__cvt+0xa6>

08008f8a <__exponent>:
 8008f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	bfb8      	it	lt
 8008f92:	4249      	neglt	r1, r1
 8008f94:	f803 2b02 	strb.w	r2, [r3], #2
 8008f98:	bfb4      	ite	lt
 8008f9a:	222d      	movlt	r2, #45	; 0x2d
 8008f9c:	222b      	movge	r2, #43	; 0x2b
 8008f9e:	2909      	cmp	r1, #9
 8008fa0:	7042      	strb	r2, [r0, #1]
 8008fa2:	dd2a      	ble.n	8008ffa <__exponent+0x70>
 8008fa4:	f10d 0207 	add.w	r2, sp, #7
 8008fa8:	4617      	mov	r7, r2
 8008faa:	260a      	movs	r6, #10
 8008fac:	4694      	mov	ip, r2
 8008fae:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fb2:	fb06 1415 	mls	r4, r6, r5, r1
 8008fb6:	3430      	adds	r4, #48	; 0x30
 8008fb8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	2c63      	cmp	r4, #99	; 0x63
 8008fc0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	dcf1      	bgt.n	8008fac <__exponent+0x22>
 8008fc8:	3130      	adds	r1, #48	; 0x30
 8008fca:	f1ac 0402 	sub.w	r4, ip, #2
 8008fce:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008fd2:	1c41      	adds	r1, r0, #1
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	42ba      	cmp	r2, r7
 8008fd8:	d30a      	bcc.n	8008ff0 <__exponent+0x66>
 8008fda:	f10d 0209 	add.w	r2, sp, #9
 8008fde:	eba2 020c 	sub.w	r2, r2, ip
 8008fe2:	42bc      	cmp	r4, r7
 8008fe4:	bf88      	it	hi
 8008fe6:	2200      	movhi	r2, #0
 8008fe8:	4413      	add	r3, r2
 8008fea:	1a18      	subs	r0, r3, r0
 8008fec:	b003      	add	sp, #12
 8008fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ff4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008ff8:	e7ed      	b.n	8008fd6 <__exponent+0x4c>
 8008ffa:	2330      	movs	r3, #48	; 0x30
 8008ffc:	3130      	adds	r1, #48	; 0x30
 8008ffe:	7083      	strb	r3, [r0, #2]
 8009000:	70c1      	strb	r1, [r0, #3]
 8009002:	1d03      	adds	r3, r0, #4
 8009004:	e7f1      	b.n	8008fea <__exponent+0x60>
	...

08009008 <_printf_float>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	ed2d 8b02 	vpush	{d8}
 8009010:	b08d      	sub	sp, #52	; 0x34
 8009012:	460c      	mov	r4, r1
 8009014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009018:	4616      	mov	r6, r2
 800901a:	461f      	mov	r7, r3
 800901c:	4605      	mov	r5, r0
 800901e:	f000 ff37 	bl	8009e90 <_localeconv_r>
 8009022:	f8d0 a000 	ldr.w	sl, [r0]
 8009026:	4650      	mov	r0, sl
 8009028:	f7f7 f92a 	bl	8000280 <strlen>
 800902c:	2300      	movs	r3, #0
 800902e:	930a      	str	r3, [sp, #40]	; 0x28
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8d8 3000 	ldr.w	r3, [r8]
 8009038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800903c:	3307      	adds	r3, #7
 800903e:	f023 0307 	bic.w	r3, r3, #7
 8009042:	f103 0208 	add.w	r2, r3, #8
 8009046:	f8c8 2000 	str.w	r2, [r8]
 800904a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800904e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	f8cd 8018 	str.w	r8, [sp, #24]
 8009058:	ee08 0a10 	vmov	s16, r0
 800905c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009064:	4b9e      	ldr	r3, [pc, #632]	; (80092e0 <_printf_float+0x2d8>)
 8009066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800906a:	f7f7 fd67 	bl	8000b3c <__aeabi_dcmpun>
 800906e:	bb88      	cbnz	r0, 80090d4 <_printf_float+0xcc>
 8009070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009074:	4b9a      	ldr	r3, [pc, #616]	; (80092e0 <_printf_float+0x2d8>)
 8009076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800907a:	f7f7 fd41 	bl	8000b00 <__aeabi_dcmple>
 800907e:	bb48      	cbnz	r0, 80090d4 <_printf_float+0xcc>
 8009080:	2200      	movs	r2, #0
 8009082:	2300      	movs	r3, #0
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fd30 	bl	8000aec <__aeabi_dcmplt>
 800908c:	b110      	cbz	r0, 8009094 <_printf_float+0x8c>
 800908e:	232d      	movs	r3, #45	; 0x2d
 8009090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009094:	4a93      	ldr	r2, [pc, #588]	; (80092e4 <_printf_float+0x2dc>)
 8009096:	4b94      	ldr	r3, [pc, #592]	; (80092e8 <_printf_float+0x2e0>)
 8009098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800909c:	bf94      	ite	ls
 800909e:	4690      	movls	r8, r2
 80090a0:	4698      	movhi	r8, r3
 80090a2:	2303      	movs	r3, #3
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	9b05      	ldr	r3, [sp, #20]
 80090a8:	f023 0304 	bic.w	r3, r3, #4
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	9700      	str	r7, [sp, #0]
 80090b4:	4633      	mov	r3, r6
 80090b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f9da 	bl	8009474 <_printf_common>
 80090c0:	3001      	adds	r0, #1
 80090c2:	f040 8090 	bne.w	80091e6 <_printf_float+0x1de>
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ca:	b00d      	add	sp, #52	; 0x34
 80090cc:	ecbd 8b02 	vpop	{d8}
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4642      	mov	r2, r8
 80090d6:	464b      	mov	r3, r9
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd2e 	bl	8000b3c <__aeabi_dcmpun>
 80090e0:	b140      	cbz	r0, 80090f4 <_printf_float+0xec>
 80090e2:	464b      	mov	r3, r9
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfbc      	itt	lt
 80090e8:	232d      	movlt	r3, #45	; 0x2d
 80090ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090ee:	4a7f      	ldr	r2, [pc, #508]	; (80092ec <_printf_float+0x2e4>)
 80090f0:	4b7f      	ldr	r3, [pc, #508]	; (80092f0 <_printf_float+0x2e8>)
 80090f2:	e7d1      	b.n	8009098 <_printf_float+0x90>
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090fa:	9206      	str	r2, [sp, #24]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	d13f      	bne.n	8009180 <_printf_float+0x178>
 8009100:	2306      	movs	r3, #6
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	9b05      	ldr	r3, [sp, #20]
 8009106:	6861      	ldr	r1, [r4, #4]
 8009108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800910c:	2300      	movs	r3, #0
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	ab0a      	add	r3, sp, #40	; 0x28
 8009112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009116:	ab09      	add	r3, sp, #36	; 0x24
 8009118:	ec49 8b10 	vmov	d0, r8, r9
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009124:	4628      	mov	r0, r5
 8009126:	f7ff fece 	bl	8008ec6 <__cvt>
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800912e:	2b47      	cmp	r3, #71	; 0x47
 8009130:	4680      	mov	r8, r0
 8009132:	d108      	bne.n	8009146 <_printf_float+0x13e>
 8009134:	1cc8      	adds	r0, r1, #3
 8009136:	db02      	blt.n	800913e <_printf_float+0x136>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	4299      	cmp	r1, r3
 800913c:	dd41      	ble.n	80091c2 <_printf_float+0x1ba>
 800913e:	f1ab 0302 	sub.w	r3, fp, #2
 8009142:	fa5f fb83 	uxtb.w	fp, r3
 8009146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800914a:	d820      	bhi.n	800918e <_printf_float+0x186>
 800914c:	3901      	subs	r1, #1
 800914e:	465a      	mov	r2, fp
 8009150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009154:	9109      	str	r1, [sp, #36]	; 0x24
 8009156:	f7ff ff18 	bl	8008f8a <__exponent>
 800915a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915c:	1813      	adds	r3, r2, r0
 800915e:	2a01      	cmp	r2, #1
 8009160:	4681      	mov	r9, r0
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	dc02      	bgt.n	800916c <_printf_float+0x164>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	07d2      	lsls	r2, r2, #31
 800916a:	d501      	bpl.n	8009170 <_printf_float+0x168>
 800916c:	3301      	adds	r3, #1
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009174:	2b00      	cmp	r3, #0
 8009176:	d09c      	beq.n	80090b2 <_printf_float+0xaa>
 8009178:	232d      	movs	r3, #45	; 0x2d
 800917a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800917e:	e798      	b.n	80090b2 <_printf_float+0xaa>
 8009180:	9a06      	ldr	r2, [sp, #24]
 8009182:	2a47      	cmp	r2, #71	; 0x47
 8009184:	d1be      	bne.n	8009104 <_printf_float+0xfc>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1bc      	bne.n	8009104 <_printf_float+0xfc>
 800918a:	2301      	movs	r3, #1
 800918c:	e7b9      	b.n	8009102 <_printf_float+0xfa>
 800918e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009192:	d118      	bne.n	80091c6 <_printf_float+0x1be>
 8009194:	2900      	cmp	r1, #0
 8009196:	6863      	ldr	r3, [r4, #4]
 8009198:	dd0b      	ble.n	80091b2 <_printf_float+0x1aa>
 800919a:	6121      	str	r1, [r4, #16]
 800919c:	b913      	cbnz	r3, 80091a4 <_printf_float+0x19c>
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	07d0      	lsls	r0, r2, #31
 80091a2:	d502      	bpl.n	80091aa <_printf_float+0x1a2>
 80091a4:	3301      	adds	r3, #1
 80091a6:	440b      	add	r3, r1
 80091a8:	6123      	str	r3, [r4, #16]
 80091aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80091ac:	f04f 0900 	mov.w	r9, #0
 80091b0:	e7de      	b.n	8009170 <_printf_float+0x168>
 80091b2:	b913      	cbnz	r3, 80091ba <_printf_float+0x1b2>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	07d2      	lsls	r2, r2, #31
 80091b8:	d501      	bpl.n	80091be <_printf_float+0x1b6>
 80091ba:	3302      	adds	r3, #2
 80091bc:	e7f4      	b.n	80091a8 <_printf_float+0x1a0>
 80091be:	2301      	movs	r3, #1
 80091c0:	e7f2      	b.n	80091a8 <_printf_float+0x1a0>
 80091c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c8:	4299      	cmp	r1, r3
 80091ca:	db05      	blt.n	80091d8 <_printf_float+0x1d0>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	6121      	str	r1, [r4, #16]
 80091d0:	07d8      	lsls	r0, r3, #31
 80091d2:	d5ea      	bpl.n	80091aa <_printf_float+0x1a2>
 80091d4:	1c4b      	adds	r3, r1, #1
 80091d6:	e7e7      	b.n	80091a8 <_printf_float+0x1a0>
 80091d8:	2900      	cmp	r1, #0
 80091da:	bfd4      	ite	le
 80091dc:	f1c1 0202 	rsble	r2, r1, #2
 80091e0:	2201      	movgt	r2, #1
 80091e2:	4413      	add	r3, r2
 80091e4:	e7e0      	b.n	80091a8 <_printf_float+0x1a0>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	055a      	lsls	r2, r3, #21
 80091ea:	d407      	bmi.n	80091fc <_printf_float+0x1f4>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	4642      	mov	r2, r8
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	d12c      	bne.n	8009254 <_printf_float+0x24c>
 80091fa:	e764      	b.n	80090c6 <_printf_float+0xbe>
 80091fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009200:	f240 80e0 	bls.w	80093c4 <_printf_float+0x3bc>
 8009204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009208:	2200      	movs	r2, #0
 800920a:	2300      	movs	r3, #0
 800920c:	f7f7 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8009210:	2800      	cmp	r0, #0
 8009212:	d034      	beq.n	800927e <_printf_float+0x276>
 8009214:	4a37      	ldr	r2, [pc, #220]	; (80092f4 <_printf_float+0x2ec>)
 8009216:	2301      	movs	r3, #1
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f af51 	beq.w	80090c6 <_printf_float+0xbe>
 8009224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	db02      	blt.n	8009232 <_printf_float+0x22a>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	07d8      	lsls	r0, r3, #31
 8009230:	d510      	bpl.n	8009254 <_printf_float+0x24c>
 8009232:	ee18 3a10 	vmov	r3, s16
 8009236:	4652      	mov	r2, sl
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f af41 	beq.w	80090c6 <_printf_float+0xbe>
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	f104 091a 	add.w	r9, r4, #26
 800924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924e:	3b01      	subs	r3, #1
 8009250:	4543      	cmp	r3, r8
 8009252:	dc09      	bgt.n	8009268 <_printf_float+0x260>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	f100 8107 	bmi.w	800946a <_printf_float+0x462>
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009260:	4298      	cmp	r0, r3
 8009262:	bfb8      	it	lt
 8009264:	4618      	movlt	r0, r3
 8009266:	e730      	b.n	80090ca <_printf_float+0xc2>
 8009268:	2301      	movs	r3, #1
 800926a:	464a      	mov	r2, r9
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af27 	beq.w	80090c6 <_printf_float+0xbe>
 8009278:	f108 0801 	add.w	r8, r8, #1
 800927c:	e7e6      	b.n	800924c <_printf_float+0x244>
 800927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc39      	bgt.n	80092f8 <_printf_float+0x2f0>
 8009284:	4a1b      	ldr	r2, [pc, #108]	; (80092f4 <_printf_float+0x2ec>)
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af19 	beq.w	80090c6 <_printf_float+0xbe>
 8009294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009298:	4313      	orrs	r3, r2
 800929a:	d102      	bne.n	80092a2 <_printf_float+0x29a>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	d5d8      	bpl.n	8009254 <_printf_float+0x24c>
 80092a2:	ee18 3a10 	vmov	r3, s16
 80092a6:	4652      	mov	r2, sl
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af09 	beq.w	80090c6 <_printf_float+0xbe>
 80092b4:	f04f 0900 	mov.w	r9, #0
 80092b8:	f104 0a1a 	add.w	sl, r4, #26
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	425b      	negs	r3, r3
 80092c0:	454b      	cmp	r3, r9
 80092c2:	dc01      	bgt.n	80092c8 <_printf_float+0x2c0>
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	e792      	b.n	80091ee <_printf_float+0x1e6>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f aef7 	beq.w	80090c6 <_printf_float+0xbe>
 80092d8:	f109 0901 	add.w	r9, r9, #1
 80092dc:	e7ee      	b.n	80092bc <_printf_float+0x2b4>
 80092de:	bf00      	nop
 80092e0:	7fefffff 	.word	0x7fefffff
 80092e4:	0800f28c 	.word	0x0800f28c
 80092e8:	0800f290 	.word	0x0800f290
 80092ec:	0800f294 	.word	0x0800f294
 80092f0:	0800f298 	.word	0x0800f298
 80092f4:	0800f628 	.word	0x0800f628
 80092f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092fc:	429a      	cmp	r2, r3
 80092fe:	bfa8      	it	ge
 8009300:	461a      	movge	r2, r3
 8009302:	2a00      	cmp	r2, #0
 8009304:	4691      	mov	r9, r2
 8009306:	dc37      	bgt.n	8009378 <_printf_float+0x370>
 8009308:	f04f 0b00 	mov.w	fp, #0
 800930c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009310:	f104 021a 	add.w	r2, r4, #26
 8009314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009316:	9305      	str	r3, [sp, #20]
 8009318:	eba3 0309 	sub.w	r3, r3, r9
 800931c:	455b      	cmp	r3, fp
 800931e:	dc33      	bgt.n	8009388 <_printf_float+0x380>
 8009320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009324:	429a      	cmp	r2, r3
 8009326:	db3b      	blt.n	80093a0 <_printf_float+0x398>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07da      	lsls	r2, r3, #31
 800932c:	d438      	bmi.n	80093a0 <_printf_float+0x398>
 800932e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009332:	eba2 0903 	sub.w	r9, r2, r3
 8009336:	9b05      	ldr	r3, [sp, #20]
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	4591      	cmp	r9, r2
 800933c:	bfa8      	it	ge
 800933e:	4691      	movge	r9, r2
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	dc35      	bgt.n	80093b2 <_printf_float+0x3aa>
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800934e:	f104 0a1a 	add.w	sl, r4, #26
 8009352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	eba3 0309 	sub.w	r3, r3, r9
 800935c:	4543      	cmp	r3, r8
 800935e:	f77f af79 	ble.w	8009254 <_printf_float+0x24c>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	f43f aeaa 	beq.w	80090c6 <_printf_float+0xbe>
 8009372:	f108 0801 	add.w	r8, r8, #1
 8009376:	e7ec      	b.n	8009352 <_printf_float+0x34a>
 8009378:	4613      	mov	r3, r2
 800937a:	4631      	mov	r1, r6
 800937c:	4642      	mov	r2, r8
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	d1c0      	bne.n	8009308 <_printf_float+0x300>
 8009386:	e69e      	b.n	80090c6 <_printf_float+0xbe>
 8009388:	2301      	movs	r3, #1
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	9205      	str	r2, [sp, #20]
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f ae97 	beq.w	80090c6 <_printf_float+0xbe>
 8009398:	9a05      	ldr	r2, [sp, #20]
 800939a:	f10b 0b01 	add.w	fp, fp, #1
 800939e:	e7b9      	b.n	8009314 <_printf_float+0x30c>
 80093a0:	ee18 3a10 	vmov	r3, s16
 80093a4:	4652      	mov	r2, sl
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	d1be      	bne.n	800932e <_printf_float+0x326>
 80093b0:	e689      	b.n	80090c6 <_printf_float+0xbe>
 80093b2:	9a05      	ldr	r2, [sp, #20]
 80093b4:	464b      	mov	r3, r9
 80093b6:	4442      	add	r2, r8
 80093b8:	4631      	mov	r1, r6
 80093ba:	4628      	mov	r0, r5
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	d1c1      	bne.n	8009346 <_printf_float+0x33e>
 80093c2:	e680      	b.n	80090c6 <_printf_float+0xbe>
 80093c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c6:	2a01      	cmp	r2, #1
 80093c8:	dc01      	bgt.n	80093ce <_printf_float+0x3c6>
 80093ca:	07db      	lsls	r3, r3, #31
 80093cc:	d53a      	bpl.n	8009444 <_printf_float+0x43c>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4642      	mov	r2, r8
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f ae74 	beq.w	80090c6 <_printf_float+0xbe>
 80093de:	ee18 3a10 	vmov	r3, s16
 80093e2:	4652      	mov	r2, sl
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f ae6b 	beq.w	80090c6 <_printf_float+0xbe>
 80093f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80093fc:	f7f7 fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009400:	b9d8      	cbnz	r0, 800943a <_printf_float+0x432>
 8009402:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009406:	f108 0201 	add.w	r2, r8, #1
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	d10e      	bne.n	8009432 <_printf_float+0x42a>
 8009414:	e657      	b.n	80090c6 <_printf_float+0xbe>
 8009416:	2301      	movs	r3, #1
 8009418:	4652      	mov	r2, sl
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f ae50 	beq.w	80090c6 <_printf_float+0xbe>
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942c:	3b01      	subs	r3, #1
 800942e:	4543      	cmp	r3, r8
 8009430:	dcf1      	bgt.n	8009416 <_printf_float+0x40e>
 8009432:	464b      	mov	r3, r9
 8009434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009438:	e6da      	b.n	80091f0 <_printf_float+0x1e8>
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	f104 0a1a 	add.w	sl, r4, #26
 8009442:	e7f2      	b.n	800942a <_printf_float+0x422>
 8009444:	2301      	movs	r3, #1
 8009446:	4642      	mov	r2, r8
 8009448:	e7df      	b.n	800940a <_printf_float+0x402>
 800944a:	2301      	movs	r3, #1
 800944c:	464a      	mov	r2, r9
 800944e:	4631      	mov	r1, r6
 8009450:	4628      	mov	r0, r5
 8009452:	47b8      	blx	r7
 8009454:	3001      	adds	r0, #1
 8009456:	f43f ae36 	beq.w	80090c6 <_printf_float+0xbe>
 800945a:	f108 0801 	add.w	r8, r8, #1
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009462:	1a5b      	subs	r3, r3, r1
 8009464:	4543      	cmp	r3, r8
 8009466:	dcf0      	bgt.n	800944a <_printf_float+0x442>
 8009468:	e6f8      	b.n	800925c <_printf_float+0x254>
 800946a:	f04f 0800 	mov.w	r8, #0
 800946e:	f104 0919 	add.w	r9, r4, #25
 8009472:	e7f4      	b.n	800945e <_printf_float+0x456>

08009474 <_printf_common>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	4616      	mov	r6, r2
 800947a:	4699      	mov	r9, r3
 800947c:	688a      	ldr	r2, [r1, #8]
 800947e:	690b      	ldr	r3, [r1, #16]
 8009480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009484:	4293      	cmp	r3, r2
 8009486:	bfb8      	it	lt
 8009488:	4613      	movlt	r3, r2
 800948a:	6033      	str	r3, [r6, #0]
 800948c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009490:	4607      	mov	r7, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b10a      	cbz	r2, 800949a <_printf_common+0x26>
 8009496:	3301      	adds	r3, #1
 8009498:	6033      	str	r3, [r6, #0]
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	0699      	lsls	r1, r3, #26
 800949e:	bf42      	ittt	mi
 80094a0:	6833      	ldrmi	r3, [r6, #0]
 80094a2:	3302      	addmi	r3, #2
 80094a4:	6033      	strmi	r3, [r6, #0]
 80094a6:	6825      	ldr	r5, [r4, #0]
 80094a8:	f015 0506 	ands.w	r5, r5, #6
 80094ac:	d106      	bne.n	80094bc <_printf_common+0x48>
 80094ae:	f104 0a19 	add.w	sl, r4, #25
 80094b2:	68e3      	ldr	r3, [r4, #12]
 80094b4:	6832      	ldr	r2, [r6, #0]
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	42ab      	cmp	r3, r5
 80094ba:	dc26      	bgt.n	800950a <_printf_common+0x96>
 80094bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c0:	1e13      	subs	r3, r2, #0
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	bf18      	it	ne
 80094c6:	2301      	movne	r3, #1
 80094c8:	0692      	lsls	r2, r2, #26
 80094ca:	d42b      	bmi.n	8009524 <_printf_common+0xb0>
 80094cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d0:	4649      	mov	r1, r9
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c0      	blx	r8
 80094d6:	3001      	adds	r0, #1
 80094d8:	d01e      	beq.n	8009518 <_printf_common+0xa4>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	6922      	ldr	r2, [r4, #16]
 80094de:	f003 0306 	and.w	r3, r3, #6
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	bf02      	ittt	eq
 80094e6:	68e5      	ldreq	r5, [r4, #12]
 80094e8:	6833      	ldreq	r3, [r6, #0]
 80094ea:	1aed      	subeq	r5, r5, r3
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	bf0c      	ite	eq
 80094f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f4:	2500      	movne	r5, #0
 80094f6:	4293      	cmp	r3, r2
 80094f8:	bfc4      	itt	gt
 80094fa:	1a9b      	subgt	r3, r3, r2
 80094fc:	18ed      	addgt	r5, r5, r3
 80094fe:	2600      	movs	r6, #0
 8009500:	341a      	adds	r4, #26
 8009502:	42b5      	cmp	r5, r6
 8009504:	d11a      	bne.n	800953c <_printf_common+0xc8>
 8009506:	2000      	movs	r0, #0
 8009508:	e008      	b.n	800951c <_printf_common+0xa8>
 800950a:	2301      	movs	r3, #1
 800950c:	4652      	mov	r2, sl
 800950e:	4649      	mov	r1, r9
 8009510:	4638      	mov	r0, r7
 8009512:	47c0      	blx	r8
 8009514:	3001      	adds	r0, #1
 8009516:	d103      	bne.n	8009520 <_printf_common+0xac>
 8009518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800951c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009520:	3501      	adds	r5, #1
 8009522:	e7c6      	b.n	80094b2 <_printf_common+0x3e>
 8009524:	18e1      	adds	r1, r4, r3
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	2030      	movs	r0, #48	; 0x30
 800952a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800952e:	4422      	add	r2, r4
 8009530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009538:	3302      	adds	r3, #2
 800953a:	e7c7      	b.n	80094cc <_printf_common+0x58>
 800953c:	2301      	movs	r3, #1
 800953e:	4622      	mov	r2, r4
 8009540:	4649      	mov	r1, r9
 8009542:	4638      	mov	r0, r7
 8009544:	47c0      	blx	r8
 8009546:	3001      	adds	r0, #1
 8009548:	d0e6      	beq.n	8009518 <_printf_common+0xa4>
 800954a:	3601      	adds	r6, #1
 800954c:	e7d9      	b.n	8009502 <_printf_common+0x8e>
	...

08009550 <_printf_i>:
 8009550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	7e0f      	ldrb	r7, [r1, #24]
 8009556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009558:	2f78      	cmp	r7, #120	; 0x78
 800955a:	4691      	mov	r9, r2
 800955c:	4680      	mov	r8, r0
 800955e:	460c      	mov	r4, r1
 8009560:	469a      	mov	sl, r3
 8009562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009566:	d807      	bhi.n	8009578 <_printf_i+0x28>
 8009568:	2f62      	cmp	r7, #98	; 0x62
 800956a:	d80a      	bhi.n	8009582 <_printf_i+0x32>
 800956c:	2f00      	cmp	r7, #0
 800956e:	f000 80d4 	beq.w	800971a <_printf_i+0x1ca>
 8009572:	2f58      	cmp	r7, #88	; 0x58
 8009574:	f000 80c0 	beq.w	80096f8 <_printf_i+0x1a8>
 8009578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800957c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009580:	e03a      	b.n	80095f8 <_printf_i+0xa8>
 8009582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009586:	2b15      	cmp	r3, #21
 8009588:	d8f6      	bhi.n	8009578 <_printf_i+0x28>
 800958a:	a101      	add	r1, pc, #4	; (adr r1, 8009590 <_printf_i+0x40>)
 800958c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095fd 	.word	0x080095fd
 8009598:	08009579 	.word	0x08009579
 800959c:	08009579 	.word	0x08009579
 80095a0:	08009579 	.word	0x08009579
 80095a4:	08009579 	.word	0x08009579
 80095a8:	080095fd 	.word	0x080095fd
 80095ac:	08009579 	.word	0x08009579
 80095b0:	08009579 	.word	0x08009579
 80095b4:	08009579 	.word	0x08009579
 80095b8:	08009579 	.word	0x08009579
 80095bc:	08009701 	.word	0x08009701
 80095c0:	08009629 	.word	0x08009629
 80095c4:	080096bb 	.word	0x080096bb
 80095c8:	08009579 	.word	0x08009579
 80095cc:	08009579 	.word	0x08009579
 80095d0:	08009723 	.word	0x08009723
 80095d4:	08009579 	.word	0x08009579
 80095d8:	08009629 	.word	0x08009629
 80095dc:	08009579 	.word	0x08009579
 80095e0:	08009579 	.word	0x08009579
 80095e4:	080096c3 	.word	0x080096c3
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	602a      	str	r2, [r5, #0]
 80095f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095f8:	2301      	movs	r3, #1
 80095fa:	e09f      	b.n	800973c <_printf_i+0x1ec>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	0607      	lsls	r7, r0, #24
 8009602:	f103 0104 	add.w	r1, r3, #4
 8009606:	6029      	str	r1, [r5, #0]
 8009608:	d501      	bpl.n	800960e <_printf_i+0xbe>
 800960a:	681e      	ldr	r6, [r3, #0]
 800960c:	e003      	b.n	8009616 <_printf_i+0xc6>
 800960e:	0646      	lsls	r6, r0, #25
 8009610:	d5fb      	bpl.n	800960a <_printf_i+0xba>
 8009612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009616:	2e00      	cmp	r6, #0
 8009618:	da03      	bge.n	8009622 <_printf_i+0xd2>
 800961a:	232d      	movs	r3, #45	; 0x2d
 800961c:	4276      	negs	r6, r6
 800961e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009622:	485a      	ldr	r0, [pc, #360]	; (800978c <_printf_i+0x23c>)
 8009624:	230a      	movs	r3, #10
 8009626:	e012      	b.n	800964e <_printf_i+0xfe>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	6820      	ldr	r0, [r4, #0]
 800962c:	1d19      	adds	r1, r3, #4
 800962e:	6029      	str	r1, [r5, #0]
 8009630:	0605      	lsls	r5, r0, #24
 8009632:	d501      	bpl.n	8009638 <_printf_i+0xe8>
 8009634:	681e      	ldr	r6, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0xee>
 8009638:	0641      	lsls	r1, r0, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0xe4>
 800963c:	881e      	ldrh	r6, [r3, #0]
 800963e:	4853      	ldr	r0, [pc, #332]	; (800978c <_printf_i+0x23c>)
 8009640:	2f6f      	cmp	r7, #111	; 0x6f
 8009642:	bf0c      	ite	eq
 8009644:	2308      	moveq	r3, #8
 8009646:	230a      	movne	r3, #10
 8009648:	2100      	movs	r1, #0
 800964a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800964e:	6865      	ldr	r5, [r4, #4]
 8009650:	60a5      	str	r5, [r4, #8]
 8009652:	2d00      	cmp	r5, #0
 8009654:	bfa2      	ittt	ge
 8009656:	6821      	ldrge	r1, [r4, #0]
 8009658:	f021 0104 	bicge.w	r1, r1, #4
 800965c:	6021      	strge	r1, [r4, #0]
 800965e:	b90e      	cbnz	r6, 8009664 <_printf_i+0x114>
 8009660:	2d00      	cmp	r5, #0
 8009662:	d04b      	beq.n	80096fc <_printf_i+0x1ac>
 8009664:	4615      	mov	r5, r2
 8009666:	fbb6 f1f3 	udiv	r1, r6, r3
 800966a:	fb03 6711 	mls	r7, r3, r1, r6
 800966e:	5dc7      	ldrb	r7, [r0, r7]
 8009670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009674:	4637      	mov	r7, r6
 8009676:	42bb      	cmp	r3, r7
 8009678:	460e      	mov	r6, r1
 800967a:	d9f4      	bls.n	8009666 <_printf_i+0x116>
 800967c:	2b08      	cmp	r3, #8
 800967e:	d10b      	bne.n	8009698 <_printf_i+0x148>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	07de      	lsls	r6, r3, #31
 8009684:	d508      	bpl.n	8009698 <_printf_i+0x148>
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	6861      	ldr	r1, [r4, #4]
 800968a:	4299      	cmp	r1, r3
 800968c:	bfde      	ittt	le
 800968e:	2330      	movle	r3, #48	; 0x30
 8009690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009694:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009698:	1b52      	subs	r2, r2, r5
 800969a:	6122      	str	r2, [r4, #16]
 800969c:	f8cd a000 	str.w	sl, [sp]
 80096a0:	464b      	mov	r3, r9
 80096a2:	aa03      	add	r2, sp, #12
 80096a4:	4621      	mov	r1, r4
 80096a6:	4640      	mov	r0, r8
 80096a8:	f7ff fee4 	bl	8009474 <_printf_common>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d14a      	bne.n	8009746 <_printf_i+0x1f6>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b4:	b004      	add	sp, #16
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f043 0320 	orr.w	r3, r3, #32
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	4833      	ldr	r0, [pc, #204]	; (8009790 <_printf_i+0x240>)
 80096c4:	2778      	movs	r7, #120	; 0x78
 80096c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	6829      	ldr	r1, [r5, #0]
 80096ce:	061f      	lsls	r7, r3, #24
 80096d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80096d4:	d402      	bmi.n	80096dc <_printf_i+0x18c>
 80096d6:	065f      	lsls	r7, r3, #25
 80096d8:	bf48      	it	mi
 80096da:	b2b6      	uxthmi	r6, r6
 80096dc:	07df      	lsls	r7, r3, #31
 80096de:	bf48      	it	mi
 80096e0:	f043 0320 	orrmi.w	r3, r3, #32
 80096e4:	6029      	str	r1, [r5, #0]
 80096e6:	bf48      	it	mi
 80096e8:	6023      	strmi	r3, [r4, #0]
 80096ea:	b91e      	cbnz	r6, 80096f4 <_printf_i+0x1a4>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	f023 0320 	bic.w	r3, r3, #32
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	2310      	movs	r3, #16
 80096f6:	e7a7      	b.n	8009648 <_printf_i+0xf8>
 80096f8:	4824      	ldr	r0, [pc, #144]	; (800978c <_printf_i+0x23c>)
 80096fa:	e7e4      	b.n	80096c6 <_printf_i+0x176>
 80096fc:	4615      	mov	r5, r2
 80096fe:	e7bd      	b.n	800967c <_printf_i+0x12c>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	6826      	ldr	r6, [r4, #0]
 8009704:	6961      	ldr	r1, [r4, #20]
 8009706:	1d18      	adds	r0, r3, #4
 8009708:	6028      	str	r0, [r5, #0]
 800970a:	0635      	lsls	r5, r6, #24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	d501      	bpl.n	8009714 <_printf_i+0x1c4>
 8009710:	6019      	str	r1, [r3, #0]
 8009712:	e002      	b.n	800971a <_printf_i+0x1ca>
 8009714:	0670      	lsls	r0, r6, #25
 8009716:	d5fb      	bpl.n	8009710 <_printf_i+0x1c0>
 8009718:	8019      	strh	r1, [r3, #0]
 800971a:	2300      	movs	r3, #0
 800971c:	6123      	str	r3, [r4, #16]
 800971e:	4615      	mov	r5, r2
 8009720:	e7bc      	b.n	800969c <_printf_i+0x14c>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	1d1a      	adds	r2, r3, #4
 8009726:	602a      	str	r2, [r5, #0]
 8009728:	681d      	ldr	r5, [r3, #0]
 800972a:	6862      	ldr	r2, [r4, #4]
 800972c:	2100      	movs	r1, #0
 800972e:	4628      	mov	r0, r5
 8009730:	f7f6 fd56 	bl	80001e0 <memchr>
 8009734:	b108      	cbz	r0, 800973a <_printf_i+0x1ea>
 8009736:	1b40      	subs	r0, r0, r5
 8009738:	6060      	str	r0, [r4, #4]
 800973a:	6863      	ldr	r3, [r4, #4]
 800973c:	6123      	str	r3, [r4, #16]
 800973e:	2300      	movs	r3, #0
 8009740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009744:	e7aa      	b.n	800969c <_printf_i+0x14c>
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	462a      	mov	r2, r5
 800974a:	4649      	mov	r1, r9
 800974c:	4640      	mov	r0, r8
 800974e:	47d0      	blx	sl
 8009750:	3001      	adds	r0, #1
 8009752:	d0ad      	beq.n	80096b0 <_printf_i+0x160>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	079b      	lsls	r3, r3, #30
 8009758:	d413      	bmi.n	8009782 <_printf_i+0x232>
 800975a:	68e0      	ldr	r0, [r4, #12]
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	4298      	cmp	r0, r3
 8009760:	bfb8      	it	lt
 8009762:	4618      	movlt	r0, r3
 8009764:	e7a6      	b.n	80096b4 <_printf_i+0x164>
 8009766:	2301      	movs	r3, #1
 8009768:	4632      	mov	r2, r6
 800976a:	4649      	mov	r1, r9
 800976c:	4640      	mov	r0, r8
 800976e:	47d0      	blx	sl
 8009770:	3001      	adds	r0, #1
 8009772:	d09d      	beq.n	80096b0 <_printf_i+0x160>
 8009774:	3501      	adds	r5, #1
 8009776:	68e3      	ldr	r3, [r4, #12]
 8009778:	9903      	ldr	r1, [sp, #12]
 800977a:	1a5b      	subs	r3, r3, r1
 800977c:	42ab      	cmp	r3, r5
 800977e:	dcf2      	bgt.n	8009766 <_printf_i+0x216>
 8009780:	e7eb      	b.n	800975a <_printf_i+0x20a>
 8009782:	2500      	movs	r5, #0
 8009784:	f104 0619 	add.w	r6, r4, #25
 8009788:	e7f5      	b.n	8009776 <_printf_i+0x226>
 800978a:	bf00      	nop
 800978c:	0800f29c 	.word	0x0800f29c
 8009790:	0800f2ad 	.word	0x0800f2ad

08009794 <_scanf_float>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	b087      	sub	sp, #28
 800979a:	4617      	mov	r7, r2
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	688b      	ldr	r3, [r1, #8]
 80097a0:	1e5a      	subs	r2, r3, #1
 80097a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80097a6:	bf83      	ittte	hi
 80097a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097ac:	195b      	addhi	r3, r3, r5
 80097ae:	9302      	strhi	r3, [sp, #8]
 80097b0:	2300      	movls	r3, #0
 80097b2:	bf86      	itte	hi
 80097b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80097b8:	608b      	strhi	r3, [r1, #8]
 80097ba:	9302      	strls	r3, [sp, #8]
 80097bc:	680b      	ldr	r3, [r1, #0]
 80097be:	468b      	mov	fp, r1
 80097c0:	2500      	movs	r5, #0
 80097c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80097c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80097ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80097ce:	4680      	mov	r8, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	465e      	mov	r6, fp
 80097d4:	46aa      	mov	sl, r5
 80097d6:	46a9      	mov	r9, r5
 80097d8:	9501      	str	r5, [sp, #4]
 80097da:	68a2      	ldr	r2, [r4, #8]
 80097dc:	b152      	cbz	r2, 80097f4 <_scanf_float+0x60>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b4e      	cmp	r3, #78	; 0x4e
 80097e4:	d864      	bhi.n	80098b0 <_scanf_float+0x11c>
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d83c      	bhi.n	8009864 <_scanf_float+0xd0>
 80097ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80097ee:	b2c8      	uxtb	r0, r1
 80097f0:	280e      	cmp	r0, #14
 80097f2:	d93a      	bls.n	800986a <_scanf_float+0xd6>
 80097f4:	f1b9 0f00 	cmp.w	r9, #0
 80097f8:	d003      	beq.n	8009802 <_scanf_float+0x6e>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009806:	f1ba 0f01 	cmp.w	sl, #1
 800980a:	f200 8113 	bhi.w	8009a34 <_scanf_float+0x2a0>
 800980e:	455e      	cmp	r6, fp
 8009810:	f200 8105 	bhi.w	8009a1e <_scanf_float+0x28a>
 8009814:	2501      	movs	r5, #1
 8009816:	4628      	mov	r0, r5
 8009818:	b007      	add	sp, #28
 800981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009822:	2a0d      	cmp	r2, #13
 8009824:	d8e6      	bhi.n	80097f4 <_scanf_float+0x60>
 8009826:	a101      	add	r1, pc, #4	; (adr r1, 800982c <_scanf_float+0x98>)
 8009828:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800982c:	0800996b 	.word	0x0800996b
 8009830:	080097f5 	.word	0x080097f5
 8009834:	080097f5 	.word	0x080097f5
 8009838:	080097f5 	.word	0x080097f5
 800983c:	080099cb 	.word	0x080099cb
 8009840:	080099a3 	.word	0x080099a3
 8009844:	080097f5 	.word	0x080097f5
 8009848:	080097f5 	.word	0x080097f5
 800984c:	08009979 	.word	0x08009979
 8009850:	080097f5 	.word	0x080097f5
 8009854:	080097f5 	.word	0x080097f5
 8009858:	080097f5 	.word	0x080097f5
 800985c:	080097f5 	.word	0x080097f5
 8009860:	08009931 	.word	0x08009931
 8009864:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009868:	e7db      	b.n	8009822 <_scanf_float+0x8e>
 800986a:	290e      	cmp	r1, #14
 800986c:	d8c2      	bhi.n	80097f4 <_scanf_float+0x60>
 800986e:	a001      	add	r0, pc, #4	; (adr r0, 8009874 <_scanf_float+0xe0>)
 8009870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009874:	08009923 	.word	0x08009923
 8009878:	080097f5 	.word	0x080097f5
 800987c:	08009923 	.word	0x08009923
 8009880:	080099b7 	.word	0x080099b7
 8009884:	080097f5 	.word	0x080097f5
 8009888:	080098d1 	.word	0x080098d1
 800988c:	0800990d 	.word	0x0800990d
 8009890:	0800990d 	.word	0x0800990d
 8009894:	0800990d 	.word	0x0800990d
 8009898:	0800990d 	.word	0x0800990d
 800989c:	0800990d 	.word	0x0800990d
 80098a0:	0800990d 	.word	0x0800990d
 80098a4:	0800990d 	.word	0x0800990d
 80098a8:	0800990d 	.word	0x0800990d
 80098ac:	0800990d 	.word	0x0800990d
 80098b0:	2b6e      	cmp	r3, #110	; 0x6e
 80098b2:	d809      	bhi.n	80098c8 <_scanf_float+0x134>
 80098b4:	2b60      	cmp	r3, #96	; 0x60
 80098b6:	d8b2      	bhi.n	800981e <_scanf_float+0x8a>
 80098b8:	2b54      	cmp	r3, #84	; 0x54
 80098ba:	d077      	beq.n	80099ac <_scanf_float+0x218>
 80098bc:	2b59      	cmp	r3, #89	; 0x59
 80098be:	d199      	bne.n	80097f4 <_scanf_float+0x60>
 80098c0:	2d07      	cmp	r5, #7
 80098c2:	d197      	bne.n	80097f4 <_scanf_float+0x60>
 80098c4:	2508      	movs	r5, #8
 80098c6:	e029      	b.n	800991c <_scanf_float+0x188>
 80098c8:	2b74      	cmp	r3, #116	; 0x74
 80098ca:	d06f      	beq.n	80099ac <_scanf_float+0x218>
 80098cc:	2b79      	cmp	r3, #121	; 0x79
 80098ce:	e7f6      	b.n	80098be <_scanf_float+0x12a>
 80098d0:	6821      	ldr	r1, [r4, #0]
 80098d2:	05c8      	lsls	r0, r1, #23
 80098d4:	d51a      	bpl.n	800990c <_scanf_float+0x178>
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80098dc:	6021      	str	r1, [r4, #0]
 80098de:	f109 0901 	add.w	r9, r9, #1
 80098e2:	b11b      	cbz	r3, 80098ec <_scanf_float+0x158>
 80098e4:	3b01      	subs	r3, #1
 80098e6:	3201      	adds	r2, #1
 80098e8:	9302      	str	r3, [sp, #8]
 80098ea:	60a2      	str	r2, [r4, #8]
 80098ec:	68a3      	ldr	r3, [r4, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	60a3      	str	r3, [r4, #8]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	3301      	adds	r3, #1
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	f340 8084 	ble.w	8009a0c <_scanf_float+0x278>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	3301      	adds	r3, #1
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	e766      	b.n	80097da <_scanf_float+0x46>
 800990c:	eb1a 0f05 	cmn.w	sl, r5
 8009910:	f47f af70 	bne.w	80097f4 <_scanf_float+0x60>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800991a:	6022      	str	r2, [r4, #0]
 800991c:	f806 3b01 	strb.w	r3, [r6], #1
 8009920:	e7e4      	b.n	80098ec <_scanf_float+0x158>
 8009922:	6822      	ldr	r2, [r4, #0]
 8009924:	0610      	lsls	r0, r2, #24
 8009926:	f57f af65 	bpl.w	80097f4 <_scanf_float+0x60>
 800992a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800992e:	e7f4      	b.n	800991a <_scanf_float+0x186>
 8009930:	f1ba 0f00 	cmp.w	sl, #0
 8009934:	d10e      	bne.n	8009954 <_scanf_float+0x1c0>
 8009936:	f1b9 0f00 	cmp.w	r9, #0
 800993a:	d10e      	bne.n	800995a <_scanf_float+0x1c6>
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009942:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009946:	d108      	bne.n	800995a <_scanf_float+0x1c6>
 8009948:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	f04f 0a01 	mov.w	sl, #1
 8009952:	e7e3      	b.n	800991c <_scanf_float+0x188>
 8009954:	f1ba 0f02 	cmp.w	sl, #2
 8009958:	d055      	beq.n	8009a06 <_scanf_float+0x272>
 800995a:	2d01      	cmp	r5, #1
 800995c:	d002      	beq.n	8009964 <_scanf_float+0x1d0>
 800995e:	2d04      	cmp	r5, #4
 8009960:	f47f af48 	bne.w	80097f4 <_scanf_float+0x60>
 8009964:	3501      	adds	r5, #1
 8009966:	b2ed      	uxtb	r5, r5
 8009968:	e7d8      	b.n	800991c <_scanf_float+0x188>
 800996a:	f1ba 0f01 	cmp.w	sl, #1
 800996e:	f47f af41 	bne.w	80097f4 <_scanf_float+0x60>
 8009972:	f04f 0a02 	mov.w	sl, #2
 8009976:	e7d1      	b.n	800991c <_scanf_float+0x188>
 8009978:	b97d      	cbnz	r5, 800999a <_scanf_float+0x206>
 800997a:	f1b9 0f00 	cmp.w	r9, #0
 800997e:	f47f af3c 	bne.w	80097fa <_scanf_float+0x66>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009988:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800998c:	f47f af39 	bne.w	8009802 <_scanf_float+0x6e>
 8009990:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	2501      	movs	r5, #1
 8009998:	e7c0      	b.n	800991c <_scanf_float+0x188>
 800999a:	2d03      	cmp	r5, #3
 800999c:	d0e2      	beq.n	8009964 <_scanf_float+0x1d0>
 800999e:	2d05      	cmp	r5, #5
 80099a0:	e7de      	b.n	8009960 <_scanf_float+0x1cc>
 80099a2:	2d02      	cmp	r5, #2
 80099a4:	f47f af26 	bne.w	80097f4 <_scanf_float+0x60>
 80099a8:	2503      	movs	r5, #3
 80099aa:	e7b7      	b.n	800991c <_scanf_float+0x188>
 80099ac:	2d06      	cmp	r5, #6
 80099ae:	f47f af21 	bne.w	80097f4 <_scanf_float+0x60>
 80099b2:	2507      	movs	r5, #7
 80099b4:	e7b2      	b.n	800991c <_scanf_float+0x188>
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	0591      	lsls	r1, r2, #22
 80099ba:	f57f af1b 	bpl.w	80097f4 <_scanf_float+0x60>
 80099be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80099c2:	6022      	str	r2, [r4, #0]
 80099c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80099c8:	e7a8      	b.n	800991c <_scanf_float+0x188>
 80099ca:	6822      	ldr	r2, [r4, #0]
 80099cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80099d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80099d4:	d006      	beq.n	80099e4 <_scanf_float+0x250>
 80099d6:	0550      	lsls	r0, r2, #21
 80099d8:	f57f af0c 	bpl.w	80097f4 <_scanf_float+0x60>
 80099dc:	f1b9 0f00 	cmp.w	r9, #0
 80099e0:	f43f af0f 	beq.w	8009802 <_scanf_float+0x6e>
 80099e4:	0591      	lsls	r1, r2, #22
 80099e6:	bf58      	it	pl
 80099e8:	9901      	ldrpl	r1, [sp, #4]
 80099ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099ee:	bf58      	it	pl
 80099f0:	eba9 0101 	subpl.w	r1, r9, r1
 80099f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80099f8:	bf58      	it	pl
 80099fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	f04f 0900 	mov.w	r9, #0
 8009a04:	e78a      	b.n	800991c <_scanf_float+0x188>
 8009a06:	f04f 0a03 	mov.w	sl, #3
 8009a0a:	e787      	b.n	800991c <_scanf_float+0x188>
 8009a0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a10:	4639      	mov	r1, r7
 8009a12:	4640      	mov	r0, r8
 8009a14:	4798      	blx	r3
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f43f aedf 	beq.w	80097da <_scanf_float+0x46>
 8009a1c:	e6ea      	b.n	80097f4 <_scanf_float+0x60>
 8009a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a26:	463a      	mov	r2, r7
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4798      	blx	r3
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	e6ec      	b.n	800980e <_scanf_float+0x7a>
 8009a34:	1e6b      	subs	r3, r5, #1
 8009a36:	2b06      	cmp	r3, #6
 8009a38:	d825      	bhi.n	8009a86 <_scanf_float+0x2f2>
 8009a3a:	2d02      	cmp	r5, #2
 8009a3c:	d836      	bhi.n	8009aac <_scanf_float+0x318>
 8009a3e:	455e      	cmp	r6, fp
 8009a40:	f67f aee8 	bls.w	8009814 <_scanf_float+0x80>
 8009a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a4c:	463a      	mov	r2, r7
 8009a4e:	4640      	mov	r0, r8
 8009a50:	4798      	blx	r3
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	6123      	str	r3, [r4, #16]
 8009a58:	e7f1      	b.n	8009a3e <_scanf_float+0x2aa>
 8009a5a:	9802      	ldr	r0, [sp, #8]
 8009a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009a64:	9002      	str	r0, [sp, #8]
 8009a66:	463a      	mov	r2, r7
 8009a68:	4640      	mov	r0, r8
 8009a6a:	4798      	blx	r3
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a76:	fa5f fa8a 	uxtb.w	sl, sl
 8009a7a:	f1ba 0f02 	cmp.w	sl, #2
 8009a7e:	d1ec      	bne.n	8009a5a <_scanf_float+0x2c6>
 8009a80:	3d03      	subs	r5, #3
 8009a82:	b2ed      	uxtb	r5, r5
 8009a84:	1b76      	subs	r6, r6, r5
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	05da      	lsls	r2, r3, #23
 8009a8a:	d52f      	bpl.n	8009aec <_scanf_float+0x358>
 8009a8c:	055b      	lsls	r3, r3, #21
 8009a8e:	d510      	bpl.n	8009ab2 <_scanf_float+0x31e>
 8009a90:	455e      	cmp	r6, fp
 8009a92:	f67f aebf 	bls.w	8009814 <_scanf_float+0x80>
 8009a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a9e:	463a      	mov	r2, r7
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4798      	blx	r3
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	6123      	str	r3, [r4, #16]
 8009aaa:	e7f1      	b.n	8009a90 <_scanf_float+0x2fc>
 8009aac:	46aa      	mov	sl, r5
 8009aae:	9602      	str	r6, [sp, #8]
 8009ab0:	e7df      	b.n	8009a72 <_scanf_float+0x2de>
 8009ab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	2965      	cmp	r1, #101	; 0x65
 8009aba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009abe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	d00c      	beq.n	8009ae0 <_scanf_float+0x34c>
 8009ac6:	2945      	cmp	r1, #69	; 0x45
 8009ac8:	d00a      	beq.n	8009ae0 <_scanf_float+0x34c>
 8009aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ace:	463a      	mov	r2, r7
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	4798      	blx	r3
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	1eb5      	subs	r5, r6, #2
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ae4:	463a      	mov	r2, r7
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4798      	blx	r3
 8009aea:	462e      	mov	r6, r5
 8009aec:	6825      	ldr	r5, [r4, #0]
 8009aee:	f015 0510 	ands.w	r5, r5, #16
 8009af2:	d158      	bne.n	8009ba6 <_scanf_float+0x412>
 8009af4:	7035      	strb	r5, [r6, #0]
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b00:	d11c      	bne.n	8009b3c <_scanf_float+0x3a8>
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	454b      	cmp	r3, r9
 8009b06:	eba3 0209 	sub.w	r2, r3, r9
 8009b0a:	d124      	bne.n	8009b56 <_scanf_float+0x3c2>
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4659      	mov	r1, fp
 8009b10:	4640      	mov	r0, r8
 8009b12:	f002 fcd5 	bl	800c4c0 <_strtod_r>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	6821      	ldr	r1, [r4, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f011 0f02 	tst.w	r1, #2
 8009b20:	ec57 6b10 	vmov	r6, r7, d0
 8009b24:	f103 0204 	add.w	r2, r3, #4
 8009b28:	d020      	beq.n	8009b6c <_scanf_float+0x3d8>
 8009b2a:	9903      	ldr	r1, [sp, #12]
 8009b2c:	600a      	str	r2, [r1, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	e9c3 6700 	strd	r6, r7, [r3]
 8009b34:	68e3      	ldr	r3, [r4, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60e3      	str	r3, [r4, #12]
 8009b3a:	e66c      	b.n	8009816 <_scanf_float+0x82>
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0e4      	beq.n	8009b0c <_scanf_float+0x378>
 8009b42:	9905      	ldr	r1, [sp, #20]
 8009b44:	230a      	movs	r3, #10
 8009b46:	462a      	mov	r2, r5
 8009b48:	3101      	adds	r1, #1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f002 fd40 	bl	800c5d0 <_strtol_r>
 8009b50:	9b04      	ldr	r3, [sp, #16]
 8009b52:	9e05      	ldr	r6, [sp, #20]
 8009b54:	1ac2      	subs	r2, r0, r3
 8009b56:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b5a:	429e      	cmp	r6, r3
 8009b5c:	bf28      	it	cs
 8009b5e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009b62:	4912      	ldr	r1, [pc, #72]	; (8009bac <_scanf_float+0x418>)
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f8f9 	bl	8009d5c <siprintf>
 8009b6a:	e7cf      	b.n	8009b0c <_scanf_float+0x378>
 8009b6c:	f011 0f04 	tst.w	r1, #4
 8009b70:	9903      	ldr	r1, [sp, #12]
 8009b72:	600a      	str	r2, [r1, #0]
 8009b74:	d1db      	bne.n	8009b2e <_scanf_float+0x39a>
 8009b76:	f8d3 8000 	ldr.w	r8, [r3]
 8009b7a:	ee10 2a10 	vmov	r2, s0
 8009b7e:	ee10 0a10 	vmov	r0, s0
 8009b82:	463b      	mov	r3, r7
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 ffd9 	bl	8000b3c <__aeabi_dcmpun>
 8009b8a:	b128      	cbz	r0, 8009b98 <_scanf_float+0x404>
 8009b8c:	4808      	ldr	r0, [pc, #32]	; (8009bb0 <_scanf_float+0x41c>)
 8009b8e:	f000 fa5b 	bl	800a048 <nanf>
 8009b92:	ed88 0a00 	vstr	s0, [r8]
 8009b96:	e7cd      	b.n	8009b34 <_scanf_float+0x3a0>
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	f7f7 f82c 	bl	8000bf8 <__aeabi_d2f>
 8009ba0:	f8c8 0000 	str.w	r0, [r8]
 8009ba4:	e7c6      	b.n	8009b34 <_scanf_float+0x3a0>
 8009ba6:	2500      	movs	r5, #0
 8009ba8:	e635      	b.n	8009816 <_scanf_float+0x82>
 8009baa:	bf00      	nop
 8009bac:	0800f2be 	.word	0x0800f2be
 8009bb0:	0800f670 	.word	0x0800f670

08009bb4 <std>:
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	e9c0 3300 	strd	r3, r3, [r0]
 8009bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc2:	6083      	str	r3, [r0, #8]
 8009bc4:	8181      	strh	r1, [r0, #12]
 8009bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bc8:	81c2      	strh	r2, [r0, #14]
 8009bca:	6183      	str	r3, [r0, #24]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	2208      	movs	r2, #8
 8009bd0:	305c      	adds	r0, #92	; 0x5c
 8009bd2:	f000 f954 	bl	8009e7e <memset>
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <std+0x58>)
 8009bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bda:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <std+0x5c>)
 8009bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bde:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <std+0x60>)
 8009be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be2:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <std+0x64>)
 8009be4:	6323      	str	r3, [r4, #48]	; 0x30
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <std+0x68>)
 8009be8:	6224      	str	r4, [r4, #32]
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d006      	beq.n	8009bfc <std+0x48>
 8009bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009bf2:	4294      	cmp	r4, r2
 8009bf4:	d002      	beq.n	8009bfc <std+0x48>
 8009bf6:	33d0      	adds	r3, #208	; 0xd0
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d105      	bne.n	8009c08 <std+0x54>
 8009bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c04:	f000 ba0e 	b.w	800a024 <__retarget_lock_init_recursive>
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	08009df5 	.word	0x08009df5
 8009c10:	08009e1b 	.word	0x08009e1b
 8009c14:	08009e53 	.word	0x08009e53
 8009c18:	08009e77 	.word	0x08009e77
 8009c1c:	200057f0 	.word	0x200057f0

08009c20 <stdio_exit_handler>:
 8009c20:	4a02      	ldr	r2, [pc, #8]	; (8009c2c <stdio_exit_handler+0xc>)
 8009c22:	4903      	ldr	r1, [pc, #12]	; (8009c30 <stdio_exit_handler+0x10>)
 8009c24:	4803      	ldr	r0, [pc, #12]	; (8009c34 <stdio_exit_handler+0x14>)
 8009c26:	f000 b869 	b.w	8009cfc <_fwalk_sglue>
 8009c2a:	bf00      	nop
 8009c2c:	20000090 	.word	0x20000090
 8009c30:	0800d259 	.word	0x0800d259
 8009c34:	2000009c 	.word	0x2000009c

08009c38 <cleanup_stdio>:
 8009c38:	6841      	ldr	r1, [r0, #4]
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <cleanup_stdio+0x34>)
 8009c3c:	4299      	cmp	r1, r3
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	4604      	mov	r4, r0
 8009c42:	d001      	beq.n	8009c48 <cleanup_stdio+0x10>
 8009c44:	f003 fb08 	bl	800d258 <_fflush_r>
 8009c48:	68a1      	ldr	r1, [r4, #8]
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <cleanup_stdio+0x38>)
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <cleanup_stdio+0x1e>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f003 fb01 	bl	800d258 <_fflush_r>
 8009c56:	68e1      	ldr	r1, [r4, #12]
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <cleanup_stdio+0x3c>)
 8009c5a:	4299      	cmp	r1, r3
 8009c5c:	d004      	beq.n	8009c68 <cleanup_stdio+0x30>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c64:	f003 baf8 	b.w	800d258 <_fflush_r>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	bf00      	nop
 8009c6c:	200057f0 	.word	0x200057f0
 8009c70:	20005858 	.word	0x20005858
 8009c74:	200058c0 	.word	0x200058c0

08009c78 <global_stdio_init.part.0>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <global_stdio_init.part.0+0x30>)
 8009c7c:	4c0b      	ldr	r4, [pc, #44]	; (8009cac <global_stdio_init.part.0+0x34>)
 8009c7e:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <global_stdio_init.part.0+0x38>)
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	4620      	mov	r0, r4
 8009c84:	2200      	movs	r2, #0
 8009c86:	2104      	movs	r1, #4
 8009c88:	f7ff ff94 	bl	8009bb4 <std>
 8009c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c90:	2201      	movs	r2, #1
 8009c92:	2109      	movs	r1, #9
 8009c94:	f7ff ff8e 	bl	8009bb4 <std>
 8009c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca2:	2112      	movs	r1, #18
 8009ca4:	f7ff bf86 	b.w	8009bb4 <std>
 8009ca8:	20005928 	.word	0x20005928
 8009cac:	200057f0 	.word	0x200057f0
 8009cb0:	08009c21 	.word	0x08009c21

08009cb4 <__sfp_lock_acquire>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__sfp_lock_acquire+0x8>)
 8009cb6:	f000 b9b6 	b.w	800a026 <__retarget_lock_acquire_recursive>
 8009cba:	bf00      	nop
 8009cbc:	20005931 	.word	0x20005931

08009cc0 <__sfp_lock_release>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__sfp_lock_release+0x8>)
 8009cc2:	f000 b9b1 	b.w	800a028 <__retarget_lock_release_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20005931 	.word	0x20005931

08009ccc <__sinit>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
 8009cd0:	f7ff fff0 	bl	8009cb4 <__sfp_lock_acquire>
 8009cd4:	6a23      	ldr	r3, [r4, #32]
 8009cd6:	b11b      	cbz	r3, 8009ce0 <__sinit+0x14>
 8009cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cdc:	f7ff bff0 	b.w	8009cc0 <__sfp_lock_release>
 8009ce0:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <__sinit+0x28>)
 8009ce2:	6223      	str	r3, [r4, #32]
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <__sinit+0x2c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f5      	bne.n	8009cd8 <__sinit+0xc>
 8009cec:	f7ff ffc4 	bl	8009c78 <global_stdio_init.part.0>
 8009cf0:	e7f2      	b.n	8009cd8 <__sinit+0xc>
 8009cf2:	bf00      	nop
 8009cf4:	08009c39 	.word	0x08009c39
 8009cf8:	20005928 	.word	0x20005928

08009cfc <_fwalk_sglue>:
 8009cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	4607      	mov	r7, r0
 8009d02:	4688      	mov	r8, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	2600      	movs	r6, #0
 8009d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d10:	d505      	bpl.n	8009d1e <_fwalk_sglue+0x22>
 8009d12:	6824      	ldr	r4, [r4, #0]
 8009d14:	2c00      	cmp	r4, #0
 8009d16:	d1f7      	bne.n	8009d08 <_fwalk_sglue+0xc>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d907      	bls.n	8009d34 <_fwalk_sglue+0x38>
 8009d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	d003      	beq.n	8009d34 <_fwalk_sglue+0x38>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4638      	mov	r0, r7
 8009d30:	47c0      	blx	r8
 8009d32:	4306      	orrs	r6, r0
 8009d34:	3568      	adds	r5, #104	; 0x68
 8009d36:	e7e9      	b.n	8009d0c <_fwalk_sglue+0x10>

08009d38 <iprintf>:
 8009d38:	b40f      	push	{r0, r1, r2, r3}
 8009d3a:	b507      	push	{r0, r1, r2, lr}
 8009d3c:	4906      	ldr	r1, [pc, #24]	; (8009d58 <iprintf+0x20>)
 8009d3e:	ab04      	add	r3, sp, #16
 8009d40:	6808      	ldr	r0, [r1, #0]
 8009d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d46:	6881      	ldr	r1, [r0, #8]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	f002 ff97 	bl	800cc7c <_vfiprintf_r>
 8009d4e:	b003      	add	sp, #12
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b004      	add	sp, #16
 8009d56:	4770      	bx	lr
 8009d58:	200000e8 	.word	0x200000e8

08009d5c <siprintf>:
 8009d5c:	b40e      	push	{r1, r2, r3}
 8009d5e:	b500      	push	{lr}
 8009d60:	b09c      	sub	sp, #112	; 0x70
 8009d62:	ab1d      	add	r3, sp, #116	; 0x74
 8009d64:	9002      	str	r0, [sp, #8]
 8009d66:	9006      	str	r0, [sp, #24]
 8009d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d6c:	4809      	ldr	r0, [pc, #36]	; (8009d94 <siprintf+0x38>)
 8009d6e:	9107      	str	r1, [sp, #28]
 8009d70:	9104      	str	r1, [sp, #16]
 8009d72:	4909      	ldr	r1, [pc, #36]	; (8009d98 <siprintf+0x3c>)
 8009d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d78:	9105      	str	r1, [sp, #20]
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	a902      	add	r1, sp, #8
 8009d80:	f002 fc82 	bl	800c688 <_svfiprintf_r>
 8009d84:	9b02      	ldr	r3, [sp, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	b01c      	add	sp, #112	; 0x70
 8009d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d90:	b003      	add	sp, #12
 8009d92:	4770      	bx	lr
 8009d94:	200000e8 	.word	0x200000e8
 8009d98:	ffff0208 	.word	0xffff0208

08009d9c <siscanf>:
 8009d9c:	b40e      	push	{r1, r2, r3}
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	b09f      	sub	sp, #124	; 0x7c
 8009da2:	ac21      	add	r4, sp, #132	; 0x84
 8009da4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009da8:	f854 2b04 	ldr.w	r2, [r4], #4
 8009dac:	9201      	str	r2, [sp, #4]
 8009dae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009db2:	9004      	str	r0, [sp, #16]
 8009db4:	9008      	str	r0, [sp, #32]
 8009db6:	f7f6 fa63 	bl	8000280 <strlen>
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <siscanf+0x50>)
 8009dbc:	9005      	str	r0, [sp, #20]
 8009dbe:	9009      	str	r0, [sp, #36]	; 0x24
 8009dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc2:	480b      	ldr	r0, [pc, #44]	; (8009df0 <siscanf+0x54>)
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	6800      	ldr	r0, [r0, #0]
 8009dc8:	9403      	str	r4, [sp, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8009dce:	9316      	str	r3, [sp, #88]	; 0x58
 8009dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009dd8:	a904      	add	r1, sp, #16
 8009dda:	4623      	mov	r3, r4
 8009ddc:	f002 fdac 	bl	800c938 <__ssvfiscanf_r>
 8009de0:	b01f      	add	sp, #124	; 0x7c
 8009de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de6:	b003      	add	sp, #12
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	08009e17 	.word	0x08009e17
 8009df0:	200000e8 	.word	0x200000e8

08009df4 <__sread>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	460c      	mov	r4, r1
 8009df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfc:	f000 f8c4 	bl	8009f88 <_read_r>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	bfab      	itete	ge
 8009e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e06:	89a3      	ldrhlt	r3, [r4, #12]
 8009e08:	181b      	addge	r3, r3, r0
 8009e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e0e:	bfac      	ite	ge
 8009e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e12:	81a3      	strhlt	r3, [r4, #12]
 8009e14:	bd10      	pop	{r4, pc}

08009e16 <__seofread>:
 8009e16:	2000      	movs	r0, #0
 8009e18:	4770      	bx	lr

08009e1a <__swrite>:
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	461f      	mov	r7, r3
 8009e20:	898b      	ldrh	r3, [r1, #12]
 8009e22:	05db      	lsls	r3, r3, #23
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	4616      	mov	r6, r2
 8009e2a:	d505      	bpl.n	8009e38 <__swrite+0x1e>
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	2302      	movs	r3, #2
 8009e32:	2200      	movs	r2, #0
 8009e34:	f000 f896 	bl	8009f64 <_lseek_r>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	4628      	mov	r0, r5
 8009e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	f000 b8ad 	b.w	8009fac <_write_r>

08009e52 <__sseek>:
 8009e52:	b510      	push	{r4, lr}
 8009e54:	460c      	mov	r4, r1
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 f883 	bl	8009f64 <_lseek_r>
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	bf15      	itete	ne
 8009e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e6e:	81a3      	strheq	r3, [r4, #12]
 8009e70:	bf18      	it	ne
 8009e72:	81a3      	strhne	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__sclose>:
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 b80d 	b.w	8009e98 <_close_r>

08009e7e <memset>:
 8009e7e:	4402      	add	r2, r0
 8009e80:	4603      	mov	r3, r0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d100      	bne.n	8009e88 <memset+0xa>
 8009e86:	4770      	bx	lr
 8009e88:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8c:	e7f9      	b.n	8009e82 <memset+0x4>
	...

08009e90 <_localeconv_r>:
 8009e90:	4800      	ldr	r0, [pc, #0]	; (8009e94 <_localeconv_r+0x4>)
 8009e92:	4770      	bx	lr
 8009e94:	200001dc 	.word	0x200001dc

08009e98 <_close_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d06      	ldr	r5, [pc, #24]	; (8009eb4 <_close_r+0x1c>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f8 f939 	bl	800211a <_close>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_close_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_close_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	2000592c 	.word	0x2000592c

08009eb8 <_reclaim_reent>:
 8009eb8:	4b29      	ldr	r3, [pc, #164]	; (8009f60 <_reclaim_reent+0xa8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	d04b      	beq.n	8009f5c <_reclaim_reent+0xa4>
 8009ec4:	69c3      	ldr	r3, [r0, #28]
 8009ec6:	b143      	cbz	r3, 8009eda <_reclaim_reent+0x22>
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d144      	bne.n	8009f58 <_reclaim_reent+0xa0>
 8009ece:	69e3      	ldr	r3, [r4, #28]
 8009ed0:	6819      	ldr	r1, [r3, #0]
 8009ed2:	b111      	cbz	r1, 8009eda <_reclaim_reent+0x22>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 ff39 	bl	800ad4c <_free_r>
 8009eda:	6961      	ldr	r1, [r4, #20]
 8009edc:	b111      	cbz	r1, 8009ee4 <_reclaim_reent+0x2c>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 ff34 	bl	800ad4c <_free_r>
 8009ee4:	69e1      	ldr	r1, [r4, #28]
 8009ee6:	b111      	cbz	r1, 8009eee <_reclaim_reent+0x36>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 ff2f 	bl	800ad4c <_free_r>
 8009eee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ef0:	b111      	cbz	r1, 8009ef8 <_reclaim_reent+0x40>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 ff2a 	bl	800ad4c <_free_r>
 8009ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efa:	b111      	cbz	r1, 8009f02 <_reclaim_reent+0x4a>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 ff25 	bl	800ad4c <_free_r>
 8009f02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f04:	b111      	cbz	r1, 8009f0c <_reclaim_reent+0x54>
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 ff20 	bl	800ad4c <_free_r>
 8009f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f0e:	b111      	cbz	r1, 8009f16 <_reclaim_reent+0x5e>
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 ff1b 	bl	800ad4c <_free_r>
 8009f16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009f18:	b111      	cbz	r1, 8009f20 <_reclaim_reent+0x68>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 ff16 	bl	800ad4c <_free_r>
 8009f20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009f22:	b111      	cbz	r1, 8009f2a <_reclaim_reent+0x72>
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 ff11 	bl	800ad4c <_free_r>
 8009f2a:	6a23      	ldr	r3, [r4, #32]
 8009f2c:	b1b3      	cbz	r3, 8009f5c <_reclaim_reent+0xa4>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f34:	4718      	bx	r3
 8009f36:	5949      	ldr	r1, [r1, r5]
 8009f38:	b941      	cbnz	r1, 8009f4c <_reclaim_reent+0x94>
 8009f3a:	3504      	adds	r5, #4
 8009f3c:	69e3      	ldr	r3, [r4, #28]
 8009f3e:	2d80      	cmp	r5, #128	; 0x80
 8009f40:	68d9      	ldr	r1, [r3, #12]
 8009f42:	d1f8      	bne.n	8009f36 <_reclaim_reent+0x7e>
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 ff01 	bl	800ad4c <_free_r>
 8009f4a:	e7c0      	b.n	8009ece <_reclaim_reent+0x16>
 8009f4c:	680e      	ldr	r6, [r1, #0]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 fefc 	bl	800ad4c <_free_r>
 8009f54:	4631      	mov	r1, r6
 8009f56:	e7ef      	b.n	8009f38 <_reclaim_reent+0x80>
 8009f58:	2500      	movs	r5, #0
 8009f5a:	e7ef      	b.n	8009f3c <_reclaim_reent+0x84>
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	bf00      	nop
 8009f60:	200000e8 	.word	0x200000e8

08009f64 <_lseek_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d07      	ldr	r5, [pc, #28]	; (8009f84 <_lseek_r+0x20>)
 8009f68:	4604      	mov	r4, r0
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f7f8 f8f8 	bl	8002168 <_lseek>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_lseek_r+0x1e>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_lseek_r+0x1e>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	2000592c 	.word	0x2000592c

08009f88 <_read_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_read_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f8 f8a2 	bl	80020e0 <_read>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_read_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_read_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	2000592c 	.word	0x2000592c

08009fac <_write_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d07      	ldr	r5, [pc, #28]	; (8009fcc <_write_r+0x20>)
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f7 facc 	bl	8001558 <_write>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_write_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_write_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	2000592c 	.word	0x2000592c

08009fd0 <__errno>:
 8009fd0:	4b01      	ldr	r3, [pc, #4]	; (8009fd8 <__errno+0x8>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	200000e8 	.word	0x200000e8

08009fdc <__libc_init_array>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4d0d      	ldr	r5, [pc, #52]	; (800a014 <__libc_init_array+0x38>)
 8009fe0:	4c0d      	ldr	r4, [pc, #52]	; (800a018 <__libc_init_array+0x3c>)
 8009fe2:	1b64      	subs	r4, r4, r5
 8009fe4:	10a4      	asrs	r4, r4, #2
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	42a6      	cmp	r6, r4
 8009fea:	d109      	bne.n	800a000 <__libc_init_array+0x24>
 8009fec:	4d0b      	ldr	r5, [pc, #44]	; (800a01c <__libc_init_array+0x40>)
 8009fee:	4c0c      	ldr	r4, [pc, #48]	; (800a020 <__libc_init_array+0x44>)
 8009ff0:	f005 f8c6 	bl	800f180 <_init>
 8009ff4:	1b64      	subs	r4, r4, r5
 8009ff6:	10a4      	asrs	r4, r4, #2
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	42a6      	cmp	r6, r4
 8009ffc:	d105      	bne.n	800a00a <__libc_init_array+0x2e>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
 800a000:	f855 3b04 	ldr.w	r3, [r5], #4
 800a004:	4798      	blx	r3
 800a006:	3601      	adds	r6, #1
 800a008:	e7ee      	b.n	8009fe8 <__libc_init_array+0xc>
 800a00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00e:	4798      	blx	r3
 800a010:	3601      	adds	r6, #1
 800a012:	e7f2      	b.n	8009ffa <__libc_init_array+0x1e>
 800a014:	0800f8b8 	.word	0x0800f8b8
 800a018:	0800f8b8 	.word	0x0800f8b8
 800a01c:	0800f8b8 	.word	0x0800f8b8
 800a020:	0800f8bc 	.word	0x0800f8bc

0800a024 <__retarget_lock_init_recursive>:
 800a024:	4770      	bx	lr

0800a026 <__retarget_lock_acquire_recursive>:
 800a026:	4770      	bx	lr

0800a028 <__retarget_lock_release_recursive>:
 800a028:	4770      	bx	lr

0800a02a <memcpy>:
 800a02a:	440a      	add	r2, r1
 800a02c:	4291      	cmp	r1, r2
 800a02e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a032:	d100      	bne.n	800a036 <memcpy+0xc>
 800a034:	4770      	bx	lr
 800a036:	b510      	push	{r4, lr}
 800a038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a040:	4291      	cmp	r1, r2
 800a042:	d1f9      	bne.n	800a038 <memcpy+0xe>
 800a044:	bd10      	pop	{r4, pc}
	...

0800a048 <nanf>:
 800a048:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a050 <nanf+0x8>
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	7fc00000 	.word	0x7fc00000

0800a054 <quorem>:
 800a054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	6903      	ldr	r3, [r0, #16]
 800a05a:	690c      	ldr	r4, [r1, #16]
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	4607      	mov	r7, r0
 800a060:	db7e      	blt.n	800a160 <quorem+0x10c>
 800a062:	3c01      	subs	r4, #1
 800a064:	f101 0814 	add.w	r8, r1, #20
 800a068:	f100 0514 	add.w	r5, r0, #20
 800a06c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a07a:	3301      	adds	r3, #1
 800a07c:	429a      	cmp	r2, r3
 800a07e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a082:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a086:	fbb2 f6f3 	udiv	r6, r2, r3
 800a08a:	d331      	bcc.n	800a0f0 <quorem+0x9c>
 800a08c:	f04f 0e00 	mov.w	lr, #0
 800a090:	4640      	mov	r0, r8
 800a092:	46ac      	mov	ip, r5
 800a094:	46f2      	mov	sl, lr
 800a096:	f850 2b04 	ldr.w	r2, [r0], #4
 800a09a:	b293      	uxth	r3, r2
 800a09c:	fb06 e303 	mla	r3, r6, r3, lr
 800a0a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0a4:	0c1a      	lsrs	r2, r3, #16
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ac:	f8dc a000 	ldr.w	sl, [ip]
 800a0b0:	fa13 f38a 	uxtah	r3, r3, sl
 800a0b4:	fb06 220e 	mla	r2, r6, lr, r2
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	9b00      	ldr	r3, [sp, #0]
 800a0bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0ca:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0ce:	4581      	cmp	r9, r0
 800a0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d4:	f84c 3b04 	str.w	r3, [ip], #4
 800a0d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0dc:	d2db      	bcs.n	800a096 <quorem+0x42>
 800a0de:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0e2:	b92b      	cbnz	r3, 800a0f0 <quorem+0x9c>
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	3b04      	subs	r3, #4
 800a0e8:	429d      	cmp	r5, r3
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	d32c      	bcc.n	800a148 <quorem+0xf4>
 800a0ee:	613c      	str	r4, [r7, #16]
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f001 f9f1 	bl	800b4d8 <__mcmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	db22      	blt.n	800a140 <quorem+0xec>
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	2000      	movs	r0, #0
 800a100:	f858 2b04 	ldr.w	r2, [r8], #4
 800a104:	f8d1 c000 	ldr.w	ip, [r1]
 800a108:	b293      	uxth	r3, r2
 800a10a:	1ac3      	subs	r3, r0, r3
 800a10c:	0c12      	lsrs	r2, r2, #16
 800a10e:	fa13 f38c 	uxtah	r3, r3, ip
 800a112:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a120:	45c1      	cmp	r9, r8
 800a122:	f841 3b04 	str.w	r3, [r1], #4
 800a126:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a12a:	d2e9      	bcs.n	800a100 <quorem+0xac>
 800a12c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a134:	b922      	cbnz	r2, 800a140 <quorem+0xec>
 800a136:	3b04      	subs	r3, #4
 800a138:	429d      	cmp	r5, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	d30a      	bcc.n	800a154 <quorem+0x100>
 800a13e:	613c      	str	r4, [r7, #16]
 800a140:	4630      	mov	r0, r6
 800a142:	b003      	add	sp, #12
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	6812      	ldr	r2, [r2, #0]
 800a14a:	3b04      	subs	r3, #4
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d1ce      	bne.n	800a0ee <quorem+0x9a>
 800a150:	3c01      	subs	r4, #1
 800a152:	e7c9      	b.n	800a0e8 <quorem+0x94>
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	3b04      	subs	r3, #4
 800a158:	2a00      	cmp	r2, #0
 800a15a:	d1f0      	bne.n	800a13e <quorem+0xea>
 800a15c:	3c01      	subs	r4, #1
 800a15e:	e7eb      	b.n	800a138 <quorem+0xe4>
 800a160:	2000      	movs	r0, #0
 800a162:	e7ee      	b.n	800a142 <quorem+0xee>
 800a164:	0000      	movs	r0, r0
	...

0800a168 <_dtoa_r>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	ed2d 8b04 	vpush	{d8-d9}
 800a170:	69c5      	ldr	r5, [r0, #28]
 800a172:	b093      	sub	sp, #76	; 0x4c
 800a174:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a178:	ec57 6b10 	vmov	r6, r7, d0
 800a17c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a180:	9107      	str	r1, [sp, #28]
 800a182:	4604      	mov	r4, r0
 800a184:	920a      	str	r2, [sp, #40]	; 0x28
 800a186:	930d      	str	r3, [sp, #52]	; 0x34
 800a188:	b975      	cbnz	r5, 800a1a8 <_dtoa_r+0x40>
 800a18a:	2010      	movs	r0, #16
 800a18c:	f000 fe2a 	bl	800ade4 <malloc>
 800a190:	4602      	mov	r2, r0
 800a192:	61e0      	str	r0, [r4, #28]
 800a194:	b920      	cbnz	r0, 800a1a0 <_dtoa_r+0x38>
 800a196:	4bae      	ldr	r3, [pc, #696]	; (800a450 <_dtoa_r+0x2e8>)
 800a198:	21ef      	movs	r1, #239	; 0xef
 800a19a:	48ae      	ldr	r0, [pc, #696]	; (800a454 <_dtoa_r+0x2ec>)
 800a19c:	f003 f9d0 	bl	800d540 <__assert_func>
 800a1a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1a4:	6005      	str	r5, [r0, #0]
 800a1a6:	60c5      	str	r5, [r0, #12]
 800a1a8:	69e3      	ldr	r3, [r4, #28]
 800a1aa:	6819      	ldr	r1, [r3, #0]
 800a1ac:	b151      	cbz	r1, 800a1c4 <_dtoa_r+0x5c>
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	604a      	str	r2, [r1, #4]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4093      	lsls	r3, r2
 800a1b6:	608b      	str	r3, [r1, #8]
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 ff07 	bl	800afcc <_Bfree>
 800a1be:	69e3      	ldr	r3, [r4, #28]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	1e3b      	subs	r3, r7, #0
 800a1c6:	bfbb      	ittet	lt
 800a1c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1cc:	9303      	strlt	r3, [sp, #12]
 800a1ce:	2300      	movge	r3, #0
 800a1d0:	2201      	movlt	r2, #1
 800a1d2:	bfac      	ite	ge
 800a1d4:	f8c8 3000 	strge.w	r3, [r8]
 800a1d8:	f8c8 2000 	strlt.w	r2, [r8]
 800a1dc:	4b9e      	ldr	r3, [pc, #632]	; (800a458 <_dtoa_r+0x2f0>)
 800a1de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a1e2:	ea33 0308 	bics.w	r3, r3, r8
 800a1e6:	d11b      	bne.n	800a220 <_dtoa_r+0xb8>
 800a1e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a1f4:	4333      	orrs	r3, r6
 800a1f6:	f000 8593 	beq.w	800ad20 <_dtoa_r+0xbb8>
 800a1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1fc:	b963      	cbnz	r3, 800a218 <_dtoa_r+0xb0>
 800a1fe:	4b97      	ldr	r3, [pc, #604]	; (800a45c <_dtoa_r+0x2f4>)
 800a200:	e027      	b.n	800a252 <_dtoa_r+0xea>
 800a202:	4b97      	ldr	r3, [pc, #604]	; (800a460 <_dtoa_r+0x2f8>)
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	3308      	adds	r3, #8
 800a208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	9800      	ldr	r0, [sp, #0]
 800a20e:	b013      	add	sp, #76	; 0x4c
 800a210:	ecbd 8b04 	vpop	{d8-d9}
 800a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	4b90      	ldr	r3, [pc, #576]	; (800a45c <_dtoa_r+0x2f4>)
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	3303      	adds	r3, #3
 800a21e:	e7f3      	b.n	800a208 <_dtoa_r+0xa0>
 800a220:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	ec51 0b17 	vmov	r0, r1, d7
 800a22a:	eeb0 8a47 	vmov.f32	s16, s14
 800a22e:	eef0 8a67 	vmov.f32	s17, s15
 800a232:	2300      	movs	r3, #0
 800a234:	f7f6 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 800a238:	4681      	mov	r9, r0
 800a23a:	b160      	cbz	r0, 800a256 <_dtoa_r+0xee>
 800a23c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a23e:	2301      	movs	r3, #1
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8568 	beq.w	800ad1a <_dtoa_r+0xbb2>
 800a24a:	4b86      	ldr	r3, [pc, #536]	; (800a464 <_dtoa_r+0x2fc>)
 800a24c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	e7da      	b.n	800a20c <_dtoa_r+0xa4>
 800a256:	aa10      	add	r2, sp, #64	; 0x40
 800a258:	a911      	add	r1, sp, #68	; 0x44
 800a25a:	4620      	mov	r0, r4
 800a25c:	eeb0 0a48 	vmov.f32	s0, s16
 800a260:	eef0 0a68 	vmov.f32	s1, s17
 800a264:	f001 fa4e 	bl	800b704 <__d2b>
 800a268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a26c:	4682      	mov	sl, r0
 800a26e:	2d00      	cmp	r5, #0
 800a270:	d07f      	beq.n	800a372 <_dtoa_r+0x20a>
 800a272:	ee18 3a90 	vmov	r3, s17
 800a276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a27a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a27e:	ec51 0b18 	vmov	r0, r1, d8
 800a282:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a28a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a28e:	4619      	mov	r1, r3
 800a290:	2200      	movs	r2, #0
 800a292:	4b75      	ldr	r3, [pc, #468]	; (800a468 <_dtoa_r+0x300>)
 800a294:	f7f6 f800 	bl	8000298 <__aeabi_dsub>
 800a298:	a367      	add	r3, pc, #412	; (adr r3, 800a438 <_dtoa_r+0x2d0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 f9b3 	bl	8000608 <__aeabi_dmul>
 800a2a2:	a367      	add	r3, pc, #412	; (adr r3, 800a440 <_dtoa_r+0x2d8>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f5 fff8 	bl	800029c <__adddf3>
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	f7f6 f93f 	bl	8000534 <__aeabi_i2d>
 800a2b6:	a364      	add	r3, pc, #400	; (adr r3, 800a448 <_dtoa_r+0x2e0>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f6 f9a4 	bl	8000608 <__aeabi_dmul>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f5 ffe8 	bl	800029c <__adddf3>
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	f7f6 fc4a 	bl	8000b68 <__aeabi_d2iz>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4683      	mov	fp, r0
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f6 fc05 	bl	8000aec <__aeabi_dcmplt>
 800a2e2:	b148      	cbz	r0, 800a2f8 <_dtoa_r+0x190>
 800a2e4:	4658      	mov	r0, fp
 800a2e6:	f7f6 f925 	bl	8000534 <__aeabi_i2d>
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	463b      	mov	r3, r7
 800a2ee:	f7f6 fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f2:	b908      	cbnz	r0, 800a2f8 <_dtoa_r+0x190>
 800a2f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a2f8:	f1bb 0f16 	cmp.w	fp, #22
 800a2fc:	d857      	bhi.n	800a3ae <_dtoa_r+0x246>
 800a2fe:	4b5b      	ldr	r3, [pc, #364]	; (800a46c <_dtoa_r+0x304>)
 800a300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	ec51 0b18 	vmov	r0, r1, d8
 800a30c:	f7f6 fbee 	bl	8000aec <__aeabi_dcmplt>
 800a310:	2800      	cmp	r0, #0
 800a312:	d04e      	beq.n	800a3b2 <_dtoa_r+0x24a>
 800a314:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a318:	2300      	movs	r3, #0
 800a31a:	930c      	str	r3, [sp, #48]	; 0x30
 800a31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a31e:	1b5b      	subs	r3, r3, r5
 800a320:	1e5a      	subs	r2, r3, #1
 800a322:	bf45      	ittet	mi
 800a324:	f1c3 0301 	rsbmi	r3, r3, #1
 800a328:	9305      	strmi	r3, [sp, #20]
 800a32a:	2300      	movpl	r3, #0
 800a32c:	2300      	movmi	r3, #0
 800a32e:	9206      	str	r2, [sp, #24]
 800a330:	bf54      	ite	pl
 800a332:	9305      	strpl	r3, [sp, #20]
 800a334:	9306      	strmi	r3, [sp, #24]
 800a336:	f1bb 0f00 	cmp.w	fp, #0
 800a33a:	db3c      	blt.n	800a3b6 <_dtoa_r+0x24e>
 800a33c:	9b06      	ldr	r3, [sp, #24]
 800a33e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a342:	445b      	add	r3, fp
 800a344:	9306      	str	r3, [sp, #24]
 800a346:	2300      	movs	r3, #0
 800a348:	9308      	str	r3, [sp, #32]
 800a34a:	9b07      	ldr	r3, [sp, #28]
 800a34c:	2b09      	cmp	r3, #9
 800a34e:	d868      	bhi.n	800a422 <_dtoa_r+0x2ba>
 800a350:	2b05      	cmp	r3, #5
 800a352:	bfc4      	itt	gt
 800a354:	3b04      	subgt	r3, #4
 800a356:	9307      	strgt	r3, [sp, #28]
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	f1a3 0302 	sub.w	r3, r3, #2
 800a35e:	bfcc      	ite	gt
 800a360:	2500      	movgt	r5, #0
 800a362:	2501      	movle	r5, #1
 800a364:	2b03      	cmp	r3, #3
 800a366:	f200 8085 	bhi.w	800a474 <_dtoa_r+0x30c>
 800a36a:	e8df f003 	tbb	[pc, r3]
 800a36e:	3b2e      	.short	0x3b2e
 800a370:	5839      	.short	0x5839
 800a372:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a376:	441d      	add	r5, r3
 800a378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	bfc1      	itttt	gt
 800a380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a384:	fa08 f803 	lslgt.w	r8, r8, r3
 800a388:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a38c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a390:	bfd6      	itet	le
 800a392:	f1c3 0320 	rsble	r3, r3, #32
 800a396:	ea48 0003 	orrgt.w	r0, r8, r3
 800a39a:	fa06 f003 	lslle.w	r0, r6, r3
 800a39e:	f7f6 f8b9 	bl	8000514 <__aeabi_ui2d>
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a3a8:	3d01      	subs	r5, #1
 800a3aa:	920e      	str	r2, [sp, #56]	; 0x38
 800a3ac:	e76f      	b.n	800a28e <_dtoa_r+0x126>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7b3      	b.n	800a31a <_dtoa_r+0x1b2>
 800a3b2:	900c      	str	r0, [sp, #48]	; 0x30
 800a3b4:	e7b2      	b.n	800a31c <_dtoa_r+0x1b4>
 800a3b6:	9b05      	ldr	r3, [sp, #20]
 800a3b8:	eba3 030b 	sub.w	r3, r3, fp
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	f1cb 0300 	rsb	r3, fp, #0
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c8:	e7bf      	b.n	800a34a <_dtoa_r+0x1e2>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dc52      	bgt.n	800a47a <_dtoa_r+0x312>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	920a      	str	r2, [sp, #40]	; 0x28
 800a3de:	e00b      	b.n	800a3f8 <_dtoa_r+0x290>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e7f3      	b.n	800a3cc <_dtoa_r+0x264>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ea:	445b      	add	r3, fp
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	9304      	str	r3, [sp, #16]
 800a3f4:	bfb8      	it	lt
 800a3f6:	2301      	movlt	r3, #1
 800a3f8:	69e0      	ldr	r0, [r4, #28]
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	f102 0614 	add.w	r6, r2, #20
 800a402:	429e      	cmp	r6, r3
 800a404:	d93d      	bls.n	800a482 <_dtoa_r+0x31a>
 800a406:	6041      	str	r1, [r0, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fd9f 	bl	800af4c <_Balloc>
 800a40e:	9000      	str	r0, [sp, #0]
 800a410:	2800      	cmp	r0, #0
 800a412:	d139      	bne.n	800a488 <_dtoa_r+0x320>
 800a414:	4b16      	ldr	r3, [pc, #88]	; (800a470 <_dtoa_r+0x308>)
 800a416:	4602      	mov	r2, r0
 800a418:	f240 11af 	movw	r1, #431	; 0x1af
 800a41c:	e6bd      	b.n	800a19a <_dtoa_r+0x32>
 800a41e:	2301      	movs	r3, #1
 800a420:	e7e1      	b.n	800a3e6 <_dtoa_r+0x27e>
 800a422:	2501      	movs	r5, #1
 800a424:	2300      	movs	r3, #0
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	9509      	str	r5, [sp, #36]	; 0x24
 800a42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	9304      	str	r3, [sp, #16]
 800a432:	2200      	movs	r2, #0
 800a434:	2312      	movs	r3, #18
 800a436:	e7d1      	b.n	800a3dc <_dtoa_r+0x274>
 800a438:	636f4361 	.word	0x636f4361
 800a43c:	3fd287a7 	.word	0x3fd287a7
 800a440:	8b60c8b3 	.word	0x8b60c8b3
 800a444:	3fc68a28 	.word	0x3fc68a28
 800a448:	509f79fb 	.word	0x509f79fb
 800a44c:	3fd34413 	.word	0x3fd34413
 800a450:	0800f2d0 	.word	0x0800f2d0
 800a454:	0800f2e7 	.word	0x0800f2e7
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	0800f2cc 	.word	0x0800f2cc
 800a460:	0800f2c3 	.word	0x0800f2c3
 800a464:	0800f629 	.word	0x0800f629
 800a468:	3ff80000 	.word	0x3ff80000
 800a46c:	0800f3d8 	.word	0x0800f3d8
 800a470:	0800f33f 	.word	0x0800f33f
 800a474:	2301      	movs	r3, #1
 800a476:	9309      	str	r3, [sp, #36]	; 0x24
 800a478:	e7d7      	b.n	800a42a <_dtoa_r+0x2c2>
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	e7ba      	b.n	800a3f8 <_dtoa_r+0x290>
 800a482:	3101      	adds	r1, #1
 800a484:	0052      	lsls	r2, r2, #1
 800a486:	e7ba      	b.n	800a3fe <_dtoa_r+0x296>
 800a488:	69e3      	ldr	r3, [r4, #28]
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	9b04      	ldr	r3, [sp, #16]
 800a490:	2b0e      	cmp	r3, #14
 800a492:	f200 80a8 	bhi.w	800a5e6 <_dtoa_r+0x47e>
 800a496:	2d00      	cmp	r5, #0
 800a498:	f000 80a5 	beq.w	800a5e6 <_dtoa_r+0x47e>
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	dd38      	ble.n	800a514 <_dtoa_r+0x3ac>
 800a4a2:	4bc0      	ldr	r3, [pc, #768]	; (800a7a4 <_dtoa_r+0x63c>)
 800a4a4:	f00b 020f 	and.w	r2, fp, #15
 800a4a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a4b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a4b8:	d019      	beq.n	800a4ee <_dtoa_r+0x386>
 800a4ba:	4bbb      	ldr	r3, [pc, #748]	; (800a7a8 <_dtoa_r+0x640>)
 800a4bc:	ec51 0b18 	vmov	r0, r1, d8
 800a4c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4c4:	f7f6 f9ca 	bl	800085c <__aeabi_ddiv>
 800a4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4cc:	f008 080f 	and.w	r8, r8, #15
 800a4d0:	2503      	movs	r5, #3
 800a4d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a7a8 <_dtoa_r+0x640>
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	d10a      	bne.n	800a4f2 <_dtoa_r+0x38a>
 800a4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	f7f6 f9ba 	bl	800085c <__aeabi_ddiv>
 800a4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ec:	e02b      	b.n	800a546 <_dtoa_r+0x3de>
 800a4ee:	2502      	movs	r5, #2
 800a4f0:	e7ef      	b.n	800a4d2 <_dtoa_r+0x36a>
 800a4f2:	f018 0f01 	tst.w	r8, #1
 800a4f6:	d008      	beq.n	800a50a <_dtoa_r+0x3a2>
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a500:	f7f6 f882 	bl	8000608 <__aeabi_dmul>
 800a504:	3501      	adds	r5, #1
 800a506:	4606      	mov	r6, r0
 800a508:	460f      	mov	r7, r1
 800a50a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a50e:	f109 0908 	add.w	r9, r9, #8
 800a512:	e7e0      	b.n	800a4d6 <_dtoa_r+0x36e>
 800a514:	f000 809f 	beq.w	800a656 <_dtoa_r+0x4ee>
 800a518:	f1cb 0600 	rsb	r6, fp, #0
 800a51c:	4ba1      	ldr	r3, [pc, #644]	; (800a7a4 <_dtoa_r+0x63c>)
 800a51e:	4fa2      	ldr	r7, [pc, #648]	; (800a7a8 <_dtoa_r+0x640>)
 800a520:	f006 020f 	and.w	r2, r6, #15
 800a524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	ec51 0b18 	vmov	r0, r1, d8
 800a530:	f7f6 f86a 	bl	8000608 <__aeabi_dmul>
 800a534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a538:	1136      	asrs	r6, r6, #4
 800a53a:	2300      	movs	r3, #0
 800a53c:	2502      	movs	r5, #2
 800a53e:	2e00      	cmp	r6, #0
 800a540:	d17e      	bne.n	800a640 <_dtoa_r+0x4d8>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1d0      	bne.n	800a4e8 <_dtoa_r+0x380>
 800a546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a548:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8084 	beq.w	800a65a <_dtoa_r+0x4f2>
 800a552:	4b96      	ldr	r3, [pc, #600]	; (800a7ac <_dtoa_r+0x644>)
 800a554:	2200      	movs	r2, #0
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	f7f6 fac7 	bl	8000aec <__aeabi_dcmplt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d07b      	beq.n	800a65a <_dtoa_r+0x4f2>
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d078      	beq.n	800a65a <_dtoa_r+0x4f2>
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	dd39      	ble.n	800a5e2 <_dtoa_r+0x47a>
 800a56e:	4b90      	ldr	r3, [pc, #576]	; (800a7b0 <_dtoa_r+0x648>)
 800a570:	2200      	movs	r2, #0
 800a572:	4640      	mov	r0, r8
 800a574:	4649      	mov	r1, r9
 800a576:	f7f6 f847 	bl	8000608 <__aeabi_dmul>
 800a57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a57e:	9e01      	ldr	r6, [sp, #4]
 800a580:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a584:	3501      	adds	r5, #1
 800a586:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a58a:	4628      	mov	r0, r5
 800a58c:	f7f5 ffd2 	bl	8000534 <__aeabi_i2d>
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	f7f6 f838 	bl	8000608 <__aeabi_dmul>
 800a598:	4b86      	ldr	r3, [pc, #536]	; (800a7b4 <_dtoa_r+0x64c>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	f7f5 fe7e 	bl	800029c <__adddf3>
 800a5a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a8:	9303      	str	r3, [sp, #12]
 800a5aa:	2e00      	cmp	r6, #0
 800a5ac:	d158      	bne.n	800a660 <_dtoa_r+0x4f8>
 800a5ae:	4b82      	ldr	r3, [pc, #520]	; (800a7b8 <_dtoa_r+0x650>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f5 fe6f 	bl	8000298 <__aeabi_dsub>
 800a5ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5be:	4680      	mov	r8, r0
 800a5c0:	4689      	mov	r9, r1
 800a5c2:	f7f6 fab1 	bl	8000b28 <__aeabi_dcmpgt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f040 8296 	bne.w	800aaf8 <_dtoa_r+0x990>
 800a5cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f6 fa88 	bl	8000aec <__aeabi_dcmplt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f040 8289 	bne.w	800aaf4 <_dtoa_r+0x98c>
 800a5e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f2c0 814e 	blt.w	800a88a <_dtoa_r+0x722>
 800a5ee:	f1bb 0f0e 	cmp.w	fp, #14
 800a5f2:	f300 814a 	bgt.w	800a88a <_dtoa_r+0x722>
 800a5f6:	4b6b      	ldr	r3, [pc, #428]	; (800a7a4 <_dtoa_r+0x63c>)
 800a5f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	f280 80dc 	bge.w	800a7c0 <_dtoa_r+0x658>
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f300 80d8 	bgt.w	800a7c0 <_dtoa_r+0x658>
 800a610:	f040 826f 	bne.w	800aaf2 <_dtoa_r+0x98a>
 800a614:	4b68      	ldr	r3, [pc, #416]	; (800a7b8 <_dtoa_r+0x650>)
 800a616:	2200      	movs	r2, #0
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f5 fff4 	bl	8000608 <__aeabi_dmul>
 800a620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a624:	f7f6 fa76 	bl	8000b14 <__aeabi_dcmpge>
 800a628:	9e04      	ldr	r6, [sp, #16]
 800a62a:	4637      	mov	r7, r6
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f040 8245 	bne.w	800aabc <_dtoa_r+0x954>
 800a632:	9d00      	ldr	r5, [sp, #0]
 800a634:	2331      	movs	r3, #49	; 0x31
 800a636:	f805 3b01 	strb.w	r3, [r5], #1
 800a63a:	f10b 0b01 	add.w	fp, fp, #1
 800a63e:	e241      	b.n	800aac4 <_dtoa_r+0x95c>
 800a640:	07f2      	lsls	r2, r6, #31
 800a642:	d505      	bpl.n	800a650 <_dtoa_r+0x4e8>
 800a644:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a648:	f7f5 ffde 	bl	8000608 <__aeabi_dmul>
 800a64c:	3501      	adds	r5, #1
 800a64e:	2301      	movs	r3, #1
 800a650:	1076      	asrs	r6, r6, #1
 800a652:	3708      	adds	r7, #8
 800a654:	e773      	b.n	800a53e <_dtoa_r+0x3d6>
 800a656:	2502      	movs	r5, #2
 800a658:	e775      	b.n	800a546 <_dtoa_r+0x3de>
 800a65a:	9e04      	ldr	r6, [sp, #16]
 800a65c:	465f      	mov	r7, fp
 800a65e:	e792      	b.n	800a586 <_dtoa_r+0x41e>
 800a660:	9900      	ldr	r1, [sp, #0]
 800a662:	4b50      	ldr	r3, [pc, #320]	; (800a7a4 <_dtoa_r+0x63c>)
 800a664:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a668:	4431      	add	r1, r6
 800a66a:	9102      	str	r1, [sp, #8]
 800a66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a66e:	eeb0 9a47 	vmov.f32	s18, s14
 800a672:	eef0 9a67 	vmov.f32	s19, s15
 800a676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a67a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a67e:	2900      	cmp	r1, #0
 800a680:	d044      	beq.n	800a70c <_dtoa_r+0x5a4>
 800a682:	494e      	ldr	r1, [pc, #312]	; (800a7bc <_dtoa_r+0x654>)
 800a684:	2000      	movs	r0, #0
 800a686:	f7f6 f8e9 	bl	800085c <__aeabi_ddiv>
 800a68a:	ec53 2b19 	vmov	r2, r3, d9
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	9d00      	ldr	r5, [sp, #0]
 800a694:	ec41 0b19 	vmov	d9, r0, r1
 800a698:	4649      	mov	r1, r9
 800a69a:	4640      	mov	r0, r8
 800a69c:	f7f6 fa64 	bl	8000b68 <__aeabi_d2iz>
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	f7f5 ff47 	bl	8000534 <__aeabi_i2d>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	f7f5 fdf3 	bl	8000298 <__aeabi_dsub>
 800a6b2:	3630      	adds	r6, #48	; 0x30
 800a6b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6b8:	ec53 2b19 	vmov	r2, r3, d9
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4689      	mov	r9, r1
 800a6c0:	f7f6 fa14 	bl	8000aec <__aeabi_dcmplt>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d164      	bne.n	800a792 <_dtoa_r+0x62a>
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	4937      	ldr	r1, [pc, #220]	; (800a7ac <_dtoa_r+0x644>)
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f7f5 fde2 	bl	8000298 <__aeabi_dsub>
 800a6d4:	ec53 2b19 	vmov	r2, r3, d9
 800a6d8:	f7f6 fa08 	bl	8000aec <__aeabi_dcmplt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f040 80b6 	bne.w	800a84e <_dtoa_r+0x6e6>
 800a6e2:	9b02      	ldr	r3, [sp, #8]
 800a6e4:	429d      	cmp	r5, r3
 800a6e6:	f43f af7c 	beq.w	800a5e2 <_dtoa_r+0x47a>
 800a6ea:	4b31      	ldr	r3, [pc, #196]	; (800a7b0 <_dtoa_r+0x648>)
 800a6ec:	ec51 0b19 	vmov	r0, r1, d9
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f7f5 ff89 	bl	8000608 <__aeabi_dmul>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <_dtoa_r+0x648>)
 800a6f8:	ec41 0b19 	vmov	d9, r0, r1
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f5 ff81 	bl	8000608 <__aeabi_dmul>
 800a706:	4680      	mov	r8, r0
 800a708:	4689      	mov	r9, r1
 800a70a:	e7c5      	b.n	800a698 <_dtoa_r+0x530>
 800a70c:	ec51 0b17 	vmov	r0, r1, d7
 800a710:	f7f5 ff7a 	bl	8000608 <__aeabi_dmul>
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	9d00      	ldr	r5, [sp, #0]
 800a718:	930f      	str	r3, [sp, #60]	; 0x3c
 800a71a:	ec41 0b19 	vmov	d9, r0, r1
 800a71e:	4649      	mov	r1, r9
 800a720:	4640      	mov	r0, r8
 800a722:	f7f6 fa21 	bl	8000b68 <__aeabi_d2iz>
 800a726:	4606      	mov	r6, r0
 800a728:	f7f5 ff04 	bl	8000534 <__aeabi_i2d>
 800a72c:	3630      	adds	r6, #48	; 0x30
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 fdaf 	bl	8000298 <__aeabi_dsub>
 800a73a:	f805 6b01 	strb.w	r6, [r5], #1
 800a73e:	9b02      	ldr	r3, [sp, #8]
 800a740:	429d      	cmp	r5, r3
 800a742:	4680      	mov	r8, r0
 800a744:	4689      	mov	r9, r1
 800a746:	f04f 0200 	mov.w	r2, #0
 800a74a:	d124      	bne.n	800a796 <_dtoa_r+0x62e>
 800a74c:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <_dtoa_r+0x654>)
 800a74e:	ec51 0b19 	vmov	r0, r1, d9
 800a752:	f7f5 fda3 	bl	800029c <__adddf3>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	4640      	mov	r0, r8
 800a75c:	4649      	mov	r1, r9
 800a75e:	f7f6 f9e3 	bl	8000b28 <__aeabi_dcmpgt>
 800a762:	2800      	cmp	r0, #0
 800a764:	d173      	bne.n	800a84e <_dtoa_r+0x6e6>
 800a766:	ec53 2b19 	vmov	r2, r3, d9
 800a76a:	4914      	ldr	r1, [pc, #80]	; (800a7bc <_dtoa_r+0x654>)
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7f5 fd93 	bl	8000298 <__aeabi_dsub>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4640      	mov	r0, r8
 800a778:	4649      	mov	r1, r9
 800a77a:	f7f6 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	f43f af2f 	beq.w	800a5e2 <_dtoa_r+0x47a>
 800a784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a786:	1e6b      	subs	r3, r5, #1
 800a788:	930f      	str	r3, [sp, #60]	; 0x3c
 800a78a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a78e:	2b30      	cmp	r3, #48	; 0x30
 800a790:	d0f8      	beq.n	800a784 <_dtoa_r+0x61c>
 800a792:	46bb      	mov	fp, r7
 800a794:	e04a      	b.n	800a82c <_dtoa_r+0x6c4>
 800a796:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <_dtoa_r+0x648>)
 800a798:	f7f5 ff36 	bl	8000608 <__aeabi_dmul>
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	e7bd      	b.n	800a71e <_dtoa_r+0x5b6>
 800a7a2:	bf00      	nop
 800a7a4:	0800f3d8 	.word	0x0800f3d8
 800a7a8:	0800f3b0 	.word	0x0800f3b0
 800a7ac:	3ff00000 	.word	0x3ff00000
 800a7b0:	40240000 	.word	0x40240000
 800a7b4:	401c0000 	.word	0x401c0000
 800a7b8:	40140000 	.word	0x40140000
 800a7bc:	3fe00000 	.word	0x3fe00000
 800a7c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7c4:	9d00      	ldr	r5, [sp, #0]
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	f7f6 f845 	bl	800085c <__aeabi_ddiv>
 800a7d2:	f7f6 f9c9 	bl	8000b68 <__aeabi_d2iz>
 800a7d6:	9001      	str	r0, [sp, #4]
 800a7d8:	f7f5 feac 	bl	8000534 <__aeabi_i2d>
 800a7dc:	4642      	mov	r2, r8
 800a7de:	464b      	mov	r3, r9
 800a7e0:	f7f5 ff12 	bl	8000608 <__aeabi_dmul>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fd54 	bl	8000298 <__aeabi_dsub>
 800a7f0:	9e01      	ldr	r6, [sp, #4]
 800a7f2:	9f04      	ldr	r7, [sp, #16]
 800a7f4:	3630      	adds	r6, #48	; 0x30
 800a7f6:	f805 6b01 	strb.w	r6, [r5], #1
 800a7fa:	9e00      	ldr	r6, [sp, #0]
 800a7fc:	1bae      	subs	r6, r5, r6
 800a7fe:	42b7      	cmp	r7, r6
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	d134      	bne.n	800a870 <_dtoa_r+0x708>
 800a806:	f7f5 fd49 	bl	800029c <__adddf3>
 800a80a:	4642      	mov	r2, r8
 800a80c:	464b      	mov	r3, r9
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	f7f6 f989 	bl	8000b28 <__aeabi_dcmpgt>
 800a816:	b9c8      	cbnz	r0, 800a84c <_dtoa_r+0x6e4>
 800a818:	4642      	mov	r2, r8
 800a81a:	464b      	mov	r3, r9
 800a81c:	4630      	mov	r0, r6
 800a81e:	4639      	mov	r1, r7
 800a820:	f7f6 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a824:	b110      	cbz	r0, 800a82c <_dtoa_r+0x6c4>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	07db      	lsls	r3, r3, #31
 800a82a:	d40f      	bmi.n	800a84c <_dtoa_r+0x6e4>
 800a82c:	4651      	mov	r1, sl
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 fbcc 	bl	800afcc <_Bfree>
 800a834:	2300      	movs	r3, #0
 800a836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a838:	702b      	strb	r3, [r5, #0]
 800a83a:	f10b 0301 	add.w	r3, fp, #1
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a842:	2b00      	cmp	r3, #0
 800a844:	f43f ace2 	beq.w	800a20c <_dtoa_r+0xa4>
 800a848:	601d      	str	r5, [r3, #0]
 800a84a:	e4df      	b.n	800a20c <_dtoa_r+0xa4>
 800a84c:	465f      	mov	r7, fp
 800a84e:	462b      	mov	r3, r5
 800a850:	461d      	mov	r5, r3
 800a852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a856:	2a39      	cmp	r2, #57	; 0x39
 800a858:	d106      	bne.n	800a868 <_dtoa_r+0x700>
 800a85a:	9a00      	ldr	r2, [sp, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d1f7      	bne.n	800a850 <_dtoa_r+0x6e8>
 800a860:	9900      	ldr	r1, [sp, #0]
 800a862:	2230      	movs	r2, #48	; 0x30
 800a864:	3701      	adds	r7, #1
 800a866:	700a      	strb	r2, [r1, #0]
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	3201      	adds	r2, #1
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e790      	b.n	800a792 <_dtoa_r+0x62a>
 800a870:	4ba3      	ldr	r3, [pc, #652]	; (800ab00 <_dtoa_r+0x998>)
 800a872:	2200      	movs	r2, #0
 800a874:	f7f5 fec8 	bl	8000608 <__aeabi_dmul>
 800a878:	2200      	movs	r2, #0
 800a87a:	2300      	movs	r3, #0
 800a87c:	4606      	mov	r6, r0
 800a87e:	460f      	mov	r7, r1
 800a880:	f7f6 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a884:	2800      	cmp	r0, #0
 800a886:	d09e      	beq.n	800a7c6 <_dtoa_r+0x65e>
 800a888:	e7d0      	b.n	800a82c <_dtoa_r+0x6c4>
 800a88a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	f000 80ca 	beq.w	800aa26 <_dtoa_r+0x8be>
 800a892:	9a07      	ldr	r2, [sp, #28]
 800a894:	2a01      	cmp	r2, #1
 800a896:	f300 80ad 	bgt.w	800a9f4 <_dtoa_r+0x88c>
 800a89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	f000 80a5 	beq.w	800a9ec <_dtoa_r+0x884>
 800a8a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8a6:	9e08      	ldr	r6, [sp, #32]
 800a8a8:	9d05      	ldr	r5, [sp, #20]
 800a8aa:	9a05      	ldr	r2, [sp, #20]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	9205      	str	r2, [sp, #20]
 800a8b0:	9a06      	ldr	r2, [sp, #24]
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	441a      	add	r2, r3
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	9206      	str	r2, [sp, #24]
 800a8ba:	f000 fc87 	bl	800b1cc <__i2b>
 800a8be:	4607      	mov	r7, r0
 800a8c0:	b165      	cbz	r5, 800a8dc <_dtoa_r+0x774>
 800a8c2:	9b06      	ldr	r3, [sp, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dd09      	ble.n	800a8dc <_dtoa_r+0x774>
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	9a05      	ldr	r2, [sp, #20]
 800a8cc:	bfa8      	it	ge
 800a8ce:	462b      	movge	r3, r5
 800a8d0:	1ad2      	subs	r2, r2, r3
 800a8d2:	9205      	str	r2, [sp, #20]
 800a8d4:	9a06      	ldr	r2, [sp, #24]
 800a8d6:	1aed      	subs	r5, r5, r3
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	9306      	str	r3, [sp, #24]
 800a8dc:	9b08      	ldr	r3, [sp, #32]
 800a8de:	b1f3      	cbz	r3, 800a91e <_dtoa_r+0x7b6>
 800a8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 80a3 	beq.w	800aa2e <_dtoa_r+0x8c6>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	dd10      	ble.n	800a90e <_dtoa_r+0x7a6>
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 fd2b 	bl	800b34c <__pow5mult>
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fc7b 	bl	800b1f8 <__multiply>
 800a902:	4651      	mov	r1, sl
 800a904:	4680      	mov	r8, r0
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fb60 	bl	800afcc <_Bfree>
 800a90c:	46c2      	mov	sl, r8
 800a90e:	9b08      	ldr	r3, [sp, #32]
 800a910:	1b9a      	subs	r2, r3, r6
 800a912:	d004      	beq.n	800a91e <_dtoa_r+0x7b6>
 800a914:	4651      	mov	r1, sl
 800a916:	4620      	mov	r0, r4
 800a918:	f000 fd18 	bl	800b34c <__pow5mult>
 800a91c:	4682      	mov	sl, r0
 800a91e:	2101      	movs	r1, #1
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fc53 	bl	800b1cc <__i2b>
 800a926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	4606      	mov	r6, r0
 800a92c:	f340 8081 	ble.w	800aa32 <_dtoa_r+0x8ca>
 800a930:	461a      	mov	r2, r3
 800a932:	4601      	mov	r1, r0
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fd09 	bl	800b34c <__pow5mult>
 800a93a:	9b07      	ldr	r3, [sp, #28]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	4606      	mov	r6, r0
 800a940:	dd7a      	ble.n	800aa38 <_dtoa_r+0x8d0>
 800a942:	f04f 0800 	mov.w	r8, #0
 800a946:	6933      	ldr	r3, [r6, #16]
 800a948:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a94c:	6918      	ldr	r0, [r3, #16]
 800a94e:	f000 fbef 	bl	800b130 <__hi0bits>
 800a952:	f1c0 0020 	rsb	r0, r0, #32
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	4418      	add	r0, r3
 800a95a:	f010 001f 	ands.w	r0, r0, #31
 800a95e:	f000 8094 	beq.w	800aa8a <_dtoa_r+0x922>
 800a962:	f1c0 0320 	rsb	r3, r0, #32
 800a966:	2b04      	cmp	r3, #4
 800a968:	f340 8085 	ble.w	800aa76 <_dtoa_r+0x90e>
 800a96c:	9b05      	ldr	r3, [sp, #20]
 800a96e:	f1c0 001c 	rsb	r0, r0, #28
 800a972:	4403      	add	r3, r0
 800a974:	9305      	str	r3, [sp, #20]
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	4403      	add	r3, r0
 800a97a:	4405      	add	r5, r0
 800a97c:	9306      	str	r3, [sp, #24]
 800a97e:	9b05      	ldr	r3, [sp, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd05      	ble.n	800a990 <_dtoa_r+0x828>
 800a984:	4651      	mov	r1, sl
 800a986:	461a      	mov	r2, r3
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fd39 	bl	800b400 <__lshift>
 800a98e:	4682      	mov	sl, r0
 800a990:	9b06      	ldr	r3, [sp, #24]
 800a992:	2b00      	cmp	r3, #0
 800a994:	dd05      	ble.n	800a9a2 <_dtoa_r+0x83a>
 800a996:	4631      	mov	r1, r6
 800a998:	461a      	mov	r2, r3
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fd30 	bl	800b400 <__lshift>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d072      	beq.n	800aa8e <_dtoa_r+0x926>
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	f000 fd94 	bl	800b4d8 <__mcmp>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	da6c      	bge.n	800aa8e <_dtoa_r+0x926>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4651      	mov	r1, sl
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fb28 	bl	800b010 <__multadd>
 800a9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 81b0 	beq.w	800ad2e <_dtoa_r+0xbc6>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	220a      	movs	r2, #10
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fb1b 	bl	800b010 <__multadd>
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	4607      	mov	r7, r0
 800a9e0:	f300 8096 	bgt.w	800ab10 <_dtoa_r+0x9a8>
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	dc59      	bgt.n	800aa9e <_dtoa_r+0x936>
 800a9ea:	e091      	b.n	800ab10 <_dtoa_r+0x9a8>
 800a9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9f2:	e758      	b.n	800a8a6 <_dtoa_r+0x73e>
 800a9f4:	9b04      	ldr	r3, [sp, #16]
 800a9f6:	1e5e      	subs	r6, r3, #1
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	42b3      	cmp	r3, r6
 800a9fc:	bfbf      	itttt	lt
 800a9fe:	9b08      	ldrlt	r3, [sp, #32]
 800aa00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa02:	9608      	strlt	r6, [sp, #32]
 800aa04:	1af3      	sublt	r3, r6, r3
 800aa06:	bfb4      	ite	lt
 800aa08:	18d2      	addlt	r2, r2, r3
 800aa0a:	1b9e      	subge	r6, r3, r6
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	bfbc      	itt	lt
 800aa10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa12:	2600      	movlt	r6, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bfb7      	itett	lt
 800aa18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa20:	1a9d      	sublt	r5, r3, r2
 800aa22:	2300      	movlt	r3, #0
 800aa24:	e741      	b.n	800a8aa <_dtoa_r+0x742>
 800aa26:	9e08      	ldr	r6, [sp, #32]
 800aa28:	9d05      	ldr	r5, [sp, #20]
 800aa2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa2c:	e748      	b.n	800a8c0 <_dtoa_r+0x758>
 800aa2e:	9a08      	ldr	r2, [sp, #32]
 800aa30:	e770      	b.n	800a914 <_dtoa_r+0x7ac>
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	dc19      	bgt.n	800aa6c <_dtoa_r+0x904>
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	b9bb      	cbnz	r3, 800aa6c <_dtoa_r+0x904>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa42:	b99b      	cbnz	r3, 800aa6c <_dtoa_r+0x904>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa4a:	0d1b      	lsrs	r3, r3, #20
 800aa4c:	051b      	lsls	r3, r3, #20
 800aa4e:	b183      	cbz	r3, 800aa72 <_dtoa_r+0x90a>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	3301      	adds	r3, #1
 800aa54:	9305      	str	r3, [sp, #20]
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	f04f 0801 	mov.w	r8, #1
 800aa60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f47f af6f 	bne.w	800a946 <_dtoa_r+0x7de>
 800aa68:	2001      	movs	r0, #1
 800aa6a:	e774      	b.n	800a956 <_dtoa_r+0x7ee>
 800aa6c:	f04f 0800 	mov.w	r8, #0
 800aa70:	e7f6      	b.n	800aa60 <_dtoa_r+0x8f8>
 800aa72:	4698      	mov	r8, r3
 800aa74:	e7f4      	b.n	800aa60 <_dtoa_r+0x8f8>
 800aa76:	d082      	beq.n	800a97e <_dtoa_r+0x816>
 800aa78:	9a05      	ldr	r2, [sp, #20]
 800aa7a:	331c      	adds	r3, #28
 800aa7c:	441a      	add	r2, r3
 800aa7e:	9205      	str	r2, [sp, #20]
 800aa80:	9a06      	ldr	r2, [sp, #24]
 800aa82:	441a      	add	r2, r3
 800aa84:	441d      	add	r5, r3
 800aa86:	9206      	str	r2, [sp, #24]
 800aa88:	e779      	b.n	800a97e <_dtoa_r+0x816>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	e7f4      	b.n	800aa78 <_dtoa_r+0x910>
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dc37      	bgt.n	800ab04 <_dtoa_r+0x99c>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	dd34      	ble.n	800ab04 <_dtoa_r+0x99c>
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	b963      	cbnz	r3, 800aabc <_dtoa_r+0x954>
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 fab2 	bl	800b010 <__multadd>
 800aaac:	4601      	mov	r1, r0
 800aaae:	4606      	mov	r6, r0
 800aab0:	4650      	mov	r0, sl
 800aab2:	f000 fd11 	bl	800b4d8 <__mcmp>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f73f adbb 	bgt.w	800a632 <_dtoa_r+0x4ca>
 800aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabe:	9d00      	ldr	r5, [sp, #0]
 800aac0:	ea6f 0b03 	mvn.w	fp, r3
 800aac4:	f04f 0800 	mov.w	r8, #0
 800aac8:	4631      	mov	r1, r6
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fa7e 	bl	800afcc <_Bfree>
 800aad0:	2f00      	cmp	r7, #0
 800aad2:	f43f aeab 	beq.w	800a82c <_dtoa_r+0x6c4>
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	d005      	beq.n	800aae8 <_dtoa_r+0x980>
 800aadc:	45b8      	cmp	r8, r7
 800aade:	d003      	beq.n	800aae8 <_dtoa_r+0x980>
 800aae0:	4641      	mov	r1, r8
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 fa72 	bl	800afcc <_Bfree>
 800aae8:	4639      	mov	r1, r7
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fa6e 	bl	800afcc <_Bfree>
 800aaf0:	e69c      	b.n	800a82c <_dtoa_r+0x6c4>
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	4637      	mov	r7, r6
 800aaf6:	e7e1      	b.n	800aabc <_dtoa_r+0x954>
 800aaf8:	46bb      	mov	fp, r7
 800aafa:	4637      	mov	r7, r6
 800aafc:	e599      	b.n	800a632 <_dtoa_r+0x4ca>
 800aafe:	bf00      	nop
 800ab00:	40240000 	.word	0x40240000
 800ab04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 80c8 	beq.w	800ac9c <_dtoa_r+0xb34>
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	dd05      	ble.n	800ab20 <_dtoa_r+0x9b8>
 800ab14:	4639      	mov	r1, r7
 800ab16:	462a      	mov	r2, r5
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fc71 	bl	800b400 <__lshift>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f1b8 0f00 	cmp.w	r8, #0
 800ab24:	d05b      	beq.n	800abde <_dtoa_r+0xa76>
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fa0f 	bl	800af4c <_Balloc>
 800ab2e:	4605      	mov	r5, r0
 800ab30:	b928      	cbnz	r0, 800ab3e <_dtoa_r+0x9d6>
 800ab32:	4b83      	ldr	r3, [pc, #524]	; (800ad40 <_dtoa_r+0xbd8>)
 800ab34:	4602      	mov	r2, r0
 800ab36:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab3a:	f7ff bb2e 	b.w	800a19a <_dtoa_r+0x32>
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	3202      	adds	r2, #2
 800ab42:	0092      	lsls	r2, r2, #2
 800ab44:	f107 010c 	add.w	r1, r7, #12
 800ab48:	300c      	adds	r0, #12
 800ab4a:	f7ff fa6e 	bl	800a02a <memcpy>
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4629      	mov	r1, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fc54 	bl	800b400 <__lshift>
 800ab58:	9b00      	ldr	r3, [sp, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab62:	4413      	add	r3, r2
 800ab64:	9308      	str	r3, [sp, #32]
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	46b8      	mov	r8, r7
 800ab6e:	9306      	str	r3, [sp, #24]
 800ab70:	4607      	mov	r7, r0
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	4631      	mov	r1, r6
 800ab76:	3b01      	subs	r3, #1
 800ab78:	4650      	mov	r0, sl
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	f7ff fa6a 	bl	800a054 <quorem>
 800ab80:	4641      	mov	r1, r8
 800ab82:	9002      	str	r0, [sp, #8]
 800ab84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab88:	4650      	mov	r0, sl
 800ab8a:	f000 fca5 	bl	800b4d8 <__mcmp>
 800ab8e:	463a      	mov	r2, r7
 800ab90:	9005      	str	r0, [sp, #20]
 800ab92:	4631      	mov	r1, r6
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 fcbb 	bl	800b510 <__mdiff>
 800ab9a:	68c2      	ldr	r2, [r0, #12]
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	bb02      	cbnz	r2, 800abe2 <_dtoa_r+0xa7a>
 800aba0:	4601      	mov	r1, r0
 800aba2:	4650      	mov	r0, sl
 800aba4:	f000 fc98 	bl	800b4d8 <__mcmp>
 800aba8:	4602      	mov	r2, r0
 800abaa:	4629      	mov	r1, r5
 800abac:	4620      	mov	r0, r4
 800abae:	9209      	str	r2, [sp, #36]	; 0x24
 800abb0:	f000 fa0c 	bl	800afcc <_Bfree>
 800abb4:	9b07      	ldr	r3, [sp, #28]
 800abb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb8:	9d04      	ldr	r5, [sp, #16]
 800abba:	ea43 0102 	orr.w	r1, r3, r2
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	4319      	orrs	r1, r3
 800abc2:	d110      	bne.n	800abe6 <_dtoa_r+0xa7e>
 800abc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abc8:	d029      	beq.n	800ac1e <_dtoa_r+0xab6>
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	dd02      	ble.n	800abd6 <_dtoa_r+0xa6e>
 800abd0:	9b02      	ldr	r3, [sp, #8]
 800abd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	f883 9000 	strb.w	r9, [r3]
 800abdc:	e774      	b.n	800aac8 <_dtoa_r+0x960>
 800abde:	4638      	mov	r0, r7
 800abe0:	e7ba      	b.n	800ab58 <_dtoa_r+0x9f0>
 800abe2:	2201      	movs	r2, #1
 800abe4:	e7e1      	b.n	800abaa <_dtoa_r+0xa42>
 800abe6:	9b05      	ldr	r3, [sp, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	db04      	blt.n	800abf6 <_dtoa_r+0xa8e>
 800abec:	9907      	ldr	r1, [sp, #28]
 800abee:	430b      	orrs	r3, r1
 800abf0:	9906      	ldr	r1, [sp, #24]
 800abf2:	430b      	orrs	r3, r1
 800abf4:	d120      	bne.n	800ac38 <_dtoa_r+0xad0>
 800abf6:	2a00      	cmp	r2, #0
 800abf8:	dded      	ble.n	800abd6 <_dtoa_r+0xa6e>
 800abfa:	4651      	mov	r1, sl
 800abfc:	2201      	movs	r2, #1
 800abfe:	4620      	mov	r0, r4
 800ac00:	f000 fbfe 	bl	800b400 <__lshift>
 800ac04:	4631      	mov	r1, r6
 800ac06:	4682      	mov	sl, r0
 800ac08:	f000 fc66 	bl	800b4d8 <__mcmp>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	dc03      	bgt.n	800ac18 <_dtoa_r+0xab0>
 800ac10:	d1e1      	bne.n	800abd6 <_dtoa_r+0xa6e>
 800ac12:	f019 0f01 	tst.w	r9, #1
 800ac16:	d0de      	beq.n	800abd6 <_dtoa_r+0xa6e>
 800ac18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac1c:	d1d8      	bne.n	800abd0 <_dtoa_r+0xa68>
 800ac1e:	9a01      	ldr	r2, [sp, #4]
 800ac20:	2339      	movs	r3, #57	; 0x39
 800ac22:	7013      	strb	r3, [r2, #0]
 800ac24:	462b      	mov	r3, r5
 800ac26:	461d      	mov	r5, r3
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac2e:	2a39      	cmp	r2, #57	; 0x39
 800ac30:	d06c      	beq.n	800ad0c <_dtoa_r+0xba4>
 800ac32:	3201      	adds	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e747      	b.n	800aac8 <_dtoa_r+0x960>
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	dd07      	ble.n	800ac4c <_dtoa_r+0xae4>
 800ac3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac40:	d0ed      	beq.n	800ac1e <_dtoa_r+0xab6>
 800ac42:	9a01      	ldr	r2, [sp, #4]
 800ac44:	f109 0301 	add.w	r3, r9, #1
 800ac48:	7013      	strb	r3, [r2, #0]
 800ac4a:	e73d      	b.n	800aac8 <_dtoa_r+0x960>
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	9a08      	ldr	r2, [sp, #32]
 800ac50:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d043      	beq.n	800ace0 <_dtoa_r+0xb78>
 800ac58:	4651      	mov	r1, sl
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 f9d6 	bl	800b010 <__multadd>
 800ac64:	45b8      	cmp	r8, r7
 800ac66:	4682      	mov	sl, r0
 800ac68:	f04f 0300 	mov.w	r3, #0
 800ac6c:	f04f 020a 	mov.w	r2, #10
 800ac70:	4641      	mov	r1, r8
 800ac72:	4620      	mov	r0, r4
 800ac74:	d107      	bne.n	800ac86 <_dtoa_r+0xb1e>
 800ac76:	f000 f9cb 	bl	800b010 <__multadd>
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	3301      	adds	r3, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	e775      	b.n	800ab72 <_dtoa_r+0xa0a>
 800ac86:	f000 f9c3 	bl	800b010 <__multadd>
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	220a      	movs	r2, #10
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 f9bc 	bl	800b010 <__multadd>
 800ac98:	4607      	mov	r7, r0
 800ac9a:	e7f0      	b.n	800ac7e <_dtoa_r+0xb16>
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	9d00      	ldr	r5, [sp, #0]
 800aca2:	4631      	mov	r1, r6
 800aca4:	4650      	mov	r0, sl
 800aca6:	f7ff f9d5 	bl	800a054 <quorem>
 800acaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acae:	9b00      	ldr	r3, [sp, #0]
 800acb0:	f805 9b01 	strb.w	r9, [r5], #1
 800acb4:	1aea      	subs	r2, r5, r3
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	4293      	cmp	r3, r2
 800acba:	dd07      	ble.n	800accc <_dtoa_r+0xb64>
 800acbc:	4651      	mov	r1, sl
 800acbe:	2300      	movs	r3, #0
 800acc0:	220a      	movs	r2, #10
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 f9a4 	bl	800b010 <__multadd>
 800acc8:	4682      	mov	sl, r0
 800acca:	e7ea      	b.n	800aca2 <_dtoa_r+0xb3a>
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfc8      	it	gt
 800acd2:	461d      	movgt	r5, r3
 800acd4:	9b00      	ldr	r3, [sp, #0]
 800acd6:	bfd8      	it	le
 800acd8:	2501      	movle	r5, #1
 800acda:	441d      	add	r5, r3
 800acdc:	f04f 0800 	mov.w	r8, #0
 800ace0:	4651      	mov	r1, sl
 800ace2:	2201      	movs	r2, #1
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 fb8b 	bl	800b400 <__lshift>
 800acea:	4631      	mov	r1, r6
 800acec:	4682      	mov	sl, r0
 800acee:	f000 fbf3 	bl	800b4d8 <__mcmp>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	dc96      	bgt.n	800ac24 <_dtoa_r+0xabc>
 800acf6:	d102      	bne.n	800acfe <_dtoa_r+0xb96>
 800acf8:	f019 0f01 	tst.w	r9, #1
 800acfc:	d192      	bne.n	800ac24 <_dtoa_r+0xabc>
 800acfe:	462b      	mov	r3, r5
 800ad00:	461d      	mov	r5, r3
 800ad02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad06:	2a30      	cmp	r2, #48	; 0x30
 800ad08:	d0fa      	beq.n	800ad00 <_dtoa_r+0xb98>
 800ad0a:	e6dd      	b.n	800aac8 <_dtoa_r+0x960>
 800ad0c:	9a00      	ldr	r2, [sp, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d189      	bne.n	800ac26 <_dtoa_r+0xabe>
 800ad12:	f10b 0b01 	add.w	fp, fp, #1
 800ad16:	2331      	movs	r3, #49	; 0x31
 800ad18:	e796      	b.n	800ac48 <_dtoa_r+0xae0>
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <_dtoa_r+0xbdc>)
 800ad1c:	f7ff ba99 	b.w	800a252 <_dtoa_r+0xea>
 800ad20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f47f aa6d 	bne.w	800a202 <_dtoa_r+0x9a>
 800ad28:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <_dtoa_r+0xbe0>)
 800ad2a:	f7ff ba92 	b.w	800a252 <_dtoa_r+0xea>
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dcb5      	bgt.n	800aca0 <_dtoa_r+0xb38>
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	f73f aeb1 	bgt.w	800aa9e <_dtoa_r+0x936>
 800ad3c:	e7b0      	b.n	800aca0 <_dtoa_r+0xb38>
 800ad3e:	bf00      	nop
 800ad40:	0800f33f 	.word	0x0800f33f
 800ad44:	0800f628 	.word	0x0800f628
 800ad48:	0800f2c3 	.word	0x0800f2c3

0800ad4c <_free_r>:
 800ad4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	d044      	beq.n	800addc <_free_r+0x90>
 800ad52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad56:	9001      	str	r0, [sp, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad5e:	bfb8      	it	lt
 800ad60:	18e4      	addlt	r4, r4, r3
 800ad62:	f000 f8e7 	bl	800af34 <__malloc_lock>
 800ad66:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <_free_r+0x94>)
 800ad68:	9801      	ldr	r0, [sp, #4]
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	b933      	cbnz	r3, 800ad7c <_free_r+0x30>
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	6014      	str	r4, [r2, #0]
 800ad72:	b003      	add	sp, #12
 800ad74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad78:	f000 b8e2 	b.w	800af40 <__malloc_unlock>
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d908      	bls.n	800ad92 <_free_r+0x46>
 800ad80:	6825      	ldr	r5, [r4, #0]
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf01      	itttt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	1949      	addeq	r1, r1, r5
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	e7ed      	b.n	800ad6e <_free_r+0x22>
 800ad92:	461a      	mov	r2, r3
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b10b      	cbz	r3, 800ad9c <_free_r+0x50>
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d9fa      	bls.n	800ad92 <_free_r+0x46>
 800ad9c:	6811      	ldr	r1, [r2, #0]
 800ad9e:	1855      	adds	r5, r2, r1
 800ada0:	42a5      	cmp	r5, r4
 800ada2:	d10b      	bne.n	800adbc <_free_r+0x70>
 800ada4:	6824      	ldr	r4, [r4, #0]
 800ada6:	4421      	add	r1, r4
 800ada8:	1854      	adds	r4, r2, r1
 800adaa:	42a3      	cmp	r3, r4
 800adac:	6011      	str	r1, [r2, #0]
 800adae:	d1e0      	bne.n	800ad72 <_free_r+0x26>
 800adb0:	681c      	ldr	r4, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	6053      	str	r3, [r2, #4]
 800adb6:	440c      	add	r4, r1
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	e7da      	b.n	800ad72 <_free_r+0x26>
 800adbc:	d902      	bls.n	800adc4 <_free_r+0x78>
 800adbe:	230c      	movs	r3, #12
 800adc0:	6003      	str	r3, [r0, #0]
 800adc2:	e7d6      	b.n	800ad72 <_free_r+0x26>
 800adc4:	6825      	ldr	r5, [r4, #0]
 800adc6:	1961      	adds	r1, r4, r5
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf04      	itt	eq
 800adcc:	6819      	ldreq	r1, [r3, #0]
 800adce:	685b      	ldreq	r3, [r3, #4]
 800add0:	6063      	str	r3, [r4, #4]
 800add2:	bf04      	itt	eq
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	6054      	str	r4, [r2, #4]
 800adda:	e7ca      	b.n	800ad72 <_free_r+0x26>
 800addc:	b003      	add	sp, #12
 800adde:	bd30      	pop	{r4, r5, pc}
 800ade0:	20005934 	.word	0x20005934

0800ade4 <malloc>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <malloc+0xc>)
 800ade6:	4601      	mov	r1, r0
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f000 b823 	b.w	800ae34 <_malloc_r>
 800adee:	bf00      	nop
 800adf0:	200000e8 	.word	0x200000e8

0800adf4 <sbrk_aligned>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4e0e      	ldr	r6, [pc, #56]	; (800ae30 <sbrk_aligned+0x3c>)
 800adf8:	460c      	mov	r4, r1
 800adfa:	6831      	ldr	r1, [r6, #0]
 800adfc:	4605      	mov	r5, r0
 800adfe:	b911      	cbnz	r1, 800ae06 <sbrk_aligned+0x12>
 800ae00:	f002 fb86 	bl	800d510 <_sbrk_r>
 800ae04:	6030      	str	r0, [r6, #0]
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f002 fb81 	bl	800d510 <_sbrk_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d00a      	beq.n	800ae28 <sbrk_aligned+0x34>
 800ae12:	1cc4      	adds	r4, r0, #3
 800ae14:	f024 0403 	bic.w	r4, r4, #3
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	d007      	beq.n	800ae2c <sbrk_aligned+0x38>
 800ae1c:	1a21      	subs	r1, r4, r0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f002 fb76 	bl	800d510 <_sbrk_r>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d101      	bne.n	800ae2c <sbrk_aligned+0x38>
 800ae28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	20005938 	.word	0x20005938

0800ae34 <_malloc_r>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	1ccd      	adds	r5, r1, #3
 800ae3a:	f025 0503 	bic.w	r5, r5, #3
 800ae3e:	3508      	adds	r5, #8
 800ae40:	2d0c      	cmp	r5, #12
 800ae42:	bf38      	it	cc
 800ae44:	250c      	movcc	r5, #12
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	4607      	mov	r7, r0
 800ae4a:	db01      	blt.n	800ae50 <_malloc_r+0x1c>
 800ae4c:	42a9      	cmp	r1, r5
 800ae4e:	d905      	bls.n	800ae5c <_malloc_r+0x28>
 800ae50:	230c      	movs	r3, #12
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	2600      	movs	r6, #0
 800ae56:	4630      	mov	r0, r6
 800ae58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af30 <_malloc_r+0xfc>
 800ae60:	f000 f868 	bl	800af34 <__malloc_lock>
 800ae64:	f8d8 3000 	ldr.w	r3, [r8]
 800ae68:	461c      	mov	r4, r3
 800ae6a:	bb5c      	cbnz	r4, 800aec4 <_malloc_r+0x90>
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	4638      	mov	r0, r7
 800ae70:	f7ff ffc0 	bl	800adf4 <sbrk_aligned>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	4604      	mov	r4, r0
 800ae78:	d155      	bne.n	800af26 <_malloc_r+0xf2>
 800ae7a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae7e:	4626      	mov	r6, r4
 800ae80:	2e00      	cmp	r6, #0
 800ae82:	d145      	bne.n	800af10 <_malloc_r+0xdc>
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	d048      	beq.n	800af1a <_malloc_r+0xe6>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	eb04 0903 	add.w	r9, r4, r3
 800ae92:	f002 fb3d 	bl	800d510 <_sbrk_r>
 800ae96:	4581      	cmp	r9, r0
 800ae98:	d13f      	bne.n	800af1a <_malloc_r+0xe6>
 800ae9a:	6821      	ldr	r1, [r4, #0]
 800ae9c:	1a6d      	subs	r5, r5, r1
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7ff ffa7 	bl	800adf4 <sbrk_aligned>
 800aea6:	3001      	adds	r0, #1
 800aea8:	d037      	beq.n	800af1a <_malloc_r+0xe6>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	442b      	add	r3, r5
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d038      	beq.n	800af2a <_malloc_r+0xf6>
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	42a2      	cmp	r2, r4
 800aebc:	d12b      	bne.n	800af16 <_malloc_r+0xe2>
 800aebe:	2200      	movs	r2, #0
 800aec0:	605a      	str	r2, [r3, #4]
 800aec2:	e00f      	b.n	800aee4 <_malloc_r+0xb0>
 800aec4:	6822      	ldr	r2, [r4, #0]
 800aec6:	1b52      	subs	r2, r2, r5
 800aec8:	d41f      	bmi.n	800af0a <_malloc_r+0xd6>
 800aeca:	2a0b      	cmp	r2, #11
 800aecc:	d917      	bls.n	800aefe <_malloc_r+0xca>
 800aece:	1961      	adds	r1, r4, r5
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	6025      	str	r5, [r4, #0]
 800aed4:	bf18      	it	ne
 800aed6:	6059      	strne	r1, [r3, #4]
 800aed8:	6863      	ldr	r3, [r4, #4]
 800aeda:	bf08      	it	eq
 800aedc:	f8c8 1000 	streq.w	r1, [r8]
 800aee0:	5162      	str	r2, [r4, r5]
 800aee2:	604b      	str	r3, [r1, #4]
 800aee4:	4638      	mov	r0, r7
 800aee6:	f104 060b 	add.w	r6, r4, #11
 800aeea:	f000 f829 	bl	800af40 <__malloc_unlock>
 800aeee:	f026 0607 	bic.w	r6, r6, #7
 800aef2:	1d23      	adds	r3, r4, #4
 800aef4:	1af2      	subs	r2, r6, r3
 800aef6:	d0ae      	beq.n	800ae56 <_malloc_r+0x22>
 800aef8:	1b9b      	subs	r3, r3, r6
 800aefa:	50a3      	str	r3, [r4, r2]
 800aefc:	e7ab      	b.n	800ae56 <_malloc_r+0x22>
 800aefe:	42a3      	cmp	r3, r4
 800af00:	6862      	ldr	r2, [r4, #4]
 800af02:	d1dd      	bne.n	800aec0 <_malloc_r+0x8c>
 800af04:	f8c8 2000 	str.w	r2, [r8]
 800af08:	e7ec      	b.n	800aee4 <_malloc_r+0xb0>
 800af0a:	4623      	mov	r3, r4
 800af0c:	6864      	ldr	r4, [r4, #4]
 800af0e:	e7ac      	b.n	800ae6a <_malloc_r+0x36>
 800af10:	4634      	mov	r4, r6
 800af12:	6876      	ldr	r6, [r6, #4]
 800af14:	e7b4      	b.n	800ae80 <_malloc_r+0x4c>
 800af16:	4613      	mov	r3, r2
 800af18:	e7cc      	b.n	800aeb4 <_malloc_r+0x80>
 800af1a:	230c      	movs	r3, #12
 800af1c:	603b      	str	r3, [r7, #0]
 800af1e:	4638      	mov	r0, r7
 800af20:	f000 f80e 	bl	800af40 <__malloc_unlock>
 800af24:	e797      	b.n	800ae56 <_malloc_r+0x22>
 800af26:	6025      	str	r5, [r4, #0]
 800af28:	e7dc      	b.n	800aee4 <_malloc_r+0xb0>
 800af2a:	605b      	str	r3, [r3, #4]
 800af2c:	deff      	udf	#255	; 0xff
 800af2e:	bf00      	nop
 800af30:	20005934 	.word	0x20005934

0800af34 <__malloc_lock>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__malloc_lock+0x8>)
 800af36:	f7ff b876 	b.w	800a026 <__retarget_lock_acquire_recursive>
 800af3a:	bf00      	nop
 800af3c:	20005930 	.word	0x20005930

0800af40 <__malloc_unlock>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__malloc_unlock+0x8>)
 800af42:	f7ff b871 	b.w	800a028 <__retarget_lock_release_recursive>
 800af46:	bf00      	nop
 800af48:	20005930 	.word	0x20005930

0800af4c <_Balloc>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	69c6      	ldr	r6, [r0, #28]
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	b976      	cbnz	r6, 800af74 <_Balloc+0x28>
 800af56:	2010      	movs	r0, #16
 800af58:	f7ff ff44 	bl	800ade4 <malloc>
 800af5c:	4602      	mov	r2, r0
 800af5e:	61e0      	str	r0, [r4, #28]
 800af60:	b920      	cbnz	r0, 800af6c <_Balloc+0x20>
 800af62:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <_Balloc+0x78>)
 800af64:	4818      	ldr	r0, [pc, #96]	; (800afc8 <_Balloc+0x7c>)
 800af66:	216b      	movs	r1, #107	; 0x6b
 800af68:	f002 faea 	bl	800d540 <__assert_func>
 800af6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af70:	6006      	str	r6, [r0, #0]
 800af72:	60c6      	str	r6, [r0, #12]
 800af74:	69e6      	ldr	r6, [r4, #28]
 800af76:	68f3      	ldr	r3, [r6, #12]
 800af78:	b183      	cbz	r3, 800af9c <_Balloc+0x50>
 800af7a:	69e3      	ldr	r3, [r4, #28]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af82:	b9b8      	cbnz	r0, 800afb4 <_Balloc+0x68>
 800af84:	2101      	movs	r1, #1
 800af86:	fa01 f605 	lsl.w	r6, r1, r5
 800af8a:	1d72      	adds	r2, r6, #5
 800af8c:	0092      	lsls	r2, r2, #2
 800af8e:	4620      	mov	r0, r4
 800af90:	f002 faf4 	bl	800d57c <_calloc_r>
 800af94:	b160      	cbz	r0, 800afb0 <_Balloc+0x64>
 800af96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af9a:	e00e      	b.n	800afba <_Balloc+0x6e>
 800af9c:	2221      	movs	r2, #33	; 0x21
 800af9e:	2104      	movs	r1, #4
 800afa0:	4620      	mov	r0, r4
 800afa2:	f002 faeb 	bl	800d57c <_calloc_r>
 800afa6:	69e3      	ldr	r3, [r4, #28]
 800afa8:	60f0      	str	r0, [r6, #12]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e4      	bne.n	800af7a <_Balloc+0x2e>
 800afb0:	2000      	movs	r0, #0
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	6802      	ldr	r2, [r0, #0]
 800afb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afba:	2300      	movs	r3, #0
 800afbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afc0:	e7f7      	b.n	800afb2 <_Balloc+0x66>
 800afc2:	bf00      	nop
 800afc4:	0800f2d0 	.word	0x0800f2d0
 800afc8:	0800f350 	.word	0x0800f350

0800afcc <_Bfree>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	69c6      	ldr	r6, [r0, #28]
 800afd0:	4605      	mov	r5, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	b976      	cbnz	r6, 800aff4 <_Bfree+0x28>
 800afd6:	2010      	movs	r0, #16
 800afd8:	f7ff ff04 	bl	800ade4 <malloc>
 800afdc:	4602      	mov	r2, r0
 800afde:	61e8      	str	r0, [r5, #28]
 800afe0:	b920      	cbnz	r0, 800afec <_Bfree+0x20>
 800afe2:	4b09      	ldr	r3, [pc, #36]	; (800b008 <_Bfree+0x3c>)
 800afe4:	4809      	ldr	r0, [pc, #36]	; (800b00c <_Bfree+0x40>)
 800afe6:	218f      	movs	r1, #143	; 0x8f
 800afe8:	f002 faaa 	bl	800d540 <__assert_func>
 800afec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aff0:	6006      	str	r6, [r0, #0]
 800aff2:	60c6      	str	r6, [r0, #12]
 800aff4:	b13c      	cbz	r4, 800b006 <_Bfree+0x3a>
 800aff6:	69eb      	ldr	r3, [r5, #28]
 800aff8:	6862      	ldr	r2, [r4, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b000:	6021      	str	r1, [r4, #0]
 800b002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	0800f2d0 	.word	0x0800f2d0
 800b00c:	0800f350 	.word	0x0800f350

0800b010 <__multadd>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	690d      	ldr	r5, [r1, #16]
 800b016:	4607      	mov	r7, r0
 800b018:	460c      	mov	r4, r1
 800b01a:	461e      	mov	r6, r3
 800b01c:	f101 0c14 	add.w	ip, r1, #20
 800b020:	2000      	movs	r0, #0
 800b022:	f8dc 3000 	ldr.w	r3, [ip]
 800b026:	b299      	uxth	r1, r3
 800b028:	fb02 6101 	mla	r1, r2, r1, r6
 800b02c:	0c1e      	lsrs	r6, r3, #16
 800b02e:	0c0b      	lsrs	r3, r1, #16
 800b030:	fb02 3306 	mla	r3, r2, r6, r3
 800b034:	b289      	uxth	r1, r1
 800b036:	3001      	adds	r0, #1
 800b038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b03c:	4285      	cmp	r5, r0
 800b03e:	f84c 1b04 	str.w	r1, [ip], #4
 800b042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b046:	dcec      	bgt.n	800b022 <__multadd+0x12>
 800b048:	b30e      	cbz	r6, 800b08e <__multadd+0x7e>
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	42ab      	cmp	r3, r5
 800b04e:	dc19      	bgt.n	800b084 <__multadd+0x74>
 800b050:	6861      	ldr	r1, [r4, #4]
 800b052:	4638      	mov	r0, r7
 800b054:	3101      	adds	r1, #1
 800b056:	f7ff ff79 	bl	800af4c <_Balloc>
 800b05a:	4680      	mov	r8, r0
 800b05c:	b928      	cbnz	r0, 800b06a <__multadd+0x5a>
 800b05e:	4602      	mov	r2, r0
 800b060:	4b0c      	ldr	r3, [pc, #48]	; (800b094 <__multadd+0x84>)
 800b062:	480d      	ldr	r0, [pc, #52]	; (800b098 <__multadd+0x88>)
 800b064:	21ba      	movs	r1, #186	; 0xba
 800b066:	f002 fa6b 	bl	800d540 <__assert_func>
 800b06a:	6922      	ldr	r2, [r4, #16]
 800b06c:	3202      	adds	r2, #2
 800b06e:	f104 010c 	add.w	r1, r4, #12
 800b072:	0092      	lsls	r2, r2, #2
 800b074:	300c      	adds	r0, #12
 800b076:	f7fe ffd8 	bl	800a02a <memcpy>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4638      	mov	r0, r7
 800b07e:	f7ff ffa5 	bl	800afcc <_Bfree>
 800b082:	4644      	mov	r4, r8
 800b084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b088:	3501      	adds	r5, #1
 800b08a:	615e      	str	r6, [r3, #20]
 800b08c:	6125      	str	r5, [r4, #16]
 800b08e:	4620      	mov	r0, r4
 800b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b094:	0800f33f 	.word	0x0800f33f
 800b098:	0800f350 	.word	0x0800f350

0800b09c <__s2b>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	4615      	mov	r5, r2
 800b0a4:	461f      	mov	r7, r3
 800b0a6:	2209      	movs	r2, #9
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	db09      	blt.n	800b0cc <__s2b+0x30>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ff47 	bl	800af4c <_Balloc>
 800b0be:	b940      	cbnz	r0, 800b0d2 <__s2b+0x36>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	4b19      	ldr	r3, [pc, #100]	; (800b128 <__s2b+0x8c>)
 800b0c4:	4819      	ldr	r0, [pc, #100]	; (800b12c <__s2b+0x90>)
 800b0c6:	21d3      	movs	r1, #211	; 0xd3
 800b0c8:	f002 fa3a 	bl	800d540 <__assert_func>
 800b0cc:	0052      	lsls	r2, r2, #1
 800b0ce:	3101      	adds	r1, #1
 800b0d0:	e7f0      	b.n	800b0b4 <__s2b+0x18>
 800b0d2:	9b08      	ldr	r3, [sp, #32]
 800b0d4:	6143      	str	r3, [r0, #20]
 800b0d6:	2d09      	cmp	r5, #9
 800b0d8:	f04f 0301 	mov.w	r3, #1
 800b0dc:	6103      	str	r3, [r0, #16]
 800b0de:	dd16      	ble.n	800b10e <__s2b+0x72>
 800b0e0:	f104 0909 	add.w	r9, r4, #9
 800b0e4:	46c8      	mov	r8, r9
 800b0e6:	442c      	add	r4, r5
 800b0e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	3b30      	subs	r3, #48	; 0x30
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7ff ff8c 	bl	800b010 <__multadd>
 800b0f8:	45a0      	cmp	r8, r4
 800b0fa:	d1f5      	bne.n	800b0e8 <__s2b+0x4c>
 800b0fc:	f1a5 0408 	sub.w	r4, r5, #8
 800b100:	444c      	add	r4, r9
 800b102:	1b2d      	subs	r5, r5, r4
 800b104:	1963      	adds	r3, r4, r5
 800b106:	42bb      	cmp	r3, r7
 800b108:	db04      	blt.n	800b114 <__s2b+0x78>
 800b10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10e:	340a      	adds	r4, #10
 800b110:	2509      	movs	r5, #9
 800b112:	e7f6      	b.n	800b102 <__s2b+0x66>
 800b114:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b118:	4601      	mov	r1, r0
 800b11a:	3b30      	subs	r3, #48	; 0x30
 800b11c:	220a      	movs	r2, #10
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff ff76 	bl	800b010 <__multadd>
 800b124:	e7ee      	b.n	800b104 <__s2b+0x68>
 800b126:	bf00      	nop
 800b128:	0800f33f 	.word	0x0800f33f
 800b12c:	0800f350 	.word	0x0800f350

0800b130 <__hi0bits>:
 800b130:	0c03      	lsrs	r3, r0, #16
 800b132:	041b      	lsls	r3, r3, #16
 800b134:	b9d3      	cbnz	r3, 800b16c <__hi0bits+0x3c>
 800b136:	0400      	lsls	r0, r0, #16
 800b138:	2310      	movs	r3, #16
 800b13a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b13e:	bf04      	itt	eq
 800b140:	0200      	lsleq	r0, r0, #8
 800b142:	3308      	addeq	r3, #8
 800b144:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b148:	bf04      	itt	eq
 800b14a:	0100      	lsleq	r0, r0, #4
 800b14c:	3304      	addeq	r3, #4
 800b14e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b152:	bf04      	itt	eq
 800b154:	0080      	lsleq	r0, r0, #2
 800b156:	3302      	addeq	r3, #2
 800b158:	2800      	cmp	r0, #0
 800b15a:	db05      	blt.n	800b168 <__hi0bits+0x38>
 800b15c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b160:	f103 0301 	add.w	r3, r3, #1
 800b164:	bf08      	it	eq
 800b166:	2320      	moveq	r3, #32
 800b168:	4618      	mov	r0, r3
 800b16a:	4770      	bx	lr
 800b16c:	2300      	movs	r3, #0
 800b16e:	e7e4      	b.n	800b13a <__hi0bits+0xa>

0800b170 <__lo0bits>:
 800b170:	6803      	ldr	r3, [r0, #0]
 800b172:	f013 0207 	ands.w	r2, r3, #7
 800b176:	d00c      	beq.n	800b192 <__lo0bits+0x22>
 800b178:	07d9      	lsls	r1, r3, #31
 800b17a:	d422      	bmi.n	800b1c2 <__lo0bits+0x52>
 800b17c:	079a      	lsls	r2, r3, #30
 800b17e:	bf49      	itett	mi
 800b180:	085b      	lsrmi	r3, r3, #1
 800b182:	089b      	lsrpl	r3, r3, #2
 800b184:	6003      	strmi	r3, [r0, #0]
 800b186:	2201      	movmi	r2, #1
 800b188:	bf5c      	itt	pl
 800b18a:	6003      	strpl	r3, [r0, #0]
 800b18c:	2202      	movpl	r2, #2
 800b18e:	4610      	mov	r0, r2
 800b190:	4770      	bx	lr
 800b192:	b299      	uxth	r1, r3
 800b194:	b909      	cbnz	r1, 800b19a <__lo0bits+0x2a>
 800b196:	0c1b      	lsrs	r3, r3, #16
 800b198:	2210      	movs	r2, #16
 800b19a:	b2d9      	uxtb	r1, r3
 800b19c:	b909      	cbnz	r1, 800b1a2 <__lo0bits+0x32>
 800b19e:	3208      	adds	r2, #8
 800b1a0:	0a1b      	lsrs	r3, r3, #8
 800b1a2:	0719      	lsls	r1, r3, #28
 800b1a4:	bf04      	itt	eq
 800b1a6:	091b      	lsreq	r3, r3, #4
 800b1a8:	3204      	addeq	r2, #4
 800b1aa:	0799      	lsls	r1, r3, #30
 800b1ac:	bf04      	itt	eq
 800b1ae:	089b      	lsreq	r3, r3, #2
 800b1b0:	3202      	addeq	r2, #2
 800b1b2:	07d9      	lsls	r1, r3, #31
 800b1b4:	d403      	bmi.n	800b1be <__lo0bits+0x4e>
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	f102 0201 	add.w	r2, r2, #1
 800b1bc:	d003      	beq.n	800b1c6 <__lo0bits+0x56>
 800b1be:	6003      	str	r3, [r0, #0]
 800b1c0:	e7e5      	b.n	800b18e <__lo0bits+0x1e>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	e7e3      	b.n	800b18e <__lo0bits+0x1e>
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	e7e1      	b.n	800b18e <__lo0bits+0x1e>
	...

0800b1cc <__i2b>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	f7ff febb 	bl	800af4c <_Balloc>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	b928      	cbnz	r0, 800b1e6 <__i2b+0x1a>
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <__i2b+0x24>)
 800b1dc:	4805      	ldr	r0, [pc, #20]	; (800b1f4 <__i2b+0x28>)
 800b1de:	f240 1145 	movw	r1, #325	; 0x145
 800b1e2:	f002 f9ad 	bl	800d540 <__assert_func>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	6144      	str	r4, [r0, #20]
 800b1ea:	6103      	str	r3, [r0, #16]
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800f33f 	.word	0x0800f33f
 800b1f4:	0800f350 	.word	0x0800f350

0800b1f8 <__multiply>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4691      	mov	r9, r2
 800b1fe:	690a      	ldr	r2, [r1, #16]
 800b200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b204:	429a      	cmp	r2, r3
 800b206:	bfb8      	it	lt
 800b208:	460b      	movlt	r3, r1
 800b20a:	460c      	mov	r4, r1
 800b20c:	bfbc      	itt	lt
 800b20e:	464c      	movlt	r4, r9
 800b210:	4699      	movlt	r9, r3
 800b212:	6927      	ldr	r7, [r4, #16]
 800b214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b218:	68a3      	ldr	r3, [r4, #8]
 800b21a:	6861      	ldr	r1, [r4, #4]
 800b21c:	eb07 060a 	add.w	r6, r7, sl
 800b220:	42b3      	cmp	r3, r6
 800b222:	b085      	sub	sp, #20
 800b224:	bfb8      	it	lt
 800b226:	3101      	addlt	r1, #1
 800b228:	f7ff fe90 	bl	800af4c <_Balloc>
 800b22c:	b930      	cbnz	r0, 800b23c <__multiply+0x44>
 800b22e:	4602      	mov	r2, r0
 800b230:	4b44      	ldr	r3, [pc, #272]	; (800b344 <__multiply+0x14c>)
 800b232:	4845      	ldr	r0, [pc, #276]	; (800b348 <__multiply+0x150>)
 800b234:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b238:	f002 f982 	bl	800d540 <__assert_func>
 800b23c:	f100 0514 	add.w	r5, r0, #20
 800b240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b244:	462b      	mov	r3, r5
 800b246:	2200      	movs	r2, #0
 800b248:	4543      	cmp	r3, r8
 800b24a:	d321      	bcc.n	800b290 <__multiply+0x98>
 800b24c:	f104 0314 	add.w	r3, r4, #20
 800b250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b254:	f109 0314 	add.w	r3, r9, #20
 800b258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b25c:	9202      	str	r2, [sp, #8]
 800b25e:	1b3a      	subs	r2, r7, r4
 800b260:	3a15      	subs	r2, #21
 800b262:	f022 0203 	bic.w	r2, r2, #3
 800b266:	3204      	adds	r2, #4
 800b268:	f104 0115 	add.w	r1, r4, #21
 800b26c:	428f      	cmp	r7, r1
 800b26e:	bf38      	it	cc
 800b270:	2204      	movcc	r2, #4
 800b272:	9201      	str	r2, [sp, #4]
 800b274:	9a02      	ldr	r2, [sp, #8]
 800b276:	9303      	str	r3, [sp, #12]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d80c      	bhi.n	800b296 <__multiply+0x9e>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	dd03      	ble.n	800b288 <__multiply+0x90>
 800b280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b284:	2b00      	cmp	r3, #0
 800b286:	d05b      	beq.n	800b340 <__multiply+0x148>
 800b288:	6106      	str	r6, [r0, #16]
 800b28a:	b005      	add	sp, #20
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	f843 2b04 	str.w	r2, [r3], #4
 800b294:	e7d8      	b.n	800b248 <__multiply+0x50>
 800b296:	f8b3 a000 	ldrh.w	sl, [r3]
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	d024      	beq.n	800b2ea <__multiply+0xf2>
 800b2a0:	f104 0e14 	add.w	lr, r4, #20
 800b2a4:	46a9      	mov	r9, r5
 800b2a6:	f04f 0c00 	mov.w	ip, #0
 800b2aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800b2b2:	fa1f fb82 	uxth.w	fp, r2
 800b2b6:	b289      	uxth	r1, r1
 800b2b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b2c4:	4461      	add	r1, ip
 800b2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2d2:	b289      	uxth	r1, r1
 800b2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2d8:	4577      	cmp	r7, lr
 800b2da:	f849 1b04 	str.w	r1, [r9], #4
 800b2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2e2:	d8e2      	bhi.n	800b2aa <__multiply+0xb2>
 800b2e4:	9a01      	ldr	r2, [sp, #4]
 800b2e6:	f845 c002 	str.w	ip, [r5, r2]
 800b2ea:	9a03      	ldr	r2, [sp, #12]
 800b2ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	f1b9 0f00 	cmp.w	r9, #0
 800b2f6:	d021      	beq.n	800b33c <__multiply+0x144>
 800b2f8:	6829      	ldr	r1, [r5, #0]
 800b2fa:	f104 0c14 	add.w	ip, r4, #20
 800b2fe:	46ae      	mov	lr, r5
 800b300:	f04f 0a00 	mov.w	sl, #0
 800b304:	f8bc b000 	ldrh.w	fp, [ip]
 800b308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b30c:	fb09 220b 	mla	r2, r9, fp, r2
 800b310:	4452      	add	r2, sl
 800b312:	b289      	uxth	r1, r1
 800b314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b318:	f84e 1b04 	str.w	r1, [lr], #4
 800b31c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b324:	f8be 1000 	ldrh.w	r1, [lr]
 800b328:	fb09 110a 	mla	r1, r9, sl, r1
 800b32c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b330:	4567      	cmp	r7, ip
 800b332:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b336:	d8e5      	bhi.n	800b304 <__multiply+0x10c>
 800b338:	9a01      	ldr	r2, [sp, #4]
 800b33a:	50a9      	str	r1, [r5, r2]
 800b33c:	3504      	adds	r5, #4
 800b33e:	e799      	b.n	800b274 <__multiply+0x7c>
 800b340:	3e01      	subs	r6, #1
 800b342:	e79b      	b.n	800b27c <__multiply+0x84>
 800b344:	0800f33f 	.word	0x0800f33f
 800b348:	0800f350 	.word	0x0800f350

0800b34c <__pow5mult>:
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	4615      	mov	r5, r2
 800b352:	f012 0203 	ands.w	r2, r2, #3
 800b356:	4606      	mov	r6, r0
 800b358:	460f      	mov	r7, r1
 800b35a:	d007      	beq.n	800b36c <__pow5mult+0x20>
 800b35c:	4c25      	ldr	r4, [pc, #148]	; (800b3f4 <__pow5mult+0xa8>)
 800b35e:	3a01      	subs	r2, #1
 800b360:	2300      	movs	r3, #0
 800b362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b366:	f7ff fe53 	bl	800b010 <__multadd>
 800b36a:	4607      	mov	r7, r0
 800b36c:	10ad      	asrs	r5, r5, #2
 800b36e:	d03d      	beq.n	800b3ec <__pow5mult+0xa0>
 800b370:	69f4      	ldr	r4, [r6, #28]
 800b372:	b97c      	cbnz	r4, 800b394 <__pow5mult+0x48>
 800b374:	2010      	movs	r0, #16
 800b376:	f7ff fd35 	bl	800ade4 <malloc>
 800b37a:	4602      	mov	r2, r0
 800b37c:	61f0      	str	r0, [r6, #28]
 800b37e:	b928      	cbnz	r0, 800b38c <__pow5mult+0x40>
 800b380:	4b1d      	ldr	r3, [pc, #116]	; (800b3f8 <__pow5mult+0xac>)
 800b382:	481e      	ldr	r0, [pc, #120]	; (800b3fc <__pow5mult+0xb0>)
 800b384:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b388:	f002 f8da 	bl	800d540 <__assert_func>
 800b38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b390:	6004      	str	r4, [r0, #0]
 800b392:	60c4      	str	r4, [r0, #12]
 800b394:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b39c:	b94c      	cbnz	r4, 800b3b2 <__pow5mult+0x66>
 800b39e:	f240 2171 	movw	r1, #625	; 0x271
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7ff ff12 	bl	800b1cc <__i2b>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	6003      	str	r3, [r0, #0]
 800b3b2:	f04f 0900 	mov.w	r9, #0
 800b3b6:	07eb      	lsls	r3, r5, #31
 800b3b8:	d50a      	bpl.n	800b3d0 <__pow5mult+0x84>
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	4622      	mov	r2, r4
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7ff ff1a 	bl	800b1f8 <__multiply>
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff fdff 	bl	800afcc <_Bfree>
 800b3ce:	4647      	mov	r7, r8
 800b3d0:	106d      	asrs	r5, r5, #1
 800b3d2:	d00b      	beq.n	800b3ec <__pow5mult+0xa0>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	b938      	cbnz	r0, 800b3e8 <__pow5mult+0x9c>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f7ff ff0b 	bl	800b1f8 <__multiply>
 800b3e2:	6020      	str	r0, [r4, #0]
 800b3e4:	f8c0 9000 	str.w	r9, [r0]
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	e7e4      	b.n	800b3b6 <__pow5mult+0x6a>
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800f4a0 	.word	0x0800f4a0
 800b3f8:	0800f2d0 	.word	0x0800f2d0
 800b3fc:	0800f350 	.word	0x0800f350

0800b400 <__lshift>:
 800b400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	6849      	ldr	r1, [r1, #4]
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	4607      	mov	r7, r0
 800b412:	4691      	mov	r9, r2
 800b414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b418:	f108 0601 	add.w	r6, r8, #1
 800b41c:	42b3      	cmp	r3, r6
 800b41e:	db0b      	blt.n	800b438 <__lshift+0x38>
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff fd93 	bl	800af4c <_Balloc>
 800b426:	4605      	mov	r5, r0
 800b428:	b948      	cbnz	r0, 800b43e <__lshift+0x3e>
 800b42a:	4602      	mov	r2, r0
 800b42c:	4b28      	ldr	r3, [pc, #160]	; (800b4d0 <__lshift+0xd0>)
 800b42e:	4829      	ldr	r0, [pc, #164]	; (800b4d4 <__lshift+0xd4>)
 800b430:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b434:	f002 f884 	bl	800d540 <__assert_func>
 800b438:	3101      	adds	r1, #1
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	e7ee      	b.n	800b41c <__lshift+0x1c>
 800b43e:	2300      	movs	r3, #0
 800b440:	f100 0114 	add.w	r1, r0, #20
 800b444:	f100 0210 	add.w	r2, r0, #16
 800b448:	4618      	mov	r0, r3
 800b44a:	4553      	cmp	r3, sl
 800b44c:	db33      	blt.n	800b4b6 <__lshift+0xb6>
 800b44e:	6920      	ldr	r0, [r4, #16]
 800b450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b454:	f104 0314 	add.w	r3, r4, #20
 800b458:	f019 091f 	ands.w	r9, r9, #31
 800b45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b464:	d02b      	beq.n	800b4be <__lshift+0xbe>
 800b466:	f1c9 0e20 	rsb	lr, r9, #32
 800b46a:	468a      	mov	sl, r1
 800b46c:	2200      	movs	r2, #0
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	fa00 f009 	lsl.w	r0, r0, r9
 800b474:	4310      	orrs	r0, r2
 800b476:	f84a 0b04 	str.w	r0, [sl], #4
 800b47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47e:	459c      	cmp	ip, r3
 800b480:	fa22 f20e 	lsr.w	r2, r2, lr
 800b484:	d8f3      	bhi.n	800b46e <__lshift+0x6e>
 800b486:	ebac 0304 	sub.w	r3, ip, r4
 800b48a:	3b15      	subs	r3, #21
 800b48c:	f023 0303 	bic.w	r3, r3, #3
 800b490:	3304      	adds	r3, #4
 800b492:	f104 0015 	add.w	r0, r4, #21
 800b496:	4584      	cmp	ip, r0
 800b498:	bf38      	it	cc
 800b49a:	2304      	movcc	r3, #4
 800b49c:	50ca      	str	r2, [r1, r3]
 800b49e:	b10a      	cbz	r2, 800b4a4 <__lshift+0xa4>
 800b4a0:	f108 0602 	add.w	r6, r8, #2
 800b4a4:	3e01      	subs	r6, #1
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	612e      	str	r6, [r5, #16]
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f7ff fd8e 	bl	800afcc <_Bfree>
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	e7c5      	b.n	800b44a <__lshift+0x4a>
 800b4be:	3904      	subs	r1, #4
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4c8:	459c      	cmp	ip, r3
 800b4ca:	d8f9      	bhi.n	800b4c0 <__lshift+0xc0>
 800b4cc:	e7ea      	b.n	800b4a4 <__lshift+0xa4>
 800b4ce:	bf00      	nop
 800b4d0:	0800f33f 	.word	0x0800f33f
 800b4d4:	0800f350 	.word	0x0800f350

0800b4d8 <__mcmp>:
 800b4d8:	b530      	push	{r4, r5, lr}
 800b4da:	6902      	ldr	r2, [r0, #16]
 800b4dc:	690c      	ldr	r4, [r1, #16]
 800b4de:	1b12      	subs	r2, r2, r4
 800b4e0:	d10e      	bne.n	800b500 <__mcmp+0x28>
 800b4e2:	f100 0314 	add.w	r3, r0, #20
 800b4e6:	3114      	adds	r1, #20
 800b4e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4f8:	42a5      	cmp	r5, r4
 800b4fa:	d003      	beq.n	800b504 <__mcmp+0x2c>
 800b4fc:	d305      	bcc.n	800b50a <__mcmp+0x32>
 800b4fe:	2201      	movs	r2, #1
 800b500:	4610      	mov	r0, r2
 800b502:	bd30      	pop	{r4, r5, pc}
 800b504:	4283      	cmp	r3, r0
 800b506:	d3f3      	bcc.n	800b4f0 <__mcmp+0x18>
 800b508:	e7fa      	b.n	800b500 <__mcmp+0x28>
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b50e:	e7f7      	b.n	800b500 <__mcmp+0x28>

0800b510 <__mdiff>:
 800b510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	4606      	mov	r6, r0
 800b518:	4611      	mov	r1, r2
 800b51a:	4620      	mov	r0, r4
 800b51c:	4690      	mov	r8, r2
 800b51e:	f7ff ffdb 	bl	800b4d8 <__mcmp>
 800b522:	1e05      	subs	r5, r0, #0
 800b524:	d110      	bne.n	800b548 <__mdiff+0x38>
 800b526:	4629      	mov	r1, r5
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff fd0f 	bl	800af4c <_Balloc>
 800b52e:	b930      	cbnz	r0, 800b53e <__mdiff+0x2e>
 800b530:	4b3a      	ldr	r3, [pc, #232]	; (800b61c <__mdiff+0x10c>)
 800b532:	4602      	mov	r2, r0
 800b534:	f240 2137 	movw	r1, #567	; 0x237
 800b538:	4839      	ldr	r0, [pc, #228]	; (800b620 <__mdiff+0x110>)
 800b53a:	f002 f801 	bl	800d540 <__assert_func>
 800b53e:	2301      	movs	r3, #1
 800b540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	bfa4      	itt	ge
 800b54a:	4643      	movge	r3, r8
 800b54c:	46a0      	movge	r8, r4
 800b54e:	4630      	mov	r0, r6
 800b550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b554:	bfa6      	itte	ge
 800b556:	461c      	movge	r4, r3
 800b558:	2500      	movge	r5, #0
 800b55a:	2501      	movlt	r5, #1
 800b55c:	f7ff fcf6 	bl	800af4c <_Balloc>
 800b560:	b920      	cbnz	r0, 800b56c <__mdiff+0x5c>
 800b562:	4b2e      	ldr	r3, [pc, #184]	; (800b61c <__mdiff+0x10c>)
 800b564:	4602      	mov	r2, r0
 800b566:	f240 2145 	movw	r1, #581	; 0x245
 800b56a:	e7e5      	b.n	800b538 <__mdiff+0x28>
 800b56c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b570:	6926      	ldr	r6, [r4, #16]
 800b572:	60c5      	str	r5, [r0, #12]
 800b574:	f104 0914 	add.w	r9, r4, #20
 800b578:	f108 0514 	add.w	r5, r8, #20
 800b57c:	f100 0e14 	add.w	lr, r0, #20
 800b580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b588:	f108 0210 	add.w	r2, r8, #16
 800b58c:	46f2      	mov	sl, lr
 800b58e:	2100      	movs	r1, #0
 800b590:	f859 3b04 	ldr.w	r3, [r9], #4
 800b594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b598:	fa11 f88b 	uxtah	r8, r1, fp
 800b59c:	b299      	uxth	r1, r3
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	eba8 0801 	sub.w	r8, r8, r1
 800b5a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5ac:	fa1f f888 	uxth.w	r8, r8
 800b5b0:	1419      	asrs	r1, r3, #16
 800b5b2:	454e      	cmp	r6, r9
 800b5b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5b8:	f84a 3b04 	str.w	r3, [sl], #4
 800b5bc:	d8e8      	bhi.n	800b590 <__mdiff+0x80>
 800b5be:	1b33      	subs	r3, r6, r4
 800b5c0:	3b15      	subs	r3, #21
 800b5c2:	f023 0303 	bic.w	r3, r3, #3
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	3415      	adds	r4, #21
 800b5ca:	42a6      	cmp	r6, r4
 800b5cc:	bf38      	it	cc
 800b5ce:	2304      	movcc	r3, #4
 800b5d0:	441d      	add	r5, r3
 800b5d2:	4473      	add	r3, lr
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	462e      	mov	r6, r5
 800b5d8:	4566      	cmp	r6, ip
 800b5da:	d30e      	bcc.n	800b5fa <__mdiff+0xea>
 800b5dc:	f10c 0203 	add.w	r2, ip, #3
 800b5e0:	1b52      	subs	r2, r2, r5
 800b5e2:	f022 0203 	bic.w	r2, r2, #3
 800b5e6:	3d03      	subs	r5, #3
 800b5e8:	45ac      	cmp	ip, r5
 800b5ea:	bf38      	it	cc
 800b5ec:	2200      	movcc	r2, #0
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b5f4:	b17a      	cbz	r2, 800b616 <__mdiff+0x106>
 800b5f6:	6107      	str	r7, [r0, #16]
 800b5f8:	e7a4      	b.n	800b544 <__mdiff+0x34>
 800b5fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5fe:	fa11 f288 	uxtah	r2, r1, r8
 800b602:	1414      	asrs	r4, r2, #16
 800b604:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b608:	b292      	uxth	r2, r2
 800b60a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b60e:	f84e 2b04 	str.w	r2, [lr], #4
 800b612:	1421      	asrs	r1, r4, #16
 800b614:	e7e0      	b.n	800b5d8 <__mdiff+0xc8>
 800b616:	3f01      	subs	r7, #1
 800b618:	e7ea      	b.n	800b5f0 <__mdiff+0xe0>
 800b61a:	bf00      	nop
 800b61c:	0800f33f 	.word	0x0800f33f
 800b620:	0800f350 	.word	0x0800f350

0800b624 <__ulp>:
 800b624:	b082      	sub	sp, #8
 800b626:	ed8d 0b00 	vstr	d0, [sp]
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <__ulp+0x48>)
 800b62e:	4013      	ands	r3, r2
 800b630:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b634:	2b00      	cmp	r3, #0
 800b636:	dc08      	bgt.n	800b64a <__ulp+0x26>
 800b638:	425b      	negs	r3, r3
 800b63a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b63e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b642:	da04      	bge.n	800b64e <__ulp+0x2a>
 800b644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b648:	4113      	asrs	r3, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	e008      	b.n	800b660 <__ulp+0x3c>
 800b64e:	f1a2 0314 	sub.w	r3, r2, #20
 800b652:	2b1e      	cmp	r3, #30
 800b654:	bfda      	itte	le
 800b656:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b65a:	40da      	lsrle	r2, r3
 800b65c:	2201      	movgt	r2, #1
 800b65e:	2300      	movs	r3, #0
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	ec41 0b10 	vmov	d0, r0, r1
 800b668:	b002      	add	sp, #8
 800b66a:	4770      	bx	lr
 800b66c:	7ff00000 	.word	0x7ff00000

0800b670 <__b2d>:
 800b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b674:	6906      	ldr	r6, [r0, #16]
 800b676:	f100 0814 	add.w	r8, r0, #20
 800b67a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b67e:	1f37      	subs	r7, r6, #4
 800b680:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b684:	4610      	mov	r0, r2
 800b686:	f7ff fd53 	bl	800b130 <__hi0bits>
 800b68a:	f1c0 0320 	rsb	r3, r0, #32
 800b68e:	280a      	cmp	r0, #10
 800b690:	600b      	str	r3, [r1, #0]
 800b692:	491b      	ldr	r1, [pc, #108]	; (800b700 <__b2d+0x90>)
 800b694:	dc15      	bgt.n	800b6c2 <__b2d+0x52>
 800b696:	f1c0 0c0b 	rsb	ip, r0, #11
 800b69a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b69e:	45b8      	cmp	r8, r7
 800b6a0:	ea43 0501 	orr.w	r5, r3, r1
 800b6a4:	bf34      	ite	cc
 800b6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6aa:	2300      	movcs	r3, #0
 800b6ac:	3015      	adds	r0, #21
 800b6ae:	fa02 f000 	lsl.w	r0, r2, r0
 800b6b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b6b6:	4303      	orrs	r3, r0
 800b6b8:	461c      	mov	r4, r3
 800b6ba:	ec45 4b10 	vmov	d0, r4, r5
 800b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c2:	45b8      	cmp	r8, r7
 800b6c4:	bf3a      	itte	cc
 800b6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800b6ce:	2300      	movcs	r3, #0
 800b6d0:	380b      	subs	r0, #11
 800b6d2:	d012      	beq.n	800b6fa <__b2d+0x8a>
 800b6d4:	f1c0 0120 	rsb	r1, r0, #32
 800b6d8:	fa23 f401 	lsr.w	r4, r3, r1
 800b6dc:	4082      	lsls	r2, r0
 800b6de:	4322      	orrs	r2, r4
 800b6e0:	4547      	cmp	r7, r8
 800b6e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b6e6:	bf8c      	ite	hi
 800b6e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b6ec:	2200      	movls	r2, #0
 800b6ee:	4083      	lsls	r3, r0
 800b6f0:	40ca      	lsrs	r2, r1
 800b6f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	e7de      	b.n	800b6b8 <__b2d+0x48>
 800b6fa:	ea42 0501 	orr.w	r5, r2, r1
 800b6fe:	e7db      	b.n	800b6b8 <__b2d+0x48>
 800b700:	3ff00000 	.word	0x3ff00000

0800b704 <__d2b>:
 800b704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b708:	460f      	mov	r7, r1
 800b70a:	2101      	movs	r1, #1
 800b70c:	ec59 8b10 	vmov	r8, r9, d0
 800b710:	4616      	mov	r6, r2
 800b712:	f7ff fc1b 	bl	800af4c <_Balloc>
 800b716:	4604      	mov	r4, r0
 800b718:	b930      	cbnz	r0, 800b728 <__d2b+0x24>
 800b71a:	4602      	mov	r2, r0
 800b71c:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <__d2b+0xac>)
 800b71e:	4825      	ldr	r0, [pc, #148]	; (800b7b4 <__d2b+0xb0>)
 800b720:	f240 310f 	movw	r1, #783	; 0x30f
 800b724:	f001 ff0c 	bl	800d540 <__assert_func>
 800b728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b72c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b730:	bb2d      	cbnz	r5, 800b77e <__d2b+0x7a>
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	f1b8 0300 	subs.w	r3, r8, #0
 800b738:	d026      	beq.n	800b788 <__d2b+0x84>
 800b73a:	4668      	mov	r0, sp
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	f7ff fd17 	bl	800b170 <__lo0bits>
 800b742:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b746:	b1e8      	cbz	r0, 800b784 <__d2b+0x80>
 800b748:	f1c0 0320 	rsb	r3, r0, #32
 800b74c:	fa02 f303 	lsl.w	r3, r2, r3
 800b750:	430b      	orrs	r3, r1
 800b752:	40c2      	lsrs	r2, r0
 800b754:	6163      	str	r3, [r4, #20]
 800b756:	9201      	str	r2, [sp, #4]
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	61a3      	str	r3, [r4, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bf14      	ite	ne
 800b760:	2202      	movne	r2, #2
 800b762:	2201      	moveq	r2, #1
 800b764:	6122      	str	r2, [r4, #16]
 800b766:	b1bd      	cbz	r5, 800b798 <__d2b+0x94>
 800b768:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b76c:	4405      	add	r5, r0
 800b76e:	603d      	str	r5, [r7, #0]
 800b770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	4620      	mov	r0, r4
 800b778:	b003      	add	sp, #12
 800b77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b782:	e7d6      	b.n	800b732 <__d2b+0x2e>
 800b784:	6161      	str	r1, [r4, #20]
 800b786:	e7e7      	b.n	800b758 <__d2b+0x54>
 800b788:	a801      	add	r0, sp, #4
 800b78a:	f7ff fcf1 	bl	800b170 <__lo0bits>
 800b78e:	9b01      	ldr	r3, [sp, #4]
 800b790:	6163      	str	r3, [r4, #20]
 800b792:	3020      	adds	r0, #32
 800b794:	2201      	movs	r2, #1
 800b796:	e7e5      	b.n	800b764 <__d2b+0x60>
 800b798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b79c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7a0:	6038      	str	r0, [r7, #0]
 800b7a2:	6918      	ldr	r0, [r3, #16]
 800b7a4:	f7ff fcc4 	bl	800b130 <__hi0bits>
 800b7a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ac:	e7e2      	b.n	800b774 <__d2b+0x70>
 800b7ae:	bf00      	nop
 800b7b0:	0800f33f 	.word	0x0800f33f
 800b7b4:	0800f350 	.word	0x0800f350

0800b7b8 <__ratio>:
 800b7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4688      	mov	r8, r1
 800b7be:	4669      	mov	r1, sp
 800b7c0:	4681      	mov	r9, r0
 800b7c2:	f7ff ff55 	bl	800b670 <__b2d>
 800b7c6:	a901      	add	r1, sp, #4
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	ec55 4b10 	vmov	r4, r5, d0
 800b7ce:	f7ff ff4f 	bl	800b670 <__b2d>
 800b7d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b7da:	eba3 0c02 	sub.w	ip, r3, r2
 800b7de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b7e8:	ec51 0b10 	vmov	r0, r1, d0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bfd6      	itet	le
 800b7f0:	460a      	movle	r2, r1
 800b7f2:	462a      	movgt	r2, r5
 800b7f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	462f      	mov	r7, r5
 800b7fc:	bfd4      	ite	le
 800b7fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b806:	4620      	mov	r0, r4
 800b808:	ee10 2a10 	vmov	r2, s0
 800b80c:	465b      	mov	r3, fp
 800b80e:	4639      	mov	r1, r7
 800b810:	f7f5 f824 	bl	800085c <__aeabi_ddiv>
 800b814:	ec41 0b10 	vmov	d0, r0, r1
 800b818:	b003      	add	sp, #12
 800b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b81e <__copybits>:
 800b81e:	3901      	subs	r1, #1
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	1149      	asrs	r1, r1, #5
 800b824:	6914      	ldr	r4, [r2, #16]
 800b826:	3101      	adds	r1, #1
 800b828:	f102 0314 	add.w	r3, r2, #20
 800b82c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b834:	1f05      	subs	r5, r0, #4
 800b836:	42a3      	cmp	r3, r4
 800b838:	d30c      	bcc.n	800b854 <__copybits+0x36>
 800b83a:	1aa3      	subs	r3, r4, r2
 800b83c:	3b11      	subs	r3, #17
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	3211      	adds	r2, #17
 800b844:	42a2      	cmp	r2, r4
 800b846:	bf88      	it	hi
 800b848:	2300      	movhi	r3, #0
 800b84a:	4418      	add	r0, r3
 800b84c:	2300      	movs	r3, #0
 800b84e:	4288      	cmp	r0, r1
 800b850:	d305      	bcc.n	800b85e <__copybits+0x40>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	f853 6b04 	ldr.w	r6, [r3], #4
 800b858:	f845 6f04 	str.w	r6, [r5, #4]!
 800b85c:	e7eb      	b.n	800b836 <__copybits+0x18>
 800b85e:	f840 3b04 	str.w	r3, [r0], #4
 800b862:	e7f4      	b.n	800b84e <__copybits+0x30>

0800b864 <__any_on>:
 800b864:	f100 0214 	add.w	r2, r0, #20
 800b868:	6900      	ldr	r0, [r0, #16]
 800b86a:	114b      	asrs	r3, r1, #5
 800b86c:	4298      	cmp	r0, r3
 800b86e:	b510      	push	{r4, lr}
 800b870:	db11      	blt.n	800b896 <__any_on+0x32>
 800b872:	dd0a      	ble.n	800b88a <__any_on+0x26>
 800b874:	f011 011f 	ands.w	r1, r1, #31
 800b878:	d007      	beq.n	800b88a <__any_on+0x26>
 800b87a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b87e:	fa24 f001 	lsr.w	r0, r4, r1
 800b882:	fa00 f101 	lsl.w	r1, r0, r1
 800b886:	428c      	cmp	r4, r1
 800b888:	d10b      	bne.n	800b8a2 <__any_on+0x3e>
 800b88a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b88e:	4293      	cmp	r3, r2
 800b890:	d803      	bhi.n	800b89a <__any_on+0x36>
 800b892:	2000      	movs	r0, #0
 800b894:	bd10      	pop	{r4, pc}
 800b896:	4603      	mov	r3, r0
 800b898:	e7f7      	b.n	800b88a <__any_on+0x26>
 800b89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d0f5      	beq.n	800b88e <__any_on+0x2a>
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	e7f6      	b.n	800b894 <__any_on+0x30>

0800b8a6 <sulp>:
 800b8a6:	b570      	push	{r4, r5, r6, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	ec45 4b10 	vmov	d0, r4, r5
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	f7ff feb7 	bl	800b624 <__ulp>
 800b8b6:	ec51 0b10 	vmov	r0, r1, d0
 800b8ba:	b17e      	cbz	r6, 800b8dc <sulp+0x36>
 800b8bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	dd09      	ble.n	800b8dc <sulp+0x36>
 800b8c8:	051b      	lsls	r3, r3, #20
 800b8ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b8ce:	2400      	movs	r4, #0
 800b8d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	f7f4 fe96 	bl	8000608 <__aeabi_dmul>
 800b8dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8e0 <_strtod_l>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	ed2d 8b02 	vpush	{d8}
 800b8e8:	b09b      	sub	sp, #108	; 0x6c
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	9216      	str	r2, [sp, #88]	; 0x58
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	f04f 0800 	mov.w	r8, #0
 800b8f8:	f04f 0900 	mov.w	r9, #0
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	9215      	str	r2, [sp, #84]	; 0x54
 800b900:	7811      	ldrb	r1, [r2, #0]
 800b902:	292b      	cmp	r1, #43	; 0x2b
 800b904:	d04c      	beq.n	800b9a0 <_strtod_l+0xc0>
 800b906:	d83a      	bhi.n	800b97e <_strtod_l+0x9e>
 800b908:	290d      	cmp	r1, #13
 800b90a:	d834      	bhi.n	800b976 <_strtod_l+0x96>
 800b90c:	2908      	cmp	r1, #8
 800b90e:	d834      	bhi.n	800b97a <_strtod_l+0x9a>
 800b910:	2900      	cmp	r1, #0
 800b912:	d03d      	beq.n	800b990 <_strtod_l+0xb0>
 800b914:	2200      	movs	r2, #0
 800b916:	920a      	str	r2, [sp, #40]	; 0x28
 800b918:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b91a:	7832      	ldrb	r2, [r6, #0]
 800b91c:	2a30      	cmp	r2, #48	; 0x30
 800b91e:	f040 80b4 	bne.w	800ba8a <_strtod_l+0x1aa>
 800b922:	7872      	ldrb	r2, [r6, #1]
 800b924:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b928:	2a58      	cmp	r2, #88	; 0x58
 800b92a:	d170      	bne.n	800ba0e <_strtod_l+0x12e>
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	ab16      	add	r3, sp, #88	; 0x58
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4a8e      	ldr	r2, [pc, #568]	; (800bb70 <_strtod_l+0x290>)
 800b938:	ab17      	add	r3, sp, #92	; 0x5c
 800b93a:	a915      	add	r1, sp, #84	; 0x54
 800b93c:	4620      	mov	r0, r4
 800b93e:	f001 fe9b 	bl	800d678 <__gethex>
 800b942:	f010 070f 	ands.w	r7, r0, #15
 800b946:	4605      	mov	r5, r0
 800b948:	d005      	beq.n	800b956 <_strtod_l+0x76>
 800b94a:	2f06      	cmp	r7, #6
 800b94c:	d12a      	bne.n	800b9a4 <_strtod_l+0xc4>
 800b94e:	3601      	adds	r6, #1
 800b950:	2300      	movs	r3, #0
 800b952:	9615      	str	r6, [sp, #84]	; 0x54
 800b954:	930a      	str	r3, [sp, #40]	; 0x28
 800b956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f040 857f 	bne.w	800c45c <_strtod_l+0xb7c>
 800b95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b960:	b1db      	cbz	r3, 800b99a <_strtod_l+0xba>
 800b962:	4642      	mov	r2, r8
 800b964:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b968:	ec43 2b10 	vmov	d0, r2, r3
 800b96c:	b01b      	add	sp, #108	; 0x6c
 800b96e:	ecbd 8b02 	vpop	{d8}
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	2920      	cmp	r1, #32
 800b978:	d1cc      	bne.n	800b914 <_strtod_l+0x34>
 800b97a:	3201      	adds	r2, #1
 800b97c:	e7bf      	b.n	800b8fe <_strtod_l+0x1e>
 800b97e:	292d      	cmp	r1, #45	; 0x2d
 800b980:	d1c8      	bne.n	800b914 <_strtod_l+0x34>
 800b982:	2101      	movs	r1, #1
 800b984:	910a      	str	r1, [sp, #40]	; 0x28
 800b986:	1c51      	adds	r1, r2, #1
 800b988:	9115      	str	r1, [sp, #84]	; 0x54
 800b98a:	7852      	ldrb	r2, [r2, #1]
 800b98c:	2a00      	cmp	r2, #0
 800b98e:	d1c3      	bne.n	800b918 <_strtod_l+0x38>
 800b990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b992:	9515      	str	r5, [sp, #84]	; 0x54
 800b994:	2b00      	cmp	r3, #0
 800b996:	f040 855f 	bne.w	800c458 <_strtod_l+0xb78>
 800b99a:	4642      	mov	r2, r8
 800b99c:	464b      	mov	r3, r9
 800b99e:	e7e3      	b.n	800b968 <_strtod_l+0x88>
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	e7ef      	b.n	800b984 <_strtod_l+0xa4>
 800b9a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b9a6:	b13a      	cbz	r2, 800b9b8 <_strtod_l+0xd8>
 800b9a8:	2135      	movs	r1, #53	; 0x35
 800b9aa:	a818      	add	r0, sp, #96	; 0x60
 800b9ac:	f7ff ff37 	bl	800b81e <__copybits>
 800b9b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff fb0a 	bl	800afcc <_Bfree>
 800b9b8:	3f01      	subs	r7, #1
 800b9ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b9bc:	2f04      	cmp	r7, #4
 800b9be:	d806      	bhi.n	800b9ce <_strtod_l+0xee>
 800b9c0:	e8df f007 	tbb	[pc, r7]
 800b9c4:	201d0314 	.word	0x201d0314
 800b9c8:	14          	.byte	0x14
 800b9c9:	00          	.byte	0x00
 800b9ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b9ce:	05e9      	lsls	r1, r5, #23
 800b9d0:	bf48      	it	mi
 800b9d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b9d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9da:	0d1b      	lsrs	r3, r3, #20
 800b9dc:	051b      	lsls	r3, r3, #20
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1b9      	bne.n	800b956 <_strtod_l+0x76>
 800b9e2:	f7fe faf5 	bl	8009fd0 <__errno>
 800b9e6:	2322      	movs	r3, #34	; 0x22
 800b9e8:	6003      	str	r3, [r0, #0]
 800b9ea:	e7b4      	b.n	800b956 <_strtod_l+0x76>
 800b9ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b9f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b9f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b9f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b9fc:	e7e7      	b.n	800b9ce <_strtod_l+0xee>
 800b9fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bb78 <_strtod_l+0x298>
 800ba02:	e7e4      	b.n	800b9ce <_strtod_l+0xee>
 800ba04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ba08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ba0c:	e7df      	b.n	800b9ce <_strtod_l+0xee>
 800ba0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	9215      	str	r2, [sp, #84]	; 0x54
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	2b30      	cmp	r3, #48	; 0x30
 800ba18:	d0f9      	beq.n	800ba0e <_strtod_l+0x12e>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d09b      	beq.n	800b956 <_strtod_l+0x76>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f04f 0a00 	mov.w	sl, #0
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ba2e:	46d3      	mov	fp, sl
 800ba30:	220a      	movs	r2, #10
 800ba32:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ba34:	7806      	ldrb	r6, [r0, #0]
 800ba36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba3a:	b2d9      	uxtb	r1, r3
 800ba3c:	2909      	cmp	r1, #9
 800ba3e:	d926      	bls.n	800ba8e <_strtod_l+0x1ae>
 800ba40:	494c      	ldr	r1, [pc, #304]	; (800bb74 <_strtod_l+0x294>)
 800ba42:	2201      	movs	r2, #1
 800ba44:	f001 fd52 	bl	800d4ec <strncmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d030      	beq.n	800baae <_strtod_l+0x1ce>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	4632      	mov	r2, r6
 800ba50:	9005      	str	r0, [sp, #20]
 800ba52:	465e      	mov	r6, fp
 800ba54:	4603      	mov	r3, r0
 800ba56:	2a65      	cmp	r2, #101	; 0x65
 800ba58:	d001      	beq.n	800ba5e <_strtod_l+0x17e>
 800ba5a:	2a45      	cmp	r2, #69	; 0x45
 800ba5c:	d113      	bne.n	800ba86 <_strtod_l+0x1a6>
 800ba5e:	b91e      	cbnz	r6, 800ba68 <_strtod_l+0x188>
 800ba60:	9a04      	ldr	r2, [sp, #16]
 800ba62:	4302      	orrs	r2, r0
 800ba64:	d094      	beq.n	800b990 <_strtod_l+0xb0>
 800ba66:	2600      	movs	r6, #0
 800ba68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ba6a:	1c6a      	adds	r2, r5, #1
 800ba6c:	9215      	str	r2, [sp, #84]	; 0x54
 800ba6e:	786a      	ldrb	r2, [r5, #1]
 800ba70:	2a2b      	cmp	r2, #43	; 0x2b
 800ba72:	d074      	beq.n	800bb5e <_strtod_l+0x27e>
 800ba74:	2a2d      	cmp	r2, #45	; 0x2d
 800ba76:	d078      	beq.n	800bb6a <_strtod_l+0x28a>
 800ba78:	f04f 0c00 	mov.w	ip, #0
 800ba7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ba80:	2909      	cmp	r1, #9
 800ba82:	d97f      	bls.n	800bb84 <_strtod_l+0x2a4>
 800ba84:	9515      	str	r5, [sp, #84]	; 0x54
 800ba86:	2700      	movs	r7, #0
 800ba88:	e09e      	b.n	800bbc8 <_strtod_l+0x2e8>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e7c8      	b.n	800ba20 <_strtod_l+0x140>
 800ba8e:	f1bb 0f08 	cmp.w	fp, #8
 800ba92:	bfd8      	it	le
 800ba94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ba96:	f100 0001 	add.w	r0, r0, #1
 800ba9a:	bfda      	itte	le
 800ba9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800baa0:	9309      	strle	r3, [sp, #36]	; 0x24
 800baa2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800baa6:	f10b 0b01 	add.w	fp, fp, #1
 800baaa:	9015      	str	r0, [sp, #84]	; 0x54
 800baac:	e7c1      	b.n	800ba32 <_strtod_l+0x152>
 800baae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	9215      	str	r2, [sp, #84]	; 0x54
 800bab4:	785a      	ldrb	r2, [r3, #1]
 800bab6:	f1bb 0f00 	cmp.w	fp, #0
 800baba:	d037      	beq.n	800bb2c <_strtod_l+0x24c>
 800babc:	9005      	str	r0, [sp, #20]
 800babe:	465e      	mov	r6, fp
 800bac0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bac4:	2b09      	cmp	r3, #9
 800bac6:	d912      	bls.n	800baee <_strtod_l+0x20e>
 800bac8:	2301      	movs	r3, #1
 800baca:	e7c4      	b.n	800ba56 <_strtod_l+0x176>
 800bacc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	9215      	str	r2, [sp, #84]	; 0x54
 800bad2:	785a      	ldrb	r2, [r3, #1]
 800bad4:	3001      	adds	r0, #1
 800bad6:	2a30      	cmp	r2, #48	; 0x30
 800bad8:	d0f8      	beq.n	800bacc <_strtod_l+0x1ec>
 800bada:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bade:	2b08      	cmp	r3, #8
 800bae0:	f200 84c1 	bhi.w	800c466 <_strtod_l+0xb86>
 800bae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bae6:	9005      	str	r0, [sp, #20]
 800bae8:	2000      	movs	r0, #0
 800baea:	930b      	str	r3, [sp, #44]	; 0x2c
 800baec:	4606      	mov	r6, r0
 800baee:	3a30      	subs	r2, #48	; 0x30
 800baf0:	f100 0301 	add.w	r3, r0, #1
 800baf4:	d014      	beq.n	800bb20 <_strtod_l+0x240>
 800baf6:	9905      	ldr	r1, [sp, #20]
 800baf8:	4419      	add	r1, r3
 800bafa:	9105      	str	r1, [sp, #20]
 800bafc:	4633      	mov	r3, r6
 800bafe:	eb00 0c06 	add.w	ip, r0, r6
 800bb02:	210a      	movs	r1, #10
 800bb04:	4563      	cmp	r3, ip
 800bb06:	d113      	bne.n	800bb30 <_strtod_l+0x250>
 800bb08:	1833      	adds	r3, r6, r0
 800bb0a:	2b08      	cmp	r3, #8
 800bb0c:	f106 0601 	add.w	r6, r6, #1
 800bb10:	4406      	add	r6, r0
 800bb12:	dc1a      	bgt.n	800bb4a <_strtod_l+0x26a>
 800bb14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb16:	230a      	movs	r3, #10
 800bb18:	fb03 2301 	mla	r3, r3, r1, r2
 800bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb22:	1c51      	adds	r1, r2, #1
 800bb24:	9115      	str	r1, [sp, #84]	; 0x54
 800bb26:	7852      	ldrb	r2, [r2, #1]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	e7c9      	b.n	800bac0 <_strtod_l+0x1e0>
 800bb2c:	4658      	mov	r0, fp
 800bb2e:	e7d2      	b.n	800bad6 <_strtod_l+0x1f6>
 800bb30:	2b08      	cmp	r3, #8
 800bb32:	f103 0301 	add.w	r3, r3, #1
 800bb36:	dc03      	bgt.n	800bb40 <_strtod_l+0x260>
 800bb38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb3a:	434f      	muls	r7, r1
 800bb3c:	9709      	str	r7, [sp, #36]	; 0x24
 800bb3e:	e7e1      	b.n	800bb04 <_strtod_l+0x224>
 800bb40:	2b10      	cmp	r3, #16
 800bb42:	bfd8      	it	le
 800bb44:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bb48:	e7dc      	b.n	800bb04 <_strtod_l+0x224>
 800bb4a:	2e10      	cmp	r6, #16
 800bb4c:	bfdc      	itt	le
 800bb4e:	230a      	movle	r3, #10
 800bb50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bb54:	e7e3      	b.n	800bb1e <_strtod_l+0x23e>
 800bb56:	2300      	movs	r3, #0
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e780      	b.n	800ba60 <_strtod_l+0x180>
 800bb5e:	f04f 0c00 	mov.w	ip, #0
 800bb62:	1caa      	adds	r2, r5, #2
 800bb64:	9215      	str	r2, [sp, #84]	; 0x54
 800bb66:	78aa      	ldrb	r2, [r5, #2]
 800bb68:	e788      	b.n	800ba7c <_strtod_l+0x19c>
 800bb6a:	f04f 0c01 	mov.w	ip, #1
 800bb6e:	e7f8      	b.n	800bb62 <_strtod_l+0x282>
 800bb70:	0800f4b0 	.word	0x0800f4b0
 800bb74:	0800f4ac 	.word	0x0800f4ac
 800bb78:	7ff00000 	.word	0x7ff00000
 800bb7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb7e:	1c51      	adds	r1, r2, #1
 800bb80:	9115      	str	r1, [sp, #84]	; 0x54
 800bb82:	7852      	ldrb	r2, [r2, #1]
 800bb84:	2a30      	cmp	r2, #48	; 0x30
 800bb86:	d0f9      	beq.n	800bb7c <_strtod_l+0x29c>
 800bb88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bb8c:	2908      	cmp	r1, #8
 800bb8e:	f63f af7a 	bhi.w	800ba86 <_strtod_l+0x1a6>
 800bb92:	3a30      	subs	r2, #48	; 0x30
 800bb94:	9208      	str	r2, [sp, #32]
 800bb96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb98:	920c      	str	r2, [sp, #48]	; 0x30
 800bb9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb9c:	1c57      	adds	r7, r2, #1
 800bb9e:	9715      	str	r7, [sp, #84]	; 0x54
 800bba0:	7852      	ldrb	r2, [r2, #1]
 800bba2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bba6:	f1be 0f09 	cmp.w	lr, #9
 800bbaa:	d938      	bls.n	800bc1e <_strtod_l+0x33e>
 800bbac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbae:	1a7f      	subs	r7, r7, r1
 800bbb0:	2f08      	cmp	r7, #8
 800bbb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bbb6:	dc03      	bgt.n	800bbc0 <_strtod_l+0x2e0>
 800bbb8:	9908      	ldr	r1, [sp, #32]
 800bbba:	428f      	cmp	r7, r1
 800bbbc:	bfa8      	it	ge
 800bbbe:	460f      	movge	r7, r1
 800bbc0:	f1bc 0f00 	cmp.w	ip, #0
 800bbc4:	d000      	beq.n	800bbc8 <_strtod_l+0x2e8>
 800bbc6:	427f      	negs	r7, r7
 800bbc8:	2e00      	cmp	r6, #0
 800bbca:	d14f      	bne.n	800bc6c <_strtod_l+0x38c>
 800bbcc:	9904      	ldr	r1, [sp, #16]
 800bbce:	4301      	orrs	r1, r0
 800bbd0:	f47f aec1 	bne.w	800b956 <_strtod_l+0x76>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f47f aedb 	bne.w	800b990 <_strtod_l+0xb0>
 800bbda:	2a69      	cmp	r2, #105	; 0x69
 800bbdc:	d029      	beq.n	800bc32 <_strtod_l+0x352>
 800bbde:	dc26      	bgt.n	800bc2e <_strtod_l+0x34e>
 800bbe0:	2a49      	cmp	r2, #73	; 0x49
 800bbe2:	d026      	beq.n	800bc32 <_strtod_l+0x352>
 800bbe4:	2a4e      	cmp	r2, #78	; 0x4e
 800bbe6:	f47f aed3 	bne.w	800b990 <_strtod_l+0xb0>
 800bbea:	499b      	ldr	r1, [pc, #620]	; (800be58 <_strtod_l+0x578>)
 800bbec:	a815      	add	r0, sp, #84	; 0x54
 800bbee:	f001 ff83 	bl	800daf8 <__match>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	f43f aecc 	beq.w	800b990 <_strtod_l+0xb0>
 800bbf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b28      	cmp	r3, #40	; 0x28
 800bbfe:	d12f      	bne.n	800bc60 <_strtod_l+0x380>
 800bc00:	4996      	ldr	r1, [pc, #600]	; (800be5c <_strtod_l+0x57c>)
 800bc02:	aa18      	add	r2, sp, #96	; 0x60
 800bc04:	a815      	add	r0, sp, #84	; 0x54
 800bc06:	f001 ff8b 	bl	800db20 <__hexnan>
 800bc0a:	2805      	cmp	r0, #5
 800bc0c:	d128      	bne.n	800bc60 <_strtod_l+0x380>
 800bc0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bc18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bc1c:	e69b      	b.n	800b956 <_strtod_l+0x76>
 800bc1e:	9f08      	ldr	r7, [sp, #32]
 800bc20:	210a      	movs	r1, #10
 800bc22:	fb01 2107 	mla	r1, r1, r7, r2
 800bc26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc2a:	9208      	str	r2, [sp, #32]
 800bc2c:	e7b5      	b.n	800bb9a <_strtod_l+0x2ba>
 800bc2e:	2a6e      	cmp	r2, #110	; 0x6e
 800bc30:	e7d9      	b.n	800bbe6 <_strtod_l+0x306>
 800bc32:	498b      	ldr	r1, [pc, #556]	; (800be60 <_strtod_l+0x580>)
 800bc34:	a815      	add	r0, sp, #84	; 0x54
 800bc36:	f001 ff5f 	bl	800daf8 <__match>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	f43f aea8 	beq.w	800b990 <_strtod_l+0xb0>
 800bc40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc42:	4988      	ldr	r1, [pc, #544]	; (800be64 <_strtod_l+0x584>)
 800bc44:	3b01      	subs	r3, #1
 800bc46:	a815      	add	r0, sp, #84	; 0x54
 800bc48:	9315      	str	r3, [sp, #84]	; 0x54
 800bc4a:	f001 ff55 	bl	800daf8 <__match>
 800bc4e:	b910      	cbnz	r0, 800bc56 <_strtod_l+0x376>
 800bc50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc52:	3301      	adds	r3, #1
 800bc54:	9315      	str	r3, [sp, #84]	; 0x54
 800bc56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800be74 <_strtod_l+0x594>
 800bc5a:	f04f 0800 	mov.w	r8, #0
 800bc5e:	e67a      	b.n	800b956 <_strtod_l+0x76>
 800bc60:	4881      	ldr	r0, [pc, #516]	; (800be68 <_strtod_l+0x588>)
 800bc62:	f001 fc65 	bl	800d530 <nan>
 800bc66:	ec59 8b10 	vmov	r8, r9, d0
 800bc6a:	e674      	b.n	800b956 <_strtod_l+0x76>
 800bc6c:	9b05      	ldr	r3, [sp, #20]
 800bc6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc70:	1afb      	subs	r3, r7, r3
 800bc72:	f1bb 0f00 	cmp.w	fp, #0
 800bc76:	bf08      	it	eq
 800bc78:	46b3      	moveq	fp, r6
 800bc7a:	2e10      	cmp	r6, #16
 800bc7c:	9308      	str	r3, [sp, #32]
 800bc7e:	4635      	mov	r5, r6
 800bc80:	bfa8      	it	ge
 800bc82:	2510      	movge	r5, #16
 800bc84:	f7f4 fc46 	bl	8000514 <__aeabi_ui2d>
 800bc88:	2e09      	cmp	r6, #9
 800bc8a:	4680      	mov	r8, r0
 800bc8c:	4689      	mov	r9, r1
 800bc8e:	dd13      	ble.n	800bcb8 <_strtod_l+0x3d8>
 800bc90:	4b76      	ldr	r3, [pc, #472]	; (800be6c <_strtod_l+0x58c>)
 800bc92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bc9a:	f7f4 fcb5 	bl	8000608 <__aeabi_dmul>
 800bc9e:	4680      	mov	r8, r0
 800bca0:	4650      	mov	r0, sl
 800bca2:	4689      	mov	r9, r1
 800bca4:	f7f4 fc36 	bl	8000514 <__aeabi_ui2d>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4640      	mov	r0, r8
 800bcae:	4649      	mov	r1, r9
 800bcb0:	f7f4 faf4 	bl	800029c <__adddf3>
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4689      	mov	r9, r1
 800bcb8:	2e0f      	cmp	r6, #15
 800bcba:	dc38      	bgt.n	800bd2e <_strtod_l+0x44e>
 800bcbc:	9b08      	ldr	r3, [sp, #32]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f43f ae49 	beq.w	800b956 <_strtod_l+0x76>
 800bcc4:	dd24      	ble.n	800bd10 <_strtod_l+0x430>
 800bcc6:	2b16      	cmp	r3, #22
 800bcc8:	dc0b      	bgt.n	800bce2 <_strtod_l+0x402>
 800bcca:	4968      	ldr	r1, [pc, #416]	; (800be6c <_strtod_l+0x58c>)
 800bccc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd4:	4642      	mov	r2, r8
 800bcd6:	464b      	mov	r3, r9
 800bcd8:	f7f4 fc96 	bl	8000608 <__aeabi_dmul>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e639      	b.n	800b956 <_strtod_l+0x76>
 800bce2:	9a08      	ldr	r2, [sp, #32]
 800bce4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bce8:	4293      	cmp	r3, r2
 800bcea:	db20      	blt.n	800bd2e <_strtod_l+0x44e>
 800bcec:	4c5f      	ldr	r4, [pc, #380]	; (800be6c <_strtod_l+0x58c>)
 800bcee:	f1c6 060f 	rsb	r6, r6, #15
 800bcf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bcf6:	4642      	mov	r2, r8
 800bcf8:	464b      	mov	r3, r9
 800bcfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcfe:	f7f4 fc83 	bl	8000608 <__aeabi_dmul>
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	1b9e      	subs	r6, r3, r6
 800bd06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bd0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd0e:	e7e3      	b.n	800bcd8 <_strtod_l+0x3f8>
 800bd10:	9b08      	ldr	r3, [sp, #32]
 800bd12:	3316      	adds	r3, #22
 800bd14:	db0b      	blt.n	800bd2e <_strtod_l+0x44e>
 800bd16:	9b05      	ldr	r3, [sp, #20]
 800bd18:	1bdf      	subs	r7, r3, r7
 800bd1a:	4b54      	ldr	r3, [pc, #336]	; (800be6c <_strtod_l+0x58c>)
 800bd1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd24:	4640      	mov	r0, r8
 800bd26:	4649      	mov	r1, r9
 800bd28:	f7f4 fd98 	bl	800085c <__aeabi_ddiv>
 800bd2c:	e7d6      	b.n	800bcdc <_strtod_l+0x3fc>
 800bd2e:	9b08      	ldr	r3, [sp, #32]
 800bd30:	1b75      	subs	r5, r6, r5
 800bd32:	441d      	add	r5, r3
 800bd34:	2d00      	cmp	r5, #0
 800bd36:	dd70      	ble.n	800be1a <_strtod_l+0x53a>
 800bd38:	f015 030f 	ands.w	r3, r5, #15
 800bd3c:	d00a      	beq.n	800bd54 <_strtod_l+0x474>
 800bd3e:	494b      	ldr	r1, [pc, #300]	; (800be6c <_strtod_l+0x58c>)
 800bd40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	4680      	mov	r8, r0
 800bd52:	4689      	mov	r9, r1
 800bd54:	f035 050f 	bics.w	r5, r5, #15
 800bd58:	d04d      	beq.n	800bdf6 <_strtod_l+0x516>
 800bd5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bd5e:	dd22      	ble.n	800bda6 <_strtod_l+0x4c6>
 800bd60:	2500      	movs	r5, #0
 800bd62:	46ab      	mov	fp, r5
 800bd64:	9509      	str	r5, [sp, #36]	; 0x24
 800bd66:	9505      	str	r5, [sp, #20]
 800bd68:	2322      	movs	r3, #34	; 0x22
 800bd6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800be74 <_strtod_l+0x594>
 800bd6e:	6023      	str	r3, [r4, #0]
 800bd70:	f04f 0800 	mov.w	r8, #0
 800bd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f43f aded 	beq.w	800b956 <_strtod_l+0x76>
 800bd7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f7ff f924 	bl	800afcc <_Bfree>
 800bd84:	9905      	ldr	r1, [sp, #20]
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7ff f920 	bl	800afcc <_Bfree>
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f7ff f91c 	bl	800afcc <_Bfree>
 800bd94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff f918 	bl	800afcc <_Bfree>
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7ff f914 	bl	800afcc <_Bfree>
 800bda4:	e5d7      	b.n	800b956 <_strtod_l+0x76>
 800bda6:	4b32      	ldr	r3, [pc, #200]	; (800be70 <_strtod_l+0x590>)
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	112d      	asrs	r5, r5, #4
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	469a      	mov	sl, r3
 800bdb4:	2d01      	cmp	r5, #1
 800bdb6:	dc21      	bgt.n	800bdfc <_strtod_l+0x51c>
 800bdb8:	b10b      	cbz	r3, 800bdbe <_strtod_l+0x4de>
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4689      	mov	r9, r1
 800bdbe:	492c      	ldr	r1, [pc, #176]	; (800be70 <_strtod_l+0x590>)
 800bdc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bdc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bdc8:	4642      	mov	r2, r8
 800bdca:	464b      	mov	r3, r9
 800bdcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd0:	f7f4 fc1a 	bl	8000608 <__aeabi_dmul>
 800bdd4:	4b27      	ldr	r3, [pc, #156]	; (800be74 <_strtod_l+0x594>)
 800bdd6:	460a      	mov	r2, r1
 800bdd8:	400b      	ands	r3, r1
 800bdda:	4927      	ldr	r1, [pc, #156]	; (800be78 <_strtod_l+0x598>)
 800bddc:	428b      	cmp	r3, r1
 800bdde:	4680      	mov	r8, r0
 800bde0:	d8be      	bhi.n	800bd60 <_strtod_l+0x480>
 800bde2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bde6:	428b      	cmp	r3, r1
 800bde8:	bf86      	itte	hi
 800bdea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800be7c <_strtod_l+0x59c>
 800bdee:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800bdf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	e07b      	b.n	800bef4 <_strtod_l+0x614>
 800bdfc:	07ea      	lsls	r2, r5, #31
 800bdfe:	d505      	bpl.n	800be0c <_strtod_l+0x52c>
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fbff 	bl	8000608 <__aeabi_dmul>
 800be0a:	2301      	movs	r3, #1
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	3208      	adds	r2, #8
 800be10:	f10a 0a01 	add.w	sl, sl, #1
 800be14:	106d      	asrs	r5, r5, #1
 800be16:	9204      	str	r2, [sp, #16]
 800be18:	e7cc      	b.n	800bdb4 <_strtod_l+0x4d4>
 800be1a:	d0ec      	beq.n	800bdf6 <_strtod_l+0x516>
 800be1c:	426d      	negs	r5, r5
 800be1e:	f015 020f 	ands.w	r2, r5, #15
 800be22:	d00a      	beq.n	800be3a <_strtod_l+0x55a>
 800be24:	4b11      	ldr	r3, [pc, #68]	; (800be6c <_strtod_l+0x58c>)
 800be26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be2a:	4640      	mov	r0, r8
 800be2c:	4649      	mov	r1, r9
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fd13 	bl	800085c <__aeabi_ddiv>
 800be36:	4680      	mov	r8, r0
 800be38:	4689      	mov	r9, r1
 800be3a:	112d      	asrs	r5, r5, #4
 800be3c:	d0db      	beq.n	800bdf6 <_strtod_l+0x516>
 800be3e:	2d1f      	cmp	r5, #31
 800be40:	dd1e      	ble.n	800be80 <_strtod_l+0x5a0>
 800be42:	2500      	movs	r5, #0
 800be44:	46ab      	mov	fp, r5
 800be46:	9509      	str	r5, [sp, #36]	; 0x24
 800be48:	9505      	str	r5, [sp, #20]
 800be4a:	2322      	movs	r3, #34	; 0x22
 800be4c:	f04f 0800 	mov.w	r8, #0
 800be50:	f04f 0900 	mov.w	r9, #0
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	e78d      	b.n	800bd74 <_strtod_l+0x494>
 800be58:	0800f299 	.word	0x0800f299
 800be5c:	0800f4c4 	.word	0x0800f4c4
 800be60:	0800f291 	.word	0x0800f291
 800be64:	0800f2c6 	.word	0x0800f2c6
 800be68:	0800f670 	.word	0x0800f670
 800be6c:	0800f3d8 	.word	0x0800f3d8
 800be70:	0800f3b0 	.word	0x0800f3b0
 800be74:	7ff00000 	.word	0x7ff00000
 800be78:	7ca00000 	.word	0x7ca00000
 800be7c:	7fefffff 	.word	0x7fefffff
 800be80:	f015 0310 	ands.w	r3, r5, #16
 800be84:	bf18      	it	ne
 800be86:	236a      	movne	r3, #106	; 0x6a
 800be88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c22c <_strtod_l+0x94c>
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	4640      	mov	r0, r8
 800be90:	4649      	mov	r1, r9
 800be92:	2300      	movs	r3, #0
 800be94:	07ea      	lsls	r2, r5, #31
 800be96:	d504      	bpl.n	800bea2 <_strtod_l+0x5c2>
 800be98:	e9da 2300 	ldrd	r2, r3, [sl]
 800be9c:	f7f4 fbb4 	bl	8000608 <__aeabi_dmul>
 800bea0:	2301      	movs	r3, #1
 800bea2:	106d      	asrs	r5, r5, #1
 800bea4:	f10a 0a08 	add.w	sl, sl, #8
 800bea8:	d1f4      	bne.n	800be94 <_strtod_l+0x5b4>
 800beaa:	b10b      	cbz	r3, 800beb0 <_strtod_l+0x5d0>
 800beac:	4680      	mov	r8, r0
 800beae:	4689      	mov	r9, r1
 800beb0:	9b04      	ldr	r3, [sp, #16]
 800beb2:	b1bb      	cbz	r3, 800bee4 <_strtod_l+0x604>
 800beb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800beb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	4649      	mov	r1, r9
 800bec0:	dd10      	ble.n	800bee4 <_strtod_l+0x604>
 800bec2:	2b1f      	cmp	r3, #31
 800bec4:	f340 811e 	ble.w	800c104 <_strtod_l+0x824>
 800bec8:	2b34      	cmp	r3, #52	; 0x34
 800beca:	bfde      	ittt	le
 800becc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bed0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bed4:	4093      	lslle	r3, r2
 800bed6:	f04f 0800 	mov.w	r8, #0
 800beda:	bfcc      	ite	gt
 800bedc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bee0:	ea03 0901 	andle.w	r9, r3, r1
 800bee4:	2200      	movs	r2, #0
 800bee6:	2300      	movs	r3, #0
 800bee8:	4640      	mov	r0, r8
 800beea:	4649      	mov	r1, r9
 800beec:	f7f4 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d1a6      	bne.n	800be42 <_strtod_l+0x562>
 800bef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800befa:	4633      	mov	r3, r6
 800befc:	465a      	mov	r2, fp
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff f8cc 	bl	800b09c <__s2b>
 800bf04:	9009      	str	r0, [sp, #36]	; 0x24
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f af2a 	beq.w	800bd60 <_strtod_l+0x480>
 800bf0c:	9a08      	ldr	r2, [sp, #32]
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	eba3 0307 	sub.w	r3, r3, r7
 800bf16:	bfa8      	it	ge
 800bf18:	2300      	movge	r3, #0
 800bf1a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf1c:	2500      	movs	r5, #0
 800bf1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf22:	9312      	str	r3, [sp, #72]	; 0x48
 800bf24:	46ab      	mov	fp, r5
 800bf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf28:	4620      	mov	r0, r4
 800bf2a:	6859      	ldr	r1, [r3, #4]
 800bf2c:	f7ff f80e 	bl	800af4c <_Balloc>
 800bf30:	9005      	str	r0, [sp, #20]
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f43f af18 	beq.w	800bd68 <_strtod_l+0x488>
 800bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3a:	691a      	ldr	r2, [r3, #16]
 800bf3c:	3202      	adds	r2, #2
 800bf3e:	f103 010c 	add.w	r1, r3, #12
 800bf42:	0092      	lsls	r2, r2, #2
 800bf44:	300c      	adds	r0, #12
 800bf46:	f7fe f870 	bl	800a02a <memcpy>
 800bf4a:	ec49 8b10 	vmov	d0, r8, r9
 800bf4e:	aa18      	add	r2, sp, #96	; 0x60
 800bf50:	a917      	add	r1, sp, #92	; 0x5c
 800bf52:	4620      	mov	r0, r4
 800bf54:	f7ff fbd6 	bl	800b704 <__d2b>
 800bf58:	ec49 8b18 	vmov	d8, r8, r9
 800bf5c:	9016      	str	r0, [sp, #88]	; 0x58
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f43f af02 	beq.w	800bd68 <_strtod_l+0x488>
 800bf64:	2101      	movs	r1, #1
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff f930 	bl	800b1cc <__i2b>
 800bf6c:	4683      	mov	fp, r0
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f43f aefa 	beq.w	800bd68 <_strtod_l+0x488>
 800bf74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf78:	2e00      	cmp	r6, #0
 800bf7a:	bfab      	itete	ge
 800bf7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bf7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bf80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bf82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bf86:	bfac      	ite	ge
 800bf88:	eb06 0a03 	addge.w	sl, r6, r3
 800bf8c:	1b9f      	sublt	r7, r3, r6
 800bf8e:	9b04      	ldr	r3, [sp, #16]
 800bf90:	1af6      	subs	r6, r6, r3
 800bf92:	4416      	add	r6, r2
 800bf94:	4ba0      	ldr	r3, [pc, #640]	; (800c218 <_strtod_l+0x938>)
 800bf96:	3e01      	subs	r6, #1
 800bf98:	429e      	cmp	r6, r3
 800bf9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf9e:	f280 80c4 	bge.w	800c12a <_strtod_l+0x84a>
 800bfa2:	1b9b      	subs	r3, r3, r6
 800bfa4:	2b1f      	cmp	r3, #31
 800bfa6:	eba2 0203 	sub.w	r2, r2, r3
 800bfaa:	f04f 0101 	mov.w	r1, #1
 800bfae:	f300 80b0 	bgt.w	800c112 <_strtod_l+0x832>
 800bfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb6:	930e      	str	r3, [sp, #56]	; 0x38
 800bfb8:	2300      	movs	r3, #0
 800bfba:	930d      	str	r3, [sp, #52]	; 0x34
 800bfbc:	eb0a 0602 	add.w	r6, sl, r2
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	45b2      	cmp	sl, r6
 800bfc4:	4417      	add	r7, r2
 800bfc6:	441f      	add	r7, r3
 800bfc8:	4653      	mov	r3, sl
 800bfca:	bfa8      	it	ge
 800bfcc:	4633      	movge	r3, r6
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	bfa8      	it	ge
 800bfd2:	463b      	movge	r3, r7
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bfc2      	ittt	gt
 800bfd8:	1af6      	subgt	r6, r6, r3
 800bfda:	1aff      	subgt	r7, r7, r3
 800bfdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bfe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dd17      	ble.n	800c016 <_strtod_l+0x736>
 800bfe6:	4659      	mov	r1, fp
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4620      	mov	r0, r4
 800bfec:	f7ff f9ae 	bl	800b34c <__pow5mult>
 800bff0:	4683      	mov	fp, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f43f aeb8 	beq.w	800bd68 <_strtod_l+0x488>
 800bff8:	4601      	mov	r1, r0
 800bffa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bffc:	4620      	mov	r0, r4
 800bffe:	f7ff f8fb 	bl	800b1f8 <__multiply>
 800c002:	900b      	str	r0, [sp, #44]	; 0x2c
 800c004:	2800      	cmp	r0, #0
 800c006:	f43f aeaf 	beq.w	800bd68 <_strtod_l+0x488>
 800c00a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c00c:	4620      	mov	r0, r4
 800c00e:	f7fe ffdd 	bl	800afcc <_Bfree>
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	9316      	str	r3, [sp, #88]	; 0x58
 800c016:	2e00      	cmp	r6, #0
 800c018:	f300 808c 	bgt.w	800c134 <_strtod_l+0x854>
 800c01c:	9b08      	ldr	r3, [sp, #32]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	dd08      	ble.n	800c034 <_strtod_l+0x754>
 800c022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c024:	9905      	ldr	r1, [sp, #20]
 800c026:	4620      	mov	r0, r4
 800c028:	f7ff f990 	bl	800b34c <__pow5mult>
 800c02c:	9005      	str	r0, [sp, #20]
 800c02e:	2800      	cmp	r0, #0
 800c030:	f43f ae9a 	beq.w	800bd68 <_strtod_l+0x488>
 800c034:	2f00      	cmp	r7, #0
 800c036:	dd08      	ble.n	800c04a <_strtod_l+0x76a>
 800c038:	9905      	ldr	r1, [sp, #20]
 800c03a:	463a      	mov	r2, r7
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff f9df 	bl	800b400 <__lshift>
 800c042:	9005      	str	r0, [sp, #20]
 800c044:	2800      	cmp	r0, #0
 800c046:	f43f ae8f 	beq.w	800bd68 <_strtod_l+0x488>
 800c04a:	f1ba 0f00 	cmp.w	sl, #0
 800c04e:	dd08      	ble.n	800c062 <_strtod_l+0x782>
 800c050:	4659      	mov	r1, fp
 800c052:	4652      	mov	r2, sl
 800c054:	4620      	mov	r0, r4
 800c056:	f7ff f9d3 	bl	800b400 <__lshift>
 800c05a:	4683      	mov	fp, r0
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f43f ae83 	beq.w	800bd68 <_strtod_l+0x488>
 800c062:	9a05      	ldr	r2, [sp, #20]
 800c064:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c066:	4620      	mov	r0, r4
 800c068:	f7ff fa52 	bl	800b510 <__mdiff>
 800c06c:	4605      	mov	r5, r0
 800c06e:	2800      	cmp	r0, #0
 800c070:	f43f ae7a 	beq.w	800bd68 <_strtod_l+0x488>
 800c074:	68c3      	ldr	r3, [r0, #12]
 800c076:	930b      	str	r3, [sp, #44]	; 0x2c
 800c078:	2300      	movs	r3, #0
 800c07a:	60c3      	str	r3, [r0, #12]
 800c07c:	4659      	mov	r1, fp
 800c07e:	f7ff fa2b 	bl	800b4d8 <__mcmp>
 800c082:	2800      	cmp	r0, #0
 800c084:	da60      	bge.n	800c148 <_strtod_l+0x868>
 800c086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c088:	ea53 0308 	orrs.w	r3, r3, r8
 800c08c:	f040 8084 	bne.w	800c198 <_strtod_l+0x8b8>
 800c090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c094:	2b00      	cmp	r3, #0
 800c096:	d17f      	bne.n	800c198 <_strtod_l+0x8b8>
 800c098:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c09c:	0d1b      	lsrs	r3, r3, #20
 800c09e:	051b      	lsls	r3, r3, #20
 800c0a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c0a4:	d978      	bls.n	800c198 <_strtod_l+0x8b8>
 800c0a6:	696b      	ldr	r3, [r5, #20]
 800c0a8:	b913      	cbnz	r3, 800c0b0 <_strtod_l+0x7d0>
 800c0aa:	692b      	ldr	r3, [r5, #16]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dd73      	ble.n	800c198 <_strtod_l+0x8b8>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f7ff f9a3 	bl	800b400 <__lshift>
 800c0ba:	4659      	mov	r1, fp
 800c0bc:	4605      	mov	r5, r0
 800c0be:	f7ff fa0b 	bl	800b4d8 <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	dd68      	ble.n	800c198 <_strtod_l+0x8b8>
 800c0c6:	9904      	ldr	r1, [sp, #16]
 800c0c8:	4a54      	ldr	r2, [pc, #336]	; (800c21c <_strtod_l+0x93c>)
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	f000 8084 	beq.w	800c1da <_strtod_l+0x8fa>
 800c0d2:	ea02 0109 	and.w	r1, r2, r9
 800c0d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c0da:	dc7e      	bgt.n	800c1da <_strtod_l+0x8fa>
 800c0dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c0e0:	f77f aeb3 	ble.w	800be4a <_strtod_l+0x56a>
 800c0e4:	4b4e      	ldr	r3, [pc, #312]	; (800c220 <_strtod_l+0x940>)
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f7f4 fa8c 	bl	8000608 <__aeabi_dmul>
 800c0f0:	4b4a      	ldr	r3, [pc, #296]	; (800c21c <_strtod_l+0x93c>)
 800c0f2:	400b      	ands	r3, r1
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	4689      	mov	r9, r1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f47f ae3f 	bne.w	800bd7c <_strtod_l+0x49c>
 800c0fe:	2322      	movs	r3, #34	; 0x22
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	e63b      	b.n	800bd7c <_strtod_l+0x49c>
 800c104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c108:	fa02 f303 	lsl.w	r3, r2, r3
 800c10c:	ea03 0808 	and.w	r8, r3, r8
 800c110:	e6e8      	b.n	800bee4 <_strtod_l+0x604>
 800c112:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c116:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c11a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c11e:	36e2      	adds	r6, #226	; 0xe2
 800c120:	fa01 f306 	lsl.w	r3, r1, r6
 800c124:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c128:	e748      	b.n	800bfbc <_strtod_l+0x6dc>
 800c12a:	2100      	movs	r1, #0
 800c12c:	2301      	movs	r3, #1
 800c12e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c132:	e743      	b.n	800bfbc <_strtod_l+0x6dc>
 800c134:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c136:	4632      	mov	r2, r6
 800c138:	4620      	mov	r0, r4
 800c13a:	f7ff f961 	bl	800b400 <__lshift>
 800c13e:	9016      	str	r0, [sp, #88]	; 0x58
 800c140:	2800      	cmp	r0, #0
 800c142:	f47f af6b 	bne.w	800c01c <_strtod_l+0x73c>
 800c146:	e60f      	b.n	800bd68 <_strtod_l+0x488>
 800c148:	46ca      	mov	sl, r9
 800c14a:	d171      	bne.n	800c230 <_strtod_l+0x950>
 800c14c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c14e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c152:	b352      	cbz	r2, 800c1aa <_strtod_l+0x8ca>
 800c154:	4a33      	ldr	r2, [pc, #204]	; (800c224 <_strtod_l+0x944>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d12a      	bne.n	800c1b0 <_strtod_l+0x8d0>
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	4641      	mov	r1, r8
 800c15e:	b1fb      	cbz	r3, 800c1a0 <_strtod_l+0x8c0>
 800c160:	4b2e      	ldr	r3, [pc, #184]	; (800c21c <_strtod_l+0x93c>)
 800c162:	ea09 0303 	and.w	r3, r9, r3
 800c166:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16e:	d81a      	bhi.n	800c1a6 <_strtod_l+0x8c6>
 800c170:	0d1b      	lsrs	r3, r3, #20
 800c172:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c176:	fa02 f303 	lsl.w	r3, r2, r3
 800c17a:	4299      	cmp	r1, r3
 800c17c:	d118      	bne.n	800c1b0 <_strtod_l+0x8d0>
 800c17e:	4b2a      	ldr	r3, [pc, #168]	; (800c228 <_strtod_l+0x948>)
 800c180:	459a      	cmp	sl, r3
 800c182:	d102      	bne.n	800c18a <_strtod_l+0x8aa>
 800c184:	3101      	adds	r1, #1
 800c186:	f43f adef 	beq.w	800bd68 <_strtod_l+0x488>
 800c18a:	4b24      	ldr	r3, [pc, #144]	; (800c21c <_strtod_l+0x93c>)
 800c18c:	ea0a 0303 	and.w	r3, sl, r3
 800c190:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c194:	f04f 0800 	mov.w	r8, #0
 800c198:	9b04      	ldr	r3, [sp, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1a2      	bne.n	800c0e4 <_strtod_l+0x804>
 800c19e:	e5ed      	b.n	800bd7c <_strtod_l+0x49c>
 800c1a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1a4:	e7e9      	b.n	800c17a <_strtod_l+0x89a>
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	e7e7      	b.n	800c17a <_strtod_l+0x89a>
 800c1aa:	ea53 0308 	orrs.w	r3, r3, r8
 800c1ae:	d08a      	beq.n	800c0c6 <_strtod_l+0x7e6>
 800c1b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1b2:	b1e3      	cbz	r3, 800c1ee <_strtod_l+0x90e>
 800c1b4:	ea13 0f0a 	tst.w	r3, sl
 800c1b8:	d0ee      	beq.n	800c198 <_strtod_l+0x8b8>
 800c1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1bc:	9a04      	ldr	r2, [sp, #16]
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	b1c3      	cbz	r3, 800c1f6 <_strtod_l+0x916>
 800c1c4:	f7ff fb6f 	bl	800b8a6 <sulp>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	ec51 0b18 	vmov	r0, r1, d8
 800c1d0:	f7f4 f864 	bl	800029c <__adddf3>
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	e7de      	b.n	800c198 <_strtod_l+0x8b8>
 800c1da:	4013      	ands	r3, r2
 800c1dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c1e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c1e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c1e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c1ec:	e7d4      	b.n	800c198 <_strtod_l+0x8b8>
 800c1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f0:	ea13 0f08 	tst.w	r3, r8
 800c1f4:	e7e0      	b.n	800c1b8 <_strtod_l+0x8d8>
 800c1f6:	f7ff fb56 	bl	800b8a6 <sulp>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	ec51 0b18 	vmov	r0, r1, d8
 800c202:	f7f4 f849 	bl	8000298 <__aeabi_dsub>
 800c206:	2200      	movs	r2, #0
 800c208:	2300      	movs	r3, #0
 800c20a:	4680      	mov	r8, r0
 800c20c:	4689      	mov	r9, r1
 800c20e:	f7f4 fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 800c212:	2800      	cmp	r0, #0
 800c214:	d0c0      	beq.n	800c198 <_strtod_l+0x8b8>
 800c216:	e618      	b.n	800be4a <_strtod_l+0x56a>
 800c218:	fffffc02 	.word	0xfffffc02
 800c21c:	7ff00000 	.word	0x7ff00000
 800c220:	39500000 	.word	0x39500000
 800c224:	000fffff 	.word	0x000fffff
 800c228:	7fefffff 	.word	0x7fefffff
 800c22c:	0800f4d8 	.word	0x0800f4d8
 800c230:	4659      	mov	r1, fp
 800c232:	4628      	mov	r0, r5
 800c234:	f7ff fac0 	bl	800b7b8 <__ratio>
 800c238:	ec57 6b10 	vmov	r6, r7, d0
 800c23c:	ee10 0a10 	vmov	r0, s0
 800c240:	2200      	movs	r2, #0
 800c242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 fc5a 	bl	8000b00 <__aeabi_dcmple>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d071      	beq.n	800c334 <_strtod_l+0xa54>
 800c250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c252:	2b00      	cmp	r3, #0
 800c254:	d17c      	bne.n	800c350 <_strtod_l+0xa70>
 800c256:	f1b8 0f00 	cmp.w	r8, #0
 800c25a:	d15a      	bne.n	800c312 <_strtod_l+0xa32>
 800c25c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c260:	2b00      	cmp	r3, #0
 800c262:	d15d      	bne.n	800c320 <_strtod_l+0xa40>
 800c264:	4b90      	ldr	r3, [pc, #576]	; (800c4a8 <_strtod_l+0xbc8>)
 800c266:	2200      	movs	r2, #0
 800c268:	4630      	mov	r0, r6
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	d15c      	bne.n	800c32e <_strtod_l+0xa4e>
 800c274:	4630      	mov	r0, r6
 800c276:	4639      	mov	r1, r7
 800c278:	4b8c      	ldr	r3, [pc, #560]	; (800c4ac <_strtod_l+0xbcc>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	f7f4 f9c4 	bl	8000608 <__aeabi_dmul>
 800c280:	4606      	mov	r6, r0
 800c282:	460f      	mov	r7, r1
 800c284:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c288:	9606      	str	r6, [sp, #24]
 800c28a:	9307      	str	r3, [sp, #28]
 800c28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c294:	4b86      	ldr	r3, [pc, #536]	; (800c4b0 <_strtod_l+0xbd0>)
 800c296:	ea0a 0303 	and.w	r3, sl, r3
 800c29a:	930d      	str	r3, [sp, #52]	; 0x34
 800c29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c29e:	4b85      	ldr	r3, [pc, #532]	; (800c4b4 <_strtod_l+0xbd4>)
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	f040 8090 	bne.w	800c3c6 <_strtod_l+0xae6>
 800c2a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c2aa:	ec49 8b10 	vmov	d0, r8, r9
 800c2ae:	f7ff f9b9 	bl	800b624 <__ulp>
 800c2b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2b6:	ec51 0b10 	vmov	r0, r1, d0
 800c2ba:	f7f4 f9a5 	bl	8000608 <__aeabi_dmul>
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	f7f3 ffeb 	bl	800029c <__adddf3>
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4979      	ldr	r1, [pc, #484]	; (800c4b0 <_strtod_l+0xbd0>)
 800c2ca:	4a7b      	ldr	r2, [pc, #492]	; (800c4b8 <_strtod_l+0xbd8>)
 800c2cc:	4019      	ands	r1, r3
 800c2ce:	4291      	cmp	r1, r2
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	d944      	bls.n	800c35e <_strtod_l+0xa7e>
 800c2d4:	ee18 2a90 	vmov	r2, s17
 800c2d8:	4b78      	ldr	r3, [pc, #480]	; (800c4bc <_strtod_l+0xbdc>)
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d104      	bne.n	800c2e8 <_strtod_l+0xa08>
 800c2de:	ee18 3a10 	vmov	r3, s16
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	f43f ad40 	beq.w	800bd68 <_strtod_l+0x488>
 800c2e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c4bc <_strtod_l+0xbdc>
 800c2ec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c2f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f7fe fe6a 	bl	800afcc <_Bfree>
 800c2f8:	9905      	ldr	r1, [sp, #20]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f7fe fe66 	bl	800afcc <_Bfree>
 800c300:	4659      	mov	r1, fp
 800c302:	4620      	mov	r0, r4
 800c304:	f7fe fe62 	bl	800afcc <_Bfree>
 800c308:	4629      	mov	r1, r5
 800c30a:	4620      	mov	r0, r4
 800c30c:	f7fe fe5e 	bl	800afcc <_Bfree>
 800c310:	e609      	b.n	800bf26 <_strtod_l+0x646>
 800c312:	f1b8 0f01 	cmp.w	r8, #1
 800c316:	d103      	bne.n	800c320 <_strtod_l+0xa40>
 800c318:	f1b9 0f00 	cmp.w	r9, #0
 800c31c:	f43f ad95 	beq.w	800be4a <_strtod_l+0x56a>
 800c320:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c478 <_strtod_l+0xb98>
 800c324:	4f60      	ldr	r7, [pc, #384]	; (800c4a8 <_strtod_l+0xbc8>)
 800c326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c32a:	2600      	movs	r6, #0
 800c32c:	e7ae      	b.n	800c28c <_strtod_l+0x9ac>
 800c32e:	4f5f      	ldr	r7, [pc, #380]	; (800c4ac <_strtod_l+0xbcc>)
 800c330:	2600      	movs	r6, #0
 800c332:	e7a7      	b.n	800c284 <_strtod_l+0x9a4>
 800c334:	4b5d      	ldr	r3, [pc, #372]	; (800c4ac <_strtod_l+0xbcc>)
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	2200      	movs	r2, #0
 800c33c:	f7f4 f964 	bl	8000608 <__aeabi_dmul>
 800c340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	2b00      	cmp	r3, #0
 800c348:	d09c      	beq.n	800c284 <_strtod_l+0x9a4>
 800c34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c34e:	e79d      	b.n	800c28c <_strtod_l+0x9ac>
 800c350:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c480 <_strtod_l+0xba0>
 800c354:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c358:	ec57 6b17 	vmov	r6, r7, d7
 800c35c:	e796      	b.n	800c28c <_strtod_l+0x9ac>
 800c35e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	46ca      	mov	sl, r9
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1c2      	bne.n	800c2f0 <_strtod_l+0xa10>
 800c36a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c370:	0d1b      	lsrs	r3, r3, #20
 800c372:	051b      	lsls	r3, r3, #20
 800c374:	429a      	cmp	r2, r3
 800c376:	d1bb      	bne.n	800c2f0 <_strtod_l+0xa10>
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f4 fca4 	bl	8000cc8 <__aeabi_d2lz>
 800c380:	f7f4 f914 	bl	80005ac <__aeabi_l2d>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c396:	ea43 0308 	orr.w	r3, r3, r8
 800c39a:	4313      	orrs	r3, r2
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	d054      	beq.n	800c44c <_strtod_l+0xb6c>
 800c3a2:	a339      	add	r3, pc, #228	; (adr r3, 800c488 <_strtod_l+0xba8>)
 800c3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a8:	f7f4 fba0 	bl	8000aec <__aeabi_dcmplt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f47f ace5 	bne.w	800bd7c <_strtod_l+0x49c>
 800c3b2:	a337      	add	r3, pc, #220	; (adr r3, 800c490 <_strtod_l+0xbb0>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d095      	beq.n	800c2f0 <_strtod_l+0xa10>
 800c3c4:	e4da      	b.n	800bd7c <_strtod_l+0x49c>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	b333      	cbz	r3, 800c418 <_strtod_l+0xb38>
 800c3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c3d0:	d822      	bhi.n	800c418 <_strtod_l+0xb38>
 800c3d2:	a331      	add	r3, pc, #196	; (adr r3, 800c498 <_strtod_l+0xbb8>)
 800c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fb90 	bl	8000b00 <__aeabi_dcmple>
 800c3e0:	b1a0      	cbz	r0, 800c40c <_strtod_l+0xb2c>
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7f4 fbe7 	bl	8000bb8 <__aeabi_d2uiz>
 800c3ea:	2801      	cmp	r0, #1
 800c3ec:	bf38      	it	cc
 800c3ee:	2001      	movcc	r0, #1
 800c3f0:	f7f4 f890 	bl	8000514 <__aeabi_ui2d>
 800c3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	bb23      	cbnz	r3, 800c446 <_strtod_l+0xb66>
 800c3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c400:	9010      	str	r0, [sp, #64]	; 0x40
 800c402:	9311      	str	r3, [sp, #68]	; 0x44
 800c404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c40c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c40e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	930f      	str	r3, [sp, #60]	; 0x3c
 800c418:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c41c:	eeb0 0a48 	vmov.f32	s0, s16
 800c420:	eef0 0a68 	vmov.f32	s1, s17
 800c424:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c428:	f7ff f8fc 	bl	800b624 <__ulp>
 800c42c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c430:	ec53 2b10 	vmov	r2, r3, d0
 800c434:	f7f4 f8e8 	bl	8000608 <__aeabi_dmul>
 800c438:	ec53 2b18 	vmov	r2, r3, d8
 800c43c:	f7f3 ff2e 	bl	800029c <__adddf3>
 800c440:	4680      	mov	r8, r0
 800c442:	4689      	mov	r9, r1
 800c444:	e78d      	b.n	800c362 <_strtod_l+0xa82>
 800c446:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c44a:	e7db      	b.n	800c404 <_strtod_l+0xb24>
 800c44c:	a314      	add	r3, pc, #80	; (adr r3, 800c4a0 <_strtod_l+0xbc0>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f4 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800c456:	e7b3      	b.n	800c3c0 <_strtod_l+0xae0>
 800c458:	2300      	movs	r3, #0
 800c45a:	930a      	str	r3, [sp, #40]	; 0x28
 800c45c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c460:	6013      	str	r3, [r2, #0]
 800c462:	f7ff ba7c 	b.w	800b95e <_strtod_l+0x7e>
 800c466:	2a65      	cmp	r2, #101	; 0x65
 800c468:	f43f ab75 	beq.w	800bb56 <_strtod_l+0x276>
 800c46c:	2a45      	cmp	r2, #69	; 0x45
 800c46e:	f43f ab72 	beq.w	800bb56 <_strtod_l+0x276>
 800c472:	2301      	movs	r3, #1
 800c474:	f7ff bbaa 	b.w	800bbcc <_strtod_l+0x2ec>
 800c478:	00000000 	.word	0x00000000
 800c47c:	bff00000 	.word	0xbff00000
 800c480:	00000000 	.word	0x00000000
 800c484:	3ff00000 	.word	0x3ff00000
 800c488:	94a03595 	.word	0x94a03595
 800c48c:	3fdfffff 	.word	0x3fdfffff
 800c490:	35afe535 	.word	0x35afe535
 800c494:	3fe00000 	.word	0x3fe00000
 800c498:	ffc00000 	.word	0xffc00000
 800c49c:	41dfffff 	.word	0x41dfffff
 800c4a0:	94a03595 	.word	0x94a03595
 800c4a4:	3fcfffff 	.word	0x3fcfffff
 800c4a8:	3ff00000 	.word	0x3ff00000
 800c4ac:	3fe00000 	.word	0x3fe00000
 800c4b0:	7ff00000 	.word	0x7ff00000
 800c4b4:	7fe00000 	.word	0x7fe00000
 800c4b8:	7c9fffff 	.word	0x7c9fffff
 800c4bc:	7fefffff 	.word	0x7fefffff

0800c4c0 <_strtod_r>:
 800c4c0:	4b01      	ldr	r3, [pc, #4]	; (800c4c8 <_strtod_r+0x8>)
 800c4c2:	f7ff ba0d 	b.w	800b8e0 <_strtod_l>
 800c4c6:	bf00      	nop
 800c4c8:	200000ec 	.word	0x200000ec

0800c4cc <_strtol_l.constprop.0>:
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d2:	d001      	beq.n	800c4d8 <_strtol_l.constprop.0+0xc>
 800c4d4:	2b24      	cmp	r3, #36	; 0x24
 800c4d6:	d906      	bls.n	800c4e6 <_strtol_l.constprop.0+0x1a>
 800c4d8:	f7fd fd7a 	bl	8009fd0 <__errno>
 800c4dc:	2316      	movs	r3, #22
 800c4de:	6003      	str	r3, [r0, #0]
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c5cc <_strtol_l.constprop.0+0x100>
 800c4ea:	460d      	mov	r5, r1
 800c4ec:	462e      	mov	r6, r5
 800c4ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c4f6:	f017 0708 	ands.w	r7, r7, #8
 800c4fa:	d1f7      	bne.n	800c4ec <_strtol_l.constprop.0+0x20>
 800c4fc:	2c2d      	cmp	r4, #45	; 0x2d
 800c4fe:	d132      	bne.n	800c566 <_strtol_l.constprop.0+0x9a>
 800c500:	782c      	ldrb	r4, [r5, #0]
 800c502:	2701      	movs	r7, #1
 800c504:	1cb5      	adds	r5, r6, #2
 800c506:	2b00      	cmp	r3, #0
 800c508:	d05b      	beq.n	800c5c2 <_strtol_l.constprop.0+0xf6>
 800c50a:	2b10      	cmp	r3, #16
 800c50c:	d109      	bne.n	800c522 <_strtol_l.constprop.0+0x56>
 800c50e:	2c30      	cmp	r4, #48	; 0x30
 800c510:	d107      	bne.n	800c522 <_strtol_l.constprop.0+0x56>
 800c512:	782c      	ldrb	r4, [r5, #0]
 800c514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c518:	2c58      	cmp	r4, #88	; 0x58
 800c51a:	d14d      	bne.n	800c5b8 <_strtol_l.constprop.0+0xec>
 800c51c:	786c      	ldrb	r4, [r5, #1]
 800c51e:	2310      	movs	r3, #16
 800c520:	3502      	adds	r5, #2
 800c522:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c526:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c52a:	f04f 0e00 	mov.w	lr, #0
 800c52e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c532:	4676      	mov	r6, lr
 800c534:	fb03 8a19 	mls	sl, r3, r9, r8
 800c538:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c53c:	f1bc 0f09 	cmp.w	ip, #9
 800c540:	d816      	bhi.n	800c570 <_strtol_l.constprop.0+0xa4>
 800c542:	4664      	mov	r4, ip
 800c544:	42a3      	cmp	r3, r4
 800c546:	dd24      	ble.n	800c592 <_strtol_l.constprop.0+0xc6>
 800c548:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c54c:	d008      	beq.n	800c560 <_strtol_l.constprop.0+0x94>
 800c54e:	45b1      	cmp	r9, r6
 800c550:	d31c      	bcc.n	800c58c <_strtol_l.constprop.0+0xc0>
 800c552:	d101      	bne.n	800c558 <_strtol_l.constprop.0+0x8c>
 800c554:	45a2      	cmp	sl, r4
 800c556:	db19      	blt.n	800c58c <_strtol_l.constprop.0+0xc0>
 800c558:	fb06 4603 	mla	r6, r6, r3, r4
 800c55c:	f04f 0e01 	mov.w	lr, #1
 800c560:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c564:	e7e8      	b.n	800c538 <_strtol_l.constprop.0+0x6c>
 800c566:	2c2b      	cmp	r4, #43	; 0x2b
 800c568:	bf04      	itt	eq
 800c56a:	782c      	ldrbeq	r4, [r5, #0]
 800c56c:	1cb5      	addeq	r5, r6, #2
 800c56e:	e7ca      	b.n	800c506 <_strtol_l.constprop.0+0x3a>
 800c570:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c574:	f1bc 0f19 	cmp.w	ip, #25
 800c578:	d801      	bhi.n	800c57e <_strtol_l.constprop.0+0xb2>
 800c57a:	3c37      	subs	r4, #55	; 0x37
 800c57c:	e7e2      	b.n	800c544 <_strtol_l.constprop.0+0x78>
 800c57e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c582:	f1bc 0f19 	cmp.w	ip, #25
 800c586:	d804      	bhi.n	800c592 <_strtol_l.constprop.0+0xc6>
 800c588:	3c57      	subs	r4, #87	; 0x57
 800c58a:	e7db      	b.n	800c544 <_strtol_l.constprop.0+0x78>
 800c58c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c590:	e7e6      	b.n	800c560 <_strtol_l.constprop.0+0x94>
 800c592:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c596:	d105      	bne.n	800c5a4 <_strtol_l.constprop.0+0xd8>
 800c598:	2322      	movs	r3, #34	; 0x22
 800c59a:	6003      	str	r3, [r0, #0]
 800c59c:	4646      	mov	r6, r8
 800c59e:	b942      	cbnz	r2, 800c5b2 <_strtol_l.constprop.0+0xe6>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	e79e      	b.n	800c4e2 <_strtol_l.constprop.0+0x16>
 800c5a4:	b107      	cbz	r7, 800c5a8 <_strtol_l.constprop.0+0xdc>
 800c5a6:	4276      	negs	r6, r6
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	d0f9      	beq.n	800c5a0 <_strtol_l.constprop.0+0xd4>
 800c5ac:	f1be 0f00 	cmp.w	lr, #0
 800c5b0:	d000      	beq.n	800c5b4 <_strtol_l.constprop.0+0xe8>
 800c5b2:	1e69      	subs	r1, r5, #1
 800c5b4:	6011      	str	r1, [r2, #0]
 800c5b6:	e7f3      	b.n	800c5a0 <_strtol_l.constprop.0+0xd4>
 800c5b8:	2430      	movs	r4, #48	; 0x30
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1b1      	bne.n	800c522 <_strtol_l.constprop.0+0x56>
 800c5be:	2308      	movs	r3, #8
 800c5c0:	e7af      	b.n	800c522 <_strtol_l.constprop.0+0x56>
 800c5c2:	2c30      	cmp	r4, #48	; 0x30
 800c5c4:	d0a5      	beq.n	800c512 <_strtol_l.constprop.0+0x46>
 800c5c6:	230a      	movs	r3, #10
 800c5c8:	e7ab      	b.n	800c522 <_strtol_l.constprop.0+0x56>
 800c5ca:	bf00      	nop
 800c5cc:	0800f501 	.word	0x0800f501

0800c5d0 <_strtol_r>:
 800c5d0:	f7ff bf7c 	b.w	800c4cc <_strtol_l.constprop.0>

0800c5d4 <__ssputs_r>:
 800c5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d8:	688e      	ldr	r6, [r1, #8]
 800c5da:	461f      	mov	r7, r3
 800c5dc:	42be      	cmp	r6, r7
 800c5de:	680b      	ldr	r3, [r1, #0]
 800c5e0:	4682      	mov	sl, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	4690      	mov	r8, r2
 800c5e6:	d82c      	bhi.n	800c642 <__ssputs_r+0x6e>
 800c5e8:	898a      	ldrh	r2, [r1, #12]
 800c5ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5ee:	d026      	beq.n	800c63e <__ssputs_r+0x6a>
 800c5f0:	6965      	ldr	r5, [r4, #20]
 800c5f2:	6909      	ldr	r1, [r1, #16]
 800c5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f8:	eba3 0901 	sub.w	r9, r3, r1
 800c5fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c600:	1c7b      	adds	r3, r7, #1
 800c602:	444b      	add	r3, r9
 800c604:	106d      	asrs	r5, r5, #1
 800c606:	429d      	cmp	r5, r3
 800c608:	bf38      	it	cc
 800c60a:	461d      	movcc	r5, r3
 800c60c:	0553      	lsls	r3, r2, #21
 800c60e:	d527      	bpl.n	800c660 <__ssputs_r+0x8c>
 800c610:	4629      	mov	r1, r5
 800c612:	f7fe fc0f 	bl	800ae34 <_malloc_r>
 800c616:	4606      	mov	r6, r0
 800c618:	b360      	cbz	r0, 800c674 <__ssputs_r+0xa0>
 800c61a:	6921      	ldr	r1, [r4, #16]
 800c61c:	464a      	mov	r2, r9
 800c61e:	f7fd fd04 	bl	800a02a <memcpy>
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c62c:	81a3      	strh	r3, [r4, #12]
 800c62e:	6126      	str	r6, [r4, #16]
 800c630:	6165      	str	r5, [r4, #20]
 800c632:	444e      	add	r6, r9
 800c634:	eba5 0509 	sub.w	r5, r5, r9
 800c638:	6026      	str	r6, [r4, #0]
 800c63a:	60a5      	str	r5, [r4, #8]
 800c63c:	463e      	mov	r6, r7
 800c63e:	42be      	cmp	r6, r7
 800c640:	d900      	bls.n	800c644 <__ssputs_r+0x70>
 800c642:	463e      	mov	r6, r7
 800c644:	6820      	ldr	r0, [r4, #0]
 800c646:	4632      	mov	r2, r6
 800c648:	4641      	mov	r1, r8
 800c64a:	f000 ff35 	bl	800d4b8 <memmove>
 800c64e:	68a3      	ldr	r3, [r4, #8]
 800c650:	1b9b      	subs	r3, r3, r6
 800c652:	60a3      	str	r3, [r4, #8]
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	4433      	add	r3, r6
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	2000      	movs	r0, #0
 800c65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c660:	462a      	mov	r2, r5
 800c662:	f001 fb0a 	bl	800dc7a <_realloc_r>
 800c666:	4606      	mov	r6, r0
 800c668:	2800      	cmp	r0, #0
 800c66a:	d1e0      	bne.n	800c62e <__ssputs_r+0x5a>
 800c66c:	6921      	ldr	r1, [r4, #16]
 800c66e:	4650      	mov	r0, sl
 800c670:	f7fe fb6c 	bl	800ad4c <_free_r>
 800c674:	230c      	movs	r3, #12
 800c676:	f8ca 3000 	str.w	r3, [sl]
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c680:	81a3      	strh	r3, [r4, #12]
 800c682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c686:	e7e9      	b.n	800c65c <__ssputs_r+0x88>

0800c688 <_svfiprintf_r>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	4698      	mov	r8, r3
 800c68e:	898b      	ldrh	r3, [r1, #12]
 800c690:	061b      	lsls	r3, r3, #24
 800c692:	b09d      	sub	sp, #116	; 0x74
 800c694:	4607      	mov	r7, r0
 800c696:	460d      	mov	r5, r1
 800c698:	4614      	mov	r4, r2
 800c69a:	d50e      	bpl.n	800c6ba <_svfiprintf_r+0x32>
 800c69c:	690b      	ldr	r3, [r1, #16]
 800c69e:	b963      	cbnz	r3, 800c6ba <_svfiprintf_r+0x32>
 800c6a0:	2140      	movs	r1, #64	; 0x40
 800c6a2:	f7fe fbc7 	bl	800ae34 <_malloc_r>
 800c6a6:	6028      	str	r0, [r5, #0]
 800c6a8:	6128      	str	r0, [r5, #16]
 800c6aa:	b920      	cbnz	r0, 800c6b6 <_svfiprintf_r+0x2e>
 800c6ac:	230c      	movs	r3, #12
 800c6ae:	603b      	str	r3, [r7, #0]
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6b4:	e0d0      	b.n	800c858 <_svfiprintf_r+0x1d0>
 800c6b6:	2340      	movs	r3, #64	; 0x40
 800c6b8:	616b      	str	r3, [r5, #20]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6be:	2320      	movs	r3, #32
 800c6c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c8:	2330      	movs	r3, #48	; 0x30
 800c6ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c870 <_svfiprintf_r+0x1e8>
 800c6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	469a      	mov	sl, r3
 800c6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6de:	b10a      	cbz	r2, 800c6e4 <_svfiprintf_r+0x5c>
 800c6e0:	2a25      	cmp	r2, #37	; 0x25
 800c6e2:	d1f9      	bne.n	800c6d8 <_svfiprintf_r+0x50>
 800c6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e8:	d00b      	beq.n	800c702 <_svfiprintf_r+0x7a>
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff ff6f 	bl	800c5d4 <__ssputs_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f000 80a9 	beq.w	800c84e <_svfiprintf_r+0x1c6>
 800c6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6fe:	445a      	add	r2, fp
 800c700:	9209      	str	r2, [sp, #36]	; 0x24
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 80a1 	beq.w	800c84e <_svfiprintf_r+0x1c6>
 800c70c:	2300      	movs	r3, #0
 800c70e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c716:	f10a 0a01 	add.w	sl, sl, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c722:	931a      	str	r3, [sp, #104]	; 0x68
 800c724:	4654      	mov	r4, sl
 800c726:	2205      	movs	r2, #5
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	4850      	ldr	r0, [pc, #320]	; (800c870 <_svfiprintf_r+0x1e8>)
 800c72e:	f7f3 fd57 	bl	80001e0 <memchr>
 800c732:	9a04      	ldr	r2, [sp, #16]
 800c734:	b9d8      	cbnz	r0, 800c76e <_svfiprintf_r+0xe6>
 800c736:	06d0      	lsls	r0, r2, #27
 800c738:	bf44      	itt	mi
 800c73a:	2320      	movmi	r3, #32
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c740:	0711      	lsls	r1, r2, #28
 800c742:	bf44      	itt	mi
 800c744:	232b      	movmi	r3, #43	; 0x2b
 800c746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b2a      	cmp	r3, #42	; 0x2a
 800c750:	d015      	beq.n	800c77e <_svfiprintf_r+0xf6>
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	4654      	mov	r4, sl
 800c756:	2000      	movs	r0, #0
 800c758:	f04f 0c0a 	mov.w	ip, #10
 800c75c:	4621      	mov	r1, r4
 800c75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c762:	3b30      	subs	r3, #48	; 0x30
 800c764:	2b09      	cmp	r3, #9
 800c766:	d94d      	bls.n	800c804 <_svfiprintf_r+0x17c>
 800c768:	b1b0      	cbz	r0, 800c798 <_svfiprintf_r+0x110>
 800c76a:	9207      	str	r2, [sp, #28]
 800c76c:	e014      	b.n	800c798 <_svfiprintf_r+0x110>
 800c76e:	eba0 0308 	sub.w	r3, r0, r8
 800c772:	fa09 f303 	lsl.w	r3, r9, r3
 800c776:	4313      	orrs	r3, r2
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	46a2      	mov	sl, r4
 800c77c:	e7d2      	b.n	800c724 <_svfiprintf_r+0x9c>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	1d19      	adds	r1, r3, #4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	9103      	str	r1, [sp, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfbb      	ittet	lt
 800c78a:	425b      	neglt	r3, r3
 800c78c:	f042 0202 	orrlt.w	r2, r2, #2
 800c790:	9307      	strge	r3, [sp, #28]
 800c792:	9307      	strlt	r3, [sp, #28]
 800c794:	bfb8      	it	lt
 800c796:	9204      	strlt	r2, [sp, #16]
 800c798:	7823      	ldrb	r3, [r4, #0]
 800c79a:	2b2e      	cmp	r3, #46	; 0x2e
 800c79c:	d10c      	bne.n	800c7b8 <_svfiprintf_r+0x130>
 800c79e:	7863      	ldrb	r3, [r4, #1]
 800c7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a2:	d134      	bne.n	800c80e <_svfiprintf_r+0x186>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d1a      	adds	r2, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9203      	str	r2, [sp, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfb8      	it	lt
 800c7b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7b4:	3402      	adds	r4, #2
 800c7b6:	9305      	str	r3, [sp, #20]
 800c7b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c880 <_svfiprintf_r+0x1f8>
 800c7bc:	7821      	ldrb	r1, [r4, #0]
 800c7be:	2203      	movs	r2, #3
 800c7c0:	4650      	mov	r0, sl
 800c7c2:	f7f3 fd0d 	bl	80001e0 <memchr>
 800c7c6:	b138      	cbz	r0, 800c7d8 <_svfiprintf_r+0x150>
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	eba0 000a 	sub.w	r0, r0, sl
 800c7ce:	2240      	movs	r2, #64	; 0x40
 800c7d0:	4082      	lsls	r2, r0
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	3401      	adds	r4, #1
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7dc:	4825      	ldr	r0, [pc, #148]	; (800c874 <_svfiprintf_r+0x1ec>)
 800c7de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7e2:	2206      	movs	r2, #6
 800c7e4:	f7f3 fcfc 	bl	80001e0 <memchr>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d038      	beq.n	800c85e <_svfiprintf_r+0x1d6>
 800c7ec:	4b22      	ldr	r3, [pc, #136]	; (800c878 <_svfiprintf_r+0x1f0>)
 800c7ee:	bb1b      	cbnz	r3, 800c838 <_svfiprintf_r+0x1b0>
 800c7f0:	9b03      	ldr	r3, [sp, #12]
 800c7f2:	3307      	adds	r3, #7
 800c7f4:	f023 0307 	bic.w	r3, r3, #7
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fe:	4433      	add	r3, r6
 800c800:	9309      	str	r3, [sp, #36]	; 0x24
 800c802:	e768      	b.n	800c6d6 <_svfiprintf_r+0x4e>
 800c804:	fb0c 3202 	mla	r2, ip, r2, r3
 800c808:	460c      	mov	r4, r1
 800c80a:	2001      	movs	r0, #1
 800c80c:	e7a6      	b.n	800c75c <_svfiprintf_r+0xd4>
 800c80e:	2300      	movs	r3, #0
 800c810:	3401      	adds	r4, #1
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	4619      	mov	r1, r3
 800c816:	f04f 0c0a 	mov.w	ip, #10
 800c81a:	4620      	mov	r0, r4
 800c81c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c820:	3a30      	subs	r2, #48	; 0x30
 800c822:	2a09      	cmp	r2, #9
 800c824:	d903      	bls.n	800c82e <_svfiprintf_r+0x1a6>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0c6      	beq.n	800c7b8 <_svfiprintf_r+0x130>
 800c82a:	9105      	str	r1, [sp, #20]
 800c82c:	e7c4      	b.n	800c7b8 <_svfiprintf_r+0x130>
 800c82e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c832:	4604      	mov	r4, r0
 800c834:	2301      	movs	r3, #1
 800c836:	e7f0      	b.n	800c81a <_svfiprintf_r+0x192>
 800c838:	ab03      	add	r3, sp, #12
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	462a      	mov	r2, r5
 800c83e:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <_svfiprintf_r+0x1f4>)
 800c840:	a904      	add	r1, sp, #16
 800c842:	4638      	mov	r0, r7
 800c844:	f7fc fbe0 	bl	8009008 <_printf_float>
 800c848:	1c42      	adds	r2, r0, #1
 800c84a:	4606      	mov	r6, r0
 800c84c:	d1d6      	bne.n	800c7fc <_svfiprintf_r+0x174>
 800c84e:	89ab      	ldrh	r3, [r5, #12]
 800c850:	065b      	lsls	r3, r3, #25
 800c852:	f53f af2d 	bmi.w	800c6b0 <_svfiprintf_r+0x28>
 800c856:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c858:	b01d      	add	sp, #116	; 0x74
 800c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85e:	ab03      	add	r3, sp, #12
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	462a      	mov	r2, r5
 800c864:	4b05      	ldr	r3, [pc, #20]	; (800c87c <_svfiprintf_r+0x1f4>)
 800c866:	a904      	add	r1, sp, #16
 800c868:	4638      	mov	r0, r7
 800c86a:	f7fc fe71 	bl	8009550 <_printf_i>
 800c86e:	e7eb      	b.n	800c848 <_svfiprintf_r+0x1c0>
 800c870:	0800f601 	.word	0x0800f601
 800c874:	0800f60b 	.word	0x0800f60b
 800c878:	08009009 	.word	0x08009009
 800c87c:	0800c5d5 	.word	0x0800c5d5
 800c880:	0800f607 	.word	0x0800f607

0800c884 <_sungetc_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	1c4b      	adds	r3, r1, #1
 800c888:	4614      	mov	r4, r2
 800c88a:	d103      	bne.n	800c894 <_sungetc_r+0x10>
 800c88c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c890:	4628      	mov	r0, r5
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	8993      	ldrh	r3, [r2, #12]
 800c896:	f023 0320 	bic.w	r3, r3, #32
 800c89a:	8193      	strh	r3, [r2, #12]
 800c89c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c89e:	6852      	ldr	r2, [r2, #4]
 800c8a0:	b2cd      	uxtb	r5, r1
 800c8a2:	b18b      	cbz	r3, 800c8c8 <_sungetc_r+0x44>
 800c8a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	dd08      	ble.n	800c8bc <_sungetc_r+0x38>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	1e5a      	subs	r2, r3, #1
 800c8ae:	6022      	str	r2, [r4, #0]
 800c8b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c8b4:	6863      	ldr	r3, [r4, #4]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	e7e9      	b.n	800c890 <_sungetc_r+0xc>
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f000 fd2c 	bl	800d31a <__submore>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d0f1      	beq.n	800c8aa <_sungetc_r+0x26>
 800c8c6:	e7e1      	b.n	800c88c <_sungetc_r+0x8>
 800c8c8:	6921      	ldr	r1, [r4, #16]
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	b151      	cbz	r1, 800c8e4 <_sungetc_r+0x60>
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	d208      	bcs.n	800c8e4 <_sungetc_r+0x60>
 800c8d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c8d6:	42a9      	cmp	r1, r5
 800c8d8:	d104      	bne.n	800c8e4 <_sungetc_r+0x60>
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	3201      	adds	r2, #1
 800c8de:	6023      	str	r3, [r4, #0]
 800c8e0:	6062      	str	r2, [r4, #4]
 800c8e2:	e7d5      	b.n	800c890 <_sungetc_r+0xc>
 800c8e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8f2:	4623      	mov	r3, r4
 800c8f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e7dc      	b.n	800c8b8 <_sungetc_r+0x34>

0800c8fe <__ssrefill_r>:
 800c8fe:	b510      	push	{r4, lr}
 800c900:	460c      	mov	r4, r1
 800c902:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c904:	b169      	cbz	r1, 800c922 <__ssrefill_r+0x24>
 800c906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c90a:	4299      	cmp	r1, r3
 800c90c:	d001      	beq.n	800c912 <__ssrefill_r+0x14>
 800c90e:	f7fe fa1d 	bl	800ad4c <_free_r>
 800c912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c914:	6063      	str	r3, [r4, #4]
 800c916:	2000      	movs	r0, #0
 800c918:	6360      	str	r0, [r4, #52]	; 0x34
 800c91a:	b113      	cbz	r3, 800c922 <__ssrefill_r+0x24>
 800c91c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	bd10      	pop	{r4, pc}
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	2300      	movs	r3, #0
 800c928:	6063      	str	r3, [r4, #4]
 800c92a:	89a3      	ldrh	r3, [r4, #12]
 800c92c:	f043 0320 	orr.w	r3, r3, #32
 800c930:	81a3      	strh	r3, [r4, #12]
 800c932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c936:	e7f3      	b.n	800c920 <__ssrefill_r+0x22>

0800c938 <__ssvfiscanf_r>:
 800c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	460c      	mov	r4, r1
 800c93e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c942:	2100      	movs	r1, #0
 800c944:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c948:	49a6      	ldr	r1, [pc, #664]	; (800cbe4 <__ssvfiscanf_r+0x2ac>)
 800c94a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c94c:	f10d 0804 	add.w	r8, sp, #4
 800c950:	49a5      	ldr	r1, [pc, #660]	; (800cbe8 <__ssvfiscanf_r+0x2b0>)
 800c952:	4fa6      	ldr	r7, [pc, #664]	; (800cbec <__ssvfiscanf_r+0x2b4>)
 800c954:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cbf0 <__ssvfiscanf_r+0x2b8>
 800c958:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c95c:	4606      	mov	r6, r0
 800c95e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	7813      	ldrb	r3, [r2, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 815a 	beq.w	800cc1e <__ssvfiscanf_r+0x2e6>
 800c96a:	5cf9      	ldrb	r1, [r7, r3]
 800c96c:	f011 0108 	ands.w	r1, r1, #8
 800c970:	f102 0501 	add.w	r5, r2, #1
 800c974:	d019      	beq.n	800c9aa <__ssvfiscanf_r+0x72>
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dd0f      	ble.n	800c99c <__ssvfiscanf_r+0x64>
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	781a      	ldrb	r2, [r3, #0]
 800c980:	5cba      	ldrb	r2, [r7, r2]
 800c982:	0712      	lsls	r2, r2, #28
 800c984:	d401      	bmi.n	800c98a <__ssvfiscanf_r+0x52>
 800c986:	462a      	mov	r2, r5
 800c988:	e7eb      	b.n	800c962 <__ssvfiscanf_r+0x2a>
 800c98a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c98c:	3201      	adds	r2, #1
 800c98e:	9245      	str	r2, [sp, #276]	; 0x114
 800c990:	6862      	ldr	r2, [r4, #4]
 800c992:	3301      	adds	r3, #1
 800c994:	3a01      	subs	r2, #1
 800c996:	6062      	str	r2, [r4, #4]
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	e7ec      	b.n	800c976 <__ssvfiscanf_r+0x3e>
 800c99c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4798      	blx	r3
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0e9      	beq.n	800c97c <__ssvfiscanf_r+0x44>
 800c9a8:	e7ed      	b.n	800c986 <__ssvfiscanf_r+0x4e>
 800c9aa:	2b25      	cmp	r3, #37	; 0x25
 800c9ac:	d012      	beq.n	800c9d4 <__ssvfiscanf_r+0x9c>
 800c9ae:	469a      	mov	sl, r3
 800c9b0:	6863      	ldr	r3, [r4, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f340 8091 	ble.w	800cada <__ssvfiscanf_r+0x1a2>
 800c9b8:	6822      	ldr	r2, [r4, #0]
 800c9ba:	7813      	ldrb	r3, [r2, #0]
 800c9bc:	4553      	cmp	r3, sl
 800c9be:	f040 812e 	bne.w	800cc1e <__ssvfiscanf_r+0x2e6>
 800c9c2:	6863      	ldr	r3, [r4, #4]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	6022      	str	r2, [r4, #0]
 800c9d0:	9345      	str	r3, [sp, #276]	; 0x114
 800c9d2:	e7d8      	b.n	800c986 <__ssvfiscanf_r+0x4e>
 800c9d4:	9141      	str	r1, [sp, #260]	; 0x104
 800c9d6:	9143      	str	r1, [sp, #268]	; 0x10c
 800c9d8:	7853      	ldrb	r3, [r2, #1]
 800c9da:	2b2a      	cmp	r3, #42	; 0x2a
 800c9dc:	bf02      	ittt	eq
 800c9de:	2310      	moveq	r3, #16
 800c9e0:	1c95      	addeq	r5, r2, #2
 800c9e2:	9341      	streq	r3, [sp, #260]	; 0x104
 800c9e4:	220a      	movs	r2, #10
 800c9e6:	46aa      	mov	sl, r5
 800c9e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c9ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c9f0:	2b09      	cmp	r3, #9
 800c9f2:	d91c      	bls.n	800ca2e <__ssvfiscanf_r+0xf6>
 800c9f4:	487e      	ldr	r0, [pc, #504]	; (800cbf0 <__ssvfiscanf_r+0x2b8>)
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	f7f3 fbf2 	bl	80001e0 <memchr>
 800c9fc:	b138      	cbz	r0, 800ca0e <__ssvfiscanf_r+0xd6>
 800c9fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca00:	eba0 0009 	sub.w	r0, r0, r9
 800ca04:	2301      	movs	r3, #1
 800ca06:	4083      	lsls	r3, r0
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	9341      	str	r3, [sp, #260]	; 0x104
 800ca0c:	4655      	mov	r5, sl
 800ca0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca12:	2b78      	cmp	r3, #120	; 0x78
 800ca14:	d806      	bhi.n	800ca24 <__ssvfiscanf_r+0xec>
 800ca16:	2b57      	cmp	r3, #87	; 0x57
 800ca18:	d810      	bhi.n	800ca3c <__ssvfiscanf_r+0x104>
 800ca1a:	2b25      	cmp	r3, #37	; 0x25
 800ca1c:	d0c7      	beq.n	800c9ae <__ssvfiscanf_r+0x76>
 800ca1e:	d857      	bhi.n	800cad0 <__ssvfiscanf_r+0x198>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d065      	beq.n	800caf0 <__ssvfiscanf_r+0x1b8>
 800ca24:	2303      	movs	r3, #3
 800ca26:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca28:	230a      	movs	r3, #10
 800ca2a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca2c:	e076      	b.n	800cb1c <__ssvfiscanf_r+0x1e4>
 800ca2e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca30:	fb02 1103 	mla	r1, r2, r3, r1
 800ca34:	3930      	subs	r1, #48	; 0x30
 800ca36:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca38:	4655      	mov	r5, sl
 800ca3a:	e7d4      	b.n	800c9e6 <__ssvfiscanf_r+0xae>
 800ca3c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ca40:	2a20      	cmp	r2, #32
 800ca42:	d8ef      	bhi.n	800ca24 <__ssvfiscanf_r+0xec>
 800ca44:	a101      	add	r1, pc, #4	; (adr r1, 800ca4c <__ssvfiscanf_r+0x114>)
 800ca46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca4a:	bf00      	nop
 800ca4c:	0800caff 	.word	0x0800caff
 800ca50:	0800ca25 	.word	0x0800ca25
 800ca54:	0800ca25 	.word	0x0800ca25
 800ca58:	0800cb5d 	.word	0x0800cb5d
 800ca5c:	0800ca25 	.word	0x0800ca25
 800ca60:	0800ca25 	.word	0x0800ca25
 800ca64:	0800ca25 	.word	0x0800ca25
 800ca68:	0800ca25 	.word	0x0800ca25
 800ca6c:	0800ca25 	.word	0x0800ca25
 800ca70:	0800ca25 	.word	0x0800ca25
 800ca74:	0800ca25 	.word	0x0800ca25
 800ca78:	0800cb73 	.word	0x0800cb73
 800ca7c:	0800cb59 	.word	0x0800cb59
 800ca80:	0800cad7 	.word	0x0800cad7
 800ca84:	0800cad7 	.word	0x0800cad7
 800ca88:	0800cad7 	.word	0x0800cad7
 800ca8c:	0800ca25 	.word	0x0800ca25
 800ca90:	0800cb15 	.word	0x0800cb15
 800ca94:	0800ca25 	.word	0x0800ca25
 800ca98:	0800ca25 	.word	0x0800ca25
 800ca9c:	0800ca25 	.word	0x0800ca25
 800caa0:	0800ca25 	.word	0x0800ca25
 800caa4:	0800cb83 	.word	0x0800cb83
 800caa8:	0800cb51 	.word	0x0800cb51
 800caac:	0800caf7 	.word	0x0800caf7
 800cab0:	0800ca25 	.word	0x0800ca25
 800cab4:	0800ca25 	.word	0x0800ca25
 800cab8:	0800cb7f 	.word	0x0800cb7f
 800cabc:	0800ca25 	.word	0x0800ca25
 800cac0:	0800cb59 	.word	0x0800cb59
 800cac4:	0800ca25 	.word	0x0800ca25
 800cac8:	0800ca25 	.word	0x0800ca25
 800cacc:	0800caff 	.word	0x0800caff
 800cad0:	3b45      	subs	r3, #69	; 0x45
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d8a6      	bhi.n	800ca24 <__ssvfiscanf_r+0xec>
 800cad6:	2305      	movs	r3, #5
 800cad8:	e01f      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cada:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cadc:	4621      	mov	r1, r4
 800cade:	4630      	mov	r0, r6
 800cae0:	4798      	blx	r3
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f43f af68 	beq.w	800c9b8 <__ssvfiscanf_r+0x80>
 800cae8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800caea:	2800      	cmp	r0, #0
 800caec:	f040 808d 	bne.w	800cc0a <__ssvfiscanf_r+0x2d2>
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caf4:	e08f      	b.n	800cc16 <__ssvfiscanf_r+0x2de>
 800caf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800caf8:	f042 0220 	orr.w	r2, r2, #32
 800cafc:	9241      	str	r2, [sp, #260]	; 0x104
 800cafe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb04:	9241      	str	r2, [sp, #260]	; 0x104
 800cb06:	2210      	movs	r2, #16
 800cb08:	2b6f      	cmp	r3, #111	; 0x6f
 800cb0a:	9242      	str	r2, [sp, #264]	; 0x108
 800cb0c:	bf34      	ite	cc
 800cb0e:	2303      	movcc	r3, #3
 800cb10:	2304      	movcs	r3, #4
 800cb12:	e002      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cb14:	2300      	movs	r3, #0
 800cb16:	9342      	str	r3, [sp, #264]	; 0x108
 800cb18:	2303      	movs	r3, #3
 800cb1a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb1c:	6863      	ldr	r3, [r4, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dd3d      	ble.n	800cb9e <__ssvfiscanf_r+0x266>
 800cb22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb24:	0659      	lsls	r1, r3, #25
 800cb26:	d404      	bmi.n	800cb32 <__ssvfiscanf_r+0x1fa>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	781a      	ldrb	r2, [r3, #0]
 800cb2c:	5cba      	ldrb	r2, [r7, r2]
 800cb2e:	0712      	lsls	r2, r2, #28
 800cb30:	d43c      	bmi.n	800cbac <__ssvfiscanf_r+0x274>
 800cb32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	dc4b      	bgt.n	800cbd0 <__ssvfiscanf_r+0x298>
 800cb38:	466b      	mov	r3, sp
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	a941      	add	r1, sp, #260	; 0x104
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f000 f9b6 	bl	800ceb0 <_scanf_chars>
 800cb44:	2801      	cmp	r0, #1
 800cb46:	d06a      	beq.n	800cc1e <__ssvfiscanf_r+0x2e6>
 800cb48:	2802      	cmp	r0, #2
 800cb4a:	f47f af1c 	bne.w	800c986 <__ssvfiscanf_r+0x4e>
 800cb4e:	e7cb      	b.n	800cae8 <__ssvfiscanf_r+0x1b0>
 800cb50:	2308      	movs	r3, #8
 800cb52:	9342      	str	r3, [sp, #264]	; 0x108
 800cb54:	2304      	movs	r3, #4
 800cb56:	e7e0      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cb58:	220a      	movs	r2, #10
 800cb5a:	e7d5      	b.n	800cb08 <__ssvfiscanf_r+0x1d0>
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4640      	mov	r0, r8
 800cb60:	f000 fba2 	bl	800d2a8 <__sccl>
 800cb64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb6a:	9341      	str	r3, [sp, #260]	; 0x104
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e7d3      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cb72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb78:	9341      	str	r3, [sp, #260]	; 0x104
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e7cd      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cb7e:	2302      	movs	r3, #2
 800cb80:	e7cb      	b.n	800cb1a <__ssvfiscanf_r+0x1e2>
 800cb82:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb84:	06c3      	lsls	r3, r0, #27
 800cb86:	f53f aefe 	bmi.w	800c986 <__ssvfiscanf_r+0x4e>
 800cb8a:	9b00      	ldr	r3, [sp, #0]
 800cb8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb8e:	1d19      	adds	r1, r3, #4
 800cb90:	9100      	str	r1, [sp, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	07c0      	lsls	r0, r0, #31
 800cb96:	bf4c      	ite	mi
 800cb98:	801a      	strhmi	r2, [r3, #0]
 800cb9a:	601a      	strpl	r2, [r3, #0]
 800cb9c:	e6f3      	b.n	800c986 <__ssvfiscanf_r+0x4e>
 800cb9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cba0:	4621      	mov	r1, r4
 800cba2:	4630      	mov	r0, r6
 800cba4:	4798      	blx	r3
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d0bb      	beq.n	800cb22 <__ssvfiscanf_r+0x1ea>
 800cbaa:	e79d      	b.n	800cae8 <__ssvfiscanf_r+0x1b0>
 800cbac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbae:	3201      	adds	r2, #1
 800cbb0:	9245      	str	r2, [sp, #276]	; 0x114
 800cbb2:	6862      	ldr	r2, [r4, #4]
 800cbb4:	3a01      	subs	r2, #1
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	6062      	str	r2, [r4, #4]
 800cbba:	dd02      	ble.n	800cbc2 <__ssvfiscanf_r+0x28a>
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	6023      	str	r3, [r4, #0]
 800cbc0:	e7b2      	b.n	800cb28 <__ssvfiscanf_r+0x1f0>
 800cbc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4798      	blx	r3
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0ac      	beq.n	800cb28 <__ssvfiscanf_r+0x1f0>
 800cbce:	e78b      	b.n	800cae8 <__ssvfiscanf_r+0x1b0>
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	dc0f      	bgt.n	800cbf4 <__ssvfiscanf_r+0x2bc>
 800cbd4:	466b      	mov	r3, sp
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	a941      	add	r1, sp, #260	; 0x104
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f000 f9c2 	bl	800cf64 <_scanf_i>
 800cbe0:	e7b0      	b.n	800cb44 <__ssvfiscanf_r+0x20c>
 800cbe2:	bf00      	nop
 800cbe4:	0800c885 	.word	0x0800c885
 800cbe8:	0800c8ff 	.word	0x0800c8ff
 800cbec:	0800f501 	.word	0x0800f501
 800cbf0:	0800f607 	.word	0x0800f607
 800cbf4:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <__ssvfiscanf_r+0x2ec>)
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f43f aec5 	beq.w	800c986 <__ssvfiscanf_r+0x4e>
 800cbfc:	466b      	mov	r3, sp
 800cbfe:	4622      	mov	r2, r4
 800cc00:	a941      	add	r1, sp, #260	; 0x104
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7fc fdc6 	bl	8009794 <_scanf_float>
 800cc08:	e79c      	b.n	800cb44 <__ssvfiscanf_r+0x20c>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cc10:	bf18      	it	ne
 800cc12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800cc16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc20:	e7f9      	b.n	800cc16 <__ssvfiscanf_r+0x2de>
 800cc22:	bf00      	nop
 800cc24:	08009795 	.word	0x08009795

0800cc28 <__sfputc_r>:
 800cc28:	6893      	ldr	r3, [r2, #8]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	b410      	push	{r4}
 800cc30:	6093      	str	r3, [r2, #8]
 800cc32:	da08      	bge.n	800cc46 <__sfputc_r+0x1e>
 800cc34:	6994      	ldr	r4, [r2, #24]
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	db01      	blt.n	800cc3e <__sfputc_r+0x16>
 800cc3a:	290a      	cmp	r1, #10
 800cc3c:	d103      	bne.n	800cc46 <__sfputc_r+0x1e>
 800cc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc42:	f000 bba4 	b.w	800d38e <__swbuf_r>
 800cc46:	6813      	ldr	r3, [r2, #0]
 800cc48:	1c58      	adds	r0, r3, #1
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	7019      	strb	r1, [r3, #0]
 800cc4e:	4608      	mov	r0, r1
 800cc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <__sfputs_r>:
 800cc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc58:	4606      	mov	r6, r0
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	18d5      	adds	r5, r2, r3
 800cc60:	42ac      	cmp	r4, r5
 800cc62:	d101      	bne.n	800cc68 <__sfputs_r+0x12>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e007      	b.n	800cc78 <__sfputs_r+0x22>
 800cc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ffda 	bl	800cc28 <__sfputc_r>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d1f3      	bne.n	800cc60 <__sfputs_r+0xa>
 800cc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc7c <_vfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	b09d      	sub	sp, #116	; 0x74
 800cc84:	4614      	mov	r4, r2
 800cc86:	4698      	mov	r8, r3
 800cc88:	4606      	mov	r6, r0
 800cc8a:	b118      	cbz	r0, 800cc94 <_vfiprintf_r+0x18>
 800cc8c:	6a03      	ldr	r3, [r0, #32]
 800cc8e:	b90b      	cbnz	r3, 800cc94 <_vfiprintf_r+0x18>
 800cc90:	f7fd f81c 	bl	8009ccc <__sinit>
 800cc94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc96:	07d9      	lsls	r1, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	059a      	lsls	r2, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cca2:	f7fd f9c0 	bl	800a026 <__retarget_lock_acquire_recursive>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d501      	bpl.n	800ccb0 <_vfiprintf_r+0x34>
 800ccac:	692b      	ldr	r3, [r5, #16]
 800ccae:	b99b      	cbnz	r3, 800ccd8 <_vfiprintf_r+0x5c>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f000 fba8 	bl	800d408 <__swsetup_r>
 800ccb8:	b170      	cbz	r0, 800ccd8 <_vfiprintf_r+0x5c>
 800ccba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccbc:	07dc      	lsls	r4, r3, #31
 800ccbe:	d504      	bpl.n	800ccca <_vfiprintf_r+0x4e>
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccc4:	b01d      	add	sp, #116	; 0x74
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	89ab      	ldrh	r3, [r5, #12]
 800cccc:	0598      	lsls	r0, r3, #22
 800ccce:	d4f7      	bmi.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd2:	f7fd f9a9 	bl	800a028 <__retarget_lock_release_recursive>
 800ccd6:	e7f3      	b.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9309      	str	r3, [sp, #36]	; 0x24
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce6:	2330      	movs	r3, #48	; 0x30
 800cce8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ce9c <_vfiprintf_r+0x220>
 800ccec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf0:	f04f 0901 	mov.w	r9, #1
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	469a      	mov	sl, r3
 800ccf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfc:	b10a      	cbz	r2, 800cd02 <_vfiprintf_r+0x86>
 800ccfe:	2a25      	cmp	r2, #37	; 0x25
 800cd00:	d1f9      	bne.n	800ccf6 <_vfiprintf_r+0x7a>
 800cd02:	ebba 0b04 	subs.w	fp, sl, r4
 800cd06:	d00b      	beq.n	800cd20 <_vfiprintf_r+0xa4>
 800cd08:	465b      	mov	r3, fp
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ffa1 	bl	800cc56 <__sfputs_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f000 80a9 	beq.w	800ce6c <_vfiprintf_r+0x1f0>
 800cd1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd1c:	445a      	add	r2, fp
 800cd1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd20:	f89a 3000 	ldrb.w	r3, [sl]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80a1 	beq.w	800ce6c <_vfiprintf_r+0x1f0>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd34:	f10a 0a01 	add.w	sl, sl, #1
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd40:	931a      	str	r3, [sp, #104]	; 0x68
 800cd42:	4654      	mov	r4, sl
 800cd44:	2205      	movs	r2, #5
 800cd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4a:	4854      	ldr	r0, [pc, #336]	; (800ce9c <_vfiprintf_r+0x220>)
 800cd4c:	f7f3 fa48 	bl	80001e0 <memchr>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	b9d8      	cbnz	r0, 800cd8c <_vfiprintf_r+0x110>
 800cd54:	06d1      	lsls	r1, r2, #27
 800cd56:	bf44      	itt	mi
 800cd58:	2320      	movmi	r3, #32
 800cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd5e:	0713      	lsls	r3, r2, #28
 800cd60:	bf44      	itt	mi
 800cd62:	232b      	movmi	r3, #43	; 0x2b
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd6e:	d015      	beq.n	800cd9c <_vfiprintf_r+0x120>
 800cd70:	9a07      	ldr	r2, [sp, #28]
 800cd72:	4654      	mov	r4, sl
 800cd74:	2000      	movs	r0, #0
 800cd76:	f04f 0c0a 	mov.w	ip, #10
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd80:	3b30      	subs	r3, #48	; 0x30
 800cd82:	2b09      	cmp	r3, #9
 800cd84:	d94d      	bls.n	800ce22 <_vfiprintf_r+0x1a6>
 800cd86:	b1b0      	cbz	r0, 800cdb6 <_vfiprintf_r+0x13a>
 800cd88:	9207      	str	r2, [sp, #28]
 800cd8a:	e014      	b.n	800cdb6 <_vfiprintf_r+0x13a>
 800cd8c:	eba0 0308 	sub.w	r3, r0, r8
 800cd90:	fa09 f303 	lsl.w	r3, r9, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	9304      	str	r3, [sp, #16]
 800cd98:	46a2      	mov	sl, r4
 800cd9a:	e7d2      	b.n	800cd42 <_vfiprintf_r+0xc6>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	1d19      	adds	r1, r3, #4
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	9103      	str	r1, [sp, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbb      	ittet	lt
 800cda8:	425b      	neglt	r3, r3
 800cdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdae:	9307      	strge	r3, [sp, #28]
 800cdb0:	9307      	strlt	r3, [sp, #28]
 800cdb2:	bfb8      	it	lt
 800cdb4:	9204      	strlt	r2, [sp, #16]
 800cdb6:	7823      	ldrb	r3, [r4, #0]
 800cdb8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdba:	d10c      	bne.n	800cdd6 <_vfiprintf_r+0x15a>
 800cdbc:	7863      	ldrb	r3, [r4, #1]
 800cdbe:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc0:	d134      	bne.n	800ce2c <_vfiprintf_r+0x1b0>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	1d1a      	adds	r2, r3, #4
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	9203      	str	r2, [sp, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	bfb8      	it	lt
 800cdce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cdd2:	3402      	adds	r4, #2
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ceac <_vfiprintf_r+0x230>
 800cdda:	7821      	ldrb	r1, [r4, #0]
 800cddc:	2203      	movs	r2, #3
 800cdde:	4650      	mov	r0, sl
 800cde0:	f7f3 f9fe 	bl	80001e0 <memchr>
 800cde4:	b138      	cbz	r0, 800cdf6 <_vfiprintf_r+0x17a>
 800cde6:	9b04      	ldr	r3, [sp, #16]
 800cde8:	eba0 000a 	sub.w	r0, r0, sl
 800cdec:	2240      	movs	r2, #64	; 0x40
 800cdee:	4082      	lsls	r2, r0
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	3401      	adds	r4, #1
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfa:	4829      	ldr	r0, [pc, #164]	; (800cea0 <_vfiprintf_r+0x224>)
 800cdfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce00:	2206      	movs	r2, #6
 800ce02:	f7f3 f9ed 	bl	80001e0 <memchr>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d03f      	beq.n	800ce8a <_vfiprintf_r+0x20e>
 800ce0a:	4b26      	ldr	r3, [pc, #152]	; (800cea4 <_vfiprintf_r+0x228>)
 800ce0c:	bb1b      	cbnz	r3, 800ce56 <_vfiprintf_r+0x1da>
 800ce0e:	9b03      	ldr	r3, [sp, #12]
 800ce10:	3307      	adds	r3, #7
 800ce12:	f023 0307 	bic.w	r3, r3, #7
 800ce16:	3308      	adds	r3, #8
 800ce18:	9303      	str	r3, [sp, #12]
 800ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1c:	443b      	add	r3, r7
 800ce1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce20:	e768      	b.n	800ccf4 <_vfiprintf_r+0x78>
 800ce22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce26:	460c      	mov	r4, r1
 800ce28:	2001      	movs	r0, #1
 800ce2a:	e7a6      	b.n	800cd7a <_vfiprintf_r+0xfe>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	3401      	adds	r4, #1
 800ce30:	9305      	str	r3, [sp, #20]
 800ce32:	4619      	mov	r1, r3
 800ce34:	f04f 0c0a 	mov.w	ip, #10
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce3e:	3a30      	subs	r2, #48	; 0x30
 800ce40:	2a09      	cmp	r2, #9
 800ce42:	d903      	bls.n	800ce4c <_vfiprintf_r+0x1d0>
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d0c6      	beq.n	800cdd6 <_vfiprintf_r+0x15a>
 800ce48:	9105      	str	r1, [sp, #20]
 800ce4a:	e7c4      	b.n	800cdd6 <_vfiprintf_r+0x15a>
 800ce4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce50:	4604      	mov	r4, r0
 800ce52:	2301      	movs	r3, #1
 800ce54:	e7f0      	b.n	800ce38 <_vfiprintf_r+0x1bc>
 800ce56:	ab03      	add	r3, sp, #12
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <_vfiprintf_r+0x22c>)
 800ce5e:	a904      	add	r1, sp, #16
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7fc f8d1 	bl	8009008 <_printf_float>
 800ce66:	4607      	mov	r7, r0
 800ce68:	1c78      	adds	r0, r7, #1
 800ce6a:	d1d6      	bne.n	800ce1a <_vfiprintf_r+0x19e>
 800ce6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce6e:	07d9      	lsls	r1, r3, #31
 800ce70:	d405      	bmi.n	800ce7e <_vfiprintf_r+0x202>
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	059a      	lsls	r2, r3, #22
 800ce76:	d402      	bmi.n	800ce7e <_vfiprintf_r+0x202>
 800ce78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce7a:	f7fd f8d5 	bl	800a028 <__retarget_lock_release_recursive>
 800ce7e:	89ab      	ldrh	r3, [r5, #12]
 800ce80:	065b      	lsls	r3, r3, #25
 800ce82:	f53f af1d 	bmi.w	800ccc0 <_vfiprintf_r+0x44>
 800ce86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce88:	e71c      	b.n	800ccc4 <_vfiprintf_r+0x48>
 800ce8a:	ab03      	add	r3, sp, #12
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	462a      	mov	r2, r5
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <_vfiprintf_r+0x22c>)
 800ce92:	a904      	add	r1, sp, #16
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7fc fb5b 	bl	8009550 <_printf_i>
 800ce9a:	e7e4      	b.n	800ce66 <_vfiprintf_r+0x1ea>
 800ce9c:	0800f601 	.word	0x0800f601
 800cea0:	0800f60b 	.word	0x0800f60b
 800cea4:	08009009 	.word	0x08009009
 800cea8:	0800cc57 	.word	0x0800cc57
 800ceac:	0800f607 	.word	0x0800f607

0800ceb0 <_scanf_chars>:
 800ceb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb4:	4615      	mov	r5, r2
 800ceb6:	688a      	ldr	r2, [r1, #8]
 800ceb8:	4680      	mov	r8, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	b932      	cbnz	r2, 800cecc <_scanf_chars+0x1c>
 800cebe:	698a      	ldr	r2, [r1, #24]
 800cec0:	2a00      	cmp	r2, #0
 800cec2:	bf0c      	ite	eq
 800cec4:	2201      	moveq	r2, #1
 800cec6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800ceca:	608a      	str	r2, [r1, #8]
 800cecc:	6822      	ldr	r2, [r4, #0]
 800cece:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cf60 <_scanf_chars+0xb0>
 800ced2:	06d1      	lsls	r1, r2, #27
 800ced4:	bf5f      	itttt	pl
 800ced6:	681a      	ldrpl	r2, [r3, #0]
 800ced8:	1d11      	addpl	r1, r2, #4
 800ceda:	6019      	strpl	r1, [r3, #0]
 800cedc:	6816      	ldrpl	r6, [r2, #0]
 800cede:	2700      	movs	r7, #0
 800cee0:	69a0      	ldr	r0, [r4, #24]
 800cee2:	b188      	cbz	r0, 800cf08 <_scanf_chars+0x58>
 800cee4:	2801      	cmp	r0, #1
 800cee6:	d107      	bne.n	800cef8 <_scanf_chars+0x48>
 800cee8:	682a      	ldr	r2, [r5, #0]
 800ceea:	7811      	ldrb	r1, [r2, #0]
 800ceec:	6962      	ldr	r2, [r4, #20]
 800ceee:	5c52      	ldrb	r2, [r2, r1]
 800cef0:	b952      	cbnz	r2, 800cf08 <_scanf_chars+0x58>
 800cef2:	2f00      	cmp	r7, #0
 800cef4:	d031      	beq.n	800cf5a <_scanf_chars+0xaa>
 800cef6:	e022      	b.n	800cf3e <_scanf_chars+0x8e>
 800cef8:	2802      	cmp	r0, #2
 800cefa:	d120      	bne.n	800cf3e <_scanf_chars+0x8e>
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cf04:	071b      	lsls	r3, r3, #28
 800cf06:	d41a      	bmi.n	800cf3e <_scanf_chars+0x8e>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	06da      	lsls	r2, r3, #27
 800cf0c:	bf5e      	ittt	pl
 800cf0e:	682b      	ldrpl	r3, [r5, #0]
 800cf10:	781b      	ldrbpl	r3, [r3, #0]
 800cf12:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf16:	682a      	ldr	r2, [r5, #0]
 800cf18:	686b      	ldr	r3, [r5, #4]
 800cf1a:	3201      	adds	r2, #1
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	68a2      	ldr	r2, [r4, #8]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	3a01      	subs	r2, #1
 800cf24:	606b      	str	r3, [r5, #4]
 800cf26:	3701      	adds	r7, #1
 800cf28:	60a2      	str	r2, [r4, #8]
 800cf2a:	b142      	cbz	r2, 800cf3e <_scanf_chars+0x8e>
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dcd7      	bgt.n	800cee0 <_scanf_chars+0x30>
 800cf30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf34:	4629      	mov	r1, r5
 800cf36:	4640      	mov	r0, r8
 800cf38:	4798      	blx	r3
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d0d0      	beq.n	800cee0 <_scanf_chars+0x30>
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	f013 0310 	ands.w	r3, r3, #16
 800cf44:	d105      	bne.n	800cf52 <_scanf_chars+0xa2>
 800cf46:	68e2      	ldr	r2, [r4, #12]
 800cf48:	3201      	adds	r2, #1
 800cf4a:	60e2      	str	r2, [r4, #12]
 800cf4c:	69a2      	ldr	r2, [r4, #24]
 800cf4e:	b102      	cbz	r2, 800cf52 <_scanf_chars+0xa2>
 800cf50:	7033      	strb	r3, [r6, #0]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	443b      	add	r3, r7
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	bf00      	nop
 800cf60:	0800f501 	.word	0x0800f501

0800cf64 <_scanf_i>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	4698      	mov	r8, r3
 800cf6a:	4b74      	ldr	r3, [pc, #464]	; (800d13c <_scanf_i+0x1d8>)
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	4682      	mov	sl, r0
 800cf70:	4616      	mov	r6, r2
 800cf72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf76:	b087      	sub	sp, #28
 800cf78:	ab03      	add	r3, sp, #12
 800cf7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf7e:	4b70      	ldr	r3, [pc, #448]	; (800d140 <_scanf_i+0x1dc>)
 800cf80:	69a1      	ldr	r1, [r4, #24]
 800cf82:	4a70      	ldr	r2, [pc, #448]	; (800d144 <_scanf_i+0x1e0>)
 800cf84:	2903      	cmp	r1, #3
 800cf86:	bf18      	it	ne
 800cf88:	461a      	movne	r2, r3
 800cf8a:	68a3      	ldr	r3, [r4, #8]
 800cf8c:	9201      	str	r2, [sp, #4]
 800cf8e:	1e5a      	subs	r2, r3, #1
 800cf90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf94:	bf88      	it	hi
 800cf96:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf9a:	4627      	mov	r7, r4
 800cf9c:	bf82      	ittt	hi
 800cf9e:	eb03 0905 	addhi.w	r9, r3, r5
 800cfa2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cfa6:	60a3      	strhi	r3, [r4, #8]
 800cfa8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cfac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cfb0:	bf98      	it	ls
 800cfb2:	f04f 0900 	movls.w	r9, #0
 800cfb6:	6023      	str	r3, [r4, #0]
 800cfb8:	463d      	mov	r5, r7
 800cfba:	f04f 0b00 	mov.w	fp, #0
 800cfbe:	6831      	ldr	r1, [r6, #0]
 800cfc0:	ab03      	add	r3, sp, #12
 800cfc2:	7809      	ldrb	r1, [r1, #0]
 800cfc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	f7f3 f909 	bl	80001e0 <memchr>
 800cfce:	b328      	cbz	r0, 800d01c <_scanf_i+0xb8>
 800cfd0:	f1bb 0f01 	cmp.w	fp, #1
 800cfd4:	d159      	bne.n	800d08a <_scanf_i+0x126>
 800cfd6:	6862      	ldr	r2, [r4, #4]
 800cfd8:	b92a      	cbnz	r2, 800cfe6 <_scanf_i+0x82>
 800cfda:	6822      	ldr	r2, [r4, #0]
 800cfdc:	2308      	movs	r3, #8
 800cfde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfe2:	6063      	str	r3, [r4, #4]
 800cfe4:	6022      	str	r2, [r4, #0]
 800cfe6:	6822      	ldr	r2, [r4, #0]
 800cfe8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cfec:	6022      	str	r2, [r4, #0]
 800cfee:	68a2      	ldr	r2, [r4, #8]
 800cff0:	1e51      	subs	r1, r2, #1
 800cff2:	60a1      	str	r1, [r4, #8]
 800cff4:	b192      	cbz	r2, 800d01c <_scanf_i+0xb8>
 800cff6:	6832      	ldr	r2, [r6, #0]
 800cff8:	1c51      	adds	r1, r2, #1
 800cffa:	6031      	str	r1, [r6, #0]
 800cffc:	7812      	ldrb	r2, [r2, #0]
 800cffe:	f805 2b01 	strb.w	r2, [r5], #1
 800d002:	6872      	ldr	r2, [r6, #4]
 800d004:	3a01      	subs	r2, #1
 800d006:	2a00      	cmp	r2, #0
 800d008:	6072      	str	r2, [r6, #4]
 800d00a:	dc07      	bgt.n	800d01c <_scanf_i+0xb8>
 800d00c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d010:	4631      	mov	r1, r6
 800d012:	4650      	mov	r0, sl
 800d014:	4790      	blx	r2
 800d016:	2800      	cmp	r0, #0
 800d018:	f040 8085 	bne.w	800d126 <_scanf_i+0x1c2>
 800d01c:	f10b 0b01 	add.w	fp, fp, #1
 800d020:	f1bb 0f03 	cmp.w	fp, #3
 800d024:	d1cb      	bne.n	800cfbe <_scanf_i+0x5a>
 800d026:	6863      	ldr	r3, [r4, #4]
 800d028:	b90b      	cbnz	r3, 800d02e <_scanf_i+0xca>
 800d02a:	230a      	movs	r3, #10
 800d02c:	6063      	str	r3, [r4, #4]
 800d02e:	6863      	ldr	r3, [r4, #4]
 800d030:	4945      	ldr	r1, [pc, #276]	; (800d148 <_scanf_i+0x1e4>)
 800d032:	6960      	ldr	r0, [r4, #20]
 800d034:	1ac9      	subs	r1, r1, r3
 800d036:	f000 f937 	bl	800d2a8 <__sccl>
 800d03a:	f04f 0b00 	mov.w	fp, #0
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	6822      	ldr	r2, [r4, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d03d      	beq.n	800d0c2 <_scanf_i+0x15e>
 800d046:	6831      	ldr	r1, [r6, #0]
 800d048:	6960      	ldr	r0, [r4, #20]
 800d04a:	f891 c000 	ldrb.w	ip, [r1]
 800d04e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d052:	2800      	cmp	r0, #0
 800d054:	d035      	beq.n	800d0c2 <_scanf_i+0x15e>
 800d056:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d05a:	d124      	bne.n	800d0a6 <_scanf_i+0x142>
 800d05c:	0510      	lsls	r0, r2, #20
 800d05e:	d522      	bpl.n	800d0a6 <_scanf_i+0x142>
 800d060:	f10b 0b01 	add.w	fp, fp, #1
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	d003      	beq.n	800d072 <_scanf_i+0x10e>
 800d06a:	3301      	adds	r3, #1
 800d06c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d070:	60a3      	str	r3, [r4, #8]
 800d072:	6873      	ldr	r3, [r6, #4]
 800d074:	3b01      	subs	r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	6073      	str	r3, [r6, #4]
 800d07a:	dd1b      	ble.n	800d0b4 <_scanf_i+0x150>
 800d07c:	6833      	ldr	r3, [r6, #0]
 800d07e:	3301      	adds	r3, #1
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	68a3      	ldr	r3, [r4, #8]
 800d084:	3b01      	subs	r3, #1
 800d086:	60a3      	str	r3, [r4, #8]
 800d088:	e7d9      	b.n	800d03e <_scanf_i+0xda>
 800d08a:	f1bb 0f02 	cmp.w	fp, #2
 800d08e:	d1ae      	bne.n	800cfee <_scanf_i+0x8a>
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d096:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d09a:	d1bf      	bne.n	800d01c <_scanf_i+0xb8>
 800d09c:	2310      	movs	r3, #16
 800d09e:	6063      	str	r3, [r4, #4]
 800d0a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0a4:	e7a2      	b.n	800cfec <_scanf_i+0x88>
 800d0a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d0aa:	6022      	str	r2, [r4, #0]
 800d0ac:	780b      	ldrb	r3, [r1, #0]
 800d0ae:	f805 3b01 	strb.w	r3, [r5], #1
 800d0b2:	e7de      	b.n	800d072 <_scanf_i+0x10e>
 800d0b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4650      	mov	r0, sl
 800d0bc:	4798      	blx	r3
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0df      	beq.n	800d082 <_scanf_i+0x11e>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	05d9      	lsls	r1, r3, #23
 800d0c6:	d50d      	bpl.n	800d0e4 <_scanf_i+0x180>
 800d0c8:	42bd      	cmp	r5, r7
 800d0ca:	d909      	bls.n	800d0e0 <_scanf_i+0x17c>
 800d0cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d0d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	4798      	blx	r3
 800d0da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d0de:	464d      	mov	r5, r9
 800d0e0:	42bd      	cmp	r5, r7
 800d0e2:	d028      	beq.n	800d136 <_scanf_i+0x1d2>
 800d0e4:	6822      	ldr	r2, [r4, #0]
 800d0e6:	f012 0210 	ands.w	r2, r2, #16
 800d0ea:	d113      	bne.n	800d114 <_scanf_i+0x1b0>
 800d0ec:	702a      	strb	r2, [r5, #0]
 800d0ee:	6863      	ldr	r3, [r4, #4]
 800d0f0:	9e01      	ldr	r6, [sp, #4]
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	4650      	mov	r0, sl
 800d0f6:	47b0      	blx	r6
 800d0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d0fc:	6821      	ldr	r1, [r4, #0]
 800d0fe:	1d1a      	adds	r2, r3, #4
 800d100:	f8c8 2000 	str.w	r2, [r8]
 800d104:	f011 0f20 	tst.w	r1, #32
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	d00f      	beq.n	800d12c <_scanf_i+0x1c8>
 800d10c:	6018      	str	r0, [r3, #0]
 800d10e:	68e3      	ldr	r3, [r4, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60e3      	str	r3, [r4, #12]
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	1bed      	subs	r5, r5, r7
 800d118:	445d      	add	r5, fp
 800d11a:	442b      	add	r3, r5
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	2000      	movs	r0, #0
 800d120:	b007      	add	sp, #28
 800d122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d126:	f04f 0b00 	mov.w	fp, #0
 800d12a:	e7ca      	b.n	800d0c2 <_scanf_i+0x15e>
 800d12c:	07ca      	lsls	r2, r1, #31
 800d12e:	bf4c      	ite	mi
 800d130:	8018      	strhmi	r0, [r3, #0]
 800d132:	6018      	strpl	r0, [r3, #0]
 800d134:	e7eb      	b.n	800d10e <_scanf_i+0x1aa>
 800d136:	2001      	movs	r0, #1
 800d138:	e7f2      	b.n	800d120 <_scanf_i+0x1bc>
 800d13a:	bf00      	nop
 800d13c:	0800f224 	.word	0x0800f224
 800d140:	0800ddbd 	.word	0x0800ddbd
 800d144:	0800c5d1 	.word	0x0800c5d1
 800d148:	0800f622 	.word	0x0800f622

0800d14c <__sflush_r>:
 800d14c:	898a      	ldrh	r2, [r1, #12]
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	4605      	mov	r5, r0
 800d154:	0710      	lsls	r0, r2, #28
 800d156:	460c      	mov	r4, r1
 800d158:	d458      	bmi.n	800d20c <__sflush_r+0xc0>
 800d15a:	684b      	ldr	r3, [r1, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	dc05      	bgt.n	800d16c <__sflush_r+0x20>
 800d160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d162:	2b00      	cmp	r3, #0
 800d164:	dc02      	bgt.n	800d16c <__sflush_r+0x20>
 800d166:	2000      	movs	r0, #0
 800d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d16e:	2e00      	cmp	r6, #0
 800d170:	d0f9      	beq.n	800d166 <__sflush_r+0x1a>
 800d172:	2300      	movs	r3, #0
 800d174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d178:	682f      	ldr	r7, [r5, #0]
 800d17a:	6a21      	ldr	r1, [r4, #32]
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	d032      	beq.n	800d1e6 <__sflush_r+0x9a>
 800d180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d182:	89a3      	ldrh	r3, [r4, #12]
 800d184:	075a      	lsls	r2, r3, #29
 800d186:	d505      	bpl.n	800d194 <__sflush_r+0x48>
 800d188:	6863      	ldr	r3, [r4, #4]
 800d18a:	1ac0      	subs	r0, r0, r3
 800d18c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d18e:	b10b      	cbz	r3, 800d194 <__sflush_r+0x48>
 800d190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d192:	1ac0      	subs	r0, r0, r3
 800d194:	2300      	movs	r3, #0
 800d196:	4602      	mov	r2, r0
 800d198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d19a:	6a21      	ldr	r1, [r4, #32]
 800d19c:	4628      	mov	r0, r5
 800d19e:	47b0      	blx	r6
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	d106      	bne.n	800d1b4 <__sflush_r+0x68>
 800d1a6:	6829      	ldr	r1, [r5, #0]
 800d1a8:	291d      	cmp	r1, #29
 800d1aa:	d82b      	bhi.n	800d204 <__sflush_r+0xb8>
 800d1ac:	4a29      	ldr	r2, [pc, #164]	; (800d254 <__sflush_r+0x108>)
 800d1ae:	410a      	asrs	r2, r1
 800d1b0:	07d6      	lsls	r6, r2, #31
 800d1b2:	d427      	bmi.n	800d204 <__sflush_r+0xb8>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	6062      	str	r2, [r4, #4]
 800d1b8:	04d9      	lsls	r1, r3, #19
 800d1ba:	6922      	ldr	r2, [r4, #16]
 800d1bc:	6022      	str	r2, [r4, #0]
 800d1be:	d504      	bpl.n	800d1ca <__sflush_r+0x7e>
 800d1c0:	1c42      	adds	r2, r0, #1
 800d1c2:	d101      	bne.n	800d1c8 <__sflush_r+0x7c>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b903      	cbnz	r3, 800d1ca <__sflush_r+0x7e>
 800d1c8:	6560      	str	r0, [r4, #84]	; 0x54
 800d1ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1cc:	602f      	str	r7, [r5, #0]
 800d1ce:	2900      	cmp	r1, #0
 800d1d0:	d0c9      	beq.n	800d166 <__sflush_r+0x1a>
 800d1d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	d002      	beq.n	800d1e0 <__sflush_r+0x94>
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f7fd fdb6 	bl	800ad4c <_free_r>
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	6360      	str	r0, [r4, #52]	; 0x34
 800d1e4:	e7c0      	b.n	800d168 <__sflush_r+0x1c>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	47b0      	blx	r6
 800d1ec:	1c41      	adds	r1, r0, #1
 800d1ee:	d1c8      	bne.n	800d182 <__sflush_r+0x36>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0c5      	beq.n	800d182 <__sflush_r+0x36>
 800d1f6:	2b1d      	cmp	r3, #29
 800d1f8:	d001      	beq.n	800d1fe <__sflush_r+0xb2>
 800d1fa:	2b16      	cmp	r3, #22
 800d1fc:	d101      	bne.n	800d202 <__sflush_r+0xb6>
 800d1fe:	602f      	str	r7, [r5, #0]
 800d200:	e7b1      	b.n	800d166 <__sflush_r+0x1a>
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	e7ad      	b.n	800d168 <__sflush_r+0x1c>
 800d20c:	690f      	ldr	r7, [r1, #16]
 800d20e:	2f00      	cmp	r7, #0
 800d210:	d0a9      	beq.n	800d166 <__sflush_r+0x1a>
 800d212:	0793      	lsls	r3, r2, #30
 800d214:	680e      	ldr	r6, [r1, #0]
 800d216:	bf08      	it	eq
 800d218:	694b      	ldreq	r3, [r1, #20]
 800d21a:	600f      	str	r7, [r1, #0]
 800d21c:	bf18      	it	ne
 800d21e:	2300      	movne	r3, #0
 800d220:	eba6 0807 	sub.w	r8, r6, r7
 800d224:	608b      	str	r3, [r1, #8]
 800d226:	f1b8 0f00 	cmp.w	r8, #0
 800d22a:	dd9c      	ble.n	800d166 <__sflush_r+0x1a>
 800d22c:	6a21      	ldr	r1, [r4, #32]
 800d22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d230:	4643      	mov	r3, r8
 800d232:	463a      	mov	r2, r7
 800d234:	4628      	mov	r0, r5
 800d236:	47b0      	blx	r6
 800d238:	2800      	cmp	r0, #0
 800d23a:	dc06      	bgt.n	800d24a <__sflush_r+0xfe>
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d248:	e78e      	b.n	800d168 <__sflush_r+0x1c>
 800d24a:	4407      	add	r7, r0
 800d24c:	eba8 0800 	sub.w	r8, r8, r0
 800d250:	e7e9      	b.n	800d226 <__sflush_r+0xda>
 800d252:	bf00      	nop
 800d254:	dfbffffe 	.word	0xdfbffffe

0800d258 <_fflush_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	690b      	ldr	r3, [r1, #16]
 800d25c:	4605      	mov	r5, r0
 800d25e:	460c      	mov	r4, r1
 800d260:	b913      	cbnz	r3, 800d268 <_fflush_r+0x10>
 800d262:	2500      	movs	r5, #0
 800d264:	4628      	mov	r0, r5
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	b118      	cbz	r0, 800d272 <_fflush_r+0x1a>
 800d26a:	6a03      	ldr	r3, [r0, #32]
 800d26c:	b90b      	cbnz	r3, 800d272 <_fflush_r+0x1a>
 800d26e:	f7fc fd2d 	bl	8009ccc <__sinit>
 800d272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d0f3      	beq.n	800d262 <_fflush_r+0xa>
 800d27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d27c:	07d0      	lsls	r0, r2, #31
 800d27e:	d404      	bmi.n	800d28a <_fflush_r+0x32>
 800d280:	0599      	lsls	r1, r3, #22
 800d282:	d402      	bmi.n	800d28a <_fflush_r+0x32>
 800d284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d286:	f7fc fece 	bl	800a026 <__retarget_lock_acquire_recursive>
 800d28a:	4628      	mov	r0, r5
 800d28c:	4621      	mov	r1, r4
 800d28e:	f7ff ff5d 	bl	800d14c <__sflush_r>
 800d292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d294:	07da      	lsls	r2, r3, #31
 800d296:	4605      	mov	r5, r0
 800d298:	d4e4      	bmi.n	800d264 <_fflush_r+0xc>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	059b      	lsls	r3, r3, #22
 800d29e:	d4e1      	bmi.n	800d264 <_fflush_r+0xc>
 800d2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a2:	f7fc fec1 	bl	800a028 <__retarget_lock_release_recursive>
 800d2a6:	e7dd      	b.n	800d264 <_fflush_r+0xc>

0800d2a8 <__sccl>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	780b      	ldrb	r3, [r1, #0]
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	2b5e      	cmp	r3, #94	; 0x5e
 800d2b0:	bf0b      	itete	eq
 800d2b2:	784b      	ldrbeq	r3, [r1, #1]
 800d2b4:	1c4a      	addne	r2, r1, #1
 800d2b6:	1c8a      	addeq	r2, r1, #2
 800d2b8:	2100      	movne	r1, #0
 800d2ba:	bf08      	it	eq
 800d2bc:	2101      	moveq	r1, #1
 800d2be:	3801      	subs	r0, #1
 800d2c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d2c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d2c8:	42a8      	cmp	r0, r5
 800d2ca:	d1fb      	bne.n	800d2c4 <__sccl+0x1c>
 800d2cc:	b90b      	cbnz	r3, 800d2d2 <__sccl+0x2a>
 800d2ce:	1e50      	subs	r0, r2, #1
 800d2d0:	bd70      	pop	{r4, r5, r6, pc}
 800d2d2:	f081 0101 	eor.w	r1, r1, #1
 800d2d6:	54e1      	strb	r1, [r4, r3]
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4602      	mov	r2, r0
 800d2dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d2e0:	2d2d      	cmp	r5, #45	; 0x2d
 800d2e2:	d005      	beq.n	800d2f0 <__sccl+0x48>
 800d2e4:	2d5d      	cmp	r5, #93	; 0x5d
 800d2e6:	d016      	beq.n	800d316 <__sccl+0x6e>
 800d2e8:	2d00      	cmp	r5, #0
 800d2ea:	d0f1      	beq.n	800d2d0 <__sccl+0x28>
 800d2ec:	462b      	mov	r3, r5
 800d2ee:	e7f2      	b.n	800d2d6 <__sccl+0x2e>
 800d2f0:	7846      	ldrb	r6, [r0, #1]
 800d2f2:	2e5d      	cmp	r6, #93	; 0x5d
 800d2f4:	d0fa      	beq.n	800d2ec <__sccl+0x44>
 800d2f6:	42b3      	cmp	r3, r6
 800d2f8:	dcf8      	bgt.n	800d2ec <__sccl+0x44>
 800d2fa:	3002      	adds	r0, #2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	3201      	adds	r2, #1
 800d300:	4296      	cmp	r6, r2
 800d302:	54a1      	strb	r1, [r4, r2]
 800d304:	dcfb      	bgt.n	800d2fe <__sccl+0x56>
 800d306:	1af2      	subs	r2, r6, r3
 800d308:	3a01      	subs	r2, #1
 800d30a:	1c5d      	adds	r5, r3, #1
 800d30c:	42b3      	cmp	r3, r6
 800d30e:	bfa8      	it	ge
 800d310:	2200      	movge	r2, #0
 800d312:	18ab      	adds	r3, r5, r2
 800d314:	e7e1      	b.n	800d2da <__sccl+0x32>
 800d316:	4610      	mov	r0, r2
 800d318:	e7da      	b.n	800d2d0 <__sccl+0x28>

0800d31a <__submore>:
 800d31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	460c      	mov	r4, r1
 800d320:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d326:	4299      	cmp	r1, r3
 800d328:	d11d      	bne.n	800d366 <__submore+0x4c>
 800d32a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d32e:	f7fd fd81 	bl	800ae34 <_malloc_r>
 800d332:	b918      	cbnz	r0, 800d33c <__submore+0x22>
 800d334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d33c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d340:	63a3      	str	r3, [r4, #56]	; 0x38
 800d342:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d346:	6360      	str	r0, [r4, #52]	; 0x34
 800d348:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d34c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d350:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d354:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d358:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d35c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d360:	6020      	str	r0, [r4, #0]
 800d362:	2000      	movs	r0, #0
 800d364:	e7e8      	b.n	800d338 <__submore+0x1e>
 800d366:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d368:	0077      	lsls	r7, r6, #1
 800d36a:	463a      	mov	r2, r7
 800d36c:	f000 fc85 	bl	800dc7a <_realloc_r>
 800d370:	4605      	mov	r5, r0
 800d372:	2800      	cmp	r0, #0
 800d374:	d0de      	beq.n	800d334 <__submore+0x1a>
 800d376:	eb00 0806 	add.w	r8, r0, r6
 800d37a:	4601      	mov	r1, r0
 800d37c:	4632      	mov	r2, r6
 800d37e:	4640      	mov	r0, r8
 800d380:	f7fc fe53 	bl	800a02a <memcpy>
 800d384:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d388:	f8c4 8000 	str.w	r8, [r4]
 800d38c:	e7e9      	b.n	800d362 <__submore+0x48>

0800d38e <__swbuf_r>:
 800d38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d390:	460e      	mov	r6, r1
 800d392:	4614      	mov	r4, r2
 800d394:	4605      	mov	r5, r0
 800d396:	b118      	cbz	r0, 800d3a0 <__swbuf_r+0x12>
 800d398:	6a03      	ldr	r3, [r0, #32]
 800d39a:	b90b      	cbnz	r3, 800d3a0 <__swbuf_r+0x12>
 800d39c:	f7fc fc96 	bl	8009ccc <__sinit>
 800d3a0:	69a3      	ldr	r3, [r4, #24]
 800d3a2:	60a3      	str	r3, [r4, #8]
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	071a      	lsls	r2, r3, #28
 800d3a8:	d525      	bpl.n	800d3f6 <__swbuf_r+0x68>
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	b31b      	cbz	r3, 800d3f6 <__swbuf_r+0x68>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	6922      	ldr	r2, [r4, #16]
 800d3b2:	1a98      	subs	r0, r3, r2
 800d3b4:	6963      	ldr	r3, [r4, #20]
 800d3b6:	b2f6      	uxtb	r6, r6
 800d3b8:	4283      	cmp	r3, r0
 800d3ba:	4637      	mov	r7, r6
 800d3bc:	dc04      	bgt.n	800d3c8 <__swbuf_r+0x3a>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7ff ff49 	bl	800d258 <_fflush_r>
 800d3c6:	b9e0      	cbnz	r0, 800d402 <__swbuf_r+0x74>
 800d3c8:	68a3      	ldr	r3, [r4, #8]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	60a3      	str	r3, [r4, #8]
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	6022      	str	r2, [r4, #0]
 800d3d4:	701e      	strb	r6, [r3, #0]
 800d3d6:	6962      	ldr	r2, [r4, #20]
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d004      	beq.n	800d3e8 <__swbuf_r+0x5a>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	07db      	lsls	r3, r3, #31
 800d3e2:	d506      	bpl.n	800d3f2 <__swbuf_r+0x64>
 800d3e4:	2e0a      	cmp	r6, #10
 800d3e6:	d104      	bne.n	800d3f2 <__swbuf_r+0x64>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f7ff ff34 	bl	800d258 <_fflush_r>
 800d3f0:	b938      	cbnz	r0, 800d402 <__swbuf_r+0x74>
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f000 f805 	bl	800d408 <__swsetup_r>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d0d5      	beq.n	800d3ae <__swbuf_r+0x20>
 800d402:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d406:	e7f4      	b.n	800d3f2 <__swbuf_r+0x64>

0800d408 <__swsetup_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4b2a      	ldr	r3, [pc, #168]	; (800d4b4 <__swsetup_r+0xac>)
 800d40c:	4605      	mov	r5, r0
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	460c      	mov	r4, r1
 800d412:	b118      	cbz	r0, 800d41c <__swsetup_r+0x14>
 800d414:	6a03      	ldr	r3, [r0, #32]
 800d416:	b90b      	cbnz	r3, 800d41c <__swsetup_r+0x14>
 800d418:	f7fc fc58 	bl	8009ccc <__sinit>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d422:	0718      	lsls	r0, r3, #28
 800d424:	d422      	bmi.n	800d46c <__swsetup_r+0x64>
 800d426:	06d9      	lsls	r1, r3, #27
 800d428:	d407      	bmi.n	800d43a <__swsetup_r+0x32>
 800d42a:	2309      	movs	r3, #9
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d432:	81a3      	strh	r3, [r4, #12]
 800d434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d438:	e034      	b.n	800d4a4 <__swsetup_r+0x9c>
 800d43a:	0758      	lsls	r0, r3, #29
 800d43c:	d512      	bpl.n	800d464 <__swsetup_r+0x5c>
 800d43e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d440:	b141      	cbz	r1, 800d454 <__swsetup_r+0x4c>
 800d442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d446:	4299      	cmp	r1, r3
 800d448:	d002      	beq.n	800d450 <__swsetup_r+0x48>
 800d44a:	4628      	mov	r0, r5
 800d44c:	f7fd fc7e 	bl	800ad4c <_free_r>
 800d450:	2300      	movs	r3, #0
 800d452:	6363      	str	r3, [r4, #52]	; 0x34
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d45a:	81a3      	strh	r3, [r4, #12]
 800d45c:	2300      	movs	r3, #0
 800d45e:	6063      	str	r3, [r4, #4]
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	6023      	str	r3, [r4, #0]
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f043 0308 	orr.w	r3, r3, #8
 800d46a:	81a3      	strh	r3, [r4, #12]
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	b94b      	cbnz	r3, 800d484 <__swsetup_r+0x7c>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d47a:	d003      	beq.n	800d484 <__swsetup_r+0x7c>
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 fce4 	bl	800de4c <__smakebuf_r>
 800d484:	89a0      	ldrh	r0, [r4, #12]
 800d486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d48a:	f010 0301 	ands.w	r3, r0, #1
 800d48e:	d00a      	beq.n	800d4a6 <__swsetup_r+0x9e>
 800d490:	2300      	movs	r3, #0
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6963      	ldr	r3, [r4, #20]
 800d496:	425b      	negs	r3, r3
 800d498:	61a3      	str	r3, [r4, #24]
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	b943      	cbnz	r3, 800d4b0 <__swsetup_r+0xa8>
 800d49e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4a2:	d1c4      	bne.n	800d42e <__swsetup_r+0x26>
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	0781      	lsls	r1, r0, #30
 800d4a8:	bf58      	it	pl
 800d4aa:	6963      	ldrpl	r3, [r4, #20]
 800d4ac:	60a3      	str	r3, [r4, #8]
 800d4ae:	e7f4      	b.n	800d49a <__swsetup_r+0x92>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e7f7      	b.n	800d4a4 <__swsetup_r+0x9c>
 800d4b4:	200000e8 	.word	0x200000e8

0800d4b8 <memmove>:
 800d4b8:	4288      	cmp	r0, r1
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	eb01 0402 	add.w	r4, r1, r2
 800d4c0:	d902      	bls.n	800d4c8 <memmove+0x10>
 800d4c2:	4284      	cmp	r4, r0
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	d807      	bhi.n	800d4d8 <memmove+0x20>
 800d4c8:	1e43      	subs	r3, r0, #1
 800d4ca:	42a1      	cmp	r1, r4
 800d4cc:	d008      	beq.n	800d4e0 <memmove+0x28>
 800d4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4d6:	e7f8      	b.n	800d4ca <memmove+0x12>
 800d4d8:	4402      	add	r2, r0
 800d4da:	4601      	mov	r1, r0
 800d4dc:	428a      	cmp	r2, r1
 800d4de:	d100      	bne.n	800d4e2 <memmove+0x2a>
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ea:	e7f7      	b.n	800d4dc <memmove+0x24>

0800d4ec <strncmp>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	b16a      	cbz	r2, 800d50c <strncmp+0x20>
 800d4f0:	3901      	subs	r1, #1
 800d4f2:	1884      	adds	r4, r0, r2
 800d4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d103      	bne.n	800d508 <strncmp+0x1c>
 800d500:	42a0      	cmp	r0, r4
 800d502:	d001      	beq.n	800d508 <strncmp+0x1c>
 800d504:	2a00      	cmp	r2, #0
 800d506:	d1f5      	bne.n	800d4f4 <strncmp+0x8>
 800d508:	1ad0      	subs	r0, r2, r3
 800d50a:	bd10      	pop	{r4, pc}
 800d50c:	4610      	mov	r0, r2
 800d50e:	e7fc      	b.n	800d50a <strncmp+0x1e>

0800d510 <_sbrk_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4d06      	ldr	r5, [pc, #24]	; (800d52c <_sbrk_r+0x1c>)
 800d514:	2300      	movs	r3, #0
 800d516:	4604      	mov	r4, r0
 800d518:	4608      	mov	r0, r1
 800d51a:	602b      	str	r3, [r5, #0]
 800d51c:	f7f4 fe32 	bl	8002184 <_sbrk>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_sbrk_r+0x1a>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b103      	cbz	r3, 800d52a <_sbrk_r+0x1a>
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	2000592c 	.word	0x2000592c

0800d530 <nan>:
 800d530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d538 <nan+0x8>
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	00000000 	.word	0x00000000
 800d53c:	7ff80000 	.word	0x7ff80000

0800d540 <__assert_func>:
 800d540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d542:	4614      	mov	r4, r2
 800d544:	461a      	mov	r2, r3
 800d546:	4b09      	ldr	r3, [pc, #36]	; (800d56c <__assert_func+0x2c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4605      	mov	r5, r0
 800d54c:	68d8      	ldr	r0, [r3, #12]
 800d54e:	b14c      	cbz	r4, 800d564 <__assert_func+0x24>
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <__assert_func+0x30>)
 800d552:	9100      	str	r1, [sp, #0]
 800d554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d558:	4906      	ldr	r1, [pc, #24]	; (800d574 <__assert_func+0x34>)
 800d55a:	462b      	mov	r3, r5
 800d55c:	f000 fc3e 	bl	800dddc <fiprintf>
 800d560:	f000 fcd2 	bl	800df08 <abort>
 800d564:	4b04      	ldr	r3, [pc, #16]	; (800d578 <__assert_func+0x38>)
 800d566:	461c      	mov	r4, r3
 800d568:	e7f3      	b.n	800d552 <__assert_func+0x12>
 800d56a:	bf00      	nop
 800d56c:	200000e8 	.word	0x200000e8
 800d570:	0800f635 	.word	0x0800f635
 800d574:	0800f642 	.word	0x0800f642
 800d578:	0800f670 	.word	0x0800f670

0800d57c <_calloc_r>:
 800d57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d57e:	fba1 2402 	umull	r2, r4, r1, r2
 800d582:	b94c      	cbnz	r4, 800d598 <_calloc_r+0x1c>
 800d584:	4611      	mov	r1, r2
 800d586:	9201      	str	r2, [sp, #4]
 800d588:	f7fd fc54 	bl	800ae34 <_malloc_r>
 800d58c:	9a01      	ldr	r2, [sp, #4]
 800d58e:	4605      	mov	r5, r0
 800d590:	b930      	cbnz	r0, 800d5a0 <_calloc_r+0x24>
 800d592:	4628      	mov	r0, r5
 800d594:	b003      	add	sp, #12
 800d596:	bd30      	pop	{r4, r5, pc}
 800d598:	220c      	movs	r2, #12
 800d59a:	6002      	str	r2, [r0, #0]
 800d59c:	2500      	movs	r5, #0
 800d59e:	e7f8      	b.n	800d592 <_calloc_r+0x16>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	f7fc fc6c 	bl	8009e7e <memset>
 800d5a6:	e7f4      	b.n	800d592 <_calloc_r+0x16>

0800d5a8 <rshift>:
 800d5a8:	6903      	ldr	r3, [r0, #16]
 800d5aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5b6:	f100 0414 	add.w	r4, r0, #20
 800d5ba:	dd45      	ble.n	800d648 <rshift+0xa0>
 800d5bc:	f011 011f 	ands.w	r1, r1, #31
 800d5c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5c8:	d10c      	bne.n	800d5e4 <rshift+0x3c>
 800d5ca:	f100 0710 	add.w	r7, r0, #16
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	42b1      	cmp	r1, r6
 800d5d2:	d334      	bcc.n	800d63e <rshift+0x96>
 800d5d4:	1a9b      	subs	r3, r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	1eea      	subs	r2, r5, #3
 800d5da:	4296      	cmp	r6, r2
 800d5dc:	bf38      	it	cc
 800d5de:	2300      	movcc	r3, #0
 800d5e0:	4423      	add	r3, r4
 800d5e2:	e015      	b.n	800d610 <rshift+0x68>
 800d5e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d5e8:	f1c1 0820 	rsb	r8, r1, #32
 800d5ec:	40cf      	lsrs	r7, r1
 800d5ee:	f105 0e04 	add.w	lr, r5, #4
 800d5f2:	46a1      	mov	r9, r4
 800d5f4:	4576      	cmp	r6, lr
 800d5f6:	46f4      	mov	ip, lr
 800d5f8:	d815      	bhi.n	800d626 <rshift+0x7e>
 800d5fa:	1a9a      	subs	r2, r3, r2
 800d5fc:	0092      	lsls	r2, r2, #2
 800d5fe:	3a04      	subs	r2, #4
 800d600:	3501      	adds	r5, #1
 800d602:	42ae      	cmp	r6, r5
 800d604:	bf38      	it	cc
 800d606:	2200      	movcc	r2, #0
 800d608:	18a3      	adds	r3, r4, r2
 800d60a:	50a7      	str	r7, [r4, r2]
 800d60c:	b107      	cbz	r7, 800d610 <rshift+0x68>
 800d60e:	3304      	adds	r3, #4
 800d610:	1b1a      	subs	r2, r3, r4
 800d612:	42a3      	cmp	r3, r4
 800d614:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d618:	bf08      	it	eq
 800d61a:	2300      	moveq	r3, #0
 800d61c:	6102      	str	r2, [r0, #16]
 800d61e:	bf08      	it	eq
 800d620:	6143      	streq	r3, [r0, #20]
 800d622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d626:	f8dc c000 	ldr.w	ip, [ip]
 800d62a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d62e:	ea4c 0707 	orr.w	r7, ip, r7
 800d632:	f849 7b04 	str.w	r7, [r9], #4
 800d636:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d63a:	40cf      	lsrs	r7, r1
 800d63c:	e7da      	b.n	800d5f4 <rshift+0x4c>
 800d63e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d642:	f847 cf04 	str.w	ip, [r7, #4]!
 800d646:	e7c3      	b.n	800d5d0 <rshift+0x28>
 800d648:	4623      	mov	r3, r4
 800d64a:	e7e1      	b.n	800d610 <rshift+0x68>

0800d64c <__hexdig_fun>:
 800d64c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d650:	2b09      	cmp	r3, #9
 800d652:	d802      	bhi.n	800d65a <__hexdig_fun+0xe>
 800d654:	3820      	subs	r0, #32
 800d656:	b2c0      	uxtb	r0, r0
 800d658:	4770      	bx	lr
 800d65a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d65e:	2b05      	cmp	r3, #5
 800d660:	d801      	bhi.n	800d666 <__hexdig_fun+0x1a>
 800d662:	3847      	subs	r0, #71	; 0x47
 800d664:	e7f7      	b.n	800d656 <__hexdig_fun+0xa>
 800d666:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d66a:	2b05      	cmp	r3, #5
 800d66c:	d801      	bhi.n	800d672 <__hexdig_fun+0x26>
 800d66e:	3827      	subs	r0, #39	; 0x27
 800d670:	e7f1      	b.n	800d656 <__hexdig_fun+0xa>
 800d672:	2000      	movs	r0, #0
 800d674:	4770      	bx	lr
	...

0800d678 <__gethex>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	4617      	mov	r7, r2
 800d67e:	680a      	ldr	r2, [r1, #0]
 800d680:	b085      	sub	sp, #20
 800d682:	f102 0b02 	add.w	fp, r2, #2
 800d686:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d68a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d68e:	4681      	mov	r9, r0
 800d690:	468a      	mov	sl, r1
 800d692:	9302      	str	r3, [sp, #8]
 800d694:	32fe      	adds	r2, #254	; 0xfe
 800d696:	eb02 030b 	add.w	r3, r2, fp
 800d69a:	46d8      	mov	r8, fp
 800d69c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	2830      	cmp	r0, #48	; 0x30
 800d6a4:	d0f7      	beq.n	800d696 <__gethex+0x1e>
 800d6a6:	f7ff ffd1 	bl	800d64c <__hexdig_fun>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d138      	bne.n	800d722 <__gethex+0xaa>
 800d6b0:	49a7      	ldr	r1, [pc, #668]	; (800d950 <__gethex+0x2d8>)
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4640      	mov	r0, r8
 800d6b6:	f7ff ff19 	bl	800d4ec <strncmp>
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d169      	bne.n	800d794 <__gethex+0x11c>
 800d6c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d6c4:	465d      	mov	r5, fp
 800d6c6:	f7ff ffc1 	bl	800d64c <__hexdig_fun>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d064      	beq.n	800d798 <__gethex+0x120>
 800d6ce:	465a      	mov	r2, fp
 800d6d0:	7810      	ldrb	r0, [r2, #0]
 800d6d2:	2830      	cmp	r0, #48	; 0x30
 800d6d4:	4690      	mov	r8, r2
 800d6d6:	f102 0201 	add.w	r2, r2, #1
 800d6da:	d0f9      	beq.n	800d6d0 <__gethex+0x58>
 800d6dc:	f7ff ffb6 	bl	800d64c <__hexdig_fun>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	fab0 f480 	clz	r4, r0
 800d6e6:	0964      	lsrs	r4, r4, #5
 800d6e8:	465e      	mov	r6, fp
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	4615      	mov	r5, r2
 800d6f0:	3201      	adds	r2, #1
 800d6f2:	7828      	ldrb	r0, [r5, #0]
 800d6f4:	f7ff ffaa 	bl	800d64c <__hexdig_fun>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d1f8      	bne.n	800d6ee <__gethex+0x76>
 800d6fc:	4994      	ldr	r1, [pc, #592]	; (800d950 <__gethex+0x2d8>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	4628      	mov	r0, r5
 800d702:	f7ff fef3 	bl	800d4ec <strncmp>
 800d706:	b978      	cbnz	r0, 800d728 <__gethex+0xb0>
 800d708:	b946      	cbnz	r6, 800d71c <__gethex+0xa4>
 800d70a:	1c6e      	adds	r6, r5, #1
 800d70c:	4632      	mov	r2, r6
 800d70e:	4615      	mov	r5, r2
 800d710:	3201      	adds	r2, #1
 800d712:	7828      	ldrb	r0, [r5, #0]
 800d714:	f7ff ff9a 	bl	800d64c <__hexdig_fun>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d1f8      	bne.n	800d70e <__gethex+0x96>
 800d71c:	1b73      	subs	r3, r6, r5
 800d71e:	009e      	lsls	r6, r3, #2
 800d720:	e004      	b.n	800d72c <__gethex+0xb4>
 800d722:	2400      	movs	r4, #0
 800d724:	4626      	mov	r6, r4
 800d726:	e7e1      	b.n	800d6ec <__gethex+0x74>
 800d728:	2e00      	cmp	r6, #0
 800d72a:	d1f7      	bne.n	800d71c <__gethex+0xa4>
 800d72c:	782b      	ldrb	r3, [r5, #0]
 800d72e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d732:	2b50      	cmp	r3, #80	; 0x50
 800d734:	d13d      	bne.n	800d7b2 <__gethex+0x13a>
 800d736:	786b      	ldrb	r3, [r5, #1]
 800d738:	2b2b      	cmp	r3, #43	; 0x2b
 800d73a:	d02f      	beq.n	800d79c <__gethex+0x124>
 800d73c:	2b2d      	cmp	r3, #45	; 0x2d
 800d73e:	d031      	beq.n	800d7a4 <__gethex+0x12c>
 800d740:	1c69      	adds	r1, r5, #1
 800d742:	f04f 0b00 	mov.w	fp, #0
 800d746:	7808      	ldrb	r0, [r1, #0]
 800d748:	f7ff ff80 	bl	800d64c <__hexdig_fun>
 800d74c:	1e42      	subs	r2, r0, #1
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	2a18      	cmp	r2, #24
 800d752:	d82e      	bhi.n	800d7b2 <__gethex+0x13a>
 800d754:	f1a0 0210 	sub.w	r2, r0, #16
 800d758:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d75c:	f7ff ff76 	bl	800d64c <__hexdig_fun>
 800d760:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d764:	fa5f fc8c 	uxtb.w	ip, ip
 800d768:	f1bc 0f18 	cmp.w	ip, #24
 800d76c:	d91d      	bls.n	800d7aa <__gethex+0x132>
 800d76e:	f1bb 0f00 	cmp.w	fp, #0
 800d772:	d000      	beq.n	800d776 <__gethex+0xfe>
 800d774:	4252      	negs	r2, r2
 800d776:	4416      	add	r6, r2
 800d778:	f8ca 1000 	str.w	r1, [sl]
 800d77c:	b1dc      	cbz	r4, 800d7b6 <__gethex+0x13e>
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bf14      	ite	ne
 800d784:	f04f 0800 	movne.w	r8, #0
 800d788:	f04f 0806 	moveq.w	r8, #6
 800d78c:	4640      	mov	r0, r8
 800d78e:	b005      	add	sp, #20
 800d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d794:	4645      	mov	r5, r8
 800d796:	4626      	mov	r6, r4
 800d798:	2401      	movs	r4, #1
 800d79a:	e7c7      	b.n	800d72c <__gethex+0xb4>
 800d79c:	f04f 0b00 	mov.w	fp, #0
 800d7a0:	1ca9      	adds	r1, r5, #2
 800d7a2:	e7d0      	b.n	800d746 <__gethex+0xce>
 800d7a4:	f04f 0b01 	mov.w	fp, #1
 800d7a8:	e7fa      	b.n	800d7a0 <__gethex+0x128>
 800d7aa:	230a      	movs	r3, #10
 800d7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800d7b0:	e7d0      	b.n	800d754 <__gethex+0xdc>
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	e7e0      	b.n	800d778 <__gethex+0x100>
 800d7b6:	eba5 0308 	sub.w	r3, r5, r8
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	4621      	mov	r1, r4
 800d7be:	2b07      	cmp	r3, #7
 800d7c0:	dc0a      	bgt.n	800d7d8 <__gethex+0x160>
 800d7c2:	4648      	mov	r0, r9
 800d7c4:	f7fd fbc2 	bl	800af4c <_Balloc>
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	b940      	cbnz	r0, 800d7de <__gethex+0x166>
 800d7cc:	4b61      	ldr	r3, [pc, #388]	; (800d954 <__gethex+0x2dc>)
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	21e4      	movs	r1, #228	; 0xe4
 800d7d2:	4861      	ldr	r0, [pc, #388]	; (800d958 <__gethex+0x2e0>)
 800d7d4:	f7ff feb4 	bl	800d540 <__assert_func>
 800d7d8:	3101      	adds	r1, #1
 800d7da:	105b      	asrs	r3, r3, #1
 800d7dc:	e7ef      	b.n	800d7be <__gethex+0x146>
 800d7de:	f100 0a14 	add.w	sl, r0, #20
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	495a      	ldr	r1, [pc, #360]	; (800d950 <__gethex+0x2d8>)
 800d7e6:	f8cd a004 	str.w	sl, [sp, #4]
 800d7ea:	469b      	mov	fp, r3
 800d7ec:	45a8      	cmp	r8, r5
 800d7ee:	d342      	bcc.n	800d876 <__gethex+0x1fe>
 800d7f0:	9801      	ldr	r0, [sp, #4]
 800d7f2:	f840 bb04 	str.w	fp, [r0], #4
 800d7f6:	eba0 000a 	sub.w	r0, r0, sl
 800d7fa:	1080      	asrs	r0, r0, #2
 800d7fc:	6120      	str	r0, [r4, #16]
 800d7fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d802:	4658      	mov	r0, fp
 800d804:	f7fd fc94 	bl	800b130 <__hi0bits>
 800d808:	683d      	ldr	r5, [r7, #0]
 800d80a:	eba8 0000 	sub.w	r0, r8, r0
 800d80e:	42a8      	cmp	r0, r5
 800d810:	dd59      	ble.n	800d8c6 <__gethex+0x24e>
 800d812:	eba0 0805 	sub.w	r8, r0, r5
 800d816:	4641      	mov	r1, r8
 800d818:	4620      	mov	r0, r4
 800d81a:	f7fe f823 	bl	800b864 <__any_on>
 800d81e:	4683      	mov	fp, r0
 800d820:	b1b8      	cbz	r0, 800d852 <__gethex+0x1da>
 800d822:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d826:	1159      	asrs	r1, r3, #5
 800d828:	f003 021f 	and.w	r2, r3, #31
 800d82c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d830:	f04f 0b01 	mov.w	fp, #1
 800d834:	fa0b f202 	lsl.w	r2, fp, r2
 800d838:	420a      	tst	r2, r1
 800d83a:	d00a      	beq.n	800d852 <__gethex+0x1da>
 800d83c:	455b      	cmp	r3, fp
 800d83e:	dd06      	ble.n	800d84e <__gethex+0x1d6>
 800d840:	f1a8 0102 	sub.w	r1, r8, #2
 800d844:	4620      	mov	r0, r4
 800d846:	f7fe f80d 	bl	800b864 <__any_on>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d138      	bne.n	800d8c0 <__gethex+0x248>
 800d84e:	f04f 0b02 	mov.w	fp, #2
 800d852:	4641      	mov	r1, r8
 800d854:	4620      	mov	r0, r4
 800d856:	f7ff fea7 	bl	800d5a8 <rshift>
 800d85a:	4446      	add	r6, r8
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	42b3      	cmp	r3, r6
 800d860:	da41      	bge.n	800d8e6 <__gethex+0x26e>
 800d862:	4621      	mov	r1, r4
 800d864:	4648      	mov	r0, r9
 800d866:	f7fd fbb1 	bl	800afcc <_Bfree>
 800d86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d86c:	2300      	movs	r3, #0
 800d86e:	6013      	str	r3, [r2, #0]
 800d870:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d874:	e78a      	b.n	800d78c <__gethex+0x114>
 800d876:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d87a:	2a2e      	cmp	r2, #46	; 0x2e
 800d87c:	d014      	beq.n	800d8a8 <__gethex+0x230>
 800d87e:	2b20      	cmp	r3, #32
 800d880:	d106      	bne.n	800d890 <__gethex+0x218>
 800d882:	9b01      	ldr	r3, [sp, #4]
 800d884:	f843 bb04 	str.w	fp, [r3], #4
 800d888:	f04f 0b00 	mov.w	fp, #0
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	465b      	mov	r3, fp
 800d890:	7828      	ldrb	r0, [r5, #0]
 800d892:	9303      	str	r3, [sp, #12]
 800d894:	f7ff feda 	bl	800d64c <__hexdig_fun>
 800d898:	9b03      	ldr	r3, [sp, #12]
 800d89a:	f000 000f 	and.w	r0, r0, #15
 800d89e:	4098      	lsls	r0, r3
 800d8a0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	e7a1      	b.n	800d7ec <__gethex+0x174>
 800d8a8:	45a8      	cmp	r8, r5
 800d8aa:	d8e8      	bhi.n	800d87e <__gethex+0x206>
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	f7ff fe1b 	bl	800d4ec <strncmp>
 800d8b6:	4926      	ldr	r1, [pc, #152]	; (800d950 <__gethex+0x2d8>)
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d1df      	bne.n	800d87e <__gethex+0x206>
 800d8be:	e795      	b.n	800d7ec <__gethex+0x174>
 800d8c0:	f04f 0b03 	mov.w	fp, #3
 800d8c4:	e7c5      	b.n	800d852 <__gethex+0x1da>
 800d8c6:	da0b      	bge.n	800d8e0 <__gethex+0x268>
 800d8c8:	eba5 0800 	sub.w	r8, r5, r0
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	4648      	mov	r0, r9
 800d8d2:	f7fd fd95 	bl	800b400 <__lshift>
 800d8d6:	eba6 0608 	sub.w	r6, r6, r8
 800d8da:	4604      	mov	r4, r0
 800d8dc:	f100 0a14 	add.w	sl, r0, #20
 800d8e0:	f04f 0b00 	mov.w	fp, #0
 800d8e4:	e7ba      	b.n	800d85c <__gethex+0x1e4>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	42b3      	cmp	r3, r6
 800d8ea:	dd73      	ble.n	800d9d4 <__gethex+0x35c>
 800d8ec:	1b9e      	subs	r6, r3, r6
 800d8ee:	42b5      	cmp	r5, r6
 800d8f0:	dc34      	bgt.n	800d95c <__gethex+0x2e4>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d023      	beq.n	800d940 <__gethex+0x2c8>
 800d8f8:	2b03      	cmp	r3, #3
 800d8fa:	d025      	beq.n	800d948 <__gethex+0x2d0>
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d115      	bne.n	800d92c <__gethex+0x2b4>
 800d900:	42b5      	cmp	r5, r6
 800d902:	d113      	bne.n	800d92c <__gethex+0x2b4>
 800d904:	2d01      	cmp	r5, #1
 800d906:	d10b      	bne.n	800d920 <__gethex+0x2a8>
 800d908:	9a02      	ldr	r2, [sp, #8]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	2301      	movs	r3, #1
 800d910:	6123      	str	r3, [r4, #16]
 800d912:	f8ca 3000 	str.w	r3, [sl]
 800d916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d918:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d91c:	601c      	str	r4, [r3, #0]
 800d91e:	e735      	b.n	800d78c <__gethex+0x114>
 800d920:	1e69      	subs	r1, r5, #1
 800d922:	4620      	mov	r0, r4
 800d924:	f7fd ff9e 	bl	800b864 <__any_on>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d1ed      	bne.n	800d908 <__gethex+0x290>
 800d92c:	4621      	mov	r1, r4
 800d92e:	4648      	mov	r0, r9
 800d930:	f7fd fb4c 	bl	800afcc <_Bfree>
 800d934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d936:	2300      	movs	r3, #0
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d93e:	e725      	b.n	800d78c <__gethex+0x114>
 800d940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1f2      	bne.n	800d92c <__gethex+0x2b4>
 800d946:	e7df      	b.n	800d908 <__gethex+0x290>
 800d948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1dc      	bne.n	800d908 <__gethex+0x290>
 800d94e:	e7ed      	b.n	800d92c <__gethex+0x2b4>
 800d950:	0800f4ac 	.word	0x0800f4ac
 800d954:	0800f33f 	.word	0x0800f33f
 800d958:	0800f671 	.word	0x0800f671
 800d95c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d960:	f1bb 0f00 	cmp.w	fp, #0
 800d964:	d133      	bne.n	800d9ce <__gethex+0x356>
 800d966:	f1b8 0f00 	cmp.w	r8, #0
 800d96a:	d004      	beq.n	800d976 <__gethex+0x2fe>
 800d96c:	4641      	mov	r1, r8
 800d96e:	4620      	mov	r0, r4
 800d970:	f7fd ff78 	bl	800b864 <__any_on>
 800d974:	4683      	mov	fp, r0
 800d976:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d97a:	2301      	movs	r3, #1
 800d97c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d980:	f008 081f 	and.w	r8, r8, #31
 800d984:	fa03 f308 	lsl.w	r3, r3, r8
 800d988:	4213      	tst	r3, r2
 800d98a:	4631      	mov	r1, r6
 800d98c:	4620      	mov	r0, r4
 800d98e:	bf18      	it	ne
 800d990:	f04b 0b02 	orrne.w	fp, fp, #2
 800d994:	1bad      	subs	r5, r5, r6
 800d996:	f7ff fe07 	bl	800d5a8 <rshift>
 800d99a:	687e      	ldr	r6, [r7, #4]
 800d99c:	f04f 0802 	mov.w	r8, #2
 800d9a0:	f1bb 0f00 	cmp.w	fp, #0
 800d9a4:	d04a      	beq.n	800da3c <__gethex+0x3c4>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d016      	beq.n	800d9da <__gethex+0x362>
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d018      	beq.n	800d9e2 <__gethex+0x36a>
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d109      	bne.n	800d9c8 <__gethex+0x350>
 800d9b4:	f01b 0f02 	tst.w	fp, #2
 800d9b8:	d006      	beq.n	800d9c8 <__gethex+0x350>
 800d9ba:	f8da 3000 	ldr.w	r3, [sl]
 800d9be:	ea4b 0b03 	orr.w	fp, fp, r3
 800d9c2:	f01b 0f01 	tst.w	fp, #1
 800d9c6:	d10f      	bne.n	800d9e8 <__gethex+0x370>
 800d9c8:	f048 0810 	orr.w	r8, r8, #16
 800d9cc:	e036      	b.n	800da3c <__gethex+0x3c4>
 800d9ce:	f04f 0b01 	mov.w	fp, #1
 800d9d2:	e7d0      	b.n	800d976 <__gethex+0x2fe>
 800d9d4:	f04f 0801 	mov.w	r8, #1
 800d9d8:	e7e2      	b.n	800d9a0 <__gethex+0x328>
 800d9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9dc:	f1c3 0301 	rsb	r3, r3, #1
 800d9e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d0ef      	beq.n	800d9c8 <__gethex+0x350>
 800d9e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d9ec:	f104 0214 	add.w	r2, r4, #20
 800d9f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	4694      	mov	ip, r2
 800d9fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800da02:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800da06:	d01e      	beq.n	800da46 <__gethex+0x3ce>
 800da08:	3101      	adds	r1, #1
 800da0a:	f8cc 1000 	str.w	r1, [ip]
 800da0e:	f1b8 0f02 	cmp.w	r8, #2
 800da12:	f104 0214 	add.w	r2, r4, #20
 800da16:	d13d      	bne.n	800da94 <__gethex+0x41c>
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	42ab      	cmp	r3, r5
 800da1e:	d10b      	bne.n	800da38 <__gethex+0x3c0>
 800da20:	1169      	asrs	r1, r5, #5
 800da22:	2301      	movs	r3, #1
 800da24:	f005 051f 	and.w	r5, r5, #31
 800da28:	fa03 f505 	lsl.w	r5, r3, r5
 800da2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da30:	421d      	tst	r5, r3
 800da32:	bf18      	it	ne
 800da34:	f04f 0801 	movne.w	r8, #1
 800da38:	f048 0820 	orr.w	r8, r8, #32
 800da3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da3e:	601c      	str	r4, [r3, #0]
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	601e      	str	r6, [r3, #0]
 800da44:	e6a2      	b.n	800d78c <__gethex+0x114>
 800da46:	4290      	cmp	r0, r2
 800da48:	f842 3c04 	str.w	r3, [r2, #-4]
 800da4c:	d8d6      	bhi.n	800d9fc <__gethex+0x384>
 800da4e:	68a2      	ldr	r2, [r4, #8]
 800da50:	4593      	cmp	fp, r2
 800da52:	db17      	blt.n	800da84 <__gethex+0x40c>
 800da54:	6861      	ldr	r1, [r4, #4]
 800da56:	4648      	mov	r0, r9
 800da58:	3101      	adds	r1, #1
 800da5a:	f7fd fa77 	bl	800af4c <_Balloc>
 800da5e:	4682      	mov	sl, r0
 800da60:	b918      	cbnz	r0, 800da6a <__gethex+0x3f2>
 800da62:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <__gethex+0x458>)
 800da64:	4602      	mov	r2, r0
 800da66:	2184      	movs	r1, #132	; 0x84
 800da68:	e6b3      	b.n	800d7d2 <__gethex+0x15a>
 800da6a:	6922      	ldr	r2, [r4, #16]
 800da6c:	3202      	adds	r2, #2
 800da6e:	f104 010c 	add.w	r1, r4, #12
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	300c      	adds	r0, #12
 800da76:	f7fc fad8 	bl	800a02a <memcpy>
 800da7a:	4621      	mov	r1, r4
 800da7c:	4648      	mov	r0, r9
 800da7e:	f7fd faa5 	bl	800afcc <_Bfree>
 800da82:	4654      	mov	r4, sl
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	1c51      	adds	r1, r2, #1
 800da88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da8c:	6121      	str	r1, [r4, #16]
 800da8e:	2101      	movs	r1, #1
 800da90:	6151      	str	r1, [r2, #20]
 800da92:	e7bc      	b.n	800da0e <__gethex+0x396>
 800da94:	6921      	ldr	r1, [r4, #16]
 800da96:	4559      	cmp	r1, fp
 800da98:	dd0b      	ble.n	800dab2 <__gethex+0x43a>
 800da9a:	2101      	movs	r1, #1
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7ff fd83 	bl	800d5a8 <rshift>
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	3601      	adds	r6, #1
 800daa6:	42b3      	cmp	r3, r6
 800daa8:	f6ff aedb 	blt.w	800d862 <__gethex+0x1ea>
 800daac:	f04f 0801 	mov.w	r8, #1
 800dab0:	e7c2      	b.n	800da38 <__gethex+0x3c0>
 800dab2:	f015 051f 	ands.w	r5, r5, #31
 800dab6:	d0f9      	beq.n	800daac <__gethex+0x434>
 800dab8:	9b01      	ldr	r3, [sp, #4]
 800daba:	441a      	add	r2, r3
 800dabc:	f1c5 0520 	rsb	r5, r5, #32
 800dac0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800dac4:	f7fd fb34 	bl	800b130 <__hi0bits>
 800dac8:	42a8      	cmp	r0, r5
 800daca:	dbe6      	blt.n	800da9a <__gethex+0x422>
 800dacc:	e7ee      	b.n	800daac <__gethex+0x434>
 800dace:	bf00      	nop
 800dad0:	0800f33f 	.word	0x0800f33f

0800dad4 <L_shift>:
 800dad4:	f1c2 0208 	rsb	r2, r2, #8
 800dad8:	0092      	lsls	r2, r2, #2
 800dada:	b570      	push	{r4, r5, r6, lr}
 800dadc:	f1c2 0620 	rsb	r6, r2, #32
 800dae0:	6843      	ldr	r3, [r0, #4]
 800dae2:	6804      	ldr	r4, [r0, #0]
 800dae4:	fa03 f506 	lsl.w	r5, r3, r6
 800dae8:	432c      	orrs	r4, r5
 800daea:	40d3      	lsrs	r3, r2
 800daec:	6004      	str	r4, [r0, #0]
 800daee:	f840 3f04 	str.w	r3, [r0, #4]!
 800daf2:	4288      	cmp	r0, r1
 800daf4:	d3f4      	bcc.n	800dae0 <L_shift+0xc>
 800daf6:	bd70      	pop	{r4, r5, r6, pc}

0800daf8 <__match>:
 800daf8:	b530      	push	{r4, r5, lr}
 800dafa:	6803      	ldr	r3, [r0, #0]
 800dafc:	3301      	adds	r3, #1
 800dafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db02:	b914      	cbnz	r4, 800db0a <__match+0x12>
 800db04:	6003      	str	r3, [r0, #0]
 800db06:	2001      	movs	r0, #1
 800db08:	bd30      	pop	{r4, r5, pc}
 800db0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db12:	2d19      	cmp	r5, #25
 800db14:	bf98      	it	ls
 800db16:	3220      	addls	r2, #32
 800db18:	42a2      	cmp	r2, r4
 800db1a:	d0f0      	beq.n	800dafe <__match+0x6>
 800db1c:	2000      	movs	r0, #0
 800db1e:	e7f3      	b.n	800db08 <__match+0x10>

0800db20 <__hexnan>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	680b      	ldr	r3, [r1, #0]
 800db26:	6801      	ldr	r1, [r0, #0]
 800db28:	115e      	asrs	r6, r3, #5
 800db2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db2e:	f013 031f 	ands.w	r3, r3, #31
 800db32:	b087      	sub	sp, #28
 800db34:	bf18      	it	ne
 800db36:	3604      	addne	r6, #4
 800db38:	2500      	movs	r5, #0
 800db3a:	1f37      	subs	r7, r6, #4
 800db3c:	4682      	mov	sl, r0
 800db3e:	4690      	mov	r8, r2
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	f846 5c04 	str.w	r5, [r6, #-4]
 800db46:	46b9      	mov	r9, r7
 800db48:	463c      	mov	r4, r7
 800db4a:	9502      	str	r5, [sp, #8]
 800db4c:	46ab      	mov	fp, r5
 800db4e:	784a      	ldrb	r2, [r1, #1]
 800db50:	1c4b      	adds	r3, r1, #1
 800db52:	9303      	str	r3, [sp, #12]
 800db54:	b342      	cbz	r2, 800dba8 <__hexnan+0x88>
 800db56:	4610      	mov	r0, r2
 800db58:	9105      	str	r1, [sp, #20]
 800db5a:	9204      	str	r2, [sp, #16]
 800db5c:	f7ff fd76 	bl	800d64c <__hexdig_fun>
 800db60:	2800      	cmp	r0, #0
 800db62:	d14f      	bne.n	800dc04 <__hexnan+0xe4>
 800db64:	9a04      	ldr	r2, [sp, #16]
 800db66:	9905      	ldr	r1, [sp, #20]
 800db68:	2a20      	cmp	r2, #32
 800db6a:	d818      	bhi.n	800db9e <__hexnan+0x7e>
 800db6c:	9b02      	ldr	r3, [sp, #8]
 800db6e:	459b      	cmp	fp, r3
 800db70:	dd13      	ble.n	800db9a <__hexnan+0x7a>
 800db72:	454c      	cmp	r4, r9
 800db74:	d206      	bcs.n	800db84 <__hexnan+0x64>
 800db76:	2d07      	cmp	r5, #7
 800db78:	dc04      	bgt.n	800db84 <__hexnan+0x64>
 800db7a:	462a      	mov	r2, r5
 800db7c:	4649      	mov	r1, r9
 800db7e:	4620      	mov	r0, r4
 800db80:	f7ff ffa8 	bl	800dad4 <L_shift>
 800db84:	4544      	cmp	r4, r8
 800db86:	d950      	bls.n	800dc2a <__hexnan+0x10a>
 800db88:	2300      	movs	r3, #0
 800db8a:	f1a4 0904 	sub.w	r9, r4, #4
 800db8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800db92:	f8cd b008 	str.w	fp, [sp, #8]
 800db96:	464c      	mov	r4, r9
 800db98:	461d      	mov	r5, r3
 800db9a:	9903      	ldr	r1, [sp, #12]
 800db9c:	e7d7      	b.n	800db4e <__hexnan+0x2e>
 800db9e:	2a29      	cmp	r2, #41	; 0x29
 800dba0:	d155      	bne.n	800dc4e <__hexnan+0x12e>
 800dba2:	3102      	adds	r1, #2
 800dba4:	f8ca 1000 	str.w	r1, [sl]
 800dba8:	f1bb 0f00 	cmp.w	fp, #0
 800dbac:	d04f      	beq.n	800dc4e <__hexnan+0x12e>
 800dbae:	454c      	cmp	r4, r9
 800dbb0:	d206      	bcs.n	800dbc0 <__hexnan+0xa0>
 800dbb2:	2d07      	cmp	r5, #7
 800dbb4:	dc04      	bgt.n	800dbc0 <__hexnan+0xa0>
 800dbb6:	462a      	mov	r2, r5
 800dbb8:	4649      	mov	r1, r9
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f7ff ff8a 	bl	800dad4 <L_shift>
 800dbc0:	4544      	cmp	r4, r8
 800dbc2:	d934      	bls.n	800dc2e <__hexnan+0x10e>
 800dbc4:	f1a8 0204 	sub.w	r2, r8, #4
 800dbc8:	4623      	mov	r3, r4
 800dbca:	f853 1b04 	ldr.w	r1, [r3], #4
 800dbce:	f842 1f04 	str.w	r1, [r2, #4]!
 800dbd2:	429f      	cmp	r7, r3
 800dbd4:	d2f9      	bcs.n	800dbca <__hexnan+0xaa>
 800dbd6:	1b3b      	subs	r3, r7, r4
 800dbd8:	f023 0303 	bic.w	r3, r3, #3
 800dbdc:	3304      	adds	r3, #4
 800dbde:	3e03      	subs	r6, #3
 800dbe0:	3401      	adds	r4, #1
 800dbe2:	42a6      	cmp	r6, r4
 800dbe4:	bf38      	it	cc
 800dbe6:	2304      	movcc	r3, #4
 800dbe8:	4443      	add	r3, r8
 800dbea:	2200      	movs	r2, #0
 800dbec:	f843 2b04 	str.w	r2, [r3], #4
 800dbf0:	429f      	cmp	r7, r3
 800dbf2:	d2fb      	bcs.n	800dbec <__hexnan+0xcc>
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	b91b      	cbnz	r3, 800dc00 <__hexnan+0xe0>
 800dbf8:	4547      	cmp	r7, r8
 800dbfa:	d126      	bne.n	800dc4a <__hexnan+0x12a>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	2005      	movs	r0, #5
 800dc02:	e025      	b.n	800dc50 <__hexnan+0x130>
 800dc04:	3501      	adds	r5, #1
 800dc06:	2d08      	cmp	r5, #8
 800dc08:	f10b 0b01 	add.w	fp, fp, #1
 800dc0c:	dd06      	ble.n	800dc1c <__hexnan+0xfc>
 800dc0e:	4544      	cmp	r4, r8
 800dc10:	d9c3      	bls.n	800db9a <__hexnan+0x7a>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc18:	2501      	movs	r5, #1
 800dc1a:	3c04      	subs	r4, #4
 800dc1c:	6822      	ldr	r2, [r4, #0]
 800dc1e:	f000 000f 	and.w	r0, r0, #15
 800dc22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc26:	6020      	str	r0, [r4, #0]
 800dc28:	e7b7      	b.n	800db9a <__hexnan+0x7a>
 800dc2a:	2508      	movs	r5, #8
 800dc2c:	e7b5      	b.n	800db9a <__hexnan+0x7a>
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0df      	beq.n	800dbf4 <__hexnan+0xd4>
 800dc34:	f1c3 0320 	rsb	r3, r3, #32
 800dc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc3c:	40da      	lsrs	r2, r3
 800dc3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc42:	4013      	ands	r3, r2
 800dc44:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc48:	e7d4      	b.n	800dbf4 <__hexnan+0xd4>
 800dc4a:	3f04      	subs	r7, #4
 800dc4c:	e7d2      	b.n	800dbf4 <__hexnan+0xd4>
 800dc4e:	2004      	movs	r0, #4
 800dc50:	b007      	add	sp, #28
 800dc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc56 <__ascii_mbtowc>:
 800dc56:	b082      	sub	sp, #8
 800dc58:	b901      	cbnz	r1, 800dc5c <__ascii_mbtowc+0x6>
 800dc5a:	a901      	add	r1, sp, #4
 800dc5c:	b142      	cbz	r2, 800dc70 <__ascii_mbtowc+0x1a>
 800dc5e:	b14b      	cbz	r3, 800dc74 <__ascii_mbtowc+0x1e>
 800dc60:	7813      	ldrb	r3, [r2, #0]
 800dc62:	600b      	str	r3, [r1, #0]
 800dc64:	7812      	ldrb	r2, [r2, #0]
 800dc66:	1e10      	subs	r0, r2, #0
 800dc68:	bf18      	it	ne
 800dc6a:	2001      	movne	r0, #1
 800dc6c:	b002      	add	sp, #8
 800dc6e:	4770      	bx	lr
 800dc70:	4610      	mov	r0, r2
 800dc72:	e7fb      	b.n	800dc6c <__ascii_mbtowc+0x16>
 800dc74:	f06f 0001 	mvn.w	r0, #1
 800dc78:	e7f8      	b.n	800dc6c <__ascii_mbtowc+0x16>

0800dc7a <_realloc_r>:
 800dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7e:	4680      	mov	r8, r0
 800dc80:	4614      	mov	r4, r2
 800dc82:	460e      	mov	r6, r1
 800dc84:	b921      	cbnz	r1, 800dc90 <_realloc_r+0x16>
 800dc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	f7fd b8d2 	b.w	800ae34 <_malloc_r>
 800dc90:	b92a      	cbnz	r2, 800dc9e <_realloc_r+0x24>
 800dc92:	f7fd f85b 	bl	800ad4c <_free_r>
 800dc96:	4625      	mov	r5, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc9e:	f000 f93a 	bl	800df16 <_malloc_usable_size_r>
 800dca2:	4284      	cmp	r4, r0
 800dca4:	4607      	mov	r7, r0
 800dca6:	d802      	bhi.n	800dcae <_realloc_r+0x34>
 800dca8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcac:	d812      	bhi.n	800dcd4 <_realloc_r+0x5a>
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	f7fd f8bf 	bl	800ae34 <_malloc_r>
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d0ed      	beq.n	800dc98 <_realloc_r+0x1e>
 800dcbc:	42bc      	cmp	r4, r7
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	bf28      	it	cs
 800dcc4:	463a      	movcs	r2, r7
 800dcc6:	f7fc f9b0 	bl	800a02a <memcpy>
 800dcca:	4631      	mov	r1, r6
 800dccc:	4640      	mov	r0, r8
 800dcce:	f7fd f83d 	bl	800ad4c <_free_r>
 800dcd2:	e7e1      	b.n	800dc98 <_realloc_r+0x1e>
 800dcd4:	4635      	mov	r5, r6
 800dcd6:	e7df      	b.n	800dc98 <_realloc_r+0x1e>

0800dcd8 <_strtoul_l.constprop.0>:
 800dcd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcdc:	4f36      	ldr	r7, [pc, #216]	; (800ddb8 <_strtoul_l.constprop.0+0xe0>)
 800dcde:	4686      	mov	lr, r0
 800dce0:	460d      	mov	r5, r1
 800dce2:	4628      	mov	r0, r5
 800dce4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dce8:	5d3e      	ldrb	r6, [r7, r4]
 800dcea:	f016 0608 	ands.w	r6, r6, #8
 800dcee:	d1f8      	bne.n	800dce2 <_strtoul_l.constprop.0+0xa>
 800dcf0:	2c2d      	cmp	r4, #45	; 0x2d
 800dcf2:	d130      	bne.n	800dd56 <_strtoul_l.constprop.0+0x7e>
 800dcf4:	782c      	ldrb	r4, [r5, #0]
 800dcf6:	2601      	movs	r6, #1
 800dcf8:	1c85      	adds	r5, r0, #2
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d057      	beq.n	800ddae <_strtoul_l.constprop.0+0xd6>
 800dcfe:	2b10      	cmp	r3, #16
 800dd00:	d109      	bne.n	800dd16 <_strtoul_l.constprop.0+0x3e>
 800dd02:	2c30      	cmp	r4, #48	; 0x30
 800dd04:	d107      	bne.n	800dd16 <_strtoul_l.constprop.0+0x3e>
 800dd06:	7828      	ldrb	r0, [r5, #0]
 800dd08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dd0c:	2858      	cmp	r0, #88	; 0x58
 800dd0e:	d149      	bne.n	800dda4 <_strtoul_l.constprop.0+0xcc>
 800dd10:	786c      	ldrb	r4, [r5, #1]
 800dd12:	2310      	movs	r3, #16
 800dd14:	3502      	adds	r5, #2
 800dd16:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800dd1a:	2700      	movs	r7, #0
 800dd1c:	fbb8 f8f3 	udiv	r8, r8, r3
 800dd20:	fb03 f908 	mul.w	r9, r3, r8
 800dd24:	ea6f 0909 	mvn.w	r9, r9
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd2e:	f1bc 0f09 	cmp.w	ip, #9
 800dd32:	d815      	bhi.n	800dd60 <_strtoul_l.constprop.0+0x88>
 800dd34:	4664      	mov	r4, ip
 800dd36:	42a3      	cmp	r3, r4
 800dd38:	dd23      	ble.n	800dd82 <_strtoul_l.constprop.0+0xaa>
 800dd3a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800dd3e:	d007      	beq.n	800dd50 <_strtoul_l.constprop.0+0x78>
 800dd40:	4580      	cmp	r8, r0
 800dd42:	d31b      	bcc.n	800dd7c <_strtoul_l.constprop.0+0xa4>
 800dd44:	d101      	bne.n	800dd4a <_strtoul_l.constprop.0+0x72>
 800dd46:	45a1      	cmp	r9, r4
 800dd48:	db18      	blt.n	800dd7c <_strtoul_l.constprop.0+0xa4>
 800dd4a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd4e:	2701      	movs	r7, #1
 800dd50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd54:	e7e9      	b.n	800dd2a <_strtoul_l.constprop.0+0x52>
 800dd56:	2c2b      	cmp	r4, #43	; 0x2b
 800dd58:	bf04      	itt	eq
 800dd5a:	782c      	ldrbeq	r4, [r5, #0]
 800dd5c:	1c85      	addeq	r5, r0, #2
 800dd5e:	e7cc      	b.n	800dcfa <_strtoul_l.constprop.0+0x22>
 800dd60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd64:	f1bc 0f19 	cmp.w	ip, #25
 800dd68:	d801      	bhi.n	800dd6e <_strtoul_l.constprop.0+0x96>
 800dd6a:	3c37      	subs	r4, #55	; 0x37
 800dd6c:	e7e3      	b.n	800dd36 <_strtoul_l.constprop.0+0x5e>
 800dd6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd72:	f1bc 0f19 	cmp.w	ip, #25
 800dd76:	d804      	bhi.n	800dd82 <_strtoul_l.constprop.0+0xaa>
 800dd78:	3c57      	subs	r4, #87	; 0x57
 800dd7a:	e7dc      	b.n	800dd36 <_strtoul_l.constprop.0+0x5e>
 800dd7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd80:	e7e6      	b.n	800dd50 <_strtoul_l.constprop.0+0x78>
 800dd82:	1c7b      	adds	r3, r7, #1
 800dd84:	d106      	bne.n	800dd94 <_strtoul_l.constprop.0+0xbc>
 800dd86:	2322      	movs	r3, #34	; 0x22
 800dd88:	f8ce 3000 	str.w	r3, [lr]
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	b932      	cbnz	r2, 800dd9e <_strtoul_l.constprop.0+0xc6>
 800dd90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd94:	b106      	cbz	r6, 800dd98 <_strtoul_l.constprop.0+0xc0>
 800dd96:	4240      	negs	r0, r0
 800dd98:	2a00      	cmp	r2, #0
 800dd9a:	d0f9      	beq.n	800dd90 <_strtoul_l.constprop.0+0xb8>
 800dd9c:	b107      	cbz	r7, 800dda0 <_strtoul_l.constprop.0+0xc8>
 800dd9e:	1e69      	subs	r1, r5, #1
 800dda0:	6011      	str	r1, [r2, #0]
 800dda2:	e7f5      	b.n	800dd90 <_strtoul_l.constprop.0+0xb8>
 800dda4:	2430      	movs	r4, #48	; 0x30
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1b5      	bne.n	800dd16 <_strtoul_l.constprop.0+0x3e>
 800ddaa:	2308      	movs	r3, #8
 800ddac:	e7b3      	b.n	800dd16 <_strtoul_l.constprop.0+0x3e>
 800ddae:	2c30      	cmp	r4, #48	; 0x30
 800ddb0:	d0a9      	beq.n	800dd06 <_strtoul_l.constprop.0+0x2e>
 800ddb2:	230a      	movs	r3, #10
 800ddb4:	e7af      	b.n	800dd16 <_strtoul_l.constprop.0+0x3e>
 800ddb6:	bf00      	nop
 800ddb8:	0800f501 	.word	0x0800f501

0800ddbc <_strtoul_r>:
 800ddbc:	f7ff bf8c 	b.w	800dcd8 <_strtoul_l.constprop.0>

0800ddc0 <__ascii_wctomb>:
 800ddc0:	b149      	cbz	r1, 800ddd6 <__ascii_wctomb+0x16>
 800ddc2:	2aff      	cmp	r2, #255	; 0xff
 800ddc4:	bf85      	ittet	hi
 800ddc6:	238a      	movhi	r3, #138	; 0x8a
 800ddc8:	6003      	strhi	r3, [r0, #0]
 800ddca:	700a      	strbls	r2, [r1, #0]
 800ddcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ddd0:	bf98      	it	ls
 800ddd2:	2001      	movls	r0, #1
 800ddd4:	4770      	bx	lr
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4770      	bx	lr
	...

0800dddc <fiprintf>:
 800dddc:	b40e      	push	{r1, r2, r3}
 800ddde:	b503      	push	{r0, r1, lr}
 800dde0:	4601      	mov	r1, r0
 800dde2:	ab03      	add	r3, sp, #12
 800dde4:	4805      	ldr	r0, [pc, #20]	; (800ddfc <fiprintf+0x20>)
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	f7fe ff45 	bl	800cc7c <_vfiprintf_r>
 800ddf2:	b002      	add	sp, #8
 800ddf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf8:	b003      	add	sp, #12
 800ddfa:	4770      	bx	lr
 800ddfc:	200000e8 	.word	0x200000e8

0800de00 <__swhatbuf_r>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	460c      	mov	r4, r1
 800de04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de08:	2900      	cmp	r1, #0
 800de0a:	b096      	sub	sp, #88	; 0x58
 800de0c:	4615      	mov	r5, r2
 800de0e:	461e      	mov	r6, r3
 800de10:	da0d      	bge.n	800de2e <__swhatbuf_r+0x2e>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de18:	f04f 0100 	mov.w	r1, #0
 800de1c:	bf0c      	ite	eq
 800de1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de22:	2340      	movne	r3, #64	; 0x40
 800de24:	2000      	movs	r0, #0
 800de26:	6031      	str	r1, [r6, #0]
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	b016      	add	sp, #88	; 0x58
 800de2c:	bd70      	pop	{r4, r5, r6, pc}
 800de2e:	466a      	mov	r2, sp
 800de30:	f000 f848 	bl	800dec4 <_fstat_r>
 800de34:	2800      	cmp	r0, #0
 800de36:	dbec      	blt.n	800de12 <__swhatbuf_r+0x12>
 800de38:	9901      	ldr	r1, [sp, #4]
 800de3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de42:	4259      	negs	r1, r3
 800de44:	4159      	adcs	r1, r3
 800de46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de4a:	e7eb      	b.n	800de24 <__swhatbuf_r+0x24>

0800de4c <__smakebuf_r>:
 800de4c:	898b      	ldrh	r3, [r1, #12]
 800de4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de50:	079d      	lsls	r5, r3, #30
 800de52:	4606      	mov	r6, r0
 800de54:	460c      	mov	r4, r1
 800de56:	d507      	bpl.n	800de68 <__smakebuf_r+0x1c>
 800de58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	2301      	movs	r3, #1
 800de62:	6163      	str	r3, [r4, #20]
 800de64:	b002      	add	sp, #8
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	ab01      	add	r3, sp, #4
 800de6a:	466a      	mov	r2, sp
 800de6c:	f7ff ffc8 	bl	800de00 <__swhatbuf_r>
 800de70:	9900      	ldr	r1, [sp, #0]
 800de72:	4605      	mov	r5, r0
 800de74:	4630      	mov	r0, r6
 800de76:	f7fc ffdd 	bl	800ae34 <_malloc_r>
 800de7a:	b948      	cbnz	r0, 800de90 <__smakebuf_r+0x44>
 800de7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de80:	059a      	lsls	r2, r3, #22
 800de82:	d4ef      	bmi.n	800de64 <__smakebuf_r+0x18>
 800de84:	f023 0303 	bic.w	r3, r3, #3
 800de88:	f043 0302 	orr.w	r3, r3, #2
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	e7e3      	b.n	800de58 <__smakebuf_r+0xc>
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	6020      	str	r0, [r4, #0]
 800de94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de98:	81a3      	strh	r3, [r4, #12]
 800de9a:	9b00      	ldr	r3, [sp, #0]
 800de9c:	6163      	str	r3, [r4, #20]
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	6120      	str	r0, [r4, #16]
 800dea2:	b15b      	cbz	r3, 800debc <__smakebuf_r+0x70>
 800dea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dea8:	4630      	mov	r0, r6
 800deaa:	f000 f81d 	bl	800dee8 <_isatty_r>
 800deae:	b128      	cbz	r0, 800debc <__smakebuf_r+0x70>
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	f023 0303 	bic.w	r3, r3, #3
 800deb6:	f043 0301 	orr.w	r3, r3, #1
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	431d      	orrs	r5, r3
 800dec0:	81a5      	strh	r5, [r4, #12]
 800dec2:	e7cf      	b.n	800de64 <__smakebuf_r+0x18>

0800dec4 <_fstat_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d07      	ldr	r5, [pc, #28]	; (800dee4 <_fstat_r+0x20>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	4611      	mov	r1, r2
 800ded0:	602b      	str	r3, [r5, #0]
 800ded2:	f7f4 f92e 	bl	8002132 <_fstat>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	d102      	bne.n	800dee0 <_fstat_r+0x1c>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	b103      	cbz	r3, 800dee0 <_fstat_r+0x1c>
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	2000592c 	.word	0x2000592c

0800dee8 <_isatty_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4d06      	ldr	r5, [pc, #24]	; (800df04 <_isatty_r+0x1c>)
 800deec:	2300      	movs	r3, #0
 800deee:	4604      	mov	r4, r0
 800def0:	4608      	mov	r0, r1
 800def2:	602b      	str	r3, [r5, #0]
 800def4:	f7f4 f92d 	bl	8002152 <_isatty>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_isatty_r+0x1a>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_isatty_r+0x1a>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	2000592c 	.word	0x2000592c

0800df08 <abort>:
 800df08:	b508      	push	{r3, lr}
 800df0a:	2006      	movs	r0, #6
 800df0c:	f000 f834 	bl	800df78 <raise>
 800df10:	2001      	movs	r0, #1
 800df12:	f7f4 f8db 	bl	80020cc <_exit>

0800df16 <_malloc_usable_size_r>:
 800df16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1a:	1f18      	subs	r0, r3, #4
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bfbc      	itt	lt
 800df20:	580b      	ldrlt	r3, [r1, r0]
 800df22:	18c0      	addlt	r0, r0, r3
 800df24:	4770      	bx	lr

0800df26 <_raise_r>:
 800df26:	291f      	cmp	r1, #31
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4604      	mov	r4, r0
 800df2c:	460d      	mov	r5, r1
 800df2e:	d904      	bls.n	800df3a <_raise_r+0x14>
 800df30:	2316      	movs	r3, #22
 800df32:	6003      	str	r3, [r0, #0]
 800df34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df38:	bd38      	pop	{r3, r4, r5, pc}
 800df3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df3c:	b112      	cbz	r2, 800df44 <_raise_r+0x1e>
 800df3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df42:	b94b      	cbnz	r3, 800df58 <_raise_r+0x32>
 800df44:	4620      	mov	r0, r4
 800df46:	f000 f831 	bl	800dfac <_getpid_r>
 800df4a:	462a      	mov	r2, r5
 800df4c:	4601      	mov	r1, r0
 800df4e:	4620      	mov	r0, r4
 800df50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df54:	f000 b818 	b.w	800df88 <_kill_r>
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d00a      	beq.n	800df72 <_raise_r+0x4c>
 800df5c:	1c59      	adds	r1, r3, #1
 800df5e:	d103      	bne.n	800df68 <_raise_r+0x42>
 800df60:	2316      	movs	r3, #22
 800df62:	6003      	str	r3, [r0, #0]
 800df64:	2001      	movs	r0, #1
 800df66:	e7e7      	b.n	800df38 <_raise_r+0x12>
 800df68:	2400      	movs	r4, #0
 800df6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df6e:	4628      	mov	r0, r5
 800df70:	4798      	blx	r3
 800df72:	2000      	movs	r0, #0
 800df74:	e7e0      	b.n	800df38 <_raise_r+0x12>
	...

0800df78 <raise>:
 800df78:	4b02      	ldr	r3, [pc, #8]	; (800df84 <raise+0xc>)
 800df7a:	4601      	mov	r1, r0
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	f7ff bfd2 	b.w	800df26 <_raise_r>
 800df82:	bf00      	nop
 800df84:	200000e8 	.word	0x200000e8

0800df88 <_kill_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d07      	ldr	r5, [pc, #28]	; (800dfa8 <_kill_r+0x20>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	4611      	mov	r1, r2
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	f7f4 f889 	bl	80020ac <_kill>
 800df9a:	1c43      	adds	r3, r0, #1
 800df9c:	d102      	bne.n	800dfa4 <_kill_r+0x1c>
 800df9e:	682b      	ldr	r3, [r5, #0]
 800dfa0:	b103      	cbz	r3, 800dfa4 <_kill_r+0x1c>
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	bd38      	pop	{r3, r4, r5, pc}
 800dfa6:	bf00      	nop
 800dfa8:	2000592c 	.word	0x2000592c

0800dfac <_getpid_r>:
 800dfac:	f7f4 b876 	b.w	800209c <_getpid>

0800dfb0 <cos>:
 800dfb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfb2:	ec53 2b10 	vmov	r2, r3, d0
 800dfb6:	4826      	ldr	r0, [pc, #152]	; (800e050 <cos+0xa0>)
 800dfb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dfbc:	4281      	cmp	r1, r0
 800dfbe:	dc06      	bgt.n	800dfce <cos+0x1e>
 800dfc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e048 <cos+0x98>
 800dfc4:	b005      	add	sp, #20
 800dfc6:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfca:	f000 b8f1 	b.w	800e1b0 <__kernel_cos>
 800dfce:	4821      	ldr	r0, [pc, #132]	; (800e054 <cos+0xa4>)
 800dfd0:	4281      	cmp	r1, r0
 800dfd2:	dd09      	ble.n	800dfe8 <cos+0x38>
 800dfd4:	ee10 0a10 	vmov	r0, s0
 800dfd8:	4619      	mov	r1, r3
 800dfda:	f7f2 f95d 	bl	8000298 <__aeabi_dsub>
 800dfde:	ec41 0b10 	vmov	d0, r0, r1
 800dfe2:	b005      	add	sp, #20
 800dfe4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfe8:	4668      	mov	r0, sp
 800dfea:	f000 fa69 	bl	800e4c0 <__ieee754_rem_pio2>
 800dfee:	f000 0003 	and.w	r0, r0, #3
 800dff2:	2801      	cmp	r0, #1
 800dff4:	d00b      	beq.n	800e00e <cos+0x5e>
 800dff6:	2802      	cmp	r0, #2
 800dff8:	d016      	beq.n	800e028 <cos+0x78>
 800dffa:	b9e0      	cbnz	r0, 800e036 <cos+0x86>
 800dffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e000:	ed9d 0b00 	vldr	d0, [sp]
 800e004:	f000 f8d4 	bl	800e1b0 <__kernel_cos>
 800e008:	ec51 0b10 	vmov	r0, r1, d0
 800e00c:	e7e7      	b.n	800dfde <cos+0x2e>
 800e00e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e012:	ed9d 0b00 	vldr	d0, [sp]
 800e016:	f000 f993 	bl	800e340 <__kernel_sin>
 800e01a:	ec53 2b10 	vmov	r2, r3, d0
 800e01e:	ee10 0a10 	vmov	r0, s0
 800e022:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e026:	e7da      	b.n	800dfde <cos+0x2e>
 800e028:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e02c:	ed9d 0b00 	vldr	d0, [sp]
 800e030:	f000 f8be 	bl	800e1b0 <__kernel_cos>
 800e034:	e7f1      	b.n	800e01a <cos+0x6a>
 800e036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e03a:	ed9d 0b00 	vldr	d0, [sp]
 800e03e:	2001      	movs	r0, #1
 800e040:	f000 f97e 	bl	800e340 <__kernel_sin>
 800e044:	e7e0      	b.n	800e008 <cos+0x58>
 800e046:	bf00      	nop
	...
 800e050:	3fe921fb 	.word	0x3fe921fb
 800e054:	7fefffff 	.word	0x7fefffff

0800e058 <sin>:
 800e058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e05a:	ec53 2b10 	vmov	r2, r3, d0
 800e05e:	4828      	ldr	r0, [pc, #160]	; (800e100 <sin+0xa8>)
 800e060:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e064:	4281      	cmp	r1, r0
 800e066:	dc07      	bgt.n	800e078 <sin+0x20>
 800e068:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e0f8 <sin+0xa0>
 800e06c:	2000      	movs	r0, #0
 800e06e:	b005      	add	sp, #20
 800e070:	f85d eb04 	ldr.w	lr, [sp], #4
 800e074:	f000 b964 	b.w	800e340 <__kernel_sin>
 800e078:	4822      	ldr	r0, [pc, #136]	; (800e104 <sin+0xac>)
 800e07a:	4281      	cmp	r1, r0
 800e07c:	dd09      	ble.n	800e092 <sin+0x3a>
 800e07e:	ee10 0a10 	vmov	r0, s0
 800e082:	4619      	mov	r1, r3
 800e084:	f7f2 f908 	bl	8000298 <__aeabi_dsub>
 800e088:	ec41 0b10 	vmov	d0, r0, r1
 800e08c:	b005      	add	sp, #20
 800e08e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e092:	4668      	mov	r0, sp
 800e094:	f000 fa14 	bl	800e4c0 <__ieee754_rem_pio2>
 800e098:	f000 0003 	and.w	r0, r0, #3
 800e09c:	2801      	cmp	r0, #1
 800e09e:	d00c      	beq.n	800e0ba <sin+0x62>
 800e0a0:	2802      	cmp	r0, #2
 800e0a2:	d011      	beq.n	800e0c8 <sin+0x70>
 800e0a4:	b9f0      	cbnz	r0, 800e0e4 <sin+0x8c>
 800e0a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0aa:	ed9d 0b00 	vldr	d0, [sp]
 800e0ae:	2001      	movs	r0, #1
 800e0b0:	f000 f946 	bl	800e340 <__kernel_sin>
 800e0b4:	ec51 0b10 	vmov	r0, r1, d0
 800e0b8:	e7e6      	b.n	800e088 <sin+0x30>
 800e0ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0be:	ed9d 0b00 	vldr	d0, [sp]
 800e0c2:	f000 f875 	bl	800e1b0 <__kernel_cos>
 800e0c6:	e7f5      	b.n	800e0b4 <sin+0x5c>
 800e0c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0cc:	ed9d 0b00 	vldr	d0, [sp]
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	f000 f935 	bl	800e340 <__kernel_sin>
 800e0d6:	ec53 2b10 	vmov	r2, r3, d0
 800e0da:	ee10 0a10 	vmov	r0, s0
 800e0de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0e2:	e7d1      	b.n	800e088 <sin+0x30>
 800e0e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0e8:	ed9d 0b00 	vldr	d0, [sp]
 800e0ec:	f000 f860 	bl	800e1b0 <__kernel_cos>
 800e0f0:	e7f1      	b.n	800e0d6 <sin+0x7e>
 800e0f2:	bf00      	nop
 800e0f4:	f3af 8000 	nop.w
	...
 800e100:	3fe921fb 	.word	0x3fe921fb
 800e104:	7fefffff 	.word	0x7fefffff

0800e108 <fmaxf>:
 800e108:	b508      	push	{r3, lr}
 800e10a:	ed2d 8b02 	vpush	{d8}
 800e10e:	eeb0 8a40 	vmov.f32	s16, s0
 800e112:	eef0 8a60 	vmov.f32	s17, s1
 800e116:	f000 f82d 	bl	800e174 <__fpclassifyf>
 800e11a:	b148      	cbz	r0, 800e130 <fmaxf+0x28>
 800e11c:	eeb0 0a68 	vmov.f32	s0, s17
 800e120:	f000 f828 	bl	800e174 <__fpclassifyf>
 800e124:	b130      	cbz	r0, 800e134 <fmaxf+0x2c>
 800e126:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e12e:	dc01      	bgt.n	800e134 <fmaxf+0x2c>
 800e130:	eeb0 8a68 	vmov.f32	s16, s17
 800e134:	eeb0 0a48 	vmov.f32	s0, s16
 800e138:	ecbd 8b02 	vpop	{d8}
 800e13c:	bd08      	pop	{r3, pc}

0800e13e <fminf>:
 800e13e:	b508      	push	{r3, lr}
 800e140:	ed2d 8b02 	vpush	{d8}
 800e144:	eeb0 8a40 	vmov.f32	s16, s0
 800e148:	eef0 8a60 	vmov.f32	s17, s1
 800e14c:	f000 f812 	bl	800e174 <__fpclassifyf>
 800e150:	b148      	cbz	r0, 800e166 <fminf+0x28>
 800e152:	eeb0 0a68 	vmov.f32	s0, s17
 800e156:	f000 f80d 	bl	800e174 <__fpclassifyf>
 800e15a:	b130      	cbz	r0, 800e16a <fminf+0x2c>
 800e15c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e164:	d401      	bmi.n	800e16a <fminf+0x2c>
 800e166:	eeb0 8a68 	vmov.f32	s16, s17
 800e16a:	eeb0 0a48 	vmov.f32	s0, s16
 800e16e:	ecbd 8b02 	vpop	{d8}
 800e172:	bd08      	pop	{r3, pc}

0800e174 <__fpclassifyf>:
 800e174:	ee10 3a10 	vmov	r3, s0
 800e178:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800e17c:	d00d      	beq.n	800e19a <__fpclassifyf+0x26>
 800e17e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800e182:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e186:	d30a      	bcc.n	800e19e <__fpclassifyf+0x2a>
 800e188:	4b07      	ldr	r3, [pc, #28]	; (800e1a8 <__fpclassifyf+0x34>)
 800e18a:	1e42      	subs	r2, r0, #1
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d908      	bls.n	800e1a2 <__fpclassifyf+0x2e>
 800e190:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800e194:	4258      	negs	r0, r3
 800e196:	4158      	adcs	r0, r3
 800e198:	4770      	bx	lr
 800e19a:	2002      	movs	r0, #2
 800e19c:	4770      	bx	lr
 800e19e:	2004      	movs	r0, #4
 800e1a0:	4770      	bx	lr
 800e1a2:	2003      	movs	r0, #3
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	007ffffe 	.word	0x007ffffe
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <__kernel_cos>:
 800e1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	ec57 6b10 	vmov	r6, r7, d0
 800e1b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e1bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e1c0:	ed8d 1b00 	vstr	d1, [sp]
 800e1c4:	da07      	bge.n	800e1d6 <__kernel_cos+0x26>
 800e1c6:	ee10 0a10 	vmov	r0, s0
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	f7f2 fccc 	bl	8000b68 <__aeabi_d2iz>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f000 8088 	beq.w	800e2e6 <__kernel_cos+0x136>
 800e1d6:	4632      	mov	r2, r6
 800e1d8:	463b      	mov	r3, r7
 800e1da:	4630      	mov	r0, r6
 800e1dc:	4639      	mov	r1, r7
 800e1de:	f7f2 fa13 	bl	8000608 <__aeabi_dmul>
 800e1e2:	4b51      	ldr	r3, [pc, #324]	; (800e328 <__kernel_cos+0x178>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	f7f2 fa0d 	bl	8000608 <__aeabi_dmul>
 800e1ee:	a340      	add	r3, pc, #256	; (adr r3, 800e2f0 <__kernel_cos+0x140>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	4682      	mov	sl, r0
 800e1f6:	468b      	mov	fp, r1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	f7f2 fa04 	bl	8000608 <__aeabi_dmul>
 800e200:	a33d      	add	r3, pc, #244	; (adr r3, 800e2f8 <__kernel_cos+0x148>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	f7f2 f849 	bl	800029c <__adddf3>
 800e20a:	4622      	mov	r2, r4
 800e20c:	462b      	mov	r3, r5
 800e20e:	f7f2 f9fb 	bl	8000608 <__aeabi_dmul>
 800e212:	a33b      	add	r3, pc, #236	; (adr r3, 800e300 <__kernel_cos+0x150>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f2 f83e 	bl	8000298 <__aeabi_dsub>
 800e21c:	4622      	mov	r2, r4
 800e21e:	462b      	mov	r3, r5
 800e220:	f7f2 f9f2 	bl	8000608 <__aeabi_dmul>
 800e224:	a338      	add	r3, pc, #224	; (adr r3, 800e308 <__kernel_cos+0x158>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f2 f837 	bl	800029c <__adddf3>
 800e22e:	4622      	mov	r2, r4
 800e230:	462b      	mov	r3, r5
 800e232:	f7f2 f9e9 	bl	8000608 <__aeabi_dmul>
 800e236:	a336      	add	r3, pc, #216	; (adr r3, 800e310 <__kernel_cos+0x160>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f2 f82c 	bl	8000298 <__aeabi_dsub>
 800e240:	4622      	mov	r2, r4
 800e242:	462b      	mov	r3, r5
 800e244:	f7f2 f9e0 	bl	8000608 <__aeabi_dmul>
 800e248:	a333      	add	r3, pc, #204	; (adr r3, 800e318 <__kernel_cos+0x168>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f2 f825 	bl	800029c <__adddf3>
 800e252:	4622      	mov	r2, r4
 800e254:	462b      	mov	r3, r5
 800e256:	f7f2 f9d7 	bl	8000608 <__aeabi_dmul>
 800e25a:	4622      	mov	r2, r4
 800e25c:	462b      	mov	r3, r5
 800e25e:	f7f2 f9d3 	bl	8000608 <__aeabi_dmul>
 800e262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e266:	4604      	mov	r4, r0
 800e268:	460d      	mov	r5, r1
 800e26a:	4630      	mov	r0, r6
 800e26c:	4639      	mov	r1, r7
 800e26e:	f7f2 f9cb 	bl	8000608 <__aeabi_dmul>
 800e272:	460b      	mov	r3, r1
 800e274:	4602      	mov	r2, r0
 800e276:	4629      	mov	r1, r5
 800e278:	4620      	mov	r0, r4
 800e27a:	f7f2 f80d 	bl	8000298 <__aeabi_dsub>
 800e27e:	4b2b      	ldr	r3, [pc, #172]	; (800e32c <__kernel_cos+0x17c>)
 800e280:	4598      	cmp	r8, r3
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	dc10      	bgt.n	800e2aa <__kernel_cos+0xfa>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4650      	mov	r0, sl
 800e28e:	4659      	mov	r1, fp
 800e290:	f7f2 f802 	bl	8000298 <__aeabi_dsub>
 800e294:	460b      	mov	r3, r1
 800e296:	4926      	ldr	r1, [pc, #152]	; (800e330 <__kernel_cos+0x180>)
 800e298:	4602      	mov	r2, r0
 800e29a:	2000      	movs	r0, #0
 800e29c:	f7f1 fffc 	bl	8000298 <__aeabi_dsub>
 800e2a0:	ec41 0b10 	vmov	d0, r0, r1
 800e2a4:	b003      	add	sp, #12
 800e2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2aa:	4b22      	ldr	r3, [pc, #136]	; (800e334 <__kernel_cos+0x184>)
 800e2ac:	4920      	ldr	r1, [pc, #128]	; (800e330 <__kernel_cos+0x180>)
 800e2ae:	4598      	cmp	r8, r3
 800e2b0:	bfcc      	ite	gt
 800e2b2:	4d21      	ldrgt	r5, [pc, #132]	; (800e338 <__kernel_cos+0x188>)
 800e2b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e2b8:	2400      	movs	r4, #0
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	462b      	mov	r3, r5
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f7f1 ffea 	bl	8000298 <__aeabi_dsub>
 800e2c4:	4622      	mov	r2, r4
 800e2c6:	4680      	mov	r8, r0
 800e2c8:	4689      	mov	r9, r1
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f1 ffe2 	bl	8000298 <__aeabi_dsub>
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	463b      	mov	r3, r7
 800e2d8:	f7f1 ffde 	bl	8000298 <__aeabi_dsub>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4640      	mov	r0, r8
 800e2e2:	4649      	mov	r1, r9
 800e2e4:	e7da      	b.n	800e29c <__kernel_cos+0xec>
 800e2e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e320 <__kernel_cos+0x170>
 800e2ea:	e7db      	b.n	800e2a4 <__kernel_cos+0xf4>
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	be8838d4 	.word	0xbe8838d4
 800e2f4:	bda8fae9 	.word	0xbda8fae9
 800e2f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e2fc:	3e21ee9e 	.word	0x3e21ee9e
 800e300:	809c52ad 	.word	0x809c52ad
 800e304:	3e927e4f 	.word	0x3e927e4f
 800e308:	19cb1590 	.word	0x19cb1590
 800e30c:	3efa01a0 	.word	0x3efa01a0
 800e310:	16c15177 	.word	0x16c15177
 800e314:	3f56c16c 	.word	0x3f56c16c
 800e318:	5555554c 	.word	0x5555554c
 800e31c:	3fa55555 	.word	0x3fa55555
 800e320:	00000000 	.word	0x00000000
 800e324:	3ff00000 	.word	0x3ff00000
 800e328:	3fe00000 	.word	0x3fe00000
 800e32c:	3fd33332 	.word	0x3fd33332
 800e330:	3ff00000 	.word	0x3ff00000
 800e334:	3fe90000 	.word	0x3fe90000
 800e338:	3fd20000 	.word	0x3fd20000
 800e33c:	00000000 	.word	0x00000000

0800e340 <__kernel_sin>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ed2d 8b04 	vpush	{d8-d9}
 800e348:	eeb0 8a41 	vmov.f32	s16, s2
 800e34c:	eef0 8a61 	vmov.f32	s17, s3
 800e350:	ec55 4b10 	vmov	r4, r5, d0
 800e354:	b083      	sub	sp, #12
 800e356:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e35a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e35e:	9001      	str	r0, [sp, #4]
 800e360:	da06      	bge.n	800e370 <__kernel_sin+0x30>
 800e362:	ee10 0a10 	vmov	r0, s0
 800e366:	4629      	mov	r1, r5
 800e368:	f7f2 fbfe 	bl	8000b68 <__aeabi_d2iz>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d051      	beq.n	800e414 <__kernel_sin+0xd4>
 800e370:	4622      	mov	r2, r4
 800e372:	462b      	mov	r3, r5
 800e374:	4620      	mov	r0, r4
 800e376:	4629      	mov	r1, r5
 800e378:	f7f2 f946 	bl	8000608 <__aeabi_dmul>
 800e37c:	4682      	mov	sl, r0
 800e37e:	468b      	mov	fp, r1
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4620      	mov	r0, r4
 800e386:	4629      	mov	r1, r5
 800e388:	f7f2 f93e 	bl	8000608 <__aeabi_dmul>
 800e38c:	a341      	add	r3, pc, #260	; (adr r3, 800e494 <__kernel_sin+0x154>)
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	4680      	mov	r8, r0
 800e394:	4689      	mov	r9, r1
 800e396:	4650      	mov	r0, sl
 800e398:	4659      	mov	r1, fp
 800e39a:	f7f2 f935 	bl	8000608 <__aeabi_dmul>
 800e39e:	a33f      	add	r3, pc, #252	; (adr r3, 800e49c <__kernel_sin+0x15c>)
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	f7f1 ff78 	bl	8000298 <__aeabi_dsub>
 800e3a8:	4652      	mov	r2, sl
 800e3aa:	465b      	mov	r3, fp
 800e3ac:	f7f2 f92c 	bl	8000608 <__aeabi_dmul>
 800e3b0:	a33c      	add	r3, pc, #240	; (adr r3, 800e4a4 <__kernel_sin+0x164>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	f7f1 ff71 	bl	800029c <__adddf3>
 800e3ba:	4652      	mov	r2, sl
 800e3bc:	465b      	mov	r3, fp
 800e3be:	f7f2 f923 	bl	8000608 <__aeabi_dmul>
 800e3c2:	a33a      	add	r3, pc, #232	; (adr r3, 800e4ac <__kernel_sin+0x16c>)
 800e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c8:	f7f1 ff66 	bl	8000298 <__aeabi_dsub>
 800e3cc:	4652      	mov	r2, sl
 800e3ce:	465b      	mov	r3, fp
 800e3d0:	f7f2 f91a 	bl	8000608 <__aeabi_dmul>
 800e3d4:	a337      	add	r3, pc, #220	; (adr r3, 800e4b4 <__kernel_sin+0x174>)
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f7f1 ff5f 	bl	800029c <__adddf3>
 800e3de:	9b01      	ldr	r3, [sp, #4]
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	460f      	mov	r7, r1
 800e3e4:	b9eb      	cbnz	r3, 800e422 <__kernel_sin+0xe2>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4650      	mov	r0, sl
 800e3ec:	4659      	mov	r1, fp
 800e3ee:	f7f2 f90b 	bl	8000608 <__aeabi_dmul>
 800e3f2:	a325      	add	r3, pc, #148	; (adr r3, 800e488 <__kernel_sin+0x148>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	f7f1 ff4e 	bl	8000298 <__aeabi_dsub>
 800e3fc:	4642      	mov	r2, r8
 800e3fe:	464b      	mov	r3, r9
 800e400:	f7f2 f902 	bl	8000608 <__aeabi_dmul>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4620      	mov	r0, r4
 800e40a:	4629      	mov	r1, r5
 800e40c:	f7f1 ff46 	bl	800029c <__adddf3>
 800e410:	4604      	mov	r4, r0
 800e412:	460d      	mov	r5, r1
 800e414:	ec45 4b10 	vmov	d0, r4, r5
 800e418:	b003      	add	sp, #12
 800e41a:	ecbd 8b04 	vpop	{d8-d9}
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	4b1b      	ldr	r3, [pc, #108]	; (800e490 <__kernel_sin+0x150>)
 800e424:	ec51 0b18 	vmov	r0, r1, d8
 800e428:	2200      	movs	r2, #0
 800e42a:	f7f2 f8ed 	bl	8000608 <__aeabi_dmul>
 800e42e:	4632      	mov	r2, r6
 800e430:	ec41 0b19 	vmov	d9, r0, r1
 800e434:	463b      	mov	r3, r7
 800e436:	4640      	mov	r0, r8
 800e438:	4649      	mov	r1, r9
 800e43a:	f7f2 f8e5 	bl	8000608 <__aeabi_dmul>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	ec51 0b19 	vmov	r0, r1, d9
 800e446:	f7f1 ff27 	bl	8000298 <__aeabi_dsub>
 800e44a:	4652      	mov	r2, sl
 800e44c:	465b      	mov	r3, fp
 800e44e:	f7f2 f8db 	bl	8000608 <__aeabi_dmul>
 800e452:	ec53 2b18 	vmov	r2, r3, d8
 800e456:	f7f1 ff1f 	bl	8000298 <__aeabi_dsub>
 800e45a:	a30b      	add	r3, pc, #44	; (adr r3, 800e488 <__kernel_sin+0x148>)
 800e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e460:	4606      	mov	r6, r0
 800e462:	460f      	mov	r7, r1
 800e464:	4640      	mov	r0, r8
 800e466:	4649      	mov	r1, r9
 800e468:	f7f2 f8ce 	bl	8000608 <__aeabi_dmul>
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	4630      	mov	r0, r6
 800e472:	4639      	mov	r1, r7
 800e474:	f7f1 ff12 	bl	800029c <__adddf3>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4620      	mov	r0, r4
 800e47e:	4629      	mov	r1, r5
 800e480:	f7f1 ff0a 	bl	8000298 <__aeabi_dsub>
 800e484:	e7c4      	b.n	800e410 <__kernel_sin+0xd0>
 800e486:	bf00      	nop
 800e488:	55555549 	.word	0x55555549
 800e48c:	3fc55555 	.word	0x3fc55555
 800e490:	3fe00000 	.word	0x3fe00000
 800e494:	5acfd57c 	.word	0x5acfd57c
 800e498:	3de5d93a 	.word	0x3de5d93a
 800e49c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e4a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e4a4:	57b1fe7d 	.word	0x57b1fe7d
 800e4a8:	3ec71de3 	.word	0x3ec71de3
 800e4ac:	19c161d5 	.word	0x19c161d5
 800e4b0:	3f2a01a0 	.word	0x3f2a01a0
 800e4b4:	1110f8a6 	.word	0x1110f8a6
 800e4b8:	3f811111 	.word	0x3f811111
 800e4bc:	00000000 	.word	0x00000000

0800e4c0 <__ieee754_rem_pio2>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	ed2d 8b02 	vpush	{d8}
 800e4c8:	ec55 4b10 	vmov	r4, r5, d0
 800e4cc:	4bca      	ldr	r3, [pc, #808]	; (800e7f8 <__ieee754_rem_pio2+0x338>)
 800e4ce:	b08b      	sub	sp, #44	; 0x2c
 800e4d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e4d4:	4598      	cmp	r8, r3
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	9502      	str	r5, [sp, #8]
 800e4da:	dc08      	bgt.n	800e4ee <__ieee754_rem_pio2+0x2e>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2300      	movs	r3, #0
 800e4e0:	ed80 0b00 	vstr	d0, [r0]
 800e4e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e4e8:	f04f 0b00 	mov.w	fp, #0
 800e4ec:	e028      	b.n	800e540 <__ieee754_rem_pio2+0x80>
 800e4ee:	4bc3      	ldr	r3, [pc, #780]	; (800e7fc <__ieee754_rem_pio2+0x33c>)
 800e4f0:	4598      	cmp	r8, r3
 800e4f2:	dc78      	bgt.n	800e5e6 <__ieee754_rem_pio2+0x126>
 800e4f4:	9b02      	ldr	r3, [sp, #8]
 800e4f6:	4ec2      	ldr	r6, [pc, #776]	; (800e800 <__ieee754_rem_pio2+0x340>)
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	ee10 0a10 	vmov	r0, s0
 800e4fe:	a3b0      	add	r3, pc, #704	; (adr r3, 800e7c0 <__ieee754_rem_pio2+0x300>)
 800e500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e504:	4629      	mov	r1, r5
 800e506:	dd39      	ble.n	800e57c <__ieee754_rem_pio2+0xbc>
 800e508:	f7f1 fec6 	bl	8000298 <__aeabi_dsub>
 800e50c:	45b0      	cmp	r8, r6
 800e50e:	4604      	mov	r4, r0
 800e510:	460d      	mov	r5, r1
 800e512:	d01b      	beq.n	800e54c <__ieee754_rem_pio2+0x8c>
 800e514:	a3ac      	add	r3, pc, #688	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x308>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f7f1 febd 	bl	8000298 <__aeabi_dsub>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	e9ca 2300 	strd	r2, r3, [sl]
 800e526:	4620      	mov	r0, r4
 800e528:	4629      	mov	r1, r5
 800e52a:	f7f1 feb5 	bl	8000298 <__aeabi_dsub>
 800e52e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x308>)
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	f7f1 feb0 	bl	8000298 <__aeabi_dsub>
 800e538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e53c:	f04f 0b01 	mov.w	fp, #1
 800e540:	4658      	mov	r0, fp
 800e542:	b00b      	add	sp, #44	; 0x2c
 800e544:	ecbd 8b02 	vpop	{d8}
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e7d0 <__ieee754_rem_pio2+0x310>)
 800e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e552:	f7f1 fea1 	bl	8000298 <__aeabi_dsub>
 800e556:	a3a0      	add	r3, pc, #640	; (adr r3, 800e7d8 <__ieee754_rem_pio2+0x318>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	4604      	mov	r4, r0
 800e55e:	460d      	mov	r5, r1
 800e560:	f7f1 fe9a 	bl	8000298 <__aeabi_dsub>
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	e9ca 2300 	strd	r2, r3, [sl]
 800e56c:	4620      	mov	r0, r4
 800e56e:	4629      	mov	r1, r5
 800e570:	f7f1 fe92 	bl	8000298 <__aeabi_dsub>
 800e574:	a398      	add	r3, pc, #608	; (adr r3, 800e7d8 <__ieee754_rem_pio2+0x318>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	e7db      	b.n	800e534 <__ieee754_rem_pio2+0x74>
 800e57c:	f7f1 fe8e 	bl	800029c <__adddf3>
 800e580:	45b0      	cmp	r8, r6
 800e582:	4604      	mov	r4, r0
 800e584:	460d      	mov	r5, r1
 800e586:	d016      	beq.n	800e5b6 <__ieee754_rem_pio2+0xf6>
 800e588:	a38f      	add	r3, pc, #572	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x308>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f1 fe85 	bl	800029c <__adddf3>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	e9ca 2300 	strd	r2, r3, [sl]
 800e59a:	4620      	mov	r0, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f1 fe7b 	bl	8000298 <__aeabi_dsub>
 800e5a2:	a389      	add	r3, pc, #548	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x308>)
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	f7f1 fe78 	bl	800029c <__adddf3>
 800e5ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e5b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e5b4:	e7c4      	b.n	800e540 <__ieee754_rem_pio2+0x80>
 800e5b6:	a386      	add	r3, pc, #536	; (adr r3, 800e7d0 <__ieee754_rem_pio2+0x310>)
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	f7f1 fe6e 	bl	800029c <__adddf3>
 800e5c0:	a385      	add	r3, pc, #532	; (adr r3, 800e7d8 <__ieee754_rem_pio2+0x318>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	f7f1 fe67 	bl	800029c <__adddf3>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	e9ca 2300 	strd	r2, r3, [sl]
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	4629      	mov	r1, r5
 800e5da:	f7f1 fe5d 	bl	8000298 <__aeabi_dsub>
 800e5de:	a37e      	add	r3, pc, #504	; (adr r3, 800e7d8 <__ieee754_rem_pio2+0x318>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	e7e0      	b.n	800e5a8 <__ieee754_rem_pio2+0xe8>
 800e5e6:	4b87      	ldr	r3, [pc, #540]	; (800e804 <__ieee754_rem_pio2+0x344>)
 800e5e8:	4598      	cmp	r8, r3
 800e5ea:	f300 80d8 	bgt.w	800e79e <__ieee754_rem_pio2+0x2de>
 800e5ee:	f000 f96d 	bl	800e8cc <fabs>
 800e5f2:	ec55 4b10 	vmov	r4, r5, d0
 800e5f6:	ee10 0a10 	vmov	r0, s0
 800e5fa:	a379      	add	r3, pc, #484	; (adr r3, 800e7e0 <__ieee754_rem_pio2+0x320>)
 800e5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e600:	4629      	mov	r1, r5
 800e602:	f7f2 f801 	bl	8000608 <__aeabi_dmul>
 800e606:	4b80      	ldr	r3, [pc, #512]	; (800e808 <__ieee754_rem_pio2+0x348>)
 800e608:	2200      	movs	r2, #0
 800e60a:	f7f1 fe47 	bl	800029c <__adddf3>
 800e60e:	f7f2 faab 	bl	8000b68 <__aeabi_d2iz>
 800e612:	4683      	mov	fp, r0
 800e614:	f7f1 ff8e 	bl	8000534 <__aeabi_i2d>
 800e618:	4602      	mov	r2, r0
 800e61a:	460b      	mov	r3, r1
 800e61c:	ec43 2b18 	vmov	d8, r2, r3
 800e620:	a367      	add	r3, pc, #412	; (adr r3, 800e7c0 <__ieee754_rem_pio2+0x300>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 ffef 	bl	8000608 <__aeabi_dmul>
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	4620      	mov	r0, r4
 800e630:	4629      	mov	r1, r5
 800e632:	f7f1 fe31 	bl	8000298 <__aeabi_dsub>
 800e636:	a364      	add	r3, pc, #400	; (adr r3, 800e7c8 <__ieee754_rem_pio2+0x308>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	4606      	mov	r6, r0
 800e63e:	460f      	mov	r7, r1
 800e640:	ec51 0b18 	vmov	r0, r1, d8
 800e644:	f7f1 ffe0 	bl	8000608 <__aeabi_dmul>
 800e648:	f1bb 0f1f 	cmp.w	fp, #31
 800e64c:	4604      	mov	r4, r0
 800e64e:	460d      	mov	r5, r1
 800e650:	dc0d      	bgt.n	800e66e <__ieee754_rem_pio2+0x1ae>
 800e652:	4b6e      	ldr	r3, [pc, #440]	; (800e80c <__ieee754_rem_pio2+0x34c>)
 800e654:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65c:	4543      	cmp	r3, r8
 800e65e:	d006      	beq.n	800e66e <__ieee754_rem_pio2+0x1ae>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	4630      	mov	r0, r6
 800e666:	4639      	mov	r1, r7
 800e668:	f7f1 fe16 	bl	8000298 <__aeabi_dsub>
 800e66c:	e00e      	b.n	800e68c <__ieee754_rem_pio2+0x1cc>
 800e66e:	462b      	mov	r3, r5
 800e670:	4622      	mov	r2, r4
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f1 fe0f 	bl	8000298 <__aeabi_dsub>
 800e67a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e67e:	9303      	str	r3, [sp, #12]
 800e680:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e684:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e688:	2b10      	cmp	r3, #16
 800e68a:	dc02      	bgt.n	800e692 <__ieee754_rem_pio2+0x1d2>
 800e68c:	e9ca 0100 	strd	r0, r1, [sl]
 800e690:	e039      	b.n	800e706 <__ieee754_rem_pio2+0x246>
 800e692:	a34f      	add	r3, pc, #316	; (adr r3, 800e7d0 <__ieee754_rem_pio2+0x310>)
 800e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e698:	ec51 0b18 	vmov	r0, r1, d8
 800e69c:	f7f1 ffb4 	bl	8000608 <__aeabi_dmul>
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	f7f1 fdf4 	bl	8000298 <__aeabi_dsub>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4689      	mov	r9, r1
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	f7f1 fdec 	bl	8000298 <__aeabi_dsub>
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	f7f1 fde8 	bl	8000298 <__aeabi_dsub>
 800e6c8:	a343      	add	r3, pc, #268	; (adr r3, 800e7d8 <__ieee754_rem_pio2+0x318>)
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	ec51 0b18 	vmov	r0, r1, d8
 800e6d6:	f7f1 ff97 	bl	8000608 <__aeabi_dmul>
 800e6da:	4622      	mov	r2, r4
 800e6dc:	462b      	mov	r3, r5
 800e6de:	f7f1 fddb 	bl	8000298 <__aeabi_dsub>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	4640      	mov	r0, r8
 800e6ec:	4649      	mov	r1, r9
 800e6ee:	f7f1 fdd3 	bl	8000298 <__aeabi_dsub>
 800e6f2:	9a03      	ldr	r2, [sp, #12]
 800e6f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	2b31      	cmp	r3, #49	; 0x31
 800e6fc:	dc24      	bgt.n	800e748 <__ieee754_rem_pio2+0x288>
 800e6fe:	e9ca 0100 	strd	r0, r1, [sl]
 800e702:	4646      	mov	r6, r8
 800e704:	464f      	mov	r7, r9
 800e706:	e9da 8900 	ldrd	r8, r9, [sl]
 800e70a:	4630      	mov	r0, r6
 800e70c:	4642      	mov	r2, r8
 800e70e:	464b      	mov	r3, r9
 800e710:	4639      	mov	r1, r7
 800e712:	f7f1 fdc1 	bl	8000298 <__aeabi_dsub>
 800e716:	462b      	mov	r3, r5
 800e718:	4622      	mov	r2, r4
 800e71a:	f7f1 fdbd 	bl	8000298 <__aeabi_dsub>
 800e71e:	9b02      	ldr	r3, [sp, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e726:	f6bf af0b 	bge.w	800e540 <__ieee754_rem_pio2+0x80>
 800e72a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e72e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e736:	f8ca 8000 	str.w	r8, [sl]
 800e73a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e73e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e742:	f1cb 0b00 	rsb	fp, fp, #0
 800e746:	e6fb      	b.n	800e540 <__ieee754_rem_pio2+0x80>
 800e748:	a327      	add	r3, pc, #156	; (adr r3, 800e7e8 <__ieee754_rem_pio2+0x328>)
 800e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74e:	ec51 0b18 	vmov	r0, r1, d8
 800e752:	f7f1 ff59 	bl	8000608 <__aeabi_dmul>
 800e756:	4604      	mov	r4, r0
 800e758:	460d      	mov	r5, r1
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4640      	mov	r0, r8
 800e760:	4649      	mov	r1, r9
 800e762:	f7f1 fd99 	bl	8000298 <__aeabi_dsub>
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	4606      	mov	r6, r0
 800e76c:	460f      	mov	r7, r1
 800e76e:	4640      	mov	r0, r8
 800e770:	4649      	mov	r1, r9
 800e772:	f7f1 fd91 	bl	8000298 <__aeabi_dsub>
 800e776:	4622      	mov	r2, r4
 800e778:	462b      	mov	r3, r5
 800e77a:	f7f1 fd8d 	bl	8000298 <__aeabi_dsub>
 800e77e:	a31c      	add	r3, pc, #112	; (adr r3, 800e7f0 <__ieee754_rem_pio2+0x330>)
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	4604      	mov	r4, r0
 800e786:	460d      	mov	r5, r1
 800e788:	ec51 0b18 	vmov	r0, r1, d8
 800e78c:	f7f1 ff3c 	bl	8000608 <__aeabi_dmul>
 800e790:	4622      	mov	r2, r4
 800e792:	462b      	mov	r3, r5
 800e794:	f7f1 fd80 	bl	8000298 <__aeabi_dsub>
 800e798:	4604      	mov	r4, r0
 800e79a:	460d      	mov	r5, r1
 800e79c:	e760      	b.n	800e660 <__ieee754_rem_pio2+0x1a0>
 800e79e:	4b1c      	ldr	r3, [pc, #112]	; (800e810 <__ieee754_rem_pio2+0x350>)
 800e7a0:	4598      	cmp	r8, r3
 800e7a2:	dd37      	ble.n	800e814 <__ieee754_rem_pio2+0x354>
 800e7a4:	ee10 2a10 	vmov	r2, s0
 800e7a8:	462b      	mov	r3, r5
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7f1 fd73 	bl	8000298 <__aeabi_dsub>
 800e7b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7b6:	e9ca 0100 	strd	r0, r1, [sl]
 800e7ba:	e695      	b.n	800e4e8 <__ieee754_rem_pio2+0x28>
 800e7bc:	f3af 8000 	nop.w
 800e7c0:	54400000 	.word	0x54400000
 800e7c4:	3ff921fb 	.word	0x3ff921fb
 800e7c8:	1a626331 	.word	0x1a626331
 800e7cc:	3dd0b461 	.word	0x3dd0b461
 800e7d0:	1a600000 	.word	0x1a600000
 800e7d4:	3dd0b461 	.word	0x3dd0b461
 800e7d8:	2e037073 	.word	0x2e037073
 800e7dc:	3ba3198a 	.word	0x3ba3198a
 800e7e0:	6dc9c883 	.word	0x6dc9c883
 800e7e4:	3fe45f30 	.word	0x3fe45f30
 800e7e8:	2e000000 	.word	0x2e000000
 800e7ec:	3ba3198a 	.word	0x3ba3198a
 800e7f0:	252049c1 	.word	0x252049c1
 800e7f4:	397b839a 	.word	0x397b839a
 800e7f8:	3fe921fb 	.word	0x3fe921fb
 800e7fc:	4002d97b 	.word	0x4002d97b
 800e800:	3ff921fb 	.word	0x3ff921fb
 800e804:	413921fb 	.word	0x413921fb
 800e808:	3fe00000 	.word	0x3fe00000
 800e80c:	0800f6d4 	.word	0x0800f6d4
 800e810:	7fefffff 	.word	0x7fefffff
 800e814:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e818:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e81c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e820:	4620      	mov	r0, r4
 800e822:	460d      	mov	r5, r1
 800e824:	f7f2 f9a0 	bl	8000b68 <__aeabi_d2iz>
 800e828:	f7f1 fe84 	bl	8000534 <__aeabi_i2d>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4620      	mov	r0, r4
 800e832:	4629      	mov	r1, r5
 800e834:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e838:	f7f1 fd2e 	bl	8000298 <__aeabi_dsub>
 800e83c:	4b21      	ldr	r3, [pc, #132]	; (800e8c4 <__ieee754_rem_pio2+0x404>)
 800e83e:	2200      	movs	r2, #0
 800e840:	f7f1 fee2 	bl	8000608 <__aeabi_dmul>
 800e844:	460d      	mov	r5, r1
 800e846:	4604      	mov	r4, r0
 800e848:	f7f2 f98e 	bl	8000b68 <__aeabi_d2iz>
 800e84c:	f7f1 fe72 	bl	8000534 <__aeabi_i2d>
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4620      	mov	r0, r4
 800e856:	4629      	mov	r1, r5
 800e858:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e85c:	f7f1 fd1c 	bl	8000298 <__aeabi_dsub>
 800e860:	4b18      	ldr	r3, [pc, #96]	; (800e8c4 <__ieee754_rem_pio2+0x404>)
 800e862:	2200      	movs	r2, #0
 800e864:	f7f1 fed0 	bl	8000608 <__aeabi_dmul>
 800e868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e86c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e870:	2703      	movs	r7, #3
 800e872:	2400      	movs	r4, #0
 800e874:	2500      	movs	r5, #0
 800e876:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e87a:	4622      	mov	r2, r4
 800e87c:	462b      	mov	r3, r5
 800e87e:	46b9      	mov	r9, r7
 800e880:	3f01      	subs	r7, #1
 800e882:	f7f2 f929 	bl	8000ad8 <__aeabi_dcmpeq>
 800e886:	2800      	cmp	r0, #0
 800e888:	d1f5      	bne.n	800e876 <__ieee754_rem_pio2+0x3b6>
 800e88a:	4b0f      	ldr	r3, [pc, #60]	; (800e8c8 <__ieee754_rem_pio2+0x408>)
 800e88c:	9301      	str	r3, [sp, #4]
 800e88e:	2302      	movs	r3, #2
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	4632      	mov	r2, r6
 800e894:	464b      	mov	r3, r9
 800e896:	4651      	mov	r1, sl
 800e898:	a804      	add	r0, sp, #16
 800e89a:	f000 f821 	bl	800e8e0 <__kernel_rem_pio2>
 800e89e:	9b02      	ldr	r3, [sp, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	4683      	mov	fp, r0
 800e8a4:	f6bf ae4c 	bge.w	800e540 <__ieee754_rem_pio2+0x80>
 800e8a8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e8ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8b0:	e9ca 2300 	strd	r2, r3, [sl]
 800e8b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e8c0:	e73f      	b.n	800e742 <__ieee754_rem_pio2+0x282>
 800e8c2:	bf00      	nop
 800e8c4:	41700000 	.word	0x41700000
 800e8c8:	0800f754 	.word	0x0800f754

0800e8cc <fabs>:
 800e8cc:	ec51 0b10 	vmov	r0, r1, d0
 800e8d0:	ee10 2a10 	vmov	r2, s0
 800e8d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8d8:	ec43 2b10 	vmov	d0, r2, r3
 800e8dc:	4770      	bx	lr
	...

0800e8e0 <__kernel_rem_pio2>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	ed2d 8b02 	vpush	{d8}
 800e8e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e8ec:	f112 0f14 	cmn.w	r2, #20
 800e8f0:	9306      	str	r3, [sp, #24]
 800e8f2:	9104      	str	r1, [sp, #16]
 800e8f4:	4bc2      	ldr	r3, [pc, #776]	; (800ec00 <__kernel_rem_pio2+0x320>)
 800e8f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e8f8:	9009      	str	r0, [sp, #36]	; 0x24
 800e8fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	9b06      	ldr	r3, [sp, #24]
 800e902:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e906:	bfa8      	it	ge
 800e908:	1ed4      	subge	r4, r2, #3
 800e90a:	9305      	str	r3, [sp, #20]
 800e90c:	bfb2      	itee	lt
 800e90e:	2400      	movlt	r4, #0
 800e910:	2318      	movge	r3, #24
 800e912:	fb94 f4f3 	sdivge	r4, r4, r3
 800e916:	f06f 0317 	mvn.w	r3, #23
 800e91a:	fb04 3303 	mla	r3, r4, r3, r3
 800e91e:	eb03 0a02 	add.w	sl, r3, r2
 800e922:	9b00      	ldr	r3, [sp, #0]
 800e924:	9a05      	ldr	r2, [sp, #20]
 800e926:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800e92a:	eb03 0802 	add.w	r8, r3, r2
 800e92e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e930:	1aa7      	subs	r7, r4, r2
 800e932:	ae20      	add	r6, sp, #128	; 0x80
 800e934:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e938:	2500      	movs	r5, #0
 800e93a:	4545      	cmp	r5, r8
 800e93c:	dd13      	ble.n	800e966 <__kernel_rem_pio2+0x86>
 800e93e:	9b06      	ldr	r3, [sp, #24]
 800e940:	aa20      	add	r2, sp, #128	; 0x80
 800e942:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e946:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e94a:	f04f 0800 	mov.w	r8, #0
 800e94e:	9b00      	ldr	r3, [sp, #0]
 800e950:	4598      	cmp	r8, r3
 800e952:	dc31      	bgt.n	800e9b8 <__kernel_rem_pio2+0xd8>
 800e954:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800e958:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e95c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e960:	462f      	mov	r7, r5
 800e962:	2600      	movs	r6, #0
 800e964:	e01b      	b.n	800e99e <__kernel_rem_pio2+0xbe>
 800e966:	42ef      	cmn	r7, r5
 800e968:	d407      	bmi.n	800e97a <__kernel_rem_pio2+0x9a>
 800e96a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e96e:	f7f1 fde1 	bl	8000534 <__aeabi_i2d>
 800e972:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e976:	3501      	adds	r5, #1
 800e978:	e7df      	b.n	800e93a <__kernel_rem_pio2+0x5a>
 800e97a:	ec51 0b18 	vmov	r0, r1, d8
 800e97e:	e7f8      	b.n	800e972 <__kernel_rem_pio2+0x92>
 800e980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e984:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e988:	f7f1 fe3e 	bl	8000608 <__aeabi_dmul>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e994:	f7f1 fc82 	bl	800029c <__adddf3>
 800e998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e99c:	3601      	adds	r6, #1
 800e99e:	9b05      	ldr	r3, [sp, #20]
 800e9a0:	429e      	cmp	r6, r3
 800e9a2:	f1a7 0708 	sub.w	r7, r7, #8
 800e9a6:	ddeb      	ble.n	800e980 <__kernel_rem_pio2+0xa0>
 800e9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9ac:	f108 0801 	add.w	r8, r8, #1
 800e9b0:	ecab 7b02 	vstmia	fp!, {d7}
 800e9b4:	3508      	adds	r5, #8
 800e9b6:	e7ca      	b.n	800e94e <__kernel_rem_pio2+0x6e>
 800e9b8:	9b00      	ldr	r3, [sp, #0]
 800e9ba:	aa0c      	add	r2, sp, #48	; 0x30
 800e9bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e9c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e9c8:	9c00      	ldr	r4, [sp, #0]
 800e9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800e9cc:	00e3      	lsls	r3, r4, #3
 800e9ce:	9308      	str	r3, [sp, #32]
 800e9d0:	ab98      	add	r3, sp, #608	; 0x260
 800e9d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e9da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e9de:	ab70      	add	r3, sp, #448	; 0x1c0
 800e9e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e9e4:	46c3      	mov	fp, r8
 800e9e6:	46a1      	mov	r9, r4
 800e9e8:	f1b9 0f00 	cmp.w	r9, #0
 800e9ec:	f1a5 0508 	sub.w	r5, r5, #8
 800e9f0:	dc77      	bgt.n	800eae2 <__kernel_rem_pio2+0x202>
 800e9f2:	ec47 6b10 	vmov	d0, r6, r7
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	f000 fac2 	bl	800ef80 <scalbn>
 800e9fc:	ec57 6b10 	vmov	r6, r7, d0
 800ea00:	2200      	movs	r2, #0
 800ea02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea06:	ee10 0a10 	vmov	r0, s0
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	f7f1 fdfc 	bl	8000608 <__aeabi_dmul>
 800ea10:	ec41 0b10 	vmov	d0, r0, r1
 800ea14:	f000 fb34 	bl	800f080 <floor>
 800ea18:	4b7a      	ldr	r3, [pc, #488]	; (800ec04 <__kernel_rem_pio2+0x324>)
 800ea1a:	ec51 0b10 	vmov	r0, r1, d0
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f7f1 fdf2 	bl	8000608 <__aeabi_dmul>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4630      	mov	r0, r6
 800ea2a:	4639      	mov	r1, r7
 800ea2c:	f7f1 fc34 	bl	8000298 <__aeabi_dsub>
 800ea30:	460f      	mov	r7, r1
 800ea32:	4606      	mov	r6, r0
 800ea34:	f7f2 f898 	bl	8000b68 <__aeabi_d2iz>
 800ea38:	9002      	str	r0, [sp, #8]
 800ea3a:	f7f1 fd7b 	bl	8000534 <__aeabi_i2d>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4630      	mov	r0, r6
 800ea44:	4639      	mov	r1, r7
 800ea46:	f7f1 fc27 	bl	8000298 <__aeabi_dsub>
 800ea4a:	f1ba 0f00 	cmp.w	sl, #0
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	dd6d      	ble.n	800eb30 <__kernel_rem_pio2+0x250>
 800ea54:	1e61      	subs	r1, r4, #1
 800ea56:	ab0c      	add	r3, sp, #48	; 0x30
 800ea58:	9d02      	ldr	r5, [sp, #8]
 800ea5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea5e:	f1ca 0018 	rsb	r0, sl, #24
 800ea62:	fa43 f200 	asr.w	r2, r3, r0
 800ea66:	4415      	add	r5, r2
 800ea68:	4082      	lsls	r2, r0
 800ea6a:	1a9b      	subs	r3, r3, r2
 800ea6c:	aa0c      	add	r2, sp, #48	; 0x30
 800ea6e:	9502      	str	r5, [sp, #8]
 800ea70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ea74:	f1ca 0217 	rsb	r2, sl, #23
 800ea78:	fa43 fb02 	asr.w	fp, r3, r2
 800ea7c:	f1bb 0f00 	cmp.w	fp, #0
 800ea80:	dd65      	ble.n	800eb4e <__kernel_rem_pio2+0x26e>
 800ea82:	9b02      	ldr	r3, [sp, #8]
 800ea84:	2200      	movs	r2, #0
 800ea86:	3301      	adds	r3, #1
 800ea88:	9302      	str	r3, [sp, #8]
 800ea8a:	4615      	mov	r5, r2
 800ea8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea90:	4294      	cmp	r4, r2
 800ea92:	f300 809f 	bgt.w	800ebd4 <__kernel_rem_pio2+0x2f4>
 800ea96:	f1ba 0f00 	cmp.w	sl, #0
 800ea9a:	dd07      	ble.n	800eaac <__kernel_rem_pio2+0x1cc>
 800ea9c:	f1ba 0f01 	cmp.w	sl, #1
 800eaa0:	f000 80c1 	beq.w	800ec26 <__kernel_rem_pio2+0x346>
 800eaa4:	f1ba 0f02 	cmp.w	sl, #2
 800eaa8:	f000 80c7 	beq.w	800ec3a <__kernel_rem_pio2+0x35a>
 800eaac:	f1bb 0f02 	cmp.w	fp, #2
 800eab0:	d14d      	bne.n	800eb4e <__kernel_rem_pio2+0x26e>
 800eab2:	4632      	mov	r2, r6
 800eab4:	463b      	mov	r3, r7
 800eab6:	4954      	ldr	r1, [pc, #336]	; (800ec08 <__kernel_rem_pio2+0x328>)
 800eab8:	2000      	movs	r0, #0
 800eaba:	f7f1 fbed 	bl	8000298 <__aeabi_dsub>
 800eabe:	4606      	mov	r6, r0
 800eac0:	460f      	mov	r7, r1
 800eac2:	2d00      	cmp	r5, #0
 800eac4:	d043      	beq.n	800eb4e <__kernel_rem_pio2+0x26e>
 800eac6:	4650      	mov	r0, sl
 800eac8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ebf8 <__kernel_rem_pio2+0x318>
 800eacc:	f000 fa58 	bl	800ef80 <scalbn>
 800ead0:	4630      	mov	r0, r6
 800ead2:	4639      	mov	r1, r7
 800ead4:	ec53 2b10 	vmov	r2, r3, d0
 800ead8:	f7f1 fbde 	bl	8000298 <__aeabi_dsub>
 800eadc:	4606      	mov	r6, r0
 800eade:	460f      	mov	r7, r1
 800eae0:	e035      	b.n	800eb4e <__kernel_rem_pio2+0x26e>
 800eae2:	4b4a      	ldr	r3, [pc, #296]	; (800ec0c <__kernel_rem_pio2+0x32c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 fd8d 	bl	8000608 <__aeabi_dmul>
 800eaee:	f7f2 f83b 	bl	8000b68 <__aeabi_d2iz>
 800eaf2:	f7f1 fd1f 	bl	8000534 <__aeabi_i2d>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	ec43 2b18 	vmov	d8, r2, r3
 800eafe:	4b44      	ldr	r3, [pc, #272]	; (800ec10 <__kernel_rem_pio2+0x330>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	f7f1 fd81 	bl	8000608 <__aeabi_dmul>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	f7f1 fbc3 	bl	8000298 <__aeabi_dsub>
 800eb12:	f7f2 f829 	bl	8000b68 <__aeabi_d2iz>
 800eb16:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb1a:	f84b 0b04 	str.w	r0, [fp], #4
 800eb1e:	ec51 0b18 	vmov	r0, r1, d8
 800eb22:	f7f1 fbbb 	bl	800029c <__adddf3>
 800eb26:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	460f      	mov	r7, r1
 800eb2e:	e75b      	b.n	800e9e8 <__kernel_rem_pio2+0x108>
 800eb30:	d106      	bne.n	800eb40 <__kernel_rem_pio2+0x260>
 800eb32:	1e63      	subs	r3, r4, #1
 800eb34:	aa0c      	add	r2, sp, #48	; 0x30
 800eb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eb3e:	e79d      	b.n	800ea7c <__kernel_rem_pio2+0x19c>
 800eb40:	4b34      	ldr	r3, [pc, #208]	; (800ec14 <__kernel_rem_pio2+0x334>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	f7f1 ffe6 	bl	8000b14 <__aeabi_dcmpge>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d140      	bne.n	800ebce <__kernel_rem_pio2+0x2ee>
 800eb4c:	4683      	mov	fp, r0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2300      	movs	r3, #0
 800eb52:	4630      	mov	r0, r6
 800eb54:	4639      	mov	r1, r7
 800eb56:	f7f1 ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	f000 80c1 	beq.w	800ece2 <__kernel_rem_pio2+0x402>
 800eb60:	1e65      	subs	r5, r4, #1
 800eb62:	462b      	mov	r3, r5
 800eb64:	2200      	movs	r2, #0
 800eb66:	9900      	ldr	r1, [sp, #0]
 800eb68:	428b      	cmp	r3, r1
 800eb6a:	da6d      	bge.n	800ec48 <__kernel_rem_pio2+0x368>
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	f000 808a 	beq.w	800ec86 <__kernel_rem_pio2+0x3a6>
 800eb72:	ab0c      	add	r3, sp, #48	; 0x30
 800eb74:	f1aa 0a18 	sub.w	sl, sl, #24
 800eb78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 80ae 	beq.w	800ecde <__kernel_rem_pio2+0x3fe>
 800eb82:	4650      	mov	r0, sl
 800eb84:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ebf8 <__kernel_rem_pio2+0x318>
 800eb88:	f000 f9fa 	bl	800ef80 <scalbn>
 800eb8c:	1c6b      	adds	r3, r5, #1
 800eb8e:	00da      	lsls	r2, r3, #3
 800eb90:	9205      	str	r2, [sp, #20]
 800eb92:	ec57 6b10 	vmov	r6, r7, d0
 800eb96:	aa70      	add	r2, sp, #448	; 0x1c0
 800eb98:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ec0c <__kernel_rem_pio2+0x32c>
 800eb9c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eba0:	462c      	mov	r4, r5
 800eba2:	f04f 0800 	mov.w	r8, #0
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	f280 80d4 	bge.w	800ed54 <__kernel_rem_pio2+0x474>
 800ebac:	462c      	mov	r4, r5
 800ebae:	2c00      	cmp	r4, #0
 800ebb0:	f2c0 8102 	blt.w	800edb8 <__kernel_rem_pio2+0x4d8>
 800ebb4:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <__kernel_rem_pio2+0x338>)
 800ebb6:	461e      	mov	r6, r3
 800ebb8:	ab70      	add	r3, sp, #448	; 0x1c0
 800ebba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ebbe:	1b2b      	subs	r3, r5, r4
 800ebc0:	f04f 0900 	mov.w	r9, #0
 800ebc4:	f04f 0a00 	mov.w	sl, #0
 800ebc8:	2700      	movs	r7, #0
 800ebca:	9306      	str	r3, [sp, #24]
 800ebcc:	e0e6      	b.n	800ed9c <__kernel_rem_pio2+0x4bc>
 800ebce:	f04f 0b02 	mov.w	fp, #2
 800ebd2:	e756      	b.n	800ea82 <__kernel_rem_pio2+0x1a2>
 800ebd4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd8:	bb05      	cbnz	r5, 800ec1c <__kernel_rem_pio2+0x33c>
 800ebda:	b123      	cbz	r3, 800ebe6 <__kernel_rem_pio2+0x306>
 800ebdc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ebe0:	f8c8 3000 	str.w	r3, [r8]
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	3201      	adds	r2, #1
 800ebe8:	f108 0804 	add.w	r8, r8, #4
 800ebec:	461d      	mov	r5, r3
 800ebee:	e74f      	b.n	800ea90 <__kernel_rem_pio2+0x1b0>
	...
 800ebfc:	3ff00000 	.word	0x3ff00000
 800ec00:	0800f8a0 	.word	0x0800f8a0
 800ec04:	40200000 	.word	0x40200000
 800ec08:	3ff00000 	.word	0x3ff00000
 800ec0c:	3e700000 	.word	0x3e700000
 800ec10:	41700000 	.word	0x41700000
 800ec14:	3fe00000 	.word	0x3fe00000
 800ec18:	0800f860 	.word	0x0800f860
 800ec1c:	1acb      	subs	r3, r1, r3
 800ec1e:	f8c8 3000 	str.w	r3, [r8]
 800ec22:	462b      	mov	r3, r5
 800ec24:	e7df      	b.n	800ebe6 <__kernel_rem_pio2+0x306>
 800ec26:	1e62      	subs	r2, r4, #1
 800ec28:	ab0c      	add	r3, sp, #48	; 0x30
 800ec2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec32:	a90c      	add	r1, sp, #48	; 0x30
 800ec34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec38:	e738      	b.n	800eaac <__kernel_rem_pio2+0x1cc>
 800ec3a:	1e62      	subs	r2, r4, #1
 800ec3c:	ab0c      	add	r3, sp, #48	; 0x30
 800ec3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec46:	e7f4      	b.n	800ec32 <__kernel_rem_pio2+0x352>
 800ec48:	a90c      	add	r1, sp, #48	; 0x30
 800ec4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	430a      	orrs	r2, r1
 800ec52:	e788      	b.n	800eb66 <__kernel_rem_pio2+0x286>
 800ec54:	3301      	adds	r3, #1
 800ec56:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ec5a:	2900      	cmp	r1, #0
 800ec5c:	d0fa      	beq.n	800ec54 <__kernel_rem_pio2+0x374>
 800ec5e:	9a08      	ldr	r2, [sp, #32]
 800ec60:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ec64:	446a      	add	r2, sp
 800ec66:	3a98      	subs	r2, #152	; 0x98
 800ec68:	9208      	str	r2, [sp, #32]
 800ec6a:	9a06      	ldr	r2, [sp, #24]
 800ec6c:	a920      	add	r1, sp, #128	; 0x80
 800ec6e:	18a2      	adds	r2, r4, r2
 800ec70:	18e3      	adds	r3, r4, r3
 800ec72:	f104 0801 	add.w	r8, r4, #1
 800ec76:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ec7a:	9302      	str	r3, [sp, #8]
 800ec7c:	9b02      	ldr	r3, [sp, #8]
 800ec7e:	4543      	cmp	r3, r8
 800ec80:	da04      	bge.n	800ec8c <__kernel_rem_pio2+0x3ac>
 800ec82:	461c      	mov	r4, r3
 800ec84:	e6a2      	b.n	800e9cc <__kernel_rem_pio2+0xec>
 800ec86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e7e4      	b.n	800ec56 <__kernel_rem_pio2+0x376>
 800ec8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec92:	f7f1 fc4f 	bl	8000534 <__aeabi_i2d>
 800ec96:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec9c:	46ab      	mov	fp, r5
 800ec9e:	461c      	mov	r4, r3
 800eca0:	f04f 0900 	mov.w	r9, #0
 800eca4:	2600      	movs	r6, #0
 800eca6:	2700      	movs	r7, #0
 800eca8:	9b05      	ldr	r3, [sp, #20]
 800ecaa:	4599      	cmp	r9, r3
 800ecac:	dd06      	ble.n	800ecbc <__kernel_rem_pio2+0x3dc>
 800ecae:	9b08      	ldr	r3, [sp, #32]
 800ecb0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ecb4:	f108 0801 	add.w	r8, r8, #1
 800ecb8:	9308      	str	r3, [sp, #32]
 800ecba:	e7df      	b.n	800ec7c <__kernel_rem_pio2+0x39c>
 800ecbc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ecc0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ecc4:	f7f1 fca0 	bl	8000608 <__aeabi_dmul>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	4630      	mov	r0, r6
 800ecce:	4639      	mov	r1, r7
 800ecd0:	f7f1 fae4 	bl	800029c <__adddf3>
 800ecd4:	f109 0901 	add.w	r9, r9, #1
 800ecd8:	4606      	mov	r6, r0
 800ecda:	460f      	mov	r7, r1
 800ecdc:	e7e4      	b.n	800eca8 <__kernel_rem_pio2+0x3c8>
 800ecde:	3d01      	subs	r5, #1
 800ece0:	e747      	b.n	800eb72 <__kernel_rem_pio2+0x292>
 800ece2:	ec47 6b10 	vmov	d0, r6, r7
 800ece6:	f1ca 0000 	rsb	r0, sl, #0
 800ecea:	f000 f949 	bl	800ef80 <scalbn>
 800ecee:	ec57 6b10 	vmov	r6, r7, d0
 800ecf2:	4ba0      	ldr	r3, [pc, #640]	; (800ef74 <__kernel_rem_pio2+0x694>)
 800ecf4:	ee10 0a10 	vmov	r0, s0
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f7f1 ff0a 	bl	8000b14 <__aeabi_dcmpge>
 800ed00:	b1f8      	cbz	r0, 800ed42 <__kernel_rem_pio2+0x462>
 800ed02:	4b9d      	ldr	r3, [pc, #628]	; (800ef78 <__kernel_rem_pio2+0x698>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	4630      	mov	r0, r6
 800ed08:	4639      	mov	r1, r7
 800ed0a:	f7f1 fc7d 	bl	8000608 <__aeabi_dmul>
 800ed0e:	f7f1 ff2b 	bl	8000b68 <__aeabi_d2iz>
 800ed12:	4680      	mov	r8, r0
 800ed14:	f7f1 fc0e 	bl	8000534 <__aeabi_i2d>
 800ed18:	4b96      	ldr	r3, [pc, #600]	; (800ef74 <__kernel_rem_pio2+0x694>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f7f1 fc74 	bl	8000608 <__aeabi_dmul>
 800ed20:	460b      	mov	r3, r1
 800ed22:	4602      	mov	r2, r0
 800ed24:	4639      	mov	r1, r7
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7f1 fab6 	bl	8000298 <__aeabi_dsub>
 800ed2c:	f7f1 ff1c 	bl	8000b68 <__aeabi_d2iz>
 800ed30:	1c65      	adds	r5, r4, #1
 800ed32:	ab0c      	add	r3, sp, #48	; 0x30
 800ed34:	f10a 0a18 	add.w	sl, sl, #24
 800ed38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed3c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ed40:	e71f      	b.n	800eb82 <__kernel_rem_pio2+0x2a2>
 800ed42:	4630      	mov	r0, r6
 800ed44:	4639      	mov	r1, r7
 800ed46:	f7f1 ff0f 	bl	8000b68 <__aeabi_d2iz>
 800ed4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed4c:	4625      	mov	r5, r4
 800ed4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed52:	e716      	b.n	800eb82 <__kernel_rem_pio2+0x2a2>
 800ed54:	ab0c      	add	r3, sp, #48	; 0x30
 800ed56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ed5a:	f7f1 fbeb 	bl	8000534 <__aeabi_i2d>
 800ed5e:	4632      	mov	r2, r6
 800ed60:	463b      	mov	r3, r7
 800ed62:	f7f1 fc51 	bl	8000608 <__aeabi_dmul>
 800ed66:	4642      	mov	r2, r8
 800ed68:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ed6c:	464b      	mov	r3, r9
 800ed6e:	4630      	mov	r0, r6
 800ed70:	4639      	mov	r1, r7
 800ed72:	f7f1 fc49 	bl	8000608 <__aeabi_dmul>
 800ed76:	3c01      	subs	r4, #1
 800ed78:	4606      	mov	r6, r0
 800ed7a:	460f      	mov	r7, r1
 800ed7c:	e713      	b.n	800eba6 <__kernel_rem_pio2+0x2c6>
 800ed7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ed82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ed86:	f7f1 fc3f 	bl	8000608 <__aeabi_dmul>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4648      	mov	r0, r9
 800ed90:	4651      	mov	r1, sl
 800ed92:	f7f1 fa83 	bl	800029c <__adddf3>
 800ed96:	3701      	adds	r7, #1
 800ed98:	4681      	mov	r9, r0
 800ed9a:	468a      	mov	sl, r1
 800ed9c:	9b00      	ldr	r3, [sp, #0]
 800ed9e:	429f      	cmp	r7, r3
 800eda0:	dc02      	bgt.n	800eda8 <__kernel_rem_pio2+0x4c8>
 800eda2:	9b06      	ldr	r3, [sp, #24]
 800eda4:	429f      	cmp	r7, r3
 800eda6:	ddea      	ble.n	800ed7e <__kernel_rem_pio2+0x49e>
 800eda8:	9a06      	ldr	r2, [sp, #24]
 800edaa:	ab48      	add	r3, sp, #288	; 0x120
 800edac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800edb0:	e9c6 9a00 	strd	r9, sl, [r6]
 800edb4:	3c01      	subs	r4, #1
 800edb6:	e6fa      	b.n	800ebae <__kernel_rem_pio2+0x2ce>
 800edb8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800edba:	2b02      	cmp	r3, #2
 800edbc:	dc0b      	bgt.n	800edd6 <__kernel_rem_pio2+0x4f6>
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dc39      	bgt.n	800ee36 <__kernel_rem_pio2+0x556>
 800edc2:	d05d      	beq.n	800ee80 <__kernel_rem_pio2+0x5a0>
 800edc4:	9b02      	ldr	r3, [sp, #8]
 800edc6:	f003 0007 	and.w	r0, r3, #7
 800edca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800edce:	ecbd 8b02 	vpop	{d8}
 800edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d1f3      	bne.n	800edc4 <__kernel_rem_pio2+0x4e4>
 800eddc:	9b05      	ldr	r3, [sp, #20]
 800edde:	9500      	str	r5, [sp, #0]
 800ede0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ede4:	eb0d 0403 	add.w	r4, sp, r3
 800ede8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800edec:	46a2      	mov	sl, r4
 800edee:	9b00      	ldr	r3, [sp, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f1aa 0a08 	sub.w	sl, sl, #8
 800edf6:	dc69      	bgt.n	800eecc <__kernel_rem_pio2+0x5ec>
 800edf8:	46aa      	mov	sl, r5
 800edfa:	f1ba 0f01 	cmp.w	sl, #1
 800edfe:	f1a4 0408 	sub.w	r4, r4, #8
 800ee02:	f300 8083 	bgt.w	800ef0c <__kernel_rem_pio2+0x62c>
 800ee06:	9c05      	ldr	r4, [sp, #20]
 800ee08:	ab48      	add	r3, sp, #288	; 0x120
 800ee0a:	441c      	add	r4, r3
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	2100      	movs	r1, #0
 800ee10:	2d01      	cmp	r5, #1
 800ee12:	f300 809a 	bgt.w	800ef4a <__kernel_rem_pio2+0x66a>
 800ee16:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ee1a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ee1e:	f1bb 0f00 	cmp.w	fp, #0
 800ee22:	f040 8098 	bne.w	800ef56 <__kernel_rem_pio2+0x676>
 800ee26:	9b04      	ldr	r3, [sp, #16]
 800ee28:	e9c3 7800 	strd	r7, r8, [r3]
 800ee2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ee30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee34:	e7c6      	b.n	800edc4 <__kernel_rem_pio2+0x4e4>
 800ee36:	9e05      	ldr	r6, [sp, #20]
 800ee38:	ab48      	add	r3, sp, #288	; 0x120
 800ee3a:	441e      	add	r6, r3
 800ee3c:	462c      	mov	r4, r5
 800ee3e:	2000      	movs	r0, #0
 800ee40:	2100      	movs	r1, #0
 800ee42:	2c00      	cmp	r4, #0
 800ee44:	da33      	bge.n	800eeae <__kernel_rem_pio2+0x5ce>
 800ee46:	f1bb 0f00 	cmp.w	fp, #0
 800ee4a:	d036      	beq.n	800eeba <__kernel_rem_pio2+0x5da>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee52:	9c04      	ldr	r4, [sp, #16]
 800ee54:	e9c4 2300 	strd	r2, r3, [r4]
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ee60:	f7f1 fa1a 	bl	8000298 <__aeabi_dsub>
 800ee64:	ae4a      	add	r6, sp, #296	; 0x128
 800ee66:	2401      	movs	r4, #1
 800ee68:	42a5      	cmp	r5, r4
 800ee6a:	da29      	bge.n	800eec0 <__kernel_rem_pio2+0x5e0>
 800ee6c:	f1bb 0f00 	cmp.w	fp, #0
 800ee70:	d002      	beq.n	800ee78 <__kernel_rem_pio2+0x598>
 800ee72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee76:	4619      	mov	r1, r3
 800ee78:	9b04      	ldr	r3, [sp, #16]
 800ee7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ee7e:	e7a1      	b.n	800edc4 <__kernel_rem_pio2+0x4e4>
 800ee80:	9c05      	ldr	r4, [sp, #20]
 800ee82:	ab48      	add	r3, sp, #288	; 0x120
 800ee84:	441c      	add	r4, r3
 800ee86:	2000      	movs	r0, #0
 800ee88:	2100      	movs	r1, #0
 800ee8a:	2d00      	cmp	r5, #0
 800ee8c:	da09      	bge.n	800eea2 <__kernel_rem_pio2+0x5c2>
 800ee8e:	f1bb 0f00 	cmp.w	fp, #0
 800ee92:	d002      	beq.n	800ee9a <__kernel_rem_pio2+0x5ba>
 800ee94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee98:	4619      	mov	r1, r3
 800ee9a:	9b04      	ldr	r3, [sp, #16]
 800ee9c:	e9c3 0100 	strd	r0, r1, [r3]
 800eea0:	e790      	b.n	800edc4 <__kernel_rem_pio2+0x4e4>
 800eea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eea6:	f7f1 f9f9 	bl	800029c <__adddf3>
 800eeaa:	3d01      	subs	r5, #1
 800eeac:	e7ed      	b.n	800ee8a <__kernel_rem_pio2+0x5aa>
 800eeae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800eeb2:	f7f1 f9f3 	bl	800029c <__adddf3>
 800eeb6:	3c01      	subs	r4, #1
 800eeb8:	e7c3      	b.n	800ee42 <__kernel_rem_pio2+0x562>
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	e7c8      	b.n	800ee52 <__kernel_rem_pio2+0x572>
 800eec0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eec4:	f7f1 f9ea 	bl	800029c <__adddf3>
 800eec8:	3401      	adds	r4, #1
 800eeca:	e7cd      	b.n	800ee68 <__kernel_rem_pio2+0x588>
 800eecc:	e9da 8900 	ldrd	r8, r9, [sl]
 800eed0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800eed4:	9b00      	ldr	r3, [sp, #0]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	4632      	mov	r2, r6
 800eedc:	463b      	mov	r3, r7
 800eede:	4640      	mov	r0, r8
 800eee0:	4649      	mov	r1, r9
 800eee2:	f7f1 f9db 	bl	800029c <__adddf3>
 800eee6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4640      	mov	r0, r8
 800eef0:	4649      	mov	r1, r9
 800eef2:	f7f1 f9d1 	bl	8000298 <__aeabi_dsub>
 800eef6:	4632      	mov	r2, r6
 800eef8:	463b      	mov	r3, r7
 800eefa:	f7f1 f9cf 	bl	800029c <__adddf3>
 800eefe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ef02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef06:	ed8a 7b00 	vstr	d7, [sl]
 800ef0a:	e770      	b.n	800edee <__kernel_rem_pio2+0x50e>
 800ef0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ef14:	4640      	mov	r0, r8
 800ef16:	4632      	mov	r2, r6
 800ef18:	463b      	mov	r3, r7
 800ef1a:	4649      	mov	r1, r9
 800ef1c:	f7f1 f9be 	bl	800029c <__adddf3>
 800ef20:	e9cd 0100 	strd	r0, r1, [sp]
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	4640      	mov	r0, r8
 800ef2a:	4649      	mov	r1, r9
 800ef2c:	f7f1 f9b4 	bl	8000298 <__aeabi_dsub>
 800ef30:	4632      	mov	r2, r6
 800ef32:	463b      	mov	r3, r7
 800ef34:	f7f1 f9b2 	bl	800029c <__adddf3>
 800ef38:	ed9d 7b00 	vldr	d7, [sp]
 800ef3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef40:	ed84 7b00 	vstr	d7, [r4]
 800ef44:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef48:	e757      	b.n	800edfa <__kernel_rem_pio2+0x51a>
 800ef4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef4e:	f7f1 f9a5 	bl	800029c <__adddf3>
 800ef52:	3d01      	subs	r5, #1
 800ef54:	e75c      	b.n	800ee10 <__kernel_rem_pio2+0x530>
 800ef56:	9b04      	ldr	r3, [sp, #16]
 800ef58:	9a04      	ldr	r2, [sp, #16]
 800ef5a:	601f      	str	r7, [r3, #0]
 800ef5c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ef60:	605c      	str	r4, [r3, #4]
 800ef62:	609d      	str	r5, [r3, #8]
 800ef64:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef68:	60d3      	str	r3, [r2, #12]
 800ef6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef6e:	6110      	str	r0, [r2, #16]
 800ef70:	6153      	str	r3, [r2, #20]
 800ef72:	e727      	b.n	800edc4 <__kernel_rem_pio2+0x4e4>
 800ef74:	41700000 	.word	0x41700000
 800ef78:	3e700000 	.word	0x3e700000
 800ef7c:	00000000 	.word	0x00000000

0800ef80 <scalbn>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	ec55 4b10 	vmov	r4, r5, d0
 800ef86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ef8a:	4606      	mov	r6, r0
 800ef8c:	462b      	mov	r3, r5
 800ef8e:	b999      	cbnz	r1, 800efb8 <scalbn+0x38>
 800ef90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ef94:	4323      	orrs	r3, r4
 800ef96:	d03f      	beq.n	800f018 <scalbn+0x98>
 800ef98:	4b35      	ldr	r3, [pc, #212]	; (800f070 <scalbn+0xf0>)
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	ee10 0a10 	vmov	r0, s0
 800efa0:	2200      	movs	r2, #0
 800efa2:	f7f1 fb31 	bl	8000608 <__aeabi_dmul>
 800efa6:	4b33      	ldr	r3, [pc, #204]	; (800f074 <scalbn+0xf4>)
 800efa8:	429e      	cmp	r6, r3
 800efaa:	4604      	mov	r4, r0
 800efac:	460d      	mov	r5, r1
 800efae:	da10      	bge.n	800efd2 <scalbn+0x52>
 800efb0:	a327      	add	r3, pc, #156	; (adr r3, 800f050 <scalbn+0xd0>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	e01f      	b.n	800eff8 <scalbn+0x78>
 800efb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800efbc:	4291      	cmp	r1, r2
 800efbe:	d10c      	bne.n	800efda <scalbn+0x5a>
 800efc0:	ee10 2a10 	vmov	r2, s0
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 f968 	bl	800029c <__adddf3>
 800efcc:	4604      	mov	r4, r0
 800efce:	460d      	mov	r5, r1
 800efd0:	e022      	b.n	800f018 <scalbn+0x98>
 800efd2:	460b      	mov	r3, r1
 800efd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800efd8:	3936      	subs	r1, #54	; 0x36
 800efda:	f24c 3250 	movw	r2, #50000	; 0xc350
 800efde:	4296      	cmp	r6, r2
 800efe0:	dd0d      	ble.n	800effe <scalbn+0x7e>
 800efe2:	2d00      	cmp	r5, #0
 800efe4:	a11c      	add	r1, pc, #112	; (adr r1, 800f058 <scalbn+0xd8>)
 800efe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efea:	da02      	bge.n	800eff2 <scalbn+0x72>
 800efec:	a11c      	add	r1, pc, #112	; (adr r1, 800f060 <scalbn+0xe0>)
 800efee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eff2:	a319      	add	r3, pc, #100	; (adr r3, 800f058 <scalbn+0xd8>)
 800eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff8:	f7f1 fb06 	bl	8000608 <__aeabi_dmul>
 800effc:	e7e6      	b.n	800efcc <scalbn+0x4c>
 800effe:	1872      	adds	r2, r6, r1
 800f000:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f004:	428a      	cmp	r2, r1
 800f006:	dcec      	bgt.n	800efe2 <scalbn+0x62>
 800f008:	2a00      	cmp	r2, #0
 800f00a:	dd08      	ble.n	800f01e <scalbn+0x9e>
 800f00c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f010:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f014:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f018:	ec45 4b10 	vmov	d0, r4, r5
 800f01c:	bd70      	pop	{r4, r5, r6, pc}
 800f01e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f022:	da08      	bge.n	800f036 <scalbn+0xb6>
 800f024:	2d00      	cmp	r5, #0
 800f026:	a10a      	add	r1, pc, #40	; (adr r1, 800f050 <scalbn+0xd0>)
 800f028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f02c:	dac0      	bge.n	800efb0 <scalbn+0x30>
 800f02e:	a10e      	add	r1, pc, #56	; (adr r1, 800f068 <scalbn+0xe8>)
 800f030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f034:	e7bc      	b.n	800efb0 <scalbn+0x30>
 800f036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f03a:	3236      	adds	r2, #54	; 0x36
 800f03c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f044:	4620      	mov	r0, r4
 800f046:	4b0c      	ldr	r3, [pc, #48]	; (800f078 <scalbn+0xf8>)
 800f048:	2200      	movs	r2, #0
 800f04a:	e7d5      	b.n	800eff8 <scalbn+0x78>
 800f04c:	f3af 8000 	nop.w
 800f050:	c2f8f359 	.word	0xc2f8f359
 800f054:	01a56e1f 	.word	0x01a56e1f
 800f058:	8800759c 	.word	0x8800759c
 800f05c:	7e37e43c 	.word	0x7e37e43c
 800f060:	8800759c 	.word	0x8800759c
 800f064:	fe37e43c 	.word	0xfe37e43c
 800f068:	c2f8f359 	.word	0xc2f8f359
 800f06c:	81a56e1f 	.word	0x81a56e1f
 800f070:	43500000 	.word	0x43500000
 800f074:	ffff3cb0 	.word	0xffff3cb0
 800f078:	3c900000 	.word	0x3c900000
 800f07c:	00000000 	.word	0x00000000

0800f080 <floor>:
 800f080:	ec51 0b10 	vmov	r0, r1, d0
 800f084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f090:	2e13      	cmp	r6, #19
 800f092:	ee10 5a10 	vmov	r5, s0
 800f096:	ee10 8a10 	vmov	r8, s0
 800f09a:	460c      	mov	r4, r1
 800f09c:	dc31      	bgt.n	800f102 <floor+0x82>
 800f09e:	2e00      	cmp	r6, #0
 800f0a0:	da14      	bge.n	800f0cc <floor+0x4c>
 800f0a2:	a333      	add	r3, pc, #204	; (adr r3, 800f170 <floor+0xf0>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 f8f8 	bl	800029c <__adddf3>
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f7f1 fd3a 	bl	8000b28 <__aeabi_dcmpgt>
 800f0b4:	b138      	cbz	r0, 800f0c6 <floor+0x46>
 800f0b6:	2c00      	cmp	r4, #0
 800f0b8:	da53      	bge.n	800f162 <floor+0xe2>
 800f0ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f0be:	4325      	orrs	r5, r4
 800f0c0:	d052      	beq.n	800f168 <floor+0xe8>
 800f0c2:	4c2d      	ldr	r4, [pc, #180]	; (800f178 <floor+0xf8>)
 800f0c4:	2500      	movs	r5, #0
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e024      	b.n	800f116 <floor+0x96>
 800f0cc:	4f2b      	ldr	r7, [pc, #172]	; (800f17c <floor+0xfc>)
 800f0ce:	4137      	asrs	r7, r6
 800f0d0:	ea01 0307 	and.w	r3, r1, r7
 800f0d4:	4303      	orrs	r3, r0
 800f0d6:	d01e      	beq.n	800f116 <floor+0x96>
 800f0d8:	a325      	add	r3, pc, #148	; (adr r3, 800f170 <floor+0xf0>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 f8dd 	bl	800029c <__adddf3>
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f7f1 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d0eb      	beq.n	800f0c6 <floor+0x46>
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	bfbe      	ittt	lt
 800f0f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f0f6:	4133      	asrlt	r3, r6
 800f0f8:	18e4      	addlt	r4, r4, r3
 800f0fa:	ea24 0407 	bic.w	r4, r4, r7
 800f0fe:	2500      	movs	r5, #0
 800f100:	e7e1      	b.n	800f0c6 <floor+0x46>
 800f102:	2e33      	cmp	r6, #51	; 0x33
 800f104:	dd0b      	ble.n	800f11e <floor+0x9e>
 800f106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f10a:	d104      	bne.n	800f116 <floor+0x96>
 800f10c:	ee10 2a10 	vmov	r2, s0
 800f110:	460b      	mov	r3, r1
 800f112:	f7f1 f8c3 	bl	800029c <__adddf3>
 800f116:	ec41 0b10 	vmov	d0, r0, r1
 800f11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f122:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f126:	40df      	lsrs	r7, r3
 800f128:	4238      	tst	r0, r7
 800f12a:	d0f4      	beq.n	800f116 <floor+0x96>
 800f12c:	a310      	add	r3, pc, #64	; (adr r3, 800f170 <floor+0xf0>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	f7f1 f8b3 	bl	800029c <__adddf3>
 800f136:	2200      	movs	r2, #0
 800f138:	2300      	movs	r3, #0
 800f13a:	f7f1 fcf5 	bl	8000b28 <__aeabi_dcmpgt>
 800f13e:	2800      	cmp	r0, #0
 800f140:	d0c1      	beq.n	800f0c6 <floor+0x46>
 800f142:	2c00      	cmp	r4, #0
 800f144:	da0a      	bge.n	800f15c <floor+0xdc>
 800f146:	2e14      	cmp	r6, #20
 800f148:	d101      	bne.n	800f14e <floor+0xce>
 800f14a:	3401      	adds	r4, #1
 800f14c:	e006      	b.n	800f15c <floor+0xdc>
 800f14e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f152:	2301      	movs	r3, #1
 800f154:	40b3      	lsls	r3, r6
 800f156:	441d      	add	r5, r3
 800f158:	45a8      	cmp	r8, r5
 800f15a:	d8f6      	bhi.n	800f14a <floor+0xca>
 800f15c:	ea25 0507 	bic.w	r5, r5, r7
 800f160:	e7b1      	b.n	800f0c6 <floor+0x46>
 800f162:	2500      	movs	r5, #0
 800f164:	462c      	mov	r4, r5
 800f166:	e7ae      	b.n	800f0c6 <floor+0x46>
 800f168:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f16c:	e7ab      	b.n	800f0c6 <floor+0x46>
 800f16e:	bf00      	nop
 800f170:	8800759c 	.word	0x8800759c
 800f174:	7e37e43c 	.word	0x7e37e43c
 800f178:	bff00000 	.word	0xbff00000
 800f17c:	000fffff 	.word	0x000fffff

0800f180 <_init>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	bf00      	nop
 800f184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f186:	bc08      	pop	{r3}
 800f188:	469e      	mov	lr, r3
 800f18a:	4770      	bx	lr

0800f18c <_fini>:
 800f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18e:	bf00      	nop
 800f190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f192:	bc08      	pop	{r3}
 800f194:	469e      	mov	lr, r3
 800f196:	4770      	bx	lr
