
rover_mecanum_uart_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011158  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  080112f8  080112f8  000212f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b70  08011b70  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08011b70  08011b70  00021b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b78  08011b78  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b78  08011b78  00021b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b7c  08011b7c  00021b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08011b80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a8  200002b4  08011e34  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000575c  08011e34  0003575c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f7e0  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004406  00000000  00000000  0004fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00053f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000152e  00000000  00000000  00055a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ee2  00000000  00000000  00056f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2c5  00000000  00000000  0005ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a01e6  00000000  00000000  000790d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088cc  00000000  00000000  001192bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00121b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080112e0 	.word	0x080112e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	080112e0 	.word	0x080112e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <lwpkt_lwrb_uart_init>:
UART_HandleTypeDef* huart_p;


void lwpkt_lwrb_uart_task(void* argument);

void lwpkt_lwrb_uart_init(const lwpkt_lwrb_uart_init_data_t* init_data){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_taskHandle = osThreadNew(lwpkt_lwrb_uart_task, init_data, &lwpkt_lwrb_uart_task_attributes);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <lwpkt_lwrb_uart_init+0x20>)
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <lwpkt_lwrb_uart_init+0x24>)
 800102e:	f005 fb4b 	bl	80066c8 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <lwpkt_lwrb_uart_init+0x28>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080114cc 	.word	0x080114cc
 8001044:	080010cd 	.word	0x080010cd
 8001048:	20000918 	.word	0x20000918

0800104c <uart_tx_rb_evt_fn>:

void uart_tx_rb_evt_fn(lwrb_t* buff, lwrb_evt_type_t type, lwrb_sz_t len){
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	72fb      	strb	r3, [r7, #11]
	switch (type) {
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d12d      	bne.n	80010bc <uart_tx_rb_evt_fn+0x70>
		case LWRB_EVT_WRITE:
			lwrb_sz_t size = lwrb_get_linear_block_read_length(buff);
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f00a fc5f 	bl	800b924 <lwrb_get_linear_block_read_length>
 8001066:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <uart_tx_rb_evt_fn+0x7c>)
 800106a:	681c      	ldr	r4, [r3, #0]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f00a fc3d 	bl	800b8ec <lwrb_get_linear_block_read_address>
 8001072:	4601      	mov	r1, r0
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	b29a      	uxth	r2, r3
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107c:	4620      	mov	r0, r4
 800107e:	f004 f8c7 	bl	8005210 <HAL_UART_Transmit>
			lwrb_skip(buff, size);
 8001082:	6979      	ldr	r1, [r7, #20]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f00a fc8a 	bl	800b99e <lwrb_skip>
			size = lwrb_get_linear_block_read_length(buff);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f00a fc4a 	bl	800b924 <lwrb_get_linear_block_read_length>
 8001090:	6178      	str	r0, [r7, #20]
			if (size > 0) {
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <uart_tx_rb_evt_fn+0x66>
					HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <uart_tx_rb_evt_fn+0x7c>)
 800109a:	681c      	ldr	r4, [r3, #0]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f00a fc25 	bl	800b8ec <lwrb_get_linear_block_read_address>
 80010a2:	4601      	mov	r1, r0
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ac:	4620      	mov	r0, r4
 80010ae:	f004 f8af 	bl	8005210 <HAL_UART_Transmit>
			}
			lwrb_skip(buff, size);
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f00a fc72 	bl	800b99e <lwrb_skip>

			break;
 80010ba:	e000      	b.n	80010be <uart_tx_rb_evt_fn+0x72>
		default:
			break;
 80010bc:	bf00      	nop
	}
}
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000091c 	.word	0x2000091c

080010cc <lwpkt_lwrb_uart_task>:

void lwpkt_lwrb_uart_task(void* argument){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_init_data_t* init_data_p = (lwpkt_lwrb_uart_init_data_t*)argument;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
	huart_p = init_data_p->huart_p;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <lwpkt_lwrb_uart_task+0xc8>)
 80010de:	6013      	str	r3, [r2, #0]

	uart_rb_queueHandle = osMessageQueueNew(UART_RB_SIZE_QUEUE_SIZE, sizeof(uint16_t), &uart_rb_queue_attributes);
 80010e0:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <lwpkt_lwrb_uart_task+0xcc>)
 80010e2:	2102      	movs	r1, #2
 80010e4:	200a      	movs	r0, #10
 80010e6:	f005 fcbb 	bl	8006a60 <osMessageQueueNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <lwpkt_lwrb_uart_task+0xd0>)
 80010ee:	6013      	str	r3, [r2, #0]

	lwrb_init(&uart_rx_buffer, uart_rx_data_buffer, UART_RX_BUFFER_SIZE);
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	492a      	ldr	r1, [pc, #168]	; (80011a0 <lwpkt_lwrb_uart_task+0xd4>)
 80010f6:	482b      	ldr	r0, [pc, #172]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 80010f8:	f00a f9d8 	bl	800b4ac <lwrb_init>

	lwrb_init(&uart_tx_buffer, uart_tx_data_buffer, UART_TX_BUFFER_SIZE);
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	4929      	ldr	r1, [pc, #164]	; (80011a8 <lwpkt_lwrb_uart_task+0xdc>)
 8001102:	482a      	ldr	r0, [pc, #168]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 8001104:	f00a f9d2 	bl	800b4ac <lwrb_init>
	lwrb_set_evt_fn(&uart_tx_buffer, uart_tx_rb_evt_fn);
 8001108:	4929      	ldr	r1, [pc, #164]	; (80011b0 <lwpkt_lwrb_uart_task+0xe4>)
 800110a:	4828      	ldr	r0, [pc, #160]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 800110c:	f00a f9ff 	bl	800b50e <lwrb_set_evt_fn>

	lwpkt_init(&uart_lwpkt, &uart_tx_buffer, &uart_rx_buffer);
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 8001112:	4926      	ldr	r1, [pc, #152]	; (80011ac <lwpkt_lwrb_uart_task+0xe0>)
 8001114:	4827      	ldr	r0, [pc, #156]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 8001116:	f009 ffe0 	bl	800b0da <lwpkt_init>
	lwpkt_set_evt_fn(&uart_lwpkt, init_data_p->lwpkt_evt_fn);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	4824      	ldr	r0, [pc, #144]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 8001122:	f00a f9b3 	bl	800b48c <lwpkt_set_evt_fn>
	//osEventFlagsSet(lwpkt_eventsHandle, lwpkt_init_event_flag);

	HAL_UARTEx_ReceiveToIdle_DMA(huart_p, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <lwpkt_lwrb_uart_task+0xc8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	4922      	ldr	r1, [pc, #136]	; (80011b8 <lwpkt_lwrb_uart_task+0xec>)
 8001130:	4618      	mov	r0, r3
 8001132:	f004 f8f8 	bl	8005326 <HAL_UARTEx_ReceiveToIdle_DMA>
	/* Infinite loop */
	for(;;)
	{
		uint16_t Size;
		osMessageQueueGet(uart_rb_queueHandle, &Size, NULL, osWaitForever);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <lwpkt_lwrb_uart_task+0xd0>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 010a 	add.w	r1, r7, #10
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	2200      	movs	r2, #0
 8001144:	f005 fd60 	bl	8006c08 <osMessageQueueGet>

		static uint16_t pos = 0;
		lwrb_write(&uart_rx_buffer, &uart_dma_rx_buffer[pos], Size >= pos ? Size - pos : Size - pos + UART_DMA_RX_BUFFER_SIZE);
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <lwpkt_lwrb_uart_task+0xec>)
 8001150:	18d1      	adds	r1, r2, r3
 8001152:	897a      	ldrh	r2, [r7, #10]
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d305      	bcc.n	8001168 <lwpkt_lwrb_uart_task+0x9c>
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	461a      	mov	r2, r3
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	e006      	b.n	8001176 <lwpkt_lwrb_uart_task+0xaa>
 8001168:	897b      	ldrh	r3, [r7, #10]
 800116a:	461a      	mov	r2, r3
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001176:	461a      	mov	r2, r3
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <lwpkt_lwrb_uart_task+0xd8>)
 800117a:	f00a f9e1 	bl	800b540 <lwrb_write>
		pos = Size;
 800117e:	897a      	ldrh	r2, [r7, #10]
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <lwpkt_lwrb_uart_task+0xf0>)
 8001182:	801a      	strh	r2, [r3, #0]
		lwpkt_process(&uart_lwpkt, HAL_GetTick());
 8001184:	f001 fa72 	bl	800266c <HAL_GetTick>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <lwpkt_lwrb_uart_task+0xe8>)
 800118e:	f00a f91b 	bl	800b3c8 <lwpkt_process>
	{
 8001192:	e7d0      	b.n	8001136 <lwpkt_lwrb_uart_task+0x6a>
 8001194:	2000091c 	.word	0x2000091c
 8001198:	080114b4 	.word	0x080114b4
 800119c:	20000914 	.word	0x20000914
 80011a0:	20000500 	.word	0x20000500
 80011a4:	200004ec 	.word	0x200004ec
 80011a8:	20000714 	.word	0x20000714
 80011ac:	20000700 	.word	0x20000700
 80011b0:	0800104d 	.word	0x0800104d
 80011b4:	200002d0 	.word	0x200002d0
 80011b8:	200003ec 	.word	0x200003ec
 80011bc:	20000920 	.word	0x20000920

080011c0 <lwrb_uart_callback>:
	}
}

void lwrb_uart_callback(uint16_t Size){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	osMessageQueuePut(uart_rb_queueHandle, &Size, 0, 0);
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <lwrb_uart_callback+0x20>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	1db9      	adds	r1, r7, #6
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	f005 fcb8 	bl	8006b48 <osMessageQueuePut>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000914 	.word	0x20000914

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f001 fa0a 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f844 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f000 fb58 	bl	80018a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f4:	f000 fb36 	bl	8001864 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f8:	f000 fae0 	bl	80017bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011fc:	f000 f8a6 	bl	800134c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001200:	f000 f968 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001204:	f000 f9ba 	bl	800157c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001208:	f000 fa0c 	bl	8001624 <MX_TIM4_Init>
  MX_TIM5_Init();
 800120c:	f000 fa5e 	bl	80016cc <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001210:	f000 fafe 	bl	8001810 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001214:	f000 faae 	bl	8001774 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001218:	f005 fa0c 	bl	8006634 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  mecanum_semHandle = osSemaphoreNew(1, 0, &mecanum_sem_attributes);
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <main+0x78>)
 800121e:	2100      	movs	r1, #0
 8001220:	2001      	movs	r0, #1
 8001222:	f005 fafe 	bl	8006822 <osSemaphoreNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <main+0x7c>)
 800122a:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(mecanum_semHandle);
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <main+0x7c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fbd1 	bl	80069d8 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  mecanum_encoder_speeds_queueHandle = osMessageQueueNew(1, sizeof(four_wheeled_robot_encoders_speeds_t), &mecanum_encoder_speeds_queue_attributes);
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <main+0x80>)
 8001238:	2110      	movs	r1, #16
 800123a:	2001      	movs	r0, #1
 800123c:	f005 fc10 	bl	8006a60 <osMessageQueueNew>
 8001240:	4603      	mov	r3, r0
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <main+0x84>)
 8001244:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <main+0x88>)
 8001248:	2100      	movs	r1, #0
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <main+0x8c>)
 800124c:	f005 fa3c 	bl	80066c8 <osThreadNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <main+0x90>)
 8001254:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001256:	f005 fa11 	bl	800667c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125a:	e7fe      	b.n	800125a <main+0x76>
 800125c:	0801152c 	.word	0x0801152c
 8001260:	20000bcc 	.word	0x20000bcc
 8001264:	08011514 	.word	0x08011514
 8001268:	20000bc8 	.word	0x20000bc8
 800126c:	080114f0 	.word	0x080114f0
 8001270:	08001c2d 	.word	0x08001c2d
 8001274:	20000bc4 	.word	0x20000bc4

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f00c fc38 	bl	800dafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a27      	ldr	r2, [pc, #156]	; (8001344 <SystemClock_Config+0xcc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <SystemClock_Config+0xd0>)
 80012c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e8:	2310      	movs	r3, #16
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 f872 	bl	80033e8 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800130a:	f000 fd1f 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fad4 	bl	80038d8 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001336:	f000 fd09 	bl	8001d4c <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	; 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f00c fbb9 	bl	800dafc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <MX_TIM1_Init+0x180>)
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <MX_TIM1_Init+0x184>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001390:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <MX_TIM1_Init+0x180>)
 8001392:	2209      	movs	r2, #9
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <MX_TIM1_Init+0x180>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <MX_TIM1_Init+0x180>)
 800139e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <MX_TIM1_Init+0x180>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MX_TIM1_Init+0x180>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <MX_TIM1_Init+0x180>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b6:	4845      	ldr	r0, [pc, #276]	; (80014cc <MX_TIM1_Init+0x180>)
 80013b8:	f002 fce0 	bl	8003d7c <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013c2:	f000 fcc3 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d0:	4619      	mov	r1, r3
 80013d2:	483e      	ldr	r0, [pc, #248]	; (80014cc <MX_TIM1_Init+0x180>)
 80013d4:	f003 f9d8 	bl	8004788 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013de:	f000 fcb5 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e2:	483a      	ldr	r0, [pc, #232]	; (80014cc <MX_TIM1_Init+0x180>)
 80013e4:	f002 fd7c 	bl	8003ee0 <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ee:	f000 fcad 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fe:	4619      	mov	r1, r3
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <MX_TIM1_Init+0x180>)
 8001402:	f003 fd89 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800140c:	f000 fc9e 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <MX_TIM1_Init+0x180>)
 8001436:	f003 f8e5 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001440:	f000 fc84 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	481f      	ldr	r0, [pc, #124]	; (80014cc <MX_TIM1_Init+0x180>)
 800144e:	f003 f8d9 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001458:	f000 fc78 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	2208      	movs	r2, #8
 8001462:	4619      	mov	r1, r3
 8001464:	4819      	ldr	r0, [pc, #100]	; (80014cc <MX_TIM1_Init+0x180>)
 8001466:	f003 f8cd 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001470:	f000 fc6c 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	220c      	movs	r2, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_TIM1_Init+0x180>)
 800147e:	f003 f8c1 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001488:	f000 fc60 	bl	8001d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM1_Init+0x180>)
 80014b0:	f003 fda0 	bl	8004ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80014ba:	f000 fc47 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM1_Init+0x180>)
 80014c0:	f000 fde6 	bl	8002090 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3758      	adds	r7, #88	; 0x58
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000924 	.word	0x20000924
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00c fb0a 	bl	800dafc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_TIM2_Init+0xa4>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_TIM2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63535;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001506:	f64f 022f 	movw	r2, #63535	; 0xf82f
 800150a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001518:	2303      	movs	r3, #3
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001530:	2301      	movs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001544:	f002 fe3a 	bl	80041bc <HAL_TIM_Encoder_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800154e:	f000 fbfd 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001560:	f003 fcda 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800156a:	f000 fbef 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000096c 	.word	0x2000096c

0800157c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f00c fab6 	bl	800dafc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM3_Init+0xa0>)
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <MX_TIM3_Init+0xa4>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM3_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM3_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM3_Init+0xa0>)
 80015ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM3_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM3_Init+0xa0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015be:	2303      	movs	r3, #3
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM3_Init+0xa0>)
 80015ea:	f002 fde7 	bl	80041bc <HAL_TIM_Encoder_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 fbaa 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM3_Init+0xa0>)
 8001606:	f003 fc87 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001610:	f000 fb9c 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200009b4 	.word	0x200009b4
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00c fa62 	bl	800dafc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <MX_TIM4_Init+0xa0>)
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <MX_TIM4_Init+0xa4>)
 8001644:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_TIM4_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <MX_TIM4_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_TIM4_Init+0xa0>)
 8001654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001658:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_TIM4_Init+0xa0>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_TIM4_Init+0xa0>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001666:	2303      	movs	r3, #3
 8001668:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800167e:	2301      	movs	r3, #1
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <MX_TIM4_Init+0xa0>)
 8001692:	f002 fd93 	bl	80041bc <HAL_TIM_Encoder_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 fb56 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_TIM4_Init+0xa0>)
 80016ae:	f003 fc33 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016b8:	f000 fb48 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200009fc 	.word	0x200009fc
 80016c8:	40000800 	.word	0x40000800

080016cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f00c fa0e 	bl	800dafc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_TIM5_Init+0xa0>)
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_TIM5_Init+0xa4>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_TIM5_Init+0xa0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_TIM5_Init+0xa0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_TIM5_Init+0xa0>)
 80016fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001700:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM5_Init+0xa0>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_TIM5_Init+0xa0>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170e:	2303      	movs	r3, #3
 8001710:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM5_Init+0xa0>)
 800173a:	f002 fd3f 	bl	80041bc <HAL_TIM_Encoder_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001744:	f000 fb02 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM5_Init+0xa0>)
 8001756:	f003 fbdf 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001760:	f000 faf4 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000a44 	.word	0x20000a44
 8001770:	40000c00 	.word	0x40000c00

08001774 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_TIM10_Init+0x40>)
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <MX_TIM10_Init+0x44>)
 800177c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400 - 1;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <MX_TIM10_Init+0x40>)
 8001780:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001784:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_TIM10_Init+0x40>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_TIM10_Init+0x40>)
 800178e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001792:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_TIM10_Init+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_TIM10_Init+0x40>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_TIM10_Init+0x40>)
 80017a2:	f002 faeb 	bl	8003d7c <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017ac:	f000 face 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000a8c 	.word	0x20000a8c
 80017b8:	40014400 	.word	0x40014400

080017bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART2_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f003 fcb4 	bl	8005160 <HAL_HalfDuplex_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 faa5 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000ad4 	.word	0x20000ad4
 800180c:	40004400 	.word	0x40004400

08001810 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_USART6_UART_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001836:	2204      	movs	r2, #4
 8001838:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001848:	f003 fc3a 	bl	80050c0 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001852:	f000 fa7b 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000b1c 	.word	0x20000b1c
 8001860:	40011400 	.word	0x40011400

08001864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_DMA_Init+0x3c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <MX_DMA_Init+0x3c>)
 8001874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_DMA_Init+0x3c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2039      	movs	r0, #57	; 0x39
 800188c:	f000 ffb2 	bl	80027f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001890:	2039      	movs	r0, #57	; 0x39
 8001892:	f000 ffcb 	bl	800282c <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <MX_GPIO_Init+0x10c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_GPIO_Init+0x10c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_GPIO_Init+0x10c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <MX_GPIO_Init+0x10c>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_GPIO_Init+0x10c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_MOTOR_A_Pin|BR_MOTOR_B_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2130      	movs	r1, #48	; 0x30
 800192e:	4821      	ldr	r0, [pc, #132]	; (80019b4 <MX_GPIO_Init+0x110>)
 8001930:	f001 fd28 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 8001934:	2200      	movs	r2, #0
 8001936:	f24f 0106 	movw	r1, #61446	; 0xf006
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <MX_GPIO_Init+0x114>)
 800193c:	f001 fd22 	bl	8003384 <HAL_GPIO_WritePin>
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001946:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <MX_GPIO_Init+0x110>)
 8001958:	f001 fb78 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_MOTOR_A_Pin BR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = FL_MOTOR_A_Pin|BR_MOTOR_B_Pin;
 800195c:	2330      	movs	r3, #48	; 0x30
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <MX_GPIO_Init+0x110>)
 8001974:	f001 fb6a 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_MOTOR_A_Pin BL_MOTOR_B_Pin BR_MOTOR_A_Pin FL_MOTOR_B_Pin
                           FR_MOTOR_A_Pin FR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 8001978:	f24f 0306 	movw	r3, #61446	; 0xf006
 800197c:	617b      	str	r3, [r7, #20]
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <MX_GPIO_Init+0x114>)
 8001992:	f001 fb5b 	bl	800304c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f000 ff2a 	bl	80027f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019a0:	2028      	movs	r0, #40	; 0x28
 80019a2:	f000 ff43 	bl	800282c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020400 	.word	0x40020400

080019bc <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <_write+0x28>)
 80019d4:	f003 fc1c 	bl	8005210 <HAL_UART_Transmit>
	return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000ad4 	.word	0x20000ad4

080019e8 <uart_lwpkt_evt_fn>:

static void uart_lwpkt_evt_fn(lwpkt_t* pkt, lwpkt_evt_type_t type){
 80019e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ec:	b090      	sub	sp, #64	; 0x40
 80019ee:	af04      	add	r7, sp, #16
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
	switch (type) {
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 80a8 	bne.w	8001b4e <uart_lwpkt_evt_fn+0x166>
		case LWPKT_EVT_PKT:
			size_t len = lwpkt_get_data_len(pkt);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <uart_lwpkt_evt_fn+0x24>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a0a:	e000      	b.n	8001a0e <uart_lwpkt_evt_fn+0x26>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			char* data = (char*)lwpkt_get_data(pkt);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <uart_lwpkt_evt_fn+0x32>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e000      	b.n	8001a1c <uart_lwpkt_evt_fn+0x34>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
			printf("Packet received, size(%d), data(%.*s)\r\n", len, len, data);
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a24:	484d      	ldr	r0, [pc, #308]	; (8001b5c <uart_lwpkt_evt_fn+0x174>)
 8001a26:	f00b ff23 	bl	800d870 <iprintf>

			cJSON* parsed_json = cJSON_ParseWithLength(data, len);
 8001a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a2e:	f008 ff8d 	bl	800a94c <cJSON_ParseWithLength>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24
			if (cJSON_IsObject(parsed_json)){
 8001a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a36:	f009 facd 	bl	800afd4 <cJSON_IsObject>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d07f      	beq.n	8001b40 <uart_lwpkt_evt_fn+0x158>
				printf("A json object\r\n");
 8001a40:	4847      	ldr	r0, [pc, #284]	; (8001b60 <uart_lwpkt_evt_fn+0x178>)
 8001a42:	f00b ff7b 	bl	800d93c <puts>

				cJSON* power_json = cJSON_GetObjectItem(parsed_json, "power");
 8001a46:	4947      	ldr	r1, [pc, #284]	; (8001b64 <uart_lwpkt_evt_fn+0x17c>)
 8001a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a4a:	f009 fa86 	bl	800af5a <cJSON_GetObjectItem>
 8001a4e:	6238      	str	r0, [r7, #32]
				cJSON* theta_json = cJSON_GetObjectItem(parsed_json, "theta");
 8001a50:	4945      	ldr	r1, [pc, #276]	; (8001b68 <uart_lwpkt_evt_fn+0x180>)
 8001a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a54:	f009 fa81 	bl	800af5a <cJSON_GetObjectItem>
 8001a58:	61f8      	str	r0, [r7, #28]
				cJSON* turn_json = cJSON_GetObjectItem(parsed_json, "turn");
 8001a5a:	4944      	ldr	r1, [pc, #272]	; (8001b6c <uart_lwpkt_evt_fn+0x184>)
 8001a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5e:	f009 fa7c 	bl	800af5a <cJSON_GetObjectItem>
 8001a62:	61b8      	str	r0, [r7, #24]
				cJSON* stop_json = cJSON_GetObjectItem(parsed_json, "stop");
 8001a64:	4942      	ldr	r1, [pc, #264]	; (8001b70 <uart_lwpkt_evt_fn+0x188>)
 8001a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a68:	f009 fa77 	bl	800af5a <cJSON_GetObjectItem>
 8001a6c:	6178      	str	r0, [r7, #20]

				//osSemaphoreAcquire(mecanum_semHandle, osWaitForever);

				if (cJSON_IsTrue(stop_json)) {
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f009 fa82 	bl	800af78 <cJSON_IsTrue>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <uart_lwpkt_evt_fn+0xa0>
					printf("Robot stopped\r\n");
 8001a7a:	483e      	ldr	r0, [pc, #248]	; (8001b74 <uart_lwpkt_evt_fn+0x18c>)
 8001a7c:	f00b ff5e 	bl	800d93c <puts>
					mecanum_robot_stop(&robot);
 8001a80:	483d      	ldr	r0, [pc, #244]	; (8001b78 <uart_lwpkt_evt_fn+0x190>)
 8001a82:	f00a f947 	bl	800bd14 <mecanum_robot_stop>
 8001a86:	e05e      	b.n	8001b46 <uart_lwpkt_evt_fn+0x15e>
				} else {
					if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json)){
 8001a88:	6a38      	ldr	r0, [r7, #32]
 8001a8a:	f009 fa8c 	bl	800afa6 <cJSON_IsNumber>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d051      	beq.n	8001b38 <uart_lwpkt_evt_fn+0x150>
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f009 fa86 	bl	800afa6 <cJSON_IsNumber>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d04b      	beq.n	8001b38 <uart_lwpkt_evt_fn+0x150>
						float power = cJSON_GetNumberValue(power_json);
 8001aa0:	6a38      	ldr	r0, [r7, #32]
 8001aa2:	f008 f9b3 	bl	8009e0c <cJSON_GetNumberValue>
 8001aa6:	ec53 2b10 	vmov	r2, r3, d0
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f8b3 	bl	8000c18 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
						float theta = cJSON_GetNumberValue(theta_json);
 8001ab6:	69f8      	ldr	r0, [r7, #28]
 8001ab8:	f008 f9a8 	bl	8009e0c <cJSON_GetNumberValue>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f8a8 	bl	8000c18 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
						float turn = CJSON_NUMBER_OR_ZERO(turn_json);
 8001acc:	69b8      	ldr	r0, [r7, #24]
 8001ace:	f009 fa6a 	bl	800afa6 <cJSON_IsNumber>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <uart_lwpkt_evt_fn+0x106>
 8001ad8:	69b8      	ldr	r0, [r7, #24]
 8001ada:	f008 f997 	bl	8009e0c <cJSON_GetNumberValue>
 8001ade:	ec53 2b10 	vmov	r2, r3, d0
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f897 	bl	8000c18 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	e001      	b.n	8001af2 <uart_lwpkt_evt_fn+0x10a>
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]

						printf("Power: %f, Theta: %f, Turn: %f\r\n", power, theta, turn);
 8001af4:	6938      	ldr	r0, [r7, #16]
 8001af6:	f7fe fd3f 	bl	8000578 <__aeabi_f2d>
 8001afa:	4680      	mov	r8, r0
 8001afc:	4689      	mov	r9, r1
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7fe fd3a 	bl	8000578 <__aeabi_f2d>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f7fe fd35 	bl	8000578 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b16:	e9cd 4500 	strd	r4, r5, [sp]
 8001b1a:	4642      	mov	r2, r8
 8001b1c:	464b      	mov	r3, r9
 8001b1e:	4817      	ldr	r0, [pc, #92]	; (8001b7c <uart_lwpkt_evt_fn+0x194>)
 8001b20:	f00b fea6 	bl	800d870 <iprintf>

						mecanum_robot_move(&robot, power, theta, turn);
 8001b24:	ed97 1a02 	vldr	s2, [r7, #8]
 8001b28:	edd7 0a03 	vldr	s1, [r7, #12]
 8001b2c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b30:	4811      	ldr	r0, [pc, #68]	; (8001b78 <uart_lwpkt_evt_fn+0x190>)
 8001b32:	f00a f90d 	bl	800bd50 <mecanum_robot_move>
					if (cJSON_IsNumber(power_json) && cJSON_IsNumber(theta_json)){
 8001b36:	e006      	b.n	8001b46 <uart_lwpkt_evt_fn+0x15e>
					} else {
						printf("One or more key/value pairs missing\r\n");
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <uart_lwpkt_evt_fn+0x198>)
 8001b3a:	f00b feff 	bl	800d93c <puts>
 8001b3e:	e002      	b.n	8001b46 <uart_lwpkt_evt_fn+0x15e>
				}

				//osSemaphoreRelease(mecanum_semHandle);

			} else {
				printf("Not a json object\r\n");
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <uart_lwpkt_evt_fn+0x19c>)
 8001b42:	f00b fefb 	bl	800d93c <puts>
			}

			cJSON_free(parsed_json);
 8001b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b48:	f009 fa5c 	bl	800b004 <cJSON_free>
			break;
 8001b4c:	e000      	b.n	8001b50 <uart_lwpkt_evt_fn+0x168>
		default:
			break;
 8001b4e:	bf00      	nop
	}
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b5a:	bf00      	nop
 8001b5c:	08011358 	.word	0x08011358
 8001b60:	08011380 	.word	0x08011380
 8001b64:	08011390 	.word	0x08011390
 8001b68:	08011398 	.word	0x08011398
 8001b6c:	080113a0 	.word	0x080113a0
 8001b70:	080113a8 	.word	0x080113a8
 8001b74:	080113b0 	.word	0x080113b0
 8001b78:	200000b0 	.word	0x200000b0
 8001b7c:	080113c0 	.word	0x080113c0
 8001b80:	080113e4 	.word	0x080113e4
 8001b84:	0801140c 	.word	0x0801140c

08001b88 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART6) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <HAL_UARTEx_RxEventCallback+0x28>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d103      	bne.n	8001ba6 <HAL_UARTEx_RxEventCallback+0x1e>
    lwrb_uart_callback(Size);
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb0d 	bl	80011c0 <lwrb_uart_callback>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40011400 	.word	0x40011400

08001bb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc4:	d124      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0x5c>
  	if (osSemaphoreAcquire(mecanum_semHandle, 0) == osOK){
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 feb1 	bl	8006934 <osSemaphoreAcquire>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11b      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0x5c>
			GPIO_PinState state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001bde:	f001 fbb9 	bl	8003354 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]
			if (state == GPIO_PIN_SET) {
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d103      	bne.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x40>
				mecanum_robot_stop(&robot);
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001bee:	f00a f891 	bl	800bd14 <mecanum_robot_stop>
 8001bf2:	e008      	b.n	8001c06 <HAL_GPIO_EXTI_Callback+0x52>
			} else {
				mecanum_robot_move(&robot, 0.5f, 1.57f, 0.0f);
 8001bf4:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001c24 <HAL_GPIO_EXTI_Callback+0x70>
 8001bf8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001c28 <HAL_GPIO_EXTI_Callback+0x74>
 8001bfc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c02:	f00a f8a5 	bl	800bd50 <mecanum_robot_move>
			}
	    osSemaphoreRelease(mecanum_semHandle);
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fee4 	bl	80069d8 <osSemaphoreRelease>
  	}
  }
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000bcc 	.word	0x20000bcc
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	200000b0 	.word	0x200000b0
 8001c24:	00000000 	.word	0x00000000
 8001c28:	3fc8f5c3 	.word	0x3fc8f5c3

08001c2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Start\r\n");
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <StartDefaultTask+0x40>)
 8001c36:	f00b fe81 	bl	800d93c <puts>

	cJSON_InitHooks(&cjson_hooks);
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <StartDefaultTask+0x44>)
 8001c3c:	f008 f96e 	bl	8009f1c <cJSON_InitHooks>
	printf("cJSON hooks set\r\n");
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <StartDefaultTask+0x48>)
 8001c42:	f00b fe7b 	bl	800d93c <puts>

	lwpkt_lwrb_uart_init(&init_data);
 8001c46:	480c      	ldr	r0, [pc, #48]	; (8001c78 <StartDefaultTask+0x4c>)
 8001c48:	f7ff f9ea 	bl	8001020 <lwpkt_lwrb_uart_init>
	printf("lwpkt initialized\r\n");
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <StartDefaultTask+0x50>)
 8001c4e:	f00b fe75 	bl	800d93c <puts>

	mecanum_robot_init(&robot, HAL_GetTick());
 8001c52:	f000 fd0b 	bl	800266c <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <StartDefaultTask+0x54>)
 8001c5c:	f00a f825 	bl	800bcaa <mecanum_robot_init>
		//printf("%.*s\r\n", size, output);

		cJSON_free(root_object);
		cjson_hooks.free_fn(output);*/

		osDelay(1000);
 8001c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c64:	f004 fdc2 	bl	80067ec <osDelay>
 8001c68:	e7fa      	b.n	8001c60 <StartDefaultTask+0x34>
 8001c6a:	bf00      	nop
 8001c6c:	08011420 	.word	0x08011420
 8001c70:	0801153c 	.word	0x0801153c
 8001c74:	08011428 	.word	0x08011428
 8001c78:	08011544 	.word	0x08011544
 8001c7c:	0801143c 	.word	0x0801143c
 8001c80:	200000b0 	.word	0x200000b0

08001c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c96:	f000 fcd5 	bl	8002644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM10) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d142      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0xa6>

  	mecanum_robot_encoders_callback(&robot, HAL_GetTick());
 8001ca4:	f000 fce2 	bl	800266c <HAL_GetTick>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4823      	ldr	r0, [pc, #140]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cae:	f00a f959 	bl	800bf64 <mecanum_robot_encoders_callback>

  	four_wheeled_robot_encoders_speeds_t speeds;
  	mecanum_robot_get_encoder_speeds(&robot, &speeds);
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4820      	ldr	r0, [pc, #128]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cba:	f00a f974 	bl	800bfa6 <mecanum_robot_get_encoder_speeds>

  	speeds.fl_speed *= 1000.0f;
 8001cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cca:	edc7 7a04 	vstr	s15, [r7, #16]
  	speeds.fr_speed *= 1000.0f;
 8001cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	edc7 7a05 	vstr	s15, [r7, #20]
  	speeds.bl_speed *= 1000.0f;
 8001cde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cea:	edc7 7a06 	vstr	s15, [r7, #24]
  	speeds.br_speed *= 1000.0f;
 8001cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	edc7 7a07 	vstr	s15, [r7, #28]

  	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]

  	xQueueOverwriteFromISR((QueueHandle_t)mecanum_encoder_speeds_queueHandle, &speeds, &xHigherPriorityTaskWoken);
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	f107 0110 	add.w	r1, r7, #16
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f005 fb66 	bl	80073e0 <xQueueGenericSendFromISR>

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	f3bf 8f6f 	isb	sy

	}

  /* USER CODE END Callback 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40014800 	.word	0x40014800
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	200000b0 	.word	0x200000b0
 8001d40:	447a0000 	.word	0x447a0000
 8001d44:	20000bc8 	.word	0x20000bc8
 8001d48:	e000ed04 	.word	0xe000ed04

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_MspInit+0x54>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_MspInit+0x54>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x54>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_MspInit+0x54>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_MspInit+0x54>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_MspInit+0x54>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	210f      	movs	r1, #15
 8001d9a:	f06f 0001 	mvn.w	r0, #1
 8001d9e:	f000 fd29 	bl	80027f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_TIM_Base_MspInit+0x90>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11e      	bne.n	8001e00 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2105      	movs	r1, #5
 8001de2:	2019      	movs	r0, #25
 8001de4:	f000 fd06 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001de8:	2019      	movs	r0, #25
 8001dea:	f000 fd1f 	bl	800282c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	210f      	movs	r1, #15
 8001df2:	201a      	movs	r0, #26
 8001df4:	f000 fcfe 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001df8:	201a      	movs	r0, #26
 8001dfa:	f000 fd17 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001dfe:	e01a      	b.n	8001e36 <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM10)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_TIM_Base_MspInit+0x98>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d115      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_TIM_Base_MspInit+0x94>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f000 fce2 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f000 fcfb 	bl	800282c <HAL_NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40014400 	.word	0x40014400

08001e4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b092      	sub	sp, #72	; 0x48
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d14a      	bne.n	8001f04 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
 8001e72:	4b80      	ldr	r3, [pc, #512]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a7f      	ldr	r2, [pc, #508]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a78      	ldr	r2, [pc, #480]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = FL_ENCODER_A_Pin;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FL_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eda:	4619      	mov	r1, r3
 8001edc:	4866      	ldr	r0, [pc, #408]	; (8002078 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ede:	f001 f8b5 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FL_ENCODER_B_Pin;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FL_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001efa:	4619      	mov	r1, r3
 8001efc:	485f      	ldr	r0, [pc, #380]	; (800207c <HAL_TIM_Encoder_MspInit+0x230>)
 8001efe:	f001 f8a5 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f02:	e0b2      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_TIM_Encoder_MspInit+0x234>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d14a      	bne.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENCODER_B_Pin;
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f72:	2302      	movs	r3, #2
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FR_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4841      	ldr	r0, [pc, #260]	; (8002084 <HAL_TIM_Encoder_MspInit+0x238>)
 8001f7e:	f001 f865 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin;
 8001f82:	2310      	movs	r3, #16
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f92:	2302      	movs	r3, #2
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(FR_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4837      	ldr	r0, [pc, #220]	; (800207c <HAL_TIM_Encoder_MspInit+0x230>)
 8001f9e:	f001 f855 	bl	800304c <HAL_GPIO_Init>
}
 8001fa2:	e062      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a37      	ldr	r2, [pc, #220]	; (8002088 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12c      	bne.n	8002008 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a28      	ldr	r2, [pc, #160]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BL_ENCODER_A_Pin|BL_ENCODER_B_Pin;
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffe:	4619      	mov	r1, r3
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <HAL_TIM_Encoder_MspInit+0x230>)
 8002002:	f001 f823 	bl	800304c <HAL_GPIO_Init>
}
 8002006:	e030      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM5)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_TIM_Encoder_MspInit+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_TIM_Encoder_MspInit+0x21e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_TIM_Encoder_MspInit+0x228>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BR_ENCODER_A_Pin|BR_ENCODER_B_Pin;
 800204a:	2303      	movs	r3, #3
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800205a:	2302      	movs	r3, #2
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002062:	4619      	mov	r1, r3
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002066:	f000 fff1 	bl	800304c <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3748      	adds	r7, #72	; 0x48
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40000400 	.word	0x40000400
 8002084:	40020800 	.word	0x40020800
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11e      	bne.n	80020f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FL_MOTOR_EN_Pin|FR_MOTOR_EN_Pin|BL_MOTOR_EN_Pin|BR_MOTOR_EN_Pin;
 80020ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_TIM_MspPostInit+0x70>)
 80020ec:	f000 ffae 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <HAL_UART_MspInit+0x194>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12c      	bne.n	8002180 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_UART_MspInit+0x198>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a5b      	ldr	r2, [pc, #364]	; (800229c <HAL_UART_MspInit+0x198>)
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_UART_MspInit+0x198>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b55      	ldr	r3, [pc, #340]	; (800229c <HAL_UART_MspInit+0x198>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_UART_MspInit+0x198>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_UART_MspInit+0x198>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800215e:	2304      	movs	r3, #4
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002162:	2312      	movs	r3, #18
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216e:	2307      	movs	r3, #7
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	4849      	ldr	r0, [pc, #292]	; (80022a0 <HAL_UART_MspInit+0x19c>)
 800217a:	f000 ff67 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800217e:	e087      	b.n	8002290 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART6)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <HAL_UART_MspInit+0x1a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f040 8082 	bne.w	8002290 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_UART_MspInit+0x198>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	4a41      	ldr	r2, [pc, #260]	; (800229c <HAL_UART_MspInit+0x198>)
 8002196:	f043 0320 	orr.w	r3, r3, #32
 800219a:	6453      	str	r3, [r2, #68]	; 0x44
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_UART_MspInit+0x198>)
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_UART_MspInit+0x198>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_UART_MspInit+0x198>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_UART_MspInit+0x198>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_UART_MspInit+0x198>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_UART_MspInit+0x198>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6313      	str	r3, [r2, #48]	; 0x30
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_UART_MspInit+0x198>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e0:	2340      	movs	r3, #64	; 0x40
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021f0:	2308      	movs	r3, #8
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4619      	mov	r1, r3
 80021fa:	482b      	ldr	r0, [pc, #172]	; (80022a8 <HAL_UART_MspInit+0x1a4>)
 80021fc:	f000 ff26 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002212:	2308      	movs	r3, #8
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4820      	ldr	r0, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0x19c>)
 800221e:	f000 ff15 	bl	800304c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_UART_MspInit+0x1ac>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 800222a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800222e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002256:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002266:	f000 faef 	bl	8002848 <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002270:	f7ff fd6c 	bl	8001d4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 8002278:	63da      	str	r2, [r3, #60]	; 0x3c
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <HAL_UART_MspInit+0x1a8>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2105      	movs	r1, #5
 8002284:	2047      	movs	r0, #71	; 0x47
 8002286:	f000 fab5 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800228a:	2047      	movs	r0, #71	; 0x47
 800228c:	f000 face 	bl	800282c <HAL_NVIC_EnableIRQ>
}
 8002290:	bf00      	nop
 8002292:	3730      	adds	r7, #48	; 0x30
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004400 	.word	0x40004400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40011400 	.word	0x40011400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	20000b64 	.word	0x20000b64
 80022b0:	40026428 	.word	0x40026428

080022b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_InitTick+0xd0>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <HAL_InitTick+0xd0>)
 80022ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d2:	6453      	str	r3, [r2, #68]	; 0x44
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_InitTick+0xd0>)
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fd14 	bl	8003d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022f0:	f001 fcfe 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 80022f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_InitTick+0xd4>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	3b01      	subs	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_InitTick+0xd8>)
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_InitTick+0xdc>)
 8002308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_InitTick+0xd8>)
 800230c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002310:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_InitTick+0xd8>)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_InitTick+0xd8>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_InitTick+0xd8>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_InitTick+0xd8>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800232a:	4818      	ldr	r0, [pc, #96]	; (800238c <HAL_InitTick+0xd8>)
 800232c:	f001 fd26 	bl	8003d7c <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11b      	bne.n	8002376 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800233e:	4813      	ldr	r0, [pc, #76]	; (800238c <HAL_InitTick+0xd8>)
 8002340:	f001 fd6c 	bl	8003e1c <HAL_TIM_Base_Start_IT>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800234a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234e:	2b00      	cmp	r3, #0
 8002350:	d111      	bne.n	8002376 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002352:	201a      	movs	r0, #26
 8002354:	f000 fa6a 	bl	800282c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	d808      	bhi.n	8002370 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800235e:	2200      	movs	r2, #0
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	201a      	movs	r0, #26
 8002364:	f000 fa46 	bl	80027f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_InitTick+0xe0>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e002      	b.n	8002376 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800237a:	4618      	mov	r0, r3
 800237c:	3730      	adds	r7, #48	; 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	431bde83 	.word	0x431bde83
 800238c:	20000bd0 	.word	0x20000bd0
 8002390:	40014800 	.word	0x40014800
 8002394:	200000d4 	.word	0x200000d4

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80023ca:	f002 f82b 	bl	8004424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80023d0:	f002 f828 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000924 	.word	0x20000924
 80023dc:	20000a8c 	.word	0x20000a8c

080023e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80023e6:	f002 f81d 	bl	8004424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80023ec:	f002 f81a 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000924 	.word	0x20000924
 80023f8:	20000bd0 	.word	0x20000bd0

080023fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002404:	f000 ffd8 	bl	80033b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA2_Stream1_IRQHandler+0x10>)
 8002412:	f000 fbb1 	bl	8002b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000b64 	.word	0x20000b64

08002420 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <USART6_IRQHandler+0x10>)
 8002426:	f002 ffdb 	bl	80053e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000b1c 	.word	0x20000b1c

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244e:	f00b fc1f 	bl	800dc90 <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
  return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002476:	e7fe      	b.n	8002476 <_exit+0x12>

08002478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00a      	b.n	80024a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248a:	f3af 8000 	nop.w
 800248e:	4601      	mov	r1, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	b2ca      	uxtb	r2, r1
 8002498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf0      	blt.n	800248a <_read+0x12>
  }

  return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024da:	605a      	str	r2, [r3, #4]
  return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_isatty>:

int _isatty(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f00b fba0 	bl	800dc90 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20020000 	.word	0x20020000
 800257c:	00000400 	.word	0x00000400
 8002580:	20000c18 	.word	0x20000c18
 8002584:	20005760 	.word	0x20005760

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b0:	f7ff ffea 	bl	8002588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b6:	490d      	ldr	r1, [pc, #52]	; (80025ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025da:	f00b fb5f 	bl	800dc9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7fe fe01 	bl	80011e4 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 80025f0:	08011b80 	.word	0x08011b80
  ldr r2, =_sbss
 80025f4:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 80025f8:	2000575c 	.word	0x2000575c

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f8d8 	bl	80027de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f7ff fe40 	bl	80022b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fb90 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	200000d8 	.word	0x200000d8
 8002668:	20000c1c 	.word	0x20000c1c

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000c1c 	.word	0x20000c1c

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <__NVIC_EnableIRQ+0x38>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000e100 	.word	0xe000e100

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff4c 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002806:	f7ff ff61 	bl	80026cc <__NVIC_GetPriorityGrouping>
 800280a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f7ff ffb1 	bl	8002778 <NVIC_EncodePriority>
 8002816:	4602      	mov	r2, r0
 8002818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff80 	bl	8002724 <__NVIC_SetPriority>
}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff54 	bl	80026e8 <__NVIC_EnableIRQ>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ff0a 	bl	800266c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e099      	b.n	8002998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002884:	e00f      	b.n	80028a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002886:	f7ff fef1 	bl	800266c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b05      	cmp	r3, #5
 8002892:	d908      	bls.n	80028a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e078      	b.n	8002998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e8      	bne.n	8002886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_DMA_Init+0x158>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d107      	bne.n	8002910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4313      	orrs	r3, r2
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f023 0307 	bic.w	r3, r3, #7
 8002926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b04      	cmp	r3, #4
 8002938:	d117      	bne.n	800296a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb01 	bl	8002f54 <DMA_CheckFifoParam>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002966:	2301      	movs	r3, #1
 8002968:	e016      	b.n	8002998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fab8 	bl	8002ee8 <DMA_CalcBaseAndBitshift>
 8002978:	4603      	mov	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	223f      	movs	r2, #63	; 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	f010803f 	.word	0xf010803f

080029a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_DMA_Start_IT+0x26>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e040      	b.n	8002a4c <HAL_DMA_Start_IT+0xa8>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d12f      	bne.n	8002a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fa4a 	bl	8002e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	223f      	movs	r2, #63	; 0x3f
 80029fe:	409a      	lsls	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0216 	orr.w	r2, r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0208 	orr.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e005      	b.n	8002a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
 8002a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a62:	f7ff fe03 	bl	800266c <HAL_GetTick>
 8002a66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d008      	beq.n	8002a86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e052      	b.n	8002b2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0216 	bic.w	r2, r2, #22
 8002a94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <HAL_DMA_Abort+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0208 	bic.w	r2, r2, #8
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	e013      	b.n	8002b00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad8:	f7ff fdc8 	bl	800266c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d90c      	bls.n	8002b00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2203      	movs	r2, #3
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e015      	b.n	8002b2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e4      	bne.n	8002ad8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	223f      	movs	r2, #63	; 0x3f
 8002b14:	409a      	lsls	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00c      	b.n	8002b6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b84:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_DMA_IRQHandler+0x248>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a8e      	ldr	r2, [pc, #568]	; (8002dc4 <HAL_DMA_IRQHandler+0x24c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01a      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2201      	movs	r2, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	2204      	movs	r2, #4
 8002c20:	409a      	lsls	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	2210      	movs	r2, #16
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d043      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03c      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2210      	movs	r2, #16
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d018      	beq.n	8002cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d108      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d024      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	e01f      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e016      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0208 	bic.w	r2, r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2220      	movs	r2, #32
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 808f 	beq.w	8002e18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8087 	beq.w	8002e18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	2220      	movs	r2, #32
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d136      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0216 	bic.w	r2, r2, #22
 8002d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x1da>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0208 	bic.w	r2, r2, #8
 8002d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	223f      	movs	r2, #63	; 0x3f
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d07e      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
        }
        return;
 8002d8e:	e079      	b.n	8002e84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e02c      	b.n	8002e18 <HAL_DMA_IRQHandler+0x2a0>
 8002dbe:	bf00      	nop
 8002dc0:	200000d0 	.word	0x200000d0
 8002dc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d023      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
 8002dd8:	e01e      	b.n	8002e18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10f      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0210 	bic.w	r2, r2, #16
 8002df6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d032      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d022      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2205      	movs	r2, #5
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d307      	bcc.n	8002e60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f2      	bne.n	8002e44 <HAL_DMA_IRQHandler+0x2cc>
 8002e5e:	e000      	b.n	8002e62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
 8002e82:	e000      	b.n	8002e86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e84:	bf00      	nop
    }
  }
}
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d108      	bne.n	8002ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eca:	e007      	b.n	8002edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3b10      	subs	r3, #16
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <DMA_CalcBaseAndBitshift+0x64>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <DMA_CalcBaseAndBitshift+0x68>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d909      	bls.n	8002f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	1d1a      	adds	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	659a      	str	r2, [r3, #88]	; 0x58
 8002f28:	e007      	b.n	8002f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	aaaaaaab 	.word	0xaaaaaaab
 8002f50:	08011564 	.word	0x08011564

08002f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d856      	bhi.n	8003022 <DMA_CheckFifoParam+0xce>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <DMA_CheckFifoParam+0x28>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f9f 	.word	0x08002f9f
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	08003023 	.word	0x08003023
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d046      	beq.n	8003026 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9c:	e043      	b.n	8003026 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa6:	d140      	bne.n	800302a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fac:	e03d      	b.n	800302a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d121      	bne.n	8002ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d837      	bhi.n	800302e <DMA_CheckFifoParam+0xda>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x70>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdb 	.word	0x08002fdb
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	08002fed 	.word	0x08002fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e030      	b.n	800303c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d025      	beq.n	8003032 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fea:	e022      	b.n	8003032 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ffa:	e01c      	b.n	8003036 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d903      	bls.n	800300a <DMA_CheckFifoParam+0xb6>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d003      	beq.n	8003010 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003008:	e018      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      break;
 800300e:	e015      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e00b      	b.n	800303a <DMA_CheckFifoParam+0xe6>
      break;
 8003022:	bf00      	nop
 8003024:	e00a      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e008      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e006      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;   
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
    }
  } 
  
  return status; 
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e159      	b.n	800331c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8148 	bne.w	8003316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a2 	beq.w	8003316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x202>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1fe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1fa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x300>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1f2>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800323e:	2307      	movs	r3, #7
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x304>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f aea2 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40013c00 	.word	0x40013c00

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a0:	e003      	b.n	80033aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	041a      	lsls	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fbec 	bl	8001bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40013c00 	.word	0x40013c00

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e267      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003406:	4b88      	ldr	r3, [pc, #544]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00c      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b85      	ldr	r3, [pc, #532]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341a:	2b08      	cmp	r3, #8
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b82      	ldr	r3, [pc, #520]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b7e      	ldr	r3, [pc, #504]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e242      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b69      	ldr	r3, [pc, #420]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a68      	ldr	r2, [pc, #416]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff f8e4 	bl	800266c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a8:	f7ff f8e0 	bl	800266c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e207      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f8d0 	bl	800266c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff f8cc 	bl	800266c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1f3      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	4b51      	ldr	r3, [pc, #324]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003512:	2b08      	cmp	r3, #8
 8003514:	d11c      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e1c7      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4937      	ldr	r1, [pc, #220]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e03a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_OscConfig+0x244>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7ff f885 	bl	800266c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7ff f881 	bl	800266c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1a8      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4925      	ldr	r1, [pc, #148]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7ff f864 	bl	800266c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a8:	f7ff f860 	bl	800266c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e187      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d036      	beq.n	8003640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_RCC_OscConfig+0x248>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff f844 	bl	800266c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff f840 	bl	800266c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e167      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_OscConfig+0x248>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7ff f82d 	bl	800266c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00e      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003616:	f7ff f829 	bl	800266c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d907      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e150      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b88      	ldr	r3, [pc, #544]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8097 	beq.w	800377c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b81      	ldr	r3, [pc, #516]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a7c      	ldr	r2, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b7a      	ldr	r3, [pc, #488]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b77      	ldr	r3, [pc, #476]	; (800385c <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b74      	ldr	r3, [pc, #464]	; (800385c <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x474>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fe ffe9 	bl	800266c <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe ffe5 	bl	800266c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e10c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x474>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
 80036c4:	4b64      	ldr	r3, [pc, #400]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	e01c      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x30c>
 80036da:	4b5f      	ldr	r3, [pc, #380]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a5e      	ldr	r2, [pc, #376]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036f4:	4b58      	ldr	r3, [pc, #352]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a57      	ldr	r2, [pc, #348]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	4b55      	ldr	r3, [pc, #340]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a54      	ldr	r2, [pc, #336]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe ffaa 	bl	800266c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe ffa6 	bl	800266c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cb      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	4b49      	ldr	r3, [pc, #292]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x334>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe ff94 	bl	800266c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe ff90 	bl	800266c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0b5      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a38      	ldr	r2, [pc, #224]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d05c      	beq.n	800384c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d141      	bne.n	800381e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe ff64 	bl	800266c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe ff60 	bl	800266c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e087      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	491b      	ldr	r1, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe ff39 	bl	800266c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe ff35 	bl	800266c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e05c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x416>
 800381c:	e054      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe ff22 	bl	800266c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe ff1e 	bl	800266c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e038      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d121      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800389a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fe50 	bl	800266c <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fe4c 	bl	800266c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fc18 	bl	80022b4 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0801154c 	.word	0x0801154c
 8003a9c:	200000d0 	.word	0x200000d0
 8003aa0:	200000d4 	.word	0x200000d4

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b094      	sub	sp, #80	; 0x50
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80e1 	bhi.w	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e0db      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003adc:	e0db      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
 8003b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	6139      	str	r1, [r7, #16]
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4651      	mov	r1, sl
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4651      	mov	r1, sl
 8003b58:	ebb2 0801 	subs.w	r8, r2, r1
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	462b      	mov	r3, r5
 8003b84:	eb49 0303 	adc.w	r3, r9, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b96:	4629      	mov	r1, r5
 8003b98:	024b      	lsls	r3, r1, #9
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	024a      	lsls	r2, r1, #9
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb4:	f7fd f880 	bl	8000cb8 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bee:	0150      	lsls	r0, r2, #5
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c14:	ebb2 040a 	subs.w	r4, r2, sl
 8003c18:	eb63 050b 	sbc.w	r5, r3, fp
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	464b      	mov	r3, r9
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	028b      	lsls	r3, r1, #10
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c54:	4621      	mov	r1, r4
 8003c56:	028a      	lsls	r2, r1, #10
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c68:	f7fd f826 	bl	8000cb8 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3750      	adds	r7, #80	; 0x50
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	200000d0 	.word	0x200000d0

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	0801155c 	.word	0x0801155c

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffdc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	0801155c 	.word	0x0801155c

08003d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	220f      	movs	r2, #15
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <HAL_RCC_GetClockConfig+0x5c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_RCC_GetClockConfig+0x5c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_GetClockConfig+0x5c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCC_GetClockConfig+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40023c00 	.word	0x40023c00

08003d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e041      	b.n	8003e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe f804 	bl	8001db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 fdd4 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e044      	b.n	8003ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d013      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x6c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_TIM_Base_Start_IT+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d010      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e007      	b.n	8003ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40014000 	.word	0x40014000

08003ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f839 	bl	8003f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fd22 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_TIM_PWM_Start+0x24>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e022      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d109      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x3e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e015      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x58>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e008      	b.n	8003ffe <HAL_TIM_PWM_Start+0x6a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e068      	b.n	80040d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0x82>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	e013      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start+0x92>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	e00b      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	e003      	b.n	800403e <HAL_TIM_PWM_Start+0xaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ff40 	bl	8004ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_TIM_PWM_Start+0x14c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d107      	bne.n	8004066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_TIM_PWM_Start+0x14c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d013      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_TIM_PWM_Start+0x150>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_TIM_PWM_Start+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_TIM_PWM_Start+0x158>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x10e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIM_PWM_Start+0x15c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d010      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	e007      	b.n	80040d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40014000 	.word	0x40014000

080040f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fee0 	bl	8004ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <HAL_TIM_PWM_Stop+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d117      	bne.n	8004146 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_TIM_PWM_Stop+0x52>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	f240 4344 	movw	r3, #1092	; 0x444
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_TIM_PWM_Stop+0x52>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_TIM_PWM_Stop+0x82>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	f240 4344 	movw	r3, #1092	; 0x444
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_TIM_PWM_Stop+0x82>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Stop+0x92>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	e013      	b.n	80041ae <HAL_TIM_PWM_Stop+0xba>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Stop+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	e00b      	b.n	80041ae <HAL_TIM_PWM_Stop+0xba>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Stop+0xb2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	e003      	b.n	80041ae <HAL_TIM_PWM_Stop+0xba>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000

080041bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e097      	b.n	8004300 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fd fe31 	bl	8001e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004200:	f023 0307 	bic.w	r3, r3, #7
 8004204:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f000 fba9 	bl	8004968 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	4313      	orrs	r3, r2
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800425c:	f023 030c 	bic.w	r3, r3, #12
 8004260:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4313      	orrs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	011a      	lsls	r2, r3, #4
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	031b      	lsls	r3, r3, #12
 800428c:	4313      	orrs	r3, r2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4313      	orrs	r3, r2
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004318:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004320:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004328:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004330:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d001      	beq.n	8004348 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e069      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	e031      	b.n	80043be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d110      	bne.n	8004382 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d001      	beq.n	8004370 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e055      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004380:	e01d      	b.n	80043be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800438e:	7b7b      	ldrb	r3, [r7, #13]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004394:	7b3b      	ldrb	r3, [r7, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e03e      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_Encoder_Start+0xc4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d008      	beq.n	80043dc <HAL_TIM_Encoder_Start+0xd4>
 80043ca:	e00f      	b.n	80043ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd79 	bl	8004ecc <TIM_CCxChannelCmd>
      break;
 80043da:	e016      	b.n	800440a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	2104      	movs	r1, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd71 	bl	8004ecc <TIM_CCxChannelCmd>
      break;
 80043ea:	e00e      	b.n	800440a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd69 	bl	8004ecc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	2104      	movs	r1, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fd62 	bl	8004ecc <TIM_CCxChannelCmd>
      break;
 8004408:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa5b 	bl	800492a <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa4d 	bl	8004916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa5e 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa35 	bl	800492a <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa27 	bl	8004916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa38 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0208 	mvn.w	r2, #8
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa0f 	bl	800492a <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa01 	bl	8004916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa12 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9e9 	bl	800492a <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9db 	bl	8004916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f9ec 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fb7a 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fd7c 	bl	80050ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9bd 	bl	8004952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0220 	mvn.w	r2, #32
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fd4e 	bl	8005098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e0ae      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	f200 809f 	bhi.w	8004770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004771 	.word	0x08004771
 8004640:	08004771 	.word	0x08004771
 8004644:	08004771 	.word	0x08004771
 8004648:	080046ad 	.word	0x080046ad
 800464c:	08004771 	.word	0x08004771
 8004650:	08004771 	.word	0x08004771
 8004654:	08004771 	.word	0x08004771
 8004658:	080046ef 	.word	0x080046ef
 800465c:	08004771 	.word	0x08004771
 8004660:	08004771 	.word	0x08004771
 8004664:	08004771 	.word	0x08004771
 8004668:	0800472f 	.word	0x0800472f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fa04 	bl	8004a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
      break;
 80046aa:	e064      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fa4a 	bl	8004b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]
      break;
 80046ec:	e043      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa95 	bl	8004c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	61da      	str	r2, [r3, #28]
      break;
 800472c:	e023      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fadf 	bl	8004cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	61da      	str	r2, [r3, #28]
      break;
 800476e:	e002      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	75fb      	strb	r3, [r7, #23]
      break;
 8004774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e0b4      	b.n	800490e <HAL_TIM_ConfigClockSource+0x186>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047dc:	d03e      	beq.n	800485c <HAL_TIM_ConfigClockSource+0xd4>
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	f200 8087 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	f000 8086 	beq.w	80048fa <HAL_TIM_ConfigClockSource+0x172>
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d87f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d01a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xa6>
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d87b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d050      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d877      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b50      	cmp	r3, #80	; 0x50
 8004806:	d03c      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0xfa>
 8004808:	2b50      	cmp	r3, #80	; 0x50
 800480a:	d873      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d058      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d86f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d064      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d86b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d060      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d867      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d05a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	e062      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	f000 fb25 	bl	8004e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	609a      	str	r2, [r3, #8]
      break;
 800485a:	e04f      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800486c:	f000 fb0e 	bl	8004e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487e:	609a      	str	r2, [r3, #8]
      break;
 8004880:	e03c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488e:	461a      	mov	r2, r3
 8004890:	f000 fa82 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2150      	movs	r1, #80	; 0x50
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fadb 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 80048a0:	e02c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 faa1 	bl	8004df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2160      	movs	r1, #96	; 0x60
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 facb 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 80048c0:	e01c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fa62 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fabb 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e00c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fab2 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 80048f2:	e003      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e000      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <TIM_Base_SetConfig+0xfc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a37      	ldr	r2, [pc, #220]	; (8004a68 <TIM_Base_SetConfig+0x100>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a36      	ldr	r2, [pc, #216]	; (8004a6c <TIM_Base_SetConfig+0x104>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <TIM_Base_SetConfig+0x108>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0xfc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01b      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d017      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a28      	ldr	r2, [pc, #160]	; (8004a68 <TIM_Base_SetConfig+0x100>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <TIM_Base_SetConfig+0x104>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00f      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <TIM_Base_SetConfig+0x108>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00b      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <TIM_Base_SetConfig+0x10c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <TIM_Base_SetConfig+0x110>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <TIM_Base_SetConfig+0x114>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <TIM_Base_SetConfig+0xfc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]
  }
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800

08004a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f023 0201 	bic.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0303 	bic.w	r3, r3, #3
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 0302 	bic.w	r3, r3, #2
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <TIM_OC1_SetConfig+0xc8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10c      	bne.n	8004af6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0308 	bic.w	r3, r3, #8
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <TIM_OC1_SetConfig+0xc8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40010000 	.word	0x40010000

08004b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f023 0210 	bic.w	r2, r3, #16
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0320 	bic.w	r3, r3, #32
 8004b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <TIM_OC2_SetConfig+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10d      	bne.n	8004bc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <TIM_OC2_SetConfig+0xd4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d113      	bne.n	8004bf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40010000 	.word	0x40010000

08004c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <TIM_OC3_SetConfig+0xd0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10d      	bne.n	8004c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <TIM_OC3_SetConfig+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d113      	bne.n	8004cce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	621a      	str	r2, [r3, #32]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40010000 	.word	0x40010000

08004cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	031b      	lsls	r3, r3, #12
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <TIM_OC4_SetConfig+0x9c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	019b      	lsls	r3, r3, #6
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 0210 	bic.w	r2, r3, #16
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f043 0307 	orr.w	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2201      	movs	r2, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1a      	ldr	r2, [r3, #32]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e050      	b.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40014000 	.word	0x40014000

08004ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800500c:	2302      	movs	r3, #2
 800500e:	e03d      	b.n	800508c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e042      	b.n	8005158 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd f80c 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 ffdd 	bl	80060c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e04a      	b.n	8005208 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc ffbc 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	; 0x24
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ff8d 	bl	80060c4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80051c8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b20      	cmp	r3, #32
 800522e:	d175      	bne.n	800531c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_UART_Transmit+0x2c>
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e06e      	b.n	800531e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2221      	movs	r2, #33	; 0x21
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524e:	f7fd fa0d 	bl	800266c <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d108      	bne.n	800527c <HAL_UART_Transmit+0x6c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e003      	b.n	8005284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005284:	e02e      	b.n	80052e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fc5d 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e03a      	b.n	800531e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	3302      	adds	r3, #2
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e007      	b.n	80052d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1cb      	bne.n	8005286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fc29 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b08c      	sub	sp, #48	; 0x30
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b20      	cmp	r3, #32
 800533e:	d14a      	bne.n	80053d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e043      	b.n	80053d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	461a      	mov	r2, r3
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fc4e 	bl	8005c04 <UART_Start_Receive_DMA>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800536e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005372:	2b00      	cmp	r3, #0
 8005374:	d12c      	bne.n	80053d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	2b01      	cmp	r3, #1
 800537c:	d125      	bne.n	80053ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	617b      	str	r3, [r7, #20]
   return(result);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f043 0310 	orr.w	r3, r3, #16
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b4:	627a      	str	r2, [r7, #36]	; 0x24
 80053b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6a39      	ldr	r1, [r7, #32]
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80053c8:	e002      	b.n	80053d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80053d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053d4:	e000      	b.n	80053d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3730      	adds	r7, #48	; 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b0ba      	sub	sp, #232	; 0xe8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800541e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_UART_IRQHandler+0x66>
 8005432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd81 	bl	8005f46 <UART_Receive_IT>
      return;
 8005444:	e25b      	b.n	80058fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80de 	beq.w	800560c <HAL_UART_IRQHandler+0x22c>
 8005450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80d1 	beq.w	800560c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_UART_IRQHandler+0xae>
 8005476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f043 0201 	orr.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_UART_IRQHandler+0xd2>
 800549a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	f043 0202 	orr.w	r2, r3, #2
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xf6>
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d011      	beq.n	8005506 <HAL_UART_IRQHandler+0x126>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 81f2 	beq.w	80058f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_UART_IRQHandler+0x14e>
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fd0c 	bl	8005f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <HAL_UART_IRQHandler+0x17a>
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d04f      	beq.n	80055fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fc14 	bl	8005d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d141      	bne.n	80055f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800559e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	4a7e      	ldr	r2, [pc, #504]	; (80057c0 <HAL_UART_IRQHandler+0x3e0>)
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fab0 	bl	8002b34 <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00e      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9a8 	bl	8005940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00a      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9a4 	bl	8005940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e006      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9a0 	bl	8005940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005606:	e175      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	bf00      	nop
    return;
 800560a:	e173      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 814f 	bne.w	80058b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8148 	beq.w	80058b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8141 	beq.w	80058b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	f040 80b6 	bne.w	80057c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8145 	beq.w	80058f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005676:	429a      	cmp	r2, r3
 8005678:	f080 813e 	bcs.w	80058f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005682:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	f000 8088 	beq.w	80057a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d9      	bne.n	8005692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005706:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e1      	bne.n	80056de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800573e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800574c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005784:	65ba      	str	r2, [r7, #88]	; 0x58
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd f959 	bl	8002a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7fc f9e5 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057be:	e09b      	b.n	80058f8 <HAL_UART_IRQHandler+0x518>
 80057c0:	08005e4f 	.word	0x08005e4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 808e 	beq.w	80058fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8089 	beq.w	80058fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800580e:	647a      	str	r2, [r7, #68]	; 0x44
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e3      	bne.n	80057ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	623b      	str	r3, [r7, #32]
   return(result);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005846:	633a      	str	r2, [r7, #48]	; 0x30
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800588c:	61fa      	str	r2, [r7, #28]
 800588e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e3      	bne.n	8005868 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fc f96b 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b2:	e023      	b.n	80058fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_UART_IRQHandler+0x4f4>
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fad2 	bl	8005e76 <UART_Transmit_IT>
    return;
 80058d2:	e014      	b.n	80058fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <HAL_UART_IRQHandler+0x51e>
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fb12 	bl	8005f16 <UART_EndTransmit_IT>
    return;
 80058f2:	e004      	b.n	80058fe <HAL_UART_IRQHandler+0x51e>
    return;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <HAL_UART_IRQHandler+0x51e>
      return;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_UART_IRQHandler+0x51e>
      return;
 80058fc:	bf00      	nop
  }
}
 80058fe:	37e8      	adds	r7, #232	; 0xe8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b09c      	sub	sp, #112	; 0x70
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d172      	bne.n	8005a56 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	2200      	movs	r2, #0
 8005974:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598c:	66bb      	str	r3, [r7, #104]	; 0x68
 800598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005996:	65ba      	str	r2, [r7, #88]	; 0x58
 8005998:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800599c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	667b      	str	r3, [r7, #100]	; 0x64
 80059c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3314      	adds	r3, #20
 80059c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059ca:	647a      	str	r2, [r7, #68]	; 0x44
 80059cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	623b      	str	r3, [r7, #32]
   return(result);
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f4:	663b      	str	r3, [r7, #96]	; 0x60
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d119      	bne.n	8005a56 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 0310 	bic.w	r3, r3, #16
 8005a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a42:	61fa      	str	r2, [r7, #28]
 8005a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	2200      	movs	r2, #0
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d106      	bne.n	8005a72 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a6c:	f7fc f88c 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a70:	e002      	b.n	8005a78 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a74:	f7ff ff50 	bl	8005918 <HAL_UART_RxCpltCallback>
}
 8005a78:	bf00      	nop
 8005a7a:	3770      	adds	r7, #112	; 0x70
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7fc f86e 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aac:	e002      	b.n	8005ab4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff ff3c 	bl	800592c <HAL_UART_RxHalfCpltCallback>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b80      	cmp	r3, #128	; 0x80
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b21      	cmp	r3, #33	; 0x21
 8005aee:	d108      	bne.n	8005b02 <UART_DMAError+0x46>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2200      	movs	r2, #0
 8005afa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005afc:	68b8      	ldr	r0, [r7, #8]
 8005afe:	f000 f91b 	bl	8005d38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b22      	cmp	r3, #34	; 0x22
 8005b22:	d108      	bne.n	8005b36 <UART_DMAError+0x7a>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b30:	68b8      	ldr	r0, [r7, #8]
 8005b32:	f000 f929 	bl	8005d88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	f043 0210 	orr.w	r2, r3, #16
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b42:	68b8      	ldr	r0, [r7, #8]
 8005b44:	f7ff fefc 	bl	8005940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b60:	e03b      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b68:	d037      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fc fd7f 	bl	800266c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e03a      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d023      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d020      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d01d      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d116      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f8e0 	bl	8005d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00f      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d0b4      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b098      	sub	sp, #96	; 0x60
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2222      	movs	r2, #34	; 0x22
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	4a3e      	ldr	r2, [pc, #248]	; (8005d2c <UART_Start_Receive_DMA+0x128>)
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	4a3d      	ldr	r2, [pc, #244]	; (8005d30 <UART_Start_Receive_DMA+0x12c>)
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <UART_Start_Receive_DMA+0x130>)
 8005c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	2200      	movs	r2, #0
 8005c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c4c:	f107 0308 	add.w	r3, r7, #8
 8005c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	f7fc fe9e 	bl	80029a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d019      	beq.n	8005cba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cda:	63ba      	str	r2, [r7, #56]	; 0x38
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d04:	653b      	str	r3, [r7, #80]	; 0x50
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6a39      	ldr	r1, [r7, #32]
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3760      	adds	r7, #96	; 0x60
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	08005955 	.word	0x08005955
 8005d30:	08005a81 	.word	0x08005a81
 8005d34:	08005abd 	.word	0x08005abd

08005d38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	61ba      	str	r2, [r7, #24]
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6979      	ldr	r1, [r7, #20]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005d7c:	bf00      	nop
 8005d7e:	3724      	adds	r7, #36	; 0x24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b095      	sub	sp, #84	; 0x54
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005db0:	643a      	str	r2, [r7, #64]	; 0x40
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d119      	bne.n	8005e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	647b      	str	r3, [r7, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e20:	61ba      	str	r2, [r7, #24]
 8005e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e42:	bf00      	nop
 8005e44:	3754      	adds	r7, #84	; 0x54
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fd69 	bl	8005940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b21      	cmp	r3, #33	; 0x21
 8005e88:	d13e      	bne.n	8005f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d114      	bne.n	8005ebe <UART_Transmit_IT+0x48>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d110      	bne.n	8005ebe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	621a      	str	r2, [r3, #32]
 8005ebc:	e008      	b.n	8005ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	1c59      	adds	r1, r3, #1
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6211      	str	r1, [r2, #32]
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4619      	mov	r1, r3
 8005ede:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10f      	bne.n	8005f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e000      	b.n	8005f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fce4 	bl	8005904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08c      	sub	sp, #48	; 0x30
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b22      	cmp	r3, #34	; 0x22
 8005f58:	f040 80ae 	bne.w	80060b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f64:	d117      	bne.n	8005f96 <UART_Receive_IT+0x50>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d113      	bne.n	8005f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	1c9a      	adds	r2, r3, #2
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
 8005f94:	e026      	b.n	8005fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	d007      	beq.n	8005fba <UART_Receive_IT+0x74>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <UART_Receive_IT+0x82>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e008      	b.n	8005fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d15d      	bne.n	80060b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0220 	bic.w	r2, r2, #32
 8006006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	2b01      	cmp	r3, #1
 800603c:	d135      	bne.n	80060aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	613b      	str	r3, [r7, #16]
   return(result);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 0310 	bic.w	r3, r3, #16
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	623a      	str	r2, [r7, #32]
 8006066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69f9      	ldr	r1, [r7, #28]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	61bb      	str	r3, [r7, #24]
   return(result);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e5      	bne.n	8006044 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b10      	cmp	r3, #16
 8006084:	d10a      	bne.n	800609c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb fd70 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
 80060a8:	e002      	b.n	80060b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fc34 	bl	8005918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e002      	b.n	80060ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c8:	b0c0      	sub	sp, #256	; 0x100
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	ea40 0301 	orr.w	r3, r0, r1
 80060ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800611c:	f021 010c 	bic.w	r1, r1, #12
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800612a:	430b      	orrs	r3, r1
 800612c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613e:	6999      	ldr	r1, [r3, #24]
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	ea40 0301 	orr.w	r3, r0, r1
 800614a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4b8f      	ldr	r3, [pc, #572]	; (8006390 <UART_SetConfig+0x2cc>)
 8006154:	429a      	cmp	r2, r3
 8006156:	d005      	beq.n	8006164 <UART_SetConfig+0xa0>
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <UART_SetConfig+0x2d0>)
 8006160:	429a      	cmp	r2, r3
 8006162:	d104      	bne.n	800616e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fd fdc4 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8006168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800616c:	e003      	b.n	8006176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800616e:	f7fd fdab 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8006172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006180:	f040 810c 	bne.w	800639c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800618e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006196:	4622      	mov	r2, r4
 8006198:	462b      	mov	r3, r5
 800619a:	1891      	adds	r1, r2, r2
 800619c:	65b9      	str	r1, [r7, #88]	; 0x58
 800619e:	415b      	adcs	r3, r3
 80061a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061a6:	4621      	mov	r1, r4
 80061a8:	eb12 0801 	adds.w	r8, r2, r1
 80061ac:	4629      	mov	r1, r5
 80061ae:	eb43 0901 	adc.w	r9, r3, r1
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c6:	4690      	mov	r8, r2
 80061c8:	4699      	mov	r9, r3
 80061ca:	4623      	mov	r3, r4
 80061cc:	eb18 0303 	adds.w	r3, r8, r3
 80061d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061d4:	462b      	mov	r3, r5
 80061d6:	eb49 0303 	adc.w	r3, r9, r3
 80061da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061f2:	460b      	mov	r3, r1
 80061f4:	18db      	adds	r3, r3, r3
 80061f6:	653b      	str	r3, [r7, #80]	; 0x50
 80061f8:	4613      	mov	r3, r2
 80061fa:	eb42 0303 	adc.w	r3, r2, r3
 80061fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006208:	f7fa fd56 	bl	8000cb8 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b61      	ldr	r3, [pc, #388]	; (8006398 <UART_SetConfig+0x2d4>)
 8006212:	fba3 2302 	umull	r2, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	011c      	lsls	r4, r3, #4
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	64b9      	str	r1, [r7, #72]	; 0x48
 8006234:	415b      	adcs	r3, r3
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800623c:	4641      	mov	r1, r8
 800623e:	eb12 0a01 	adds.w	sl, r2, r1
 8006242:	4649      	mov	r1, r9
 8006244:	eb43 0b01 	adc.w	fp, r3, r1
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800625c:	4692      	mov	sl, r2
 800625e:	469b      	mov	fp, r3
 8006260:	4643      	mov	r3, r8
 8006262:	eb1a 0303 	adds.w	r3, sl, r3
 8006266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800626a:	464b      	mov	r3, r9
 800626c:	eb4b 0303 	adc.w	r3, fp, r3
 8006270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006288:	460b      	mov	r3, r1
 800628a:	18db      	adds	r3, r3, r3
 800628c:	643b      	str	r3, [r7, #64]	; 0x40
 800628e:	4613      	mov	r3, r2
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800629a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800629e:	f7fa fd0b 	bl	8000cb8 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <UART_SetConfig+0x2d4>)
 80062aa:	fba3 2301 	umull	r2, r3, r3, r1
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2264      	movs	r2, #100	; 0x64
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	1acb      	subs	r3, r1, r3
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062be:	4b36      	ldr	r3, [pc, #216]	; (8006398 <UART_SetConfig+0x2d4>)
 80062c0:	fba3 2302 	umull	r2, r3, r3, r2
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062cc:	441c      	add	r4, r3
 80062ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062e8:	415b      	adcs	r3, r3
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6339      	str	r1, [r7, #48]	; 0x30
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006324:	464b      	mov	r3, r9
 8006326:	460a      	mov	r2, r1
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800633c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006344:	460b      	mov	r3, r1
 8006346:	18db      	adds	r3, r3, r3
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
 800634a:	4613      	mov	r3, r2
 800634c:	eb42 0303 	adc.w	r3, r2, r3
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800635a:	f7fa fcad 	bl	8000cb8 <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <UART_SetConfig+0x2d4>)
 8006364:	fba3 1302 	umull	r1, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	2164      	movs	r1, #100	; 0x64
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	3332      	adds	r3, #50	; 0x32
 8006376:	4a08      	ldr	r2, [pc, #32]	; (8006398 <UART_SetConfig+0x2d4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f003 0207 	and.w	r2, r3, #7
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4422      	add	r2, r4
 800638a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800638c:	e106      	b.n	800659c <UART_SetConfig+0x4d8>
 800638e:	bf00      	nop
 8006390:	40011000 	.word	0x40011000
 8006394:	40011400 	.word	0x40011400
 8006398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063ae:	4642      	mov	r2, r8
 80063b0:	464b      	mov	r3, r9
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	6239      	str	r1, [r7, #32]
 80063b6:	415b      	adcs	r3, r3
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063be:	4641      	mov	r1, r8
 80063c0:	1854      	adds	r4, r2, r1
 80063c2:	4649      	mov	r1, r9
 80063c4:	eb43 0501 	adc.w	r5, r3, r1
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	00eb      	lsls	r3, r5, #3
 80063d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063d6:	00e2      	lsls	r2, r4, #3
 80063d8:	4614      	mov	r4, r2
 80063da:	461d      	mov	r5, r3
 80063dc:	4643      	mov	r3, r8
 80063de:	18e3      	adds	r3, r4, r3
 80063e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063e4:	464b      	mov	r3, r9
 80063e6:	eb45 0303 	adc.w	r3, r5, r3
 80063ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800640a:	4629      	mov	r1, r5
 800640c:	008b      	lsls	r3, r1, #2
 800640e:	4621      	mov	r1, r4
 8006410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006414:	4621      	mov	r1, r4
 8006416:	008a      	lsls	r2, r1, #2
 8006418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800641c:	f7fa fc4c 	bl	8000cb8 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4b60      	ldr	r3, [pc, #384]	; (80065a8 <UART_SetConfig+0x4e4>)
 8006426:	fba3 2302 	umull	r2, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	011c      	lsls	r4, r3, #4
 800642e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006432:	2200      	movs	r2, #0
 8006434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800643c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	1891      	adds	r1, r2, r2
 8006446:	61b9      	str	r1, [r7, #24]
 8006448:	415b      	adcs	r3, r3
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006450:	4641      	mov	r1, r8
 8006452:	1851      	adds	r1, r2, r1
 8006454:	6139      	str	r1, [r7, #16]
 8006456:	4649      	mov	r1, r9
 8006458:	414b      	adcs	r3, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006468:	4659      	mov	r1, fp
 800646a:	00cb      	lsls	r3, r1, #3
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006472:	4651      	mov	r1, sl
 8006474:	00ca      	lsls	r2, r1, #3
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	4603      	mov	r3, r0
 800647c:	4642      	mov	r2, r8
 800647e:	189b      	adds	r3, r3, r2
 8006480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006484:	464b      	mov	r3, r9
 8006486:	460a      	mov	r2, r1
 8006488:	eb42 0303 	adc.w	r3, r2, r3
 800648c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	67bb      	str	r3, [r7, #120]	; 0x78
 800649a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064a8:	4649      	mov	r1, r9
 80064aa:	008b      	lsls	r3, r1, #2
 80064ac:	4641      	mov	r1, r8
 80064ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b2:	4641      	mov	r1, r8
 80064b4:	008a      	lsls	r2, r1, #2
 80064b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ba:	f7fa fbfd 	bl	8000cb8 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4611      	mov	r1, r2
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <UART_SetConfig+0x4e4>)
 80064c6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	; 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1acb      	subs	r3, r1, r3
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a33      	ldr	r2, [pc, #204]	; (80065a8 <UART_SetConfig+0x4e4>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	673b      	str	r3, [r7, #112]	; 0x70
 80064ee:	677a      	str	r2, [r7, #116]	; 0x74
 80064f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	1891      	adds	r1, r2, r2
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	415b      	adcs	r3, r3
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006504:	4641      	mov	r1, r8
 8006506:	1851      	adds	r1, r2, r1
 8006508:	6039      	str	r1, [r7, #0]
 800650a:	4649      	mov	r1, r9
 800650c:	414b      	adcs	r3, r1
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800651c:	4659      	mov	r1, fp
 800651e:	00cb      	lsls	r3, r1, #3
 8006520:	4651      	mov	r1, sl
 8006522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006526:	4651      	mov	r1, sl
 8006528:	00ca      	lsls	r2, r1, #3
 800652a:	4610      	mov	r0, r2
 800652c:	4619      	mov	r1, r3
 800652e:	4603      	mov	r3, r0
 8006530:	4642      	mov	r2, r8
 8006532:	189b      	adds	r3, r3, r2
 8006534:	66bb      	str	r3, [r7, #104]	; 0x68
 8006536:	464b      	mov	r3, r9
 8006538:	460a      	mov	r2, r1
 800653a:	eb42 0303 	adc.w	r3, r2, r3
 800653e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	663b      	str	r3, [r7, #96]	; 0x60
 800654a:	667a      	str	r2, [r7, #100]	; 0x64
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006558:	4649      	mov	r1, r9
 800655a:	008b      	lsls	r3, r1, #2
 800655c:	4641      	mov	r1, r8
 800655e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006562:	4641      	mov	r1, r8
 8006564:	008a      	lsls	r2, r1, #2
 8006566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800656a:	f7fa fba5 	bl	8000cb8 <__aeabi_uldivmod>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <UART_SetConfig+0x4e4>)
 8006574:	fba3 1302 	umull	r1, r3, r3, r2
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	2164      	movs	r1, #100	; 0x64
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	3332      	adds	r3, #50	; 0x32
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <UART_SetConfig+0x4e4>)
 8006588:	fba2 2303 	umull	r2, r3, r2, r3
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4422      	add	r2, r4
 800659a:	609a      	str	r2, [r3, #8]
}
 800659c:	bf00      	nop
 800659e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a8:	51eb851f 	.word	0x51eb851f

080065ac <__NVIC_SetPriority>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	db0a      	blt.n	80065d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	490c      	ldr	r1, [pc, #48]	; (80065f8 <__NVIC_SetPriority+0x4c>)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	0112      	lsls	r2, r2, #4
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	440b      	add	r3, r1
 80065d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065d4:	e00a      	b.n	80065ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4908      	ldr	r1, [pc, #32]	; (80065fc <__NVIC_SetPriority+0x50>)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	3b04      	subs	r3, #4
 80065e4:	0112      	lsls	r2, r2, #4
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	440b      	add	r3, r1
 80065ea:	761a      	strb	r2, [r3, #24]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	e000e100 	.word	0xe000e100
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <SysTick_Handler+0x1c>)
 8006606:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006608:	f002 fa9a 	bl	8008b40 <xTaskGetSchedulerState>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d001      	beq.n	8006616 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006612:	f003 f981 	bl	8009918 <xPortSysTickHandler>
  }
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	e000e010 	.word	0xe000e010

08006620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006624:	2100      	movs	r1, #0
 8006626:	f06f 0004 	mvn.w	r0, #4
 800662a:	f7ff ffbf 	bl	80065ac <__NVIC_SetPriority>
#endif
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663a:	f3ef 8305 	mrs	r3, IPSR
 800663e:	603b      	str	r3, [r7, #0]
  return(result);
 8006640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006646:	f06f 0305 	mvn.w	r3, #5
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	e00c      	b.n	8006668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <osKernelInitialize+0x44>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <osKernelInitialize+0x44>)
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800665c:	2300      	movs	r3, #0
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	e002      	b.n	8006668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006668:	687b      	ldr	r3, [r7, #4]
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000c20 	.word	0x20000c20

0800667c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006682:	f3ef 8305 	mrs	r3, IPSR
 8006686:	603b      	str	r3, [r7, #0]
  return(result);
 8006688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800668e:	f06f 0305 	mvn.w	r3, #5
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	e010      	b.n	80066b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <osKernelStart+0x48>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d109      	bne.n	80066b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800669e:	f7ff ffbf 	bl	8006620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <osKernelStart+0x48>)
 80066a4:	2202      	movs	r2, #2
 80066a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066a8:	f001 fdee 	bl	8008288 <vTaskStartScheduler>
      stat = osOK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	e002      	b.n	80066b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066b8:	687b      	ldr	r3, [r7, #4]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000c20 	.word	0x20000c20

080066c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	; 0x38
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d8:	f3ef 8305 	mrs	r3, IPSR
 80066dc:	617b      	str	r3, [r7, #20]
  return(result);
 80066de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d17e      	bne.n	80067e2 <osThreadNew+0x11a>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d07b      	beq.n	80067e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066ea:	2380      	movs	r3, #128	; 0x80
 80066ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066ee:	2318      	movs	r3, #24
 80066f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d045      	beq.n	800678e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <osThreadNew+0x48>
        name = attr->name;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <osThreadNew+0x6e>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b38      	cmp	r3, #56	; 0x38
 8006728:	d805      	bhi.n	8006736 <osThreadNew+0x6e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <osThreadNew+0x72>
        return (NULL);
 8006736:	2300      	movs	r3, #0
 8006738:	e054      	b.n	80067e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <osThreadNew+0xa8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2ba7      	cmp	r3, #167	; 0xa7
 8006758:	d90a      	bls.n	8006770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <osThreadNew+0xa8>
        mem = 1;
 800676a:	2301      	movs	r3, #1
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e010      	b.n	8006792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <osThreadNew+0xca>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <osThreadNew+0xca>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <osThreadNew+0xca>
          mem = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e001      	b.n	8006792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d110      	bne.n	80067ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6a3a      	ldr	r2, [r7, #32]
 80067ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f001 fb7e 	bl	8007eb0 <xTaskCreateStatic>
 80067b4:	4603      	mov	r3, r0
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	e013      	b.n	80067e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d110      	bne.n	80067e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f107 0310 	add.w	r3, r7, #16
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f001 fbc9 	bl	8007f6a <xTaskCreate>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <osThreadNew+0x11a>
            hTask = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067e2:	693b      	ldr	r3, [r7, #16]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3728      	adds	r7, #40	; 0x28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f4:	f3ef 8305 	mrs	r3, IPSR
 80067f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <osDelay+0x1c>
    stat = osErrorISR;
 8006800:	f06f 0305 	mvn.w	r3, #5
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e007      	b.n	8006818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fd04 	bl	8008220 <vTaskDelay>
    }
  }

  return (stat);
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006822:	b580      	push	{r7, lr}
 8006824:	b08a      	sub	sp, #40	; 0x28
 8006826:	af02      	add	r7, sp, #8
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006832:	f3ef 8305 	mrs	r3, IPSR
 8006836:	613b      	str	r3, [r7, #16]
  return(result);
 8006838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800683a:	2b00      	cmp	r3, #0
 800683c:	d175      	bne.n	800692a <osSemaphoreNew+0x108>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d072      	beq.n	800692a <osSemaphoreNew+0x108>
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d86e      	bhi.n	800692a <osSemaphoreNew+0x108>
    mem = -1;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d015      	beq.n	8006884 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d006      	beq.n	800686e <osSemaphoreNew+0x4c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b4f      	cmp	r3, #79	; 0x4f
 8006866:	d902      	bls.n	800686e <osSemaphoreNew+0x4c>
        mem = 1;
 8006868:	2301      	movs	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00c      	b.n	8006888 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d108      	bne.n	8006888 <osSemaphoreNew+0x66>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <osSemaphoreNew+0x66>
          mem = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e001      	b.n	8006888 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688e:	d04c      	beq.n	800692a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d128      	bne.n	80068e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d10a      	bne.n	80068b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2203      	movs	r2, #3
 80068a2:	9200      	str	r2, [sp, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	2001      	movs	r0, #1
 80068aa:	f000 fb5b 	bl	8006f64 <xQueueGenericCreateStatic>
 80068ae:	61f8      	str	r0, [r7, #28]
 80068b0:	e005      	b.n	80068be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80068b2:	2203      	movs	r2, #3
 80068b4:	2100      	movs	r1, #0
 80068b6:	2001      	movs	r0, #1
 80068b8:	f000 fbcc 	bl	8007054 <xQueueGenericCreate>
 80068bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d022      	beq.n	800690a <osSemaphoreNew+0xe8>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01f      	beq.n	800690a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	2100      	movs	r1, #0
 80068d0:	69f8      	ldr	r0, [r7, #28]
 80068d2:	f000 fc87 	bl	80071e4 <xQueueGenericSend>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d016      	beq.n	800690a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80068dc:	69f8      	ldr	r0, [r7, #28]
 80068de:	f001 f913 	bl	8007b08 <vQueueDelete>
            hSemaphore = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e010      	b.n	800690a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d108      	bne.n	8006900 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fc09 	bl	800710e <xQueueCreateCountingSemaphoreStatic>
 80068fc:	61f8      	str	r0, [r7, #28]
 80068fe:	e004      	b.n	800690a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fc3a 	bl	800717c <xQueueCreateCountingSemaphore>
 8006908:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00c      	beq.n	800692a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e001      	b.n	8006922 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006922:	6979      	ldr	r1, [r7, #20]
 8006924:	69f8      	ldr	r0, [r7, #28]
 8006926:	f001 fa3b 	bl	8007da0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800692a:	69fb      	ldr	r3, [r7, #28]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800694c:	f06f 0303 	mvn.w	r3, #3
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e039      	b.n	80069c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006954:	f3ef 8305 	mrs	r3, IPSR
 8006958:	60fb      	str	r3, [r7, #12]
  return(result);
 800695a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d022      	beq.n	80069a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006966:	f06f 0303 	mvn.w	r3, #3
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e02c      	b.n	80069c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	461a      	mov	r2, r3
 8006978:	2100      	movs	r1, #0
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f001 f844 	bl	8007a08 <xQueueReceiveFromISR>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d003      	beq.n	800698e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006986:	f06f 0302 	mvn.w	r3, #2
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e01c      	b.n	80069c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d019      	beq.n	80069c8 <osSemaphoreAcquire+0x94>
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <osSemaphoreAcquire+0xa0>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	e010      	b.n	80069c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6938      	ldr	r0, [r7, #16]
 80069aa:	f000 ff21 	bl	80077f0 <xQueueSemaphoreTake>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d009      	beq.n	80069c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80069ba:	f06f 0301 	mvn.w	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e002      	b.n	80069c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80069c2:	f06f 0302 	mvn.w	r3, #2
 80069c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80069c8:	697b      	ldr	r3, [r7, #20]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80069ee:	f06f 0303 	mvn.w	r3, #3
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e02c      	b.n	8006a50 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f6:	f3ef 8305 	mrs	r3, IPSR
 80069fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80069fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01a      	beq.n	8006a38 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6938      	ldr	r0, [r7, #16]
 8006a0e:	f000 fd82 	bl	8007516 <xQueueGiveFromISR>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d003      	beq.n	8006a20 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006a18:	f06f 0302 	mvn.w	r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e017      	b.n	8006a50 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d014      	beq.n	8006a50 <osSemaphoreRelease+0x78>
 8006a26:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <osSemaphoreRelease+0x84>)
 8006a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	e00b      	b.n	8006a50 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f000 fbd0 	bl	80071e4 <xQueueGenericSend>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d002      	beq.n	8006a50 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006a4a:	f06f 0302 	mvn.w	r3, #2
 8006a4e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a50:	697b      	ldr	r3, [r7, #20]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	e000ed04 	.word	0xe000ed04

08006a60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	613b      	str	r3, [r7, #16]
  return(result);
 8006a76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d15f      	bne.n	8006b3c <osMessageQueueNew+0xdc>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d05c      	beq.n	8006b3c <osMessageQueueNew+0xdc>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d059      	beq.n	8006b3c <osMessageQueueNew+0xdc>
    mem = -1;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d029      	beq.n	8006ae8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <osMessageQueueNew+0x62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b4f      	cmp	r3, #79	; 0x4f
 8006aa2:	d90e      	bls.n	8006ac2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <osMessageQueueNew+0x62>
        mem = 1;
 8006abc:	2301      	movs	r3, #1
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e014      	b.n	8006aec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d110      	bne.n	8006aec <osMessageQueueNew+0x8c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <osMessageQueueNew+0x8c>
          mem = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e001      	b.n	8006aec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10b      	bne.n	8006b0a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2100      	movs	r1, #0
 8006afc:	9100      	str	r1, [sp, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fa2f 	bl	8006f64 <xQueueGenericCreateStatic>
 8006b06:	61f8      	str	r0, [r7, #28]
 8006b08:	e008      	b.n	8006b1c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b10:	2200      	movs	r2, #0
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fa9d 	bl	8007054 <xQueueGenericCreate>
 8006b1a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e001      	b.n	8006b34 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69f8      	ldr	r0, [r7, #28]
 8006b38:	f001 f932 	bl	8007da0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b60:	f3ef 8305 	mrs	r3, IPSR
 8006b64:	617b      	str	r3, [r7, #20]
  return(result);
 8006b66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d028      	beq.n	8006bbe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <osMessageQueuePut+0x36>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <osMessageQueuePut+0x36>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006b7e:	f06f 0303 	mvn.w	r3, #3
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e038      	b.n	8006bf8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b8a:	f107 0210 	add.w	r2, r7, #16
 8006b8e:	2300      	movs	r3, #0
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	69b8      	ldr	r0, [r7, #24]
 8006b94:	f000 fc24 	bl	80073e0 <xQueueGenericSendFromISR>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d003      	beq.n	8006ba6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006b9e:	f06f 0302 	mvn.w	r3, #2
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e028      	b.n	8006bf8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d025      	beq.n	8006bf8 <osMessageQueuePut+0xb0>
 8006bac:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <osMessageQueuePut+0xbc>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	e01c      	b.n	8006bf8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <osMessageQueuePut+0x82>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bca:	f06f 0303 	mvn.w	r3, #3
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e012      	b.n	8006bf8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	69b8      	ldr	r0, [r7, #24]
 8006bda:	f000 fb03 	bl	80071e4 <xQueueGenericSend>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d009      	beq.n	8006bf8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006bea:	f06f 0301 	mvn.w	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e002      	b.n	8006bf8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006bf2:	f06f 0302 	mvn.w	r3, #2
 8006bf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006bf8:	69fb      	ldr	r3, [r7, #28]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1e:	f3ef 8305 	mrs	r3, IPSR
 8006c22:	617b      	str	r3, [r7, #20]
  return(result);
 8006c24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d028      	beq.n	8006c7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <osMessageQueueGet+0x34>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <osMessageQueueGet+0x34>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c3c:	f06f 0303 	mvn.w	r3, #3
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	e037      	b.n	8006cb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	69b8      	ldr	r0, [r7, #24]
 8006c52:	f000 fed9 	bl	8007a08 <xQueueReceiveFromISR>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c5c:	f06f 0302 	mvn.w	r3, #2
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e027      	b.n	8006cb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d024      	beq.n	8006cb4 <osMessageQueueGet+0xac>
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <osMessageQueueGet+0xb8>)
 8006c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	e01b      	b.n	8006cb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <osMessageQueueGet+0x80>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006c88:	f06f 0303 	mvn.w	r3, #3
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e011      	b.n	8006cb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	69b8      	ldr	r0, [r7, #24]
 8006c96:	f000 fccb 	bl	8007630 <xQueueReceive>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d009      	beq.n	8006cb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006ca6:	f06f 0301 	mvn.w	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e002      	b.n	8006cb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006cae:	f06f 0302 	mvn.w	r3, #2
 8006cb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8006cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000c24 	.word	0x20000c24
 8006cf4:	20000ccc 	.word	0x20000ccc

08006cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <vApplicationGetTimerTaskMemory+0x30>)
 8006d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d16:	601a      	str	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000ecc 	.word	0x20000ecc
 8006d28:	20000f74 	.word	0x20000f74

08006d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f103 0208 	add.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 0208 	add.w	r2, r3, #8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f103 0208 	add.w	r2, r3, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006de4:	d103      	bne.n	8006dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e00c      	b.n	8006e08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3308      	adds	r3, #8
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e002      	b.n	8006dfc <vListInsert+0x2e>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d2f6      	bcs.n	8006df6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6892      	ldr	r2, [r2, #8]
 8006e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6852      	ldr	r2, [r2, #4]
 8006e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d103      	bne.n	8006e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	1e5a      	subs	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ebe:	f002 fc99 	bl	80097f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	22ff      	movs	r2, #255	; 0xff
 8006f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d114      	bne.n	8006f3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3310      	adds	r3, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fc4b 	bl	80087bc <xTaskRemoveFromEventList>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <xQueueGenericReset+0xcc>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	e009      	b.n	8006f52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3310      	adds	r3, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fef2 	bl	8006d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3324      	adds	r3, #36	; 0x24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff feed 	bl	8006d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f52:	f002 fc7f 	bl	8009854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f56:	2301      	movs	r3, #1
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08e      	sub	sp, #56	; 0x38
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <xQueueGenericCreateStatic+0x52>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <xQueueGenericCreateStatic+0x56>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <xQueueGenericCreateStatic+0x58>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	623b      	str	r3, [r7, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <xQueueGenericCreateStatic+0x7e>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <xQueueGenericCreateStatic+0x82>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <xQueueGenericCreateStatic+0x84>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	61fb      	str	r3, [r7, #28]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007002:	2350      	movs	r3, #80	; 0x50
 8007004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b50      	cmp	r3, #80	; 0x50
 800700a:	d00a      	beq.n	8007022 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	61bb      	str	r3, [r7, #24]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007022:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007036:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f83f 	bl	80070c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800704c:	4618      	mov	r0, r3
 800704e:	3730      	adds	r7, #48	; 0x30
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	613b      	str	r3, [r7, #16]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
 8007086:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	3350      	adds	r3, #80	; 0x50
 800708c:	4618      	mov	r0, r3
 800708e:	f002 fcd3 	bl	8009a38 <pvPortMalloc>
 8007092:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d011      	beq.n	80070be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	3350      	adds	r3, #80	; 0x50
 80070a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f805 	bl	80070c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070be:	69bb      	ldr	r3, [r7, #24]
	}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e002      	b.n	80070ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070f6:	2101      	movs	r1, #1
 80070f8:	69b8      	ldr	r0, [r7, #24]
 80070fa:	f7ff fecb 	bl	8006e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800710e:	b580      	push	{r7, lr}
 8007110:	b08a      	sub	sp, #40	; 0x28
 8007112:	af02      	add	r7, sp, #8
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61bb      	str	r3, [r7, #24]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d90a      	bls.n	8007154 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007154:	2302      	movs	r3, #2
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff ff00 	bl	8006f64 <xQueueGenericCreateStatic>
 8007164:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007172:	69fb      	ldr	r3, [r7, #28]
	}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	613b      	str	r3, [r7, #16]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d90a      	bls.n	80071c0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071c0:	2202      	movs	r2, #2
 80071c2:	2100      	movs	r1, #0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff45 	bl	8007054 <xQueueGenericCreate>
 80071ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071d8:	697b      	ldr	r3, [r7, #20]
	}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08e      	sub	sp, #56	; 0x38
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071f2:	2300      	movs	r3, #0
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <xQueueGenericSend+0x32>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <xQueueGenericSend+0x40>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <xQueueGenericSend+0x44>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <xQueueGenericSend+0x46>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <xQueueGenericSend+0x60>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d103      	bne.n	8007252 <xQueueGenericSend+0x6e>
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <xQueueGenericSend+0x72>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <xQueueGenericSend+0x74>
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xQueueGenericSend+0x8e>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	623b      	str	r3, [r7, #32]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007272:	f001 fc65 	bl	8008b40 <xTaskGetSchedulerState>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <xQueueGenericSend+0x9e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <xQueueGenericSend+0xa2>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <xQueueGenericSend+0xa4>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	61fb      	str	r3, [r7, #28]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072a2:	f002 faa7 	bl	80097f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <xQueueGenericSend+0xd4>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d129      	bne.n	800730c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072be:	f000 fc5e 	bl	8007b7e <prvCopyDataToQueue>
 80072c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	3324      	adds	r3, #36	; 0x24
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 fa73 	bl	80087bc <xTaskRemoveFromEventList>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d013      	beq.n	8007304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072dc:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <xQueueGenericSend+0x1f8>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	e00a      	b.n	8007304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072f4:	4b39      	ldr	r3, [pc, #228]	; (80073dc <xQueueGenericSend+0x1f8>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007304:	f002 faa6 	bl	8009854 <vPortExitCritical>
				return pdPASS;
 8007308:	2301      	movs	r3, #1
 800730a:	e063      	b.n	80073d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007312:	f002 fa9f 	bl	8009854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007316:	2300      	movs	r3, #0
 8007318:	e05c      	b.n	80073d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	4618      	mov	r0, r3
 8007326:	f001 faad 	bl	8008884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800732a:	2301      	movs	r3, #1
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800732e:	f002 fa91 	bl	8009854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007332:	f001 f819 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007336:	f002 fa5d 	bl	80097f4 <vPortEnterCritical>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007346:	d103      	bne.n	8007350 <xQueueGenericSend+0x16c>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007356:	b25b      	sxtb	r3, r3
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735c:	d103      	bne.n	8007366 <xQueueGenericSend+0x182>
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007366:	f002 fa75 	bl	8009854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800736a:	1d3a      	adds	r2, r7, #4
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fa9c 	bl	80088b0 <xTaskCheckForTimeOut>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d124      	bne.n	80073c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800737e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007380:	f000 fcf5 	bl	8007d6e <prvIsQueueFull>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d018      	beq.n	80073bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	3310      	adds	r3, #16
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 f9c2 	bl	800871c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800739a:	f000 fc80 	bl	8007c9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800739e:	f000 fff1 	bl	8008384 <xTaskResumeAll>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f af7c 	bne.w	80072a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073aa:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <xQueueGenericSend+0x1f8>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	e772      	b.n	80072a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073be:	f000 fc6e 	bl	8007c9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c2:	f000 ffdf 	bl	8008384 <xTaskResumeAll>
 80073c6:	e76c      	b.n	80072a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ca:	f000 fc68 	bl	8007c9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073ce:	f000 ffd9 	bl	8008384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3738      	adds	r7, #56	; 0x38
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	; 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <xQueueGenericSendFromISR+0x3c>
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <xQueueGenericSendFromISR+0x40>
 800741c:	2301      	movs	r3, #1
 800741e:	e000      	b.n	8007422 <xQueueGenericSendFromISR+0x42>
 8007420:	2300      	movs	r3, #0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d103      	bne.n	800744a <xQueueGenericSendFromISR+0x6a>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <xQueueGenericSendFromISR+0x6e>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <xQueueGenericSendFromISR+0x70>
 800744e:	2300      	movs	r3, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800746a:	f002 faa5 	bl	80099b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800746e:	f3ef 8211 	mrs	r2, BASEPRI
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61fa      	str	r2, [r7, #28]
 8007484:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <xQueueGenericSendFromISR+0xbc>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d12f      	bne.n	80074fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074b2:	f000 fb64 	bl	8007b7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074be:	d112      	bne.n	80074e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d016      	beq.n	80074f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 f975 	bl	80087bc <xTaskRemoveFromEventList>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e007      	b.n	80074f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074ea:	3301      	adds	r3, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	b25a      	sxtb	r2, r3
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074f6:	2301      	movs	r3, #1
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80074fa:	e001      	b.n	8007500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007502:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800750a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800750e:	4618      	mov	r0, r3
 8007510:	3740      	adds	r7, #64	; 0x40
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b08e      	sub	sp, #56	; 0x38
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	623b      	str	r3, [r7, #32]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	61fb      	str	r3, [r7, #28]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <xQueueGiveFromISR+0x58>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueGiveFromISR+0x5c>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueGiveFromISR+0x5e>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	61bb      	str	r3, [r7, #24]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800758e:	f002 fa13 	bl	80099b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007592:	f3ef 8211 	mrs	r2, BASEPRI
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	617a      	str	r2, [r7, #20]
 80075a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80075aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d22b      	bcs.n	8007616 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d8:	d112      	bne.n	8007600 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d016      	beq.n	8007610 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f8e8 	bl	80087bc <xTaskRemoveFromEventList>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00e      	beq.n	8007610 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e007      	b.n	8007610 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007604:	3301      	adds	r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	b25a      	sxtb	r2, r3
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007610:	2301      	movs	r3, #1
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	e001      	b.n	800761a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f383 8811 	msr	BASEPRI, r3
}
 8007624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007628:	4618      	mov	r0, r3
 800762a:	3738      	adds	r7, #56	; 0x38
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	; 0x30
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <xQueueReceive+0x30>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	623b      	str	r3, [r7, #32]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <xQueueReceive+0x3e>
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <xQueueReceive+0x42>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <xQueueReceive+0x44>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xQueueReceive+0x5e>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800768e:	f001 fa57 	bl	8008b40 <xTaskGetSchedulerState>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xQueueReceive+0x6e>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <xQueueReceive+0x72>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueReceive+0x74>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueReceive+0x8e>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	61bb      	str	r3, [r7, #24]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076be:	f002 f899 	bl	80097f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01f      	beq.n	800770e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d2:	f000 fabe 	bl	8007c52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	1e5a      	subs	r2, r3, #1
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00f      	beq.n	8007706 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	3310      	adds	r3, #16
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f866 	bl	80087bc <xTaskRemoveFromEventList>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076f6:	4b3d      	ldr	r3, [pc, #244]	; (80077ec <xQueueReceive+0x1bc>)
 80076f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007706:	f002 f8a5 	bl	8009854 <vPortExitCritical>
				return pdPASS;
 800770a:	2301      	movs	r3, #1
 800770c:	e069      	b.n	80077e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007714:	f002 f89e 	bl	8009854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007718:	2300      	movs	r3, #0
 800771a:	e062      	b.n	80077e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007722:	f107 0310 	add.w	r3, r7, #16
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f8ac 	bl	8008884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007730:	f002 f890 	bl	8009854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007734:	f000 fe18 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007738:	f002 f85c 	bl	80097f4 <vPortEnterCritical>
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007742:	b25b      	sxtb	r3, r3
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007748:	d103      	bne.n	8007752 <xQueueReceive+0x122>
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007758:	b25b      	sxtb	r3, r3
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775e:	d103      	bne.n	8007768 <xQueueReceive+0x138>
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007768:	f002 f874 	bl	8009854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800776c:	1d3a      	adds	r2, r7, #4
 800776e:	f107 0310 	add.w	r3, r7, #16
 8007772:	4611      	mov	r1, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f001 f89b 	bl	80088b0 <xTaskCheckForTimeOut>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d123      	bne.n	80077c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007782:	f000 fade 	bl	8007d42 <prvIsQueueEmpty>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d017      	beq.n	80077bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	3324      	adds	r3, #36	; 0x24
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f000 ffc1 	bl	800871c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800779a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800779c:	f000 fa7f 	bl	8007c9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077a0:	f000 fdf0 	bl	8008384 <xTaskResumeAll>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d189      	bne.n	80076be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <xQueueReceive+0x1bc>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	e780      	b.n	80076be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077be:	f000 fa6e 	bl	8007c9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c2:	f000 fddf 	bl	8008384 <xTaskResumeAll>
 80077c6:	e77a      	b.n	80076be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ca:	f000 fa68 	bl	8007c9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ce:	f000 fdd9 	bl	8008384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d4:	f000 fab5 	bl	8007d42 <prvIsQueueEmpty>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f43f af6f 	beq.w	80076be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3730      	adds	r7, #48	; 0x30
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	; 0x38
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007802:	2300      	movs	r3, #0
 8007804:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	623b      	str	r3, [r7, #32]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	61fb      	str	r3, [r7, #28]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007840:	f001 f97e 	bl	8008b40 <xTaskGetSchedulerState>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <xQueueSemaphoreTake+0x60>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <xQueueSemaphoreTake+0x64>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <xQueueSemaphoreTake+0x66>
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	61bb      	str	r3, [r7, #24]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007870:	f001 ffc0 	bl	80097f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	2b00      	cmp	r3, #0
 800787e:	d024      	beq.n	80078ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	1e5a      	subs	r2, r3, #1
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007890:	f001 facc 	bl	8008e2c <pvTaskIncrementMutexHeldCount>
 8007894:	4602      	mov	r2, r0
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	3310      	adds	r3, #16
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 ff88 	bl	80087bc <xTaskRemoveFromEventList>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078b2:	4b54      	ldr	r3, [pc, #336]	; (8007a04 <xQueueSemaphoreTake+0x214>)
 80078b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078c2:	f001 ffc7 	bl	8009854 <vPortExitCritical>
				return pdPASS;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e097      	b.n	80079fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d111      	bne.n	80078f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	617b      	str	r3, [r7, #20]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078ec:	f001 ffb2 	bl	8009854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e082      	b.n	80079fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fa:	f107 030c 	add.w	r3, r7, #12
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 ffc0 	bl	8008884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007904:	2301      	movs	r3, #1
 8007906:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007908:	f001 ffa4 	bl	8009854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800790c:	f000 fd2c 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007910:	f001 ff70 	bl	80097f4 <vPortEnterCritical>
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800791a:	b25b      	sxtb	r3, r3
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007920:	d103      	bne.n	800792a <xQueueSemaphoreTake+0x13a>
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007930:	b25b      	sxtb	r3, r3
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007936:	d103      	bne.n	8007940 <xQueueSemaphoreTake+0x150>
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007940:	f001 ff88 	bl	8009854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007944:	463a      	mov	r2, r7
 8007946:	f107 030c 	add.w	r3, r7, #12
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 ffaf 	bl	80088b0 <xTaskCheckForTimeOut>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d132      	bne.n	80079be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800795a:	f000 f9f2 	bl	8007d42 <prvIsQueueEmpty>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d026      	beq.n	80079b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800796c:	f001 ff42 	bl	80097f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4618      	mov	r0, r3
 8007976:	f001 f901 	bl	8008b7c <xTaskPriorityInherit>
 800797a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800797c:	f001 ff6a 	bl	8009854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	3324      	adds	r3, #36	; 0x24
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fec7 	bl	800871c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800798e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007990:	f000 f985 	bl	8007c9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007994:	f000 fcf6 	bl	8008384 <xTaskResumeAll>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f47f af68 	bne.w	8007870 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80079a0:	4b18      	ldr	r3, [pc, #96]	; (8007a04 <xQueueSemaphoreTake+0x214>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	e75e      	b.n	8007870 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079b4:	f000 f973 	bl	8007c9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b8:	f000 fce4 	bl	8008384 <xTaskResumeAll>
 80079bc:	e758      	b.n	8007870 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079c0:	f000 f96d 	bl	8007c9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079c4:	f000 fcde 	bl	8008384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ca:	f000 f9ba 	bl	8007d42 <prvIsQueueEmpty>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f43f af4d 	beq.w	8007870 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00d      	beq.n	80079f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80079dc:	f001 ff0a 	bl	80097f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079e2:	f000 f8b4 	bl	8007b4e <prvGetDisinheritPriorityAfterTimeout>
 80079e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 f99a 	bl	8008d28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079f4:	f001 ff2e 	bl	8009854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3738      	adds	r7, #56	; 0x38
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	623b      	str	r3, [r7, #32]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <xQueueReceiveFromISR+0x3a>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <xQueueReceiveFromISR+0x3e>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueReceiveFromISR+0x40>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	61fb      	str	r3, [r7, #28]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a62:	f001 ffa9 	bl	80099b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007a66:	f3ef 8211 	mrs	r2, BASEPRI
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	61ba      	str	r2, [r7, #24]
 8007a7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02f      	beq.n	8007aee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9c:	f000 f8d9 	bl	8007c52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	1e5a      	subs	r2, r3, #1
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab0:	d112      	bne.n	8007ad8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	3310      	adds	r3, #16
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fe7c 	bl	80087bc <xTaskRemoveFromEventList>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e007      	b.n	8007ae8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007adc:	3301      	adds	r3, #1
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	b25a      	sxtb	r2, r3
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
 8007aec:	e001      	b.n	8007af2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f383 8811 	msr	BASEPRI, r3
}
 8007afc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3738      	adds	r7, #56	; 0x38
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <vQueueDelete+0x28>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	60bb      	str	r3, [r7, #8]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f95f 	bl	8007df4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f002 f845 	bl	8009bd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d006      	beq.n	8007b6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e001      	b.n	8007b70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b70:	68fb      	ldr	r3, [r7, #12]
	}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10d      	bne.n	8007bb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d14d      	bne.n	8007c40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f84f 	bl	8008c4c <xTaskPriorityDisinherit>
 8007bae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	609a      	str	r2, [r3, #8]
 8007bb6:	e043      	b.n	8007c40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d119      	bne.n	8007bf2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6858      	ldr	r0, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	f006 f88e 	bl	800dcea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	441a      	add	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d32b      	bcc.n	8007c40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	e026      	b.n	8007c40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68d8      	ldr	r0, [r3, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	f006 f874 	bl	800dcea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	425b      	negs	r3, r3
 8007c0c:	441a      	add	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d207      	bcs.n	8007c2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	425b      	negs	r3, r3
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d105      	bne.n	8007c40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c48:	697b      	ldr	r3, [r7, #20]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d018      	beq.n	8007c96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	441a      	add	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d303      	bcc.n	8007c86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68d9      	ldr	r1, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f006 f82a 	bl	800dcea <memcpy>
	}
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ca6:	f001 fda5 	bl	80097f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cb2:	e011      	b.n	8007cd8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d012      	beq.n	8007ce2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3324      	adds	r3, #36	; 0x24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fd7b 	bl	80087bc <xTaskRemoveFromEventList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ccc:	f000 fe52 	bl	8008974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dce9      	bgt.n	8007cb4 <prvUnlockQueue+0x16>
 8007ce0:	e000      	b.n	8007ce4 <prvUnlockQueue+0x46>
					break;
 8007ce2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007cec:	f001 fdb2 	bl	8009854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cf0:	f001 fd80 	bl	80097f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cfa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cfc:	e011      	b.n	8007d22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d012      	beq.n	8007d2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3310      	adds	r3, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fd56 	bl	80087bc <xTaskRemoveFromEventList>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d16:	f000 fe2d 	bl	8008974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dce9      	bgt.n	8007cfe <prvUnlockQueue+0x60>
 8007d2a:	e000      	b.n	8007d2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	22ff      	movs	r2, #255	; 0xff
 8007d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d36:	f001 fd8d 	bl	8009854 <vPortExitCritical>
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d4a:	f001 fd53 	bl	80097f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	e001      	b.n	8007d60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d60:	f001 fd78 	bl	8009854 <vPortExitCritical>

	return xReturn;
 8007d64:	68fb      	ldr	r3, [r7, #12]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d76:	f001 fd3d 	bl	80097f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d102      	bne.n	8007d8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	e001      	b.n	8007d90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d90:	f001 fd60 	bl	8009854 <vPortExitCritical>

	return xReturn;
 8007d94:	68fb      	ldr	r3, [r7, #12]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e014      	b.n	8007dda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007db0:	4a0f      	ldr	r2, [pc, #60]	; (8007df0 <vQueueAddToRegistry+0x50>)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10b      	bne.n	8007dd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dbc:	490c      	ldr	r1, [pc, #48]	; (8007df0 <vQueueAddToRegistry+0x50>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <vQueueAddToRegistry+0x50>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4413      	add	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dd2:	e006      	b.n	8007de2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b07      	cmp	r3, #7
 8007dde:	d9e7      	bls.n	8007db0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20001374 	.word	0x20001374

08007df4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e016      	b.n	8007e30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e02:	4a10      	ldr	r2, [pc, #64]	; (8007e44 <vQueueUnregisterQueue+0x50>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d10b      	bne.n	8007e2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e12:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <vQueueUnregisterQueue+0x50>)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2100      	movs	r1, #0
 8007e18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e1c:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <vQueueUnregisterQueue+0x50>)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	4413      	add	r3, r2
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]
				break;
 8007e28:	e006      	b.n	8007e38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b07      	cmp	r3, #7
 8007e34:	d9e5      	bls.n	8007e02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20001374 	.word	0x20001374

08007e48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e58:	f001 fccc 	bl	80097f4 <vPortEnterCritical>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e68:	d103      	bne.n	8007e72 <vQueueWaitForMessageRestricted+0x2a>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e7e:	d103      	bne.n	8007e88 <vQueueWaitForMessageRestricted+0x40>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e88:	f001 fce4 	bl	8009854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	3324      	adds	r3, #36	; 0x24
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fc61 	bl	8008764 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ea2:	6978      	ldr	r0, [r7, #20]
 8007ea4:	f7ff fefb 	bl	8007c9e <prvUnlockQueue>
	}
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08e      	sub	sp, #56	; 0x38
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61fb      	str	r3, [r7, #28]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ef6:	23a8      	movs	r3, #168	; 0xa8
 8007ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2ba8      	cmp	r3, #168	; 0xa8
 8007efe:	d00a      	beq.n	8007f16 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	61bb      	str	r3, [r7, #24]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d01e      	beq.n	8007f5c <xTaskCreateStatic+0xac>
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01b      	beq.n	8007f5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f36:	2300      	movs	r3, #0
 8007f38:	9303      	str	r3, [sp, #12]
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	9302      	str	r3, [sp, #8]
 8007f3e:	f107 0314 	add.w	r3, r7, #20
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 f850 	bl	8007ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f56:	f000 f8f3 	bl	8008140 <prvAddNewTaskToReadyList>
 8007f5a:	e001      	b.n	8007f60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f60:	697b      	ldr	r3, [r7, #20]
	}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3728      	adds	r7, #40	; 0x28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b08c      	sub	sp, #48	; 0x30
 8007f6e:	af04      	add	r7, sp, #16
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fd5a 	bl	8009a38 <pvPortMalloc>
 8007f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00e      	beq.n	8007faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f8c:	20a8      	movs	r0, #168	; 0xa8
 8007f8e:	f001 fd53 	bl	8009a38 <pvPortMalloc>
 8007f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007fa0:	e005      	b.n	8007fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fa2:	6978      	ldr	r0, [r7, #20]
 8007fa4:	f001 fe14 	bl	8009bd0 <vPortFree>
 8007fa8:	e001      	b.n	8007fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d017      	beq.n	8007fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fbc:	88fa      	ldrh	r2, [r7, #6]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9303      	str	r3, [sp, #12]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f80e 	bl	8007ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd8:	69f8      	ldr	r0, [r7, #28]
 8007fda:	f000 f8b1 	bl	8008140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	e002      	b.n	8007fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fea:	69bb      	ldr	r3, [r7, #24]
	}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	461a      	mov	r2, r3
 800800c:	21a5      	movs	r1, #165	; 0xa5
 800800e:	f005 fd75 	bl	800dafc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800801c:	3b01      	subs	r3, #1
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	617b      	str	r3, [r7, #20]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01f      	beq.n	8008092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	e012      	b.n	800807e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	7819      	ldrb	r1, [r3, #0]
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	3334      	adds	r3, #52	; 0x34
 8008068:	460a      	mov	r2, r1
 800806a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d006      	beq.n	8008086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	3301      	adds	r3, #1
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	2b0f      	cmp	r3, #15
 8008082:	d9e9      	bls.n	8008058 <prvInitialiseNewTask+0x64>
 8008084:	e000      	b.n	8008088 <prvInitialiseNewTask+0x94>
			{
				break;
 8008086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008090:	e003      	b.n	800809a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	2b37      	cmp	r3, #55	; 0x37
 800809e:	d901      	bls.n	80080a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080a0:	2337      	movs	r3, #55	; 0x37
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	2200      	movs	r2, #0
 80080b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fe56 	bl	8006d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	3318      	adds	r3, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fe51 	bl	8006d6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	3354      	adds	r3, #84	; 0x54
 80080f4:	224c      	movs	r2, #76	; 0x4c
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f005 fcff 	bl	800dafc <memset>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	4a0c      	ldr	r2, [pc, #48]	; (8008134 <prvInitialiseNewTask+0x140>)
 8008102:	659a      	str	r2, [r3, #88]	; 0x58
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <prvInitialiseNewTask+0x144>)
 8008108:	65da      	str	r2, [r3, #92]	; 0x5c
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	4a0b      	ldr	r2, [pc, #44]	; (800813c <prvInitialiseNewTask+0x148>)
 800810e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	69b8      	ldr	r0, [r7, #24]
 8008116:	f001 fa3f 	bl	8009598 <pxPortInitialiseStack>
 800811a:	4602      	mov	r2, r0
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812c:	bf00      	nop
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20005618 	.word	0x20005618
 8008138:	20005680 	.word	0x20005680
 800813c:	200056e8 	.word	0x200056e8

08008140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008148:	f001 fb54 	bl	80097f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800814c:	4b2d      	ldr	r3, [pc, #180]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3301      	adds	r3, #1
 8008152:	4a2c      	ldr	r2, [pc, #176]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008156:	4b2c      	ldr	r3, [pc, #176]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800815e:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008164:	4b27      	ldr	r3, [pc, #156]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d110      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800816c:	f000 fc26 	bl	80089bc <prvInitialiseTaskLists>
 8008170:	e00d      	b.n	800818e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008172:	4b26      	ldr	r3, [pc, #152]	; (800820c <prvAddNewTaskToReadyList+0xcc>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800817a:	4b23      	ldr	r3, [pc, #140]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d802      	bhi.n	800818e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008188:	4a1f      	ldr	r2, [pc, #124]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800818e:	4b20      	ldr	r3, [pc, #128]	; (8008210 <prvAddNewTaskToReadyList+0xd0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <prvAddNewTaskToReadyList+0xd0>)
 8008196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008198:	4b1d      	ldr	r3, [pc, #116]	; (8008210 <prvAddNewTaskToReadyList+0xd0>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <prvAddNewTaskToReadyList+0xd4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d903      	bls.n	80081b4 <prvAddNewTaskToReadyList+0x74>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	4a18      	ldr	r2, [pc, #96]	; (8008214 <prvAddNewTaskToReadyList+0xd4>)
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <prvAddNewTaskToReadyList+0xd8>)
 80081c2:	441a      	add	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f7fe fddb 	bl	8006d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081d0:	f001 fb40 	bl	8009854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <prvAddNewTaskToReadyList+0xcc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d207      	bcs.n	80081fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081ea:	4b0c      	ldr	r3, [pc, #48]	; (800821c <prvAddNewTaskToReadyList+0xdc>)
 80081ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20001888 	.word	0x20001888
 8008208:	200013b4 	.word	0x200013b4
 800820c:	20001894 	.word	0x20001894
 8008210:	200018a4 	.word	0x200018a4
 8008214:	20001890 	.word	0x20001890
 8008218:	200013b8 	.word	0x200013b8
 800821c:	e000ed04 	.word	0xe000ed04

08008220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d017      	beq.n	8008262 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <vTaskDelay+0x60>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <vTaskDelay+0x30>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	60bb      	str	r3, [r7, #8]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008250:	f000 f88a 	bl	8008368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fdfc 	bl	8008e54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800825c:	f000 f892 	bl	8008384 <xTaskResumeAll>
 8008260:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d107      	bne.n	8008278 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <vTaskDelay+0x64>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200018b0 	.word	0x200018b0
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	; 0x28
 800828c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008296:	463a      	mov	r2, r7
 8008298:	1d39      	adds	r1, r7, #4
 800829a:	f107 0308 	add.w	r3, r7, #8
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fd10 	bl	8006cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	9202      	str	r2, [sp, #8]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	2300      	movs	r3, #0
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	460a      	mov	r2, r1
 80082b6:	4924      	ldr	r1, [pc, #144]	; (8008348 <vTaskStartScheduler+0xc0>)
 80082b8:	4824      	ldr	r0, [pc, #144]	; (800834c <vTaskStartScheduler+0xc4>)
 80082ba:	f7ff fdf9 	bl	8007eb0 <xTaskCreateStatic>
 80082be:	4603      	mov	r3, r0
 80082c0:	4a23      	ldr	r2, [pc, #140]	; (8008350 <vTaskStartScheduler+0xc8>)
 80082c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082c4:	4b22      	ldr	r3, [pc, #136]	; (8008350 <vTaskStartScheduler+0xc8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e001      	b.n	80082d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d102      	bne.n	80082e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082dc:	f000 fe0e 	bl	8008efc <xTimerCreateTimerTask>
 80082e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d11b      	bne.n	8008320 <vTaskStartScheduler+0x98>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	613b      	str	r3, [r7, #16]
}
 80082fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082fc:	4b15      	ldr	r3, [pc, #84]	; (8008354 <vTaskStartScheduler+0xcc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3354      	adds	r3, #84	; 0x54
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <vTaskStartScheduler+0xd0>)
 8008304:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <vTaskStartScheduler+0xd4>)
 8008308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800830c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800830e:	4b14      	ldr	r3, [pc, #80]	; (8008360 <vTaskStartScheduler+0xd8>)
 8008310:	2201      	movs	r2, #1
 8008312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008314:	4b13      	ldr	r3, [pc, #76]	; (8008364 <vTaskStartScheduler+0xdc>)
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800831a:	f001 f9c9 	bl	80096b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800831e:	e00e      	b.n	800833e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008326:	d10a      	bne.n	800833e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <vTaskStartScheduler+0xb4>
}
 800833e:	bf00      	nop
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	08011450 	.word	0x08011450
 800834c:	0800898d 	.word	0x0800898d
 8008350:	200018ac 	.word	0x200018ac
 8008354:	200013b4 	.word	0x200013b4
 8008358:	200002b0 	.word	0x200002b0
 800835c:	200018a8 	.word	0x200018a8
 8008360:	20001894 	.word	0x20001894
 8008364:	2000188c 	.word	0x2000188c

08008368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <vTaskSuspendAll+0x18>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	4a03      	ldr	r2, [pc, #12]	; (8008380 <vTaskSuspendAll+0x18>)
 8008374:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	200018b0 	.word	0x200018b0

08008384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008392:	4b42      	ldr	r3, [pc, #264]	; (800849c <xTaskResumeAll+0x118>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	603b      	str	r3, [r7, #0]
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083b0:	f001 fa20 	bl	80097f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083b4:	4b39      	ldr	r3, [pc, #228]	; (800849c <xTaskResumeAll+0x118>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	4a38      	ldr	r2, [pc, #224]	; (800849c <xTaskResumeAll+0x118>)
 80083bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083be:	4b37      	ldr	r3, [pc, #220]	; (800849c <xTaskResumeAll+0x118>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d162      	bne.n	800848c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083c6:	4b36      	ldr	r3, [pc, #216]	; (80084a0 <xTaskResumeAll+0x11c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d05e      	beq.n	800848c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083ce:	e02f      	b.n	8008430 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d0:	4b34      	ldr	r3, [pc, #208]	; (80084a4 <xTaskResumeAll+0x120>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3318      	adds	r3, #24
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fd2f 	bl	8006e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd2a 	bl	8006e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f0:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <xTaskResumeAll+0x124>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d903      	bls.n	8008400 <xTaskResumeAll+0x7c>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <xTaskResumeAll+0x124>)
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4a27      	ldr	r2, [pc, #156]	; (80084ac <xTaskResumeAll+0x128>)
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7fe fcb5 	bl	8006d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <xTaskResumeAll+0x12c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	429a      	cmp	r2, r3
 8008428:	d302      	bcc.n	8008430 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800842a:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <xTaskResumeAll+0x130>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008430:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <xTaskResumeAll+0x120>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1cb      	bne.n	80083d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800843e:	f000 fb5f 	bl	8008b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008442:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <xTaskResumeAll+0x134>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d010      	beq.n	8008470 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800844e:	f000 f847 	bl	80084e0 <xTaskIncrementTick>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008458:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <xTaskResumeAll+0x130>)
 800845a:	2201      	movs	r2, #1
 800845c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3b01      	subs	r3, #1
 8008462:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f1      	bne.n	800844e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <xTaskResumeAll+0x134>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <xTaskResumeAll+0x130>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <xTaskResumeAll+0x138>)
 800847e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800848c:	f001 f9e2 	bl	8009854 <vPortExitCritical>

	return xAlreadyYielded;
 8008490:	68bb      	ldr	r3, [r7, #8]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200018b0 	.word	0x200018b0
 80084a0:	20001888 	.word	0x20001888
 80084a4:	20001848 	.word	0x20001848
 80084a8:	20001890 	.word	0x20001890
 80084ac:	200013b8 	.word	0x200013b8
 80084b0:	200013b4 	.word	0x200013b4
 80084b4:	2000189c 	.word	0x2000189c
 80084b8:	20001898 	.word	0x20001898
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <xTaskGetTickCount+0x1c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084cc:	687b      	ldr	r3, [r7, #4]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	2000188c 	.word	0x2000188c

080084e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ea:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <xTaskIncrementTick+0x148>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 808f 	bne.w	8008612 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084f4:	4b4d      	ldr	r3, [pc, #308]	; (800862c <xTaskIncrementTick+0x14c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084fc:	4a4b      	ldr	r2, [pc, #300]	; (800862c <xTaskIncrementTick+0x14c>)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d120      	bne.n	800854a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008508:	4b49      	ldr	r3, [pc, #292]	; (8008630 <xTaskIncrementTick+0x150>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <xTaskIncrementTick+0x48>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	603b      	str	r3, [r7, #0]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xTaskIncrementTick+0x46>
 8008528:	4b41      	ldr	r3, [pc, #260]	; (8008630 <xTaskIncrementTick+0x150>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4b41      	ldr	r3, [pc, #260]	; (8008634 <xTaskIncrementTick+0x154>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a3f      	ldr	r2, [pc, #252]	; (8008630 <xTaskIncrementTick+0x150>)
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	4a3f      	ldr	r2, [pc, #252]	; (8008634 <xTaskIncrementTick+0x154>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	4b3e      	ldr	r3, [pc, #248]	; (8008638 <xTaskIncrementTick+0x158>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a3d      	ldr	r2, [pc, #244]	; (8008638 <xTaskIncrementTick+0x158>)
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	f000 fadb 	bl	8008b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800854a:	4b3c      	ldr	r3, [pc, #240]	; (800863c <xTaskIncrementTick+0x15c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	429a      	cmp	r2, r3
 8008552:	d349      	bcc.n	80085e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008554:	4b36      	ldr	r3, [pc, #216]	; (8008630 <xTaskIncrementTick+0x150>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	4b37      	ldr	r3, [pc, #220]	; (800863c <xTaskIncrementTick+0x15c>)
 8008560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008564:	601a      	str	r2, [r3, #0]
					break;
 8008566:	e03f      	b.n	80085e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008568:	4b31      	ldr	r3, [pc, #196]	; (8008630 <xTaskIncrementTick+0x150>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d203      	bcs.n	8008588 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008580:	4a2e      	ldr	r2, [pc, #184]	; (800863c <xTaskIncrementTick+0x15c>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008586:	e02f      	b.n	80085e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fc57 	bl	8006e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3318      	adds	r3, #24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fc4e 	bl	8006e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <xTaskIncrementTick+0x160>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <xTaskIncrementTick+0xd8>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	4a22      	ldr	r2, [pc, #136]	; (8008640 <xTaskIncrementTick+0x160>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <xTaskIncrementTick+0x164>)
 80085c6:	441a      	add	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe fbd9 	bl	8006d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d8:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <xTaskIncrementTick+0x168>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3b8      	bcc.n	8008554 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e6:	e7b5      	b.n	8008554 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085e8:	4b17      	ldr	r3, [pc, #92]	; (8008648 <xTaskIncrementTick+0x168>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ee:	4915      	ldr	r1, [pc, #84]	; (8008644 <xTaskIncrementTick+0x164>)
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	440b      	add	r3, r1
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d901      	bls.n	8008604 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008604:	4b11      	ldr	r3, [pc, #68]	; (800864c <xTaskIncrementTick+0x16c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e004      	b.n	800861c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <xTaskIncrementTick+0x170>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	4a0d      	ldr	r2, [pc, #52]	; (8008650 <xTaskIncrementTick+0x170>)
 800861a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800861c:	697b      	ldr	r3, [r7, #20]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200018b0 	.word	0x200018b0
 800862c:	2000188c 	.word	0x2000188c
 8008630:	20001840 	.word	0x20001840
 8008634:	20001844 	.word	0x20001844
 8008638:	200018a0 	.word	0x200018a0
 800863c:	200018a8 	.word	0x200018a8
 8008640:	20001890 	.word	0x20001890
 8008644:	200013b8 	.word	0x200013b8
 8008648:	200013b4 	.word	0x200013b4
 800864c:	2000189c 	.word	0x2000189c
 8008650:	20001898 	.word	0x20001898

08008654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800865a:	4b2a      	ldr	r3, [pc, #168]	; (8008704 <vTaskSwitchContext+0xb0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008662:	4b29      	ldr	r3, [pc, #164]	; (8008708 <vTaskSwitchContext+0xb4>)
 8008664:	2201      	movs	r2, #1
 8008666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008668:	e046      	b.n	80086f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800866a:	4b27      	ldr	r3, [pc, #156]	; (8008708 <vTaskSwitchContext+0xb4>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008670:	4b26      	ldr	r3, [pc, #152]	; (800870c <vTaskSwitchContext+0xb8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	e010      	b.n	800869a <vTaskSwitchContext+0x46>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <vTaskSwitchContext+0x40>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <vTaskSwitchContext+0x3e>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3b01      	subs	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	491d      	ldr	r1, [pc, #116]	; (8008710 <vTaskSwitchContext+0xbc>)
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0e4      	beq.n	8008678 <vTaskSwitchContext+0x24>
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4a15      	ldr	r2, [pc, #84]	; (8008710 <vTaskSwitchContext+0xbc>)
 80086ba:	4413      	add	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3308      	adds	r3, #8
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d104      	bne.n	80086de <vTaskSwitchContext+0x8a>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <vTaskSwitchContext+0xc0>)
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	4a08      	ldr	r2, [pc, #32]	; (800870c <vTaskSwitchContext+0xb8>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <vTaskSwitchContext+0xc0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3354      	adds	r3, #84	; 0x54
 80086f4:	4a08      	ldr	r2, [pc, #32]	; (8008718 <vTaskSwitchContext+0xc4>)
 80086f6:	6013      	str	r3, [r2, #0]
}
 80086f8:	bf00      	nop
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	200018b0 	.word	0x200018b0
 8008708:	2000189c 	.word	0x2000189c
 800870c:	20001890 	.word	0x20001890
 8008710:	200013b8 	.word	0x200013b8
 8008714:	200013b4 	.word	0x200013b4
 8008718:	200002b0 	.word	0x200002b0

0800871c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60fb      	str	r3, [r7, #12]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008742:	4b07      	ldr	r3, [pc, #28]	; (8008760 <vTaskPlaceOnEventList+0x44>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3318      	adds	r3, #24
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fe fb3f 	bl	8006dce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008750:	2101      	movs	r1, #1
 8008752:	6838      	ldr	r0, [r7, #0]
 8008754:	f000 fb7e 	bl	8008e54 <prvAddCurrentTaskToDelayedList>
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	200013b4 	.word	0x200013b4

08008764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617b      	str	r3, [r7, #20]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800878c:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3318      	adds	r3, #24
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7fe faf6 	bl	8006d86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f000 fb53 	bl	8008e54 <prvAddCurrentTaskToDelayedList>
	}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	200013b4 	.word	0x200013b4

080087bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3318      	adds	r3, #24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fb27 	bl	8006e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f2:	4b1e      	ldr	r3, [pc, #120]	; (800886c <xTaskRemoveFromEventList+0xb0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d11d      	bne.n	8008836 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fb1e 	bl	8006e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <xTaskRemoveFromEventList+0xb4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d903      	bls.n	8008818 <xTaskRemoveFromEventList+0x5c>
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	4a16      	ldr	r2, [pc, #88]	; (8008870 <xTaskRemoveFromEventList+0xb4>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4a13      	ldr	r2, [pc, #76]	; (8008874 <xTaskRemoveFromEventList+0xb8>)
 8008826:	441a      	add	r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe faa9 	bl	8006d86 <vListInsertEnd>
 8008834:	e005      	b.n	8008842 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3318      	adds	r3, #24
 800883a:	4619      	mov	r1, r3
 800883c:	480e      	ldr	r0, [pc, #56]	; (8008878 <xTaskRemoveFromEventList+0xbc>)
 800883e:	f7fe faa2 	bl	8006d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	4b0d      	ldr	r3, [pc, #52]	; (800887c <xTaskRemoveFromEventList+0xc0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	429a      	cmp	r2, r3
 800884e:	d905      	bls.n	800885c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <xTaskRemoveFromEventList+0xc4>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e001      	b.n	8008860 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008860:	697b      	ldr	r3, [r7, #20]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200018b0 	.word	0x200018b0
 8008870:	20001890 	.word	0x20001890
 8008874:	200013b8 	.word	0x200013b8
 8008878:	20001848 	.word	0x20001848
 800887c:	200013b4 	.word	0x200013b4
 8008880:	2000189c 	.word	0x2000189c

08008884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <vTaskInternalSetTimeOutState+0x24>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <vTaskInternalSetTimeOutState+0x28>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	605a      	str	r2, [r3, #4]
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	200018a0 	.word	0x200018a0
 80088ac:	2000188c 	.word	0x2000188c

080088b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	613b      	str	r3, [r7, #16]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60fb      	str	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80088f2:	f000 ff7f 	bl	80097f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088f6:	4b1d      	ldr	r3, [pc, #116]	; (800896c <xTaskCheckForTimeOut+0xbc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800890e:	d102      	bne.n	8008916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	e023      	b.n	800895e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b15      	ldr	r3, [pc, #84]	; (8008970 <xTaskCheckForTimeOut+0xc0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d007      	beq.n	8008932 <xTaskCheckForTimeOut+0x82>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	429a      	cmp	r2, r3
 800892a:	d302      	bcc.n	8008932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800892c:	2301      	movs	r3, #1
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e015      	b.n	800895e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	429a      	cmp	r2, r3
 800893a:	d20b      	bcs.n	8008954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	1ad2      	subs	r2, r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ff9b 	bl	8008884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	e004      	b.n	800895e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800895a:	2301      	movs	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800895e:	f000 ff79 	bl	8009854 <vPortExitCritical>

	return xReturn;
 8008962:	69fb      	ldr	r3, [r7, #28]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3720      	adds	r7, #32
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	2000188c 	.word	0x2000188c
 8008970:	200018a0 	.word	0x200018a0

08008974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008978:	4b03      	ldr	r3, [pc, #12]	; (8008988 <vTaskMissedYield+0x14>)
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]
}
 800897e:	bf00      	nop
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	2000189c 	.word	0x2000189c

0800898c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008994:	f000 f852 	bl	8008a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <prvIdleTask+0x28>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d9f9      	bls.n	8008994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <prvIdleTask+0x2c>)
 80089a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089b0:	e7f0      	b.n	8008994 <prvIdleTask+0x8>
 80089b2:	bf00      	nop
 80089b4:	200013b8 	.word	0x200013b8
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	e00c      	b.n	80089e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a12      	ldr	r2, [pc, #72]	; (8008a1c <prvInitialiseTaskLists+0x60>)
 80089d4:	4413      	add	r3, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f9a8 	bl	8006d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3301      	adds	r3, #1
 80089e0:	607b      	str	r3, [r7, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b37      	cmp	r3, #55	; 0x37
 80089e6:	d9ef      	bls.n	80089c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089e8:	480d      	ldr	r0, [pc, #52]	; (8008a20 <prvInitialiseTaskLists+0x64>)
 80089ea:	f7fe f99f 	bl	8006d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ee:	480d      	ldr	r0, [pc, #52]	; (8008a24 <prvInitialiseTaskLists+0x68>)
 80089f0:	f7fe f99c 	bl	8006d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089f4:	480c      	ldr	r0, [pc, #48]	; (8008a28 <prvInitialiseTaskLists+0x6c>)
 80089f6:	f7fe f999 	bl	8006d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089fa:	480c      	ldr	r0, [pc, #48]	; (8008a2c <prvInitialiseTaskLists+0x70>)
 80089fc:	f7fe f996 	bl	8006d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a00:	480b      	ldr	r0, [pc, #44]	; (8008a30 <prvInitialiseTaskLists+0x74>)
 8008a02:	f7fe f993 	bl	8006d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a06:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <prvInitialiseTaskLists+0x78>)
 8008a08:	4a05      	ldr	r2, [pc, #20]	; (8008a20 <prvInitialiseTaskLists+0x64>)
 8008a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <prvInitialiseTaskLists+0x7c>)
 8008a0e:	4a05      	ldr	r2, [pc, #20]	; (8008a24 <prvInitialiseTaskLists+0x68>)
 8008a10:	601a      	str	r2, [r3, #0]
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200013b8 	.word	0x200013b8
 8008a20:	20001818 	.word	0x20001818
 8008a24:	2000182c 	.word	0x2000182c
 8008a28:	20001848 	.word	0x20001848
 8008a2c:	2000185c 	.word	0x2000185c
 8008a30:	20001874 	.word	0x20001874
 8008a34:	20001840 	.word	0x20001840
 8008a38:	20001844 	.word	0x20001844

08008a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a42:	e019      	b.n	8008a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a44:	f000 fed6 	bl	80097f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <prvCheckTasksWaitingTermination+0x50>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f9f3 	bl	8006e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <prvCheckTasksWaitingTermination+0x54>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4a0b      	ldr	r2, [pc, #44]	; (8008a90 <prvCheckTasksWaitingTermination+0x54>)
 8008a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <prvCheckTasksWaitingTermination+0x58>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <prvCheckTasksWaitingTermination+0x58>)
 8008a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a6e:	f000 fef1 	bl	8009854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f810 	bl	8008a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <prvCheckTasksWaitingTermination+0x58>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e1      	bne.n	8008a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000185c 	.word	0x2000185c
 8008a90:	20001888 	.word	0x20001888
 8008a94:	20001870 	.word	0x20001870

08008a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3354      	adds	r3, #84	; 0x54
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f005 f857 	bl	800db58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d108      	bne.n	8008ac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 f889 	bl	8009bd0 <vPortFree>
				vPortFree( pxTCB );
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 f886 	bl	8009bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ac4:	e018      	b.n	8008af8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d103      	bne.n	8008ad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 f87d 	bl	8009bd0 <vPortFree>
	}
 8008ad6:	e00f      	b.n	8008af8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d00a      	beq.n	8008af8 <prvDeleteTCB+0x60>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <prvDeleteTCB+0x5e>
	}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <prvResetNextTaskUnblockTime+0x38>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <prvResetNextTaskUnblockTime+0x3c>)
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b18:	e008      	b.n	8008b2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <prvResetNextTaskUnblockTime+0x38>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a04      	ldr	r2, [pc, #16]	; (8008b3c <prvResetNextTaskUnblockTime+0x3c>)
 8008b2a:	6013      	str	r3, [r2, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	20001840 	.word	0x20001840
 8008b3c:	200018a8 	.word	0x200018a8

08008b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <xTaskGetSchedulerState+0x34>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	e008      	b.n	8008b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b54:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <xTaskGetSchedulerState+0x38>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	607b      	str	r3, [r7, #4]
 8008b60:	e001      	b.n	8008b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b62:	2300      	movs	r3, #0
 8008b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b66:	687b      	ldr	r3, [r7, #4]
	}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	20001894 	.word	0x20001894
 8008b78:	200018b0 	.word	0x200018b0

08008b7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d051      	beq.n	8008c36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4b2a      	ldr	r3, [pc, #168]	; (8008c40 <xTaskPriorityInherit+0xc4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d241      	bcs.n	8008c24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	db06      	blt.n	8008bb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba8:	4b25      	ldr	r3, [pc, #148]	; (8008c40 <xTaskPriorityInherit+0xc4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	6959      	ldr	r1, [r3, #20]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <xTaskPriorityInherit+0xc8>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	4299      	cmp	r1, r3
 8008bcc:	d122      	bne.n	8008c14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe f934 	bl	8006e40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bd8:	4b19      	ldr	r3, [pc, #100]	; (8008c40 <xTaskPriorityInherit+0xc4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <xTaskPriorityInherit+0xcc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d903      	bls.n	8008bf6 <xTaskPriorityInherit+0x7a>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <xTaskPriorityInherit+0xcc>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <xTaskPriorityInherit+0xc8>)
 8008c04:	441a      	add	r2, r3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fe f8ba 	bl	8006d86 <vListInsertEnd>
 8008c12:	e004      	b.n	8008c1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c14:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <xTaskPriorityInherit+0xc4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e008      	b.n	8008c36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <xTaskPriorityInherit+0xc4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d201      	bcs.n	8008c36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c32:	2301      	movs	r3, #1
 8008c34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c36:	68fb      	ldr	r3, [r7, #12]
	}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	200013b4 	.word	0x200013b4
 8008c44:	200013b8 	.word	0x200013b8
 8008c48:	20001890 	.word	0x20001890

08008c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d056      	beq.n	8008d10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c62:	4b2e      	ldr	r3, [pc, #184]	; (8008d1c <xTaskPriorityDisinherit+0xd0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d00a      	beq.n	8008c82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	1e5a      	subs	r2, r3, #1
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d02c      	beq.n	8008d10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d128      	bne.n	8008d10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f8bc 	bl	8006e40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <xTaskPriorityDisinherit+0xd4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d903      	bls.n	8008cf0 <xTaskPriorityDisinherit+0xa4>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4a0c      	ldr	r2, [pc, #48]	; (8008d20 <xTaskPriorityDisinherit+0xd4>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <xTaskPriorityDisinherit+0xd8>)
 8008cfe:	441a      	add	r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fe f83d 	bl	8006d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d10:	697b      	ldr	r3, [r7, #20]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200013b4 	.word	0x200013b4
 8008d20:	20001890 	.word	0x20001890
 8008d24:	200013b8 	.word	0x200013b8

08008d28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d06a      	beq.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10a      	bne.n	8008d5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	60fb      	str	r3, [r7, #12]
}
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d902      	bls.n	8008d6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	e002      	b.n	8008d74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d04b      	beq.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d146      	bne.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d88:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d10a      	bne.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	60bb      	str	r3, [r7, #8]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db04      	blt.n	8008dc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	6959      	ldr	r1, [r3, #20]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	d11c      	bne.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe f82d 	bl	8006e40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dea:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	4a0c      	ldr	r2, [pc, #48]	; (8008e28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fd ffb8 	bl	8006d86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e16:	bf00      	nop
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	200013b4 	.word	0x200013b4
 8008e24:	200013b8 	.word	0x200013b8
 8008e28:	20001890 	.word	0x20001890

08008e2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e3e:	3201      	adds	r2, #1
 8008e40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e42:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e44:	681b      	ldr	r3, [r3, #0]
	}
 8008e46:	4618      	mov	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	200013b4 	.word	0x200013b4

08008e54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e5e:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e64:	4b20      	ldr	r3, [pc, #128]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fd ffe8 	bl	8006e40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e76:	d10a      	bne.n	8008e8e <prvAddCurrentTaskToDelayedList+0x3a>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4619      	mov	r1, r3
 8008e86:	4819      	ldr	r0, [pc, #100]	; (8008eec <prvAddCurrentTaskToDelayedList+0x98>)
 8008e88:	f7fd ff7d 	bl	8006d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e8c:	e026      	b.n	8008edc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4413      	add	r3, r2
 8008e94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d209      	bcs.n	8008eba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fd ff8b 	bl	8006dce <vListInsert>
}
 8008eb8:	e010      	b.n	8008edc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eba:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f7fd ff81 	bl	8006dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d202      	bcs.n	8008edc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ed6:	4a08      	ldr	r2, [pc, #32]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	2000188c 	.word	0x2000188c
 8008ee8:	200013b4 	.word	0x200013b4
 8008eec:	20001874 	.word	0x20001874
 8008ef0:	20001844 	.word	0x20001844
 8008ef4:	20001840 	.word	0x20001840
 8008ef8:	200018a8 	.word	0x200018a8

08008efc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f06:	f000 fb07 	bl	8009518 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f0a:	4b1c      	ldr	r3, [pc, #112]	; (8008f7c <xTimerCreateTimerTask+0x80>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d021      	beq.n	8008f56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f1a:	1d3a      	adds	r2, r7, #4
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fd fee7 	bl	8006cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	9202      	str	r2, [sp, #8]
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	2302      	movs	r3, #2
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	460a      	mov	r2, r1
 8008f3c:	4910      	ldr	r1, [pc, #64]	; (8008f80 <xTimerCreateTimerTask+0x84>)
 8008f3e:	4811      	ldr	r0, [pc, #68]	; (8008f84 <xTimerCreateTimerTask+0x88>)
 8008f40:	f7fe ffb6 	bl	8007eb0 <xTaskCreateStatic>
 8008f44:	4603      	mov	r3, r0
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <xTimerCreateTimerTask+0x8c>)
 8008f48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <xTimerCreateTimerTask+0x8c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f52:	2301      	movs	r3, #1
 8008f54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	613b      	str	r3, [r7, #16]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f72:	697b      	ldr	r3, [r7, #20]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200018e4 	.word	0x200018e4
 8008f80:	08011458 	.word	0x08011458
 8008f84:	080090c1 	.word	0x080090c1
 8008f88:	200018e8 	.word	0x200018e8

08008f8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	; 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xTimerGenericCommand+0x2e>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	623b      	str	r3, [r7, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fba:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <xTimerGenericCommand+0x98>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d02a      	beq.n	8009018 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b05      	cmp	r3, #5
 8008fd2:	dc18      	bgt.n	8009006 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fd4:	f7ff fdb4 	bl	8008b40 <xTaskGetSchedulerState>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d109      	bne.n	8008ff2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fde:	4b11      	ldr	r3, [pc, #68]	; (8009024 <xTimerGenericCommand+0x98>)
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f107 0110 	add.w	r1, r7, #16
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fea:	f7fe f8fb 	bl	80071e4 <xQueueGenericSend>
 8008fee:	6278      	str	r0, [r7, #36]	; 0x24
 8008ff0:	e012      	b.n	8009018 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <xTimerGenericCommand+0x98>)
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	f107 0110 	add.w	r1, r7, #16
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f7fe f8f1 	bl	80071e4 <xQueueGenericSend>
 8009002:	6278      	str	r0, [r7, #36]	; 0x24
 8009004:	e008      	b.n	8009018 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <xTimerGenericCommand+0x98>)
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	f107 0110 	add.w	r1, r7, #16
 800900e:	2300      	movs	r3, #0
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	f7fe f9e5 	bl	80073e0 <xQueueGenericSendFromISR>
 8009016:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800901a:	4618      	mov	r0, r3
 800901c:	3728      	adds	r7, #40	; 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	200018e4 	.word	0x200018e4

08009028 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af02      	add	r7, sp, #8
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009032:	4b22      	ldr	r3, [pc, #136]	; (80090bc <prvProcessExpiredTimer+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd fefd 	bl	8006e40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d022      	beq.n	800909a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	699a      	ldr	r2, [r3, #24]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	18d1      	adds	r1, r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	6978      	ldr	r0, [r7, #20]
 8009062:	f000 f8d1 	bl	8009208 <prvInsertTimerInActiveList>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01f      	beq.n	80090ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	2100      	movs	r1, #0
 8009076:	6978      	ldr	r0, [r7, #20]
 8009078:	f7ff ff88 	bl	8008f8c <xTimerGenericCommand>
 800907c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d113      	bne.n	80090ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	60fb      	str	r3, [r7, #12]
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	f023 0301 	bic.w	r3, r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	6978      	ldr	r0, [r7, #20]
 80090b2:	4798      	blx	r3
}
 80090b4:	bf00      	nop
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	200018dc 	.word	0x200018dc

080090c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c8:	f107 0308 	add.w	r3, r7, #8
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f857 	bl	8009180 <prvGetNextExpireTime>
 80090d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4619      	mov	r1, r3
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f803 	bl	80090e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090de:	f000 f8d5 	bl	800928c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e2:	e7f1      	b.n	80090c8 <prvTimerTask+0x8>

080090e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090ee:	f7ff f93b 	bl	8008368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090f2:	f107 0308 	add.w	r3, r7, #8
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f866 	bl	80091c8 <prvSampleTimeNow>
 80090fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d130      	bne.n	8009166 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <prvProcessTimerOrBlockTask+0x3c>
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	d806      	bhi.n	8009120 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009112:	f7ff f937 	bl	8008384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ff85 	bl	8009028 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800911e:	e024      	b.n	800916a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009126:	4b13      	ldr	r3, [pc, #76]	; (8009174 <prvProcessTimerOrBlockTask+0x90>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <prvProcessTimerOrBlockTask+0x50>
 8009130:	2301      	movs	r3, #1
 8009132:	e000      	b.n	8009136 <prvProcessTimerOrBlockTask+0x52>
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <prvProcessTimerOrBlockTask+0x94>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4619      	mov	r1, r3
 8009146:	f7fe fe7f 	bl	8007e48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800914a:	f7ff f91b 	bl	8008384 <xTaskResumeAll>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <prvProcessTimerOrBlockTask+0x98>)
 8009156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	f3bf 8f6f 	isb	sy
}
 8009164:	e001      	b.n	800916a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009166:	f7ff f90d 	bl	8008384 <xTaskResumeAll>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200018e0 	.word	0x200018e0
 8009178:	200018e4 	.word	0x200018e4
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <prvGetNextExpireTime+0x44>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <prvGetNextExpireTime+0x16>
 8009192:	2201      	movs	r2, #1
 8009194:	e000      	b.n	8009198 <prvGetNextExpireTime+0x18>
 8009196:	2200      	movs	r2, #0
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a4:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <prvGetNextExpireTime+0x44>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	e001      	b.n	80091b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	200018dc 	.word	0x200018dc

080091c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091d0:	f7ff f976 	bl	80084c0 <xTaskGetTickCount>
 80091d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <prvSampleTimeNow+0x3c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d205      	bcs.n	80091ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091e0:	f000 f936 	bl	8009450 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e002      	b.n	80091f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvSampleTimeNow+0x3c>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	200018ec 	.word	0x200018ec

08009208 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d812      	bhi.n	8009254 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e01b      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <prvInsertTimerInActiveList+0x7c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3304      	adds	r3, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f7fd fdbe 	bl	8006dce <vListInsert>
 8009252:	e012      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d206      	bcs.n	800926a <prvInsertTimerInActiveList+0x62>
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d302      	bcc.n	800926a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e007      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <prvInsertTimerInActiveList+0x80>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fd fdaa 	bl	8006dce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200018e0 	.word	0x200018e0
 8009288:	200018dc 	.word	0x200018dc

0800928c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08e      	sub	sp, #56	; 0x38
 8009290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009292:	e0ca      	b.n	800942a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	da18      	bge.n	80092cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	3304      	adds	r3, #4
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	61fb      	str	r3, [r7, #28]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c2:	6850      	ldr	r0, [r2, #4]
 80092c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c6:	6892      	ldr	r2, [r2, #8]
 80092c8:	4611      	mov	r1, r2
 80092ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f2c0 80ab 	blt.w	800942a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	3304      	adds	r3, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd fdab 	bl	8006e40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ea:	463b      	mov	r3, r7
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff ff6b 	bl	80091c8 <prvSampleTimeNow>
 80092f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	f200 8096 	bhi.w	8009428 <prvProcessReceivedCommands+0x19c>
 80092fc:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <prvProcessReceivedCommands+0x78>)
 80092fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009302:	bf00      	nop
 8009304:	0800932d 	.word	0x0800932d
 8009308:	0800932d 	.word	0x0800932d
 800930c:	0800932d 	.word	0x0800932d
 8009310:	080093a1 	.word	0x080093a1
 8009314:	080093b5 	.word	0x080093b5
 8009318:	080093ff 	.word	0x080093ff
 800931c:	0800932d 	.word	0x0800932d
 8009320:	0800932d 	.word	0x0800932d
 8009324:	080093a1 	.word	0x080093a1
 8009328:	080093b5 	.word	0x080093b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	b2da      	uxtb	r2, r3
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	18d1      	adds	r1, r2, r3
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934c:	f7ff ff5c 	bl	8009208 <prvInsertTimerInActiveList>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d069      	beq.n	800942a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05e      	beq.n	800942a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	441a      	add	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	2300      	movs	r3, #0
 800937a:	2100      	movs	r1, #0
 800937c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800937e:	f7ff fe05 	bl	8008f8c <xTimerGenericCommand>
 8009382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d14f      	bne.n	800942a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	61bb      	str	r3, [r7, #24]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093b2:	e03a      	b.n	800942a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	617b      	str	r3, [r7, #20]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	699a      	ldr	r2, [r3, #24]
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	18d1      	adds	r1, r2, r3
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f8:	f7ff ff06 	bl	8009208 <prvInsertTimerInActiveList>
					break;
 80093fc:	e015      	b.n	800942a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d103      	bne.n	8009414 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800940c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800940e:	f000 fbdf 	bl	8009bd0 <vPortFree>
 8009412:	e00a      	b.n	800942a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800941a:	f023 0301 	bic.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009426:	e000      	b.n	800942a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009428:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800942a:	4b08      	ldr	r3, [pc, #32]	; (800944c <prvProcessReceivedCommands+0x1c0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1d39      	adds	r1, r7, #4
 8009430:	2200      	movs	r2, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe f8fc 	bl	8007630 <xQueueReceive>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	f47f af2a 	bne.w	8009294 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	3730      	adds	r7, #48	; 0x30
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200018e4 	.word	0x200018e4

08009450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009456:	e048      	b.n	80094ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009458:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <prvSwitchTimerLists+0xc0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009462:	4b2b      	ldr	r3, [pc, #172]	; (8009510 <prvSwitchTimerLists+0xc0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3304      	adds	r3, #4
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd fce5 	bl	8006e40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d02e      	beq.n	80094ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4413      	add	r3, r2
 8009494:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	429a      	cmp	r2, r3
 800949c:	d90e      	bls.n	80094bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094aa:	4b19      	ldr	r3, [pc, #100]	; (8009510 <prvSwitchTimerLists+0xc0>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f7fd fc8a 	bl	8006dce <vListInsert>
 80094ba:	e016      	b.n	80094ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094bc:	2300      	movs	r3, #0
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2300      	movs	r3, #0
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fd60 	bl	8008f8c <xTimerGenericCommand>
 80094cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	603b      	str	r3, [r7, #0]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ea:	4b09      	ldr	r3, [pc, #36]	; (8009510 <prvSwitchTimerLists+0xc0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1b1      	bne.n	8009458 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <prvSwitchTimerLists+0xc0>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094fa:	4b06      	ldr	r3, [pc, #24]	; (8009514 <prvSwitchTimerLists+0xc4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a04      	ldr	r2, [pc, #16]	; (8009510 <prvSwitchTimerLists+0xc0>)
 8009500:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009502:	4a04      	ldr	r2, [pc, #16]	; (8009514 <prvSwitchTimerLists+0xc4>)
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	6013      	str	r3, [r2, #0]
}
 8009508:	bf00      	nop
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200018dc 	.word	0x200018dc
 8009514:	200018e0 	.word	0x200018e0

08009518 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800951e:	f000 f969 	bl	80097f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <prvCheckForValidListAndQueue+0x60>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d120      	bne.n	800956c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800952a:	4814      	ldr	r0, [pc, #80]	; (800957c <prvCheckForValidListAndQueue+0x64>)
 800952c:	f7fd fbfe 	bl	8006d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009530:	4813      	ldr	r0, [pc, #76]	; (8009580 <prvCheckForValidListAndQueue+0x68>)
 8009532:	f7fd fbfb 	bl	8006d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009536:	4b13      	ldr	r3, [pc, #76]	; (8009584 <prvCheckForValidListAndQueue+0x6c>)
 8009538:	4a10      	ldr	r2, [pc, #64]	; (800957c <prvCheckForValidListAndQueue+0x64>)
 800953a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800953c:	4b12      	ldr	r3, [pc, #72]	; (8009588 <prvCheckForValidListAndQueue+0x70>)
 800953e:	4a10      	ldr	r2, [pc, #64]	; (8009580 <prvCheckForValidListAndQueue+0x68>)
 8009540:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009542:	2300      	movs	r3, #0
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <prvCheckForValidListAndQueue+0x74>)
 8009548:	4a11      	ldr	r2, [pc, #68]	; (8009590 <prvCheckForValidListAndQueue+0x78>)
 800954a:	2110      	movs	r1, #16
 800954c:	200a      	movs	r0, #10
 800954e:	f7fd fd09 	bl	8006f64 <xQueueGenericCreateStatic>
 8009552:	4603      	mov	r3, r0
 8009554:	4a08      	ldr	r2, [pc, #32]	; (8009578 <prvCheckForValidListAndQueue+0x60>)
 8009556:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009558:	4b07      	ldr	r3, [pc, #28]	; (8009578 <prvCheckForValidListAndQueue+0x60>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <prvCheckForValidListAndQueue+0x60>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	490b      	ldr	r1, [pc, #44]	; (8009594 <prvCheckForValidListAndQueue+0x7c>)
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fc1a 	bl	8007da0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800956c:	f000 f972 	bl	8009854 <vPortExitCritical>
}
 8009570:	bf00      	nop
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	200018e4 	.word	0x200018e4
 800957c:	200018b4 	.word	0x200018b4
 8009580:	200018c8 	.word	0x200018c8
 8009584:	200018dc 	.word	0x200018dc
 8009588:	200018e0 	.word	0x200018e0
 800958c:	20001990 	.word	0x20001990
 8009590:	200018f0 	.word	0x200018f0
 8009594:	08011460 	.word	0x08011460

08009598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3b04      	subs	r3, #4
 80095a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3b04      	subs	r3, #4
 80095b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f023 0201 	bic.w	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3b04      	subs	r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095c8:	4a0c      	ldr	r2, [pc, #48]	; (80095fc <pxPortInitialiseStack+0x64>)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3b14      	subs	r3, #20
 80095d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3b04      	subs	r3, #4
 80095de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f06f 0202 	mvn.w	r2, #2
 80095e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3b20      	subs	r3, #32
 80095ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095ee:	68fb      	ldr	r3, [r7, #12]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	08009601 	.word	0x08009601

08009600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800960a:	4b12      	ldr	r3, [pc, #72]	; (8009654 <prvTaskExitError+0x54>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009612:	d00a      	beq.n	800962a <prvTaskExitError+0x2a>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60fb      	str	r3, [r7, #12]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <prvTaskExitError+0x28>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	60bb      	str	r3, [r7, #8]
}
 800963c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800963e:	bf00      	nop
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0fc      	beq.n	8009640 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	200000dc 	.word	0x200000dc
	...

08009660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009660:	4b07      	ldr	r3, [pc, #28]	; (8009680 <pxCurrentTCBConst2>)
 8009662:	6819      	ldr	r1, [r3, #0]
 8009664:	6808      	ldr	r0, [r1, #0]
 8009666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966a:	f380 8809 	msr	PSP, r0
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f380 8811 	msr	BASEPRI, r0
 800967a:	4770      	bx	lr
 800967c:	f3af 8000 	nop.w

08009680 <pxCurrentTCBConst2>:
 8009680:	200013b4 	.word	0x200013b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop

08009688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <prvPortStartFirstTask+0x24>)
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	6800      	ldr	r0, [r0, #0]
 800968e:	f380 8808 	msr	MSP, r0
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f380 8814 	msr	CONTROL, r0
 800969a:	b662      	cpsie	i
 800969c:	b661      	cpsie	f
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	df00      	svc	0
 80096a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096aa:	bf00      	nop
 80096ac:	e000ed08 	.word	0xe000ed08

080096b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096b6:	4b46      	ldr	r3, [pc, #280]	; (80097d0 <xPortStartScheduler+0x120>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a46      	ldr	r2, [pc, #280]	; (80097d4 <xPortStartScheduler+0x124>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d10a      	bne.n	80096d6 <xPortStartScheduler+0x26>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	613b      	str	r3, [r7, #16]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096d6:	4b3e      	ldr	r3, [pc, #248]	; (80097d0 <xPortStartScheduler+0x120>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a3f      	ldr	r2, [pc, #252]	; (80097d8 <xPortStartScheduler+0x128>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d10a      	bne.n	80096f6 <xPortStartScheduler+0x46>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	60fb      	str	r3, [r7, #12]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096f6:	4b39      	ldr	r3, [pc, #228]	; (80097dc <xPortStartScheduler+0x12c>)
 80096f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	22ff      	movs	r2, #255	; 0xff
 8009706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009718:	b2da      	uxtb	r2, r3
 800971a:	4b31      	ldr	r3, [pc, #196]	; (80097e0 <xPortStartScheduler+0x130>)
 800971c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800971e:	4b31      	ldr	r3, [pc, #196]	; (80097e4 <xPortStartScheduler+0x134>)
 8009720:	2207      	movs	r2, #7
 8009722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009724:	e009      	b.n	800973a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009726:	4b2f      	ldr	r3, [pc, #188]	; (80097e4 <xPortStartScheduler+0x134>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3b01      	subs	r3, #1
 800972c:	4a2d      	ldr	r2, [pc, #180]	; (80097e4 <xPortStartScheduler+0x134>)
 800972e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	b2db      	uxtb	r3, r3
 8009738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009742:	2b80      	cmp	r3, #128	; 0x80
 8009744:	d0ef      	beq.n	8009726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009746:	4b27      	ldr	r3, [pc, #156]	; (80097e4 <xPortStartScheduler+0x134>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f1c3 0307 	rsb	r3, r3, #7
 800974e:	2b04      	cmp	r3, #4
 8009750:	d00a      	beq.n	8009768 <xPortStartScheduler+0xb8>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	60bb      	str	r3, [r7, #8]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009768:	4b1e      	ldr	r3, [pc, #120]	; (80097e4 <xPortStartScheduler+0x134>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <xPortStartScheduler+0x134>)
 8009770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <xPortStartScheduler+0x134>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800977a:	4a1a      	ldr	r2, [pc, #104]	; (80097e4 <xPortStartScheduler+0x134>)
 800977c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	b2da      	uxtb	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009786:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <xPortStartScheduler+0x138>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a17      	ldr	r2, [pc, #92]	; (80097e8 <xPortStartScheduler+0x138>)
 800978c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009792:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <xPortStartScheduler+0x138>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a14      	ldr	r2, [pc, #80]	; (80097e8 <xPortStartScheduler+0x138>)
 8009798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800979c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800979e:	f000 f8dd 	bl	800995c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097a2:	4b12      	ldr	r3, [pc, #72]	; (80097ec <xPortStartScheduler+0x13c>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097a8:	f000 f8fc 	bl	80099a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097ac:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <xPortStartScheduler+0x140>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0f      	ldr	r2, [pc, #60]	; (80097f0 <xPortStartScheduler+0x140>)
 80097b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097b8:	f7ff ff66 	bl	8009688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097bc:	f7fe ff4a 	bl	8008654 <vTaskSwitchContext>
	prvTaskExitError();
 80097c0:	f7ff ff1e 	bl	8009600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	e000ed00 	.word	0xe000ed00
 80097d4:	410fc271 	.word	0x410fc271
 80097d8:	410fc270 	.word	0x410fc270
 80097dc:	e000e400 	.word	0xe000e400
 80097e0:	200019e0 	.word	0x200019e0
 80097e4:	200019e4 	.word	0x200019e4
 80097e8:	e000ed20 	.word	0xe000ed20
 80097ec:	200000dc 	.word	0x200000dc
 80097f0:	e000ef34 	.word	0xe000ef34

080097f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	607b      	str	r3, [r7, #4]
}
 800980c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <vPortEnterCritical+0x58>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	4a0d      	ldr	r2, [pc, #52]	; (800984c <vPortEnterCritical+0x58>)
 8009816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <vPortEnterCritical+0x58>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d10f      	bne.n	8009840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <vPortEnterCritical+0x5c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <vPortEnterCritical+0x4c>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	603b      	str	r3, [r7, #0]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <vPortEnterCritical+0x4a>
	}
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	200000dc 	.word	0x200000dc
 8009850:	e000ed04 	.word	0xe000ed04

08009854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <vPortExitCritical+0x50>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <vPortExitCritical+0x24>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	607b      	str	r3, [r7, #4]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <vPortExitCritical+0x50>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3b01      	subs	r3, #1
 800987e:	4a09      	ldr	r2, [pc, #36]	; (80098a4 <vPortExitCritical+0x50>)
 8009880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009882:	4b08      	ldr	r3, [pc, #32]	; (80098a4 <vPortExitCritical+0x50>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d105      	bne.n	8009896 <vPortExitCritical+0x42>
 800988a:	2300      	movs	r3, #0
 800988c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f383 8811 	msr	BASEPRI, r3
}
 8009894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200000dc 	.word	0x200000dc
	...

080098b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098b0:	f3ef 8009 	mrs	r0, PSP
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4b15      	ldr	r3, [pc, #84]	; (8009910 <pxCurrentTCBConst>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	f01e 0f10 	tst.w	lr, #16
 80098c0:	bf08      	it	eq
 80098c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	6010      	str	r0, [r2, #0]
 80098cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098d4:	f380 8811 	msr	BASEPRI, r0
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f7fe feb8 	bl	8008654 <vTaskSwitchContext>
 80098e4:	f04f 0000 	mov.w	r0, #0
 80098e8:	f380 8811 	msr	BASEPRI, r0
 80098ec:	bc09      	pop	{r0, r3}
 80098ee:	6819      	ldr	r1, [r3, #0]
 80098f0:	6808      	ldr	r0, [r1, #0]
 80098f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f6:	f01e 0f10 	tst.w	lr, #16
 80098fa:	bf08      	it	eq
 80098fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009900:	f380 8809 	msr	PSP, r0
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w

08009910 <pxCurrentTCBConst>:
 8009910:	200013b4 	.word	0x200013b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop

08009918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	607b      	str	r3, [r7, #4]
}
 8009930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009932:	f7fe fdd5 	bl	80084e0 <xTaskIncrementTick>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800993c:	4b06      	ldr	r3, [pc, #24]	; (8009958 <xPortSysTickHandler+0x40>)
 800993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	2300      	movs	r3, #0
 8009946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	f383 8811 	msr	BASEPRI, r3
}
 800994e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009960:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortSetupTimerInterrupt+0x34>)
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009966:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <vPortSetupTimerInterrupt+0x38>)
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <vPortSetupTimerInterrupt+0x3c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a0a      	ldr	r2, [pc, #40]	; (800999c <vPortSetupTimerInterrupt+0x40>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	099b      	lsrs	r3, r3, #6
 8009978:	4a09      	ldr	r2, [pc, #36]	; (80099a0 <vPortSetupTimerInterrupt+0x44>)
 800997a:	3b01      	subs	r3, #1
 800997c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800997e:	4b04      	ldr	r3, [pc, #16]	; (8009990 <vPortSetupTimerInterrupt+0x34>)
 8009980:	2207      	movs	r2, #7
 8009982:	601a      	str	r2, [r3, #0]
}
 8009984:	bf00      	nop
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	e000e010 	.word	0xe000e010
 8009994:	e000e018 	.word	0xe000e018
 8009998:	200000d0 	.word	0x200000d0
 800999c:	10624dd3 	.word	0x10624dd3
 80099a0:	e000e014 	.word	0xe000e014

080099a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099b4 <vPortEnableVFP+0x10>
 80099a8:	6801      	ldr	r1, [r0, #0]
 80099aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ae:	6001      	str	r1, [r0, #0]
 80099b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099b2:	bf00      	nop
 80099b4:	e000ed88 	.word	0xe000ed88

080099b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099be:	f3ef 8305 	mrs	r3, IPSR
 80099c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b0f      	cmp	r3, #15
 80099c8:	d914      	bls.n	80099f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ca:	4a17      	ldr	r2, [pc, #92]	; (8009a28 <vPortValidateInterruptPriority+0x70>)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099d4:	4b15      	ldr	r3, [pc, #84]	; (8009a2c <vPortValidateInterruptPriority+0x74>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	7afa      	ldrb	r2, [r7, #11]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d20a      	bcs.n	80099f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099f4:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <vPortValidateInterruptPriority+0x78>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099fc:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <vPortValidateInterruptPriority+0x7c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d90a      	bls.n	8009a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	603b      	str	r3, [r7, #0]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <vPortValidateInterruptPriority+0x60>
	}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	e000e3f0 	.word	0xe000e3f0
 8009a2c:	200019e0 	.word	0x200019e0
 8009a30:	e000ed0c 	.word	0xe000ed0c
 8009a34:	200019e4 	.word	0x200019e4

08009a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a44:	f7fe fc90 	bl	8008368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a48:	4b5b      	ldr	r3, [pc, #364]	; (8009bb8 <pvPortMalloc+0x180>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a50:	f000 f920 	bl	8009c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a54:	4b59      	ldr	r3, [pc, #356]	; (8009bbc <pvPortMalloc+0x184>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 8093 	bne.w	8009b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01d      	beq.n	8009aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a68:	2208      	movs	r2, #8
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d014      	beq.n	8009aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f023 0307 	bic.w	r3, r3, #7
 8009a80:	3308      	adds	r3, #8
 8009a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	617b      	str	r3, [r7, #20]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d06e      	beq.n	8009b88 <pvPortMalloc+0x150>
 8009aaa:	4b45      	ldr	r3, [pc, #276]	; (8009bc0 <pvPortMalloc+0x188>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d869      	bhi.n	8009b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ab4:	4b43      	ldr	r3, [pc, #268]	; (8009bc4 <pvPortMalloc+0x18c>)
 8009ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ab8:	4b42      	ldr	r3, [pc, #264]	; (8009bc4 <pvPortMalloc+0x18c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009abe:	e004      	b.n	8009aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d903      	bls.n	8009adc <pvPortMalloc+0xa4>
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1f1      	bne.n	8009ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009adc:	4b36      	ldr	r3, [pc, #216]	; (8009bb8 <pvPortMalloc+0x180>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d050      	beq.n	8009b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2208      	movs	r2, #8
 8009aec:	4413      	add	r3, r2
 8009aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	2308      	movs	r3, #8
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d91f      	bls.n	8009b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <pvPortMalloc+0xf8>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	613b      	str	r3, [r7, #16]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b42:	69b8      	ldr	r0, [r7, #24]
 8009b44:	f000 f908 	bl	8009d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b48:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <pvPortMalloc+0x188>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	4a1b      	ldr	r2, [pc, #108]	; (8009bc0 <pvPortMalloc+0x188>)
 8009b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b56:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <pvPortMalloc+0x188>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <pvPortMalloc+0x190>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d203      	bcs.n	8009b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b62:	4b17      	ldr	r3, [pc, #92]	; (8009bc0 <pvPortMalloc+0x188>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <pvPortMalloc+0x190>)
 8009b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	4b13      	ldr	r3, [pc, #76]	; (8009bbc <pvPortMalloc+0x184>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	431a      	orrs	r2, r3
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <pvPortMalloc+0x194>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	4a11      	ldr	r2, [pc, #68]	; (8009bcc <pvPortMalloc+0x194>)
 8009b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b88:	f7fe fbfc 	bl	8008384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <pvPortMalloc+0x174>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60fb      	str	r3, [r7, #12]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <pvPortMalloc+0x172>
	return pvReturn;
 8009bac:	69fb      	ldr	r3, [r7, #28]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3728      	adds	r7, #40	; 0x28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200055f0 	.word	0x200055f0
 8009bbc:	20005604 	.word	0x20005604
 8009bc0:	200055f4 	.word	0x200055f4
 8009bc4:	200055e8 	.word	0x200055e8
 8009bc8:	200055f8 	.word	0x200055f8
 8009bcc:	200055fc 	.word	0x200055fc

08009bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d04d      	beq.n	8009c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009be2:	2308      	movs	r3, #8
 8009be4:	425b      	negs	r3, r3
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4413      	add	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <vPortFree+0xb8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <vPortFree+0x44>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60fb      	str	r3, [r7, #12]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <vPortFree+0x62>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60bb      	str	r3, [r7, #8]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <vPortFree+0xb8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01e      	beq.n	8009c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d11a      	bne.n	8009c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <vPortFree+0xb8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c58:	f7fe fb86 	bl	8008368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <vPortFree+0xbc>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4413      	add	r3, r2
 8009c66:	4a09      	ldr	r2, [pc, #36]	; (8009c8c <vPortFree+0xbc>)
 8009c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c6a:	6938      	ldr	r0, [r7, #16]
 8009c6c:	f000 f874 	bl	8009d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <vPortFree+0xc0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a06      	ldr	r2, [pc, #24]	; (8009c90 <vPortFree+0xc0>)
 8009c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c7a:	f7fe fb83 	bl	8008384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20005604 	.word	0x20005604
 8009c8c:	200055f4 	.word	0x200055f4
 8009c90:	20005600 	.word	0x20005600

08009c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ca0:	4b27      	ldr	r3, [pc, #156]	; (8009d40 <prvHeapInit+0xac>)
 8009ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00c      	beq.n	8009cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3307      	adds	r3, #7
 8009cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	4a1f      	ldr	r2, [pc, #124]	; (8009d40 <prvHeapInit+0xac>)
 8009cc4:	4413      	add	r3, r2
 8009cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ccc:	4a1d      	ldr	r2, [pc, #116]	; (8009d44 <prvHeapInit+0xb0>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cd2:	4b1c      	ldr	r3, [pc, #112]	; (8009d44 <prvHeapInit+0xb0>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0307 	bic.w	r3, r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <prvHeapInit+0xb4>)
 8009cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <prvHeapInit+0xb4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cfe:	4b12      	ldr	r3, [pc, #72]	; (8009d48 <prvHeapInit+0xb4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d14:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <prvHeapInit+0xb4>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <prvHeapInit+0xb8>)
 8009d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <prvHeapInit+0xbc>)
 8009d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <prvHeapInit+0xc0>)
 8009d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d32:	601a      	str	r2, [r3, #0]
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	200019e8 	.word	0x200019e8
 8009d44:	200055e8 	.word	0x200055e8
 8009d48:	200055f0 	.word	0x200055f0
 8009d4c:	200055f8 	.word	0x200055f8
 8009d50:	200055f4 	.word	0x200055f4
 8009d54:	20005604 	.word	0x20005604

08009d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d60:	4b28      	ldr	r3, [pc, #160]	; (8009e04 <prvInsertBlockIntoFreeList+0xac>)
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e002      	b.n	8009d6c <prvInsertBlockIntoFreeList+0x14>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d8f7      	bhi.n	8009d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4413      	add	r3, r2
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d108      	bne.n	8009d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	441a      	add	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	441a      	add	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d118      	bne.n	8009de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4b15      	ldr	r3, [pc, #84]	; (8009e08 <prvInsertBlockIntoFreeList+0xb0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d00d      	beq.n	8009dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	e008      	b.n	8009de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dd6:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e003      	b.n	8009de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d002      	beq.n	8009df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	200055e8 	.word	0x200055e8
 8009e08:	200055f0 	.word	0x200055f0

08009e0c <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 f8c6 	bl	800afa6 <cJSON_IsNumber>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d103      	bne.n	8009e28 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <cJSON_GetNumberValue+0x34>)
 8009e26:	e002      	b.n	8009e2e <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8009e2e:	ec43 2b17 	vmov	d7, r2, r3
 8009e32:	eeb0 0a47 	vmov.f32	s0, s14
 8009e36:	eef0 0a67 	vmov.f32	s1, s15
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	7ff80000 	.word	0x7ff80000

08009e44 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <case_insensitive_strcmp+0x16>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e056      	b.n	8009f0c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d10d      	bne.n	8009e82 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e050      	b.n	8009f0c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e04a      	b.n	8009f0c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	603b      	str	r3, [r7, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	73fb      	strb	r3, [r7, #15]
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	4a22      	ldr	r2, [pc, #136]	; (8009f18 <case_insensitive_strcmp+0xd4>)
 8009e8e:	4413      	add	r3, r2
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d103      	bne.n	8009ea2 <case_insensitive_strcmp+0x5e>
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	f103 0220 	add.w	r2, r3, #32
 8009ea0:	e000      	b.n	8009ea4 <case_insensitive_strcmp+0x60>
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	73bb      	strb	r3, [r7, #14]
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	3301      	adds	r3, #1
 8009eae:	491a      	ldr	r1, [pc, #104]	; (8009f18 <case_insensitive_strcmp+0xd4>)
 8009eb0:	440b      	add	r3, r1
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f003 0303 	and.w	r3, r3, #3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d102      	bne.n	8009ec2 <case_insensitive_strcmp+0x7e>
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	3320      	adds	r3, #32
 8009ec0:	e000      	b.n	8009ec4 <case_insensitive_strcmp+0x80>
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d0d0      	beq.n	8009e6a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	737b      	strb	r3, [r7, #13]
 8009ece:	7b7b      	ldrb	r3, [r7, #13]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4a11      	ldr	r2, [pc, #68]	; (8009f18 <case_insensitive_strcmp+0xd4>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d103      	bne.n	8009ee8 <case_insensitive_strcmp+0xa4>
 8009ee0:	7b7b      	ldrb	r3, [r7, #13]
 8009ee2:	f103 0220 	add.w	r2, r3, #32
 8009ee6:	e000      	b.n	8009eea <case_insensitive_strcmp+0xa6>
 8009ee8:	7b7a      	ldrb	r2, [r7, #13]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	733b      	strb	r3, [r7, #12]
 8009ef0:	7b3b      	ldrb	r3, [r7, #12]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4908      	ldr	r1, [pc, #32]	; (8009f18 <case_insensitive_strcmp+0xd4>)
 8009ef6:	440b      	add	r3, r1
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d102      	bne.n	8009f08 <case_insensitive_strcmp+0xc4>
 8009f02:	7b3b      	ldrb	r3, [r7, #12]
 8009f04:	3320      	adds	r3, #32
 8009f06:	e000      	b.n	8009f0a <case_insensitive_strcmp+0xc6>
 8009f08:	7b3b      	ldrb	r3, [r7, #12]
 8009f0a:	1ad3      	subs	r3, r2, r3
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	080115c0 	.word	0x080115c0

08009f1c <cJSON_InitHooks>:

    return copy;
}

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f2c:	4a1a      	ldr	r2, [pc, #104]	; (8009f98 <cJSON_InitHooks+0x7c>)
 8009f2e:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 8009f30:	4b18      	ldr	r3, [pc, #96]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f32:	4a1a      	ldr	r2, [pc, #104]	; (8009f9c <cJSON_InitHooks+0x80>)
 8009f34:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 8009f36:	4b17      	ldr	r3, [pc, #92]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f38:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <cJSON_InitHooks+0x84>)
 8009f3a:	609a      	str	r2, [r3, #8]
        return;
 8009f3c:	e025      	b.n	8009f8a <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 8009f3e:	4b15      	ldr	r3, [pc, #84]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f40:	4a15      	ldr	r2, [pc, #84]	; (8009f98 <cJSON_InitHooks+0x7c>)
 8009f42:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f52:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f56:	4a11      	ldr	r2, [pc, #68]	; (8009f9c <cJSON_InitHooks+0x80>)
 8009f58:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	4a0b      	ldr	r2, [pc, #44]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f68:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 8009f70:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a08      	ldr	r2, [pc, #32]	; (8009f98 <cJSON_InitHooks+0x7c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d107      	bne.n	8009f8a <cJSON_InitHooks+0x6e>
 8009f7a:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	4a07      	ldr	r2, [pc, #28]	; (8009f9c <cJSON_InitHooks+0x80>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d102      	bne.n	8009f8a <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 8009f84:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <cJSON_InitHooks+0x78>)
 8009f86:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <cJSON_InitHooks+0x84>)
 8009f88:	609a      	str	r2, [r3, #8]
    }
}
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	200000e0 	.word	0x200000e0
 8009f98:	0800c009 	.word	0x0800c009
 8009f9c:	0800c019 	.word	0x0800c019
 8009fa0:	0800c181 	.word	0x0800c181

08009fa4 <cJSON_New_Item>:

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2028      	movs	r0, #40	; 0x28
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
    if (node)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8009fbc:	2228      	movs	r2, #40	; 0x28
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f003 fd9b 	bl	800dafc <memset>
    }

    return node;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8009fdc:	e037      	b.n	800a04e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d108      	bne.n	800a002 <cJSON_Delete+0x32>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff ffe7 	bl	8009fd0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <cJSON_Delete+0x52>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <cJSON_Delete+0x90>)
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6912      	ldr	r2, [r2, #16]
 800a01e:	4610      	mov	r0, r2
 800a020:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <cJSON_Delete+0x72>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800a036:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <cJSON_Delete+0x90>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6a12      	ldr	r2, [r2, #32]
 800a03e:	4610      	mov	r0, r2
 800a040:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800a042:	4b07      	ldr	r3, [pc, #28]	; (800a060 <cJSON_Delete+0x90>)
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
        item = next;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1c4      	bne.n	8009fde <cJSON_Delete+0xe>
    }
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200000e0 	.word	0x200000e0

0800a064 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800a064:	b480      	push	{r7}
 800a066:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800a068:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	0000      	movs	r0, r0
	...

0800a078 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b098      	sub	sp, #96	; 0x60
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
    double number = 0;
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800a092:	f7ff ffe7 	bl	800a064 <get_decimal_point>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <parse_number+0x36>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <parse_number+0x3a>
    {
        return false;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e0a0      	b.n	800a1f4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0b6:	e03d      	b.n	800a134 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	6899      	ldr	r1, [r3, #8]
 800a0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0c2:	440b      	add	r3, r1
 800a0c4:	4413      	add	r3, r2
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b45      	cmp	r3, #69	; 0x45
 800a0ca:	dc17      	bgt.n	800a0fc <parse_number+0x84>
 800a0cc:	2b2b      	cmp	r3, #43	; 0x2b
 800a0ce:	db40      	blt.n	800a152 <parse_number+0xda>
 800a0d0:	3b2b      	subs	r3, #43	; 0x2b
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	409a      	lsls	r2, r3
 800a0d6:	4b4c      	ldr	r3, [pc, #304]	; (800a208 <parse_number+0x190>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bf14      	ite	ne
 800a0de:	2301      	movne	r3, #1
 800a0e0:	2300      	moveq	r3, #0
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <parse_number+0x88>
 800a0e8:	f002 0308 	and.w	r3, r2, #8
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bf14      	ite	ne
 800a0f0:	2301      	movne	r3, #1
 800a0f2:	2300      	moveq	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d111      	bne.n	800a11e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800a0fa:	e02a      	b.n	800a152 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800a0fc:	2b65      	cmp	r3, #101	; 0x65
 800a0fe:	d128      	bne.n	800a152 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	6899      	ldr	r1, [r3, #8]
 800a108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a10a:	440b      	add	r3, r1
 800a10c:	4413      	add	r3, r2
 800a10e:	7819      	ldrb	r1, [r3, #0]
 800a110:	f107 0208 	add.w	r2, r7, #8
 800a114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a116:	4413      	add	r3, r2
 800a118:	460a      	mov	r2, r1
 800a11a:	701a      	strb	r2, [r3, #0]
                break;
 800a11c:	e007      	b.n	800a12e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800a11e:	f107 0208 	add.w	r2, r7, #8
 800a122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a124:	4413      	add	r3, r2
 800a126:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a12a:	701a      	strb	r2, [r3, #0]
                break;
 800a12c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a12e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a130:	3301      	adds	r3, #1
 800a132:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a136:	2b3e      	cmp	r3, #62	; 0x3e
 800a138:	d80d      	bhi.n	800a156 <parse_number+0xde>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00a      	beq.n	800a156 <parse_number+0xde>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a146:	441a      	add	r2, r3
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d3b3      	bcc.n	800a0b8 <parse_number+0x40>
        }
    }
loop_end:
 800a150:	e001      	b.n	800a156 <parse_number+0xde>
                goto loop_end;
 800a152:	bf00      	nop
 800a154:	e000      	b.n	800a158 <parse_number+0xe0>
loop_end:
 800a156:	bf00      	nop
    number_c_string[i] = '\0';
 800a158:	f107 0208 	add.w	r2, r7, #8
 800a15c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a15e:	4413      	add	r3, r2
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800a164:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f002 fe4a 	bl	800ce08 <strtod>
 800a174:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800a178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a17a:	f107 0308 	add.w	r3, r7, #8
 800a17e:	429a      	cmp	r2, r3
 800a180:	d101      	bne.n	800a186 <parse_number+0x10e>
    {
        return false; /* parse_error */
 800a182:	2300      	movs	r3, #0
 800a184:	e036      	b.n	800a1f4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a18c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800a190:	a31b      	add	r3, pc, #108	; (adr r3, 800a200 <parse_number+0x188>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a19a:	f7f6 fccb 	bl	8000b34 <__aeabi_dcmpge>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a1aa:	615a      	str	r2, [r3, #20]
 800a1ac:	e015      	b.n	800a1da <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	4b16      	ldr	r3, [pc, #88]	; (800a20c <parse_number+0x194>)
 800a1b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a1b8:	f7f6 fcb2 	bl	8000b20 <__aeabi_dcmple>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1c8:	615a      	str	r2, [r3, #20]
 800a1ca:	e006      	b.n	800a1da <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800a1cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a1d0:	f7f6 fcda 	bl	8000b88 <__aeabi_d2iz>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2208      	movs	r2, #8
 800a1de:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1e6:	f107 0208 	add.w	r2, r7, #8
 800a1ea:	1a8a      	subs	r2, r1, r2
 800a1ec:	441a      	add	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	609a      	str	r2, [r3, #8]
    return true;
 800a1f2:	2301      	movs	r3, #1
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3760      	adds	r7, #96	; 0x60
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	f3af 8000 	nop.w
 800a200:	ffc00000 	.word	0xffc00000
 800a204:	41dfffff 	.word	0x41dfffff
 800a208:	04007fe5 	.word	0x04007fe5
 800a20c:	c1e00000 	.word	0xc1e00000

0800a210 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800a220:	2300      	movs	r3, #0
 800a222:	60bb      	str	r3, [r7, #8]
 800a224:	e04c      	b.n	800a2c0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4413      	add	r3, r2
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b2f      	cmp	r3, #47	; 0x2f
 800a230:	d90f      	bls.n	800a252 <parse_hex4+0x42>
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b39      	cmp	r3, #57	; 0x39
 800a23c:	d809      	bhi.n	800a252 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4413      	add	r3, r2
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	3b30      	subs	r3, #48	; 0x30
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e02d      	b.n	800a2ae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	4413      	add	r3, r2
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b40      	cmp	r3, #64	; 0x40
 800a25c:	d90f      	bls.n	800a27e <parse_hex4+0x6e>
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b46      	cmp	r3, #70	; 0x46
 800a268:	d809      	bhi.n	800a27e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4413      	add	r3, r2
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	3b37      	subs	r3, #55	; 0x37
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e017      	b.n	800a2ae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4413      	add	r3, r2
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b60      	cmp	r3, #96	; 0x60
 800a288:	d90f      	bls.n	800a2aa <parse_hex4+0x9a>
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4413      	add	r3, r2
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b66      	cmp	r3, #102	; 0x66
 800a294:	d809      	bhi.n	800a2aa <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	4413      	add	r3, r2
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3b57      	subs	r3, #87	; 0x57
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e001      	b.n	800a2ae <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e00c      	b.n	800a2c8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d802      	bhi.n	800a2ba <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	60bb      	str	r3, [r7, #8]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d9af      	bls.n	800a226 <parse_hex4+0x16>
        }
    }

    return h;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	f340 80b7 	ble.w	800a47e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	3302      	adds	r3, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff ff7b 	bl	800a210 <parse_hex4>
 800a31a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a322:	d304      	bcc.n	800a32e <utf16_literal_to_utf8+0x5a>
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800a32a:	f0c0 80aa 	bcc.w	800a482 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800a334:	d337      	bcc.n	800a3a6 <utf16_literal_to_utf8+0xd2>
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a33c:	d233      	bcs.n	800a3a6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	3306      	adds	r3, #6
 800a342:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800a348:	230c      	movs	r3, #12
 800a34a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b05      	cmp	r3, #5
 800a356:	f340 8096 	ble.w	800a486 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b5c      	cmp	r3, #92	; 0x5c
 800a360:	f040 8093 	bne.w	800a48a <utf16_literal_to_utf8+0x1b6>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	3301      	adds	r3, #1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b75      	cmp	r3, #117	; 0x75
 800a36c:	f040 808d 	bne.w	800a48a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3302      	adds	r3, #2
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ff4b 	bl	800a210 <parse_hex4>
 800a37a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a382:	f0c0 8084 	bcc.w	800a48e <utf16_literal_to_utf8+0x1ba>
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800a38c:	d27f      	bcs.n	800a48e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	029a      	lsls	r2, r3, #10
 800a392:	4b43      	ldr	r3, [pc, #268]	; (800a4a0 <utf16_literal_to_utf8+0x1cc>)
 800a394:	4013      	ands	r3, r2
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800a3a4:	e004      	b.n	800a3b0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800a3a6:	2306      	movs	r3, #6
 800a3a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a3b4:	d803      	bhi.n	800a3be <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3bc:	e01f      	b.n	800a3fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3c4:	d206      	bcs.n	800a3d4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800a3cc:	23c0      	movs	r3, #192	; 0xc0
 800a3ce:	f887 3020 	strb.w	r3, [r7, #32]
 800a3d2:	e014      	b.n	800a3fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3da:	d206      	bcs.n	800a3ea <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800a3e2:	23e0      	movs	r3, #224	; 0xe0
 800a3e4:	f887 3020 	strb.w	r3, [r7, #32]
 800a3e8:	e009      	b.n	800a3fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800a3f0:	d24f      	bcs.n	800a492 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800a3f8:	23f0      	movs	r3, #240	; 0xf0
 800a3fa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a3fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a402:	3b01      	subs	r3, #1
 800a404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a408:	e015      	b.n	800a436 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a412:	b2da      	uxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6819      	ldr	r1, [r3, #0]
 800a418:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a41c:	440b      	add	r3, r1
 800a41e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	099b      	lsrs	r3, r3, #6
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a42c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a430:	3b01      	subs	r3, #1
 800a432:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a436:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e5      	bne.n	800a40a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800a43e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a442:	2b01      	cmp	r3, #1
 800a444:	d909      	bls.n	800a45a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	b2d9      	uxtb	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a452:	430a      	orrs	r2, r1
 800a454:	b2d2      	uxtb	r2, r2
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e007      	b.n	800a46a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a472:	441a      	add	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800a478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a47c:	e00b      	b.n	800a496 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800a47e:	bf00      	nop
 800a480:	e008      	b.n	800a494 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a482:	bf00      	nop
 800a484:	e006      	b.n	800a494 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a486:	bf00      	nop
 800a488:	e004      	b.n	800a494 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a48a:	bf00      	nop
 800a48c:	e002      	b.n	800a494 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a48e:	bf00      	nop
 800a490:	e000      	b.n	800a494 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a492:	bf00      	nop

fail:
    return 0;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3728      	adds	r7, #40	; 0x28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	000ffc00 	.word	0x000ffc00

0800a4a4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08a      	sub	sp, #40	; 0x28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4413      	add	r3, r2
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4413      	add	r3, r2
 800a4c8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	4413      	add	r3, r2
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b22      	cmp	r3, #34	; 0x22
 800a4e0:	f040 8103 	bne.w	800a6ea <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a4ec:	e017      	b.n	800a51e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b5c      	cmp	r3, #92	; 0x5c
 800a4f4:	d110      	bne.n	800a518 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	461a      	mov	r2, r3
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	429a      	cmp	r2, r3
 800a508:	f080 80f1 	bcs.w	800a6ee <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	3301      	adds	r3, #1
 800a510:	61bb      	str	r3, [r7, #24]
                input_end++;
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	3301      	adds	r3, #1
 800a516:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	3301      	adds	r3, #1
 800a51c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6a3a      	ldr	r2, [r7, #32]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	461a      	mov	r2, r3
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d203      	bcs.n	800a538 <parse_string+0x94>
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b22      	cmp	r3, #34	; 0x22
 800a536:	d1da      	bne.n	800a4ee <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6a3a      	ldr	r2, [r7, #32]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	461a      	mov	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	429a      	cmp	r2, r3
 800a548:	f080 80d3 	bcs.w	800a6f2 <parse_string+0x24e>
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b22      	cmp	r3, #34	; 0x22
 800a552:	f040 80ce 	bne.w	800a6f2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	4413      	add	r3, r2
 800a560:	6a3a      	ldr	r2, [r7, #32]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	461a      	mov	r2, r3
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	3201      	adds	r2, #1
 800a574:	4610      	mov	r0, r2
 800a576:	4798      	blx	r3
 800a578:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80ba 	beq.w	800a6f6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800a586:	e094      	b.n	800a6b2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b5c      	cmp	r3, #92	; 0x5c
 800a58e:	d008      	beq.n	800a5a2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	1c53      	adds	r3, r2, #1
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1c59      	adds	r1, r3, #1
 800a59a:	60f9      	str	r1, [r7, #12]
 800a59c:	7812      	ldrb	r2, [r2, #0]
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	e087      	b.n	800a6b2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800a5a6:	6a3a      	ldr	r2, [r7, #32]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f340 80a4 	ble.w	800a6fa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b75      	cmp	r3, #117	; 0x75
 800a5ba:	f300 80a0 	bgt.w	800a6fe <parse_string+0x25a>
 800a5be:	2b5c      	cmp	r3, #92	; 0x5c
 800a5c0:	da04      	bge.n	800a5cc <parse_string+0x128>
 800a5c2:	2b22      	cmp	r3, #34	; 0x22
 800a5c4:	d05c      	beq.n	800a680 <parse_string+0x1dc>
 800a5c6:	2b2f      	cmp	r3, #47	; 0x2f
 800a5c8:	d05a      	beq.n	800a680 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800a5ca:	e098      	b.n	800a6fe <parse_string+0x25a>
            switch (input_pointer[1])
 800a5cc:	3b5c      	subs	r3, #92	; 0x5c
 800a5ce:	2b19      	cmp	r3, #25
 800a5d0:	f200 8095 	bhi.w	800a6fe <parse_string+0x25a>
 800a5d4:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <parse_string+0x138>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a681 	.word	0x0800a681
 800a5e0:	0800a6ff 	.word	0x0800a6ff
 800a5e4:	0800a6ff 	.word	0x0800a6ff
 800a5e8:	0800a6ff 	.word	0x0800a6ff
 800a5ec:	0800a6ff 	.word	0x0800a6ff
 800a5f0:	0800a6ff 	.word	0x0800a6ff
 800a5f4:	0800a645 	.word	0x0800a645
 800a5f8:	0800a6ff 	.word	0x0800a6ff
 800a5fc:	0800a6ff 	.word	0x0800a6ff
 800a600:	0800a6ff 	.word	0x0800a6ff
 800a604:	0800a651 	.word	0x0800a651
 800a608:	0800a6ff 	.word	0x0800a6ff
 800a60c:	0800a6ff 	.word	0x0800a6ff
 800a610:	0800a6ff 	.word	0x0800a6ff
 800a614:	0800a6ff 	.word	0x0800a6ff
 800a618:	0800a6ff 	.word	0x0800a6ff
 800a61c:	0800a6ff 	.word	0x0800a6ff
 800a620:	0800a6ff 	.word	0x0800a6ff
 800a624:	0800a65d 	.word	0x0800a65d
 800a628:	0800a6ff 	.word	0x0800a6ff
 800a62c:	0800a6ff 	.word	0x0800a6ff
 800a630:	0800a6ff 	.word	0x0800a6ff
 800a634:	0800a669 	.word	0x0800a669
 800a638:	0800a6ff 	.word	0x0800a6ff
 800a63c:	0800a675 	.word	0x0800a675
 800a640:	0800a691 	.word	0x0800a691
                    *output_pointer++ = '\b';
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	60fa      	str	r2, [r7, #12]
 800a64a:	2208      	movs	r2, #8
 800a64c:	701a      	strb	r2, [r3, #0]
                    break;
 800a64e:	e02c      	b.n	800a6aa <parse_string+0x206>
                    *output_pointer++ = '\f';
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	60fa      	str	r2, [r7, #12]
 800a656:	220c      	movs	r2, #12
 800a658:	701a      	strb	r2, [r3, #0]
                    break;
 800a65a:	e026      	b.n	800a6aa <parse_string+0x206>
                    *output_pointer++ = '\n';
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	60fa      	str	r2, [r7, #12]
 800a662:	220a      	movs	r2, #10
 800a664:	701a      	strb	r2, [r3, #0]
                    break;
 800a666:	e020      	b.n	800a6aa <parse_string+0x206>
                    *output_pointer++ = '\r';
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	60fa      	str	r2, [r7, #12]
 800a66e:	220d      	movs	r2, #13
 800a670:	701a      	strb	r2, [r3, #0]
                    break;
 800a672:	e01a      	b.n	800a6aa <parse_string+0x206>
                    *output_pointer++ = '\t';
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	60fa      	str	r2, [r7, #12]
 800a67a:	2209      	movs	r2, #9
 800a67c:	701a      	strb	r2, [r3, #0]
                    break;
 800a67e:	e014      	b.n	800a6aa <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	1c59      	adds	r1, r3, #1
 800a688:	60f9      	str	r1, [r7, #12]
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	701a      	strb	r2, [r3, #0]
                    break;
 800a68e:	e00c      	b.n	800a6aa <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800a690:	f107 030c 	add.w	r3, r7, #12
 800a694:	461a      	mov	r2, r3
 800a696:	6a39      	ldr	r1, [r7, #32]
 800a698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a69a:	f7ff fe1b 	bl	800a2d4 <utf16_literal_to_utf8>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d02c      	beq.n	800a702 <parse_string+0x25e>
                    break;
 800a6a8:	bf00      	nop
            }
            input_pointer += sequence_length;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	4413      	add	r3, r2
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800a6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	f4ff af66 	bcc.w	800a588 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	609a      	str	r2, [r3, #8]

    return true;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e01e      	b.n	800a728 <parse_string+0x284>
        goto fail;
 800a6ea:	bf00      	nop
 800a6ec:	e00a      	b.n	800a704 <parse_string+0x260>
                    goto fail;
 800a6ee:	bf00      	nop
 800a6f0:	e008      	b.n	800a704 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800a6f2:	bf00      	nop
 800a6f4:	e006      	b.n	800a704 <parse_string+0x260>
            goto fail; /* allocation failure */
 800a6f6:	bf00      	nop
 800a6f8:	e004      	b.n	800a704 <parse_string+0x260>
                goto fail;
 800a6fa:	bf00      	nop
 800a6fc:	e002      	b.n	800a704 <parse_string+0x260>
                    goto fail;
 800a6fe:	bf00      	nop
 800a700:	e000      	b.n	800a704 <parse_string+0x260>
                        goto fail;
 800a702:	bf00      	nop

fail:
    if (output != NULL)
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	69f8      	ldr	r0, [r7, #28]
 800a710:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	d006      	beq.n	800a726 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	461a      	mov	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	609a      	str	r2, [r3, #8]
    }

    return false;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3728      	adds	r7, #40	; 0x28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <buffer_skip_whitespace+0x16>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800a746:	2300      	movs	r3, #0
 800a748:	e02c      	b.n	800a7a4 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <buffer_skip_whitespace+0x2c>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d306      	bcc.n	800a76a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	e021      	b.n	800a7a4 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00d      	beq.n	800a78c <buffer_skip_whitespace+0x5c>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d207      	bcs.n	800a78c <buffer_skip_whitespace+0x5c>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	4413      	add	r3, r2
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b20      	cmp	r3, #32
 800a78a:	d9e9      	bls.n	800a760 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d104      	bne.n	800a7a2 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	1e5a      	subs	r2, r3, #1
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a7a2:	687b      	ldr	r3, [r7, #4]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d007      	beq.n	800a7ce <skip_utf8_bom+0x1e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <skip_utf8_bom+0x1e>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <skip_utf8_bom+0x22>
    {
        return NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e01c      	b.n	800a80c <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d018      	beq.n	800a80a <skip_utf8_bom+0x5a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d211      	bcs.n	800a80a <skip_utf8_bom+0x5a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	4908      	ldr	r1, [pc, #32]	; (800a814 <skip_utf8_bom+0x64>)
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f003 f989 	bl	800db0c <strncmp>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	1cda      	adds	r2, r3, #3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a80a:	687b      	ldr	r3, [r7, #4]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	080114a0 	.word	0x080114a0

0800a818 <cJSON_ParseWithLengthOpts>:
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
}

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08e      	sub	sp, #56	; 0x38
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800a826:	f107 0318 	add.w	r3, r7, #24
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	605a      	str	r2, [r3, #4]
 800a830:	609a      	str	r2, [r3, #8]
 800a832:	60da      	str	r2, [r3, #12]
 800a834:	611a      	str	r2, [r3, #16]
 800a836:	615a      	str	r2, [r3, #20]
 800a838:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800a83e:	4b41      	ldr	r3, [pc, #260]	; (800a944 <cJSON_ParseWithLengthOpts+0x12c>)
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800a844:	4b3f      	ldr	r3, [pc, #252]	; (800a944 <cJSON_ParseWithLengthOpts+0x12c>)
 800a846:	2200      	movs	r2, #0
 800a848:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d042      	beq.n	800a8d6 <cJSON_ParseWithLengthOpts+0xbe>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d03f      	beq.n	800a8d6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800a862:	4a39      	ldr	r2, [pc, #228]	; (800a948 <cJSON_ParseWithLengthOpts+0x130>)
 800a864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a868:	ca07      	ldmia	r2, {r0, r1, r2}
 800a86a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800a86e:	4836      	ldr	r0, [pc, #216]	; (800a948 <cJSON_ParseWithLengthOpts+0x130>)
 800a870:	f7ff fb98 	bl	8009fa4 <cJSON_New_Item>
 800a874:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d02e      	beq.n	800a8da <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800a87c:	f107 0318 	add.w	r3, r7, #24
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff ff95 	bl	800a7b0 <skip_utf8_bom>
 800a886:	4603      	mov	r3, r0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff ff51 	bl	800a730 <buffer_skip_whitespace>
 800a88e:	4603      	mov	r3, r0
 800a890:	4619      	mov	r1, r3
 800a892:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a894:	f000 f86a 	bl	800a96c <parse_value>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d01f      	beq.n	800a8de <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00e      	beq.n	800a8c2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800a8a4:	f107 0318 	add.w	r3, r7, #24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff ff41 	bl	800a730 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800a8ae:	6a3a      	ldr	r2, [r7, #32]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d215      	bcs.n	800a8e2 <cJSON_ParseWithLengthOpts+0xca>
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10f      	bne.n	800a8e2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	441a      	add	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	601a      	str	r2, [r3, #0]
    }

    return item;
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d4:	e031      	b.n	800a93a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800a8d6:	bf00      	nop
 800a8d8:	e004      	b.n	800a8e4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a8da:	bf00      	nop
 800a8dc:	e002      	b.n	800a8e4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a8de:	bf00      	nop
 800a8e0:	e000      	b.n	800a8e4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800a8e2:	bf00      	nop

fail:
    if (item != NULL)
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800a8ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a8ec:	f7ff fb70 	bl	8009fd0 <cJSON_Delete>
    }

    if (value != NULL)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d020      	beq.n	800a938 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800a8fe:	6a3a      	ldr	r2, [r7, #32]
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	429a      	cmp	r2, r3
 800a904:	d202      	bcs.n	800a90c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	e005      	b.n	800a918 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3b01      	subs	r3, #1
 800a916:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d004      	beq.n	800a928 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	441a      	add	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <cJSON_ParseWithLengthOpts+0x12c>)
 800a92a:	461a      	mov	r2, r3
 800a92c:	f107 0310 	add.w	r3, r7, #16
 800a930:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a934:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3738      	adds	r7, #56	; 0x38
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20005608 	.word	0x20005608
 800a948:	200000e0 	.word	0x200000e0

0800a94c <cJSON_ParseWithLength>:
{
    return cJSON_ParseWithOpts(value, 0, 0);
}

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
 800a956:	2300      	movs	r3, #0
 800a958:	2200      	movs	r2, #0
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff ff5b 	bl	800a818 <cJSON_ParseWithLengthOpts>
 800a962:	4603      	mov	r3, r0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <parse_value+0x18>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <parse_value+0x1c>
    {
        return false; /* no input */
 800a984:	2300      	movs	r3, #0
 800a986:	e0d2      	b.n	800ab2e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d01d      	beq.n	800a9ca <parse_value+0x5e>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	1d1a      	adds	r2, r3, #4
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d816      	bhi.n	800a9ca <parse_value+0x5e>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	4963      	ldr	r1, [pc, #396]	; (800ab38 <parse_value+0x1cc>)
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f003 f8ae 	bl	800db0c <strncmp>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d109      	bne.n	800a9ca <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2204      	movs	r2, #4
 800a9ba:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	1d1a      	adds	r2, r3, #4
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	609a      	str	r2, [r3, #8]
        return true;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e0b1      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d01d      	beq.n	800aa0c <parse_value+0xa0>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	1d5a      	adds	r2, r3, #5
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d816      	bhi.n	800aa0c <parse_value+0xa0>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	4954      	ldr	r1, [pc, #336]	; (800ab3c <parse_value+0x1d0>)
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f003 f88d 	bl	800db0c <strncmp>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	1d5a      	adds	r2, r3, #5
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	609a      	str	r2, [r3, #8]
        return true;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e090      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d020      	beq.n	800aa54 <parse_value+0xe8>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	1d1a      	adds	r2, r3, #4
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d819      	bhi.n	800aa54 <parse_value+0xe8>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	4413      	add	r3, r2
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	4944      	ldr	r1, [pc, #272]	; (800ab40 <parse_value+0x1d4>)
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f003 f86c 	bl	800db0c <strncmp>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	1d1a      	adds	r2, r3, #4
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	609a      	str	r2, [r3, #8]
        return true;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e06c      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d013      	beq.n	800aa82 <parse_value+0x116>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d20d      	bcs.n	800aa82 <parse_value+0x116>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b22      	cmp	r3, #34	; 0x22
 800aa74:	d105      	bne.n	800aa82 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff fd13 	bl	800a4a4 <parse_string>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	e055      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d023      	beq.n	800aad0 <parse_value+0x164>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d21d      	bcs.n	800aad0 <parse_value+0x164>
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b2d      	cmp	r3, #45	; 0x2d
 800aaa2:	d00f      	beq.n	800aac4 <parse_value+0x158>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	4413      	add	r3, r2
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b2f      	cmp	r3, #47	; 0x2f
 800aab2:	d90d      	bls.n	800aad0 <parse_value+0x164>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	4413      	add	r3, r2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b39      	cmp	r3, #57	; 0x39
 800aac2:	d805      	bhi.n	800aad0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fad6 	bl	800a078 <parse_number>
 800aacc:	4603      	mov	r3, r0
 800aace:	e02e      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d013      	beq.n	800aafe <parse_value+0x192>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	689a      	ldr	r2, [r3, #8]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d20d      	bcs.n	800aafe <parse_value+0x192>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b5b      	cmp	r3, #91	; 0x5b
 800aaf0:	d105      	bne.n	800aafe <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f825 	bl	800ab44 <parse_array>
 800aafa:	4603      	mov	r3, r0
 800aafc:	e017      	b.n	800ab2e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d013      	beq.n	800ab2c <parse_value+0x1c0>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d20d      	bcs.n	800ab2c <parse_value+0x1c0>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	4413      	add	r3, r2
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b7b      	cmp	r3, #123	; 0x7b
 800ab1e:	d105      	bne.n	800ab2c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f8d2 	bl	800accc <parse_object>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	e000      	b.n	800ab2e <parse_value+0x1c2>
    }

    return false;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	08011474 	.word	0x08011474
 800ab3c:	080114a4 	.word	0x080114a4
 800ab40:	080114ac 	.word	0x080114ac

0800ab44 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab5e:	d301      	bcc.n	800ab64 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800ab60:	2300      	movs	r3, #0
 800ab62:	e0af      	b.n	800acc4 <parse_array+0x180>
    }
    input_buffer->depth++;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	4413      	add	r3, r2
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b5b      	cmp	r3, #91	; 0x5b
 800ab7c:	f040 8094 	bne.w	800aca8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ab8a:	6838      	ldr	r0, [r7, #0]
 800ab8c:	f7ff fdd0 	bl	800a730 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <parse_array+0x6e>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	689a      	ldr	r2, [r3, #8]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d207      	bcs.n	800abb2 <parse_array+0x6e>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	4413      	add	r3, r2
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b5d      	cmp	r3, #93	; 0x5d
 800abb0:	d061      	beq.n	800ac76 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <parse_array+0x80>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d305      	bcc.n	800abd0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	609a      	str	r2, [r3, #8]
        goto fail;
 800abce:	e072      	b.n	800acb6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	1e5a      	subs	r2, r3, #1
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	3310      	adds	r3, #16
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff f9e0 	bl	8009fa4 <cJSON_New_Item>
 800abe4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05f      	beq.n	800acac <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d104      	bne.n	800abfc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	613b      	str	r3, [r7, #16]
 800abfa:	e007      	b.n	800ac0c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f7ff fd8a 	bl	800a730 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f7ff fea4 	bl	800a96c <parse_value>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d042      	beq.n	800acb0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ac2a:	6838      	ldr	r0, [r7, #0]
 800ac2c:	f7ff fd80 	bl	800a730 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <parse_array+0x10e>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d207      	bcs.n	800ac52 <parse_array+0x10e>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	2b2c      	cmp	r3, #44	; 0x2c
 800ac50:	d0c3      	beq.n	800abda <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d02d      	beq.n	800acb4 <parse_array+0x170>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d227      	bcs.n	800acb4 <parse_array+0x170>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b5d      	cmp	r3, #93	; 0x5d
 800ac72:	d11f      	bne.n	800acb4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800ac74:	e000      	b.n	800ac78 <parse_array+0x134>
        goto success;
 800ac76:	bf00      	nop
    input_buffer->depth--;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <parse_array+0x14a>
        head->prev = current_item;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2220      	movs	r2, #32
 800ac92:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	609a      	str	r2, [r3, #8]

    return true;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e00d      	b.n	800acc4 <parse_array+0x180>
        goto fail;
 800aca8:	bf00      	nop
 800acaa:	e004      	b.n	800acb6 <parse_array+0x172>
            goto fail; /* allocation failure */
 800acac:	bf00      	nop
 800acae:	e002      	b.n	800acb6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800acb0:	bf00      	nop
 800acb2:	e000      	b.n	800acb6 <parse_array+0x172>
        goto fail; /* expected end of array */
 800acb4:	bf00      	nop

fail:
    if (head != NULL)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800acbc:	6978      	ldr	r0, [r7, #20]
 800acbe:	f7ff f987 	bl	8009fd0 <cJSON_Delete>
    }

    return false;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ace6:	d301      	bcc.n	800acec <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800ace8:	2300      	movs	r3, #0
 800acea:	e0ea      	b.n	800aec2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80d0 	beq.w	800ae9e <parse_object+0x1d2>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	689a      	ldr	r2, [r3, #8]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	f080 80c9 	bcs.w	800ae9e <parse_object+0x1d2>
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	4413      	add	r3, r2
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b7b      	cmp	r3, #123	; 0x7b
 800ad1a:	f040 80c0 	bne.w	800ae9e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ad28:	6838      	ldr	r0, [r7, #0]
 800ad2a:	f7ff fd01 	bl	800a730 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00e      	beq.n	800ad52 <parse_object+0x86>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d208      	bcs.n	800ad52 <parse_object+0x86>
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b7d      	cmp	r3, #125	; 0x7d
 800ad4e:	f000 808d 	beq.w	800ae6c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <parse_object+0x98>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d305      	bcc.n	800ad70 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	1e5a      	subs	r2, r3, #1
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	609a      	str	r2, [r3, #8]
        goto fail;
 800ad6e:	e0a1      	b.n	800aeb4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3310      	adds	r3, #16
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f910 	bl	8009fa4 <cJSON_New_Item>
 800ad84:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 808a 	beq.w	800aea2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d104      	bne.n	800ad9e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	e007      	b.n	800adae <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800adb8:	6838      	ldr	r0, [r7, #0]
 800adba:	f7ff fcb9 	bl	800a730 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6938      	ldr	r0, [r7, #16]
 800adc2:	f7ff fb6f 	bl	800a4a4 <parse_string>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d06c      	beq.n	800aea6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800adcc:	6838      	ldr	r0, [r7, #0]
 800adce:	f7ff fcaf 	bl	800a730 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	691a      	ldr	r2, [r3, #16]
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2200      	movs	r2, #0
 800adde:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d061      	beq.n	800aeaa <parse_object+0x1de>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d25b      	bcs.n	800aeaa <parse_object+0x1de>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4413      	add	r3, r2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b3a      	cmp	r3, #58	; 0x3a
 800ae00:	d153      	bne.n	800aeaa <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ae0c:	6838      	ldr	r0, [r7, #0]
 800ae0e:	f7ff fc8f 	bl	800a730 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6938      	ldr	r0, [r7, #16]
 800ae16:	f7ff fda9 	bl	800a96c <parse_value>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d046      	beq.n	800aeae <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ae20:	6838      	ldr	r0, [r7, #0]
 800ae22:	f7ff fc85 	bl	800a730 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00d      	beq.n	800ae48 <parse_object+0x17c>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d207      	bcs.n	800ae48 <parse_object+0x17c>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	4413      	add	r3, r2
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b2c      	cmp	r3, #44	; 0x2c
 800ae46:	d098      	beq.n	800ad7a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d031      	beq.n	800aeb2 <parse_object+0x1e6>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d22b      	bcs.n	800aeb2 <parse_object+0x1e6>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	4413      	add	r3, r2
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b7d      	cmp	r3, #125	; 0x7d
 800ae68:	d123      	bne.n	800aeb2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800ae6a:	e000      	b.n	800ae6e <parse_object+0x1a2>
        goto success; /* empty object */
 800ae6c:	bf00      	nop
    input_buffer->depth--;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	1e5a      	subs	r2, r3, #1
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <parse_object+0x1b8>
        head->prev = current_item;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2240      	movs	r2, #64	; 0x40
 800ae88:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	609a      	str	r2, [r3, #8]
    return true;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e011      	b.n	800aec2 <parse_object+0x1f6>
        goto fail; /* not an object */
 800ae9e:	bf00      	nop
 800aea0:	e008      	b.n	800aeb4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800aea2:	bf00      	nop
 800aea4:	e006      	b.n	800aeb4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800aea6:	bf00      	nop
 800aea8:	e004      	b.n	800aeb4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800aeaa:	bf00      	nop
 800aeac:	e002      	b.n	800aeb4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800aeae:	bf00      	nop
 800aeb0:	e000      	b.n	800aeb4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800aeb2:	bf00      	nop

fail:
    if (head != NULL)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800aeba:	6978      	ldr	r0, [r7, #20]
 800aebc:	f7ff f888 	bl	8009fd0 <cJSON_Delete>
    }

    return false;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b086      	sub	sp, #24
 800aece:	af00      	add	r7, sp, #0
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <get_object_item+0x1c>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <get_object_item+0x20>
    {
        return NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	e033      	b.n	800af52 <get_object_item+0x88>
    }

    current_element = object->child;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d017      	beq.n	800af26 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800aef6:	e002      	b.n	800aefe <get_object_item+0x34>
        {
            current_element = current_element->next;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01c      	beq.n	800af3e <get_object_item+0x74>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d018      	beq.n	800af3e <get_object_item+0x74>
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	4619      	mov	r1, r3
 800af12:	68b8      	ldr	r0, [r7, #8]
 800af14:	f7f5 f964 	bl	80001e0 <strcmp>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1ec      	bne.n	800aef8 <get_object_item+0x2e>
 800af1e:	e00e      	b.n	800af3e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d008      	beq.n	800af3e <get_object_item+0x74>
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	4619      	mov	r1, r3
 800af32:	68b8      	ldr	r0, [r7, #8]
 800af34:	f7fe ff86 	bl	8009e44 <case_insensitive_strcmp>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f0      	bne.n	800af20 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <get_object_item+0x82>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <get_object_item+0x86>
        return NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e000      	b.n	800af52 <get_object_item+0x88>
    }

    return current_element;
 800af50:	697b      	ldr	r3, [r7, #20]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800af64:	2200      	movs	r2, #0
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ffae 	bl	800aeca <get_object_item>
 800af6e:	4603      	mov	r3, r0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <cJSON_IsTrue+0x12>
    {
        return false;
 800af86:	2300      	movs	r3, #0
 800af88:	e007      	b.n	800af9a <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	bf0c      	ite	eq
 800af94:	2301      	moveq	r3, #1
 800af96:	2300      	movne	r3, #0
 800af98:	b2db      	uxtb	r3, r3
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <cJSON_IsNumber+0x12>
    {
        return false;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e007      	b.n	800afc8 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	bf0c      	ite	eq
 800afc2:	2301      	moveq	r3, #1
 800afc4:	2300      	movne	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <cJSON_IsObject+0x12>
    {
        return false;
 800afe2:	2300      	movs	r3, #0
 800afe4:	e007      	b.n	800aff6 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b40      	cmp	r3, #64	; 0x40
 800afee:	bf0c      	ite	eq
 800aff0:	2301      	moveq	r3, #1
 800aff2:	2300      	movne	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
	...

0800b004 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 800b00c:	4b03      	ldr	r3, [pc, #12]	; (800b01c <cJSON_free+0x18>)
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	4798      	blx	r3
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	200000e0 	.word	0x200000e0

0800b020 <prv_crc_in>:
 * \param[in]       inp: Input data in byte format
 * \param[in]       len: Number of bytes to process
 * \return          Current CRC calculated value after all bytes or `0` on error input data
 */
static uint8_t
prv_crc_in(lwpkt_crc_t* crcobj, const void* inp, const size_t len) {
 800b020:	b480      	push	{r7}
 800b022:	b089      	sub	sp, #36	; 0x24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
    const uint8_t* p_data = inp;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	61fb      	str	r3, [r7, #28]

    if (crcobj == NULL || p_data == NULL || len == 0) {
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d005      	beq.n	800b042 <prv_crc_in+0x22>
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <prv_crc_in+0x22>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <prv_crc_in+0x26>
        return 0;
 800b042:	2300      	movs	r3, #0
 800b044:	e036      	b.n	800b0b4 <prv_crc_in+0x94>
    }

    for (size_t i = 0; i < len; ++i, ++p_data) {
 800b046:	2300      	movs	r3, #0
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	e02d      	b.n	800b0a8 <prv_crc_in+0x88>
        uint8_t inbyte = *p_data;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800b052:	2308      	movs	r3, #8
 800b054:	75bb      	strb	r3, [r7, #22]
 800b056:	e01e      	b.n	800b096 <prv_crc_in+0x76>
            uint8_t mix = (uint8_t)(crcobj->crc ^ inbyte) & 0x01U;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	4053      	eors	r3, r2
 800b060:	b2db      	uxtb	r3, r3
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	757b      	strb	r3, [r7, #21]
            crcobj->crc >>= 1U;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	701a      	strb	r2, [r3, #0]
            if (mix > 0) {
 800b074:	7d7b      	ldrb	r3, [r7, #21]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d007      	beq.n	800b08a <prv_crc_in+0x6a>
                crcobj->crc ^= 0x8CU;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800b082:	43db      	mvns	r3, r3
 800b084:	b2da      	uxtb	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	701a      	strb	r2, [r3, #0]
            }
            inbyte >>= 0x01U;
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	085b      	lsrs	r3, r3, #1
 800b08e:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800b090:	7dbb      	ldrb	r3, [r7, #22]
 800b092:	3b01      	subs	r3, #1
 800b094:	75bb      	strb	r3, [r7, #22]
 800b096:	7dbb      	ldrb	r3, [r7, #22]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1dd      	bne.n	800b058 <prv_crc_in+0x38>
    for (size_t i = 0; i < len; ++i, ++p_data) {
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	61fb      	str	r3, [r7, #28]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d3cd      	bcc.n	800b04c <prv_crc_in+0x2c>
        }
    }
    return crcobj->crc;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3724      	adds	r7, #36	; 0x24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <prv_crc_init>:
/**
 * \brief           Initialize CRC instance to default values
 * \param[in]       crcobj: CRC instance
 */
static void
prv_crc_init(lwpkt_crc_t* crcobj) {
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
    LWPKT_MEMSET(crcobj, 0x00, sizeof(*crcobj));
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f002 fd15 	bl	800dafc <memset>
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <lwpkt_init>:
 * \param[in]       tx_rb: TX LwRB instance for data write
 * \param[in]       rx_rb: RX LwRB instance for data read
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_init(lwpkt_t* pkt, lwrb_t* tx_rb, lwrb_t* rx_rb) {
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
    if (pkt == NULL) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <lwpkt_init+0x16>
        return lwpktERR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e01a      	b.n	800b126 <lwpkt_init+0x4c>
    }

    LWPKT_MEMSET(pkt, 0x00, sizeof(*pkt));
 800b0f0:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f002 fd00 	bl	800dafc <memset>
    LWPKT_RESET(pkt);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b102:	220c      	movs	r2, #12
 800b104:	2100      	movs	r1, #0
 800b106:	4618      	mov	r0, r3
 800b108:	f002 fcf8 	bl	800dafc <memset>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    pkt->tx_rb = tx_rb;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    pkt->rx_rb = rx_rb;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    return lwpktOK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <lwpkt_read>:
 * \brief           Read raw data from RX buffer and prepare packet
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktVALID when packet valid, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_read(lwpkt_t* pkt) {
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
    lwpktr_t res = lwpktOK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
    uint8_t b, e = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]

    if (!LWPKT_IS_VALID(pkt)) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <lwpkt_read+0x1a>
        return lwpktERR;
 800b146:	2301      	movs	r3, #1
 800b148:	e139      	b.n	800b3be <lwpkt_read+0x28e>
    }

    SEND_EVT(pkt, LWPKT_EVT_PRE_READ);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8103 	beq.w	800b35c <lwpkt_read+0x22c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b15c:	2106      	movs	r1, #6
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	4798      	blx	r3

    /* Process bytes from RX ringbuffer */
    /* Read byte by byte and go through state machine */
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800b162:	e0fb      	b.n	800b35c <lwpkt_read+0x22c>
        e = 1;
 800b164:	2301      	movs	r3, #1
 800b166:	73bb      	strb	r3, [r7, #14]
        switch (pkt->m.state) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b16e:	2b07      	cmp	r3, #7
 800b170:	f200 80e5 	bhi.w	800b33e <lwpkt_read+0x20e>
 800b174:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <lwpkt_read+0x4c>)
 800b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17a:	bf00      	nop
 800b17c:	0800b19d 	.word	0x0800b19d
 800b180:	0800b33f 	.word	0x0800b33f
 800b184:	0800b33f 	.word	0x0800b33f
 800b188:	0800b33f 	.word	0x0800b33f
 800b18c:	0800b1db 	.word	0x0800b1db
 800b190:	0800b251 	.word	0x0800b251
 800b194:	0800b2c1 	.word	0x0800b2c1
 800b198:	0800b31d 	.word	0x0800b31d
            case LWPKT_STATE_START: {
                if (b == LWPKT_START_BYTE) {
 800b19c:	7b7b      	ldrb	r3, [r7, #13]
 800b19e:	2baa      	cmp	r3, #170	; 0xaa
 800b1a0:	f040 80dc 	bne.w	800b35c <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt); /* Reset instance and make it ready for receiving */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b1aa:	220c      	movs	r2, #12
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f002 fca4 	bl	800dafc <memset>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    INIT_CRC(&pkt->m.crc);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f203 1311 	addw	r3, r3, #273	; 0x111
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff ff7c 	bl	800b0c0 <prv_crc_init>

                    LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_ADDR ? LWPKT_STATE_FROM
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                                                            : (LWPKT_CFG_USE_CMD ? LWPKT_STATE_CMD : LWPKT_STATE_LEN));
                }
                break;
 800b1d8:	e0c0      	b.n	800b35c <lwpkt_read+0x22c>
                LWPKT_SET_STATE(pkt, LWPKT_STATE_LEN);
                break;
            }
#endif /* LWPKT_CFG_USE_CMD */
            case LWPKT_STATE_LEN: {
                pkt->m.len |= (b & 0x7FU) << ((size_t)7U * (size_t)pkt->m.index++);
 800b1da:	7b7b      	ldrb	r3, [r7, #13]
 800b1dc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b1e6:	1c58      	adds	r0, r3, #1
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	00d2      	lsls	r2, r2, #3
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	fa01 f203 	lsl.w	r2, r1, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f203 1311 	addw	r3, r3, #273	; 0x111
 800b20c:	f107 010d 	add.w	r1, r7, #13
 800b210:	2201      	movs	r2, #1
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff ff04 	bl	800b020 <prv_crc_in>

                /* Last length bytes has MSB bit set to 0 */
                if ((b & 0x80U) == 0) {
 800b218:	7b7b      	ldrb	r3, [r7, #13]
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f2c0 809d 	blt.w	800b35c <lwpkt_read+0x22c>
                    if (pkt->m.len == 0) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <lwpkt_read+0x10e>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2206      	movs	r2, #6
 800b230:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800b23c:	e08e      	b.n	800b35c <lwpkt_read+0x22c>
                    } else {
                        LWPKT_SET_STATE(pkt, LWPKT_STATE_DATA);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2205      	movs	r2, #5
 800b242:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                    }
                }
                break;
 800b24e:	e085      	b.n	800b35c <lwpkt_read+0x22c>
            }
            case LWPKT_STATE_DATA: {
                if (pkt->m.index < sizeof(pkt->data)) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b256:	2bff      	cmp	r3, #255	; 0xff
 800b258:	d823      	bhi.n	800b2a2 <lwpkt_read+0x172>
                    pkt->data[pkt->m.index++] = b;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b260:	1c59      	adds	r1, r3, #1
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 800b268:	7b79      	ldrb	r1, [r7, #13]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	54d1      	strb	r1, [r2, r3]
                    ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f203 1311 	addw	r3, r3, #273	; 0x111
 800b274:	f107 010d 	add.w	r1, r7, #13
 800b278:	2201      	movs	r2, #1
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fed0 	bl	800b020 <prv_crc_in>
                    if (pkt->m.index == pkt->m.len) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d165      	bne.n	800b35c <lwpkt_read+0x22c>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2206      	movs	r2, #6
 800b294:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800b2a0:	e05c      	b.n	800b35c <lwpkt_read+0x22c>
                    }
                } else {
                    LWPKT_RESET(pkt);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b2a8:	220c      	movs	r2, #12
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f002 fc25 	bl	800dafc <memset>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRMEM;
 800b2ba:	2307      	movs	r3, #7
 800b2bc:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800b2be:	e064      	b.n	800b38a <lwpkt_read+0x25a>
                }
                break;
            }
#if LWPKT_CFG_USE_CRC
            case LWPKT_STATE_CRC: {
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f203 1311 	addw	r3, r3, #273	; 0x111
 800b2c6:	f107 010d 	add.w	r1, r7, #13
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff fea7 	bl	800b020 <prv_crc_in>
                if (pkt->m.crc.crc == 0) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d110      	bne.n	800b2fe <lwpkt_read+0x1ce>
                    LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2207      	movs	r2, #7
 800b2e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                } else {
                    LWPKT_RESET(pkt);
                    res = lwpktERRCRC;
                    goto retpre;
                }
                LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2207      	movs	r2, #7
 800b2f0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                break;
 800b2fc:	e02e      	b.n	800b35c <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b304:	220c      	movs	r2, #12
 800b306:	2100      	movs	r1, #0
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fbf7 	bl	800dafc <memset>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                    res = lwpktERRCRC;
 800b316:	2304      	movs	r3, #4
 800b318:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800b31a:	e036      	b.n	800b38a <lwpkt_read+0x25a>
            }
#endif /* LWPKT_CFG_USE_CRC */
            case LWPKT_STATE_STOP: {
                LWPKT_SET_STATE(pkt, LWPKT_STATE_START); /* Reset packet state */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if (b == LWPKT_STOP_BYTE) {
 800b32c:	7b7b      	ldrb	r3, [r7, #13]
 800b32e:	2b55      	cmp	r3, #85	; 0x55
 800b330:	d102      	bne.n	800b338 <lwpkt_read+0x208>
                    res = lwpktVALID; /* Packet fully valid, take data from it */
 800b332:	2303      	movs	r3, #3
 800b334:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800b336:	e028      	b.n	800b38a <lwpkt_read+0x25a>
                } else {
                    res = lwpktERRSTOP; /* Packet is missing STOP byte! */
 800b338:	2305      	movs	r3, #5
 800b33a:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800b33c:	e025      	b.n	800b38a <lwpkt_read+0x25a>
                }
            }
            default: {
                LWPKT_RESET(pkt);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b344:	220c      	movs	r2, #12
 800b346:	2100      	movs	r1, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 fbd7 	bl	800dafc <memset>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                res = lwpktERR; /* Hard error */
 800b356:	2301      	movs	r3, #1
 800b358:	73fb      	strb	r3, [r7, #15]
                goto retpre;
 800b35a:	e016      	b.n	800b38a <lwpkt_read+0x25a>
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b362:	f107 010d 	add.w	r1, r7, #13
 800b366:	2201      	movs	r2, #1
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 f994 	bl	800b696 <lwrb_read>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b01      	cmp	r3, #1
 800b372:	f43f aef7 	beq.w	800b164 <lwpkt_read+0x34>
            }
        }
    }
    if (pkt->m.state == LWPKT_STATE_START) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <lwpkt_read+0x256>
        res = lwpktWAITDATA;
 800b380:	2306      	movs	r3, #6
 800b382:	73fb      	strb	r3, [r7, #15]
 800b384:	e001      	b.n	800b38a <lwpkt_read+0x25a>
    } else {
        res = lwpktINPROG;
 800b386:	2302      	movs	r3, #2
 800b388:	73fb      	strb	r3, [r7, #15]
    }
retpre:
    SEND_EVT(pkt, LWPKT_EVT_POST_READ);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <lwpkt_read+0x270>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b39a:	2107      	movs	r1, #7
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	4798      	blx	r3
    if (e) {
 800b3a0:	7bbb      	ldrb	r3, [r7, #14]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <lwpkt_read+0x28c>
        SEND_EVT(pkt, LWPKT_EVT_READ); /* Send read event */
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <lwpkt_read+0x28c>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3b6:	2102      	movs	r1, #2
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
    }
    return res;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop

0800b3c8 <lwpkt_process>:
 * \param[in]       pkt: Packet instance
 * \param[in]       time: Current time in units of milliseconds
 * \return          \ref lwpktOK if processing OK, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_process(lwpkt_t* pkt, uint32_t time) {
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
    lwpktr_t pktres;

    if (pkt == NULL) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <lwpkt_process+0x14>
        return lwpktERR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e039      	b.n	800b450 <lwpkt_process+0x88>
    }

    /* Packet protocol data read */
    pktres = lwpkt_read(pkt);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff fea7 	bl	800b130 <lwpkt_read>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73fb      	strb	r3, [r7, #15]
    if (pktres == lwpktVALID) {
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d10f      	bne.n	800b40c <lwpkt_process+0x44>
        pkt->last_rx_time = time;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        SEND_EVT(pkt, LWPKT_EVT_PKT);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d027      	beq.n	800b44e <lwpkt_process+0x86>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b404:	2100      	movs	r1, #0
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
 800b40a:	e020      	b.n	800b44e <lwpkt_process+0x86>
    } else if (pktres == lwpktINPROG) {
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d119      	bne.n	800b446 <lwpkt_process+0x7e>
        if ((time - pkt->last_rx_time) >= LWPKT_CFG_PROCESS_INPROG_TIMEOUT) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	2b63      	cmp	r3, #99	; 0x63
 800b41e:	d916      	bls.n	800b44e <lwpkt_process+0x86>
            lwpkt_reset(pkt);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f819 	bl	800b458 <lwpkt_reset>
            pkt->last_rx_time = time;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            SEND_EVT(pkt, LWPKT_EVT_TIMEOUT);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <lwpkt_process+0x86>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b43e:	2101      	movs	r1, #1
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
 800b444:	e003      	b.n	800b44e <lwpkt_process+0x86>
        }
    } else {
        pkt->last_rx_time = time;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    }
    return lwpktOK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <lwpkt_reset>:
 * \brief           Reset packet state
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_reset(lwpkt_t* pkt) {
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    if (!LWPKT_IS_VALID(pkt)) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <lwpkt_reset+0x12>
        return lwpktERR;
 800b466:	2301      	movs	r3, #1
 800b468:	e00c      	b.n	800b484 <lwpkt_reset+0x2c>
    }
    LWPKT_RESET(pkt);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b470:	220c      	movs	r2, #12
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f002 fb41 	bl	800dafc <memset>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    return lwpktOK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <lwpkt_set_evt_fn>:
 * \param[in]       pkt: Packet structure
 * \param[in]       evt_fn: Function pointer for events
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_set_evt_fn(lwpkt_t* pkt, lwpkt_evt_fn evt_fn) {
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
    pkt->evt_fn = evt_fn;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    return lwpktOK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, lwrb_sz_t size) {
 800b4ac:	b480      	push	{r7}
 800b4ae:	b089      	sub	sp, #36	; 0x24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d005      	beq.n	800b4ca <lwrb_init+0x1e>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <lwrb_init+0x1e>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <lwrb_init+0x22>
        return 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e019      	b.n	800b502 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	61bb      	str	r3, [r7, #24]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	613b      	str	r3, [r7, #16]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	601a      	str	r2, [r3, #0]
    return 1;
 800b500:	2301      	movs	r3, #1
}
 800b502:	4618      	mov	r0, r3
 800b504:	3724      	adds	r7, #36	; 0x24
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Ring buffer instance
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800b50e:	b480      	push	{r7}
 800b510:	b083      	sub	sp, #12
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <lwrb_set_evt_fn+0x26>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d006      	beq.n	800b534 <lwrb_set_evt_fn+0x26>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d002      	beq.n	800b534 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	611a      	str	r2, [r3, #16]
    }
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array.
 */
lwrb_sz_t
lwrb_write(lwrb_t* buff, const void* data, lwrb_sz_t btw) {
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af02      	add	r7, sp, #8
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
    lwrb_sz_t written = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	617b      	str	r3, [r7, #20]

    if (lwrb_write_ex(buff, data, btw, &written, 0)) {
 800b550:	f107 0314 	add.w	r3, r7, #20
 800b554:	2200      	movs	r2, #0
 800b556:	9200      	str	r2, [sp, #0]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 f80a 	bl	800b576 <lwrb_write_ex>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <lwrb_write+0x2c>
        return written;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	e000      	b.n	800b56e <lwrb_write+0x2e>
    }
    return 0;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <lwrb_write_ex>:
 *                      \ref LWRB_FLAG_WRITE_ALL: Request to write all data (up to btw).
 *                          Will early return if no memory available
 * \return          `1` if write operation OK, `0` otherwise
 */
uint8_t
lwrb_write_ex(lwrb_t* buff, const void* data, lwrb_sz_t btw, lwrb_sz_t* bw, uint16_t flags) {
 800b576:	b580      	push	{r7, lr}
 800b578:	b08c      	sub	sp, #48	; 0x30
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <lwrb_write_ex+0x34>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d009      	beq.n	800b5aa <lwrb_write_ex+0x34>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <lwrb_write_ex+0x34>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <lwrb_write_ex+0x34>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <lwrb_write_ex+0x38>
        return 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e06f      	b.n	800b68e <lwrb_write_ex+0x118>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 f91c 	bl	800b7ec <lwrb_get_free>
 800b5b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* If no memory, or if user wants to write ALL data but no enough space, exit early */
    if (free == 0 || (free < btw && flags & LWRB_FLAG_WRITE_ALL)) {
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <lwrb_write_ex+0x58>
 800b5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d206      	bcs.n	800b5d2 <lwrb_write_ex+0x5c>
 800b5c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <lwrb_write_ex+0x5c>
        return 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e05d      	b.n	800b68e <lwrb_write_ex+0x118>
    }
    btw = BUF_MIN(free, btw);
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bf28      	it	cs
 800b5da:	4613      	movcs	r3, r2
 800b5dc:	607b      	str	r3, [r7, #4]
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	330c      	adds	r3, #12
 800b5e2:	623b      	str	r3, [r7, #32]
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f3bf 8f5b 	dmb	ish
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bf28      	it	cs
 800b600:	4613      	movcs	r3, r2
 800b602:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	4413      	add	r3, r2
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b610:	4618      	mov	r0, r3
 800b612:	f002 fb6a 	bl	800dcea <memcpy>
    buff_w_ptr += tocopy;
 800b616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	4413      	add	r3, r2
 800b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <lwrb_write_ex+0xcc>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	4619      	mov	r1, r3
 800b63a:	f002 fb56 	bl	800dcea <memcpy>
        buff_w_ptr = btw;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b648:	429a      	cmp	r2, r3
 800b64a:	d301      	bcc.n	800b650 <lwrb_write_ex+0xda>
        buff_w_ptr = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	330c      	adds	r3, #12
 800b654:	61bb      	str	r3, [r7, #24]
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	f3bf 8f5b 	dmb	ish
 800b662:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d007      	beq.n	800b67c <lwrb_write_ex+0x106>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	69f9      	ldr	r1, [r7, #28]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	440a      	add	r2, r1
 800b676:	2101      	movs	r1, #1
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	4798      	blx	r3
    if (bw != NULL) {
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d004      	beq.n	800b68c <lwrb_write_ex+0x116>
        *bw = tocopy + btw;
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	441a      	add	r2, r3
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800b68c:	2301      	movs	r3, #1
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3730      	adds	r7, #48	; 0x30
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
lwrb_sz_t
lwrb_read(lwrb_t* buff, void* data, lwrb_sz_t btr) {
 800b696:	b580      	push	{r7, lr}
 800b698:	b088      	sub	sp, #32
 800b69a:	af02      	add	r7, sp, #8
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
    lwrb_sz_t read = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]

    if (lwrb_read_ex(buff, data, btr, &read, 0)) {
 800b6a6:	f107 0314 	add.w	r3, r7, #20
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	9200      	str	r2, [sp, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	68b9      	ldr	r1, [r7, #8]
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 f80a 	bl	800b6cc <lwrb_read_ex>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <lwrb_read+0x2c>
        return read;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	e000      	b.n	800b6c4 <lwrb_read+0x2e>
    }
    return 0;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <lwrb_read_ex>:
 *                      \ref LWRB_FLAG_READ_ALL: Request to read all data (up to btr).
 *                          Will early return if no enough bytes in the buffer
 * \return          `1` if read operation OK, `0` otherwise
 */
uint8_t
lwrb_read_ex(lwrb_t* buff, void* data, lwrb_sz_t btr, lwrb_sz_t* br, uint16_t flags) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00d      	beq.n	800b700 <lwrb_read_ex+0x34>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d009      	beq.n	800b700 <lwrb_read_ex+0x34>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <lwrb_read_ex+0x34>
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <lwrb_read_ex+0x34>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <lwrb_read_ex+0x38>
        return 0;
 800b700:	2300      	movs	r3, #0
 800b702:	e06f      	b.n	800b7e4 <lwrb_read_ex+0x118>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 f8b2 	bl	800b86e <lwrb_get_full>
 800b70a:	6278      	str	r0, [r7, #36]	; 0x24
    if (full == 0 || (full < btr && (flags & LWRB_FLAG_READ_ALL))) {
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <lwrb_read_ex+0x58>
 800b712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	429a      	cmp	r2, r3
 800b718:	d206      	bcs.n	800b728 <lwrb_read_ex+0x5c>
 800b71a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <lwrb_read_ex+0x5c>
        return 0;
 800b724:	2300      	movs	r3, #0
 800b726:	e05d      	b.n	800b7e4 <lwrb_read_ex+0x118>
    }
    btr = BUF_MIN(full, btr);
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	4293      	cmp	r3, r2
 800b72e:	bf28      	it	cs
 800b730:	4613      	movcs	r3, r2
 800b732:	607b      	str	r3, [r7, #4]
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3308      	adds	r3, #8
 800b738:	623b      	str	r3, [r7, #32]
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f3bf 8f5b 	dmb	ish
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4293      	cmp	r3, r2
 800b754:	bf28      	it	cs
 800b756:	4613      	movcs	r3, r2
 800b758:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	4413      	add	r3, r2
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	4619      	mov	r1, r3
 800b766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b768:	f002 fabf 	bl	800dcea <memcpy>
    buff_r_ptr += tocopy;
 800b76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	4413      	add	r3, r2
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <lwrb_read_ex+0xcc>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800b782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	18d0      	adds	r0, r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	f002 faab 	bl	800dcea <memcpy>
        buff_r_ptr = btr;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d301      	bcc.n	800b7a6 <lwrb_read_ex+0xda>
        buff_r_ptr = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	61bb      	str	r3, [r7, #24]
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	f3bf 8f5b 	dmb	ish
 800b7b8:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d007      	beq.n	800b7d2 <lwrb_read_ex+0x106>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	69f9      	ldr	r1, [r7, #28]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	440a      	add	r2, r1
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	4798      	blx	r3
    if (br != NULL) {
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <lwrb_read_ex+0x116>
        *br = tocopy + btr;
 800b7d8:	69fa      	ldr	r2, [r7, #28]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	441a      	add	r2, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800b7e2:	2301      	movs	r3, #1
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3730      	adds	r7, #48	; 0x30
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Ring buffer instance
 * \return          Number of free bytes in memory
 */
lwrb_sz_t
lwrb_get_free(const lwrb_t* buff) {
 800b7ec:	b480      	push	{r7}
 800b7ee:	b08b      	sub	sp, #44	; 0x2c
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <lwrb_get_free+0x1e>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <lwrb_get_free+0x1e>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <lwrb_get_free+0x22>
        return 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e029      	b.n	800b862 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	330c      	adds	r3, #12
 800b812:	623b      	str	r3, [r7, #32]
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3308      	adds	r3, #8
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800b82e:	69fa      	ldr	r2, [r7, #28]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	429a      	cmp	r2, r3
 800b834:	d103      	bne.n	800b83e <lwrb_get_free+0x52>
        size = buff->size;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24
 800b83c:	e00f      	b.n	800b85e <lwrb_get_free+0x72>
    } else if (r > w) {
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	429a      	cmp	r2, r3
 800b844:	d904      	bls.n	800b850 <lwrb_get_free+0x64>
        size = r - w;
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
 800b84e:	e006      	b.n	800b85e <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	6979      	ldr	r1, [r7, #20]
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	1acb      	subs	r3, r1, r3
 800b85a:	4413      	add	r3, r2
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b860:	3b01      	subs	r3, #1
}
 800b862:	4618      	mov	r0, r3
 800b864:	372c      	adds	r7, #44	; 0x2c
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Ring buffer instance
 * \return          Number of bytes ready to be read
 */
lwrb_sz_t
lwrb_get_full(const lwrb_t* buff) {
 800b86e:	b480      	push	{r7}
 800b870:	b08b      	sub	sp, #44	; 0x2c
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d007      	beq.n	800b88c <lwrb_get_full+0x1e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <lwrb_get_full+0x1e>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <lwrb_get_full+0x22>
        return 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	e027      	b.n	800b8e0 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	330c      	adds	r3, #12
 800b894:	623b      	str	r3, [r7, #32]
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d102      	bne.n	800b8be <lwrb_get_full+0x50>
        size = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b8bc:	e00f      	b.n	800b8de <lwrb_get_full+0x70>
    } else if (w > r) {
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d904      	bls.n	800b8d0 <lwrb_get_full+0x62>
        size = w - r;
 800b8c6:	69fa      	ldr	r2, [r7, #28]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ce:	e006      	b.n	800b8de <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	69f9      	ldr	r1, [r7, #28]
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	1acb      	subs	r3, r1, r3
 800b8da:	4413      	add	r3, r2
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	372c      	adds	r7, #44	; 0x2c
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d007      	beq.n	800b90a <lwrb_get_linear_block_read_address+0x1e>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <lwrb_get_linear_block_read_address+0x1e>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	e004      	b.n	800b918 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	4413      	add	r3, r2
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer size in units of bytes for read operation
 */
lwrb_sz_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 800b924:	b480      	push	{r7}
 800b926:	b08b      	sub	sp, #44	; 0x2c
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
    lwrb_sz_t len, w, r;

    if (!BUF_IS_VALID(buff)) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <lwrb_get_linear_block_read_length+0x1e>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <lwrb_get_linear_block_read_length+0x1e>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800b942:	2300      	movs	r3, #0
 800b944:	e025      	b.n	800b992 <lwrb_get_linear_block_read_length+0x6e>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	330c      	adds	r3, #12
 800b94a:	623b      	str	r3, [r7, #32]
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3308      	adds	r3, #8
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	617b      	str	r3, [r7, #20]

    if (w > r) {
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d904      	bls.n	800b978 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
 800b976:	e00b      	b.n	800b990 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d905      	bls.n	800b98c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
 800b98a:	e001      	b.n	800b990 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return len;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b992:	4618      	mov	r0, r3
 800b994:	372c      	adds	r7, #44	; 0x2c
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <lwrb_skip>:
 * \param[in]       buff: Ring buffer instance
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
lwrb_sz_t
lwrb_skip(lwrb_t* buff, lwrb_sz_t len) {
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b088      	sub	sp, #32
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
    lwrb_sz_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00a      	beq.n	800b9c4 <lwrb_skip+0x26>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <lwrb_skip+0x26>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <lwrb_skip+0x26>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <lwrb_skip+0x2a>
        return 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	e036      	b.n	800ba36 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff ff50 	bl	800b86e <lwrb_get_full>
 800b9ce:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	bf28      	it	cs
 800b9d8:	4613      	movcs	r3, r2
 800b9da:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f3bf 8f5b 	dmb	ish
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	61fb      	str	r3, [r7, #28]
    r += len;
 800b9f0:	69fa      	ldr	r2, [r7, #28]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	69fa      	ldr	r2, [r7, #28]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d304      	bcc.n	800ba0c <lwrb_skip+0x6e>
        r -= buff->size;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	613b      	str	r3, [r7, #16]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	60bb      	str	r3, [r7, #8]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f3bf 8f5b 	dmb	ish
 800ba1e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <lwrb_skip+0x96>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
    return len;
 800ba34:	683b      	ldr	r3, [r7, #0]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3720      	adds	r7, #32
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	619a      	str	r2, [r3, #24]
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	889b      	ldrh	r3, [r3, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	4619      	mov	r1, r3
 800ba72:	f7f7 fc87 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6898      	ldr	r0, [r3, #8]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	899b      	ldrh	r3, [r3, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	4619      	mov	r1, r3
 800ba82:	f7f7 fc7f 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	691a      	ldr	r2, [r3, #16]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	8a9b      	ldrh	r3, [r3, #20]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7f8 fb2f 	bl	80040f4 <HAL_TIM_PWM_Stop>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 800baaa:	edd7 7a00 	vldr	s15, [r7]
 800baae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab6:	f000 8095 	beq.w	800bbe4 <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 800baba:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800babe:	ed97 0a00 	vldr	s0, [r7]
 800bac2:	f004 fbd1 	bl	8010268 <fmaxf>
 800bac6:	eef0 7a40 	vmov.f32	s15, s0
 800baca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bace:	eeb0 0a67 	vmov.f32	s0, s15
 800bad2:	f004 fbe4 	bl	801029e <fminf>
 800bad6:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 800bada:	edd7 7a00 	vldr	s15, [r7]
 800bade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae6:	bfcc      	ite	gt
 800bae8:	2301      	movgt	r3, #1
 800baea:	2300      	movle	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	7bfa      	ldrb	r2, [r7, #15]
 800baf8:	4619      	mov	r1, r3
 800bafa:	f7f7 fc43 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6898      	ldr	r0, [r3, #8]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	8999      	ldrh	r1, [r3, #12]
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	f083 0301 	eor.w	r3, r3, #1
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7f7 fc38 	bl	8003384 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	8a9b      	ldrh	r3, [r3, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d114      	bne.n	800bb46 <motor_run+0xa8>
 800bb1c:	edd7 7a00 	vldr	s15, [r7]
 800bb20:	eeb0 7ae7 	vabs.f32	s14, s15
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb3e:	ee17 2a90 	vmov	r2, s15
 800bb42:	635a      	str	r2, [r3, #52]	; 0x34
 800bb44:	e045      	b.n	800bbd2 <motor_run+0x134>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8a9b      	ldrh	r3, [r3, #20]
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d114      	bne.n	800bb78 <motor_run+0xda>
 800bb4e:	edd7 7a00 	vldr	s15, [r7]
 800bb52:	eeb0 7ae7 	vabs.f32	s14, s15
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb70:	ee17 3a90 	vmov	r3, s15
 800bb74:	6393      	str	r3, [r2, #56]	; 0x38
 800bb76:	e02c      	b.n	800bbd2 <motor_run+0x134>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	8a9b      	ldrh	r3, [r3, #20]
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d114      	bne.n	800bbaa <motor_run+0x10c>
 800bb80:	edd7 7a00 	vldr	s15, [r7]
 800bb84:	eeb0 7ae7 	vabs.f32	s14, s15
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba2:	ee17 3a90 	vmov	r3, s15
 800bba6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800bba8:	e013      	b.n	800bbd2 <motor_run+0x134>
 800bbaa:	edd7 7a00 	vldr	s15, [r7]
 800bbae:	eeb0 7ae7 	vabs.f32	s14, s15
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbcc:	ee17 3a90 	vmov	r3, s15
 800bbd0:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691a      	ldr	r2, [r3, #16]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8a9b      	ldrh	r3, [r3, #20]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f7f8 f9d9 	bl	8003f94 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 800bbe2:	e002      	b.n	800bbea <motor_run+0x14c>
		motor_stop(motor);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff ff3a 	bl	800ba5e <motor_stop>
}
 800bbea:	bf00      	nop
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <encoder_init>:


void encoder_init(encoder_t* encoder, uint32_t time){
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
	encoder->last_time = time;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	609a      	str	r2, [r3, #8]
	encoder->half_auto_reload = (int32_t)__HAL_TIM_GET_AUTORELOAD(encoder->timer) / 2;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	0fda      	lsrs	r2, r3, #31
 800bc0c:	4413      	add	r3, r2
 800bc0e:	105b      	asrs	r3, r3, #1
 800bc10:	461a      	mov	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(encoder->timer, TIM_CHANNEL_ALL);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	213c      	movs	r1, #60	; 0x3c
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7f8 fb73 	bl	8004308 <HAL_TIM_Encoder_Start>
}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <encoder_callback>:

void encoder_callback(encoder_t* encoder, uint32_t time){
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
	uint32_t d_t = time - encoder->last_time;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	60fb      	str	r3, [r7, #12]
	int32_t d_p = (int32_t)__HAL_TIM_GET_COUNTER(encoder->timer) - encoder->half_auto_reload;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	461a      	mov	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	60bb      	str	r3, [r7, #8]
	encoder->speed = (encoder_speed_t)d_p / (encoder_speed_t)d_t;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	ee07 3a90 	vmov	s15, r3
 800bc56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->last_time = time;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(encoder->timer, (uint32_t)encoder->half_auto_reload);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	625a      	str	r2, [r3, #36]	; 0x24

	//printf("d_p: %li, d_t: %lu\r\n", d_p, d_t);
}
 800bc80:	bf00      	nop
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <encoder_get_speed>:

encoder_speed_t encoder_get_speed(encoder_t* encoder){
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	return encoder->speed;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	ee07 3a90 	vmov	s15, r3
}
 800bc9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <mecanum_robot_init>:


void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
	motor_init(mecanum_robot->fl_motor);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fec0 	bl	800ba3e <motor_init>
	motor_init(mecanum_robot->fr_motor);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff febb 	bl	800ba3e <motor_init>
	motor_init(mecanum_robot->bl_motor);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff feb6 	bl	800ba3e <motor_init>
	motor_init(mecanum_robot->br_motor);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff feb1 	bl	800ba3e <motor_init>

	encoder_init(mecanum_robot->fl_encoder, time);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7ff ff85 	bl	800bbf2 <encoder_init>
	encoder_init(mecanum_robot->fr_encoder, time);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff ff7f 	bl	800bbf2 <encoder_init>
	encoder_init(mecanum_robot->bl_encoder, time);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ff79 	bl	800bbf2 <encoder_init>
	encoder_init(mecanum_robot->br_encoder, time);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff ff73 	bl	800bbf2 <encoder_init>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff fe9c 	bl	800ba5e <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fe97 	bl	800ba5e <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fe92 	bl	800ba5e <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fe8d 	bl	800ba5e <motor_stop>
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	0000      	movs	r0, r0
	...

0800bd50 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	; 0x38
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd5c:	edc7 0a01 	vstr	s1, [r7, #4]
 800bd60:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 800bd64:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd70:	d10a      	bne.n	800bd88 <mecanum_robot_move+0x38>
 800bd72:	edd7 7a00 	vldr	s15, [r7]
 800bd76:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	d103      	bne.n	800bd88 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff ffc7 	bl	800bd14 <mecanum_robot_stop>
		return;
 800bd86:	e0e4      	b.n	800bf52 <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 800bd88:	eddf 0a75 	vldr	s1, [pc, #468]	; 800bf60 <mecanum_robot_move+0x210>
 800bd8c:	ed97 0a02 	vldr	s0, [r7, #8]
 800bd90:	f004 fa6a 	bl	8010268 <fmaxf>
 800bd94:	eef0 7a40 	vmov.f32	s15, s0
 800bd98:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bd9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bda0:	f004 fa7d 	bl	801029e <fminf>
 800bda4:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7f4 fbe5 	bl	8000578 <__aeabi_f2d>
 800bdae:	a36a      	add	r3, pc, #424	; (adr r3, 800bf58 <mecanum_robot_move+0x208>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fa80 	bl	80002b8 <__aeabi_dsub>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	f7f4 ff2a 	bl	8000c18 <__aeabi_d2f>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 800bdc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdca:	f7f4 fbd5 	bl	8000578 <__aeabi_f2d>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	ec43 2b10 	vmov	d0, r2, r3
 800bdd6:	f004 f9ef 	bl	80101b8 <sin>
 800bdda:	ec53 2b10 	vmov	r2, r3, d0
 800bdde:	4610      	mov	r0, r2
 800bde0:	4619      	mov	r1, r3
 800bde2:	f7f4 ff19 	bl	8000c18 <__aeabi_d2f>
 800bde6:	4603      	mov	r3, r0
 800bde8:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 800bdea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdec:	f7f4 fbc4 	bl	8000578 <__aeabi_f2d>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	ec43 2b10 	vmov	d0, r2, r3
 800bdf8:	f004 f98a 	bl	8010110 <cos>
 800bdfc:	ec53 2b10 	vmov	r2, r3, d0
 800be00:	4610      	mov	r0, r2
 800be02:	4619      	mov	r1, r3
 800be04:	f7f4 ff08 	bl	8000c18 <__aeabi_d2f>
 800be08:	4603      	mov	r3, r0
 800be0a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 800be0c:	edd7 7a08 	vldr	s15, [r7, #32]
 800be10:	eeb0 7ae7 	vabs.f32	s14, s15
 800be14:	edd7 7a07 	vldr	s15, [r7, #28]
 800be18:	eef0 7ae7 	vabs.f32	s15, s15
 800be1c:	eef0 0a67 	vmov.f32	s1, s15
 800be20:	eeb0 0a47 	vmov.f32	s0, s14
 800be24:	f004 fa20 	bl	8010268 <fmaxf>
 800be28:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 800be2c:	ed97 7a02 	vldr	s14, [r7, #8]
 800be30:	edd7 7a07 	vldr	s15, [r7, #28]
 800be34:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be38:	ed97 7a06 	vldr	s14, [r7, #24]
 800be3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be40:	ed97 7a00 	vldr	s14, [r7]
 800be44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be48:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 800be4c:	ed97 7a02 	vldr	s14, [r7, #8]
 800be50:	edd7 7a08 	vldr	s15, [r7, #32]
 800be54:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be58:	edd7 7a06 	vldr	s15, [r7, #24]
 800be5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be60:	edd7 7a00 	vldr	s15, [r7]
 800be64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 800be6c:	ed97 7a02 	vldr	s14, [r7, #8]
 800be70:	edd7 7a08 	vldr	s15, [r7, #32]
 800be74:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be78:	ed97 7a06 	vldr	s14, [r7, #24]
 800be7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be80:	ed97 7a00 	vldr	s14, [r7]
 800be84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 800be8c:	ed97 7a02 	vldr	s14, [r7, #8]
 800be90:	edd7 7a07 	vldr	s15, [r7, #28]
 800be94:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be98:	edd7 7a06 	vldr	s15, [r7, #24]
 800be9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea0:	edd7 7a00 	vldr	s15, [r7]
 800bea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bea8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 800beac:	edd7 7a00 	vldr	s15, [r7]
 800beb0:	eeb0 7ae7 	vabs.f32	s14, s15
 800beb4:	edd7 7a02 	vldr	s15, [r7, #8]
 800beb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec8:	dd27      	ble.n	800bf1a <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 800beca:	ed97 7a02 	vldr	s14, [r7, #8]
 800bece:	edd7 7a00 	vldr	s15, [r7]
 800bed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bed6:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 800beda:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800bede:	ed97 7a05 	vldr	s14, [r7, #20]
 800bee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 800beea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800beee:	ed97 7a05 	vldr	s14, [r7, #20]
 800bef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bef6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 800befa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800befe:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 800bf0a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf0e:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fdbb 	bl	800ba9e <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fdb4 	bl	800ba9e <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fdad 	bl	800ba9e <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fda6 	bl	800ba9e <motor_run>
}
 800bf52:	3738      	adds	r7, #56	; 0x38
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	54442d18 	.word	0x54442d18
 800bf5c:	3fe921fb 	.word	0x3fe921fb
 800bf60:	00000000 	.word	0x00000000

0800bf64 <mecanum_robot_encoders_callback>:

void mecanum_robot_encoders_callback(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
	encoder_callback(mecanum_robot->fl_encoder, time);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff fe58 	bl	800bc2a <encoder_callback>
	encoder_callback(mecanum_robot->fr_encoder, time);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff fe52 	bl	800bc2a <encoder_callback>
	encoder_callback(mecanum_robot->bl_encoder, time);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff fe4c 	bl	800bc2a <encoder_callback>
	encoder_callback(mecanum_robot->br_encoder, time);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff fe46 	bl	800bc2a <encoder_callback>
}
 800bf9e:	bf00      	nop
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <mecanum_robot_get_encoder_speeds>:

void mecanum_robot_get_encoder_speeds(four_wheeled_robot_t *mecanum_robot, four_wheeled_robot_encoders_speeds_t* encoders_speeds){
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
	encoders_speeds->fl_speed = encoder_get_speed(mecanum_robot->fl_encoder);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fe69 	bl	800bc8c <encoder_get_speed>
 800bfba:	eef0 7a40 	vmov.f32	s15, s0
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	edc3 7a00 	vstr	s15, [r3]
	encoders_speeds->fr_speed = encoder_get_speed(mecanum_robot->fr_encoder);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fe5f 	bl	800bc8c <encoder_get_speed>
 800bfce:	eef0 7a40 	vmov.f32	s15, s0
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	edc3 7a01 	vstr	s15, [r3, #4]
	encoders_speeds->bl_speed = encoder_get_speed(mecanum_robot->bl_encoder);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff fe55 	bl	800bc8c <encoder_get_speed>
 800bfe2:	eef0 7a40 	vmov.f32	s15, s0
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	edc3 7a02 	vstr	s15, [r3, #8]
	encoders_speeds->br_speed = encoder_get_speed(mecanum_robot->br_encoder);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fe4b 	bl	800bc8c <encoder_get_speed>
 800bff6:	eef0 7a40 	vmov.f32	s15, s0
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <malloc>:
 800c008:	4b02      	ldr	r3, [pc, #8]	; (800c014 <malloc+0xc>)
 800c00a:	4601      	mov	r1, r0
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	f000 b82b 	b.w	800c068 <_malloc_r>
 800c012:	bf00      	nop
 800c014:	200002b0 	.word	0x200002b0

0800c018 <free>:
 800c018:	4b02      	ldr	r3, [pc, #8]	; (800c024 <free+0xc>)
 800c01a:	4601      	mov	r1, r0
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	f002 bcf5 	b.w	800ea0c <_free_r>
 800c022:	bf00      	nop
 800c024:	200002b0 	.word	0x200002b0

0800c028 <sbrk_aligned>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	4e0e      	ldr	r6, [pc, #56]	; (800c064 <sbrk_aligned+0x3c>)
 800c02c:	460c      	mov	r4, r1
 800c02e:	6831      	ldr	r1, [r6, #0]
 800c030:	4605      	mov	r5, r0
 800c032:	b911      	cbnz	r1, 800c03a <sbrk_aligned+0x12>
 800c034:	f001 fe0a 	bl	800dc4c <_sbrk_r>
 800c038:	6030      	str	r0, [r6, #0]
 800c03a:	4621      	mov	r1, r4
 800c03c:	4628      	mov	r0, r5
 800c03e:	f001 fe05 	bl	800dc4c <_sbrk_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d00a      	beq.n	800c05c <sbrk_aligned+0x34>
 800c046:	1cc4      	adds	r4, r0, #3
 800c048:	f024 0403 	bic.w	r4, r4, #3
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d007      	beq.n	800c060 <sbrk_aligned+0x38>
 800c050:	1a21      	subs	r1, r4, r0
 800c052:	4628      	mov	r0, r5
 800c054:	f001 fdfa 	bl	800dc4c <_sbrk_r>
 800c058:	3001      	adds	r0, #1
 800c05a:	d101      	bne.n	800c060 <sbrk_aligned+0x38>
 800c05c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c060:	4620      	mov	r0, r4
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	20005614 	.word	0x20005614

0800c068 <_malloc_r>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	1ccd      	adds	r5, r1, #3
 800c06e:	f025 0503 	bic.w	r5, r5, #3
 800c072:	3508      	adds	r5, #8
 800c074:	2d0c      	cmp	r5, #12
 800c076:	bf38      	it	cc
 800c078:	250c      	movcc	r5, #12
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	4607      	mov	r7, r0
 800c07e:	db01      	blt.n	800c084 <_malloc_r+0x1c>
 800c080:	42a9      	cmp	r1, r5
 800c082:	d905      	bls.n	800c090 <_malloc_r+0x28>
 800c084:	230c      	movs	r3, #12
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	2600      	movs	r6, #0
 800c08a:	4630      	mov	r0, r6
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c164 <_malloc_r+0xfc>
 800c094:	f000 f868 	bl	800c168 <__malloc_lock>
 800c098:	f8d8 3000 	ldr.w	r3, [r8]
 800c09c:	461c      	mov	r4, r3
 800c09e:	bb5c      	cbnz	r4, 800c0f8 <_malloc_r+0x90>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	f7ff ffc0 	bl	800c028 <sbrk_aligned>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	d155      	bne.n	800c15a <_malloc_r+0xf2>
 800c0ae:	f8d8 4000 	ldr.w	r4, [r8]
 800c0b2:	4626      	mov	r6, r4
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	d145      	bne.n	800c144 <_malloc_r+0xdc>
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d048      	beq.n	800c14e <_malloc_r+0xe6>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	eb04 0903 	add.w	r9, r4, r3
 800c0c6:	f001 fdc1 	bl	800dc4c <_sbrk_r>
 800c0ca:	4581      	cmp	r9, r0
 800c0cc:	d13f      	bne.n	800c14e <_malloc_r+0xe6>
 800c0ce:	6821      	ldr	r1, [r4, #0]
 800c0d0:	1a6d      	subs	r5, r5, r1
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f7ff ffa7 	bl	800c028 <sbrk_aligned>
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d037      	beq.n	800c14e <_malloc_r+0xe6>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	442b      	add	r3, r5
 800c0e2:	6023      	str	r3, [r4, #0]
 800c0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d038      	beq.n	800c15e <_malloc_r+0xf6>
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	42a2      	cmp	r2, r4
 800c0f0:	d12b      	bne.n	800c14a <_malloc_r+0xe2>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	605a      	str	r2, [r3, #4]
 800c0f6:	e00f      	b.n	800c118 <_malloc_r+0xb0>
 800c0f8:	6822      	ldr	r2, [r4, #0]
 800c0fa:	1b52      	subs	r2, r2, r5
 800c0fc:	d41f      	bmi.n	800c13e <_malloc_r+0xd6>
 800c0fe:	2a0b      	cmp	r2, #11
 800c100:	d917      	bls.n	800c132 <_malloc_r+0xca>
 800c102:	1961      	adds	r1, r4, r5
 800c104:	42a3      	cmp	r3, r4
 800c106:	6025      	str	r5, [r4, #0]
 800c108:	bf18      	it	ne
 800c10a:	6059      	strne	r1, [r3, #4]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	bf08      	it	eq
 800c110:	f8c8 1000 	streq.w	r1, [r8]
 800c114:	5162      	str	r2, [r4, r5]
 800c116:	604b      	str	r3, [r1, #4]
 800c118:	4638      	mov	r0, r7
 800c11a:	f104 060b 	add.w	r6, r4, #11
 800c11e:	f000 f829 	bl	800c174 <__malloc_unlock>
 800c122:	f026 0607 	bic.w	r6, r6, #7
 800c126:	1d23      	adds	r3, r4, #4
 800c128:	1af2      	subs	r2, r6, r3
 800c12a:	d0ae      	beq.n	800c08a <_malloc_r+0x22>
 800c12c:	1b9b      	subs	r3, r3, r6
 800c12e:	50a3      	str	r3, [r4, r2]
 800c130:	e7ab      	b.n	800c08a <_malloc_r+0x22>
 800c132:	42a3      	cmp	r3, r4
 800c134:	6862      	ldr	r2, [r4, #4]
 800c136:	d1dd      	bne.n	800c0f4 <_malloc_r+0x8c>
 800c138:	f8c8 2000 	str.w	r2, [r8]
 800c13c:	e7ec      	b.n	800c118 <_malloc_r+0xb0>
 800c13e:	4623      	mov	r3, r4
 800c140:	6864      	ldr	r4, [r4, #4]
 800c142:	e7ac      	b.n	800c09e <_malloc_r+0x36>
 800c144:	4634      	mov	r4, r6
 800c146:	6876      	ldr	r6, [r6, #4]
 800c148:	e7b4      	b.n	800c0b4 <_malloc_r+0x4c>
 800c14a:	4613      	mov	r3, r2
 800c14c:	e7cc      	b.n	800c0e8 <_malloc_r+0x80>
 800c14e:	230c      	movs	r3, #12
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	4638      	mov	r0, r7
 800c154:	f000 f80e 	bl	800c174 <__malloc_unlock>
 800c158:	e797      	b.n	800c08a <_malloc_r+0x22>
 800c15a:	6025      	str	r5, [r4, #0]
 800c15c:	e7dc      	b.n	800c118 <_malloc_r+0xb0>
 800c15e:	605b      	str	r3, [r3, #4]
 800c160:	deff      	udf	#255	; 0xff
 800c162:	bf00      	nop
 800c164:	20005610 	.word	0x20005610

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__malloc_lock+0x8>)
 800c16a:	f001 bdbc 	b.w	800dce6 <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	20005758 	.word	0x20005758

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__malloc_unlock+0x8>)
 800c176:	f001 bdb7 	b.w	800dce8 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	20005758 	.word	0x20005758

0800c180 <realloc>:
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <realloc+0xc>)
 800c182:	460a      	mov	r2, r1
 800c184:	4601      	mov	r1, r0
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	f000 b802 	b.w	800c190 <_realloc_r>
 800c18c:	200002b0 	.word	0x200002b0

0800c190 <_realloc_r>:
 800c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	4680      	mov	r8, r0
 800c196:	4614      	mov	r4, r2
 800c198:	460e      	mov	r6, r1
 800c19a:	b921      	cbnz	r1, 800c1a6 <_realloc_r+0x16>
 800c19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	f7ff bf61 	b.w	800c068 <_malloc_r>
 800c1a6:	b92a      	cbnz	r2, 800c1b4 <_realloc_r+0x24>
 800c1a8:	f002 fc30 	bl	800ea0c <_free_r>
 800c1ac:	4625      	mov	r5, r4
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b4:	f003 fc8d 	bl	800fad2 <_malloc_usable_size_r>
 800c1b8:	4284      	cmp	r4, r0
 800c1ba:	4607      	mov	r7, r0
 800c1bc:	d802      	bhi.n	800c1c4 <_realloc_r+0x34>
 800c1be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1c2:	d812      	bhi.n	800c1ea <_realloc_r+0x5a>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	f7ff ff4e 	bl	800c068 <_malloc_r>
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d0ed      	beq.n	800c1ae <_realloc_r+0x1e>
 800c1d2:	42bc      	cmp	r4, r7
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	bf28      	it	cs
 800c1da:	463a      	movcs	r2, r7
 800c1dc:	f001 fd85 	bl	800dcea <memcpy>
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f002 fc12 	bl	800ea0c <_free_r>
 800c1e8:	e7e1      	b.n	800c1ae <_realloc_r+0x1e>
 800c1ea:	4635      	mov	r5, r6
 800c1ec:	e7df      	b.n	800c1ae <_realloc_r+0x1e>

0800c1ee <sulp>:
 800c1ee:	b570      	push	{r4, r5, r6, lr}
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	ec45 4b10 	vmov	d0, r4, r5
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	f003 fb29 	bl	800f850 <__ulp>
 800c1fe:	ec51 0b10 	vmov	r0, r1, d0
 800c202:	b17e      	cbz	r6, 800c224 <sulp+0x36>
 800c204:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c208:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dd09      	ble.n	800c224 <sulp+0x36>
 800c210:	051b      	lsls	r3, r3, #20
 800c212:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c216:	2400      	movs	r4, #0
 800c218:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c21c:	4622      	mov	r2, r4
 800c21e:	462b      	mov	r3, r5
 800c220:	f7f4 fa02 	bl	8000628 <__aeabi_dmul>
 800c224:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c228 <_strtod_l>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	ed2d 8b02 	vpush	{d8}
 800c230:	b09b      	sub	sp, #108	; 0x6c
 800c232:	4604      	mov	r4, r0
 800c234:	9213      	str	r2, [sp, #76]	; 0x4c
 800c236:	2200      	movs	r2, #0
 800c238:	9216      	str	r2, [sp, #88]	; 0x58
 800c23a:	460d      	mov	r5, r1
 800c23c:	f04f 0800 	mov.w	r8, #0
 800c240:	f04f 0900 	mov.w	r9, #0
 800c244:	460a      	mov	r2, r1
 800c246:	9215      	str	r2, [sp, #84]	; 0x54
 800c248:	7811      	ldrb	r1, [r2, #0]
 800c24a:	292b      	cmp	r1, #43	; 0x2b
 800c24c:	d04c      	beq.n	800c2e8 <_strtod_l+0xc0>
 800c24e:	d83a      	bhi.n	800c2c6 <_strtod_l+0x9e>
 800c250:	290d      	cmp	r1, #13
 800c252:	d834      	bhi.n	800c2be <_strtod_l+0x96>
 800c254:	2908      	cmp	r1, #8
 800c256:	d834      	bhi.n	800c2c2 <_strtod_l+0x9a>
 800c258:	2900      	cmp	r1, #0
 800c25a:	d03d      	beq.n	800c2d8 <_strtod_l+0xb0>
 800c25c:	2200      	movs	r2, #0
 800c25e:	920a      	str	r2, [sp, #40]	; 0x28
 800c260:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c262:	7832      	ldrb	r2, [r6, #0]
 800c264:	2a30      	cmp	r2, #48	; 0x30
 800c266:	f040 80b4 	bne.w	800c3d2 <_strtod_l+0x1aa>
 800c26a:	7872      	ldrb	r2, [r6, #1]
 800c26c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c270:	2a58      	cmp	r2, #88	; 0x58
 800c272:	d170      	bne.n	800c356 <_strtod_l+0x12e>
 800c274:	9302      	str	r3, [sp, #8]
 800c276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	ab16      	add	r3, sp, #88	; 0x58
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	4a8e      	ldr	r2, [pc, #568]	; (800c4b8 <_strtod_l+0x290>)
 800c280:	ab17      	add	r3, sp, #92	; 0x5c
 800c282:	a915      	add	r1, sp, #84	; 0x54
 800c284:	4620      	mov	r0, r4
 800c286:	f002 fc75 	bl	800eb74 <__gethex>
 800c28a:	f010 070f 	ands.w	r7, r0, #15
 800c28e:	4605      	mov	r5, r0
 800c290:	d005      	beq.n	800c29e <_strtod_l+0x76>
 800c292:	2f06      	cmp	r7, #6
 800c294:	d12a      	bne.n	800c2ec <_strtod_l+0xc4>
 800c296:	3601      	adds	r6, #1
 800c298:	2300      	movs	r3, #0
 800c29a:	9615      	str	r6, [sp, #84]	; 0x54
 800c29c:	930a      	str	r3, [sp, #40]	; 0x28
 800c29e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 857f 	bne.w	800cda4 <_strtod_l+0xb7c>
 800c2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a8:	b1db      	cbz	r3, 800c2e2 <_strtod_l+0xba>
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2b0:	ec43 2b10 	vmov	d0, r2, r3
 800c2b4:	b01b      	add	sp, #108	; 0x6c
 800c2b6:	ecbd 8b02 	vpop	{d8}
 800c2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2be:	2920      	cmp	r1, #32
 800c2c0:	d1cc      	bne.n	800c25c <_strtod_l+0x34>
 800c2c2:	3201      	adds	r2, #1
 800c2c4:	e7bf      	b.n	800c246 <_strtod_l+0x1e>
 800c2c6:	292d      	cmp	r1, #45	; 0x2d
 800c2c8:	d1c8      	bne.n	800c25c <_strtod_l+0x34>
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	910a      	str	r1, [sp, #40]	; 0x28
 800c2ce:	1c51      	adds	r1, r2, #1
 800c2d0:	9115      	str	r1, [sp, #84]	; 0x54
 800c2d2:	7852      	ldrb	r2, [r2, #1]
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	d1c3      	bne.n	800c260 <_strtod_l+0x38>
 800c2d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2da:	9515      	str	r5, [sp, #84]	; 0x54
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 855f 	bne.w	800cda0 <_strtod_l+0xb78>
 800c2e2:	4642      	mov	r2, r8
 800c2e4:	464b      	mov	r3, r9
 800c2e6:	e7e3      	b.n	800c2b0 <_strtod_l+0x88>
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	e7ef      	b.n	800c2cc <_strtod_l+0xa4>
 800c2ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c2ee:	b13a      	cbz	r2, 800c300 <_strtod_l+0xd8>
 800c2f0:	2135      	movs	r1, #53	; 0x35
 800c2f2:	a818      	add	r0, sp, #96	; 0x60
 800c2f4:	f003 fba9 	bl	800fa4a <__copybits>
 800c2f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f002 ff7c 	bl	800f1f8 <_Bfree>
 800c300:	3f01      	subs	r7, #1
 800c302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c304:	2f04      	cmp	r7, #4
 800c306:	d806      	bhi.n	800c316 <_strtod_l+0xee>
 800c308:	e8df f007 	tbb	[pc, r7]
 800c30c:	201d0314 	.word	0x201d0314
 800c310:	14          	.byte	0x14
 800c311:	00          	.byte	0x00
 800c312:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c316:	05e9      	lsls	r1, r5, #23
 800c318:	bf48      	it	mi
 800c31a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c31e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c322:	0d1b      	lsrs	r3, r3, #20
 800c324:	051b      	lsls	r3, r3, #20
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1b9      	bne.n	800c29e <_strtod_l+0x76>
 800c32a:	f001 fcb1 	bl	800dc90 <__errno>
 800c32e:	2322      	movs	r3, #34	; 0x22
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	e7b4      	b.n	800c29e <_strtod_l+0x76>
 800c334:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c338:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c33c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c340:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c344:	e7e7      	b.n	800c316 <_strtod_l+0xee>
 800c346:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c4c0 <_strtod_l+0x298>
 800c34a:	e7e4      	b.n	800c316 <_strtod_l+0xee>
 800c34c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c350:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c354:	e7df      	b.n	800c316 <_strtod_l+0xee>
 800c356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	9215      	str	r2, [sp, #84]	; 0x54
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b30      	cmp	r3, #48	; 0x30
 800c360:	d0f9      	beq.n	800c356 <_strtod_l+0x12e>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d09b      	beq.n	800c29e <_strtod_l+0x76>
 800c366:	2301      	movs	r3, #1
 800c368:	f04f 0a00 	mov.w	sl, #0
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c370:	930b      	str	r3, [sp, #44]	; 0x2c
 800c372:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c376:	46d3      	mov	fp, sl
 800c378:	220a      	movs	r2, #10
 800c37a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c37c:	7806      	ldrb	r6, [r0, #0]
 800c37e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c382:	b2d9      	uxtb	r1, r3
 800c384:	2909      	cmp	r1, #9
 800c386:	d926      	bls.n	800c3d6 <_strtod_l+0x1ae>
 800c388:	494c      	ldr	r1, [pc, #304]	; (800c4bc <_strtod_l+0x294>)
 800c38a:	2201      	movs	r2, #1
 800c38c:	f001 fbbe 	bl	800db0c <strncmp>
 800c390:	2800      	cmp	r0, #0
 800c392:	d030      	beq.n	800c3f6 <_strtod_l+0x1ce>
 800c394:	2000      	movs	r0, #0
 800c396:	4632      	mov	r2, r6
 800c398:	9005      	str	r0, [sp, #20]
 800c39a:	465e      	mov	r6, fp
 800c39c:	4603      	mov	r3, r0
 800c39e:	2a65      	cmp	r2, #101	; 0x65
 800c3a0:	d001      	beq.n	800c3a6 <_strtod_l+0x17e>
 800c3a2:	2a45      	cmp	r2, #69	; 0x45
 800c3a4:	d113      	bne.n	800c3ce <_strtod_l+0x1a6>
 800c3a6:	b91e      	cbnz	r6, 800c3b0 <_strtod_l+0x188>
 800c3a8:	9a04      	ldr	r2, [sp, #16]
 800c3aa:	4302      	orrs	r2, r0
 800c3ac:	d094      	beq.n	800c2d8 <_strtod_l+0xb0>
 800c3ae:	2600      	movs	r6, #0
 800c3b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c3b2:	1c6a      	adds	r2, r5, #1
 800c3b4:	9215      	str	r2, [sp, #84]	; 0x54
 800c3b6:	786a      	ldrb	r2, [r5, #1]
 800c3b8:	2a2b      	cmp	r2, #43	; 0x2b
 800c3ba:	d074      	beq.n	800c4a6 <_strtod_l+0x27e>
 800c3bc:	2a2d      	cmp	r2, #45	; 0x2d
 800c3be:	d078      	beq.n	800c4b2 <_strtod_l+0x28a>
 800c3c0:	f04f 0c00 	mov.w	ip, #0
 800c3c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c3c8:	2909      	cmp	r1, #9
 800c3ca:	d97f      	bls.n	800c4cc <_strtod_l+0x2a4>
 800c3cc:	9515      	str	r5, [sp, #84]	; 0x54
 800c3ce:	2700      	movs	r7, #0
 800c3d0:	e09e      	b.n	800c510 <_strtod_l+0x2e8>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e7c8      	b.n	800c368 <_strtod_l+0x140>
 800c3d6:	f1bb 0f08 	cmp.w	fp, #8
 800c3da:	bfd8      	it	le
 800c3dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c3de:	f100 0001 	add.w	r0, r0, #1
 800c3e2:	bfda      	itte	le
 800c3e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800c3ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c3ee:	f10b 0b01 	add.w	fp, fp, #1
 800c3f2:	9015      	str	r0, [sp, #84]	; 0x54
 800c3f4:	e7c1      	b.n	800c37a <_strtod_l+0x152>
 800c3f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	9215      	str	r2, [sp, #84]	; 0x54
 800c3fc:	785a      	ldrb	r2, [r3, #1]
 800c3fe:	f1bb 0f00 	cmp.w	fp, #0
 800c402:	d037      	beq.n	800c474 <_strtod_l+0x24c>
 800c404:	9005      	str	r0, [sp, #20]
 800c406:	465e      	mov	r6, fp
 800c408:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c40c:	2b09      	cmp	r3, #9
 800c40e:	d912      	bls.n	800c436 <_strtod_l+0x20e>
 800c410:	2301      	movs	r3, #1
 800c412:	e7c4      	b.n	800c39e <_strtod_l+0x176>
 800c414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	9215      	str	r2, [sp, #84]	; 0x54
 800c41a:	785a      	ldrb	r2, [r3, #1]
 800c41c:	3001      	adds	r0, #1
 800c41e:	2a30      	cmp	r2, #48	; 0x30
 800c420:	d0f8      	beq.n	800c414 <_strtod_l+0x1ec>
 800c422:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c426:	2b08      	cmp	r3, #8
 800c428:	f200 84c1 	bhi.w	800cdae <_strtod_l+0xb86>
 800c42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c42e:	9005      	str	r0, [sp, #20]
 800c430:	2000      	movs	r0, #0
 800c432:	930b      	str	r3, [sp, #44]	; 0x2c
 800c434:	4606      	mov	r6, r0
 800c436:	3a30      	subs	r2, #48	; 0x30
 800c438:	f100 0301 	add.w	r3, r0, #1
 800c43c:	d014      	beq.n	800c468 <_strtod_l+0x240>
 800c43e:	9905      	ldr	r1, [sp, #20]
 800c440:	4419      	add	r1, r3
 800c442:	9105      	str	r1, [sp, #20]
 800c444:	4633      	mov	r3, r6
 800c446:	eb00 0c06 	add.w	ip, r0, r6
 800c44a:	210a      	movs	r1, #10
 800c44c:	4563      	cmp	r3, ip
 800c44e:	d113      	bne.n	800c478 <_strtod_l+0x250>
 800c450:	1833      	adds	r3, r6, r0
 800c452:	2b08      	cmp	r3, #8
 800c454:	f106 0601 	add.w	r6, r6, #1
 800c458:	4406      	add	r6, r0
 800c45a:	dc1a      	bgt.n	800c492 <_strtod_l+0x26a>
 800c45c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c45e:	230a      	movs	r3, #10
 800c460:	fb03 2301 	mla	r3, r3, r1, r2
 800c464:	9309      	str	r3, [sp, #36]	; 0x24
 800c466:	2300      	movs	r3, #0
 800c468:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c46a:	1c51      	adds	r1, r2, #1
 800c46c:	9115      	str	r1, [sp, #84]	; 0x54
 800c46e:	7852      	ldrb	r2, [r2, #1]
 800c470:	4618      	mov	r0, r3
 800c472:	e7c9      	b.n	800c408 <_strtod_l+0x1e0>
 800c474:	4658      	mov	r0, fp
 800c476:	e7d2      	b.n	800c41e <_strtod_l+0x1f6>
 800c478:	2b08      	cmp	r3, #8
 800c47a:	f103 0301 	add.w	r3, r3, #1
 800c47e:	dc03      	bgt.n	800c488 <_strtod_l+0x260>
 800c480:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c482:	434f      	muls	r7, r1
 800c484:	9709      	str	r7, [sp, #36]	; 0x24
 800c486:	e7e1      	b.n	800c44c <_strtod_l+0x224>
 800c488:	2b10      	cmp	r3, #16
 800c48a:	bfd8      	it	le
 800c48c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c490:	e7dc      	b.n	800c44c <_strtod_l+0x224>
 800c492:	2e10      	cmp	r6, #16
 800c494:	bfdc      	itt	le
 800c496:	230a      	movle	r3, #10
 800c498:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c49c:	e7e3      	b.n	800c466 <_strtod_l+0x23e>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e780      	b.n	800c3a8 <_strtod_l+0x180>
 800c4a6:	f04f 0c00 	mov.w	ip, #0
 800c4aa:	1caa      	adds	r2, r5, #2
 800c4ac:	9215      	str	r2, [sp, #84]	; 0x54
 800c4ae:	78aa      	ldrb	r2, [r5, #2]
 800c4b0:	e788      	b.n	800c3c4 <_strtod_l+0x19c>
 800c4b2:	f04f 0c01 	mov.w	ip, #1
 800c4b6:	e7f8      	b.n	800c4aa <_strtod_l+0x282>
 800c4b8:	08011570 	.word	0x08011570
 800c4bc:	0801156c 	.word	0x0801156c
 800c4c0:	7ff00000 	.word	0x7ff00000
 800c4c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4c6:	1c51      	adds	r1, r2, #1
 800c4c8:	9115      	str	r1, [sp, #84]	; 0x54
 800c4ca:	7852      	ldrb	r2, [r2, #1]
 800c4cc:	2a30      	cmp	r2, #48	; 0x30
 800c4ce:	d0f9      	beq.n	800c4c4 <_strtod_l+0x29c>
 800c4d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c4d4:	2908      	cmp	r1, #8
 800c4d6:	f63f af7a 	bhi.w	800c3ce <_strtod_l+0x1a6>
 800c4da:	3a30      	subs	r2, #48	; 0x30
 800c4dc:	9208      	str	r2, [sp, #32]
 800c4de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4e0:	920c      	str	r2, [sp, #48]	; 0x30
 800c4e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4e4:	1c57      	adds	r7, r2, #1
 800c4e6:	9715      	str	r7, [sp, #84]	; 0x54
 800c4e8:	7852      	ldrb	r2, [r2, #1]
 800c4ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c4ee:	f1be 0f09 	cmp.w	lr, #9
 800c4f2:	d938      	bls.n	800c566 <_strtod_l+0x33e>
 800c4f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4f6:	1a7f      	subs	r7, r7, r1
 800c4f8:	2f08      	cmp	r7, #8
 800c4fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c4fe:	dc03      	bgt.n	800c508 <_strtod_l+0x2e0>
 800c500:	9908      	ldr	r1, [sp, #32]
 800c502:	428f      	cmp	r7, r1
 800c504:	bfa8      	it	ge
 800c506:	460f      	movge	r7, r1
 800c508:	f1bc 0f00 	cmp.w	ip, #0
 800c50c:	d000      	beq.n	800c510 <_strtod_l+0x2e8>
 800c50e:	427f      	negs	r7, r7
 800c510:	2e00      	cmp	r6, #0
 800c512:	d14f      	bne.n	800c5b4 <_strtod_l+0x38c>
 800c514:	9904      	ldr	r1, [sp, #16]
 800c516:	4301      	orrs	r1, r0
 800c518:	f47f aec1 	bne.w	800c29e <_strtod_l+0x76>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f47f aedb 	bne.w	800c2d8 <_strtod_l+0xb0>
 800c522:	2a69      	cmp	r2, #105	; 0x69
 800c524:	d029      	beq.n	800c57a <_strtod_l+0x352>
 800c526:	dc26      	bgt.n	800c576 <_strtod_l+0x34e>
 800c528:	2a49      	cmp	r2, #73	; 0x49
 800c52a:	d026      	beq.n	800c57a <_strtod_l+0x352>
 800c52c:	2a4e      	cmp	r2, #78	; 0x4e
 800c52e:	f47f aed3 	bne.w	800c2d8 <_strtod_l+0xb0>
 800c532:	499b      	ldr	r1, [pc, #620]	; (800c7a0 <_strtod_l+0x578>)
 800c534:	a815      	add	r0, sp, #84	; 0x54
 800c536:	f002 fd5d 	bl	800eff4 <__match>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	f43f aecc 	beq.w	800c2d8 <_strtod_l+0xb0>
 800c540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b28      	cmp	r3, #40	; 0x28
 800c546:	d12f      	bne.n	800c5a8 <_strtod_l+0x380>
 800c548:	4996      	ldr	r1, [pc, #600]	; (800c7a4 <_strtod_l+0x57c>)
 800c54a:	aa18      	add	r2, sp, #96	; 0x60
 800c54c:	a815      	add	r0, sp, #84	; 0x54
 800c54e:	f002 fd65 	bl	800f01c <__hexnan>
 800c552:	2805      	cmp	r0, #5
 800c554:	d128      	bne.n	800c5a8 <_strtod_l+0x380>
 800c556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c55c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c560:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c564:	e69b      	b.n	800c29e <_strtod_l+0x76>
 800c566:	9f08      	ldr	r7, [sp, #32]
 800c568:	210a      	movs	r1, #10
 800c56a:	fb01 2107 	mla	r1, r1, r7, r2
 800c56e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c572:	9208      	str	r2, [sp, #32]
 800c574:	e7b5      	b.n	800c4e2 <_strtod_l+0x2ba>
 800c576:	2a6e      	cmp	r2, #110	; 0x6e
 800c578:	e7d9      	b.n	800c52e <_strtod_l+0x306>
 800c57a:	498b      	ldr	r1, [pc, #556]	; (800c7a8 <_strtod_l+0x580>)
 800c57c:	a815      	add	r0, sp, #84	; 0x54
 800c57e:	f002 fd39 	bl	800eff4 <__match>
 800c582:	2800      	cmp	r0, #0
 800c584:	f43f aea8 	beq.w	800c2d8 <_strtod_l+0xb0>
 800c588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c58a:	4988      	ldr	r1, [pc, #544]	; (800c7ac <_strtod_l+0x584>)
 800c58c:	3b01      	subs	r3, #1
 800c58e:	a815      	add	r0, sp, #84	; 0x54
 800c590:	9315      	str	r3, [sp, #84]	; 0x54
 800c592:	f002 fd2f 	bl	800eff4 <__match>
 800c596:	b910      	cbnz	r0, 800c59e <_strtod_l+0x376>
 800c598:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c59a:	3301      	adds	r3, #1
 800c59c:	9315      	str	r3, [sp, #84]	; 0x54
 800c59e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c7bc <_strtod_l+0x594>
 800c5a2:	f04f 0800 	mov.w	r8, #0
 800c5a6:	e67a      	b.n	800c29e <_strtod_l+0x76>
 800c5a8:	4881      	ldr	r0, [pc, #516]	; (800c7b0 <_strtod_l+0x588>)
 800c5aa:	f001 fbad 	bl	800dd08 <nan>
 800c5ae:	ec59 8b10 	vmov	r8, r9, d0
 800c5b2:	e674      	b.n	800c29e <_strtod_l+0x76>
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b8:	1afb      	subs	r3, r7, r3
 800c5ba:	f1bb 0f00 	cmp.w	fp, #0
 800c5be:	bf08      	it	eq
 800c5c0:	46b3      	moveq	fp, r6
 800c5c2:	2e10      	cmp	r6, #16
 800c5c4:	9308      	str	r3, [sp, #32]
 800c5c6:	4635      	mov	r5, r6
 800c5c8:	bfa8      	it	ge
 800c5ca:	2510      	movge	r5, #16
 800c5cc:	f7f3 ffb2 	bl	8000534 <__aeabi_ui2d>
 800c5d0:	2e09      	cmp	r6, #9
 800c5d2:	4680      	mov	r8, r0
 800c5d4:	4689      	mov	r9, r1
 800c5d6:	dd13      	ble.n	800c600 <_strtod_l+0x3d8>
 800c5d8:	4b76      	ldr	r3, [pc, #472]	; (800c7b4 <_strtod_l+0x58c>)
 800c5da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c5de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5e2:	f7f4 f821 	bl	8000628 <__aeabi_dmul>
 800c5e6:	4680      	mov	r8, r0
 800c5e8:	4650      	mov	r0, sl
 800c5ea:	4689      	mov	r9, r1
 800c5ec:	f7f3 ffa2 	bl	8000534 <__aeabi_ui2d>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	f7f3 fe60 	bl	80002bc <__adddf3>
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	2e0f      	cmp	r6, #15
 800c602:	dc38      	bgt.n	800c676 <_strtod_l+0x44e>
 800c604:	9b08      	ldr	r3, [sp, #32]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f43f ae49 	beq.w	800c29e <_strtod_l+0x76>
 800c60c:	dd24      	ble.n	800c658 <_strtod_l+0x430>
 800c60e:	2b16      	cmp	r3, #22
 800c610:	dc0b      	bgt.n	800c62a <_strtod_l+0x402>
 800c612:	4968      	ldr	r1, [pc, #416]	; (800c7b4 <_strtod_l+0x58c>)
 800c614:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61c:	4642      	mov	r2, r8
 800c61e:	464b      	mov	r3, r9
 800c620:	f7f4 f802 	bl	8000628 <__aeabi_dmul>
 800c624:	4680      	mov	r8, r0
 800c626:	4689      	mov	r9, r1
 800c628:	e639      	b.n	800c29e <_strtod_l+0x76>
 800c62a:	9a08      	ldr	r2, [sp, #32]
 800c62c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c630:	4293      	cmp	r3, r2
 800c632:	db20      	blt.n	800c676 <_strtod_l+0x44e>
 800c634:	4c5f      	ldr	r4, [pc, #380]	; (800c7b4 <_strtod_l+0x58c>)
 800c636:	f1c6 060f 	rsb	r6, r6, #15
 800c63a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c63e:	4642      	mov	r2, r8
 800c640:	464b      	mov	r3, r9
 800c642:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c646:	f7f3 ffef 	bl	8000628 <__aeabi_dmul>
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	1b9e      	subs	r6, r3, r6
 800c64e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c652:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c656:	e7e3      	b.n	800c620 <_strtod_l+0x3f8>
 800c658:	9b08      	ldr	r3, [sp, #32]
 800c65a:	3316      	adds	r3, #22
 800c65c:	db0b      	blt.n	800c676 <_strtod_l+0x44e>
 800c65e:	9b05      	ldr	r3, [sp, #20]
 800c660:	1bdf      	subs	r7, r3, r7
 800c662:	4b54      	ldr	r3, [pc, #336]	; (800c7b4 <_strtod_l+0x58c>)
 800c664:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66c:	4640      	mov	r0, r8
 800c66e:	4649      	mov	r1, r9
 800c670:	f7f4 f904 	bl	800087c <__aeabi_ddiv>
 800c674:	e7d6      	b.n	800c624 <_strtod_l+0x3fc>
 800c676:	9b08      	ldr	r3, [sp, #32]
 800c678:	1b75      	subs	r5, r6, r5
 800c67a:	441d      	add	r5, r3
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	dd70      	ble.n	800c762 <_strtod_l+0x53a>
 800c680:	f015 030f 	ands.w	r3, r5, #15
 800c684:	d00a      	beq.n	800c69c <_strtod_l+0x474>
 800c686:	494b      	ldr	r1, [pc, #300]	; (800c7b4 <_strtod_l+0x58c>)
 800c688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c68c:	4642      	mov	r2, r8
 800c68e:	464b      	mov	r3, r9
 800c690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c694:	f7f3 ffc8 	bl	8000628 <__aeabi_dmul>
 800c698:	4680      	mov	r8, r0
 800c69a:	4689      	mov	r9, r1
 800c69c:	f035 050f 	bics.w	r5, r5, #15
 800c6a0:	d04d      	beq.n	800c73e <_strtod_l+0x516>
 800c6a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c6a6:	dd22      	ble.n	800c6ee <_strtod_l+0x4c6>
 800c6a8:	2500      	movs	r5, #0
 800c6aa:	46ab      	mov	fp, r5
 800c6ac:	9509      	str	r5, [sp, #36]	; 0x24
 800c6ae:	9505      	str	r5, [sp, #20]
 800c6b0:	2322      	movs	r3, #34	; 0x22
 800c6b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c7bc <_strtod_l+0x594>
 800c6b6:	6023      	str	r3, [r4, #0]
 800c6b8:	f04f 0800 	mov.w	r8, #0
 800c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f43f aded 	beq.w	800c29e <_strtod_l+0x76>
 800c6c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f002 fd96 	bl	800f1f8 <_Bfree>
 800c6cc:	9905      	ldr	r1, [sp, #20]
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f002 fd92 	bl	800f1f8 <_Bfree>
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f002 fd8e 	bl	800f1f8 <_Bfree>
 800c6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f002 fd8a 	bl	800f1f8 <_Bfree>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f002 fd86 	bl	800f1f8 <_Bfree>
 800c6ec:	e5d7      	b.n	800c29e <_strtod_l+0x76>
 800c6ee:	4b32      	ldr	r3, [pc, #200]	; (800c7b8 <_strtod_l+0x590>)
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	112d      	asrs	r5, r5, #4
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	4649      	mov	r1, r9
 800c6fa:	469a      	mov	sl, r3
 800c6fc:	2d01      	cmp	r5, #1
 800c6fe:	dc21      	bgt.n	800c744 <_strtod_l+0x51c>
 800c700:	b10b      	cbz	r3, 800c706 <_strtod_l+0x4de>
 800c702:	4680      	mov	r8, r0
 800c704:	4689      	mov	r9, r1
 800c706:	492c      	ldr	r1, [pc, #176]	; (800c7b8 <_strtod_l+0x590>)
 800c708:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c70c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c710:	4642      	mov	r2, r8
 800c712:	464b      	mov	r3, r9
 800c714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c718:	f7f3 ff86 	bl	8000628 <__aeabi_dmul>
 800c71c:	4b27      	ldr	r3, [pc, #156]	; (800c7bc <_strtod_l+0x594>)
 800c71e:	460a      	mov	r2, r1
 800c720:	400b      	ands	r3, r1
 800c722:	4927      	ldr	r1, [pc, #156]	; (800c7c0 <_strtod_l+0x598>)
 800c724:	428b      	cmp	r3, r1
 800c726:	4680      	mov	r8, r0
 800c728:	d8be      	bhi.n	800c6a8 <_strtod_l+0x480>
 800c72a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c72e:	428b      	cmp	r3, r1
 800c730:	bf86      	itte	hi
 800c732:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c7c4 <_strtod_l+0x59c>
 800c736:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800c73a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c73e:	2300      	movs	r3, #0
 800c740:	9304      	str	r3, [sp, #16]
 800c742:	e07b      	b.n	800c83c <_strtod_l+0x614>
 800c744:	07ea      	lsls	r2, r5, #31
 800c746:	d505      	bpl.n	800c754 <_strtod_l+0x52c>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 ff6b 	bl	8000628 <__aeabi_dmul>
 800c752:	2301      	movs	r3, #1
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	3208      	adds	r2, #8
 800c758:	f10a 0a01 	add.w	sl, sl, #1
 800c75c:	106d      	asrs	r5, r5, #1
 800c75e:	9204      	str	r2, [sp, #16]
 800c760:	e7cc      	b.n	800c6fc <_strtod_l+0x4d4>
 800c762:	d0ec      	beq.n	800c73e <_strtod_l+0x516>
 800c764:	426d      	negs	r5, r5
 800c766:	f015 020f 	ands.w	r2, r5, #15
 800c76a:	d00a      	beq.n	800c782 <_strtod_l+0x55a>
 800c76c:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <_strtod_l+0x58c>)
 800c76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c772:	4640      	mov	r0, r8
 800c774:	4649      	mov	r1, r9
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f4 f87f 	bl	800087c <__aeabi_ddiv>
 800c77e:	4680      	mov	r8, r0
 800c780:	4689      	mov	r9, r1
 800c782:	112d      	asrs	r5, r5, #4
 800c784:	d0db      	beq.n	800c73e <_strtod_l+0x516>
 800c786:	2d1f      	cmp	r5, #31
 800c788:	dd1e      	ble.n	800c7c8 <_strtod_l+0x5a0>
 800c78a:	2500      	movs	r5, #0
 800c78c:	46ab      	mov	fp, r5
 800c78e:	9509      	str	r5, [sp, #36]	; 0x24
 800c790:	9505      	str	r5, [sp, #20]
 800c792:	2322      	movs	r3, #34	; 0x22
 800c794:	f04f 0800 	mov.w	r8, #0
 800c798:	f04f 0900 	mov.w	r9, #0
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	e78d      	b.n	800c6bc <_strtod_l+0x494>
 800c7a0:	080116ce 	.word	0x080116ce
 800c7a4:	08011584 	.word	0x08011584
 800c7a8:	080116c6 	.word	0x080116c6
 800c7ac:	08011700 	.word	0x08011700
 800c7b0:	08011990 	.word	0x08011990
 800c7b4:	08011870 	.word	0x08011870
 800c7b8:	08011848 	.word	0x08011848
 800c7bc:	7ff00000 	.word	0x7ff00000
 800c7c0:	7ca00000 	.word	0x7ca00000
 800c7c4:	7fefffff 	.word	0x7fefffff
 800c7c8:	f015 0310 	ands.w	r3, r5, #16
 800c7cc:	bf18      	it	ne
 800c7ce:	236a      	movne	r3, #106	; 0x6a
 800c7d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800cb74 <_strtod_l+0x94c>
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	4640      	mov	r0, r8
 800c7d8:	4649      	mov	r1, r9
 800c7da:	2300      	movs	r3, #0
 800c7dc:	07ea      	lsls	r2, r5, #31
 800c7de:	d504      	bpl.n	800c7ea <_strtod_l+0x5c2>
 800c7e0:	e9da 2300 	ldrd	r2, r3, [sl]
 800c7e4:	f7f3 ff20 	bl	8000628 <__aeabi_dmul>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	106d      	asrs	r5, r5, #1
 800c7ec:	f10a 0a08 	add.w	sl, sl, #8
 800c7f0:	d1f4      	bne.n	800c7dc <_strtod_l+0x5b4>
 800c7f2:	b10b      	cbz	r3, 800c7f8 <_strtod_l+0x5d0>
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	4689      	mov	r9, r1
 800c7f8:	9b04      	ldr	r3, [sp, #16]
 800c7fa:	b1bb      	cbz	r3, 800c82c <_strtod_l+0x604>
 800c7fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c800:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c804:	2b00      	cmp	r3, #0
 800c806:	4649      	mov	r1, r9
 800c808:	dd10      	ble.n	800c82c <_strtod_l+0x604>
 800c80a:	2b1f      	cmp	r3, #31
 800c80c:	f340 811e 	ble.w	800ca4c <_strtod_l+0x824>
 800c810:	2b34      	cmp	r3, #52	; 0x34
 800c812:	bfde      	ittt	le
 800c814:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c818:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c81c:	4093      	lslle	r3, r2
 800c81e:	f04f 0800 	mov.w	r8, #0
 800c822:	bfcc      	ite	gt
 800c824:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c828:	ea03 0901 	andle.w	r9, r3, r1
 800c82c:	2200      	movs	r2, #0
 800c82e:	2300      	movs	r3, #0
 800c830:	4640      	mov	r0, r8
 800c832:	4649      	mov	r1, r9
 800c834:	f7f4 f960 	bl	8000af8 <__aeabi_dcmpeq>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d1a6      	bne.n	800c78a <_strtod_l+0x562>
 800c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c842:	4633      	mov	r3, r6
 800c844:	465a      	mov	r2, fp
 800c846:	4620      	mov	r0, r4
 800c848:	f002 fd3e 	bl	800f2c8 <__s2b>
 800c84c:	9009      	str	r0, [sp, #36]	; 0x24
 800c84e:	2800      	cmp	r0, #0
 800c850:	f43f af2a 	beq.w	800c6a8 <_strtod_l+0x480>
 800c854:	9a08      	ldr	r2, [sp, #32]
 800c856:	9b05      	ldr	r3, [sp, #20]
 800c858:	2a00      	cmp	r2, #0
 800c85a:	eba3 0307 	sub.w	r3, r3, r7
 800c85e:	bfa8      	it	ge
 800c860:	2300      	movge	r3, #0
 800c862:	930c      	str	r3, [sp, #48]	; 0x30
 800c864:	2500      	movs	r5, #0
 800c866:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c86a:	9312      	str	r3, [sp, #72]	; 0x48
 800c86c:	46ab      	mov	fp, r5
 800c86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c870:	4620      	mov	r0, r4
 800c872:	6859      	ldr	r1, [r3, #4]
 800c874:	f002 fc80 	bl	800f178 <_Balloc>
 800c878:	9005      	str	r0, [sp, #20]
 800c87a:	2800      	cmp	r0, #0
 800c87c:	f43f af18 	beq.w	800c6b0 <_strtod_l+0x488>
 800c880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c882:	691a      	ldr	r2, [r3, #16]
 800c884:	3202      	adds	r2, #2
 800c886:	f103 010c 	add.w	r1, r3, #12
 800c88a:	0092      	lsls	r2, r2, #2
 800c88c:	300c      	adds	r0, #12
 800c88e:	f001 fa2c 	bl	800dcea <memcpy>
 800c892:	ec49 8b10 	vmov	d0, r8, r9
 800c896:	aa18      	add	r2, sp, #96	; 0x60
 800c898:	a917      	add	r1, sp, #92	; 0x5c
 800c89a:	4620      	mov	r0, r4
 800c89c:	f003 f848 	bl	800f930 <__d2b>
 800c8a0:	ec49 8b18 	vmov	d8, r8, r9
 800c8a4:	9016      	str	r0, [sp, #88]	; 0x58
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f43f af02 	beq.w	800c6b0 <_strtod_l+0x488>
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f002 fda2 	bl	800f3f8 <__i2b>
 800c8b4:	4683      	mov	fp, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f43f aefa 	beq.w	800c6b0 <_strtod_l+0x488>
 800c8bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c8be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c8c0:	2e00      	cmp	r6, #0
 800c8c2:	bfab      	itete	ge
 800c8c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c8c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c8c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c8ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c8ce:	bfac      	ite	ge
 800c8d0:	eb06 0a03 	addge.w	sl, r6, r3
 800c8d4:	1b9f      	sublt	r7, r3, r6
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	1af6      	subs	r6, r6, r3
 800c8da:	4416      	add	r6, r2
 800c8dc:	4ba0      	ldr	r3, [pc, #640]	; (800cb60 <_strtod_l+0x938>)
 800c8de:	3e01      	subs	r6, #1
 800c8e0:	429e      	cmp	r6, r3
 800c8e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8e6:	f280 80c4 	bge.w	800ca72 <_strtod_l+0x84a>
 800c8ea:	1b9b      	subs	r3, r3, r6
 800c8ec:	2b1f      	cmp	r3, #31
 800c8ee:	eba2 0203 	sub.w	r2, r2, r3
 800c8f2:	f04f 0101 	mov.w	r1, #1
 800c8f6:	f300 80b0 	bgt.w	800ca5a <_strtod_l+0x832>
 800c8fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fe:	930e      	str	r3, [sp, #56]	; 0x38
 800c900:	2300      	movs	r3, #0
 800c902:	930d      	str	r3, [sp, #52]	; 0x34
 800c904:	eb0a 0602 	add.w	r6, sl, r2
 800c908:	9b04      	ldr	r3, [sp, #16]
 800c90a:	45b2      	cmp	sl, r6
 800c90c:	4417      	add	r7, r2
 800c90e:	441f      	add	r7, r3
 800c910:	4653      	mov	r3, sl
 800c912:	bfa8      	it	ge
 800c914:	4633      	movge	r3, r6
 800c916:	42bb      	cmp	r3, r7
 800c918:	bfa8      	it	ge
 800c91a:	463b      	movge	r3, r7
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfc2      	ittt	gt
 800c920:	1af6      	subgt	r6, r6, r3
 800c922:	1aff      	subgt	r7, r7, r3
 800c924:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dd17      	ble.n	800c95e <_strtod_l+0x736>
 800c92e:	4659      	mov	r1, fp
 800c930:	461a      	mov	r2, r3
 800c932:	4620      	mov	r0, r4
 800c934:	f002 fe20 	bl	800f578 <__pow5mult>
 800c938:	4683      	mov	fp, r0
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f43f aeb8 	beq.w	800c6b0 <_strtod_l+0x488>
 800c940:	4601      	mov	r1, r0
 800c942:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c944:	4620      	mov	r0, r4
 800c946:	f002 fd6d 	bl	800f424 <__multiply>
 800c94a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f43f aeaf 	beq.w	800c6b0 <_strtod_l+0x488>
 800c952:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c954:	4620      	mov	r0, r4
 800c956:	f002 fc4f 	bl	800f1f8 <_Bfree>
 800c95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c95c:	9316      	str	r3, [sp, #88]	; 0x58
 800c95e:	2e00      	cmp	r6, #0
 800c960:	f300 808c 	bgt.w	800ca7c <_strtod_l+0x854>
 800c964:	9b08      	ldr	r3, [sp, #32]
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd08      	ble.n	800c97c <_strtod_l+0x754>
 800c96a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c96c:	9905      	ldr	r1, [sp, #20]
 800c96e:	4620      	mov	r0, r4
 800c970:	f002 fe02 	bl	800f578 <__pow5mult>
 800c974:	9005      	str	r0, [sp, #20]
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f ae9a 	beq.w	800c6b0 <_strtod_l+0x488>
 800c97c:	2f00      	cmp	r7, #0
 800c97e:	dd08      	ble.n	800c992 <_strtod_l+0x76a>
 800c980:	9905      	ldr	r1, [sp, #20]
 800c982:	463a      	mov	r2, r7
 800c984:	4620      	mov	r0, r4
 800c986:	f002 fe51 	bl	800f62c <__lshift>
 800c98a:	9005      	str	r0, [sp, #20]
 800c98c:	2800      	cmp	r0, #0
 800c98e:	f43f ae8f 	beq.w	800c6b0 <_strtod_l+0x488>
 800c992:	f1ba 0f00 	cmp.w	sl, #0
 800c996:	dd08      	ble.n	800c9aa <_strtod_l+0x782>
 800c998:	4659      	mov	r1, fp
 800c99a:	4652      	mov	r2, sl
 800c99c:	4620      	mov	r0, r4
 800c99e:	f002 fe45 	bl	800f62c <__lshift>
 800c9a2:	4683      	mov	fp, r0
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	f43f ae83 	beq.w	800c6b0 <_strtod_l+0x488>
 800c9aa:	9a05      	ldr	r2, [sp, #20]
 800c9ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f002 fec4 	bl	800f73c <__mdiff>
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f43f ae7a 	beq.w	800c6b0 <_strtod_l+0x488>
 800c9bc:	68c3      	ldr	r3, [r0, #12]
 800c9be:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60c3      	str	r3, [r0, #12]
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	f002 fe9d 	bl	800f704 <__mcmp>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	da60      	bge.n	800ca90 <_strtod_l+0x868>
 800c9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d0:	ea53 0308 	orrs.w	r3, r3, r8
 800c9d4:	f040 8084 	bne.w	800cae0 <_strtod_l+0x8b8>
 800c9d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d17f      	bne.n	800cae0 <_strtod_l+0x8b8>
 800c9e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9e4:	0d1b      	lsrs	r3, r3, #20
 800c9e6:	051b      	lsls	r3, r3, #20
 800c9e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9ec:	d978      	bls.n	800cae0 <_strtod_l+0x8b8>
 800c9ee:	696b      	ldr	r3, [r5, #20]
 800c9f0:	b913      	cbnz	r3, 800c9f8 <_strtod_l+0x7d0>
 800c9f2:	692b      	ldr	r3, [r5, #16]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	dd73      	ble.n	800cae0 <_strtod_l+0x8b8>
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f002 fe15 	bl	800f62c <__lshift>
 800ca02:	4659      	mov	r1, fp
 800ca04:	4605      	mov	r5, r0
 800ca06:	f002 fe7d 	bl	800f704 <__mcmp>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	dd68      	ble.n	800cae0 <_strtod_l+0x8b8>
 800ca0e:	9904      	ldr	r1, [sp, #16]
 800ca10:	4a54      	ldr	r2, [pc, #336]	; (800cb64 <_strtod_l+0x93c>)
 800ca12:	464b      	mov	r3, r9
 800ca14:	2900      	cmp	r1, #0
 800ca16:	f000 8084 	beq.w	800cb22 <_strtod_l+0x8fa>
 800ca1a:	ea02 0109 	and.w	r1, r2, r9
 800ca1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca22:	dc7e      	bgt.n	800cb22 <_strtod_l+0x8fa>
 800ca24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca28:	f77f aeb3 	ble.w	800c792 <_strtod_l+0x56a>
 800ca2c:	4b4e      	ldr	r3, [pc, #312]	; (800cb68 <_strtod_l+0x940>)
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fdf8 	bl	8000628 <__aeabi_dmul>
 800ca38:	4b4a      	ldr	r3, [pc, #296]	; (800cb64 <_strtod_l+0x93c>)
 800ca3a:	400b      	ands	r3, r1
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f47f ae3f 	bne.w	800c6c4 <_strtod_l+0x49c>
 800ca46:	2322      	movs	r3, #34	; 0x22
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	e63b      	b.n	800c6c4 <_strtod_l+0x49c>
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca50:	fa02 f303 	lsl.w	r3, r2, r3
 800ca54:	ea03 0808 	and.w	r8, r3, r8
 800ca58:	e6e8      	b.n	800c82c <_strtod_l+0x604>
 800ca5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ca5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ca62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ca66:	36e2      	adds	r6, #226	; 0xe2
 800ca68:	fa01 f306 	lsl.w	r3, r1, r6
 800ca6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ca70:	e748      	b.n	800c904 <_strtod_l+0x6dc>
 800ca72:	2100      	movs	r1, #0
 800ca74:	2301      	movs	r3, #1
 800ca76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ca7a:	e743      	b.n	800c904 <_strtod_l+0x6dc>
 800ca7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca7e:	4632      	mov	r2, r6
 800ca80:	4620      	mov	r0, r4
 800ca82:	f002 fdd3 	bl	800f62c <__lshift>
 800ca86:	9016      	str	r0, [sp, #88]	; 0x58
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	f47f af6b 	bne.w	800c964 <_strtod_l+0x73c>
 800ca8e:	e60f      	b.n	800c6b0 <_strtod_l+0x488>
 800ca90:	46ca      	mov	sl, r9
 800ca92:	d171      	bne.n	800cb78 <_strtod_l+0x950>
 800ca94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca9a:	b352      	cbz	r2, 800caf2 <_strtod_l+0x8ca>
 800ca9c:	4a33      	ldr	r2, [pc, #204]	; (800cb6c <_strtod_l+0x944>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d12a      	bne.n	800caf8 <_strtod_l+0x8d0>
 800caa2:	9b04      	ldr	r3, [sp, #16]
 800caa4:	4641      	mov	r1, r8
 800caa6:	b1fb      	cbz	r3, 800cae8 <_strtod_l+0x8c0>
 800caa8:	4b2e      	ldr	r3, [pc, #184]	; (800cb64 <_strtod_l+0x93c>)
 800caaa:	ea09 0303 	and.w	r3, r9, r3
 800caae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cab6:	d81a      	bhi.n	800caee <_strtod_l+0x8c6>
 800cab8:	0d1b      	lsrs	r3, r3, #20
 800caba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cabe:	fa02 f303 	lsl.w	r3, r2, r3
 800cac2:	4299      	cmp	r1, r3
 800cac4:	d118      	bne.n	800caf8 <_strtod_l+0x8d0>
 800cac6:	4b2a      	ldr	r3, [pc, #168]	; (800cb70 <_strtod_l+0x948>)
 800cac8:	459a      	cmp	sl, r3
 800caca:	d102      	bne.n	800cad2 <_strtod_l+0x8aa>
 800cacc:	3101      	adds	r1, #1
 800cace:	f43f adef 	beq.w	800c6b0 <_strtod_l+0x488>
 800cad2:	4b24      	ldr	r3, [pc, #144]	; (800cb64 <_strtod_l+0x93c>)
 800cad4:	ea0a 0303 	and.w	r3, sl, r3
 800cad8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cadc:	f04f 0800 	mov.w	r8, #0
 800cae0:	9b04      	ldr	r3, [sp, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1a2      	bne.n	800ca2c <_strtod_l+0x804>
 800cae6:	e5ed      	b.n	800c6c4 <_strtod_l+0x49c>
 800cae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caec:	e7e9      	b.n	800cac2 <_strtod_l+0x89a>
 800caee:	4613      	mov	r3, r2
 800caf0:	e7e7      	b.n	800cac2 <_strtod_l+0x89a>
 800caf2:	ea53 0308 	orrs.w	r3, r3, r8
 800caf6:	d08a      	beq.n	800ca0e <_strtod_l+0x7e6>
 800caf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cafa:	b1e3      	cbz	r3, 800cb36 <_strtod_l+0x90e>
 800cafc:	ea13 0f0a 	tst.w	r3, sl
 800cb00:	d0ee      	beq.n	800cae0 <_strtod_l+0x8b8>
 800cb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb04:	9a04      	ldr	r2, [sp, #16]
 800cb06:	4640      	mov	r0, r8
 800cb08:	4649      	mov	r1, r9
 800cb0a:	b1c3      	cbz	r3, 800cb3e <_strtod_l+0x916>
 800cb0c:	f7ff fb6f 	bl	800c1ee <sulp>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	ec51 0b18 	vmov	r0, r1, d8
 800cb18:	f7f3 fbd0 	bl	80002bc <__adddf3>
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	4689      	mov	r9, r1
 800cb20:	e7de      	b.n	800cae0 <_strtod_l+0x8b8>
 800cb22:	4013      	ands	r3, r2
 800cb24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cb2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cb30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cb34:	e7d4      	b.n	800cae0 <_strtod_l+0x8b8>
 800cb36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb38:	ea13 0f08 	tst.w	r3, r8
 800cb3c:	e7e0      	b.n	800cb00 <_strtod_l+0x8d8>
 800cb3e:	f7ff fb56 	bl	800c1ee <sulp>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	ec51 0b18 	vmov	r0, r1, d8
 800cb4a:	f7f3 fbb5 	bl	80002b8 <__aeabi_dsub>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2300      	movs	r3, #0
 800cb52:	4680      	mov	r8, r0
 800cb54:	4689      	mov	r9, r1
 800cb56:	f7f3 ffcf 	bl	8000af8 <__aeabi_dcmpeq>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0c0      	beq.n	800cae0 <_strtod_l+0x8b8>
 800cb5e:	e618      	b.n	800c792 <_strtod_l+0x56a>
 800cb60:	fffffc02 	.word	0xfffffc02
 800cb64:	7ff00000 	.word	0x7ff00000
 800cb68:	39500000 	.word	0x39500000
 800cb6c:	000fffff 	.word	0x000fffff
 800cb70:	7fefffff 	.word	0x7fefffff
 800cb74:	08011598 	.word	0x08011598
 800cb78:	4659      	mov	r1, fp
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f002 ff32 	bl	800f9e4 <__ratio>
 800cb80:	ec57 6b10 	vmov	r6, r7, d0
 800cb84:	ee10 0a10 	vmov	r0, s0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f3 ffc6 	bl	8000b20 <__aeabi_dcmple>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d071      	beq.n	800cc7c <_strtod_l+0xa54>
 800cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d17c      	bne.n	800cc98 <_strtod_l+0xa70>
 800cb9e:	f1b8 0f00 	cmp.w	r8, #0
 800cba2:	d15a      	bne.n	800cc5a <_strtod_l+0xa32>
 800cba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d15d      	bne.n	800cc68 <_strtod_l+0xa40>
 800cbac:	4b90      	ldr	r3, [pc, #576]	; (800cdf0 <_strtod_l+0xbc8>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	f7f3 ffaa 	bl	8000b0c <__aeabi_dcmplt>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d15c      	bne.n	800cc76 <_strtod_l+0xa4e>
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	4b8c      	ldr	r3, [pc, #560]	; (800cdf4 <_strtod_l+0xbcc>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f7f3 fd30 	bl	8000628 <__aeabi_dmul>
 800cbc8:	4606      	mov	r6, r0
 800cbca:	460f      	mov	r7, r1
 800cbcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cbd0:	9606      	str	r6, [sp, #24]
 800cbd2:	9307      	str	r3, [sp, #28]
 800cbd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cbdc:	4b86      	ldr	r3, [pc, #536]	; (800cdf8 <_strtod_l+0xbd0>)
 800cbde:	ea0a 0303 	and.w	r3, sl, r3
 800cbe2:	930d      	str	r3, [sp, #52]	; 0x34
 800cbe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbe6:	4b85      	ldr	r3, [pc, #532]	; (800cdfc <_strtod_l+0xbd4>)
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	f040 8090 	bne.w	800cd0e <_strtod_l+0xae6>
 800cbee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800cbf2:	ec49 8b10 	vmov	d0, r8, r9
 800cbf6:	f002 fe2b 	bl	800f850 <__ulp>
 800cbfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbfe:	ec51 0b10 	vmov	r0, r1, d0
 800cc02:	f7f3 fd11 	bl	8000628 <__aeabi_dmul>
 800cc06:	4642      	mov	r2, r8
 800cc08:	464b      	mov	r3, r9
 800cc0a:	f7f3 fb57 	bl	80002bc <__adddf3>
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4979      	ldr	r1, [pc, #484]	; (800cdf8 <_strtod_l+0xbd0>)
 800cc12:	4a7b      	ldr	r2, [pc, #492]	; (800ce00 <_strtod_l+0xbd8>)
 800cc14:	4019      	ands	r1, r3
 800cc16:	4291      	cmp	r1, r2
 800cc18:	4680      	mov	r8, r0
 800cc1a:	d944      	bls.n	800cca6 <_strtod_l+0xa7e>
 800cc1c:	ee18 2a90 	vmov	r2, s17
 800cc20:	4b78      	ldr	r3, [pc, #480]	; (800ce04 <_strtod_l+0xbdc>)
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d104      	bne.n	800cc30 <_strtod_l+0xa08>
 800cc26:	ee18 3a10 	vmov	r3, s16
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f43f ad40 	beq.w	800c6b0 <_strtod_l+0x488>
 800cc30:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ce04 <_strtod_l+0xbdc>
 800cc34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cc38:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f002 fadc 	bl	800f1f8 <_Bfree>
 800cc40:	9905      	ldr	r1, [sp, #20]
 800cc42:	4620      	mov	r0, r4
 800cc44:	f002 fad8 	bl	800f1f8 <_Bfree>
 800cc48:	4659      	mov	r1, fp
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f002 fad4 	bl	800f1f8 <_Bfree>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4620      	mov	r0, r4
 800cc54:	f002 fad0 	bl	800f1f8 <_Bfree>
 800cc58:	e609      	b.n	800c86e <_strtod_l+0x646>
 800cc5a:	f1b8 0f01 	cmp.w	r8, #1
 800cc5e:	d103      	bne.n	800cc68 <_strtod_l+0xa40>
 800cc60:	f1b9 0f00 	cmp.w	r9, #0
 800cc64:	f43f ad95 	beq.w	800c792 <_strtod_l+0x56a>
 800cc68:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cdc0 <_strtod_l+0xb98>
 800cc6c:	4f60      	ldr	r7, [pc, #384]	; (800cdf0 <_strtod_l+0xbc8>)
 800cc6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc72:	2600      	movs	r6, #0
 800cc74:	e7ae      	b.n	800cbd4 <_strtod_l+0x9ac>
 800cc76:	4f5f      	ldr	r7, [pc, #380]	; (800cdf4 <_strtod_l+0xbcc>)
 800cc78:	2600      	movs	r6, #0
 800cc7a:	e7a7      	b.n	800cbcc <_strtod_l+0x9a4>
 800cc7c:	4b5d      	ldr	r3, [pc, #372]	; (800cdf4 <_strtod_l+0xbcc>)
 800cc7e:	4630      	mov	r0, r6
 800cc80:	4639      	mov	r1, r7
 800cc82:	2200      	movs	r2, #0
 800cc84:	f7f3 fcd0 	bl	8000628 <__aeabi_dmul>
 800cc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d09c      	beq.n	800cbcc <_strtod_l+0x9a4>
 800cc92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc96:	e79d      	b.n	800cbd4 <_strtod_l+0x9ac>
 800cc98:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800cdc8 <_strtod_l+0xba0>
 800cc9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cca0:	ec57 6b17 	vmov	r6, r7, d7
 800cca4:	e796      	b.n	800cbd4 <_strtod_l+0x9ac>
 800cca6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ccaa:	9b04      	ldr	r3, [sp, #16]
 800ccac:	46ca      	mov	sl, r9
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1c2      	bne.n	800cc38 <_strtod_l+0xa10>
 800ccb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccb8:	0d1b      	lsrs	r3, r3, #20
 800ccba:	051b      	lsls	r3, r3, #20
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d1bb      	bne.n	800cc38 <_strtod_l+0xa10>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	f7f4 f810 	bl	8000ce8 <__aeabi_d2lz>
 800ccc8:	f7f3 fc80 	bl	80005cc <__aeabi_l2d>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	f7f3 faf0 	bl	80002b8 <__aeabi_dsub>
 800ccd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccde:	ea43 0308 	orr.w	r3, r3, r8
 800cce2:	4313      	orrs	r3, r2
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	d054      	beq.n	800cd94 <_strtod_l+0xb6c>
 800ccea:	a339      	add	r3, pc, #228	; (adr r3, 800cdd0 <_strtod_l+0xba8>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 ff0c 	bl	8000b0c <__aeabi_dcmplt>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	f47f ace5 	bne.w	800c6c4 <_strtod_l+0x49c>
 800ccfa:	a337      	add	r3, pc, #220	; (adr r3, 800cdd8 <_strtod_l+0xbb0>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	4630      	mov	r0, r6
 800cd02:	4639      	mov	r1, r7
 800cd04:	f7f3 ff20 	bl	8000b48 <__aeabi_dcmpgt>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d095      	beq.n	800cc38 <_strtod_l+0xa10>
 800cd0c:	e4da      	b.n	800c6c4 <_strtod_l+0x49c>
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	b333      	cbz	r3, 800cd60 <_strtod_l+0xb38>
 800cd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd18:	d822      	bhi.n	800cd60 <_strtod_l+0xb38>
 800cd1a:	a331      	add	r3, pc, #196	; (adr r3, 800cde0 <_strtod_l+0xbb8>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	4630      	mov	r0, r6
 800cd22:	4639      	mov	r1, r7
 800cd24:	f7f3 fefc 	bl	8000b20 <__aeabi_dcmple>
 800cd28:	b1a0      	cbz	r0, 800cd54 <_strtod_l+0xb2c>
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7f3 ff53 	bl	8000bd8 <__aeabi_d2uiz>
 800cd32:	2801      	cmp	r0, #1
 800cd34:	bf38      	it	cc
 800cd36:	2001      	movcc	r0, #1
 800cd38:	f7f3 fbfc 	bl	8000534 <__aeabi_ui2d>
 800cd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd3e:	4606      	mov	r6, r0
 800cd40:	460f      	mov	r7, r1
 800cd42:	bb23      	cbnz	r3, 800cd8e <_strtod_l+0xb66>
 800cd44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd48:	9010      	str	r0, [sp, #64]	; 0x40
 800cd4a:	9311      	str	r3, [sp, #68]	; 0x44
 800cd4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cd54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd58:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cd5c:	1a9b      	subs	r3, r3, r2
 800cd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd64:	eeb0 0a48 	vmov.f32	s0, s16
 800cd68:	eef0 0a68 	vmov.f32	s1, s17
 800cd6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cd70:	f002 fd6e 	bl	800f850 <__ulp>
 800cd74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd78:	ec53 2b10 	vmov	r2, r3, d0
 800cd7c:	f7f3 fc54 	bl	8000628 <__aeabi_dmul>
 800cd80:	ec53 2b18 	vmov	r2, r3, d8
 800cd84:	f7f3 fa9a 	bl	80002bc <__adddf3>
 800cd88:	4680      	mov	r8, r0
 800cd8a:	4689      	mov	r9, r1
 800cd8c:	e78d      	b.n	800ccaa <_strtod_l+0xa82>
 800cd8e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cd92:	e7db      	b.n	800cd4c <_strtod_l+0xb24>
 800cd94:	a314      	add	r3, pc, #80	; (adr r3, 800cde8 <_strtod_l+0xbc0>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f7f3 feb7 	bl	8000b0c <__aeabi_dcmplt>
 800cd9e:	e7b3      	b.n	800cd08 <_strtod_l+0xae0>
 800cda0:	2300      	movs	r3, #0
 800cda2:	930a      	str	r3, [sp, #40]	; 0x28
 800cda4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cda6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	f7ff ba7c 	b.w	800c2a6 <_strtod_l+0x7e>
 800cdae:	2a65      	cmp	r2, #101	; 0x65
 800cdb0:	f43f ab75 	beq.w	800c49e <_strtod_l+0x276>
 800cdb4:	2a45      	cmp	r2, #69	; 0x45
 800cdb6:	f43f ab72 	beq.w	800c49e <_strtod_l+0x276>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f7ff bbaa 	b.w	800c514 <_strtod_l+0x2ec>
 800cdc0:	00000000 	.word	0x00000000
 800cdc4:	bff00000 	.word	0xbff00000
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	3ff00000 	.word	0x3ff00000
 800cdd0:	94a03595 	.word	0x94a03595
 800cdd4:	3fdfffff 	.word	0x3fdfffff
 800cdd8:	35afe535 	.word	0x35afe535
 800cddc:	3fe00000 	.word	0x3fe00000
 800cde0:	ffc00000 	.word	0xffc00000
 800cde4:	41dfffff 	.word	0x41dfffff
 800cde8:	94a03595 	.word	0x94a03595
 800cdec:	3fcfffff 	.word	0x3fcfffff
 800cdf0:	3ff00000 	.word	0x3ff00000
 800cdf4:	3fe00000 	.word	0x3fe00000
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	7fe00000 	.word	0x7fe00000
 800ce00:	7c9fffff 	.word	0x7c9fffff
 800ce04:	7fefffff 	.word	0x7fefffff

0800ce08 <strtod>:
 800ce08:	460a      	mov	r2, r1
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4802      	ldr	r0, [pc, #8]	; (800ce18 <strtod+0x10>)
 800ce0e:	4b03      	ldr	r3, [pc, #12]	; (800ce1c <strtod+0x14>)
 800ce10:	6800      	ldr	r0, [r0, #0]
 800ce12:	f7ff ba09 	b.w	800c228 <_strtod_l>
 800ce16:	bf00      	nop
 800ce18:	200002b0 	.word	0x200002b0
 800ce1c:	200000f8 	.word	0x200000f8

0800ce20 <__cvt>:
 800ce20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	ec55 4b10 	vmov	r4, r5, d0
 800ce28:	2d00      	cmp	r5, #0
 800ce2a:	460e      	mov	r6, r1
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	462b      	mov	r3, r5
 800ce30:	bfbb      	ittet	lt
 800ce32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce36:	461d      	movlt	r5, r3
 800ce38:	2300      	movge	r3, #0
 800ce3a:	232d      	movlt	r3, #45	; 0x2d
 800ce3c:	700b      	strb	r3, [r1, #0]
 800ce3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce44:	4691      	mov	r9, r2
 800ce46:	f023 0820 	bic.w	r8, r3, #32
 800ce4a:	bfbc      	itt	lt
 800ce4c:	4622      	movlt	r2, r4
 800ce4e:	4614      	movlt	r4, r2
 800ce50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce54:	d005      	beq.n	800ce62 <__cvt+0x42>
 800ce56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce5a:	d100      	bne.n	800ce5e <__cvt+0x3e>
 800ce5c:	3601      	adds	r6, #1
 800ce5e:	2102      	movs	r1, #2
 800ce60:	e000      	b.n	800ce64 <__cvt+0x44>
 800ce62:	2103      	movs	r1, #3
 800ce64:	ab03      	add	r3, sp, #12
 800ce66:	9301      	str	r3, [sp, #4]
 800ce68:	ab02      	add	r3, sp, #8
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	ec45 4b10 	vmov	d0, r4, r5
 800ce70:	4653      	mov	r3, sl
 800ce72:	4632      	mov	r2, r6
 800ce74:	f000 ffd8 	bl	800de28 <_dtoa_r>
 800ce78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce7c:	4607      	mov	r7, r0
 800ce7e:	d102      	bne.n	800ce86 <__cvt+0x66>
 800ce80:	f019 0f01 	tst.w	r9, #1
 800ce84:	d022      	beq.n	800cecc <__cvt+0xac>
 800ce86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce8a:	eb07 0906 	add.w	r9, r7, r6
 800ce8e:	d110      	bne.n	800ceb2 <__cvt+0x92>
 800ce90:	783b      	ldrb	r3, [r7, #0]
 800ce92:	2b30      	cmp	r3, #48	; 0x30
 800ce94:	d10a      	bne.n	800ceac <__cvt+0x8c>
 800ce96:	2200      	movs	r2, #0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 fe2b 	bl	8000af8 <__aeabi_dcmpeq>
 800cea2:	b918      	cbnz	r0, 800ceac <__cvt+0x8c>
 800cea4:	f1c6 0601 	rsb	r6, r6, #1
 800cea8:	f8ca 6000 	str.w	r6, [sl]
 800ceac:	f8da 3000 	ldr.w	r3, [sl]
 800ceb0:	4499      	add	r9, r3
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7f3 fe1d 	bl	8000af8 <__aeabi_dcmpeq>
 800cebe:	b108      	cbz	r0, 800cec4 <__cvt+0xa4>
 800cec0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cec4:	2230      	movs	r2, #48	; 0x30
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	454b      	cmp	r3, r9
 800ceca:	d307      	bcc.n	800cedc <__cvt+0xbc>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ced0:	1bdb      	subs	r3, r3, r7
 800ced2:	4638      	mov	r0, r7
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	b004      	add	sp, #16
 800ced8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cedc:	1c59      	adds	r1, r3, #1
 800cede:	9103      	str	r1, [sp, #12]
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	e7f0      	b.n	800cec6 <__cvt+0xa6>

0800cee4 <__exponent>:
 800cee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cee6:	4603      	mov	r3, r0
 800cee8:	2900      	cmp	r1, #0
 800ceea:	bfb8      	it	lt
 800ceec:	4249      	neglt	r1, r1
 800ceee:	f803 2b02 	strb.w	r2, [r3], #2
 800cef2:	bfb4      	ite	lt
 800cef4:	222d      	movlt	r2, #45	; 0x2d
 800cef6:	222b      	movge	r2, #43	; 0x2b
 800cef8:	2909      	cmp	r1, #9
 800cefa:	7042      	strb	r2, [r0, #1]
 800cefc:	dd2a      	ble.n	800cf54 <__exponent+0x70>
 800cefe:	f10d 0207 	add.w	r2, sp, #7
 800cf02:	4617      	mov	r7, r2
 800cf04:	260a      	movs	r6, #10
 800cf06:	4694      	mov	ip, r2
 800cf08:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf0c:	fb06 1415 	mls	r4, r6, r5, r1
 800cf10:	3430      	adds	r4, #48	; 0x30
 800cf12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cf16:	460c      	mov	r4, r1
 800cf18:	2c63      	cmp	r4, #99	; 0x63
 800cf1a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cf1e:	4629      	mov	r1, r5
 800cf20:	dcf1      	bgt.n	800cf06 <__exponent+0x22>
 800cf22:	3130      	adds	r1, #48	; 0x30
 800cf24:	f1ac 0402 	sub.w	r4, ip, #2
 800cf28:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf2c:	1c41      	adds	r1, r0, #1
 800cf2e:	4622      	mov	r2, r4
 800cf30:	42ba      	cmp	r2, r7
 800cf32:	d30a      	bcc.n	800cf4a <__exponent+0x66>
 800cf34:	f10d 0209 	add.w	r2, sp, #9
 800cf38:	eba2 020c 	sub.w	r2, r2, ip
 800cf3c:	42bc      	cmp	r4, r7
 800cf3e:	bf88      	it	hi
 800cf40:	2200      	movhi	r2, #0
 800cf42:	4413      	add	r3, r2
 800cf44:	1a18      	subs	r0, r3, r0
 800cf46:	b003      	add	sp, #12
 800cf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cf52:	e7ed      	b.n	800cf30 <__exponent+0x4c>
 800cf54:	2330      	movs	r3, #48	; 0x30
 800cf56:	3130      	adds	r1, #48	; 0x30
 800cf58:	7083      	strb	r3, [r0, #2]
 800cf5a:	70c1      	strb	r1, [r0, #3]
 800cf5c:	1d03      	adds	r3, r0, #4
 800cf5e:	e7f1      	b.n	800cf44 <__exponent+0x60>

0800cf60 <_printf_float>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	ed2d 8b02 	vpush	{d8}
 800cf68:	b08d      	sub	sp, #52	; 0x34
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf70:	4616      	mov	r6, r2
 800cf72:	461f      	mov	r7, r3
 800cf74:	4605      	mov	r5, r0
 800cf76:	f000 fddb 	bl	800db30 <_localeconv_r>
 800cf7a:	f8d0 a000 	ldr.w	sl, [r0]
 800cf7e:	4650      	mov	r0, sl
 800cf80:	f7f3 f98e 	bl	80002a0 <strlen>
 800cf84:	2300      	movs	r3, #0
 800cf86:	930a      	str	r3, [sp, #40]	; 0x28
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	9305      	str	r3, [sp, #20]
 800cf8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf94:	3307      	adds	r3, #7
 800cf96:	f023 0307 	bic.w	r3, r3, #7
 800cf9a:	f103 0208 	add.w	r2, r3, #8
 800cf9e:	f8c8 2000 	str.w	r2, [r8]
 800cfa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfaa:	9307      	str	r3, [sp, #28]
 800cfac:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfb0:	ee08 0a10 	vmov	s16, r0
 800cfb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cfb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfbc:	4b9e      	ldr	r3, [pc, #632]	; (800d238 <_printf_float+0x2d8>)
 800cfbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc2:	f7f3 fdcb 	bl	8000b5c <__aeabi_dcmpun>
 800cfc6:	bb88      	cbnz	r0, 800d02c <_printf_float+0xcc>
 800cfc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfcc:	4b9a      	ldr	r3, [pc, #616]	; (800d238 <_printf_float+0x2d8>)
 800cfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfd2:	f7f3 fda5 	bl	8000b20 <__aeabi_dcmple>
 800cfd6:	bb48      	cbnz	r0, 800d02c <_printf_float+0xcc>
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2300      	movs	r3, #0
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 fd94 	bl	8000b0c <__aeabi_dcmplt>
 800cfe4:	b110      	cbz	r0, 800cfec <_printf_float+0x8c>
 800cfe6:	232d      	movs	r3, #45	; 0x2d
 800cfe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfec:	4a93      	ldr	r2, [pc, #588]	; (800d23c <_printf_float+0x2dc>)
 800cfee:	4b94      	ldr	r3, [pc, #592]	; (800d240 <_printf_float+0x2e0>)
 800cff0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cff4:	bf94      	ite	ls
 800cff6:	4690      	movls	r8, r2
 800cff8:	4698      	movhi	r8, r3
 800cffa:	2303      	movs	r3, #3
 800cffc:	6123      	str	r3, [r4, #16]
 800cffe:	9b05      	ldr	r3, [sp, #20]
 800d000:	f023 0304 	bic.w	r3, r3, #4
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	f04f 0900 	mov.w	r9, #0
 800d00a:	9700      	str	r7, [sp, #0]
 800d00c:	4633      	mov	r3, r6
 800d00e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d010:	4621      	mov	r1, r4
 800d012:	4628      	mov	r0, r5
 800d014:	f000 f9da 	bl	800d3cc <_printf_common>
 800d018:	3001      	adds	r0, #1
 800d01a:	f040 8090 	bne.w	800d13e <_printf_float+0x1de>
 800d01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d022:	b00d      	add	sp, #52	; 0x34
 800d024:	ecbd 8b02 	vpop	{d8}
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	4642      	mov	r2, r8
 800d02e:	464b      	mov	r3, r9
 800d030:	4640      	mov	r0, r8
 800d032:	4649      	mov	r1, r9
 800d034:	f7f3 fd92 	bl	8000b5c <__aeabi_dcmpun>
 800d038:	b140      	cbz	r0, 800d04c <_printf_float+0xec>
 800d03a:	464b      	mov	r3, r9
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	bfbc      	itt	lt
 800d040:	232d      	movlt	r3, #45	; 0x2d
 800d042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d046:	4a7f      	ldr	r2, [pc, #508]	; (800d244 <_printf_float+0x2e4>)
 800d048:	4b7f      	ldr	r3, [pc, #508]	; (800d248 <_printf_float+0x2e8>)
 800d04a:	e7d1      	b.n	800cff0 <_printf_float+0x90>
 800d04c:	6863      	ldr	r3, [r4, #4]
 800d04e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d052:	9206      	str	r2, [sp, #24]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	d13f      	bne.n	800d0d8 <_printf_float+0x178>
 800d058:	2306      	movs	r3, #6
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	9b05      	ldr	r3, [sp, #20]
 800d05e:	6861      	ldr	r1, [r4, #4]
 800d060:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d064:	2300      	movs	r3, #0
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	ab0a      	add	r3, sp, #40	; 0x28
 800d06a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d06e:	ab09      	add	r3, sp, #36	; 0x24
 800d070:	ec49 8b10 	vmov	d0, r8, r9
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d07c:	4628      	mov	r0, r5
 800d07e:	f7ff fecf 	bl	800ce20 <__cvt>
 800d082:	9b06      	ldr	r3, [sp, #24]
 800d084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d086:	2b47      	cmp	r3, #71	; 0x47
 800d088:	4680      	mov	r8, r0
 800d08a:	d108      	bne.n	800d09e <_printf_float+0x13e>
 800d08c:	1cc8      	adds	r0, r1, #3
 800d08e:	db02      	blt.n	800d096 <_printf_float+0x136>
 800d090:	6863      	ldr	r3, [r4, #4]
 800d092:	4299      	cmp	r1, r3
 800d094:	dd41      	ble.n	800d11a <_printf_float+0x1ba>
 800d096:	f1ab 0302 	sub.w	r3, fp, #2
 800d09a:	fa5f fb83 	uxtb.w	fp, r3
 800d09e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0a2:	d820      	bhi.n	800d0e6 <_printf_float+0x186>
 800d0a4:	3901      	subs	r1, #1
 800d0a6:	465a      	mov	r2, fp
 800d0a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0ac:	9109      	str	r1, [sp, #36]	; 0x24
 800d0ae:	f7ff ff19 	bl	800cee4 <__exponent>
 800d0b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0b4:	1813      	adds	r3, r2, r0
 800d0b6:	2a01      	cmp	r2, #1
 800d0b8:	4681      	mov	r9, r0
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	dc02      	bgt.n	800d0c4 <_printf_float+0x164>
 800d0be:	6822      	ldr	r2, [r4, #0]
 800d0c0:	07d2      	lsls	r2, r2, #31
 800d0c2:	d501      	bpl.n	800d0c8 <_printf_float+0x168>
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	6123      	str	r3, [r4, #16]
 800d0c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d09c      	beq.n	800d00a <_printf_float+0xaa>
 800d0d0:	232d      	movs	r3, #45	; 0x2d
 800d0d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0d6:	e798      	b.n	800d00a <_printf_float+0xaa>
 800d0d8:	9a06      	ldr	r2, [sp, #24]
 800d0da:	2a47      	cmp	r2, #71	; 0x47
 800d0dc:	d1be      	bne.n	800d05c <_printf_float+0xfc>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1bc      	bne.n	800d05c <_printf_float+0xfc>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e7b9      	b.n	800d05a <_printf_float+0xfa>
 800d0e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d0ea:	d118      	bne.n	800d11e <_printf_float+0x1be>
 800d0ec:	2900      	cmp	r1, #0
 800d0ee:	6863      	ldr	r3, [r4, #4]
 800d0f0:	dd0b      	ble.n	800d10a <_printf_float+0x1aa>
 800d0f2:	6121      	str	r1, [r4, #16]
 800d0f4:	b913      	cbnz	r3, 800d0fc <_printf_float+0x19c>
 800d0f6:	6822      	ldr	r2, [r4, #0]
 800d0f8:	07d0      	lsls	r0, r2, #31
 800d0fa:	d502      	bpl.n	800d102 <_printf_float+0x1a2>
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	440b      	add	r3, r1
 800d100:	6123      	str	r3, [r4, #16]
 800d102:	65a1      	str	r1, [r4, #88]	; 0x58
 800d104:	f04f 0900 	mov.w	r9, #0
 800d108:	e7de      	b.n	800d0c8 <_printf_float+0x168>
 800d10a:	b913      	cbnz	r3, 800d112 <_printf_float+0x1b2>
 800d10c:	6822      	ldr	r2, [r4, #0]
 800d10e:	07d2      	lsls	r2, r2, #31
 800d110:	d501      	bpl.n	800d116 <_printf_float+0x1b6>
 800d112:	3302      	adds	r3, #2
 800d114:	e7f4      	b.n	800d100 <_printf_float+0x1a0>
 800d116:	2301      	movs	r3, #1
 800d118:	e7f2      	b.n	800d100 <_printf_float+0x1a0>
 800d11a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d120:	4299      	cmp	r1, r3
 800d122:	db05      	blt.n	800d130 <_printf_float+0x1d0>
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	6121      	str	r1, [r4, #16]
 800d128:	07d8      	lsls	r0, r3, #31
 800d12a:	d5ea      	bpl.n	800d102 <_printf_float+0x1a2>
 800d12c:	1c4b      	adds	r3, r1, #1
 800d12e:	e7e7      	b.n	800d100 <_printf_float+0x1a0>
 800d130:	2900      	cmp	r1, #0
 800d132:	bfd4      	ite	le
 800d134:	f1c1 0202 	rsble	r2, r1, #2
 800d138:	2201      	movgt	r2, #1
 800d13a:	4413      	add	r3, r2
 800d13c:	e7e0      	b.n	800d100 <_printf_float+0x1a0>
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	055a      	lsls	r2, r3, #21
 800d142:	d407      	bmi.n	800d154 <_printf_float+0x1f4>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	4642      	mov	r2, r8
 800d148:	4631      	mov	r1, r6
 800d14a:	4628      	mov	r0, r5
 800d14c:	47b8      	blx	r7
 800d14e:	3001      	adds	r0, #1
 800d150:	d12c      	bne.n	800d1ac <_printf_float+0x24c>
 800d152:	e764      	b.n	800d01e <_printf_float+0xbe>
 800d154:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d158:	f240 80e0 	bls.w	800d31c <_printf_float+0x3bc>
 800d15c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d160:	2200      	movs	r2, #0
 800d162:	2300      	movs	r3, #0
 800d164:	f7f3 fcc8 	bl	8000af8 <__aeabi_dcmpeq>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d034      	beq.n	800d1d6 <_printf_float+0x276>
 800d16c:	4a37      	ldr	r2, [pc, #220]	; (800d24c <_printf_float+0x2ec>)
 800d16e:	2301      	movs	r3, #1
 800d170:	4631      	mov	r1, r6
 800d172:	4628      	mov	r0, r5
 800d174:	47b8      	blx	r7
 800d176:	3001      	adds	r0, #1
 800d178:	f43f af51 	beq.w	800d01e <_printf_float+0xbe>
 800d17c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d180:	429a      	cmp	r2, r3
 800d182:	db02      	blt.n	800d18a <_printf_float+0x22a>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	07d8      	lsls	r0, r3, #31
 800d188:	d510      	bpl.n	800d1ac <_printf_float+0x24c>
 800d18a:	ee18 3a10 	vmov	r3, s16
 800d18e:	4652      	mov	r2, sl
 800d190:	4631      	mov	r1, r6
 800d192:	4628      	mov	r0, r5
 800d194:	47b8      	blx	r7
 800d196:	3001      	adds	r0, #1
 800d198:	f43f af41 	beq.w	800d01e <_printf_float+0xbe>
 800d19c:	f04f 0800 	mov.w	r8, #0
 800d1a0:	f104 091a 	add.w	r9, r4, #26
 800d1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	4543      	cmp	r3, r8
 800d1aa:	dc09      	bgt.n	800d1c0 <_printf_float+0x260>
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	079b      	lsls	r3, r3, #30
 800d1b0:	f100 8107 	bmi.w	800d3c2 <_printf_float+0x462>
 800d1b4:	68e0      	ldr	r0, [r4, #12]
 800d1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b8:	4298      	cmp	r0, r3
 800d1ba:	bfb8      	it	lt
 800d1bc:	4618      	movlt	r0, r3
 800d1be:	e730      	b.n	800d022 <_printf_float+0xc2>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	464a      	mov	r2, r9
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f43f af27 	beq.w	800d01e <_printf_float+0xbe>
 800d1d0:	f108 0801 	add.w	r8, r8, #1
 800d1d4:	e7e6      	b.n	800d1a4 <_printf_float+0x244>
 800d1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	dc39      	bgt.n	800d250 <_printf_float+0x2f0>
 800d1dc:	4a1b      	ldr	r2, [pc, #108]	; (800d24c <_printf_float+0x2ec>)
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f43f af19 	beq.w	800d01e <_printf_float+0xbe>
 800d1ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	d102      	bne.n	800d1fa <_printf_float+0x29a>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	07d9      	lsls	r1, r3, #31
 800d1f8:	d5d8      	bpl.n	800d1ac <_printf_float+0x24c>
 800d1fa:	ee18 3a10 	vmov	r3, s16
 800d1fe:	4652      	mov	r2, sl
 800d200:	4631      	mov	r1, r6
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	f43f af09 	beq.w	800d01e <_printf_float+0xbe>
 800d20c:	f04f 0900 	mov.w	r9, #0
 800d210:	f104 0a1a 	add.w	sl, r4, #26
 800d214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d216:	425b      	negs	r3, r3
 800d218:	454b      	cmp	r3, r9
 800d21a:	dc01      	bgt.n	800d220 <_printf_float+0x2c0>
 800d21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d21e:	e792      	b.n	800d146 <_printf_float+0x1e6>
 800d220:	2301      	movs	r3, #1
 800d222:	4652      	mov	r2, sl
 800d224:	4631      	mov	r1, r6
 800d226:	4628      	mov	r0, r5
 800d228:	47b8      	blx	r7
 800d22a:	3001      	adds	r0, #1
 800d22c:	f43f aef7 	beq.w	800d01e <_printf_float+0xbe>
 800d230:	f109 0901 	add.w	r9, r9, #1
 800d234:	e7ee      	b.n	800d214 <_printf_float+0x2b4>
 800d236:	bf00      	nop
 800d238:	7fefffff 	.word	0x7fefffff
 800d23c:	080116c1 	.word	0x080116c1
 800d240:	080116c5 	.word	0x080116c5
 800d244:	080116c9 	.word	0x080116c9
 800d248:	080116cd 	.word	0x080116cd
 800d24c:	080116d1 	.word	0x080116d1
 800d250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d254:	429a      	cmp	r2, r3
 800d256:	bfa8      	it	ge
 800d258:	461a      	movge	r2, r3
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	4691      	mov	r9, r2
 800d25e:	dc37      	bgt.n	800d2d0 <_printf_float+0x370>
 800d260:	f04f 0b00 	mov.w	fp, #0
 800d264:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d268:	f104 021a 	add.w	r2, r4, #26
 800d26c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d26e:	9305      	str	r3, [sp, #20]
 800d270:	eba3 0309 	sub.w	r3, r3, r9
 800d274:	455b      	cmp	r3, fp
 800d276:	dc33      	bgt.n	800d2e0 <_printf_float+0x380>
 800d278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d27c:	429a      	cmp	r2, r3
 800d27e:	db3b      	blt.n	800d2f8 <_printf_float+0x398>
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	07da      	lsls	r2, r3, #31
 800d284:	d438      	bmi.n	800d2f8 <_printf_float+0x398>
 800d286:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d28a:	eba2 0903 	sub.w	r9, r2, r3
 800d28e:	9b05      	ldr	r3, [sp, #20]
 800d290:	1ad2      	subs	r2, r2, r3
 800d292:	4591      	cmp	r9, r2
 800d294:	bfa8      	it	ge
 800d296:	4691      	movge	r9, r2
 800d298:	f1b9 0f00 	cmp.w	r9, #0
 800d29c:	dc35      	bgt.n	800d30a <_printf_float+0x3aa>
 800d29e:	f04f 0800 	mov.w	r8, #0
 800d2a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2a6:	f104 0a1a 	add.w	sl, r4, #26
 800d2aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	eba3 0309 	sub.w	r3, r3, r9
 800d2b4:	4543      	cmp	r3, r8
 800d2b6:	f77f af79 	ble.w	800d1ac <_printf_float+0x24c>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	4652      	mov	r2, sl
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	47b8      	blx	r7
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	f43f aeaa 	beq.w	800d01e <_printf_float+0xbe>
 800d2ca:	f108 0801 	add.w	r8, r8, #1
 800d2ce:	e7ec      	b.n	800d2aa <_printf_float+0x34a>
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	47b8      	blx	r7
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d1c0      	bne.n	800d260 <_printf_float+0x300>
 800d2de:	e69e      	b.n	800d01e <_printf_float+0xbe>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	9205      	str	r2, [sp, #20]
 800d2e8:	47b8      	blx	r7
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	f43f ae97 	beq.w	800d01e <_printf_float+0xbe>
 800d2f0:	9a05      	ldr	r2, [sp, #20]
 800d2f2:	f10b 0b01 	add.w	fp, fp, #1
 800d2f6:	e7b9      	b.n	800d26c <_printf_float+0x30c>
 800d2f8:	ee18 3a10 	vmov	r3, s16
 800d2fc:	4652      	mov	r2, sl
 800d2fe:	4631      	mov	r1, r6
 800d300:	4628      	mov	r0, r5
 800d302:	47b8      	blx	r7
 800d304:	3001      	adds	r0, #1
 800d306:	d1be      	bne.n	800d286 <_printf_float+0x326>
 800d308:	e689      	b.n	800d01e <_printf_float+0xbe>
 800d30a:	9a05      	ldr	r2, [sp, #20]
 800d30c:	464b      	mov	r3, r9
 800d30e:	4442      	add	r2, r8
 800d310:	4631      	mov	r1, r6
 800d312:	4628      	mov	r0, r5
 800d314:	47b8      	blx	r7
 800d316:	3001      	adds	r0, #1
 800d318:	d1c1      	bne.n	800d29e <_printf_float+0x33e>
 800d31a:	e680      	b.n	800d01e <_printf_float+0xbe>
 800d31c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d31e:	2a01      	cmp	r2, #1
 800d320:	dc01      	bgt.n	800d326 <_printf_float+0x3c6>
 800d322:	07db      	lsls	r3, r3, #31
 800d324:	d53a      	bpl.n	800d39c <_printf_float+0x43c>
 800d326:	2301      	movs	r3, #1
 800d328:	4642      	mov	r2, r8
 800d32a:	4631      	mov	r1, r6
 800d32c:	4628      	mov	r0, r5
 800d32e:	47b8      	blx	r7
 800d330:	3001      	adds	r0, #1
 800d332:	f43f ae74 	beq.w	800d01e <_printf_float+0xbe>
 800d336:	ee18 3a10 	vmov	r3, s16
 800d33a:	4652      	mov	r2, sl
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	47b8      	blx	r7
 800d342:	3001      	adds	r0, #1
 800d344:	f43f ae6b 	beq.w	800d01e <_printf_float+0xbe>
 800d348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d354:	f7f3 fbd0 	bl	8000af8 <__aeabi_dcmpeq>
 800d358:	b9d8      	cbnz	r0, 800d392 <_printf_float+0x432>
 800d35a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d35e:	f108 0201 	add.w	r2, r8, #1
 800d362:	4631      	mov	r1, r6
 800d364:	4628      	mov	r0, r5
 800d366:	47b8      	blx	r7
 800d368:	3001      	adds	r0, #1
 800d36a:	d10e      	bne.n	800d38a <_printf_float+0x42a>
 800d36c:	e657      	b.n	800d01e <_printf_float+0xbe>
 800d36e:	2301      	movs	r3, #1
 800d370:	4652      	mov	r2, sl
 800d372:	4631      	mov	r1, r6
 800d374:	4628      	mov	r0, r5
 800d376:	47b8      	blx	r7
 800d378:	3001      	adds	r0, #1
 800d37a:	f43f ae50 	beq.w	800d01e <_printf_float+0xbe>
 800d37e:	f108 0801 	add.w	r8, r8, #1
 800d382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d384:	3b01      	subs	r3, #1
 800d386:	4543      	cmp	r3, r8
 800d388:	dcf1      	bgt.n	800d36e <_printf_float+0x40e>
 800d38a:	464b      	mov	r3, r9
 800d38c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d390:	e6da      	b.n	800d148 <_printf_float+0x1e8>
 800d392:	f04f 0800 	mov.w	r8, #0
 800d396:	f104 0a1a 	add.w	sl, r4, #26
 800d39a:	e7f2      	b.n	800d382 <_printf_float+0x422>
 800d39c:	2301      	movs	r3, #1
 800d39e:	4642      	mov	r2, r8
 800d3a0:	e7df      	b.n	800d362 <_printf_float+0x402>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	464a      	mov	r2, r9
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	47b8      	blx	r7
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	f43f ae36 	beq.w	800d01e <_printf_float+0xbe>
 800d3b2:	f108 0801 	add.w	r8, r8, #1
 800d3b6:	68e3      	ldr	r3, [r4, #12]
 800d3b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3ba:	1a5b      	subs	r3, r3, r1
 800d3bc:	4543      	cmp	r3, r8
 800d3be:	dcf0      	bgt.n	800d3a2 <_printf_float+0x442>
 800d3c0:	e6f8      	b.n	800d1b4 <_printf_float+0x254>
 800d3c2:	f04f 0800 	mov.w	r8, #0
 800d3c6:	f104 0919 	add.w	r9, r4, #25
 800d3ca:	e7f4      	b.n	800d3b6 <_printf_float+0x456>

0800d3cc <_printf_common>:
 800d3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d0:	4616      	mov	r6, r2
 800d3d2:	4699      	mov	r9, r3
 800d3d4:	688a      	ldr	r2, [r1, #8]
 800d3d6:	690b      	ldr	r3, [r1, #16]
 800d3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	bfb8      	it	lt
 800d3e0:	4613      	movlt	r3, r2
 800d3e2:	6033      	str	r3, [r6, #0]
 800d3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3e8:	4607      	mov	r7, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	b10a      	cbz	r2, 800d3f2 <_printf_common+0x26>
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	6033      	str	r3, [r6, #0]
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	0699      	lsls	r1, r3, #26
 800d3f6:	bf42      	ittt	mi
 800d3f8:	6833      	ldrmi	r3, [r6, #0]
 800d3fa:	3302      	addmi	r3, #2
 800d3fc:	6033      	strmi	r3, [r6, #0]
 800d3fe:	6825      	ldr	r5, [r4, #0]
 800d400:	f015 0506 	ands.w	r5, r5, #6
 800d404:	d106      	bne.n	800d414 <_printf_common+0x48>
 800d406:	f104 0a19 	add.w	sl, r4, #25
 800d40a:	68e3      	ldr	r3, [r4, #12]
 800d40c:	6832      	ldr	r2, [r6, #0]
 800d40e:	1a9b      	subs	r3, r3, r2
 800d410:	42ab      	cmp	r3, r5
 800d412:	dc26      	bgt.n	800d462 <_printf_common+0x96>
 800d414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d418:	1e13      	subs	r3, r2, #0
 800d41a:	6822      	ldr	r2, [r4, #0]
 800d41c:	bf18      	it	ne
 800d41e:	2301      	movne	r3, #1
 800d420:	0692      	lsls	r2, r2, #26
 800d422:	d42b      	bmi.n	800d47c <_printf_common+0xb0>
 800d424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d428:	4649      	mov	r1, r9
 800d42a:	4638      	mov	r0, r7
 800d42c:	47c0      	blx	r8
 800d42e:	3001      	adds	r0, #1
 800d430:	d01e      	beq.n	800d470 <_printf_common+0xa4>
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	6922      	ldr	r2, [r4, #16]
 800d436:	f003 0306 	and.w	r3, r3, #6
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	bf02      	ittt	eq
 800d43e:	68e5      	ldreq	r5, [r4, #12]
 800d440:	6833      	ldreq	r3, [r6, #0]
 800d442:	1aed      	subeq	r5, r5, r3
 800d444:	68a3      	ldr	r3, [r4, #8]
 800d446:	bf0c      	ite	eq
 800d448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d44c:	2500      	movne	r5, #0
 800d44e:	4293      	cmp	r3, r2
 800d450:	bfc4      	itt	gt
 800d452:	1a9b      	subgt	r3, r3, r2
 800d454:	18ed      	addgt	r5, r5, r3
 800d456:	2600      	movs	r6, #0
 800d458:	341a      	adds	r4, #26
 800d45a:	42b5      	cmp	r5, r6
 800d45c:	d11a      	bne.n	800d494 <_printf_common+0xc8>
 800d45e:	2000      	movs	r0, #0
 800d460:	e008      	b.n	800d474 <_printf_common+0xa8>
 800d462:	2301      	movs	r3, #1
 800d464:	4652      	mov	r2, sl
 800d466:	4649      	mov	r1, r9
 800d468:	4638      	mov	r0, r7
 800d46a:	47c0      	blx	r8
 800d46c:	3001      	adds	r0, #1
 800d46e:	d103      	bne.n	800d478 <_printf_common+0xac>
 800d470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d478:	3501      	adds	r5, #1
 800d47a:	e7c6      	b.n	800d40a <_printf_common+0x3e>
 800d47c:	18e1      	adds	r1, r4, r3
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	2030      	movs	r0, #48	; 0x30
 800d482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d486:	4422      	add	r2, r4
 800d488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d48c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d490:	3302      	adds	r3, #2
 800d492:	e7c7      	b.n	800d424 <_printf_common+0x58>
 800d494:	2301      	movs	r3, #1
 800d496:	4622      	mov	r2, r4
 800d498:	4649      	mov	r1, r9
 800d49a:	4638      	mov	r0, r7
 800d49c:	47c0      	blx	r8
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d0e6      	beq.n	800d470 <_printf_common+0xa4>
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	e7d9      	b.n	800d45a <_printf_common+0x8e>
	...

0800d4a8 <_printf_i>:
 800d4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ac:	7e0f      	ldrb	r7, [r1, #24]
 800d4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4b0:	2f78      	cmp	r7, #120	; 0x78
 800d4b2:	4691      	mov	r9, r2
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	469a      	mov	sl, r3
 800d4ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4be:	d807      	bhi.n	800d4d0 <_printf_i+0x28>
 800d4c0:	2f62      	cmp	r7, #98	; 0x62
 800d4c2:	d80a      	bhi.n	800d4da <_printf_i+0x32>
 800d4c4:	2f00      	cmp	r7, #0
 800d4c6:	f000 80d4 	beq.w	800d672 <_printf_i+0x1ca>
 800d4ca:	2f58      	cmp	r7, #88	; 0x58
 800d4cc:	f000 80c0 	beq.w	800d650 <_printf_i+0x1a8>
 800d4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4d8:	e03a      	b.n	800d550 <_printf_i+0xa8>
 800d4da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4de:	2b15      	cmp	r3, #21
 800d4e0:	d8f6      	bhi.n	800d4d0 <_printf_i+0x28>
 800d4e2:	a101      	add	r1, pc, #4	; (adr r1, 800d4e8 <_printf_i+0x40>)
 800d4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4e8:	0800d541 	.word	0x0800d541
 800d4ec:	0800d555 	.word	0x0800d555
 800d4f0:	0800d4d1 	.word	0x0800d4d1
 800d4f4:	0800d4d1 	.word	0x0800d4d1
 800d4f8:	0800d4d1 	.word	0x0800d4d1
 800d4fc:	0800d4d1 	.word	0x0800d4d1
 800d500:	0800d555 	.word	0x0800d555
 800d504:	0800d4d1 	.word	0x0800d4d1
 800d508:	0800d4d1 	.word	0x0800d4d1
 800d50c:	0800d4d1 	.word	0x0800d4d1
 800d510:	0800d4d1 	.word	0x0800d4d1
 800d514:	0800d659 	.word	0x0800d659
 800d518:	0800d581 	.word	0x0800d581
 800d51c:	0800d613 	.word	0x0800d613
 800d520:	0800d4d1 	.word	0x0800d4d1
 800d524:	0800d4d1 	.word	0x0800d4d1
 800d528:	0800d67b 	.word	0x0800d67b
 800d52c:	0800d4d1 	.word	0x0800d4d1
 800d530:	0800d581 	.word	0x0800d581
 800d534:	0800d4d1 	.word	0x0800d4d1
 800d538:	0800d4d1 	.word	0x0800d4d1
 800d53c:	0800d61b 	.word	0x0800d61b
 800d540:	682b      	ldr	r3, [r5, #0]
 800d542:	1d1a      	adds	r2, r3, #4
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	602a      	str	r2, [r5, #0]
 800d548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d550:	2301      	movs	r3, #1
 800d552:	e09f      	b.n	800d694 <_printf_i+0x1ec>
 800d554:	6820      	ldr	r0, [r4, #0]
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	0607      	lsls	r7, r0, #24
 800d55a:	f103 0104 	add.w	r1, r3, #4
 800d55e:	6029      	str	r1, [r5, #0]
 800d560:	d501      	bpl.n	800d566 <_printf_i+0xbe>
 800d562:	681e      	ldr	r6, [r3, #0]
 800d564:	e003      	b.n	800d56e <_printf_i+0xc6>
 800d566:	0646      	lsls	r6, r0, #25
 800d568:	d5fb      	bpl.n	800d562 <_printf_i+0xba>
 800d56a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d56e:	2e00      	cmp	r6, #0
 800d570:	da03      	bge.n	800d57a <_printf_i+0xd2>
 800d572:	232d      	movs	r3, #45	; 0x2d
 800d574:	4276      	negs	r6, r6
 800d576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d57a:	485a      	ldr	r0, [pc, #360]	; (800d6e4 <_printf_i+0x23c>)
 800d57c:	230a      	movs	r3, #10
 800d57e:	e012      	b.n	800d5a6 <_printf_i+0xfe>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	6820      	ldr	r0, [r4, #0]
 800d584:	1d19      	adds	r1, r3, #4
 800d586:	6029      	str	r1, [r5, #0]
 800d588:	0605      	lsls	r5, r0, #24
 800d58a:	d501      	bpl.n	800d590 <_printf_i+0xe8>
 800d58c:	681e      	ldr	r6, [r3, #0]
 800d58e:	e002      	b.n	800d596 <_printf_i+0xee>
 800d590:	0641      	lsls	r1, r0, #25
 800d592:	d5fb      	bpl.n	800d58c <_printf_i+0xe4>
 800d594:	881e      	ldrh	r6, [r3, #0]
 800d596:	4853      	ldr	r0, [pc, #332]	; (800d6e4 <_printf_i+0x23c>)
 800d598:	2f6f      	cmp	r7, #111	; 0x6f
 800d59a:	bf0c      	ite	eq
 800d59c:	2308      	moveq	r3, #8
 800d59e:	230a      	movne	r3, #10
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5a6:	6865      	ldr	r5, [r4, #4]
 800d5a8:	60a5      	str	r5, [r4, #8]
 800d5aa:	2d00      	cmp	r5, #0
 800d5ac:	bfa2      	ittt	ge
 800d5ae:	6821      	ldrge	r1, [r4, #0]
 800d5b0:	f021 0104 	bicge.w	r1, r1, #4
 800d5b4:	6021      	strge	r1, [r4, #0]
 800d5b6:	b90e      	cbnz	r6, 800d5bc <_printf_i+0x114>
 800d5b8:	2d00      	cmp	r5, #0
 800d5ba:	d04b      	beq.n	800d654 <_printf_i+0x1ac>
 800d5bc:	4615      	mov	r5, r2
 800d5be:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5c2:	fb03 6711 	mls	r7, r3, r1, r6
 800d5c6:	5dc7      	ldrb	r7, [r0, r7]
 800d5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5cc:	4637      	mov	r7, r6
 800d5ce:	42bb      	cmp	r3, r7
 800d5d0:	460e      	mov	r6, r1
 800d5d2:	d9f4      	bls.n	800d5be <_printf_i+0x116>
 800d5d4:	2b08      	cmp	r3, #8
 800d5d6:	d10b      	bne.n	800d5f0 <_printf_i+0x148>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	07de      	lsls	r6, r3, #31
 800d5dc:	d508      	bpl.n	800d5f0 <_printf_i+0x148>
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	6861      	ldr	r1, [r4, #4]
 800d5e2:	4299      	cmp	r1, r3
 800d5e4:	bfde      	ittt	le
 800d5e6:	2330      	movle	r3, #48	; 0x30
 800d5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d5f0:	1b52      	subs	r2, r2, r5
 800d5f2:	6122      	str	r2, [r4, #16]
 800d5f4:	f8cd a000 	str.w	sl, [sp]
 800d5f8:	464b      	mov	r3, r9
 800d5fa:	aa03      	add	r2, sp, #12
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4640      	mov	r0, r8
 800d600:	f7ff fee4 	bl	800d3cc <_printf_common>
 800d604:	3001      	adds	r0, #1
 800d606:	d14a      	bne.n	800d69e <_printf_i+0x1f6>
 800d608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d60c:	b004      	add	sp, #16
 800d60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	f043 0320 	orr.w	r3, r3, #32
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	4833      	ldr	r0, [pc, #204]	; (800d6e8 <_printf_i+0x240>)
 800d61c:	2778      	movs	r7, #120	; 0x78
 800d61e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	6829      	ldr	r1, [r5, #0]
 800d626:	061f      	lsls	r7, r3, #24
 800d628:	f851 6b04 	ldr.w	r6, [r1], #4
 800d62c:	d402      	bmi.n	800d634 <_printf_i+0x18c>
 800d62e:	065f      	lsls	r7, r3, #25
 800d630:	bf48      	it	mi
 800d632:	b2b6      	uxthmi	r6, r6
 800d634:	07df      	lsls	r7, r3, #31
 800d636:	bf48      	it	mi
 800d638:	f043 0320 	orrmi.w	r3, r3, #32
 800d63c:	6029      	str	r1, [r5, #0]
 800d63e:	bf48      	it	mi
 800d640:	6023      	strmi	r3, [r4, #0]
 800d642:	b91e      	cbnz	r6, 800d64c <_printf_i+0x1a4>
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	f023 0320 	bic.w	r3, r3, #32
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	2310      	movs	r3, #16
 800d64e:	e7a7      	b.n	800d5a0 <_printf_i+0xf8>
 800d650:	4824      	ldr	r0, [pc, #144]	; (800d6e4 <_printf_i+0x23c>)
 800d652:	e7e4      	b.n	800d61e <_printf_i+0x176>
 800d654:	4615      	mov	r5, r2
 800d656:	e7bd      	b.n	800d5d4 <_printf_i+0x12c>
 800d658:	682b      	ldr	r3, [r5, #0]
 800d65a:	6826      	ldr	r6, [r4, #0]
 800d65c:	6961      	ldr	r1, [r4, #20]
 800d65e:	1d18      	adds	r0, r3, #4
 800d660:	6028      	str	r0, [r5, #0]
 800d662:	0635      	lsls	r5, r6, #24
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	d501      	bpl.n	800d66c <_printf_i+0x1c4>
 800d668:	6019      	str	r1, [r3, #0]
 800d66a:	e002      	b.n	800d672 <_printf_i+0x1ca>
 800d66c:	0670      	lsls	r0, r6, #25
 800d66e:	d5fb      	bpl.n	800d668 <_printf_i+0x1c0>
 800d670:	8019      	strh	r1, [r3, #0]
 800d672:	2300      	movs	r3, #0
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	4615      	mov	r5, r2
 800d678:	e7bc      	b.n	800d5f4 <_printf_i+0x14c>
 800d67a:	682b      	ldr	r3, [r5, #0]
 800d67c:	1d1a      	adds	r2, r3, #4
 800d67e:	602a      	str	r2, [r5, #0]
 800d680:	681d      	ldr	r5, [r3, #0]
 800d682:	6862      	ldr	r2, [r4, #4]
 800d684:	2100      	movs	r1, #0
 800d686:	4628      	mov	r0, r5
 800d688:	f7f2 fdba 	bl	8000200 <memchr>
 800d68c:	b108      	cbz	r0, 800d692 <_printf_i+0x1ea>
 800d68e:	1b40      	subs	r0, r0, r5
 800d690:	6060      	str	r0, [r4, #4]
 800d692:	6863      	ldr	r3, [r4, #4]
 800d694:	6123      	str	r3, [r4, #16]
 800d696:	2300      	movs	r3, #0
 800d698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d69c:	e7aa      	b.n	800d5f4 <_printf_i+0x14c>
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	47d0      	blx	sl
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d0ad      	beq.n	800d608 <_printf_i+0x160>
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	079b      	lsls	r3, r3, #30
 800d6b0:	d413      	bmi.n	800d6da <_printf_i+0x232>
 800d6b2:	68e0      	ldr	r0, [r4, #12]
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	4298      	cmp	r0, r3
 800d6b8:	bfb8      	it	lt
 800d6ba:	4618      	movlt	r0, r3
 800d6bc:	e7a6      	b.n	800d60c <_printf_i+0x164>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	4632      	mov	r2, r6
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	47d0      	blx	sl
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d09d      	beq.n	800d608 <_printf_i+0x160>
 800d6cc:	3501      	adds	r5, #1
 800d6ce:	68e3      	ldr	r3, [r4, #12]
 800d6d0:	9903      	ldr	r1, [sp, #12]
 800d6d2:	1a5b      	subs	r3, r3, r1
 800d6d4:	42ab      	cmp	r3, r5
 800d6d6:	dcf2      	bgt.n	800d6be <_printf_i+0x216>
 800d6d8:	e7eb      	b.n	800d6b2 <_printf_i+0x20a>
 800d6da:	2500      	movs	r5, #0
 800d6dc:	f104 0619 	add.w	r6, r4, #25
 800d6e0:	e7f5      	b.n	800d6ce <_printf_i+0x226>
 800d6e2:	bf00      	nop
 800d6e4:	080116d3 	.word	0x080116d3
 800d6e8:	080116e4 	.word	0x080116e4

0800d6ec <std>:
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	e9c0 3300 	strd	r3, r3, [r0]
 800d6f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6fa:	6083      	str	r3, [r0, #8]
 800d6fc:	8181      	strh	r1, [r0, #12]
 800d6fe:	6643      	str	r3, [r0, #100]	; 0x64
 800d700:	81c2      	strh	r2, [r0, #14]
 800d702:	6183      	str	r3, [r0, #24]
 800d704:	4619      	mov	r1, r3
 800d706:	2208      	movs	r2, #8
 800d708:	305c      	adds	r0, #92	; 0x5c
 800d70a:	f000 f9f7 	bl	800dafc <memset>
 800d70e:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <std+0x58>)
 800d710:	6263      	str	r3, [r4, #36]	; 0x24
 800d712:	4b0d      	ldr	r3, [pc, #52]	; (800d748 <std+0x5c>)
 800d714:	62a3      	str	r3, [r4, #40]	; 0x28
 800d716:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <std+0x60>)
 800d718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <std+0x64>)
 800d71c:	6323      	str	r3, [r4, #48]	; 0x30
 800d71e:	4b0d      	ldr	r3, [pc, #52]	; (800d754 <std+0x68>)
 800d720:	6224      	str	r4, [r4, #32]
 800d722:	429c      	cmp	r4, r3
 800d724:	d006      	beq.n	800d734 <std+0x48>
 800d726:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d72a:	4294      	cmp	r4, r2
 800d72c:	d002      	beq.n	800d734 <std+0x48>
 800d72e:	33d0      	adds	r3, #208	; 0xd0
 800d730:	429c      	cmp	r4, r3
 800d732:	d105      	bne.n	800d740 <std+0x54>
 800d734:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d73c:	f000 bad2 	b.w	800dce4 <__retarget_lock_init_recursive>
 800d740:	bd10      	pop	{r4, pc}
 800d742:	bf00      	nop
 800d744:	0800d94d 	.word	0x0800d94d
 800d748:	0800d96f 	.word	0x0800d96f
 800d74c:	0800d9a7 	.word	0x0800d9a7
 800d750:	0800d9cb 	.word	0x0800d9cb
 800d754:	20005618 	.word	0x20005618

0800d758 <stdio_exit_handler>:
 800d758:	4a02      	ldr	r2, [pc, #8]	; (800d764 <stdio_exit_handler+0xc>)
 800d75a:	4903      	ldr	r1, [pc, #12]	; (800d768 <stdio_exit_handler+0x10>)
 800d75c:	4803      	ldr	r0, [pc, #12]	; (800d76c <stdio_exit_handler+0x14>)
 800d75e:	f000 b869 	b.w	800d834 <_fwalk_sglue>
 800d762:	bf00      	nop
 800d764:	200000ec 	.word	0x200000ec
 800d768:	0800fe91 	.word	0x0800fe91
 800d76c:	20000264 	.word	0x20000264

0800d770 <cleanup_stdio>:
 800d770:	6841      	ldr	r1, [r0, #4]
 800d772:	4b0c      	ldr	r3, [pc, #48]	; (800d7a4 <cleanup_stdio+0x34>)
 800d774:	4299      	cmp	r1, r3
 800d776:	b510      	push	{r4, lr}
 800d778:	4604      	mov	r4, r0
 800d77a:	d001      	beq.n	800d780 <cleanup_stdio+0x10>
 800d77c:	f002 fb88 	bl	800fe90 <_fflush_r>
 800d780:	68a1      	ldr	r1, [r4, #8]
 800d782:	4b09      	ldr	r3, [pc, #36]	; (800d7a8 <cleanup_stdio+0x38>)
 800d784:	4299      	cmp	r1, r3
 800d786:	d002      	beq.n	800d78e <cleanup_stdio+0x1e>
 800d788:	4620      	mov	r0, r4
 800d78a:	f002 fb81 	bl	800fe90 <_fflush_r>
 800d78e:	68e1      	ldr	r1, [r4, #12]
 800d790:	4b06      	ldr	r3, [pc, #24]	; (800d7ac <cleanup_stdio+0x3c>)
 800d792:	4299      	cmp	r1, r3
 800d794:	d004      	beq.n	800d7a0 <cleanup_stdio+0x30>
 800d796:	4620      	mov	r0, r4
 800d798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d79c:	f002 bb78 	b.w	800fe90 <_fflush_r>
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20005618 	.word	0x20005618
 800d7a8:	20005680 	.word	0x20005680
 800d7ac:	200056e8 	.word	0x200056e8

0800d7b0 <global_stdio_init.part.0>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <global_stdio_init.part.0+0x30>)
 800d7b4:	4c0b      	ldr	r4, [pc, #44]	; (800d7e4 <global_stdio_init.part.0+0x34>)
 800d7b6:	4a0c      	ldr	r2, [pc, #48]	; (800d7e8 <global_stdio_init.part.0+0x38>)
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2104      	movs	r1, #4
 800d7c0:	f7ff ff94 	bl	800d6ec <std>
 800d7c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	2109      	movs	r1, #9
 800d7cc:	f7ff ff8e 	bl	800d6ec <std>
 800d7d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7da:	2112      	movs	r1, #18
 800d7dc:	f7ff bf86 	b.w	800d6ec <std>
 800d7e0:	20005750 	.word	0x20005750
 800d7e4:	20005618 	.word	0x20005618
 800d7e8:	0800d759 	.word	0x0800d759

0800d7ec <__sfp_lock_acquire>:
 800d7ec:	4801      	ldr	r0, [pc, #4]	; (800d7f4 <__sfp_lock_acquire+0x8>)
 800d7ee:	f000 ba7a 	b.w	800dce6 <__retarget_lock_acquire_recursive>
 800d7f2:	bf00      	nop
 800d7f4:	20005759 	.word	0x20005759

0800d7f8 <__sfp_lock_release>:
 800d7f8:	4801      	ldr	r0, [pc, #4]	; (800d800 <__sfp_lock_release+0x8>)
 800d7fa:	f000 ba75 	b.w	800dce8 <__retarget_lock_release_recursive>
 800d7fe:	bf00      	nop
 800d800:	20005759 	.word	0x20005759

0800d804 <__sinit>:
 800d804:	b510      	push	{r4, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	f7ff fff0 	bl	800d7ec <__sfp_lock_acquire>
 800d80c:	6a23      	ldr	r3, [r4, #32]
 800d80e:	b11b      	cbz	r3, 800d818 <__sinit+0x14>
 800d810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d814:	f7ff bff0 	b.w	800d7f8 <__sfp_lock_release>
 800d818:	4b04      	ldr	r3, [pc, #16]	; (800d82c <__sinit+0x28>)
 800d81a:	6223      	str	r3, [r4, #32]
 800d81c:	4b04      	ldr	r3, [pc, #16]	; (800d830 <__sinit+0x2c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1f5      	bne.n	800d810 <__sinit+0xc>
 800d824:	f7ff ffc4 	bl	800d7b0 <global_stdio_init.part.0>
 800d828:	e7f2      	b.n	800d810 <__sinit+0xc>
 800d82a:	bf00      	nop
 800d82c:	0800d771 	.word	0x0800d771
 800d830:	20005750 	.word	0x20005750

0800d834 <_fwalk_sglue>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	4607      	mov	r7, r0
 800d83a:	4688      	mov	r8, r1
 800d83c:	4614      	mov	r4, r2
 800d83e:	2600      	movs	r6, #0
 800d840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d844:	f1b9 0901 	subs.w	r9, r9, #1
 800d848:	d505      	bpl.n	800d856 <_fwalk_sglue+0x22>
 800d84a:	6824      	ldr	r4, [r4, #0]
 800d84c:	2c00      	cmp	r4, #0
 800d84e:	d1f7      	bne.n	800d840 <_fwalk_sglue+0xc>
 800d850:	4630      	mov	r0, r6
 800d852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d907      	bls.n	800d86c <_fwalk_sglue+0x38>
 800d85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d860:	3301      	adds	r3, #1
 800d862:	d003      	beq.n	800d86c <_fwalk_sglue+0x38>
 800d864:	4629      	mov	r1, r5
 800d866:	4638      	mov	r0, r7
 800d868:	47c0      	blx	r8
 800d86a:	4306      	orrs	r6, r0
 800d86c:	3568      	adds	r5, #104	; 0x68
 800d86e:	e7e9      	b.n	800d844 <_fwalk_sglue+0x10>

0800d870 <iprintf>:
 800d870:	b40f      	push	{r0, r1, r2, r3}
 800d872:	b507      	push	{r0, r1, r2, lr}
 800d874:	4906      	ldr	r1, [pc, #24]	; (800d890 <iprintf+0x20>)
 800d876:	ab04      	add	r3, sp, #16
 800d878:	6808      	ldr	r0, [r1, #0]
 800d87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87e:	6881      	ldr	r1, [r0, #8]
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	f002 f965 	bl	800fb50 <_vfiprintf_r>
 800d886:	b003      	add	sp, #12
 800d888:	f85d eb04 	ldr.w	lr, [sp], #4
 800d88c:	b004      	add	sp, #16
 800d88e:	4770      	bx	lr
 800d890:	200002b0 	.word	0x200002b0

0800d894 <_puts_r>:
 800d894:	6a03      	ldr	r3, [r0, #32]
 800d896:	b570      	push	{r4, r5, r6, lr}
 800d898:	6884      	ldr	r4, [r0, #8]
 800d89a:	4605      	mov	r5, r0
 800d89c:	460e      	mov	r6, r1
 800d89e:	b90b      	cbnz	r3, 800d8a4 <_puts_r+0x10>
 800d8a0:	f7ff ffb0 	bl	800d804 <__sinit>
 800d8a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8a6:	07db      	lsls	r3, r3, #31
 800d8a8:	d405      	bmi.n	800d8b6 <_puts_r+0x22>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	0598      	lsls	r0, r3, #22
 800d8ae:	d402      	bmi.n	800d8b6 <_puts_r+0x22>
 800d8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8b2:	f000 fa18 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	0719      	lsls	r1, r3, #28
 800d8ba:	d513      	bpl.n	800d8e4 <_puts_r+0x50>
 800d8bc:	6923      	ldr	r3, [r4, #16]
 800d8be:	b18b      	cbz	r3, 800d8e4 <_puts_r+0x50>
 800d8c0:	3e01      	subs	r6, #1
 800d8c2:	68a3      	ldr	r3, [r4, #8]
 800d8c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	60a3      	str	r3, [r4, #8]
 800d8cc:	b9e9      	cbnz	r1, 800d90a <_puts_r+0x76>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	da2e      	bge.n	800d930 <_puts_r+0x9c>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	210a      	movs	r1, #10
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	f000 f87b 	bl	800d9d2 <__swbuf_r>
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d007      	beq.n	800d8f0 <_puts_r+0x5c>
 800d8e0:	250a      	movs	r5, #10
 800d8e2:	e007      	b.n	800d8f4 <_puts_r+0x60>
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f000 f8b0 	bl	800da4c <__swsetup_r>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d0e7      	beq.n	800d8c0 <_puts_r+0x2c>
 800d8f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8f6:	07da      	lsls	r2, r3, #31
 800d8f8:	d405      	bmi.n	800d906 <_puts_r+0x72>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	059b      	lsls	r3, r3, #22
 800d8fe:	d402      	bmi.n	800d906 <_puts_r+0x72>
 800d900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d902:	f000 f9f1 	bl	800dce8 <__retarget_lock_release_recursive>
 800d906:	4628      	mov	r0, r5
 800d908:	bd70      	pop	{r4, r5, r6, pc}
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	da04      	bge.n	800d918 <_puts_r+0x84>
 800d90e:	69a2      	ldr	r2, [r4, #24]
 800d910:	429a      	cmp	r2, r3
 800d912:	dc06      	bgt.n	800d922 <_puts_r+0x8e>
 800d914:	290a      	cmp	r1, #10
 800d916:	d004      	beq.n	800d922 <_puts_r+0x8e>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	6022      	str	r2, [r4, #0]
 800d91e:	7019      	strb	r1, [r3, #0]
 800d920:	e7cf      	b.n	800d8c2 <_puts_r+0x2e>
 800d922:	4622      	mov	r2, r4
 800d924:	4628      	mov	r0, r5
 800d926:	f000 f854 	bl	800d9d2 <__swbuf_r>
 800d92a:	3001      	adds	r0, #1
 800d92c:	d1c9      	bne.n	800d8c2 <_puts_r+0x2e>
 800d92e:	e7df      	b.n	800d8f0 <_puts_r+0x5c>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	250a      	movs	r5, #10
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	6022      	str	r2, [r4, #0]
 800d938:	701d      	strb	r5, [r3, #0]
 800d93a:	e7db      	b.n	800d8f4 <_puts_r+0x60>

0800d93c <puts>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	; (800d948 <puts+0xc>)
 800d93e:	4601      	mov	r1, r0
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f7ff bfa7 	b.w	800d894 <_puts_r>
 800d946:	bf00      	nop
 800d948:	200002b0 	.word	0x200002b0

0800d94c <__sread>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d954:	f000 f968 	bl	800dc28 <_read_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	bfab      	itete	ge
 800d95c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d95e:	89a3      	ldrhlt	r3, [r4, #12]
 800d960:	181b      	addge	r3, r3, r0
 800d962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d966:	bfac      	ite	ge
 800d968:	6563      	strge	r3, [r4, #84]	; 0x54
 800d96a:	81a3      	strhlt	r3, [r4, #12]
 800d96c:	bd10      	pop	{r4, pc}

0800d96e <__swrite>:
 800d96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d972:	461f      	mov	r7, r3
 800d974:	898b      	ldrh	r3, [r1, #12]
 800d976:	05db      	lsls	r3, r3, #23
 800d978:	4605      	mov	r5, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	4616      	mov	r6, r2
 800d97e:	d505      	bpl.n	800d98c <__swrite+0x1e>
 800d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d984:	2302      	movs	r3, #2
 800d986:	2200      	movs	r2, #0
 800d988:	f000 f93c 	bl	800dc04 <_lseek_r>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	4632      	mov	r2, r6
 800d99a:	463b      	mov	r3, r7
 800d99c:	4628      	mov	r0, r5
 800d99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a2:	f000 b963 	b.w	800dc6c <_write_r>

0800d9a6 <__sseek>:
 800d9a6:	b510      	push	{r4, lr}
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ae:	f000 f929 	bl	800dc04 <_lseek_r>
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	bf15      	itete	ne
 800d9b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9c2:	81a3      	strheq	r3, [r4, #12]
 800d9c4:	bf18      	it	ne
 800d9c6:	81a3      	strhne	r3, [r4, #12]
 800d9c8:	bd10      	pop	{r4, pc}

0800d9ca <__sclose>:
 800d9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ce:	f000 b8b3 	b.w	800db38 <_close_r>

0800d9d2 <__swbuf_r>:
 800d9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d4:	460e      	mov	r6, r1
 800d9d6:	4614      	mov	r4, r2
 800d9d8:	4605      	mov	r5, r0
 800d9da:	b118      	cbz	r0, 800d9e4 <__swbuf_r+0x12>
 800d9dc:	6a03      	ldr	r3, [r0, #32]
 800d9de:	b90b      	cbnz	r3, 800d9e4 <__swbuf_r+0x12>
 800d9e0:	f7ff ff10 	bl	800d804 <__sinit>
 800d9e4:	69a3      	ldr	r3, [r4, #24]
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	071a      	lsls	r2, r3, #28
 800d9ec:	d525      	bpl.n	800da3a <__swbuf_r+0x68>
 800d9ee:	6923      	ldr	r3, [r4, #16]
 800d9f0:	b31b      	cbz	r3, 800da3a <__swbuf_r+0x68>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	6922      	ldr	r2, [r4, #16]
 800d9f6:	1a98      	subs	r0, r3, r2
 800d9f8:	6963      	ldr	r3, [r4, #20]
 800d9fa:	b2f6      	uxtb	r6, r6
 800d9fc:	4283      	cmp	r3, r0
 800d9fe:	4637      	mov	r7, r6
 800da00:	dc04      	bgt.n	800da0c <__swbuf_r+0x3a>
 800da02:	4621      	mov	r1, r4
 800da04:	4628      	mov	r0, r5
 800da06:	f002 fa43 	bl	800fe90 <_fflush_r>
 800da0a:	b9e0      	cbnz	r0, 800da46 <__swbuf_r+0x74>
 800da0c:	68a3      	ldr	r3, [r4, #8]
 800da0e:	3b01      	subs	r3, #1
 800da10:	60a3      	str	r3, [r4, #8]
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	1c5a      	adds	r2, r3, #1
 800da16:	6022      	str	r2, [r4, #0]
 800da18:	701e      	strb	r6, [r3, #0]
 800da1a:	6962      	ldr	r2, [r4, #20]
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	429a      	cmp	r2, r3
 800da20:	d004      	beq.n	800da2c <__swbuf_r+0x5a>
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	07db      	lsls	r3, r3, #31
 800da26:	d506      	bpl.n	800da36 <__swbuf_r+0x64>
 800da28:	2e0a      	cmp	r6, #10
 800da2a:	d104      	bne.n	800da36 <__swbuf_r+0x64>
 800da2c:	4621      	mov	r1, r4
 800da2e:	4628      	mov	r0, r5
 800da30:	f002 fa2e 	bl	800fe90 <_fflush_r>
 800da34:	b938      	cbnz	r0, 800da46 <__swbuf_r+0x74>
 800da36:	4638      	mov	r0, r7
 800da38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3a:	4621      	mov	r1, r4
 800da3c:	4628      	mov	r0, r5
 800da3e:	f000 f805 	bl	800da4c <__swsetup_r>
 800da42:	2800      	cmp	r0, #0
 800da44:	d0d5      	beq.n	800d9f2 <__swbuf_r+0x20>
 800da46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800da4a:	e7f4      	b.n	800da36 <__swbuf_r+0x64>

0800da4c <__swsetup_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4b2a      	ldr	r3, [pc, #168]	; (800daf8 <__swsetup_r+0xac>)
 800da50:	4605      	mov	r5, r0
 800da52:	6818      	ldr	r0, [r3, #0]
 800da54:	460c      	mov	r4, r1
 800da56:	b118      	cbz	r0, 800da60 <__swsetup_r+0x14>
 800da58:	6a03      	ldr	r3, [r0, #32]
 800da5a:	b90b      	cbnz	r3, 800da60 <__swsetup_r+0x14>
 800da5c:	f7ff fed2 	bl	800d804 <__sinit>
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da66:	0718      	lsls	r0, r3, #28
 800da68:	d422      	bmi.n	800dab0 <__swsetup_r+0x64>
 800da6a:	06d9      	lsls	r1, r3, #27
 800da6c:	d407      	bmi.n	800da7e <__swsetup_r+0x32>
 800da6e:	2309      	movs	r3, #9
 800da70:	602b      	str	r3, [r5, #0]
 800da72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da7c:	e034      	b.n	800dae8 <__swsetup_r+0x9c>
 800da7e:	0758      	lsls	r0, r3, #29
 800da80:	d512      	bpl.n	800daa8 <__swsetup_r+0x5c>
 800da82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da84:	b141      	cbz	r1, 800da98 <__swsetup_r+0x4c>
 800da86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da8a:	4299      	cmp	r1, r3
 800da8c:	d002      	beq.n	800da94 <__swsetup_r+0x48>
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 ffbc 	bl	800ea0c <_free_r>
 800da94:	2300      	movs	r3, #0
 800da96:	6363      	str	r3, [r4, #52]	; 0x34
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	2300      	movs	r3, #0
 800daa2:	6063      	str	r3, [r4, #4]
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	f043 0308 	orr.w	r3, r3, #8
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	6923      	ldr	r3, [r4, #16]
 800dab2:	b94b      	cbnz	r3, 800dac8 <__swsetup_r+0x7c>
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dabe:	d003      	beq.n	800dac8 <__swsetup_r+0x7c>
 800dac0:	4621      	mov	r1, r4
 800dac2:	4628      	mov	r0, r5
 800dac4:	f002 fa32 	bl	800ff2c <__smakebuf_r>
 800dac8:	89a0      	ldrh	r0, [r4, #12]
 800daca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dace:	f010 0301 	ands.w	r3, r0, #1
 800dad2:	d00a      	beq.n	800daea <__swsetup_r+0x9e>
 800dad4:	2300      	movs	r3, #0
 800dad6:	60a3      	str	r3, [r4, #8]
 800dad8:	6963      	ldr	r3, [r4, #20]
 800dada:	425b      	negs	r3, r3
 800dadc:	61a3      	str	r3, [r4, #24]
 800dade:	6923      	ldr	r3, [r4, #16]
 800dae0:	b943      	cbnz	r3, 800daf4 <__swsetup_r+0xa8>
 800dae2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dae6:	d1c4      	bne.n	800da72 <__swsetup_r+0x26>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	0781      	lsls	r1, r0, #30
 800daec:	bf58      	it	pl
 800daee:	6963      	ldrpl	r3, [r4, #20]
 800daf0:	60a3      	str	r3, [r4, #8]
 800daf2:	e7f4      	b.n	800dade <__swsetup_r+0x92>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f7      	b.n	800dae8 <__swsetup_r+0x9c>
 800daf8:	200002b0 	.word	0x200002b0

0800dafc <memset>:
 800dafc:	4402      	add	r2, r0
 800dafe:	4603      	mov	r3, r0
 800db00:	4293      	cmp	r3, r2
 800db02:	d100      	bne.n	800db06 <memset+0xa>
 800db04:	4770      	bx	lr
 800db06:	f803 1b01 	strb.w	r1, [r3], #1
 800db0a:	e7f9      	b.n	800db00 <memset+0x4>

0800db0c <strncmp>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	b16a      	cbz	r2, 800db2c <strncmp+0x20>
 800db10:	3901      	subs	r1, #1
 800db12:	1884      	adds	r4, r0, r2
 800db14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d103      	bne.n	800db28 <strncmp+0x1c>
 800db20:	42a0      	cmp	r0, r4
 800db22:	d001      	beq.n	800db28 <strncmp+0x1c>
 800db24:	2a00      	cmp	r2, #0
 800db26:	d1f5      	bne.n	800db14 <strncmp+0x8>
 800db28:	1ad0      	subs	r0, r2, r3
 800db2a:	bd10      	pop	{r4, pc}
 800db2c:	4610      	mov	r0, r2
 800db2e:	e7fc      	b.n	800db2a <strncmp+0x1e>

0800db30 <_localeconv_r>:
 800db30:	4800      	ldr	r0, [pc, #0]	; (800db34 <_localeconv_r+0x4>)
 800db32:	4770      	bx	lr
 800db34:	200001e8 	.word	0x200001e8

0800db38 <_close_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4d06      	ldr	r5, [pc, #24]	; (800db54 <_close_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f4 fcb5 	bl	80024b2 <_close>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_close_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_close_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	20005754 	.word	0x20005754

0800db58 <_reclaim_reent>:
 800db58:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <_reclaim_reent+0xa8>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4283      	cmp	r3, r0
 800db5e:	b570      	push	{r4, r5, r6, lr}
 800db60:	4604      	mov	r4, r0
 800db62:	d04b      	beq.n	800dbfc <_reclaim_reent+0xa4>
 800db64:	69c3      	ldr	r3, [r0, #28]
 800db66:	b143      	cbz	r3, 800db7a <_reclaim_reent+0x22>
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d144      	bne.n	800dbf8 <_reclaim_reent+0xa0>
 800db6e:	69e3      	ldr	r3, [r4, #28]
 800db70:	6819      	ldr	r1, [r3, #0]
 800db72:	b111      	cbz	r1, 800db7a <_reclaim_reent+0x22>
 800db74:	4620      	mov	r0, r4
 800db76:	f000 ff49 	bl	800ea0c <_free_r>
 800db7a:	6961      	ldr	r1, [r4, #20]
 800db7c:	b111      	cbz	r1, 800db84 <_reclaim_reent+0x2c>
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 ff44 	bl	800ea0c <_free_r>
 800db84:	69e1      	ldr	r1, [r4, #28]
 800db86:	b111      	cbz	r1, 800db8e <_reclaim_reent+0x36>
 800db88:	4620      	mov	r0, r4
 800db8a:	f000 ff3f 	bl	800ea0c <_free_r>
 800db8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800db90:	b111      	cbz	r1, 800db98 <_reclaim_reent+0x40>
 800db92:	4620      	mov	r0, r4
 800db94:	f000 ff3a 	bl	800ea0c <_free_r>
 800db98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db9a:	b111      	cbz	r1, 800dba2 <_reclaim_reent+0x4a>
 800db9c:	4620      	mov	r0, r4
 800db9e:	f000 ff35 	bl	800ea0c <_free_r>
 800dba2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dba4:	b111      	cbz	r1, 800dbac <_reclaim_reent+0x54>
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 ff30 	bl	800ea0c <_free_r>
 800dbac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dbae:	b111      	cbz	r1, 800dbb6 <_reclaim_reent+0x5e>
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 ff2b 	bl	800ea0c <_free_r>
 800dbb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dbb8:	b111      	cbz	r1, 800dbc0 <_reclaim_reent+0x68>
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 ff26 	bl	800ea0c <_free_r>
 800dbc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dbc2:	b111      	cbz	r1, 800dbca <_reclaim_reent+0x72>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f000 ff21 	bl	800ea0c <_free_r>
 800dbca:	6a23      	ldr	r3, [r4, #32]
 800dbcc:	b1b3      	cbz	r3, 800dbfc <_reclaim_reent+0xa4>
 800dbce:	4620      	mov	r0, r4
 800dbd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbd4:	4718      	bx	r3
 800dbd6:	5949      	ldr	r1, [r1, r5]
 800dbd8:	b941      	cbnz	r1, 800dbec <_reclaim_reent+0x94>
 800dbda:	3504      	adds	r5, #4
 800dbdc:	69e3      	ldr	r3, [r4, #28]
 800dbde:	2d80      	cmp	r5, #128	; 0x80
 800dbe0:	68d9      	ldr	r1, [r3, #12]
 800dbe2:	d1f8      	bne.n	800dbd6 <_reclaim_reent+0x7e>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 ff11 	bl	800ea0c <_free_r>
 800dbea:	e7c0      	b.n	800db6e <_reclaim_reent+0x16>
 800dbec:	680e      	ldr	r6, [r1, #0]
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f000 ff0c 	bl	800ea0c <_free_r>
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	e7ef      	b.n	800dbd8 <_reclaim_reent+0x80>
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	e7ef      	b.n	800dbdc <_reclaim_reent+0x84>
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	bf00      	nop
 800dc00:	200002b0 	.word	0x200002b0

0800dc04 <_lseek_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d07      	ldr	r5, [pc, #28]	; (800dc24 <_lseek_r+0x20>)
 800dc08:	4604      	mov	r4, r0
 800dc0a:	4608      	mov	r0, r1
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	2200      	movs	r2, #0
 800dc10:	602a      	str	r2, [r5, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	f7f4 fc74 	bl	8002500 <_lseek>
 800dc18:	1c43      	adds	r3, r0, #1
 800dc1a:	d102      	bne.n	800dc22 <_lseek_r+0x1e>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	b103      	cbz	r3, 800dc22 <_lseek_r+0x1e>
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	bd38      	pop	{r3, r4, r5, pc}
 800dc24:	20005754 	.word	0x20005754

0800dc28 <_read_r>:
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	4d07      	ldr	r5, [pc, #28]	; (800dc48 <_read_r+0x20>)
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	4608      	mov	r0, r1
 800dc30:	4611      	mov	r1, r2
 800dc32:	2200      	movs	r2, #0
 800dc34:	602a      	str	r2, [r5, #0]
 800dc36:	461a      	mov	r2, r3
 800dc38:	f7f4 fc1e 	bl	8002478 <_read>
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	d102      	bne.n	800dc46 <_read_r+0x1e>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	b103      	cbz	r3, 800dc46 <_read_r+0x1e>
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	bd38      	pop	{r3, r4, r5, pc}
 800dc48:	20005754 	.word	0x20005754

0800dc4c <_sbrk_r>:
 800dc4c:	b538      	push	{r3, r4, r5, lr}
 800dc4e:	4d06      	ldr	r5, [pc, #24]	; (800dc68 <_sbrk_r+0x1c>)
 800dc50:	2300      	movs	r3, #0
 800dc52:	4604      	mov	r4, r0
 800dc54:	4608      	mov	r0, r1
 800dc56:	602b      	str	r3, [r5, #0]
 800dc58:	f7f4 fc60 	bl	800251c <_sbrk>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_sbrk_r+0x1a>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_sbrk_r+0x1a>
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	20005754 	.word	0x20005754

0800dc6c <_write_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d07      	ldr	r5, [pc, #28]	; (800dc8c <_write_r+0x20>)
 800dc70:	4604      	mov	r4, r0
 800dc72:	4608      	mov	r0, r1
 800dc74:	4611      	mov	r1, r2
 800dc76:	2200      	movs	r2, #0
 800dc78:	602a      	str	r2, [r5, #0]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	f7f3 fe9e 	bl	80019bc <_write>
 800dc80:	1c43      	adds	r3, r0, #1
 800dc82:	d102      	bne.n	800dc8a <_write_r+0x1e>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	b103      	cbz	r3, 800dc8a <_write_r+0x1e>
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	bd38      	pop	{r3, r4, r5, pc}
 800dc8c:	20005754 	.word	0x20005754

0800dc90 <__errno>:
 800dc90:	4b01      	ldr	r3, [pc, #4]	; (800dc98 <__errno+0x8>)
 800dc92:	6818      	ldr	r0, [r3, #0]
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	200002b0 	.word	0x200002b0

0800dc9c <__libc_init_array>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	4d0d      	ldr	r5, [pc, #52]	; (800dcd4 <__libc_init_array+0x38>)
 800dca0:	4c0d      	ldr	r4, [pc, #52]	; (800dcd8 <__libc_init_array+0x3c>)
 800dca2:	1b64      	subs	r4, r4, r5
 800dca4:	10a4      	asrs	r4, r4, #2
 800dca6:	2600      	movs	r6, #0
 800dca8:	42a6      	cmp	r6, r4
 800dcaa:	d109      	bne.n	800dcc0 <__libc_init_array+0x24>
 800dcac:	4d0b      	ldr	r5, [pc, #44]	; (800dcdc <__libc_init_array+0x40>)
 800dcae:	4c0c      	ldr	r4, [pc, #48]	; (800dce0 <__libc_init_array+0x44>)
 800dcb0:	f003 fb16 	bl	80112e0 <_init>
 800dcb4:	1b64      	subs	r4, r4, r5
 800dcb6:	10a4      	asrs	r4, r4, #2
 800dcb8:	2600      	movs	r6, #0
 800dcba:	42a6      	cmp	r6, r4
 800dcbc:	d105      	bne.n	800dcca <__libc_init_array+0x2e>
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc4:	4798      	blx	r3
 800dcc6:	3601      	adds	r6, #1
 800dcc8:	e7ee      	b.n	800dca8 <__libc_init_array+0xc>
 800dcca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcce:	4798      	blx	r3
 800dcd0:	3601      	adds	r6, #1
 800dcd2:	e7f2      	b.n	800dcba <__libc_init_array+0x1e>
 800dcd4:	08011b78 	.word	0x08011b78
 800dcd8:	08011b78 	.word	0x08011b78
 800dcdc:	08011b78 	.word	0x08011b78
 800dce0:	08011b7c 	.word	0x08011b7c

0800dce4 <__retarget_lock_init_recursive>:
 800dce4:	4770      	bx	lr

0800dce6 <__retarget_lock_acquire_recursive>:
 800dce6:	4770      	bx	lr

0800dce8 <__retarget_lock_release_recursive>:
 800dce8:	4770      	bx	lr

0800dcea <memcpy>:
 800dcea:	440a      	add	r2, r1
 800dcec:	4291      	cmp	r1, r2
 800dcee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dcf2:	d100      	bne.n	800dcf6 <memcpy+0xc>
 800dcf4:	4770      	bx	lr
 800dcf6:	b510      	push	{r4, lr}
 800dcf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd00:	4291      	cmp	r1, r2
 800dd02:	d1f9      	bne.n	800dcf8 <memcpy+0xe>
 800dd04:	bd10      	pop	{r4, pc}
	...

0800dd08 <nan>:
 800dd08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd10 <nan+0x8>
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	00000000 	.word	0x00000000
 800dd14:	7ff80000 	.word	0x7ff80000

0800dd18 <quorem>:
 800dd18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	6903      	ldr	r3, [r0, #16]
 800dd1e:	690c      	ldr	r4, [r1, #16]
 800dd20:	42a3      	cmp	r3, r4
 800dd22:	4607      	mov	r7, r0
 800dd24:	db7e      	blt.n	800de24 <quorem+0x10c>
 800dd26:	3c01      	subs	r4, #1
 800dd28:	f101 0814 	add.w	r8, r1, #20
 800dd2c:	f100 0514 	add.w	r5, r0, #20
 800dd30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	429a      	cmp	r2, r3
 800dd42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd4e:	d331      	bcc.n	800ddb4 <quorem+0x9c>
 800dd50:	f04f 0e00 	mov.w	lr, #0
 800dd54:	4640      	mov	r0, r8
 800dd56:	46ac      	mov	ip, r5
 800dd58:	46f2      	mov	sl, lr
 800dd5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd5e:	b293      	uxth	r3, r2
 800dd60:	fb06 e303 	mla	r3, r6, r3, lr
 800dd64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd68:	0c1a      	lsrs	r2, r3, #16
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	ebaa 0303 	sub.w	r3, sl, r3
 800dd70:	f8dc a000 	ldr.w	sl, [ip]
 800dd74:	fa13 f38a 	uxtah	r3, r3, sl
 800dd78:	fb06 220e 	mla	r2, r6, lr, r2
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	9b00      	ldr	r3, [sp, #0]
 800dd80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd84:	b292      	uxth	r2, r2
 800dd86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd8e:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd92:	4581      	cmp	r9, r0
 800dd94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd98:	f84c 3b04 	str.w	r3, [ip], #4
 800dd9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dda0:	d2db      	bcs.n	800dd5a <quorem+0x42>
 800dda2:	f855 300b 	ldr.w	r3, [r5, fp]
 800dda6:	b92b      	cbnz	r3, 800ddb4 <quorem+0x9c>
 800dda8:	9b01      	ldr	r3, [sp, #4]
 800ddaa:	3b04      	subs	r3, #4
 800ddac:	429d      	cmp	r5, r3
 800ddae:	461a      	mov	r2, r3
 800ddb0:	d32c      	bcc.n	800de0c <quorem+0xf4>
 800ddb2:	613c      	str	r4, [r7, #16]
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	f001 fca5 	bl	800f704 <__mcmp>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	db22      	blt.n	800de04 <quorem+0xec>
 800ddbe:	3601      	adds	r6, #1
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddc8:	f8d1 c000 	ldr.w	ip, [r1]
 800ddcc:	b293      	uxth	r3, r2
 800ddce:	1ac3      	subs	r3, r0, r3
 800ddd0:	0c12      	lsrs	r2, r2, #16
 800ddd2:	fa13 f38c 	uxtah	r3, r3, ip
 800ddd6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ddda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dde4:	45c1      	cmp	r9, r8
 800dde6:	f841 3b04 	str.w	r3, [r1], #4
 800ddea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ddee:	d2e9      	bcs.n	800ddc4 <quorem+0xac>
 800ddf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddf8:	b922      	cbnz	r2, 800de04 <quorem+0xec>
 800ddfa:	3b04      	subs	r3, #4
 800ddfc:	429d      	cmp	r5, r3
 800ddfe:	461a      	mov	r2, r3
 800de00:	d30a      	bcc.n	800de18 <quorem+0x100>
 800de02:	613c      	str	r4, [r7, #16]
 800de04:	4630      	mov	r0, r6
 800de06:	b003      	add	sp, #12
 800de08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	3b04      	subs	r3, #4
 800de10:	2a00      	cmp	r2, #0
 800de12:	d1ce      	bne.n	800ddb2 <quorem+0x9a>
 800de14:	3c01      	subs	r4, #1
 800de16:	e7c9      	b.n	800ddac <quorem+0x94>
 800de18:	6812      	ldr	r2, [r2, #0]
 800de1a:	3b04      	subs	r3, #4
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	d1f0      	bne.n	800de02 <quorem+0xea>
 800de20:	3c01      	subs	r4, #1
 800de22:	e7eb      	b.n	800ddfc <quorem+0xe4>
 800de24:	2000      	movs	r0, #0
 800de26:	e7ee      	b.n	800de06 <quorem+0xee>

0800de28 <_dtoa_r>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	ed2d 8b04 	vpush	{d8-d9}
 800de30:	69c5      	ldr	r5, [r0, #28]
 800de32:	b093      	sub	sp, #76	; 0x4c
 800de34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de38:	ec57 6b10 	vmov	r6, r7, d0
 800de3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de40:	9107      	str	r1, [sp, #28]
 800de42:	4604      	mov	r4, r0
 800de44:	920a      	str	r2, [sp, #40]	; 0x28
 800de46:	930d      	str	r3, [sp, #52]	; 0x34
 800de48:	b975      	cbnz	r5, 800de68 <_dtoa_r+0x40>
 800de4a:	2010      	movs	r0, #16
 800de4c:	f7fe f8dc 	bl	800c008 <malloc>
 800de50:	4602      	mov	r2, r0
 800de52:	61e0      	str	r0, [r4, #28]
 800de54:	b920      	cbnz	r0, 800de60 <_dtoa_r+0x38>
 800de56:	4bae      	ldr	r3, [pc, #696]	; (800e110 <_dtoa_r+0x2e8>)
 800de58:	21ef      	movs	r1, #239	; 0xef
 800de5a:	48ae      	ldr	r0, [pc, #696]	; (800e114 <_dtoa_r+0x2ec>)
 800de5c:	f002 f8c4 	bl	800ffe8 <__assert_func>
 800de60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de64:	6005      	str	r5, [r0, #0]
 800de66:	60c5      	str	r5, [r0, #12]
 800de68:	69e3      	ldr	r3, [r4, #28]
 800de6a:	6819      	ldr	r1, [r3, #0]
 800de6c:	b151      	cbz	r1, 800de84 <_dtoa_r+0x5c>
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	604a      	str	r2, [r1, #4]
 800de72:	2301      	movs	r3, #1
 800de74:	4093      	lsls	r3, r2
 800de76:	608b      	str	r3, [r1, #8]
 800de78:	4620      	mov	r0, r4
 800de7a:	f001 f9bd 	bl	800f1f8 <_Bfree>
 800de7e:	69e3      	ldr	r3, [r4, #28]
 800de80:	2200      	movs	r2, #0
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	1e3b      	subs	r3, r7, #0
 800de86:	bfbb      	ittet	lt
 800de88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de8c:	9303      	strlt	r3, [sp, #12]
 800de8e:	2300      	movge	r3, #0
 800de90:	2201      	movlt	r2, #1
 800de92:	bfac      	ite	ge
 800de94:	f8c8 3000 	strge.w	r3, [r8]
 800de98:	f8c8 2000 	strlt.w	r2, [r8]
 800de9c:	4b9e      	ldr	r3, [pc, #632]	; (800e118 <_dtoa_r+0x2f0>)
 800de9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dea2:	ea33 0308 	bics.w	r3, r3, r8
 800dea6:	d11b      	bne.n	800dee0 <_dtoa_r+0xb8>
 800dea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800deaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800deb4:	4333      	orrs	r3, r6
 800deb6:	f000 8593 	beq.w	800e9e0 <_dtoa_r+0xbb8>
 800deba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800debc:	b963      	cbnz	r3, 800ded8 <_dtoa_r+0xb0>
 800debe:	4b97      	ldr	r3, [pc, #604]	; (800e11c <_dtoa_r+0x2f4>)
 800dec0:	e027      	b.n	800df12 <_dtoa_r+0xea>
 800dec2:	4b97      	ldr	r3, [pc, #604]	; (800e120 <_dtoa_r+0x2f8>)
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	3308      	adds	r3, #8
 800dec8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	9800      	ldr	r0, [sp, #0]
 800dece:	b013      	add	sp, #76	; 0x4c
 800ded0:	ecbd 8b04 	vpop	{d8-d9}
 800ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded8:	4b90      	ldr	r3, [pc, #576]	; (800e11c <_dtoa_r+0x2f4>)
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	3303      	adds	r3, #3
 800dede:	e7f3      	b.n	800dec8 <_dtoa_r+0xa0>
 800dee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dee4:	2200      	movs	r2, #0
 800dee6:	ec51 0b17 	vmov	r0, r1, d7
 800deea:	eeb0 8a47 	vmov.f32	s16, s14
 800deee:	eef0 8a67 	vmov.f32	s17, s15
 800def2:	2300      	movs	r3, #0
 800def4:	f7f2 fe00 	bl	8000af8 <__aeabi_dcmpeq>
 800def8:	4681      	mov	r9, r0
 800defa:	b160      	cbz	r0, 800df16 <_dtoa_r+0xee>
 800defc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800defe:	2301      	movs	r3, #1
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8568 	beq.w	800e9da <_dtoa_r+0xbb2>
 800df0a:	4b86      	ldr	r3, [pc, #536]	; (800e124 <_dtoa_r+0x2fc>)
 800df0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df0e:	6013      	str	r3, [r2, #0]
 800df10:	3b01      	subs	r3, #1
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	e7da      	b.n	800decc <_dtoa_r+0xa4>
 800df16:	aa10      	add	r2, sp, #64	; 0x40
 800df18:	a911      	add	r1, sp, #68	; 0x44
 800df1a:	4620      	mov	r0, r4
 800df1c:	eeb0 0a48 	vmov.f32	s0, s16
 800df20:	eef0 0a68 	vmov.f32	s1, s17
 800df24:	f001 fd04 	bl	800f930 <__d2b>
 800df28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800df2c:	4682      	mov	sl, r0
 800df2e:	2d00      	cmp	r5, #0
 800df30:	d07f      	beq.n	800e032 <_dtoa_r+0x20a>
 800df32:	ee18 3a90 	vmov	r3, s17
 800df36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800df3e:	ec51 0b18 	vmov	r0, r1, d8
 800df42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800df4e:	4619      	mov	r1, r3
 800df50:	2200      	movs	r2, #0
 800df52:	4b75      	ldr	r3, [pc, #468]	; (800e128 <_dtoa_r+0x300>)
 800df54:	f7f2 f9b0 	bl	80002b8 <__aeabi_dsub>
 800df58:	a367      	add	r3, pc, #412	; (adr r3, 800e0f8 <_dtoa_r+0x2d0>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 fb63 	bl	8000628 <__aeabi_dmul>
 800df62:	a367      	add	r3, pc, #412	; (adr r3, 800e100 <_dtoa_r+0x2d8>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f9a8 	bl	80002bc <__adddf3>
 800df6c:	4606      	mov	r6, r0
 800df6e:	4628      	mov	r0, r5
 800df70:	460f      	mov	r7, r1
 800df72:	f7f2 faef 	bl	8000554 <__aeabi_i2d>
 800df76:	a364      	add	r3, pc, #400	; (adr r3, 800e108 <_dtoa_r+0x2e0>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 fb54 	bl	8000628 <__aeabi_dmul>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4630      	mov	r0, r6
 800df86:	4639      	mov	r1, r7
 800df88:	f7f2 f998 	bl	80002bc <__adddf3>
 800df8c:	4606      	mov	r6, r0
 800df8e:	460f      	mov	r7, r1
 800df90:	f7f2 fdfa 	bl	8000b88 <__aeabi_d2iz>
 800df94:	2200      	movs	r2, #0
 800df96:	4683      	mov	fp, r0
 800df98:	2300      	movs	r3, #0
 800df9a:	4630      	mov	r0, r6
 800df9c:	4639      	mov	r1, r7
 800df9e:	f7f2 fdb5 	bl	8000b0c <__aeabi_dcmplt>
 800dfa2:	b148      	cbz	r0, 800dfb8 <_dtoa_r+0x190>
 800dfa4:	4658      	mov	r0, fp
 800dfa6:	f7f2 fad5 	bl	8000554 <__aeabi_i2d>
 800dfaa:	4632      	mov	r2, r6
 800dfac:	463b      	mov	r3, r7
 800dfae:	f7f2 fda3 	bl	8000af8 <__aeabi_dcmpeq>
 800dfb2:	b908      	cbnz	r0, 800dfb8 <_dtoa_r+0x190>
 800dfb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfb8:	f1bb 0f16 	cmp.w	fp, #22
 800dfbc:	d857      	bhi.n	800e06e <_dtoa_r+0x246>
 800dfbe:	4b5b      	ldr	r3, [pc, #364]	; (800e12c <_dtoa_r+0x304>)
 800dfc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	ec51 0b18 	vmov	r0, r1, d8
 800dfcc:	f7f2 fd9e 	bl	8000b0c <__aeabi_dcmplt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d04e      	beq.n	800e072 <_dtoa_r+0x24a>
 800dfd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfd8:	2300      	movs	r3, #0
 800dfda:	930c      	str	r3, [sp, #48]	; 0x30
 800dfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfde:	1b5b      	subs	r3, r3, r5
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	bf45      	ittet	mi
 800dfe4:	f1c3 0301 	rsbmi	r3, r3, #1
 800dfe8:	9305      	strmi	r3, [sp, #20]
 800dfea:	2300      	movpl	r3, #0
 800dfec:	2300      	movmi	r3, #0
 800dfee:	9206      	str	r2, [sp, #24]
 800dff0:	bf54      	ite	pl
 800dff2:	9305      	strpl	r3, [sp, #20]
 800dff4:	9306      	strmi	r3, [sp, #24]
 800dff6:	f1bb 0f00 	cmp.w	fp, #0
 800dffa:	db3c      	blt.n	800e076 <_dtoa_r+0x24e>
 800dffc:	9b06      	ldr	r3, [sp, #24]
 800dffe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e002:	445b      	add	r3, fp
 800e004:	9306      	str	r3, [sp, #24]
 800e006:	2300      	movs	r3, #0
 800e008:	9308      	str	r3, [sp, #32]
 800e00a:	9b07      	ldr	r3, [sp, #28]
 800e00c:	2b09      	cmp	r3, #9
 800e00e:	d868      	bhi.n	800e0e2 <_dtoa_r+0x2ba>
 800e010:	2b05      	cmp	r3, #5
 800e012:	bfc4      	itt	gt
 800e014:	3b04      	subgt	r3, #4
 800e016:	9307      	strgt	r3, [sp, #28]
 800e018:	9b07      	ldr	r3, [sp, #28]
 800e01a:	f1a3 0302 	sub.w	r3, r3, #2
 800e01e:	bfcc      	ite	gt
 800e020:	2500      	movgt	r5, #0
 800e022:	2501      	movle	r5, #1
 800e024:	2b03      	cmp	r3, #3
 800e026:	f200 8085 	bhi.w	800e134 <_dtoa_r+0x30c>
 800e02a:	e8df f003 	tbb	[pc, r3]
 800e02e:	3b2e      	.short	0x3b2e
 800e030:	5839      	.short	0x5839
 800e032:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e036:	441d      	add	r5, r3
 800e038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e03c:	2b20      	cmp	r3, #32
 800e03e:	bfc1      	itttt	gt
 800e040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e044:	fa08 f803 	lslgt.w	r8, r8, r3
 800e048:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e04c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e050:	bfd6      	itet	le
 800e052:	f1c3 0320 	rsble	r3, r3, #32
 800e056:	ea48 0003 	orrgt.w	r0, r8, r3
 800e05a:	fa06 f003 	lslle.w	r0, r6, r3
 800e05e:	f7f2 fa69 	bl	8000534 <__aeabi_ui2d>
 800e062:	2201      	movs	r2, #1
 800e064:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e068:	3d01      	subs	r5, #1
 800e06a:	920e      	str	r2, [sp, #56]	; 0x38
 800e06c:	e76f      	b.n	800df4e <_dtoa_r+0x126>
 800e06e:	2301      	movs	r3, #1
 800e070:	e7b3      	b.n	800dfda <_dtoa_r+0x1b2>
 800e072:	900c      	str	r0, [sp, #48]	; 0x30
 800e074:	e7b2      	b.n	800dfdc <_dtoa_r+0x1b4>
 800e076:	9b05      	ldr	r3, [sp, #20]
 800e078:	eba3 030b 	sub.w	r3, r3, fp
 800e07c:	9305      	str	r3, [sp, #20]
 800e07e:	f1cb 0300 	rsb	r3, fp, #0
 800e082:	9308      	str	r3, [sp, #32]
 800e084:	2300      	movs	r3, #0
 800e086:	930b      	str	r3, [sp, #44]	; 0x2c
 800e088:	e7bf      	b.n	800e00a <_dtoa_r+0x1e2>
 800e08a:	2300      	movs	r3, #0
 800e08c:	9309      	str	r3, [sp, #36]	; 0x24
 800e08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e090:	2b00      	cmp	r3, #0
 800e092:	dc52      	bgt.n	800e13a <_dtoa_r+0x312>
 800e094:	2301      	movs	r3, #1
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	461a      	mov	r2, r3
 800e09c:	920a      	str	r2, [sp, #40]	; 0x28
 800e09e:	e00b      	b.n	800e0b8 <_dtoa_r+0x290>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e7f3      	b.n	800e08c <_dtoa_r+0x264>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0aa:	445b      	add	r3, fp
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	9304      	str	r3, [sp, #16]
 800e0b4:	bfb8      	it	lt
 800e0b6:	2301      	movlt	r3, #1
 800e0b8:	69e0      	ldr	r0, [r4, #28]
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	2204      	movs	r2, #4
 800e0be:	f102 0614 	add.w	r6, r2, #20
 800e0c2:	429e      	cmp	r6, r3
 800e0c4:	d93d      	bls.n	800e142 <_dtoa_r+0x31a>
 800e0c6:	6041      	str	r1, [r0, #4]
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f001 f855 	bl	800f178 <_Balloc>
 800e0ce:	9000      	str	r0, [sp, #0]
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d139      	bne.n	800e148 <_dtoa_r+0x320>
 800e0d4:	4b16      	ldr	r3, [pc, #88]	; (800e130 <_dtoa_r+0x308>)
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	f240 11af 	movw	r1, #431	; 0x1af
 800e0dc:	e6bd      	b.n	800de5a <_dtoa_r+0x32>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e7e1      	b.n	800e0a6 <_dtoa_r+0x27e>
 800e0e2:	2501      	movs	r5, #1
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9307      	str	r3, [sp, #28]
 800e0e8:	9509      	str	r5, [sp, #36]	; 0x24
 800e0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	2312      	movs	r3, #18
 800e0f6:	e7d1      	b.n	800e09c <_dtoa_r+0x274>
 800e0f8:	636f4361 	.word	0x636f4361
 800e0fc:	3fd287a7 	.word	0x3fd287a7
 800e100:	8b60c8b3 	.word	0x8b60c8b3
 800e104:	3fc68a28 	.word	0x3fc68a28
 800e108:	509f79fb 	.word	0x509f79fb
 800e10c:	3fd34413 	.word	0x3fd34413
 800e110:	0801170a 	.word	0x0801170a
 800e114:	08011721 	.word	0x08011721
 800e118:	7ff00000 	.word	0x7ff00000
 800e11c:	08011706 	.word	0x08011706
 800e120:	080116fd 	.word	0x080116fd
 800e124:	080116d2 	.word	0x080116d2
 800e128:	3ff80000 	.word	0x3ff80000
 800e12c:	08011870 	.word	0x08011870
 800e130:	08011779 	.word	0x08011779
 800e134:	2301      	movs	r3, #1
 800e136:	9309      	str	r3, [sp, #36]	; 0x24
 800e138:	e7d7      	b.n	800e0ea <_dtoa_r+0x2c2>
 800e13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	9304      	str	r3, [sp, #16]
 800e140:	e7ba      	b.n	800e0b8 <_dtoa_r+0x290>
 800e142:	3101      	adds	r1, #1
 800e144:	0052      	lsls	r2, r2, #1
 800e146:	e7ba      	b.n	800e0be <_dtoa_r+0x296>
 800e148:	69e3      	ldr	r3, [r4, #28]
 800e14a:	9a00      	ldr	r2, [sp, #0]
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	2b0e      	cmp	r3, #14
 800e152:	f200 80a8 	bhi.w	800e2a6 <_dtoa_r+0x47e>
 800e156:	2d00      	cmp	r5, #0
 800e158:	f000 80a5 	beq.w	800e2a6 <_dtoa_r+0x47e>
 800e15c:	f1bb 0f00 	cmp.w	fp, #0
 800e160:	dd38      	ble.n	800e1d4 <_dtoa_r+0x3ac>
 800e162:	4bc0      	ldr	r3, [pc, #768]	; (800e464 <_dtoa_r+0x63c>)
 800e164:	f00b 020f 	and.w	r2, fp, #15
 800e168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e16c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e170:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e174:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e178:	d019      	beq.n	800e1ae <_dtoa_r+0x386>
 800e17a:	4bbb      	ldr	r3, [pc, #748]	; (800e468 <_dtoa_r+0x640>)
 800e17c:	ec51 0b18 	vmov	r0, r1, d8
 800e180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e184:	f7f2 fb7a 	bl	800087c <__aeabi_ddiv>
 800e188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e18c:	f008 080f 	and.w	r8, r8, #15
 800e190:	2503      	movs	r5, #3
 800e192:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e468 <_dtoa_r+0x640>
 800e196:	f1b8 0f00 	cmp.w	r8, #0
 800e19a:	d10a      	bne.n	800e1b2 <_dtoa_r+0x38a>
 800e19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1a0:	4632      	mov	r2, r6
 800e1a2:	463b      	mov	r3, r7
 800e1a4:	f7f2 fb6a 	bl	800087c <__aeabi_ddiv>
 800e1a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ac:	e02b      	b.n	800e206 <_dtoa_r+0x3de>
 800e1ae:	2502      	movs	r5, #2
 800e1b0:	e7ef      	b.n	800e192 <_dtoa_r+0x36a>
 800e1b2:	f018 0f01 	tst.w	r8, #1
 800e1b6:	d008      	beq.n	800e1ca <_dtoa_r+0x3a2>
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1c0:	f7f2 fa32 	bl	8000628 <__aeabi_dmul>
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460f      	mov	r7, r1
 800e1ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e1ce:	f109 0908 	add.w	r9, r9, #8
 800e1d2:	e7e0      	b.n	800e196 <_dtoa_r+0x36e>
 800e1d4:	f000 809f 	beq.w	800e316 <_dtoa_r+0x4ee>
 800e1d8:	f1cb 0600 	rsb	r6, fp, #0
 800e1dc:	4ba1      	ldr	r3, [pc, #644]	; (800e464 <_dtoa_r+0x63c>)
 800e1de:	4fa2      	ldr	r7, [pc, #648]	; (800e468 <_dtoa_r+0x640>)
 800e1e0:	f006 020f 	and.w	r2, r6, #15
 800e1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	ec51 0b18 	vmov	r0, r1, d8
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f8:	1136      	asrs	r6, r6, #4
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	2502      	movs	r5, #2
 800e1fe:	2e00      	cmp	r6, #0
 800e200:	d17e      	bne.n	800e300 <_dtoa_r+0x4d8>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1d0      	bne.n	800e1a8 <_dtoa_r+0x380>
 800e206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e208:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 8084 	beq.w	800e31a <_dtoa_r+0x4f2>
 800e212:	4b96      	ldr	r3, [pc, #600]	; (800e46c <_dtoa_r+0x644>)
 800e214:	2200      	movs	r2, #0
 800e216:	4640      	mov	r0, r8
 800e218:	4649      	mov	r1, r9
 800e21a:	f7f2 fc77 	bl	8000b0c <__aeabi_dcmplt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	d07b      	beq.n	800e31a <_dtoa_r+0x4f2>
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d078      	beq.n	800e31a <_dtoa_r+0x4f2>
 800e228:	9b01      	ldr	r3, [sp, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	dd39      	ble.n	800e2a2 <_dtoa_r+0x47a>
 800e22e:	4b90      	ldr	r3, [pc, #576]	; (800e470 <_dtoa_r+0x648>)
 800e230:	2200      	movs	r2, #0
 800e232:	4640      	mov	r0, r8
 800e234:	4649      	mov	r1, r9
 800e236:	f7f2 f9f7 	bl	8000628 <__aeabi_dmul>
 800e23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e23e:	9e01      	ldr	r6, [sp, #4]
 800e240:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e244:	3501      	adds	r5, #1
 800e246:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7f2 f982 	bl	8000554 <__aeabi_i2d>
 800e250:	4642      	mov	r2, r8
 800e252:	464b      	mov	r3, r9
 800e254:	f7f2 f9e8 	bl	8000628 <__aeabi_dmul>
 800e258:	4b86      	ldr	r3, [pc, #536]	; (800e474 <_dtoa_r+0x64c>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f82e 	bl	80002bc <__adddf3>
 800e260:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e268:	9303      	str	r3, [sp, #12]
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	d158      	bne.n	800e320 <_dtoa_r+0x4f8>
 800e26e:	4b82      	ldr	r3, [pc, #520]	; (800e478 <_dtoa_r+0x650>)
 800e270:	2200      	movs	r2, #0
 800e272:	4640      	mov	r0, r8
 800e274:	4649      	mov	r1, r9
 800e276:	f7f2 f81f 	bl	80002b8 <__aeabi_dsub>
 800e27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e27e:	4680      	mov	r8, r0
 800e280:	4689      	mov	r9, r1
 800e282:	f7f2 fc61 	bl	8000b48 <__aeabi_dcmpgt>
 800e286:	2800      	cmp	r0, #0
 800e288:	f040 8296 	bne.w	800e7b8 <_dtoa_r+0x990>
 800e28c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e290:	4640      	mov	r0, r8
 800e292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e296:	4649      	mov	r1, r9
 800e298:	f7f2 fc38 	bl	8000b0c <__aeabi_dcmplt>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	f040 8289 	bne.w	800e7b4 <_dtoa_r+0x98c>
 800e2a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e2a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f2c0 814e 	blt.w	800e54a <_dtoa_r+0x722>
 800e2ae:	f1bb 0f0e 	cmp.w	fp, #14
 800e2b2:	f300 814a 	bgt.w	800e54a <_dtoa_r+0x722>
 800e2b6:	4b6b      	ldr	r3, [pc, #428]	; (800e464 <_dtoa_r+0x63c>)
 800e2b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f280 80dc 	bge.w	800e480 <_dtoa_r+0x658>
 800e2c8:	9b04      	ldr	r3, [sp, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f300 80d8 	bgt.w	800e480 <_dtoa_r+0x658>
 800e2d0:	f040 826f 	bne.w	800e7b2 <_dtoa_r+0x98a>
 800e2d4:	4b68      	ldr	r3, [pc, #416]	; (800e478 <_dtoa_r+0x650>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	4640      	mov	r0, r8
 800e2da:	4649      	mov	r1, r9
 800e2dc:	f7f2 f9a4 	bl	8000628 <__aeabi_dmul>
 800e2e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2e4:	f7f2 fc26 	bl	8000b34 <__aeabi_dcmpge>
 800e2e8:	9e04      	ldr	r6, [sp, #16]
 800e2ea:	4637      	mov	r7, r6
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	f040 8245 	bne.w	800e77c <_dtoa_r+0x954>
 800e2f2:	9d00      	ldr	r5, [sp, #0]
 800e2f4:	2331      	movs	r3, #49	; 0x31
 800e2f6:	f805 3b01 	strb.w	r3, [r5], #1
 800e2fa:	f10b 0b01 	add.w	fp, fp, #1
 800e2fe:	e241      	b.n	800e784 <_dtoa_r+0x95c>
 800e300:	07f2      	lsls	r2, r6, #31
 800e302:	d505      	bpl.n	800e310 <_dtoa_r+0x4e8>
 800e304:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e308:	f7f2 f98e 	bl	8000628 <__aeabi_dmul>
 800e30c:	3501      	adds	r5, #1
 800e30e:	2301      	movs	r3, #1
 800e310:	1076      	asrs	r6, r6, #1
 800e312:	3708      	adds	r7, #8
 800e314:	e773      	b.n	800e1fe <_dtoa_r+0x3d6>
 800e316:	2502      	movs	r5, #2
 800e318:	e775      	b.n	800e206 <_dtoa_r+0x3de>
 800e31a:	9e04      	ldr	r6, [sp, #16]
 800e31c:	465f      	mov	r7, fp
 800e31e:	e792      	b.n	800e246 <_dtoa_r+0x41e>
 800e320:	9900      	ldr	r1, [sp, #0]
 800e322:	4b50      	ldr	r3, [pc, #320]	; (800e464 <_dtoa_r+0x63c>)
 800e324:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e328:	4431      	add	r1, r6
 800e32a:	9102      	str	r1, [sp, #8]
 800e32c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e32e:	eeb0 9a47 	vmov.f32	s18, s14
 800e332:	eef0 9a67 	vmov.f32	s19, s15
 800e336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e33a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e33e:	2900      	cmp	r1, #0
 800e340:	d044      	beq.n	800e3cc <_dtoa_r+0x5a4>
 800e342:	494e      	ldr	r1, [pc, #312]	; (800e47c <_dtoa_r+0x654>)
 800e344:	2000      	movs	r0, #0
 800e346:	f7f2 fa99 	bl	800087c <__aeabi_ddiv>
 800e34a:	ec53 2b19 	vmov	r2, r3, d9
 800e34e:	f7f1 ffb3 	bl	80002b8 <__aeabi_dsub>
 800e352:	9d00      	ldr	r5, [sp, #0]
 800e354:	ec41 0b19 	vmov	d9, r0, r1
 800e358:	4649      	mov	r1, r9
 800e35a:	4640      	mov	r0, r8
 800e35c:	f7f2 fc14 	bl	8000b88 <__aeabi_d2iz>
 800e360:	4606      	mov	r6, r0
 800e362:	f7f2 f8f7 	bl	8000554 <__aeabi_i2d>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	4640      	mov	r0, r8
 800e36c:	4649      	mov	r1, r9
 800e36e:	f7f1 ffa3 	bl	80002b8 <__aeabi_dsub>
 800e372:	3630      	adds	r6, #48	; 0x30
 800e374:	f805 6b01 	strb.w	r6, [r5], #1
 800e378:	ec53 2b19 	vmov	r2, r3, d9
 800e37c:	4680      	mov	r8, r0
 800e37e:	4689      	mov	r9, r1
 800e380:	f7f2 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 800e384:	2800      	cmp	r0, #0
 800e386:	d164      	bne.n	800e452 <_dtoa_r+0x62a>
 800e388:	4642      	mov	r2, r8
 800e38a:	464b      	mov	r3, r9
 800e38c:	4937      	ldr	r1, [pc, #220]	; (800e46c <_dtoa_r+0x644>)
 800e38e:	2000      	movs	r0, #0
 800e390:	f7f1 ff92 	bl	80002b8 <__aeabi_dsub>
 800e394:	ec53 2b19 	vmov	r2, r3, d9
 800e398:	f7f2 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	f040 80b6 	bne.w	800e50e <_dtoa_r+0x6e6>
 800e3a2:	9b02      	ldr	r3, [sp, #8]
 800e3a4:	429d      	cmp	r5, r3
 800e3a6:	f43f af7c 	beq.w	800e2a2 <_dtoa_r+0x47a>
 800e3aa:	4b31      	ldr	r3, [pc, #196]	; (800e470 <_dtoa_r+0x648>)
 800e3ac:	ec51 0b19 	vmov	r0, r1, d9
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f7f2 f939 	bl	8000628 <__aeabi_dmul>
 800e3b6:	4b2e      	ldr	r3, [pc, #184]	; (800e470 <_dtoa_r+0x648>)
 800e3b8:	ec41 0b19 	vmov	d9, r0, r1
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4640      	mov	r0, r8
 800e3c0:	4649      	mov	r1, r9
 800e3c2:	f7f2 f931 	bl	8000628 <__aeabi_dmul>
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4689      	mov	r9, r1
 800e3ca:	e7c5      	b.n	800e358 <_dtoa_r+0x530>
 800e3cc:	ec51 0b17 	vmov	r0, r1, d7
 800e3d0:	f7f2 f92a 	bl	8000628 <__aeabi_dmul>
 800e3d4:	9b02      	ldr	r3, [sp, #8]
 800e3d6:	9d00      	ldr	r5, [sp, #0]
 800e3d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3da:	ec41 0b19 	vmov	d9, r0, r1
 800e3de:	4649      	mov	r1, r9
 800e3e0:	4640      	mov	r0, r8
 800e3e2:	f7f2 fbd1 	bl	8000b88 <__aeabi_d2iz>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	f7f2 f8b4 	bl	8000554 <__aeabi_i2d>
 800e3ec:	3630      	adds	r6, #48	; 0x30
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	f7f1 ff5f 	bl	80002b8 <__aeabi_dsub>
 800e3fa:	f805 6b01 	strb.w	r6, [r5], #1
 800e3fe:	9b02      	ldr	r3, [sp, #8]
 800e400:	429d      	cmp	r5, r3
 800e402:	4680      	mov	r8, r0
 800e404:	4689      	mov	r9, r1
 800e406:	f04f 0200 	mov.w	r2, #0
 800e40a:	d124      	bne.n	800e456 <_dtoa_r+0x62e>
 800e40c:	4b1b      	ldr	r3, [pc, #108]	; (800e47c <_dtoa_r+0x654>)
 800e40e:	ec51 0b19 	vmov	r0, r1, d9
 800e412:	f7f1 ff53 	bl	80002bc <__adddf3>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4640      	mov	r0, r8
 800e41c:	4649      	mov	r1, r9
 800e41e:	f7f2 fb93 	bl	8000b48 <__aeabi_dcmpgt>
 800e422:	2800      	cmp	r0, #0
 800e424:	d173      	bne.n	800e50e <_dtoa_r+0x6e6>
 800e426:	ec53 2b19 	vmov	r2, r3, d9
 800e42a:	4914      	ldr	r1, [pc, #80]	; (800e47c <_dtoa_r+0x654>)
 800e42c:	2000      	movs	r0, #0
 800e42e:	f7f1 ff43 	bl	80002b8 <__aeabi_dsub>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4640      	mov	r0, r8
 800e438:	4649      	mov	r1, r9
 800e43a:	f7f2 fb67 	bl	8000b0c <__aeabi_dcmplt>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f43f af2f 	beq.w	800e2a2 <_dtoa_r+0x47a>
 800e444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e446:	1e6b      	subs	r3, r5, #1
 800e448:	930f      	str	r3, [sp, #60]	; 0x3c
 800e44a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e44e:	2b30      	cmp	r3, #48	; 0x30
 800e450:	d0f8      	beq.n	800e444 <_dtoa_r+0x61c>
 800e452:	46bb      	mov	fp, r7
 800e454:	e04a      	b.n	800e4ec <_dtoa_r+0x6c4>
 800e456:	4b06      	ldr	r3, [pc, #24]	; (800e470 <_dtoa_r+0x648>)
 800e458:	f7f2 f8e6 	bl	8000628 <__aeabi_dmul>
 800e45c:	4680      	mov	r8, r0
 800e45e:	4689      	mov	r9, r1
 800e460:	e7bd      	b.n	800e3de <_dtoa_r+0x5b6>
 800e462:	bf00      	nop
 800e464:	08011870 	.word	0x08011870
 800e468:	08011848 	.word	0x08011848
 800e46c:	3ff00000 	.word	0x3ff00000
 800e470:	40240000 	.word	0x40240000
 800e474:	401c0000 	.word	0x401c0000
 800e478:	40140000 	.word	0x40140000
 800e47c:	3fe00000 	.word	0x3fe00000
 800e480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e484:	9d00      	ldr	r5, [sp, #0]
 800e486:	4642      	mov	r2, r8
 800e488:	464b      	mov	r3, r9
 800e48a:	4630      	mov	r0, r6
 800e48c:	4639      	mov	r1, r7
 800e48e:	f7f2 f9f5 	bl	800087c <__aeabi_ddiv>
 800e492:	f7f2 fb79 	bl	8000b88 <__aeabi_d2iz>
 800e496:	9001      	str	r0, [sp, #4]
 800e498:	f7f2 f85c 	bl	8000554 <__aeabi_i2d>
 800e49c:	4642      	mov	r2, r8
 800e49e:	464b      	mov	r3, r9
 800e4a0:	f7f2 f8c2 	bl	8000628 <__aeabi_dmul>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f1 ff04 	bl	80002b8 <__aeabi_dsub>
 800e4b0:	9e01      	ldr	r6, [sp, #4]
 800e4b2:	9f04      	ldr	r7, [sp, #16]
 800e4b4:	3630      	adds	r6, #48	; 0x30
 800e4b6:	f805 6b01 	strb.w	r6, [r5], #1
 800e4ba:	9e00      	ldr	r6, [sp, #0]
 800e4bc:	1bae      	subs	r6, r5, r6
 800e4be:	42b7      	cmp	r7, r6
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	d134      	bne.n	800e530 <_dtoa_r+0x708>
 800e4c6:	f7f1 fef9 	bl	80002bc <__adddf3>
 800e4ca:	4642      	mov	r2, r8
 800e4cc:	464b      	mov	r3, r9
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	460f      	mov	r7, r1
 800e4d2:	f7f2 fb39 	bl	8000b48 <__aeabi_dcmpgt>
 800e4d6:	b9c8      	cbnz	r0, 800e50c <_dtoa_r+0x6e4>
 800e4d8:	4642      	mov	r2, r8
 800e4da:	464b      	mov	r3, r9
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	f7f2 fb0a 	bl	8000af8 <__aeabi_dcmpeq>
 800e4e4:	b110      	cbz	r0, 800e4ec <_dtoa_r+0x6c4>
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	07db      	lsls	r3, r3, #31
 800e4ea:	d40f      	bmi.n	800e50c <_dtoa_r+0x6e4>
 800e4ec:	4651      	mov	r1, sl
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f000 fe82 	bl	800f1f8 <_Bfree>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4f8:	702b      	strb	r3, [r5, #0]
 800e4fa:	f10b 0301 	add.w	r3, fp, #1
 800e4fe:	6013      	str	r3, [r2, #0]
 800e500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e502:	2b00      	cmp	r3, #0
 800e504:	f43f ace2 	beq.w	800decc <_dtoa_r+0xa4>
 800e508:	601d      	str	r5, [r3, #0]
 800e50a:	e4df      	b.n	800decc <_dtoa_r+0xa4>
 800e50c:	465f      	mov	r7, fp
 800e50e:	462b      	mov	r3, r5
 800e510:	461d      	mov	r5, r3
 800e512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e516:	2a39      	cmp	r2, #57	; 0x39
 800e518:	d106      	bne.n	800e528 <_dtoa_r+0x700>
 800e51a:	9a00      	ldr	r2, [sp, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d1f7      	bne.n	800e510 <_dtoa_r+0x6e8>
 800e520:	9900      	ldr	r1, [sp, #0]
 800e522:	2230      	movs	r2, #48	; 0x30
 800e524:	3701      	adds	r7, #1
 800e526:	700a      	strb	r2, [r1, #0]
 800e528:	781a      	ldrb	r2, [r3, #0]
 800e52a:	3201      	adds	r2, #1
 800e52c:	701a      	strb	r2, [r3, #0]
 800e52e:	e790      	b.n	800e452 <_dtoa_r+0x62a>
 800e530:	4ba3      	ldr	r3, [pc, #652]	; (800e7c0 <_dtoa_r+0x998>)
 800e532:	2200      	movs	r2, #0
 800e534:	f7f2 f878 	bl	8000628 <__aeabi_dmul>
 800e538:	2200      	movs	r2, #0
 800e53a:	2300      	movs	r3, #0
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	f7f2 fada 	bl	8000af8 <__aeabi_dcmpeq>
 800e544:	2800      	cmp	r0, #0
 800e546:	d09e      	beq.n	800e486 <_dtoa_r+0x65e>
 800e548:	e7d0      	b.n	800e4ec <_dtoa_r+0x6c4>
 800e54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e54c:	2a00      	cmp	r2, #0
 800e54e:	f000 80ca 	beq.w	800e6e6 <_dtoa_r+0x8be>
 800e552:	9a07      	ldr	r2, [sp, #28]
 800e554:	2a01      	cmp	r2, #1
 800e556:	f300 80ad 	bgt.w	800e6b4 <_dtoa_r+0x88c>
 800e55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	f000 80a5 	beq.w	800e6ac <_dtoa_r+0x884>
 800e562:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e566:	9e08      	ldr	r6, [sp, #32]
 800e568:	9d05      	ldr	r5, [sp, #20]
 800e56a:	9a05      	ldr	r2, [sp, #20]
 800e56c:	441a      	add	r2, r3
 800e56e:	9205      	str	r2, [sp, #20]
 800e570:	9a06      	ldr	r2, [sp, #24]
 800e572:	2101      	movs	r1, #1
 800e574:	441a      	add	r2, r3
 800e576:	4620      	mov	r0, r4
 800e578:	9206      	str	r2, [sp, #24]
 800e57a:	f000 ff3d 	bl	800f3f8 <__i2b>
 800e57e:	4607      	mov	r7, r0
 800e580:	b165      	cbz	r5, 800e59c <_dtoa_r+0x774>
 800e582:	9b06      	ldr	r3, [sp, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd09      	ble.n	800e59c <_dtoa_r+0x774>
 800e588:	42ab      	cmp	r3, r5
 800e58a:	9a05      	ldr	r2, [sp, #20]
 800e58c:	bfa8      	it	ge
 800e58e:	462b      	movge	r3, r5
 800e590:	1ad2      	subs	r2, r2, r3
 800e592:	9205      	str	r2, [sp, #20]
 800e594:	9a06      	ldr	r2, [sp, #24]
 800e596:	1aed      	subs	r5, r5, r3
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	9306      	str	r3, [sp, #24]
 800e59c:	9b08      	ldr	r3, [sp, #32]
 800e59e:	b1f3      	cbz	r3, 800e5de <_dtoa_r+0x7b6>
 800e5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 80a3 	beq.w	800e6ee <_dtoa_r+0x8c6>
 800e5a8:	2e00      	cmp	r6, #0
 800e5aa:	dd10      	ble.n	800e5ce <_dtoa_r+0x7a6>
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	4632      	mov	r2, r6
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 ffe1 	bl	800f578 <__pow5mult>
 800e5b6:	4652      	mov	r2, sl
 800e5b8:	4601      	mov	r1, r0
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f000 ff31 	bl	800f424 <__multiply>
 800e5c2:	4651      	mov	r1, sl
 800e5c4:	4680      	mov	r8, r0
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f000 fe16 	bl	800f1f8 <_Bfree>
 800e5cc:	46c2      	mov	sl, r8
 800e5ce:	9b08      	ldr	r3, [sp, #32]
 800e5d0:	1b9a      	subs	r2, r3, r6
 800e5d2:	d004      	beq.n	800e5de <_dtoa_r+0x7b6>
 800e5d4:	4651      	mov	r1, sl
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f000 ffce 	bl	800f578 <__pow5mult>
 800e5dc:	4682      	mov	sl, r0
 800e5de:	2101      	movs	r1, #1
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 ff09 	bl	800f3f8 <__i2b>
 800e5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	f340 8081 	ble.w	800e6f2 <_dtoa_r+0x8ca>
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 ffbf 	bl	800f578 <__pow5mult>
 800e5fa:	9b07      	ldr	r3, [sp, #28]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	dd7a      	ble.n	800e6f8 <_dtoa_r+0x8d0>
 800e602:	f04f 0800 	mov.w	r8, #0
 800e606:	6933      	ldr	r3, [r6, #16]
 800e608:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e60c:	6918      	ldr	r0, [r3, #16]
 800e60e:	f000 fea5 	bl	800f35c <__hi0bits>
 800e612:	f1c0 0020 	rsb	r0, r0, #32
 800e616:	9b06      	ldr	r3, [sp, #24]
 800e618:	4418      	add	r0, r3
 800e61a:	f010 001f 	ands.w	r0, r0, #31
 800e61e:	f000 8094 	beq.w	800e74a <_dtoa_r+0x922>
 800e622:	f1c0 0320 	rsb	r3, r0, #32
 800e626:	2b04      	cmp	r3, #4
 800e628:	f340 8085 	ble.w	800e736 <_dtoa_r+0x90e>
 800e62c:	9b05      	ldr	r3, [sp, #20]
 800e62e:	f1c0 001c 	rsb	r0, r0, #28
 800e632:	4403      	add	r3, r0
 800e634:	9305      	str	r3, [sp, #20]
 800e636:	9b06      	ldr	r3, [sp, #24]
 800e638:	4403      	add	r3, r0
 800e63a:	4405      	add	r5, r0
 800e63c:	9306      	str	r3, [sp, #24]
 800e63e:	9b05      	ldr	r3, [sp, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	dd05      	ble.n	800e650 <_dtoa_r+0x828>
 800e644:	4651      	mov	r1, sl
 800e646:	461a      	mov	r2, r3
 800e648:	4620      	mov	r0, r4
 800e64a:	f000 ffef 	bl	800f62c <__lshift>
 800e64e:	4682      	mov	sl, r0
 800e650:	9b06      	ldr	r3, [sp, #24]
 800e652:	2b00      	cmp	r3, #0
 800e654:	dd05      	ble.n	800e662 <_dtoa_r+0x83a>
 800e656:	4631      	mov	r1, r6
 800e658:	461a      	mov	r2, r3
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 ffe6 	bl	800f62c <__lshift>
 800e660:	4606      	mov	r6, r0
 800e662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e664:	2b00      	cmp	r3, #0
 800e666:	d072      	beq.n	800e74e <_dtoa_r+0x926>
 800e668:	4631      	mov	r1, r6
 800e66a:	4650      	mov	r0, sl
 800e66c:	f001 f84a 	bl	800f704 <__mcmp>
 800e670:	2800      	cmp	r0, #0
 800e672:	da6c      	bge.n	800e74e <_dtoa_r+0x926>
 800e674:	2300      	movs	r3, #0
 800e676:	4651      	mov	r1, sl
 800e678:	220a      	movs	r2, #10
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 fdde 	bl	800f23c <__multadd>
 800e680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e682:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e686:	4682      	mov	sl, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 81b0 	beq.w	800e9ee <_dtoa_r+0xbc6>
 800e68e:	2300      	movs	r3, #0
 800e690:	4639      	mov	r1, r7
 800e692:	220a      	movs	r2, #10
 800e694:	4620      	mov	r0, r4
 800e696:	f000 fdd1 	bl	800f23c <__multadd>
 800e69a:	9b01      	ldr	r3, [sp, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	4607      	mov	r7, r0
 800e6a0:	f300 8096 	bgt.w	800e7d0 <_dtoa_r+0x9a8>
 800e6a4:	9b07      	ldr	r3, [sp, #28]
 800e6a6:	2b02      	cmp	r3, #2
 800e6a8:	dc59      	bgt.n	800e75e <_dtoa_r+0x936>
 800e6aa:	e091      	b.n	800e7d0 <_dtoa_r+0x9a8>
 800e6ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6b2:	e758      	b.n	800e566 <_dtoa_r+0x73e>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	1e5e      	subs	r6, r3, #1
 800e6b8:	9b08      	ldr	r3, [sp, #32]
 800e6ba:	42b3      	cmp	r3, r6
 800e6bc:	bfbf      	itttt	lt
 800e6be:	9b08      	ldrlt	r3, [sp, #32]
 800e6c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e6c2:	9608      	strlt	r6, [sp, #32]
 800e6c4:	1af3      	sublt	r3, r6, r3
 800e6c6:	bfb4      	ite	lt
 800e6c8:	18d2      	addlt	r2, r2, r3
 800e6ca:	1b9e      	subge	r6, r3, r6
 800e6cc:	9b04      	ldr	r3, [sp, #16]
 800e6ce:	bfbc      	itt	lt
 800e6d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e6d2:	2600      	movlt	r6, #0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bfb7      	itett	lt
 800e6d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e6dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e6e0:	1a9d      	sublt	r5, r3, r2
 800e6e2:	2300      	movlt	r3, #0
 800e6e4:	e741      	b.n	800e56a <_dtoa_r+0x742>
 800e6e6:	9e08      	ldr	r6, [sp, #32]
 800e6e8:	9d05      	ldr	r5, [sp, #20]
 800e6ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e6ec:	e748      	b.n	800e580 <_dtoa_r+0x758>
 800e6ee:	9a08      	ldr	r2, [sp, #32]
 800e6f0:	e770      	b.n	800e5d4 <_dtoa_r+0x7ac>
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	dc19      	bgt.n	800e72c <_dtoa_r+0x904>
 800e6f8:	9b02      	ldr	r3, [sp, #8]
 800e6fa:	b9bb      	cbnz	r3, 800e72c <_dtoa_r+0x904>
 800e6fc:	9b03      	ldr	r3, [sp, #12]
 800e6fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e702:	b99b      	cbnz	r3, 800e72c <_dtoa_r+0x904>
 800e704:	9b03      	ldr	r3, [sp, #12]
 800e706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e70a:	0d1b      	lsrs	r3, r3, #20
 800e70c:	051b      	lsls	r3, r3, #20
 800e70e:	b183      	cbz	r3, 800e732 <_dtoa_r+0x90a>
 800e710:	9b05      	ldr	r3, [sp, #20]
 800e712:	3301      	adds	r3, #1
 800e714:	9305      	str	r3, [sp, #20]
 800e716:	9b06      	ldr	r3, [sp, #24]
 800e718:	3301      	adds	r3, #1
 800e71a:	9306      	str	r3, [sp, #24]
 800e71c:	f04f 0801 	mov.w	r8, #1
 800e720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e722:	2b00      	cmp	r3, #0
 800e724:	f47f af6f 	bne.w	800e606 <_dtoa_r+0x7de>
 800e728:	2001      	movs	r0, #1
 800e72a:	e774      	b.n	800e616 <_dtoa_r+0x7ee>
 800e72c:	f04f 0800 	mov.w	r8, #0
 800e730:	e7f6      	b.n	800e720 <_dtoa_r+0x8f8>
 800e732:	4698      	mov	r8, r3
 800e734:	e7f4      	b.n	800e720 <_dtoa_r+0x8f8>
 800e736:	d082      	beq.n	800e63e <_dtoa_r+0x816>
 800e738:	9a05      	ldr	r2, [sp, #20]
 800e73a:	331c      	adds	r3, #28
 800e73c:	441a      	add	r2, r3
 800e73e:	9205      	str	r2, [sp, #20]
 800e740:	9a06      	ldr	r2, [sp, #24]
 800e742:	441a      	add	r2, r3
 800e744:	441d      	add	r5, r3
 800e746:	9206      	str	r2, [sp, #24]
 800e748:	e779      	b.n	800e63e <_dtoa_r+0x816>
 800e74a:	4603      	mov	r3, r0
 800e74c:	e7f4      	b.n	800e738 <_dtoa_r+0x910>
 800e74e:	9b04      	ldr	r3, [sp, #16]
 800e750:	2b00      	cmp	r3, #0
 800e752:	dc37      	bgt.n	800e7c4 <_dtoa_r+0x99c>
 800e754:	9b07      	ldr	r3, [sp, #28]
 800e756:	2b02      	cmp	r3, #2
 800e758:	dd34      	ble.n	800e7c4 <_dtoa_r+0x99c>
 800e75a:	9b04      	ldr	r3, [sp, #16]
 800e75c:	9301      	str	r3, [sp, #4]
 800e75e:	9b01      	ldr	r3, [sp, #4]
 800e760:	b963      	cbnz	r3, 800e77c <_dtoa_r+0x954>
 800e762:	4631      	mov	r1, r6
 800e764:	2205      	movs	r2, #5
 800e766:	4620      	mov	r0, r4
 800e768:	f000 fd68 	bl	800f23c <__multadd>
 800e76c:	4601      	mov	r1, r0
 800e76e:	4606      	mov	r6, r0
 800e770:	4650      	mov	r0, sl
 800e772:	f000 ffc7 	bl	800f704 <__mcmp>
 800e776:	2800      	cmp	r0, #0
 800e778:	f73f adbb 	bgt.w	800e2f2 <_dtoa_r+0x4ca>
 800e77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e77e:	9d00      	ldr	r5, [sp, #0]
 800e780:	ea6f 0b03 	mvn.w	fp, r3
 800e784:	f04f 0800 	mov.w	r8, #0
 800e788:	4631      	mov	r1, r6
 800e78a:	4620      	mov	r0, r4
 800e78c:	f000 fd34 	bl	800f1f8 <_Bfree>
 800e790:	2f00      	cmp	r7, #0
 800e792:	f43f aeab 	beq.w	800e4ec <_dtoa_r+0x6c4>
 800e796:	f1b8 0f00 	cmp.w	r8, #0
 800e79a:	d005      	beq.n	800e7a8 <_dtoa_r+0x980>
 800e79c:	45b8      	cmp	r8, r7
 800e79e:	d003      	beq.n	800e7a8 <_dtoa_r+0x980>
 800e7a0:	4641      	mov	r1, r8
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fd28 	bl	800f1f8 <_Bfree>
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	f000 fd24 	bl	800f1f8 <_Bfree>
 800e7b0:	e69c      	b.n	800e4ec <_dtoa_r+0x6c4>
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	4637      	mov	r7, r6
 800e7b6:	e7e1      	b.n	800e77c <_dtoa_r+0x954>
 800e7b8:	46bb      	mov	fp, r7
 800e7ba:	4637      	mov	r7, r6
 800e7bc:	e599      	b.n	800e2f2 <_dtoa_r+0x4ca>
 800e7be:	bf00      	nop
 800e7c0:	40240000 	.word	0x40240000
 800e7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 80c8 	beq.w	800e95c <_dtoa_r+0xb34>
 800e7cc:	9b04      	ldr	r3, [sp, #16]
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	2d00      	cmp	r5, #0
 800e7d2:	dd05      	ble.n	800e7e0 <_dtoa_r+0x9b8>
 800e7d4:	4639      	mov	r1, r7
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 ff27 	bl	800f62c <__lshift>
 800e7de:	4607      	mov	r7, r0
 800e7e0:	f1b8 0f00 	cmp.w	r8, #0
 800e7e4:	d05b      	beq.n	800e89e <_dtoa_r+0xa76>
 800e7e6:	6879      	ldr	r1, [r7, #4]
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f000 fcc5 	bl	800f178 <_Balloc>
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	b928      	cbnz	r0, 800e7fe <_dtoa_r+0x9d6>
 800e7f2:	4b83      	ldr	r3, [pc, #524]	; (800ea00 <_dtoa_r+0xbd8>)
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e7fa:	f7ff bb2e 	b.w	800de5a <_dtoa_r+0x32>
 800e7fe:	693a      	ldr	r2, [r7, #16]
 800e800:	3202      	adds	r2, #2
 800e802:	0092      	lsls	r2, r2, #2
 800e804:	f107 010c 	add.w	r1, r7, #12
 800e808:	300c      	adds	r0, #12
 800e80a:	f7ff fa6e 	bl	800dcea <memcpy>
 800e80e:	2201      	movs	r2, #1
 800e810:	4629      	mov	r1, r5
 800e812:	4620      	mov	r0, r4
 800e814:	f000 ff0a 	bl	800f62c <__lshift>
 800e818:	9b00      	ldr	r3, [sp, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	9304      	str	r3, [sp, #16]
 800e81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e822:	4413      	add	r3, r2
 800e824:	9308      	str	r3, [sp, #32]
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	f003 0301 	and.w	r3, r3, #1
 800e82c:	46b8      	mov	r8, r7
 800e82e:	9306      	str	r3, [sp, #24]
 800e830:	4607      	mov	r7, r0
 800e832:	9b04      	ldr	r3, [sp, #16]
 800e834:	4631      	mov	r1, r6
 800e836:	3b01      	subs	r3, #1
 800e838:	4650      	mov	r0, sl
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	f7ff fa6c 	bl	800dd18 <quorem>
 800e840:	4641      	mov	r1, r8
 800e842:	9002      	str	r0, [sp, #8]
 800e844:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e848:	4650      	mov	r0, sl
 800e84a:	f000 ff5b 	bl	800f704 <__mcmp>
 800e84e:	463a      	mov	r2, r7
 800e850:	9005      	str	r0, [sp, #20]
 800e852:	4631      	mov	r1, r6
 800e854:	4620      	mov	r0, r4
 800e856:	f000 ff71 	bl	800f73c <__mdiff>
 800e85a:	68c2      	ldr	r2, [r0, #12]
 800e85c:	4605      	mov	r5, r0
 800e85e:	bb02      	cbnz	r2, 800e8a2 <_dtoa_r+0xa7a>
 800e860:	4601      	mov	r1, r0
 800e862:	4650      	mov	r0, sl
 800e864:	f000 ff4e 	bl	800f704 <__mcmp>
 800e868:	4602      	mov	r2, r0
 800e86a:	4629      	mov	r1, r5
 800e86c:	4620      	mov	r0, r4
 800e86e:	9209      	str	r2, [sp, #36]	; 0x24
 800e870:	f000 fcc2 	bl	800f1f8 <_Bfree>
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e878:	9d04      	ldr	r5, [sp, #16]
 800e87a:	ea43 0102 	orr.w	r1, r3, r2
 800e87e:	9b06      	ldr	r3, [sp, #24]
 800e880:	4319      	orrs	r1, r3
 800e882:	d110      	bne.n	800e8a6 <_dtoa_r+0xa7e>
 800e884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e888:	d029      	beq.n	800e8de <_dtoa_r+0xab6>
 800e88a:	9b05      	ldr	r3, [sp, #20]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	dd02      	ble.n	800e896 <_dtoa_r+0xa6e>
 800e890:	9b02      	ldr	r3, [sp, #8]
 800e892:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	f883 9000 	strb.w	r9, [r3]
 800e89c:	e774      	b.n	800e788 <_dtoa_r+0x960>
 800e89e:	4638      	mov	r0, r7
 800e8a0:	e7ba      	b.n	800e818 <_dtoa_r+0x9f0>
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	e7e1      	b.n	800e86a <_dtoa_r+0xa42>
 800e8a6:	9b05      	ldr	r3, [sp, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	db04      	blt.n	800e8b6 <_dtoa_r+0xa8e>
 800e8ac:	9907      	ldr	r1, [sp, #28]
 800e8ae:	430b      	orrs	r3, r1
 800e8b0:	9906      	ldr	r1, [sp, #24]
 800e8b2:	430b      	orrs	r3, r1
 800e8b4:	d120      	bne.n	800e8f8 <_dtoa_r+0xad0>
 800e8b6:	2a00      	cmp	r2, #0
 800e8b8:	dded      	ble.n	800e896 <_dtoa_r+0xa6e>
 800e8ba:	4651      	mov	r1, sl
 800e8bc:	2201      	movs	r2, #1
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 feb4 	bl	800f62c <__lshift>
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	4682      	mov	sl, r0
 800e8c8:	f000 ff1c 	bl	800f704 <__mcmp>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	dc03      	bgt.n	800e8d8 <_dtoa_r+0xab0>
 800e8d0:	d1e1      	bne.n	800e896 <_dtoa_r+0xa6e>
 800e8d2:	f019 0f01 	tst.w	r9, #1
 800e8d6:	d0de      	beq.n	800e896 <_dtoa_r+0xa6e>
 800e8d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8dc:	d1d8      	bne.n	800e890 <_dtoa_r+0xa68>
 800e8de:	9a01      	ldr	r2, [sp, #4]
 800e8e0:	2339      	movs	r3, #57	; 0x39
 800e8e2:	7013      	strb	r3, [r2, #0]
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	461d      	mov	r5, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8ee:	2a39      	cmp	r2, #57	; 0x39
 800e8f0:	d06c      	beq.n	800e9cc <_dtoa_r+0xba4>
 800e8f2:	3201      	adds	r2, #1
 800e8f4:	701a      	strb	r2, [r3, #0]
 800e8f6:	e747      	b.n	800e788 <_dtoa_r+0x960>
 800e8f8:	2a00      	cmp	r2, #0
 800e8fa:	dd07      	ble.n	800e90c <_dtoa_r+0xae4>
 800e8fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e900:	d0ed      	beq.n	800e8de <_dtoa_r+0xab6>
 800e902:	9a01      	ldr	r2, [sp, #4]
 800e904:	f109 0301 	add.w	r3, r9, #1
 800e908:	7013      	strb	r3, [r2, #0]
 800e90a:	e73d      	b.n	800e788 <_dtoa_r+0x960>
 800e90c:	9b04      	ldr	r3, [sp, #16]
 800e90e:	9a08      	ldr	r2, [sp, #32]
 800e910:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e914:	4293      	cmp	r3, r2
 800e916:	d043      	beq.n	800e9a0 <_dtoa_r+0xb78>
 800e918:	4651      	mov	r1, sl
 800e91a:	2300      	movs	r3, #0
 800e91c:	220a      	movs	r2, #10
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fc8c 	bl	800f23c <__multadd>
 800e924:	45b8      	cmp	r8, r7
 800e926:	4682      	mov	sl, r0
 800e928:	f04f 0300 	mov.w	r3, #0
 800e92c:	f04f 020a 	mov.w	r2, #10
 800e930:	4641      	mov	r1, r8
 800e932:	4620      	mov	r0, r4
 800e934:	d107      	bne.n	800e946 <_dtoa_r+0xb1e>
 800e936:	f000 fc81 	bl	800f23c <__multadd>
 800e93a:	4680      	mov	r8, r0
 800e93c:	4607      	mov	r7, r0
 800e93e:	9b04      	ldr	r3, [sp, #16]
 800e940:	3301      	adds	r3, #1
 800e942:	9304      	str	r3, [sp, #16]
 800e944:	e775      	b.n	800e832 <_dtoa_r+0xa0a>
 800e946:	f000 fc79 	bl	800f23c <__multadd>
 800e94a:	4639      	mov	r1, r7
 800e94c:	4680      	mov	r8, r0
 800e94e:	2300      	movs	r3, #0
 800e950:	220a      	movs	r2, #10
 800e952:	4620      	mov	r0, r4
 800e954:	f000 fc72 	bl	800f23c <__multadd>
 800e958:	4607      	mov	r7, r0
 800e95a:	e7f0      	b.n	800e93e <_dtoa_r+0xb16>
 800e95c:	9b04      	ldr	r3, [sp, #16]
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	9d00      	ldr	r5, [sp, #0]
 800e962:	4631      	mov	r1, r6
 800e964:	4650      	mov	r0, sl
 800e966:	f7ff f9d7 	bl	800dd18 <quorem>
 800e96a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e96e:	9b00      	ldr	r3, [sp, #0]
 800e970:	f805 9b01 	strb.w	r9, [r5], #1
 800e974:	1aea      	subs	r2, r5, r3
 800e976:	9b01      	ldr	r3, [sp, #4]
 800e978:	4293      	cmp	r3, r2
 800e97a:	dd07      	ble.n	800e98c <_dtoa_r+0xb64>
 800e97c:	4651      	mov	r1, sl
 800e97e:	2300      	movs	r3, #0
 800e980:	220a      	movs	r2, #10
 800e982:	4620      	mov	r0, r4
 800e984:	f000 fc5a 	bl	800f23c <__multadd>
 800e988:	4682      	mov	sl, r0
 800e98a:	e7ea      	b.n	800e962 <_dtoa_r+0xb3a>
 800e98c:	9b01      	ldr	r3, [sp, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bfc8      	it	gt
 800e992:	461d      	movgt	r5, r3
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	bfd8      	it	le
 800e998:	2501      	movle	r5, #1
 800e99a:	441d      	add	r5, r3
 800e99c:	f04f 0800 	mov.w	r8, #0
 800e9a0:	4651      	mov	r1, sl
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 fe41 	bl	800f62c <__lshift>
 800e9aa:	4631      	mov	r1, r6
 800e9ac:	4682      	mov	sl, r0
 800e9ae:	f000 fea9 	bl	800f704 <__mcmp>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	dc96      	bgt.n	800e8e4 <_dtoa_r+0xabc>
 800e9b6:	d102      	bne.n	800e9be <_dtoa_r+0xb96>
 800e9b8:	f019 0f01 	tst.w	r9, #1
 800e9bc:	d192      	bne.n	800e8e4 <_dtoa_r+0xabc>
 800e9be:	462b      	mov	r3, r5
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9c6:	2a30      	cmp	r2, #48	; 0x30
 800e9c8:	d0fa      	beq.n	800e9c0 <_dtoa_r+0xb98>
 800e9ca:	e6dd      	b.n	800e788 <_dtoa_r+0x960>
 800e9cc:	9a00      	ldr	r2, [sp, #0]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d189      	bne.n	800e8e6 <_dtoa_r+0xabe>
 800e9d2:	f10b 0b01 	add.w	fp, fp, #1
 800e9d6:	2331      	movs	r3, #49	; 0x31
 800e9d8:	e796      	b.n	800e908 <_dtoa_r+0xae0>
 800e9da:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <_dtoa_r+0xbdc>)
 800e9dc:	f7ff ba99 	b.w	800df12 <_dtoa_r+0xea>
 800e9e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f47f aa6d 	bne.w	800dec2 <_dtoa_r+0x9a>
 800e9e8:	4b07      	ldr	r3, [pc, #28]	; (800ea08 <_dtoa_r+0xbe0>)
 800e9ea:	f7ff ba92 	b.w	800df12 <_dtoa_r+0xea>
 800e9ee:	9b01      	ldr	r3, [sp, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	dcb5      	bgt.n	800e960 <_dtoa_r+0xb38>
 800e9f4:	9b07      	ldr	r3, [sp, #28]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	f73f aeb1 	bgt.w	800e75e <_dtoa_r+0x936>
 800e9fc:	e7b0      	b.n	800e960 <_dtoa_r+0xb38>
 800e9fe:	bf00      	nop
 800ea00:	08011779 	.word	0x08011779
 800ea04:	080116d1 	.word	0x080116d1
 800ea08:	080116fd 	.word	0x080116fd

0800ea0c <_free_r>:
 800ea0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	d044      	beq.n	800ea9c <_free_r+0x90>
 800ea12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea16:	9001      	str	r0, [sp, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea1e:	bfb8      	it	lt
 800ea20:	18e4      	addlt	r4, r4, r3
 800ea22:	f7fd fba1 	bl	800c168 <__malloc_lock>
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <_free_r+0x94>)
 800ea28:	9801      	ldr	r0, [sp, #4]
 800ea2a:	6813      	ldr	r3, [r2, #0]
 800ea2c:	b933      	cbnz	r3, 800ea3c <_free_r+0x30>
 800ea2e:	6063      	str	r3, [r4, #4]
 800ea30:	6014      	str	r4, [r2, #0]
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea38:	f7fd bb9c 	b.w	800c174 <__malloc_unlock>
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	d908      	bls.n	800ea52 <_free_r+0x46>
 800ea40:	6825      	ldr	r5, [r4, #0]
 800ea42:	1961      	adds	r1, r4, r5
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf01      	itttt	eq
 800ea48:	6819      	ldreq	r1, [r3, #0]
 800ea4a:	685b      	ldreq	r3, [r3, #4]
 800ea4c:	1949      	addeq	r1, r1, r5
 800ea4e:	6021      	streq	r1, [r4, #0]
 800ea50:	e7ed      	b.n	800ea2e <_free_r+0x22>
 800ea52:	461a      	mov	r2, r3
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	b10b      	cbz	r3, 800ea5c <_free_r+0x50>
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	d9fa      	bls.n	800ea52 <_free_r+0x46>
 800ea5c:	6811      	ldr	r1, [r2, #0]
 800ea5e:	1855      	adds	r5, r2, r1
 800ea60:	42a5      	cmp	r5, r4
 800ea62:	d10b      	bne.n	800ea7c <_free_r+0x70>
 800ea64:	6824      	ldr	r4, [r4, #0]
 800ea66:	4421      	add	r1, r4
 800ea68:	1854      	adds	r4, r2, r1
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	6011      	str	r1, [r2, #0]
 800ea6e:	d1e0      	bne.n	800ea32 <_free_r+0x26>
 800ea70:	681c      	ldr	r4, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	440c      	add	r4, r1
 800ea78:	6014      	str	r4, [r2, #0]
 800ea7a:	e7da      	b.n	800ea32 <_free_r+0x26>
 800ea7c:	d902      	bls.n	800ea84 <_free_r+0x78>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	e7d6      	b.n	800ea32 <_free_r+0x26>
 800ea84:	6825      	ldr	r5, [r4, #0]
 800ea86:	1961      	adds	r1, r4, r5
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf04      	itt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bf04      	itt	eq
 800ea94:	1949      	addeq	r1, r1, r5
 800ea96:	6021      	streq	r1, [r4, #0]
 800ea98:	6054      	str	r4, [r2, #4]
 800ea9a:	e7ca      	b.n	800ea32 <_free_r+0x26>
 800ea9c:	b003      	add	sp, #12
 800ea9e:	bd30      	pop	{r4, r5, pc}
 800eaa0:	20005610 	.word	0x20005610

0800eaa4 <rshift>:
 800eaa4:	6903      	ldr	r3, [r0, #16]
 800eaa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eaaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eab2:	f100 0414 	add.w	r4, r0, #20
 800eab6:	dd45      	ble.n	800eb44 <rshift+0xa0>
 800eab8:	f011 011f 	ands.w	r1, r1, #31
 800eabc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eac0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eac4:	d10c      	bne.n	800eae0 <rshift+0x3c>
 800eac6:	f100 0710 	add.w	r7, r0, #16
 800eaca:	4629      	mov	r1, r5
 800eacc:	42b1      	cmp	r1, r6
 800eace:	d334      	bcc.n	800eb3a <rshift+0x96>
 800ead0:	1a9b      	subs	r3, r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	1eea      	subs	r2, r5, #3
 800ead6:	4296      	cmp	r6, r2
 800ead8:	bf38      	it	cc
 800eada:	2300      	movcc	r3, #0
 800eadc:	4423      	add	r3, r4
 800eade:	e015      	b.n	800eb0c <rshift+0x68>
 800eae0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eae4:	f1c1 0820 	rsb	r8, r1, #32
 800eae8:	40cf      	lsrs	r7, r1
 800eaea:	f105 0e04 	add.w	lr, r5, #4
 800eaee:	46a1      	mov	r9, r4
 800eaf0:	4576      	cmp	r6, lr
 800eaf2:	46f4      	mov	ip, lr
 800eaf4:	d815      	bhi.n	800eb22 <rshift+0x7e>
 800eaf6:	1a9a      	subs	r2, r3, r2
 800eaf8:	0092      	lsls	r2, r2, #2
 800eafa:	3a04      	subs	r2, #4
 800eafc:	3501      	adds	r5, #1
 800eafe:	42ae      	cmp	r6, r5
 800eb00:	bf38      	it	cc
 800eb02:	2200      	movcc	r2, #0
 800eb04:	18a3      	adds	r3, r4, r2
 800eb06:	50a7      	str	r7, [r4, r2]
 800eb08:	b107      	cbz	r7, 800eb0c <rshift+0x68>
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	1b1a      	subs	r2, r3, r4
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb14:	bf08      	it	eq
 800eb16:	2300      	moveq	r3, #0
 800eb18:	6102      	str	r2, [r0, #16]
 800eb1a:	bf08      	it	eq
 800eb1c:	6143      	streq	r3, [r0, #20]
 800eb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb22:	f8dc c000 	ldr.w	ip, [ip]
 800eb26:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb2a:	ea4c 0707 	orr.w	r7, ip, r7
 800eb2e:	f849 7b04 	str.w	r7, [r9], #4
 800eb32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb36:	40cf      	lsrs	r7, r1
 800eb38:	e7da      	b.n	800eaf0 <rshift+0x4c>
 800eb3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb42:	e7c3      	b.n	800eacc <rshift+0x28>
 800eb44:	4623      	mov	r3, r4
 800eb46:	e7e1      	b.n	800eb0c <rshift+0x68>

0800eb48 <__hexdig_fun>:
 800eb48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb4c:	2b09      	cmp	r3, #9
 800eb4e:	d802      	bhi.n	800eb56 <__hexdig_fun+0xe>
 800eb50:	3820      	subs	r0, #32
 800eb52:	b2c0      	uxtb	r0, r0
 800eb54:	4770      	bx	lr
 800eb56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eb5a:	2b05      	cmp	r3, #5
 800eb5c:	d801      	bhi.n	800eb62 <__hexdig_fun+0x1a>
 800eb5e:	3847      	subs	r0, #71	; 0x47
 800eb60:	e7f7      	b.n	800eb52 <__hexdig_fun+0xa>
 800eb62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eb66:	2b05      	cmp	r3, #5
 800eb68:	d801      	bhi.n	800eb6e <__hexdig_fun+0x26>
 800eb6a:	3827      	subs	r0, #39	; 0x27
 800eb6c:	e7f1      	b.n	800eb52 <__hexdig_fun+0xa>
 800eb6e:	2000      	movs	r0, #0
 800eb70:	4770      	bx	lr
	...

0800eb74 <__gethex>:
 800eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb78:	4617      	mov	r7, r2
 800eb7a:	680a      	ldr	r2, [r1, #0]
 800eb7c:	b085      	sub	sp, #20
 800eb7e:	f102 0b02 	add.w	fp, r2, #2
 800eb82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb8a:	4681      	mov	r9, r0
 800eb8c:	468a      	mov	sl, r1
 800eb8e:	9302      	str	r3, [sp, #8]
 800eb90:	32fe      	adds	r2, #254	; 0xfe
 800eb92:	eb02 030b 	add.w	r3, r2, fp
 800eb96:	46d8      	mov	r8, fp
 800eb98:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	2830      	cmp	r0, #48	; 0x30
 800eba0:	d0f7      	beq.n	800eb92 <__gethex+0x1e>
 800eba2:	f7ff ffd1 	bl	800eb48 <__hexdig_fun>
 800eba6:	4604      	mov	r4, r0
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d138      	bne.n	800ec1e <__gethex+0xaa>
 800ebac:	49a7      	ldr	r1, [pc, #668]	; (800ee4c <__gethex+0x2d8>)
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	f7fe ffab 	bl	800db0c <strncmp>
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d169      	bne.n	800ec90 <__gethex+0x11c>
 800ebbc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ebc0:	465d      	mov	r5, fp
 800ebc2:	f7ff ffc1 	bl	800eb48 <__hexdig_fun>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d064      	beq.n	800ec94 <__gethex+0x120>
 800ebca:	465a      	mov	r2, fp
 800ebcc:	7810      	ldrb	r0, [r2, #0]
 800ebce:	2830      	cmp	r0, #48	; 0x30
 800ebd0:	4690      	mov	r8, r2
 800ebd2:	f102 0201 	add.w	r2, r2, #1
 800ebd6:	d0f9      	beq.n	800ebcc <__gethex+0x58>
 800ebd8:	f7ff ffb6 	bl	800eb48 <__hexdig_fun>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	fab0 f480 	clz	r4, r0
 800ebe2:	0964      	lsrs	r4, r4, #5
 800ebe4:	465e      	mov	r6, fp
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	4642      	mov	r2, r8
 800ebea:	4615      	mov	r5, r2
 800ebec:	3201      	adds	r2, #1
 800ebee:	7828      	ldrb	r0, [r5, #0]
 800ebf0:	f7ff ffaa 	bl	800eb48 <__hexdig_fun>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1f8      	bne.n	800ebea <__gethex+0x76>
 800ebf8:	4994      	ldr	r1, [pc, #592]	; (800ee4c <__gethex+0x2d8>)
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7fe ff85 	bl	800db0c <strncmp>
 800ec02:	b978      	cbnz	r0, 800ec24 <__gethex+0xb0>
 800ec04:	b946      	cbnz	r6, 800ec18 <__gethex+0xa4>
 800ec06:	1c6e      	adds	r6, r5, #1
 800ec08:	4632      	mov	r2, r6
 800ec0a:	4615      	mov	r5, r2
 800ec0c:	3201      	adds	r2, #1
 800ec0e:	7828      	ldrb	r0, [r5, #0]
 800ec10:	f7ff ff9a 	bl	800eb48 <__hexdig_fun>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1f8      	bne.n	800ec0a <__gethex+0x96>
 800ec18:	1b73      	subs	r3, r6, r5
 800ec1a:	009e      	lsls	r6, r3, #2
 800ec1c:	e004      	b.n	800ec28 <__gethex+0xb4>
 800ec1e:	2400      	movs	r4, #0
 800ec20:	4626      	mov	r6, r4
 800ec22:	e7e1      	b.n	800ebe8 <__gethex+0x74>
 800ec24:	2e00      	cmp	r6, #0
 800ec26:	d1f7      	bne.n	800ec18 <__gethex+0xa4>
 800ec28:	782b      	ldrb	r3, [r5, #0]
 800ec2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec2e:	2b50      	cmp	r3, #80	; 0x50
 800ec30:	d13d      	bne.n	800ecae <__gethex+0x13a>
 800ec32:	786b      	ldrb	r3, [r5, #1]
 800ec34:	2b2b      	cmp	r3, #43	; 0x2b
 800ec36:	d02f      	beq.n	800ec98 <__gethex+0x124>
 800ec38:	2b2d      	cmp	r3, #45	; 0x2d
 800ec3a:	d031      	beq.n	800eca0 <__gethex+0x12c>
 800ec3c:	1c69      	adds	r1, r5, #1
 800ec3e:	f04f 0b00 	mov.w	fp, #0
 800ec42:	7808      	ldrb	r0, [r1, #0]
 800ec44:	f7ff ff80 	bl	800eb48 <__hexdig_fun>
 800ec48:	1e42      	subs	r2, r0, #1
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	2a18      	cmp	r2, #24
 800ec4e:	d82e      	bhi.n	800ecae <__gethex+0x13a>
 800ec50:	f1a0 0210 	sub.w	r2, r0, #16
 800ec54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec58:	f7ff ff76 	bl	800eb48 <__hexdig_fun>
 800ec5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ec60:	fa5f fc8c 	uxtb.w	ip, ip
 800ec64:	f1bc 0f18 	cmp.w	ip, #24
 800ec68:	d91d      	bls.n	800eca6 <__gethex+0x132>
 800ec6a:	f1bb 0f00 	cmp.w	fp, #0
 800ec6e:	d000      	beq.n	800ec72 <__gethex+0xfe>
 800ec70:	4252      	negs	r2, r2
 800ec72:	4416      	add	r6, r2
 800ec74:	f8ca 1000 	str.w	r1, [sl]
 800ec78:	b1dc      	cbz	r4, 800ecb2 <__gethex+0x13e>
 800ec7a:	9b01      	ldr	r3, [sp, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	bf14      	ite	ne
 800ec80:	f04f 0800 	movne.w	r8, #0
 800ec84:	f04f 0806 	moveq.w	r8, #6
 800ec88:	4640      	mov	r0, r8
 800ec8a:	b005      	add	sp, #20
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec90:	4645      	mov	r5, r8
 800ec92:	4626      	mov	r6, r4
 800ec94:	2401      	movs	r4, #1
 800ec96:	e7c7      	b.n	800ec28 <__gethex+0xb4>
 800ec98:	f04f 0b00 	mov.w	fp, #0
 800ec9c:	1ca9      	adds	r1, r5, #2
 800ec9e:	e7d0      	b.n	800ec42 <__gethex+0xce>
 800eca0:	f04f 0b01 	mov.w	fp, #1
 800eca4:	e7fa      	b.n	800ec9c <__gethex+0x128>
 800eca6:	230a      	movs	r3, #10
 800eca8:	fb03 0002 	mla	r0, r3, r2, r0
 800ecac:	e7d0      	b.n	800ec50 <__gethex+0xdc>
 800ecae:	4629      	mov	r1, r5
 800ecb0:	e7e0      	b.n	800ec74 <__gethex+0x100>
 800ecb2:	eba5 0308 	sub.w	r3, r5, r8
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	4621      	mov	r1, r4
 800ecba:	2b07      	cmp	r3, #7
 800ecbc:	dc0a      	bgt.n	800ecd4 <__gethex+0x160>
 800ecbe:	4648      	mov	r0, r9
 800ecc0:	f000 fa5a 	bl	800f178 <_Balloc>
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	b940      	cbnz	r0, 800ecda <__gethex+0x166>
 800ecc8:	4b61      	ldr	r3, [pc, #388]	; (800ee50 <__gethex+0x2dc>)
 800ecca:	4602      	mov	r2, r0
 800eccc:	21e4      	movs	r1, #228	; 0xe4
 800ecce:	4861      	ldr	r0, [pc, #388]	; (800ee54 <__gethex+0x2e0>)
 800ecd0:	f001 f98a 	bl	800ffe8 <__assert_func>
 800ecd4:	3101      	adds	r1, #1
 800ecd6:	105b      	asrs	r3, r3, #1
 800ecd8:	e7ef      	b.n	800ecba <__gethex+0x146>
 800ecda:	f100 0a14 	add.w	sl, r0, #20
 800ecde:	2300      	movs	r3, #0
 800ece0:	495a      	ldr	r1, [pc, #360]	; (800ee4c <__gethex+0x2d8>)
 800ece2:	f8cd a004 	str.w	sl, [sp, #4]
 800ece6:	469b      	mov	fp, r3
 800ece8:	45a8      	cmp	r8, r5
 800ecea:	d342      	bcc.n	800ed72 <__gethex+0x1fe>
 800ecec:	9801      	ldr	r0, [sp, #4]
 800ecee:	f840 bb04 	str.w	fp, [r0], #4
 800ecf2:	eba0 000a 	sub.w	r0, r0, sl
 800ecf6:	1080      	asrs	r0, r0, #2
 800ecf8:	6120      	str	r0, [r4, #16]
 800ecfa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ecfe:	4658      	mov	r0, fp
 800ed00:	f000 fb2c 	bl	800f35c <__hi0bits>
 800ed04:	683d      	ldr	r5, [r7, #0]
 800ed06:	eba8 0000 	sub.w	r0, r8, r0
 800ed0a:	42a8      	cmp	r0, r5
 800ed0c:	dd59      	ble.n	800edc2 <__gethex+0x24e>
 800ed0e:	eba0 0805 	sub.w	r8, r0, r5
 800ed12:	4641      	mov	r1, r8
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 febb 	bl	800fa90 <__any_on>
 800ed1a:	4683      	mov	fp, r0
 800ed1c:	b1b8      	cbz	r0, 800ed4e <__gethex+0x1da>
 800ed1e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ed22:	1159      	asrs	r1, r3, #5
 800ed24:	f003 021f 	and.w	r2, r3, #31
 800ed28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ed2c:	f04f 0b01 	mov.w	fp, #1
 800ed30:	fa0b f202 	lsl.w	r2, fp, r2
 800ed34:	420a      	tst	r2, r1
 800ed36:	d00a      	beq.n	800ed4e <__gethex+0x1da>
 800ed38:	455b      	cmp	r3, fp
 800ed3a:	dd06      	ble.n	800ed4a <__gethex+0x1d6>
 800ed3c:	f1a8 0102 	sub.w	r1, r8, #2
 800ed40:	4620      	mov	r0, r4
 800ed42:	f000 fea5 	bl	800fa90 <__any_on>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d138      	bne.n	800edbc <__gethex+0x248>
 800ed4a:	f04f 0b02 	mov.w	fp, #2
 800ed4e:	4641      	mov	r1, r8
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7ff fea7 	bl	800eaa4 <rshift>
 800ed56:	4446      	add	r6, r8
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	42b3      	cmp	r3, r6
 800ed5c:	da41      	bge.n	800ede2 <__gethex+0x26e>
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4648      	mov	r0, r9
 800ed62:	f000 fa49 	bl	800f1f8 <_Bfree>
 800ed66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed68:	2300      	movs	r3, #0
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ed70:	e78a      	b.n	800ec88 <__gethex+0x114>
 800ed72:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ed76:	2a2e      	cmp	r2, #46	; 0x2e
 800ed78:	d014      	beq.n	800eda4 <__gethex+0x230>
 800ed7a:	2b20      	cmp	r3, #32
 800ed7c:	d106      	bne.n	800ed8c <__gethex+0x218>
 800ed7e:	9b01      	ldr	r3, [sp, #4]
 800ed80:	f843 bb04 	str.w	fp, [r3], #4
 800ed84:	f04f 0b00 	mov.w	fp, #0
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	465b      	mov	r3, fp
 800ed8c:	7828      	ldrb	r0, [r5, #0]
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	f7ff feda 	bl	800eb48 <__hexdig_fun>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	f000 000f 	and.w	r0, r0, #15
 800ed9a:	4098      	lsls	r0, r3
 800ed9c:	ea4b 0b00 	orr.w	fp, fp, r0
 800eda0:	3304      	adds	r3, #4
 800eda2:	e7a1      	b.n	800ece8 <__gethex+0x174>
 800eda4:	45a8      	cmp	r8, r5
 800eda6:	d8e8      	bhi.n	800ed7a <__gethex+0x206>
 800eda8:	2201      	movs	r2, #1
 800edaa:	4628      	mov	r0, r5
 800edac:	9303      	str	r3, [sp, #12]
 800edae:	f7fe fead 	bl	800db0c <strncmp>
 800edb2:	4926      	ldr	r1, [pc, #152]	; (800ee4c <__gethex+0x2d8>)
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d1df      	bne.n	800ed7a <__gethex+0x206>
 800edba:	e795      	b.n	800ece8 <__gethex+0x174>
 800edbc:	f04f 0b03 	mov.w	fp, #3
 800edc0:	e7c5      	b.n	800ed4e <__gethex+0x1da>
 800edc2:	da0b      	bge.n	800eddc <__gethex+0x268>
 800edc4:	eba5 0800 	sub.w	r8, r5, r0
 800edc8:	4621      	mov	r1, r4
 800edca:	4642      	mov	r2, r8
 800edcc:	4648      	mov	r0, r9
 800edce:	f000 fc2d 	bl	800f62c <__lshift>
 800edd2:	eba6 0608 	sub.w	r6, r6, r8
 800edd6:	4604      	mov	r4, r0
 800edd8:	f100 0a14 	add.w	sl, r0, #20
 800eddc:	f04f 0b00 	mov.w	fp, #0
 800ede0:	e7ba      	b.n	800ed58 <__gethex+0x1e4>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	42b3      	cmp	r3, r6
 800ede6:	dd73      	ble.n	800eed0 <__gethex+0x35c>
 800ede8:	1b9e      	subs	r6, r3, r6
 800edea:	42b5      	cmp	r5, r6
 800edec:	dc34      	bgt.n	800ee58 <__gethex+0x2e4>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d023      	beq.n	800ee3c <__gethex+0x2c8>
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d025      	beq.n	800ee44 <__gethex+0x2d0>
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d115      	bne.n	800ee28 <__gethex+0x2b4>
 800edfc:	42b5      	cmp	r5, r6
 800edfe:	d113      	bne.n	800ee28 <__gethex+0x2b4>
 800ee00:	2d01      	cmp	r5, #1
 800ee02:	d10b      	bne.n	800ee1c <__gethex+0x2a8>
 800ee04:	9a02      	ldr	r2, [sp, #8]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6013      	str	r3, [r2, #0]
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	f8ca 3000 	str.w	r3, [sl]
 800ee12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee14:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ee18:	601c      	str	r4, [r3, #0]
 800ee1a:	e735      	b.n	800ec88 <__gethex+0x114>
 800ee1c:	1e69      	subs	r1, r5, #1
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f000 fe36 	bl	800fa90 <__any_on>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1ed      	bne.n	800ee04 <__gethex+0x290>
 800ee28:	4621      	mov	r1, r4
 800ee2a:	4648      	mov	r0, r9
 800ee2c:	f000 f9e4 	bl	800f1f8 <_Bfree>
 800ee30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee32:	2300      	movs	r3, #0
 800ee34:	6013      	str	r3, [r2, #0]
 800ee36:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ee3a:	e725      	b.n	800ec88 <__gethex+0x114>
 800ee3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1f2      	bne.n	800ee28 <__gethex+0x2b4>
 800ee42:	e7df      	b.n	800ee04 <__gethex+0x290>
 800ee44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1dc      	bne.n	800ee04 <__gethex+0x290>
 800ee4a:	e7ed      	b.n	800ee28 <__gethex+0x2b4>
 800ee4c:	0801156c 	.word	0x0801156c
 800ee50:	08011779 	.word	0x08011779
 800ee54:	0801178a 	.word	0x0801178a
 800ee58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ee5c:	f1bb 0f00 	cmp.w	fp, #0
 800ee60:	d133      	bne.n	800eeca <__gethex+0x356>
 800ee62:	f1b8 0f00 	cmp.w	r8, #0
 800ee66:	d004      	beq.n	800ee72 <__gethex+0x2fe>
 800ee68:	4641      	mov	r1, r8
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f000 fe10 	bl	800fa90 <__any_on>
 800ee70:	4683      	mov	fp, r0
 800ee72:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ee76:	2301      	movs	r3, #1
 800ee78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee7c:	f008 081f 	and.w	r8, r8, #31
 800ee80:	fa03 f308 	lsl.w	r3, r3, r8
 800ee84:	4213      	tst	r3, r2
 800ee86:	4631      	mov	r1, r6
 800ee88:	4620      	mov	r0, r4
 800ee8a:	bf18      	it	ne
 800ee8c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ee90:	1bad      	subs	r5, r5, r6
 800ee92:	f7ff fe07 	bl	800eaa4 <rshift>
 800ee96:	687e      	ldr	r6, [r7, #4]
 800ee98:	f04f 0802 	mov.w	r8, #2
 800ee9c:	f1bb 0f00 	cmp.w	fp, #0
 800eea0:	d04a      	beq.n	800ef38 <__gethex+0x3c4>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d016      	beq.n	800eed6 <__gethex+0x362>
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d018      	beq.n	800eede <__gethex+0x36a>
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d109      	bne.n	800eec4 <__gethex+0x350>
 800eeb0:	f01b 0f02 	tst.w	fp, #2
 800eeb4:	d006      	beq.n	800eec4 <__gethex+0x350>
 800eeb6:	f8da 3000 	ldr.w	r3, [sl]
 800eeba:	ea4b 0b03 	orr.w	fp, fp, r3
 800eebe:	f01b 0f01 	tst.w	fp, #1
 800eec2:	d10f      	bne.n	800eee4 <__gethex+0x370>
 800eec4:	f048 0810 	orr.w	r8, r8, #16
 800eec8:	e036      	b.n	800ef38 <__gethex+0x3c4>
 800eeca:	f04f 0b01 	mov.w	fp, #1
 800eece:	e7d0      	b.n	800ee72 <__gethex+0x2fe>
 800eed0:	f04f 0801 	mov.w	r8, #1
 800eed4:	e7e2      	b.n	800ee9c <__gethex+0x328>
 800eed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eed8:	f1c3 0301 	rsb	r3, r3, #1
 800eedc:	930f      	str	r3, [sp, #60]	; 0x3c
 800eede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d0ef      	beq.n	800eec4 <__gethex+0x350>
 800eee4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eee8:	f104 0214 	add.w	r2, r4, #20
 800eeec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800eef6:	2300      	movs	r3, #0
 800eef8:	4694      	mov	ip, r2
 800eefa:	f852 1b04 	ldr.w	r1, [r2], #4
 800eefe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800ef02:	d01e      	beq.n	800ef42 <__gethex+0x3ce>
 800ef04:	3101      	adds	r1, #1
 800ef06:	f8cc 1000 	str.w	r1, [ip]
 800ef0a:	f1b8 0f02 	cmp.w	r8, #2
 800ef0e:	f104 0214 	add.w	r2, r4, #20
 800ef12:	d13d      	bne.n	800ef90 <__gethex+0x41c>
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	42ab      	cmp	r3, r5
 800ef1a:	d10b      	bne.n	800ef34 <__gethex+0x3c0>
 800ef1c:	1169      	asrs	r1, r5, #5
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f005 051f 	and.w	r5, r5, #31
 800ef24:	fa03 f505 	lsl.w	r5, r3, r5
 800ef28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef2c:	421d      	tst	r5, r3
 800ef2e:	bf18      	it	ne
 800ef30:	f04f 0801 	movne.w	r8, #1
 800ef34:	f048 0820 	orr.w	r8, r8, #32
 800ef38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef3a:	601c      	str	r4, [r3, #0]
 800ef3c:	9b02      	ldr	r3, [sp, #8]
 800ef3e:	601e      	str	r6, [r3, #0]
 800ef40:	e6a2      	b.n	800ec88 <__gethex+0x114>
 800ef42:	4290      	cmp	r0, r2
 800ef44:	f842 3c04 	str.w	r3, [r2, #-4]
 800ef48:	d8d6      	bhi.n	800eef8 <__gethex+0x384>
 800ef4a:	68a2      	ldr	r2, [r4, #8]
 800ef4c:	4593      	cmp	fp, r2
 800ef4e:	db17      	blt.n	800ef80 <__gethex+0x40c>
 800ef50:	6861      	ldr	r1, [r4, #4]
 800ef52:	4648      	mov	r0, r9
 800ef54:	3101      	adds	r1, #1
 800ef56:	f000 f90f 	bl	800f178 <_Balloc>
 800ef5a:	4682      	mov	sl, r0
 800ef5c:	b918      	cbnz	r0, 800ef66 <__gethex+0x3f2>
 800ef5e:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <__gethex+0x458>)
 800ef60:	4602      	mov	r2, r0
 800ef62:	2184      	movs	r1, #132	; 0x84
 800ef64:	e6b3      	b.n	800ecce <__gethex+0x15a>
 800ef66:	6922      	ldr	r2, [r4, #16]
 800ef68:	3202      	adds	r2, #2
 800ef6a:	f104 010c 	add.w	r1, r4, #12
 800ef6e:	0092      	lsls	r2, r2, #2
 800ef70:	300c      	adds	r0, #12
 800ef72:	f7fe feba 	bl	800dcea <memcpy>
 800ef76:	4621      	mov	r1, r4
 800ef78:	4648      	mov	r0, r9
 800ef7a:	f000 f93d 	bl	800f1f8 <_Bfree>
 800ef7e:	4654      	mov	r4, sl
 800ef80:	6922      	ldr	r2, [r4, #16]
 800ef82:	1c51      	adds	r1, r2, #1
 800ef84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ef88:	6121      	str	r1, [r4, #16]
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	6151      	str	r1, [r2, #20]
 800ef8e:	e7bc      	b.n	800ef0a <__gethex+0x396>
 800ef90:	6921      	ldr	r1, [r4, #16]
 800ef92:	4559      	cmp	r1, fp
 800ef94:	dd0b      	ble.n	800efae <__gethex+0x43a>
 800ef96:	2101      	movs	r1, #1
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7ff fd83 	bl	800eaa4 <rshift>
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	3601      	adds	r6, #1
 800efa2:	42b3      	cmp	r3, r6
 800efa4:	f6ff aedb 	blt.w	800ed5e <__gethex+0x1ea>
 800efa8:	f04f 0801 	mov.w	r8, #1
 800efac:	e7c2      	b.n	800ef34 <__gethex+0x3c0>
 800efae:	f015 051f 	ands.w	r5, r5, #31
 800efb2:	d0f9      	beq.n	800efa8 <__gethex+0x434>
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	441a      	add	r2, r3
 800efb8:	f1c5 0520 	rsb	r5, r5, #32
 800efbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800efc0:	f000 f9cc 	bl	800f35c <__hi0bits>
 800efc4:	42a8      	cmp	r0, r5
 800efc6:	dbe6      	blt.n	800ef96 <__gethex+0x422>
 800efc8:	e7ee      	b.n	800efa8 <__gethex+0x434>
 800efca:	bf00      	nop
 800efcc:	08011779 	.word	0x08011779

0800efd0 <L_shift>:
 800efd0:	f1c2 0208 	rsb	r2, r2, #8
 800efd4:	0092      	lsls	r2, r2, #2
 800efd6:	b570      	push	{r4, r5, r6, lr}
 800efd8:	f1c2 0620 	rsb	r6, r2, #32
 800efdc:	6843      	ldr	r3, [r0, #4]
 800efde:	6804      	ldr	r4, [r0, #0]
 800efe0:	fa03 f506 	lsl.w	r5, r3, r6
 800efe4:	432c      	orrs	r4, r5
 800efe6:	40d3      	lsrs	r3, r2
 800efe8:	6004      	str	r4, [r0, #0]
 800efea:	f840 3f04 	str.w	r3, [r0, #4]!
 800efee:	4288      	cmp	r0, r1
 800eff0:	d3f4      	bcc.n	800efdc <L_shift+0xc>
 800eff2:	bd70      	pop	{r4, r5, r6, pc}

0800eff4 <__match>:
 800eff4:	b530      	push	{r4, r5, lr}
 800eff6:	6803      	ldr	r3, [r0, #0]
 800eff8:	3301      	adds	r3, #1
 800effa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800effe:	b914      	cbnz	r4, 800f006 <__match+0x12>
 800f000:	6003      	str	r3, [r0, #0]
 800f002:	2001      	movs	r0, #1
 800f004:	bd30      	pop	{r4, r5, pc}
 800f006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f00e:	2d19      	cmp	r5, #25
 800f010:	bf98      	it	ls
 800f012:	3220      	addls	r2, #32
 800f014:	42a2      	cmp	r2, r4
 800f016:	d0f0      	beq.n	800effa <__match+0x6>
 800f018:	2000      	movs	r0, #0
 800f01a:	e7f3      	b.n	800f004 <__match+0x10>

0800f01c <__hexnan>:
 800f01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f020:	680b      	ldr	r3, [r1, #0]
 800f022:	6801      	ldr	r1, [r0, #0]
 800f024:	115e      	asrs	r6, r3, #5
 800f026:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f02a:	f013 031f 	ands.w	r3, r3, #31
 800f02e:	b087      	sub	sp, #28
 800f030:	bf18      	it	ne
 800f032:	3604      	addne	r6, #4
 800f034:	2500      	movs	r5, #0
 800f036:	1f37      	subs	r7, r6, #4
 800f038:	4682      	mov	sl, r0
 800f03a:	4690      	mov	r8, r2
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f042:	46b9      	mov	r9, r7
 800f044:	463c      	mov	r4, r7
 800f046:	9502      	str	r5, [sp, #8]
 800f048:	46ab      	mov	fp, r5
 800f04a:	784a      	ldrb	r2, [r1, #1]
 800f04c:	1c4b      	adds	r3, r1, #1
 800f04e:	9303      	str	r3, [sp, #12]
 800f050:	b342      	cbz	r2, 800f0a4 <__hexnan+0x88>
 800f052:	4610      	mov	r0, r2
 800f054:	9105      	str	r1, [sp, #20]
 800f056:	9204      	str	r2, [sp, #16]
 800f058:	f7ff fd76 	bl	800eb48 <__hexdig_fun>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d14f      	bne.n	800f100 <__hexnan+0xe4>
 800f060:	9a04      	ldr	r2, [sp, #16]
 800f062:	9905      	ldr	r1, [sp, #20]
 800f064:	2a20      	cmp	r2, #32
 800f066:	d818      	bhi.n	800f09a <__hexnan+0x7e>
 800f068:	9b02      	ldr	r3, [sp, #8]
 800f06a:	459b      	cmp	fp, r3
 800f06c:	dd13      	ble.n	800f096 <__hexnan+0x7a>
 800f06e:	454c      	cmp	r4, r9
 800f070:	d206      	bcs.n	800f080 <__hexnan+0x64>
 800f072:	2d07      	cmp	r5, #7
 800f074:	dc04      	bgt.n	800f080 <__hexnan+0x64>
 800f076:	462a      	mov	r2, r5
 800f078:	4649      	mov	r1, r9
 800f07a:	4620      	mov	r0, r4
 800f07c:	f7ff ffa8 	bl	800efd0 <L_shift>
 800f080:	4544      	cmp	r4, r8
 800f082:	d950      	bls.n	800f126 <__hexnan+0x10a>
 800f084:	2300      	movs	r3, #0
 800f086:	f1a4 0904 	sub.w	r9, r4, #4
 800f08a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f08e:	f8cd b008 	str.w	fp, [sp, #8]
 800f092:	464c      	mov	r4, r9
 800f094:	461d      	mov	r5, r3
 800f096:	9903      	ldr	r1, [sp, #12]
 800f098:	e7d7      	b.n	800f04a <__hexnan+0x2e>
 800f09a:	2a29      	cmp	r2, #41	; 0x29
 800f09c:	d155      	bne.n	800f14a <__hexnan+0x12e>
 800f09e:	3102      	adds	r1, #2
 800f0a0:	f8ca 1000 	str.w	r1, [sl]
 800f0a4:	f1bb 0f00 	cmp.w	fp, #0
 800f0a8:	d04f      	beq.n	800f14a <__hexnan+0x12e>
 800f0aa:	454c      	cmp	r4, r9
 800f0ac:	d206      	bcs.n	800f0bc <__hexnan+0xa0>
 800f0ae:	2d07      	cmp	r5, #7
 800f0b0:	dc04      	bgt.n	800f0bc <__hexnan+0xa0>
 800f0b2:	462a      	mov	r2, r5
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f7ff ff8a 	bl	800efd0 <L_shift>
 800f0bc:	4544      	cmp	r4, r8
 800f0be:	d934      	bls.n	800f12a <__hexnan+0x10e>
 800f0c0:	f1a8 0204 	sub.w	r2, r8, #4
 800f0c4:	4623      	mov	r3, r4
 800f0c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0ce:	429f      	cmp	r7, r3
 800f0d0:	d2f9      	bcs.n	800f0c6 <__hexnan+0xaa>
 800f0d2:	1b3b      	subs	r3, r7, r4
 800f0d4:	f023 0303 	bic.w	r3, r3, #3
 800f0d8:	3304      	adds	r3, #4
 800f0da:	3e03      	subs	r6, #3
 800f0dc:	3401      	adds	r4, #1
 800f0de:	42a6      	cmp	r6, r4
 800f0e0:	bf38      	it	cc
 800f0e2:	2304      	movcc	r3, #4
 800f0e4:	4443      	add	r3, r8
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f843 2b04 	str.w	r2, [r3], #4
 800f0ec:	429f      	cmp	r7, r3
 800f0ee:	d2fb      	bcs.n	800f0e8 <__hexnan+0xcc>
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	b91b      	cbnz	r3, 800f0fc <__hexnan+0xe0>
 800f0f4:	4547      	cmp	r7, r8
 800f0f6:	d126      	bne.n	800f146 <__hexnan+0x12a>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	603b      	str	r3, [r7, #0]
 800f0fc:	2005      	movs	r0, #5
 800f0fe:	e025      	b.n	800f14c <__hexnan+0x130>
 800f100:	3501      	adds	r5, #1
 800f102:	2d08      	cmp	r5, #8
 800f104:	f10b 0b01 	add.w	fp, fp, #1
 800f108:	dd06      	ble.n	800f118 <__hexnan+0xfc>
 800f10a:	4544      	cmp	r4, r8
 800f10c:	d9c3      	bls.n	800f096 <__hexnan+0x7a>
 800f10e:	2300      	movs	r3, #0
 800f110:	f844 3c04 	str.w	r3, [r4, #-4]
 800f114:	2501      	movs	r5, #1
 800f116:	3c04      	subs	r4, #4
 800f118:	6822      	ldr	r2, [r4, #0]
 800f11a:	f000 000f 	and.w	r0, r0, #15
 800f11e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f122:	6020      	str	r0, [r4, #0]
 800f124:	e7b7      	b.n	800f096 <__hexnan+0x7a>
 800f126:	2508      	movs	r5, #8
 800f128:	e7b5      	b.n	800f096 <__hexnan+0x7a>
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0df      	beq.n	800f0f0 <__hexnan+0xd4>
 800f130:	f1c3 0320 	rsb	r3, r3, #32
 800f134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f138:	40da      	lsrs	r2, r3
 800f13a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f13e:	4013      	ands	r3, r2
 800f140:	f846 3c04 	str.w	r3, [r6, #-4]
 800f144:	e7d4      	b.n	800f0f0 <__hexnan+0xd4>
 800f146:	3f04      	subs	r7, #4
 800f148:	e7d2      	b.n	800f0f0 <__hexnan+0xd4>
 800f14a:	2004      	movs	r0, #4
 800f14c:	b007      	add	sp, #28
 800f14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f152 <__ascii_mbtowc>:
 800f152:	b082      	sub	sp, #8
 800f154:	b901      	cbnz	r1, 800f158 <__ascii_mbtowc+0x6>
 800f156:	a901      	add	r1, sp, #4
 800f158:	b142      	cbz	r2, 800f16c <__ascii_mbtowc+0x1a>
 800f15a:	b14b      	cbz	r3, 800f170 <__ascii_mbtowc+0x1e>
 800f15c:	7813      	ldrb	r3, [r2, #0]
 800f15e:	600b      	str	r3, [r1, #0]
 800f160:	7812      	ldrb	r2, [r2, #0]
 800f162:	1e10      	subs	r0, r2, #0
 800f164:	bf18      	it	ne
 800f166:	2001      	movne	r0, #1
 800f168:	b002      	add	sp, #8
 800f16a:	4770      	bx	lr
 800f16c:	4610      	mov	r0, r2
 800f16e:	e7fb      	b.n	800f168 <__ascii_mbtowc+0x16>
 800f170:	f06f 0001 	mvn.w	r0, #1
 800f174:	e7f8      	b.n	800f168 <__ascii_mbtowc+0x16>
	...

0800f178 <_Balloc>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	69c6      	ldr	r6, [r0, #28]
 800f17c:	4604      	mov	r4, r0
 800f17e:	460d      	mov	r5, r1
 800f180:	b976      	cbnz	r6, 800f1a0 <_Balloc+0x28>
 800f182:	2010      	movs	r0, #16
 800f184:	f7fc ff40 	bl	800c008 <malloc>
 800f188:	4602      	mov	r2, r0
 800f18a:	61e0      	str	r0, [r4, #28]
 800f18c:	b920      	cbnz	r0, 800f198 <_Balloc+0x20>
 800f18e:	4b18      	ldr	r3, [pc, #96]	; (800f1f0 <_Balloc+0x78>)
 800f190:	4818      	ldr	r0, [pc, #96]	; (800f1f4 <_Balloc+0x7c>)
 800f192:	216b      	movs	r1, #107	; 0x6b
 800f194:	f000 ff28 	bl	800ffe8 <__assert_func>
 800f198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f19c:	6006      	str	r6, [r0, #0]
 800f19e:	60c6      	str	r6, [r0, #12]
 800f1a0:	69e6      	ldr	r6, [r4, #28]
 800f1a2:	68f3      	ldr	r3, [r6, #12]
 800f1a4:	b183      	cbz	r3, 800f1c8 <_Balloc+0x50>
 800f1a6:	69e3      	ldr	r3, [r4, #28]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1ae:	b9b8      	cbnz	r0, 800f1e0 <_Balloc+0x68>
 800f1b0:	2101      	movs	r1, #1
 800f1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800f1b6:	1d72      	adds	r2, r6, #5
 800f1b8:	0092      	lsls	r2, r2, #2
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 ff32 	bl	8010024 <_calloc_r>
 800f1c0:	b160      	cbz	r0, 800f1dc <_Balloc+0x64>
 800f1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1c6:	e00e      	b.n	800f1e6 <_Balloc+0x6e>
 800f1c8:	2221      	movs	r2, #33	; 0x21
 800f1ca:	2104      	movs	r1, #4
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f000 ff29 	bl	8010024 <_calloc_r>
 800f1d2:	69e3      	ldr	r3, [r4, #28]
 800f1d4:	60f0      	str	r0, [r6, #12]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1e4      	bne.n	800f1a6 <_Balloc+0x2e>
 800f1dc:	2000      	movs	r0, #0
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	6802      	ldr	r2, [r0, #0]
 800f1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1ec:	e7f7      	b.n	800f1de <_Balloc+0x66>
 800f1ee:	bf00      	nop
 800f1f0:	0801170a 	.word	0x0801170a
 800f1f4:	080117ea 	.word	0x080117ea

0800f1f8 <_Bfree>:
 800f1f8:	b570      	push	{r4, r5, r6, lr}
 800f1fa:	69c6      	ldr	r6, [r0, #28]
 800f1fc:	4605      	mov	r5, r0
 800f1fe:	460c      	mov	r4, r1
 800f200:	b976      	cbnz	r6, 800f220 <_Bfree+0x28>
 800f202:	2010      	movs	r0, #16
 800f204:	f7fc ff00 	bl	800c008 <malloc>
 800f208:	4602      	mov	r2, r0
 800f20a:	61e8      	str	r0, [r5, #28]
 800f20c:	b920      	cbnz	r0, 800f218 <_Bfree+0x20>
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <_Bfree+0x3c>)
 800f210:	4809      	ldr	r0, [pc, #36]	; (800f238 <_Bfree+0x40>)
 800f212:	218f      	movs	r1, #143	; 0x8f
 800f214:	f000 fee8 	bl	800ffe8 <__assert_func>
 800f218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f21c:	6006      	str	r6, [r0, #0]
 800f21e:	60c6      	str	r6, [r0, #12]
 800f220:	b13c      	cbz	r4, 800f232 <_Bfree+0x3a>
 800f222:	69eb      	ldr	r3, [r5, #28]
 800f224:	6862      	ldr	r2, [r4, #4]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f22c:	6021      	str	r1, [r4, #0]
 800f22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f232:	bd70      	pop	{r4, r5, r6, pc}
 800f234:	0801170a 	.word	0x0801170a
 800f238:	080117ea 	.word	0x080117ea

0800f23c <__multadd>:
 800f23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f240:	690d      	ldr	r5, [r1, #16]
 800f242:	4607      	mov	r7, r0
 800f244:	460c      	mov	r4, r1
 800f246:	461e      	mov	r6, r3
 800f248:	f101 0c14 	add.w	ip, r1, #20
 800f24c:	2000      	movs	r0, #0
 800f24e:	f8dc 3000 	ldr.w	r3, [ip]
 800f252:	b299      	uxth	r1, r3
 800f254:	fb02 6101 	mla	r1, r2, r1, r6
 800f258:	0c1e      	lsrs	r6, r3, #16
 800f25a:	0c0b      	lsrs	r3, r1, #16
 800f25c:	fb02 3306 	mla	r3, r2, r6, r3
 800f260:	b289      	uxth	r1, r1
 800f262:	3001      	adds	r0, #1
 800f264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f268:	4285      	cmp	r5, r0
 800f26a:	f84c 1b04 	str.w	r1, [ip], #4
 800f26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f272:	dcec      	bgt.n	800f24e <__multadd+0x12>
 800f274:	b30e      	cbz	r6, 800f2ba <__multadd+0x7e>
 800f276:	68a3      	ldr	r3, [r4, #8]
 800f278:	42ab      	cmp	r3, r5
 800f27a:	dc19      	bgt.n	800f2b0 <__multadd+0x74>
 800f27c:	6861      	ldr	r1, [r4, #4]
 800f27e:	4638      	mov	r0, r7
 800f280:	3101      	adds	r1, #1
 800f282:	f7ff ff79 	bl	800f178 <_Balloc>
 800f286:	4680      	mov	r8, r0
 800f288:	b928      	cbnz	r0, 800f296 <__multadd+0x5a>
 800f28a:	4602      	mov	r2, r0
 800f28c:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <__multadd+0x84>)
 800f28e:	480d      	ldr	r0, [pc, #52]	; (800f2c4 <__multadd+0x88>)
 800f290:	21ba      	movs	r1, #186	; 0xba
 800f292:	f000 fea9 	bl	800ffe8 <__assert_func>
 800f296:	6922      	ldr	r2, [r4, #16]
 800f298:	3202      	adds	r2, #2
 800f29a:	f104 010c 	add.w	r1, r4, #12
 800f29e:	0092      	lsls	r2, r2, #2
 800f2a0:	300c      	adds	r0, #12
 800f2a2:	f7fe fd22 	bl	800dcea <memcpy>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff ffa5 	bl	800f1f8 <_Bfree>
 800f2ae:	4644      	mov	r4, r8
 800f2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2b4:	3501      	adds	r5, #1
 800f2b6:	615e      	str	r6, [r3, #20]
 800f2b8:	6125      	str	r5, [r4, #16]
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	08011779 	.word	0x08011779
 800f2c4:	080117ea 	.word	0x080117ea

0800f2c8 <__s2b>:
 800f2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2cc:	460c      	mov	r4, r1
 800f2ce:	4615      	mov	r5, r2
 800f2d0:	461f      	mov	r7, r3
 800f2d2:	2209      	movs	r2, #9
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2dc:	2100      	movs	r1, #0
 800f2de:	2201      	movs	r2, #1
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	db09      	blt.n	800f2f8 <__s2b+0x30>
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f7ff ff47 	bl	800f178 <_Balloc>
 800f2ea:	b940      	cbnz	r0, 800f2fe <__s2b+0x36>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	4b19      	ldr	r3, [pc, #100]	; (800f354 <__s2b+0x8c>)
 800f2f0:	4819      	ldr	r0, [pc, #100]	; (800f358 <__s2b+0x90>)
 800f2f2:	21d3      	movs	r1, #211	; 0xd3
 800f2f4:	f000 fe78 	bl	800ffe8 <__assert_func>
 800f2f8:	0052      	lsls	r2, r2, #1
 800f2fa:	3101      	adds	r1, #1
 800f2fc:	e7f0      	b.n	800f2e0 <__s2b+0x18>
 800f2fe:	9b08      	ldr	r3, [sp, #32]
 800f300:	6143      	str	r3, [r0, #20]
 800f302:	2d09      	cmp	r5, #9
 800f304:	f04f 0301 	mov.w	r3, #1
 800f308:	6103      	str	r3, [r0, #16]
 800f30a:	dd16      	ble.n	800f33a <__s2b+0x72>
 800f30c:	f104 0909 	add.w	r9, r4, #9
 800f310:	46c8      	mov	r8, r9
 800f312:	442c      	add	r4, r5
 800f314:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f318:	4601      	mov	r1, r0
 800f31a:	3b30      	subs	r3, #48	; 0x30
 800f31c:	220a      	movs	r2, #10
 800f31e:	4630      	mov	r0, r6
 800f320:	f7ff ff8c 	bl	800f23c <__multadd>
 800f324:	45a0      	cmp	r8, r4
 800f326:	d1f5      	bne.n	800f314 <__s2b+0x4c>
 800f328:	f1a5 0408 	sub.w	r4, r5, #8
 800f32c:	444c      	add	r4, r9
 800f32e:	1b2d      	subs	r5, r5, r4
 800f330:	1963      	adds	r3, r4, r5
 800f332:	42bb      	cmp	r3, r7
 800f334:	db04      	blt.n	800f340 <__s2b+0x78>
 800f336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f33a:	340a      	adds	r4, #10
 800f33c:	2509      	movs	r5, #9
 800f33e:	e7f6      	b.n	800f32e <__s2b+0x66>
 800f340:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f344:	4601      	mov	r1, r0
 800f346:	3b30      	subs	r3, #48	; 0x30
 800f348:	220a      	movs	r2, #10
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7ff ff76 	bl	800f23c <__multadd>
 800f350:	e7ee      	b.n	800f330 <__s2b+0x68>
 800f352:	bf00      	nop
 800f354:	08011779 	.word	0x08011779
 800f358:	080117ea 	.word	0x080117ea

0800f35c <__hi0bits>:
 800f35c:	0c03      	lsrs	r3, r0, #16
 800f35e:	041b      	lsls	r3, r3, #16
 800f360:	b9d3      	cbnz	r3, 800f398 <__hi0bits+0x3c>
 800f362:	0400      	lsls	r0, r0, #16
 800f364:	2310      	movs	r3, #16
 800f366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f36a:	bf04      	itt	eq
 800f36c:	0200      	lsleq	r0, r0, #8
 800f36e:	3308      	addeq	r3, #8
 800f370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f374:	bf04      	itt	eq
 800f376:	0100      	lsleq	r0, r0, #4
 800f378:	3304      	addeq	r3, #4
 800f37a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f37e:	bf04      	itt	eq
 800f380:	0080      	lsleq	r0, r0, #2
 800f382:	3302      	addeq	r3, #2
 800f384:	2800      	cmp	r0, #0
 800f386:	db05      	blt.n	800f394 <__hi0bits+0x38>
 800f388:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f38c:	f103 0301 	add.w	r3, r3, #1
 800f390:	bf08      	it	eq
 800f392:	2320      	moveq	r3, #32
 800f394:	4618      	mov	r0, r3
 800f396:	4770      	bx	lr
 800f398:	2300      	movs	r3, #0
 800f39a:	e7e4      	b.n	800f366 <__hi0bits+0xa>

0800f39c <__lo0bits>:
 800f39c:	6803      	ldr	r3, [r0, #0]
 800f39e:	f013 0207 	ands.w	r2, r3, #7
 800f3a2:	d00c      	beq.n	800f3be <__lo0bits+0x22>
 800f3a4:	07d9      	lsls	r1, r3, #31
 800f3a6:	d422      	bmi.n	800f3ee <__lo0bits+0x52>
 800f3a8:	079a      	lsls	r2, r3, #30
 800f3aa:	bf49      	itett	mi
 800f3ac:	085b      	lsrmi	r3, r3, #1
 800f3ae:	089b      	lsrpl	r3, r3, #2
 800f3b0:	6003      	strmi	r3, [r0, #0]
 800f3b2:	2201      	movmi	r2, #1
 800f3b4:	bf5c      	itt	pl
 800f3b6:	6003      	strpl	r3, [r0, #0]
 800f3b8:	2202      	movpl	r2, #2
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	4770      	bx	lr
 800f3be:	b299      	uxth	r1, r3
 800f3c0:	b909      	cbnz	r1, 800f3c6 <__lo0bits+0x2a>
 800f3c2:	0c1b      	lsrs	r3, r3, #16
 800f3c4:	2210      	movs	r2, #16
 800f3c6:	b2d9      	uxtb	r1, r3
 800f3c8:	b909      	cbnz	r1, 800f3ce <__lo0bits+0x32>
 800f3ca:	3208      	adds	r2, #8
 800f3cc:	0a1b      	lsrs	r3, r3, #8
 800f3ce:	0719      	lsls	r1, r3, #28
 800f3d0:	bf04      	itt	eq
 800f3d2:	091b      	lsreq	r3, r3, #4
 800f3d4:	3204      	addeq	r2, #4
 800f3d6:	0799      	lsls	r1, r3, #30
 800f3d8:	bf04      	itt	eq
 800f3da:	089b      	lsreq	r3, r3, #2
 800f3dc:	3202      	addeq	r2, #2
 800f3de:	07d9      	lsls	r1, r3, #31
 800f3e0:	d403      	bmi.n	800f3ea <__lo0bits+0x4e>
 800f3e2:	085b      	lsrs	r3, r3, #1
 800f3e4:	f102 0201 	add.w	r2, r2, #1
 800f3e8:	d003      	beq.n	800f3f2 <__lo0bits+0x56>
 800f3ea:	6003      	str	r3, [r0, #0]
 800f3ec:	e7e5      	b.n	800f3ba <__lo0bits+0x1e>
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	e7e3      	b.n	800f3ba <__lo0bits+0x1e>
 800f3f2:	2220      	movs	r2, #32
 800f3f4:	e7e1      	b.n	800f3ba <__lo0bits+0x1e>
	...

0800f3f8 <__i2b>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	f7ff febb 	bl	800f178 <_Balloc>
 800f402:	4602      	mov	r2, r0
 800f404:	b928      	cbnz	r0, 800f412 <__i2b+0x1a>
 800f406:	4b05      	ldr	r3, [pc, #20]	; (800f41c <__i2b+0x24>)
 800f408:	4805      	ldr	r0, [pc, #20]	; (800f420 <__i2b+0x28>)
 800f40a:	f240 1145 	movw	r1, #325	; 0x145
 800f40e:	f000 fdeb 	bl	800ffe8 <__assert_func>
 800f412:	2301      	movs	r3, #1
 800f414:	6144      	str	r4, [r0, #20]
 800f416:	6103      	str	r3, [r0, #16]
 800f418:	bd10      	pop	{r4, pc}
 800f41a:	bf00      	nop
 800f41c:	08011779 	.word	0x08011779
 800f420:	080117ea 	.word	0x080117ea

0800f424 <__multiply>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	4691      	mov	r9, r2
 800f42a:	690a      	ldr	r2, [r1, #16]
 800f42c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f430:	429a      	cmp	r2, r3
 800f432:	bfb8      	it	lt
 800f434:	460b      	movlt	r3, r1
 800f436:	460c      	mov	r4, r1
 800f438:	bfbc      	itt	lt
 800f43a:	464c      	movlt	r4, r9
 800f43c:	4699      	movlt	r9, r3
 800f43e:	6927      	ldr	r7, [r4, #16]
 800f440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f444:	68a3      	ldr	r3, [r4, #8]
 800f446:	6861      	ldr	r1, [r4, #4]
 800f448:	eb07 060a 	add.w	r6, r7, sl
 800f44c:	42b3      	cmp	r3, r6
 800f44e:	b085      	sub	sp, #20
 800f450:	bfb8      	it	lt
 800f452:	3101      	addlt	r1, #1
 800f454:	f7ff fe90 	bl	800f178 <_Balloc>
 800f458:	b930      	cbnz	r0, 800f468 <__multiply+0x44>
 800f45a:	4602      	mov	r2, r0
 800f45c:	4b44      	ldr	r3, [pc, #272]	; (800f570 <__multiply+0x14c>)
 800f45e:	4845      	ldr	r0, [pc, #276]	; (800f574 <__multiply+0x150>)
 800f460:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f464:	f000 fdc0 	bl	800ffe8 <__assert_func>
 800f468:	f100 0514 	add.w	r5, r0, #20
 800f46c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f470:	462b      	mov	r3, r5
 800f472:	2200      	movs	r2, #0
 800f474:	4543      	cmp	r3, r8
 800f476:	d321      	bcc.n	800f4bc <__multiply+0x98>
 800f478:	f104 0314 	add.w	r3, r4, #20
 800f47c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f480:	f109 0314 	add.w	r3, r9, #20
 800f484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f488:	9202      	str	r2, [sp, #8]
 800f48a:	1b3a      	subs	r2, r7, r4
 800f48c:	3a15      	subs	r2, #21
 800f48e:	f022 0203 	bic.w	r2, r2, #3
 800f492:	3204      	adds	r2, #4
 800f494:	f104 0115 	add.w	r1, r4, #21
 800f498:	428f      	cmp	r7, r1
 800f49a:	bf38      	it	cc
 800f49c:	2204      	movcc	r2, #4
 800f49e:	9201      	str	r2, [sp, #4]
 800f4a0:	9a02      	ldr	r2, [sp, #8]
 800f4a2:	9303      	str	r3, [sp, #12]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d80c      	bhi.n	800f4c2 <__multiply+0x9e>
 800f4a8:	2e00      	cmp	r6, #0
 800f4aa:	dd03      	ble.n	800f4b4 <__multiply+0x90>
 800f4ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d05b      	beq.n	800f56c <__multiply+0x148>
 800f4b4:	6106      	str	r6, [r0, #16]
 800f4b6:	b005      	add	sp, #20
 800f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4bc:	f843 2b04 	str.w	r2, [r3], #4
 800f4c0:	e7d8      	b.n	800f474 <__multiply+0x50>
 800f4c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4c6:	f1ba 0f00 	cmp.w	sl, #0
 800f4ca:	d024      	beq.n	800f516 <__multiply+0xf2>
 800f4cc:	f104 0e14 	add.w	lr, r4, #20
 800f4d0:	46a9      	mov	r9, r5
 800f4d2:	f04f 0c00 	mov.w	ip, #0
 800f4d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f4da:	f8d9 1000 	ldr.w	r1, [r9]
 800f4de:	fa1f fb82 	uxth.w	fp, r2
 800f4e2:	b289      	uxth	r1, r1
 800f4e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f4e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f4ec:	f8d9 2000 	ldr.w	r2, [r9]
 800f4f0:	4461      	add	r1, ip
 800f4f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4fe:	b289      	uxth	r1, r1
 800f500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f504:	4577      	cmp	r7, lr
 800f506:	f849 1b04 	str.w	r1, [r9], #4
 800f50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f50e:	d8e2      	bhi.n	800f4d6 <__multiply+0xb2>
 800f510:	9a01      	ldr	r2, [sp, #4]
 800f512:	f845 c002 	str.w	ip, [r5, r2]
 800f516:	9a03      	ldr	r2, [sp, #12]
 800f518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f51c:	3304      	adds	r3, #4
 800f51e:	f1b9 0f00 	cmp.w	r9, #0
 800f522:	d021      	beq.n	800f568 <__multiply+0x144>
 800f524:	6829      	ldr	r1, [r5, #0]
 800f526:	f104 0c14 	add.w	ip, r4, #20
 800f52a:	46ae      	mov	lr, r5
 800f52c:	f04f 0a00 	mov.w	sl, #0
 800f530:	f8bc b000 	ldrh.w	fp, [ip]
 800f534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f538:	fb09 220b 	mla	r2, r9, fp, r2
 800f53c:	4452      	add	r2, sl
 800f53e:	b289      	uxth	r1, r1
 800f540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f544:	f84e 1b04 	str.w	r1, [lr], #4
 800f548:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f54c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f550:	f8be 1000 	ldrh.w	r1, [lr]
 800f554:	fb09 110a 	mla	r1, r9, sl, r1
 800f558:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f55c:	4567      	cmp	r7, ip
 800f55e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f562:	d8e5      	bhi.n	800f530 <__multiply+0x10c>
 800f564:	9a01      	ldr	r2, [sp, #4]
 800f566:	50a9      	str	r1, [r5, r2]
 800f568:	3504      	adds	r5, #4
 800f56a:	e799      	b.n	800f4a0 <__multiply+0x7c>
 800f56c:	3e01      	subs	r6, #1
 800f56e:	e79b      	b.n	800f4a8 <__multiply+0x84>
 800f570:	08011779 	.word	0x08011779
 800f574:	080117ea 	.word	0x080117ea

0800f578 <__pow5mult>:
 800f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f57c:	4615      	mov	r5, r2
 800f57e:	f012 0203 	ands.w	r2, r2, #3
 800f582:	4606      	mov	r6, r0
 800f584:	460f      	mov	r7, r1
 800f586:	d007      	beq.n	800f598 <__pow5mult+0x20>
 800f588:	4c25      	ldr	r4, [pc, #148]	; (800f620 <__pow5mult+0xa8>)
 800f58a:	3a01      	subs	r2, #1
 800f58c:	2300      	movs	r3, #0
 800f58e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f592:	f7ff fe53 	bl	800f23c <__multadd>
 800f596:	4607      	mov	r7, r0
 800f598:	10ad      	asrs	r5, r5, #2
 800f59a:	d03d      	beq.n	800f618 <__pow5mult+0xa0>
 800f59c:	69f4      	ldr	r4, [r6, #28]
 800f59e:	b97c      	cbnz	r4, 800f5c0 <__pow5mult+0x48>
 800f5a0:	2010      	movs	r0, #16
 800f5a2:	f7fc fd31 	bl	800c008 <malloc>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	61f0      	str	r0, [r6, #28]
 800f5aa:	b928      	cbnz	r0, 800f5b8 <__pow5mult+0x40>
 800f5ac:	4b1d      	ldr	r3, [pc, #116]	; (800f624 <__pow5mult+0xac>)
 800f5ae:	481e      	ldr	r0, [pc, #120]	; (800f628 <__pow5mult+0xb0>)
 800f5b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5b4:	f000 fd18 	bl	800ffe8 <__assert_func>
 800f5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5bc:	6004      	str	r4, [r0, #0]
 800f5be:	60c4      	str	r4, [r0, #12]
 800f5c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5c8:	b94c      	cbnz	r4, 800f5de <__pow5mult+0x66>
 800f5ca:	f240 2171 	movw	r1, #625	; 0x271
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7ff ff12 	bl	800f3f8 <__i2b>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5da:	4604      	mov	r4, r0
 800f5dc:	6003      	str	r3, [r0, #0]
 800f5de:	f04f 0900 	mov.w	r9, #0
 800f5e2:	07eb      	lsls	r3, r5, #31
 800f5e4:	d50a      	bpl.n	800f5fc <__pow5mult+0x84>
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	4622      	mov	r2, r4
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7ff ff1a 	bl	800f424 <__multiply>
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f7ff fdff 	bl	800f1f8 <_Bfree>
 800f5fa:	4647      	mov	r7, r8
 800f5fc:	106d      	asrs	r5, r5, #1
 800f5fe:	d00b      	beq.n	800f618 <__pow5mult+0xa0>
 800f600:	6820      	ldr	r0, [r4, #0]
 800f602:	b938      	cbnz	r0, 800f614 <__pow5mult+0x9c>
 800f604:	4622      	mov	r2, r4
 800f606:	4621      	mov	r1, r4
 800f608:	4630      	mov	r0, r6
 800f60a:	f7ff ff0b 	bl	800f424 <__multiply>
 800f60e:	6020      	str	r0, [r4, #0]
 800f610:	f8c0 9000 	str.w	r9, [r0]
 800f614:	4604      	mov	r4, r0
 800f616:	e7e4      	b.n	800f5e2 <__pow5mult+0x6a>
 800f618:	4638      	mov	r0, r7
 800f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f61e:	bf00      	nop
 800f620:	08011938 	.word	0x08011938
 800f624:	0801170a 	.word	0x0801170a
 800f628:	080117ea 	.word	0x080117ea

0800f62c <__lshift>:
 800f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f630:	460c      	mov	r4, r1
 800f632:	6849      	ldr	r1, [r1, #4]
 800f634:	6923      	ldr	r3, [r4, #16]
 800f636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f63a:	68a3      	ldr	r3, [r4, #8]
 800f63c:	4607      	mov	r7, r0
 800f63e:	4691      	mov	r9, r2
 800f640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f644:	f108 0601 	add.w	r6, r8, #1
 800f648:	42b3      	cmp	r3, r6
 800f64a:	db0b      	blt.n	800f664 <__lshift+0x38>
 800f64c:	4638      	mov	r0, r7
 800f64e:	f7ff fd93 	bl	800f178 <_Balloc>
 800f652:	4605      	mov	r5, r0
 800f654:	b948      	cbnz	r0, 800f66a <__lshift+0x3e>
 800f656:	4602      	mov	r2, r0
 800f658:	4b28      	ldr	r3, [pc, #160]	; (800f6fc <__lshift+0xd0>)
 800f65a:	4829      	ldr	r0, [pc, #164]	; (800f700 <__lshift+0xd4>)
 800f65c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f660:	f000 fcc2 	bl	800ffe8 <__assert_func>
 800f664:	3101      	adds	r1, #1
 800f666:	005b      	lsls	r3, r3, #1
 800f668:	e7ee      	b.n	800f648 <__lshift+0x1c>
 800f66a:	2300      	movs	r3, #0
 800f66c:	f100 0114 	add.w	r1, r0, #20
 800f670:	f100 0210 	add.w	r2, r0, #16
 800f674:	4618      	mov	r0, r3
 800f676:	4553      	cmp	r3, sl
 800f678:	db33      	blt.n	800f6e2 <__lshift+0xb6>
 800f67a:	6920      	ldr	r0, [r4, #16]
 800f67c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f680:	f104 0314 	add.w	r3, r4, #20
 800f684:	f019 091f 	ands.w	r9, r9, #31
 800f688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f68c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f690:	d02b      	beq.n	800f6ea <__lshift+0xbe>
 800f692:	f1c9 0e20 	rsb	lr, r9, #32
 800f696:	468a      	mov	sl, r1
 800f698:	2200      	movs	r2, #0
 800f69a:	6818      	ldr	r0, [r3, #0]
 800f69c:	fa00 f009 	lsl.w	r0, r0, r9
 800f6a0:	4310      	orrs	r0, r2
 800f6a2:	f84a 0b04 	str.w	r0, [sl], #4
 800f6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6aa:	459c      	cmp	ip, r3
 800f6ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6b0:	d8f3      	bhi.n	800f69a <__lshift+0x6e>
 800f6b2:	ebac 0304 	sub.w	r3, ip, r4
 800f6b6:	3b15      	subs	r3, #21
 800f6b8:	f023 0303 	bic.w	r3, r3, #3
 800f6bc:	3304      	adds	r3, #4
 800f6be:	f104 0015 	add.w	r0, r4, #21
 800f6c2:	4584      	cmp	ip, r0
 800f6c4:	bf38      	it	cc
 800f6c6:	2304      	movcc	r3, #4
 800f6c8:	50ca      	str	r2, [r1, r3]
 800f6ca:	b10a      	cbz	r2, 800f6d0 <__lshift+0xa4>
 800f6cc:	f108 0602 	add.w	r6, r8, #2
 800f6d0:	3e01      	subs	r6, #1
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	612e      	str	r6, [r5, #16]
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	f7ff fd8e 	bl	800f1f8 <_Bfree>
 800f6dc:	4628      	mov	r0, r5
 800f6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	e7c5      	b.n	800f676 <__lshift+0x4a>
 800f6ea:	3904      	subs	r1, #4
 800f6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6f4:	459c      	cmp	ip, r3
 800f6f6:	d8f9      	bhi.n	800f6ec <__lshift+0xc0>
 800f6f8:	e7ea      	b.n	800f6d0 <__lshift+0xa4>
 800f6fa:	bf00      	nop
 800f6fc:	08011779 	.word	0x08011779
 800f700:	080117ea 	.word	0x080117ea

0800f704 <__mcmp>:
 800f704:	b530      	push	{r4, r5, lr}
 800f706:	6902      	ldr	r2, [r0, #16]
 800f708:	690c      	ldr	r4, [r1, #16]
 800f70a:	1b12      	subs	r2, r2, r4
 800f70c:	d10e      	bne.n	800f72c <__mcmp+0x28>
 800f70e:	f100 0314 	add.w	r3, r0, #20
 800f712:	3114      	adds	r1, #20
 800f714:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f718:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f71c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f720:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f724:	42a5      	cmp	r5, r4
 800f726:	d003      	beq.n	800f730 <__mcmp+0x2c>
 800f728:	d305      	bcc.n	800f736 <__mcmp+0x32>
 800f72a:	2201      	movs	r2, #1
 800f72c:	4610      	mov	r0, r2
 800f72e:	bd30      	pop	{r4, r5, pc}
 800f730:	4283      	cmp	r3, r0
 800f732:	d3f3      	bcc.n	800f71c <__mcmp+0x18>
 800f734:	e7fa      	b.n	800f72c <__mcmp+0x28>
 800f736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f73a:	e7f7      	b.n	800f72c <__mcmp+0x28>

0800f73c <__mdiff>:
 800f73c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f740:	460c      	mov	r4, r1
 800f742:	4606      	mov	r6, r0
 800f744:	4611      	mov	r1, r2
 800f746:	4620      	mov	r0, r4
 800f748:	4690      	mov	r8, r2
 800f74a:	f7ff ffdb 	bl	800f704 <__mcmp>
 800f74e:	1e05      	subs	r5, r0, #0
 800f750:	d110      	bne.n	800f774 <__mdiff+0x38>
 800f752:	4629      	mov	r1, r5
 800f754:	4630      	mov	r0, r6
 800f756:	f7ff fd0f 	bl	800f178 <_Balloc>
 800f75a:	b930      	cbnz	r0, 800f76a <__mdiff+0x2e>
 800f75c:	4b3a      	ldr	r3, [pc, #232]	; (800f848 <__mdiff+0x10c>)
 800f75e:	4602      	mov	r2, r0
 800f760:	f240 2137 	movw	r1, #567	; 0x237
 800f764:	4839      	ldr	r0, [pc, #228]	; (800f84c <__mdiff+0x110>)
 800f766:	f000 fc3f 	bl	800ffe8 <__assert_func>
 800f76a:	2301      	movs	r3, #1
 800f76c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f774:	bfa4      	itt	ge
 800f776:	4643      	movge	r3, r8
 800f778:	46a0      	movge	r8, r4
 800f77a:	4630      	mov	r0, r6
 800f77c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f780:	bfa6      	itte	ge
 800f782:	461c      	movge	r4, r3
 800f784:	2500      	movge	r5, #0
 800f786:	2501      	movlt	r5, #1
 800f788:	f7ff fcf6 	bl	800f178 <_Balloc>
 800f78c:	b920      	cbnz	r0, 800f798 <__mdiff+0x5c>
 800f78e:	4b2e      	ldr	r3, [pc, #184]	; (800f848 <__mdiff+0x10c>)
 800f790:	4602      	mov	r2, r0
 800f792:	f240 2145 	movw	r1, #581	; 0x245
 800f796:	e7e5      	b.n	800f764 <__mdiff+0x28>
 800f798:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f79c:	6926      	ldr	r6, [r4, #16]
 800f79e:	60c5      	str	r5, [r0, #12]
 800f7a0:	f104 0914 	add.w	r9, r4, #20
 800f7a4:	f108 0514 	add.w	r5, r8, #20
 800f7a8:	f100 0e14 	add.w	lr, r0, #20
 800f7ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7b4:	f108 0210 	add.w	r2, r8, #16
 800f7b8:	46f2      	mov	sl, lr
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7c4:	fa11 f88b 	uxtah	r8, r1, fp
 800f7c8:	b299      	uxth	r1, r3
 800f7ca:	0c1b      	lsrs	r3, r3, #16
 800f7cc:	eba8 0801 	sub.w	r8, r8, r1
 800f7d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f7d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f7d8:	fa1f f888 	uxth.w	r8, r8
 800f7dc:	1419      	asrs	r1, r3, #16
 800f7de:	454e      	cmp	r6, r9
 800f7e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f7e4:	f84a 3b04 	str.w	r3, [sl], #4
 800f7e8:	d8e8      	bhi.n	800f7bc <__mdiff+0x80>
 800f7ea:	1b33      	subs	r3, r6, r4
 800f7ec:	3b15      	subs	r3, #21
 800f7ee:	f023 0303 	bic.w	r3, r3, #3
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	3415      	adds	r4, #21
 800f7f6:	42a6      	cmp	r6, r4
 800f7f8:	bf38      	it	cc
 800f7fa:	2304      	movcc	r3, #4
 800f7fc:	441d      	add	r5, r3
 800f7fe:	4473      	add	r3, lr
 800f800:	469e      	mov	lr, r3
 800f802:	462e      	mov	r6, r5
 800f804:	4566      	cmp	r6, ip
 800f806:	d30e      	bcc.n	800f826 <__mdiff+0xea>
 800f808:	f10c 0203 	add.w	r2, ip, #3
 800f80c:	1b52      	subs	r2, r2, r5
 800f80e:	f022 0203 	bic.w	r2, r2, #3
 800f812:	3d03      	subs	r5, #3
 800f814:	45ac      	cmp	ip, r5
 800f816:	bf38      	it	cc
 800f818:	2200      	movcc	r2, #0
 800f81a:	4413      	add	r3, r2
 800f81c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f820:	b17a      	cbz	r2, 800f842 <__mdiff+0x106>
 800f822:	6107      	str	r7, [r0, #16]
 800f824:	e7a4      	b.n	800f770 <__mdiff+0x34>
 800f826:	f856 8b04 	ldr.w	r8, [r6], #4
 800f82a:	fa11 f288 	uxtah	r2, r1, r8
 800f82e:	1414      	asrs	r4, r2, #16
 800f830:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f834:	b292      	uxth	r2, r2
 800f836:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f83a:	f84e 2b04 	str.w	r2, [lr], #4
 800f83e:	1421      	asrs	r1, r4, #16
 800f840:	e7e0      	b.n	800f804 <__mdiff+0xc8>
 800f842:	3f01      	subs	r7, #1
 800f844:	e7ea      	b.n	800f81c <__mdiff+0xe0>
 800f846:	bf00      	nop
 800f848:	08011779 	.word	0x08011779
 800f84c:	080117ea 	.word	0x080117ea

0800f850 <__ulp>:
 800f850:	b082      	sub	sp, #8
 800f852:	ed8d 0b00 	vstr	d0, [sp]
 800f856:	9a01      	ldr	r2, [sp, #4]
 800f858:	4b0f      	ldr	r3, [pc, #60]	; (800f898 <__ulp+0x48>)
 800f85a:	4013      	ands	r3, r2
 800f85c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f860:	2b00      	cmp	r3, #0
 800f862:	dc08      	bgt.n	800f876 <__ulp+0x26>
 800f864:	425b      	negs	r3, r3
 800f866:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f86a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f86e:	da04      	bge.n	800f87a <__ulp+0x2a>
 800f870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f874:	4113      	asrs	r3, r2
 800f876:	2200      	movs	r2, #0
 800f878:	e008      	b.n	800f88c <__ulp+0x3c>
 800f87a:	f1a2 0314 	sub.w	r3, r2, #20
 800f87e:	2b1e      	cmp	r3, #30
 800f880:	bfda      	itte	le
 800f882:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f886:	40da      	lsrle	r2, r3
 800f888:	2201      	movgt	r2, #1
 800f88a:	2300      	movs	r3, #0
 800f88c:	4619      	mov	r1, r3
 800f88e:	4610      	mov	r0, r2
 800f890:	ec41 0b10 	vmov	d0, r0, r1
 800f894:	b002      	add	sp, #8
 800f896:	4770      	bx	lr
 800f898:	7ff00000 	.word	0x7ff00000

0800f89c <__b2d>:
 800f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	6906      	ldr	r6, [r0, #16]
 800f8a2:	f100 0814 	add.w	r8, r0, #20
 800f8a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f8aa:	1f37      	subs	r7, r6, #4
 800f8ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	f7ff fd53 	bl	800f35c <__hi0bits>
 800f8b6:	f1c0 0320 	rsb	r3, r0, #32
 800f8ba:	280a      	cmp	r0, #10
 800f8bc:	600b      	str	r3, [r1, #0]
 800f8be:	491b      	ldr	r1, [pc, #108]	; (800f92c <__b2d+0x90>)
 800f8c0:	dc15      	bgt.n	800f8ee <__b2d+0x52>
 800f8c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800f8c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800f8ca:	45b8      	cmp	r8, r7
 800f8cc:	ea43 0501 	orr.w	r5, r3, r1
 800f8d0:	bf34      	ite	cc
 800f8d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f8d6:	2300      	movcs	r3, #0
 800f8d8:	3015      	adds	r0, #21
 800f8da:	fa02 f000 	lsl.w	r0, r2, r0
 800f8de:	fa23 f30c 	lsr.w	r3, r3, ip
 800f8e2:	4303      	orrs	r3, r0
 800f8e4:	461c      	mov	r4, r3
 800f8e6:	ec45 4b10 	vmov	d0, r4, r5
 800f8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ee:	45b8      	cmp	r8, r7
 800f8f0:	bf3a      	itte	cc
 800f8f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f8f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800f8fa:	2300      	movcs	r3, #0
 800f8fc:	380b      	subs	r0, #11
 800f8fe:	d012      	beq.n	800f926 <__b2d+0x8a>
 800f900:	f1c0 0120 	rsb	r1, r0, #32
 800f904:	fa23 f401 	lsr.w	r4, r3, r1
 800f908:	4082      	lsls	r2, r0
 800f90a:	4322      	orrs	r2, r4
 800f90c:	4547      	cmp	r7, r8
 800f90e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f912:	bf8c      	ite	hi
 800f914:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f918:	2200      	movls	r2, #0
 800f91a:	4083      	lsls	r3, r0
 800f91c:	40ca      	lsrs	r2, r1
 800f91e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f922:	4313      	orrs	r3, r2
 800f924:	e7de      	b.n	800f8e4 <__b2d+0x48>
 800f926:	ea42 0501 	orr.w	r5, r2, r1
 800f92a:	e7db      	b.n	800f8e4 <__b2d+0x48>
 800f92c:	3ff00000 	.word	0x3ff00000

0800f930 <__d2b>:
 800f930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f934:	460f      	mov	r7, r1
 800f936:	2101      	movs	r1, #1
 800f938:	ec59 8b10 	vmov	r8, r9, d0
 800f93c:	4616      	mov	r6, r2
 800f93e:	f7ff fc1b 	bl	800f178 <_Balloc>
 800f942:	4604      	mov	r4, r0
 800f944:	b930      	cbnz	r0, 800f954 <__d2b+0x24>
 800f946:	4602      	mov	r2, r0
 800f948:	4b24      	ldr	r3, [pc, #144]	; (800f9dc <__d2b+0xac>)
 800f94a:	4825      	ldr	r0, [pc, #148]	; (800f9e0 <__d2b+0xb0>)
 800f94c:	f240 310f 	movw	r1, #783	; 0x30f
 800f950:	f000 fb4a 	bl	800ffe8 <__assert_func>
 800f954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f95c:	bb2d      	cbnz	r5, 800f9aa <__d2b+0x7a>
 800f95e:	9301      	str	r3, [sp, #4]
 800f960:	f1b8 0300 	subs.w	r3, r8, #0
 800f964:	d026      	beq.n	800f9b4 <__d2b+0x84>
 800f966:	4668      	mov	r0, sp
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	f7ff fd17 	bl	800f39c <__lo0bits>
 800f96e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f972:	b1e8      	cbz	r0, 800f9b0 <__d2b+0x80>
 800f974:	f1c0 0320 	rsb	r3, r0, #32
 800f978:	fa02 f303 	lsl.w	r3, r2, r3
 800f97c:	430b      	orrs	r3, r1
 800f97e:	40c2      	lsrs	r2, r0
 800f980:	6163      	str	r3, [r4, #20]
 800f982:	9201      	str	r2, [sp, #4]
 800f984:	9b01      	ldr	r3, [sp, #4]
 800f986:	61a3      	str	r3, [r4, #24]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	bf14      	ite	ne
 800f98c:	2202      	movne	r2, #2
 800f98e:	2201      	moveq	r2, #1
 800f990:	6122      	str	r2, [r4, #16]
 800f992:	b1bd      	cbz	r5, 800f9c4 <__d2b+0x94>
 800f994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f998:	4405      	add	r5, r0
 800f99a:	603d      	str	r5, [r7, #0]
 800f99c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9a0:	6030      	str	r0, [r6, #0]
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	b003      	add	sp, #12
 800f9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9ae:	e7d6      	b.n	800f95e <__d2b+0x2e>
 800f9b0:	6161      	str	r1, [r4, #20]
 800f9b2:	e7e7      	b.n	800f984 <__d2b+0x54>
 800f9b4:	a801      	add	r0, sp, #4
 800f9b6:	f7ff fcf1 	bl	800f39c <__lo0bits>
 800f9ba:	9b01      	ldr	r3, [sp, #4]
 800f9bc:	6163      	str	r3, [r4, #20]
 800f9be:	3020      	adds	r0, #32
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	e7e5      	b.n	800f990 <__d2b+0x60>
 800f9c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9cc:	6038      	str	r0, [r7, #0]
 800f9ce:	6918      	ldr	r0, [r3, #16]
 800f9d0:	f7ff fcc4 	bl	800f35c <__hi0bits>
 800f9d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9d8:	e7e2      	b.n	800f9a0 <__d2b+0x70>
 800f9da:	bf00      	nop
 800f9dc:	08011779 	.word	0x08011779
 800f9e0:	080117ea 	.word	0x080117ea

0800f9e4 <__ratio>:
 800f9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e8:	4688      	mov	r8, r1
 800f9ea:	4669      	mov	r1, sp
 800f9ec:	4681      	mov	r9, r0
 800f9ee:	f7ff ff55 	bl	800f89c <__b2d>
 800f9f2:	a901      	add	r1, sp, #4
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	ec55 4b10 	vmov	r4, r5, d0
 800f9fa:	f7ff ff4f 	bl	800f89c <__b2d>
 800f9fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa06:	eba3 0c02 	sub.w	ip, r3, r2
 800fa0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa0e:	1a9b      	subs	r3, r3, r2
 800fa10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fa14:	ec51 0b10 	vmov	r0, r1, d0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	bfd6      	itet	le
 800fa1c:	460a      	movle	r2, r1
 800fa1e:	462a      	movgt	r2, r5
 800fa20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa24:	468b      	mov	fp, r1
 800fa26:	462f      	mov	r7, r5
 800fa28:	bfd4      	ite	le
 800fa2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fa2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa32:	4620      	mov	r0, r4
 800fa34:	ee10 2a10 	vmov	r2, s0
 800fa38:	465b      	mov	r3, fp
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	f7f0 ff1e 	bl	800087c <__aeabi_ddiv>
 800fa40:	ec41 0b10 	vmov	d0, r0, r1
 800fa44:	b003      	add	sp, #12
 800fa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa4a <__copybits>:
 800fa4a:	3901      	subs	r1, #1
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	1149      	asrs	r1, r1, #5
 800fa50:	6914      	ldr	r4, [r2, #16]
 800fa52:	3101      	adds	r1, #1
 800fa54:	f102 0314 	add.w	r3, r2, #20
 800fa58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa60:	1f05      	subs	r5, r0, #4
 800fa62:	42a3      	cmp	r3, r4
 800fa64:	d30c      	bcc.n	800fa80 <__copybits+0x36>
 800fa66:	1aa3      	subs	r3, r4, r2
 800fa68:	3b11      	subs	r3, #17
 800fa6a:	f023 0303 	bic.w	r3, r3, #3
 800fa6e:	3211      	adds	r2, #17
 800fa70:	42a2      	cmp	r2, r4
 800fa72:	bf88      	it	hi
 800fa74:	2300      	movhi	r3, #0
 800fa76:	4418      	add	r0, r3
 800fa78:	2300      	movs	r3, #0
 800fa7a:	4288      	cmp	r0, r1
 800fa7c:	d305      	bcc.n	800fa8a <__copybits+0x40>
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa84:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa88:	e7eb      	b.n	800fa62 <__copybits+0x18>
 800fa8a:	f840 3b04 	str.w	r3, [r0], #4
 800fa8e:	e7f4      	b.n	800fa7a <__copybits+0x30>

0800fa90 <__any_on>:
 800fa90:	f100 0214 	add.w	r2, r0, #20
 800fa94:	6900      	ldr	r0, [r0, #16]
 800fa96:	114b      	asrs	r3, r1, #5
 800fa98:	4298      	cmp	r0, r3
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	db11      	blt.n	800fac2 <__any_on+0x32>
 800fa9e:	dd0a      	ble.n	800fab6 <__any_on+0x26>
 800faa0:	f011 011f 	ands.w	r1, r1, #31
 800faa4:	d007      	beq.n	800fab6 <__any_on+0x26>
 800faa6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800faaa:	fa24 f001 	lsr.w	r0, r4, r1
 800faae:	fa00 f101 	lsl.w	r1, r0, r1
 800fab2:	428c      	cmp	r4, r1
 800fab4:	d10b      	bne.n	800face <__any_on+0x3e>
 800fab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800faba:	4293      	cmp	r3, r2
 800fabc:	d803      	bhi.n	800fac6 <__any_on+0x36>
 800fabe:	2000      	movs	r0, #0
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	4603      	mov	r3, r0
 800fac4:	e7f7      	b.n	800fab6 <__any_on+0x26>
 800fac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800faca:	2900      	cmp	r1, #0
 800facc:	d0f5      	beq.n	800faba <__any_on+0x2a>
 800face:	2001      	movs	r0, #1
 800fad0:	e7f6      	b.n	800fac0 <__any_on+0x30>

0800fad2 <_malloc_usable_size_r>:
 800fad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fad6:	1f18      	subs	r0, r3, #4
 800fad8:	2b00      	cmp	r3, #0
 800fada:	bfbc      	itt	lt
 800fadc:	580b      	ldrlt	r3, [r1, r0]
 800fade:	18c0      	addlt	r0, r0, r3
 800fae0:	4770      	bx	lr

0800fae2 <__ascii_wctomb>:
 800fae2:	b149      	cbz	r1, 800faf8 <__ascii_wctomb+0x16>
 800fae4:	2aff      	cmp	r2, #255	; 0xff
 800fae6:	bf85      	ittet	hi
 800fae8:	238a      	movhi	r3, #138	; 0x8a
 800faea:	6003      	strhi	r3, [r0, #0]
 800faec:	700a      	strbls	r2, [r1, #0]
 800faee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800faf2:	bf98      	it	ls
 800faf4:	2001      	movls	r0, #1
 800faf6:	4770      	bx	lr
 800faf8:	4608      	mov	r0, r1
 800fafa:	4770      	bx	lr

0800fafc <__sfputc_r>:
 800fafc:	6893      	ldr	r3, [r2, #8]
 800fafe:	3b01      	subs	r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	b410      	push	{r4}
 800fb04:	6093      	str	r3, [r2, #8]
 800fb06:	da08      	bge.n	800fb1a <__sfputc_r+0x1e>
 800fb08:	6994      	ldr	r4, [r2, #24]
 800fb0a:	42a3      	cmp	r3, r4
 800fb0c:	db01      	blt.n	800fb12 <__sfputc_r+0x16>
 800fb0e:	290a      	cmp	r1, #10
 800fb10:	d103      	bne.n	800fb1a <__sfputc_r+0x1e>
 800fb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb16:	f7fd bf5c 	b.w	800d9d2 <__swbuf_r>
 800fb1a:	6813      	ldr	r3, [r2, #0]
 800fb1c:	1c58      	adds	r0, r3, #1
 800fb1e:	6010      	str	r0, [r2, #0]
 800fb20:	7019      	strb	r1, [r3, #0]
 800fb22:	4608      	mov	r0, r1
 800fb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <__sfputs_r>:
 800fb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	460f      	mov	r7, r1
 800fb30:	4614      	mov	r4, r2
 800fb32:	18d5      	adds	r5, r2, r3
 800fb34:	42ac      	cmp	r4, r5
 800fb36:	d101      	bne.n	800fb3c <__sfputs_r+0x12>
 800fb38:	2000      	movs	r0, #0
 800fb3a:	e007      	b.n	800fb4c <__sfputs_r+0x22>
 800fb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb40:	463a      	mov	r2, r7
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7ff ffda 	bl	800fafc <__sfputc_r>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d1f3      	bne.n	800fb34 <__sfputs_r+0xa>
 800fb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb50 <_vfiprintf_r>:
 800fb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	460d      	mov	r5, r1
 800fb56:	b09d      	sub	sp, #116	; 0x74
 800fb58:	4614      	mov	r4, r2
 800fb5a:	4698      	mov	r8, r3
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	b118      	cbz	r0, 800fb68 <_vfiprintf_r+0x18>
 800fb60:	6a03      	ldr	r3, [r0, #32]
 800fb62:	b90b      	cbnz	r3, 800fb68 <_vfiprintf_r+0x18>
 800fb64:	f7fd fe4e 	bl	800d804 <__sinit>
 800fb68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb6a:	07d9      	lsls	r1, r3, #31
 800fb6c:	d405      	bmi.n	800fb7a <_vfiprintf_r+0x2a>
 800fb6e:	89ab      	ldrh	r3, [r5, #12]
 800fb70:	059a      	lsls	r2, r3, #22
 800fb72:	d402      	bmi.n	800fb7a <_vfiprintf_r+0x2a>
 800fb74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb76:	f7fe f8b6 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800fb7a:	89ab      	ldrh	r3, [r5, #12]
 800fb7c:	071b      	lsls	r3, r3, #28
 800fb7e:	d501      	bpl.n	800fb84 <_vfiprintf_r+0x34>
 800fb80:	692b      	ldr	r3, [r5, #16]
 800fb82:	b99b      	cbnz	r3, 800fbac <_vfiprintf_r+0x5c>
 800fb84:	4629      	mov	r1, r5
 800fb86:	4630      	mov	r0, r6
 800fb88:	f7fd ff60 	bl	800da4c <__swsetup_r>
 800fb8c:	b170      	cbz	r0, 800fbac <_vfiprintf_r+0x5c>
 800fb8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb90:	07dc      	lsls	r4, r3, #31
 800fb92:	d504      	bpl.n	800fb9e <_vfiprintf_r+0x4e>
 800fb94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb98:	b01d      	add	sp, #116	; 0x74
 800fb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9e:	89ab      	ldrh	r3, [r5, #12]
 800fba0:	0598      	lsls	r0, r3, #22
 800fba2:	d4f7      	bmi.n	800fb94 <_vfiprintf_r+0x44>
 800fba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fba6:	f7fe f89f 	bl	800dce8 <__retarget_lock_release_recursive>
 800fbaa:	e7f3      	b.n	800fb94 <_vfiprintf_r+0x44>
 800fbac:	2300      	movs	r3, #0
 800fbae:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb0:	2320      	movs	r3, #32
 800fbb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbba:	2330      	movs	r3, #48	; 0x30
 800fbbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fd70 <_vfiprintf_r+0x220>
 800fbc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbc4:	f04f 0901 	mov.w	r9, #1
 800fbc8:	4623      	mov	r3, r4
 800fbca:	469a      	mov	sl, r3
 800fbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd0:	b10a      	cbz	r2, 800fbd6 <_vfiprintf_r+0x86>
 800fbd2:	2a25      	cmp	r2, #37	; 0x25
 800fbd4:	d1f9      	bne.n	800fbca <_vfiprintf_r+0x7a>
 800fbd6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbda:	d00b      	beq.n	800fbf4 <_vfiprintf_r+0xa4>
 800fbdc:	465b      	mov	r3, fp
 800fbde:	4622      	mov	r2, r4
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	f7ff ffa1 	bl	800fb2a <__sfputs_r>
 800fbe8:	3001      	adds	r0, #1
 800fbea:	f000 80a9 	beq.w	800fd40 <_vfiprintf_r+0x1f0>
 800fbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbf0:	445a      	add	r2, fp
 800fbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 80a1 	beq.w	800fd40 <_vfiprintf_r+0x1f0>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc08:	f10a 0a01 	add.w	sl, sl, #1
 800fc0c:	9304      	str	r3, [sp, #16]
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc14:	931a      	str	r3, [sp, #104]	; 0x68
 800fc16:	4654      	mov	r4, sl
 800fc18:	2205      	movs	r2, #5
 800fc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc1e:	4854      	ldr	r0, [pc, #336]	; (800fd70 <_vfiprintf_r+0x220>)
 800fc20:	f7f0 faee 	bl	8000200 <memchr>
 800fc24:	9a04      	ldr	r2, [sp, #16]
 800fc26:	b9d8      	cbnz	r0, 800fc60 <_vfiprintf_r+0x110>
 800fc28:	06d1      	lsls	r1, r2, #27
 800fc2a:	bf44      	itt	mi
 800fc2c:	2320      	movmi	r3, #32
 800fc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc32:	0713      	lsls	r3, r2, #28
 800fc34:	bf44      	itt	mi
 800fc36:	232b      	movmi	r3, #43	; 0x2b
 800fc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc40:	2b2a      	cmp	r3, #42	; 0x2a
 800fc42:	d015      	beq.n	800fc70 <_vfiprintf_r+0x120>
 800fc44:	9a07      	ldr	r2, [sp, #28]
 800fc46:	4654      	mov	r4, sl
 800fc48:	2000      	movs	r0, #0
 800fc4a:	f04f 0c0a 	mov.w	ip, #10
 800fc4e:	4621      	mov	r1, r4
 800fc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc54:	3b30      	subs	r3, #48	; 0x30
 800fc56:	2b09      	cmp	r3, #9
 800fc58:	d94d      	bls.n	800fcf6 <_vfiprintf_r+0x1a6>
 800fc5a:	b1b0      	cbz	r0, 800fc8a <_vfiprintf_r+0x13a>
 800fc5c:	9207      	str	r2, [sp, #28]
 800fc5e:	e014      	b.n	800fc8a <_vfiprintf_r+0x13a>
 800fc60:	eba0 0308 	sub.w	r3, r0, r8
 800fc64:	fa09 f303 	lsl.w	r3, r9, r3
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	9304      	str	r3, [sp, #16]
 800fc6c:	46a2      	mov	sl, r4
 800fc6e:	e7d2      	b.n	800fc16 <_vfiprintf_r+0xc6>
 800fc70:	9b03      	ldr	r3, [sp, #12]
 800fc72:	1d19      	adds	r1, r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	9103      	str	r1, [sp, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bfbb      	ittet	lt
 800fc7c:	425b      	neglt	r3, r3
 800fc7e:	f042 0202 	orrlt.w	r2, r2, #2
 800fc82:	9307      	strge	r3, [sp, #28]
 800fc84:	9307      	strlt	r3, [sp, #28]
 800fc86:	bfb8      	it	lt
 800fc88:	9204      	strlt	r2, [sp, #16]
 800fc8a:	7823      	ldrb	r3, [r4, #0]
 800fc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fc8e:	d10c      	bne.n	800fcaa <_vfiprintf_r+0x15a>
 800fc90:	7863      	ldrb	r3, [r4, #1]
 800fc92:	2b2a      	cmp	r3, #42	; 0x2a
 800fc94:	d134      	bne.n	800fd00 <_vfiprintf_r+0x1b0>
 800fc96:	9b03      	ldr	r3, [sp, #12]
 800fc98:	1d1a      	adds	r2, r3, #4
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	9203      	str	r2, [sp, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	bfb8      	it	lt
 800fca2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fca6:	3402      	adds	r4, #2
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fd80 <_vfiprintf_r+0x230>
 800fcae:	7821      	ldrb	r1, [r4, #0]
 800fcb0:	2203      	movs	r2, #3
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7f0 faa4 	bl	8000200 <memchr>
 800fcb8:	b138      	cbz	r0, 800fcca <_vfiprintf_r+0x17a>
 800fcba:	9b04      	ldr	r3, [sp, #16]
 800fcbc:	eba0 000a 	sub.w	r0, r0, sl
 800fcc0:	2240      	movs	r2, #64	; 0x40
 800fcc2:	4082      	lsls	r2, r0
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	3401      	adds	r4, #1
 800fcc8:	9304      	str	r3, [sp, #16]
 800fcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcce:	4829      	ldr	r0, [pc, #164]	; (800fd74 <_vfiprintf_r+0x224>)
 800fcd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcd4:	2206      	movs	r2, #6
 800fcd6:	f7f0 fa93 	bl	8000200 <memchr>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d03f      	beq.n	800fd5e <_vfiprintf_r+0x20e>
 800fcde:	4b26      	ldr	r3, [pc, #152]	; (800fd78 <_vfiprintf_r+0x228>)
 800fce0:	bb1b      	cbnz	r3, 800fd2a <_vfiprintf_r+0x1da>
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	3307      	adds	r3, #7
 800fce6:	f023 0307 	bic.w	r3, r3, #7
 800fcea:	3308      	adds	r3, #8
 800fcec:	9303      	str	r3, [sp, #12]
 800fcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf0:	443b      	add	r3, r7
 800fcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf4:	e768      	b.n	800fbc8 <_vfiprintf_r+0x78>
 800fcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	e7a6      	b.n	800fc4e <_vfiprintf_r+0xfe>
 800fd00:	2300      	movs	r3, #0
 800fd02:	3401      	adds	r4, #1
 800fd04:	9305      	str	r3, [sp, #20]
 800fd06:	4619      	mov	r1, r3
 800fd08:	f04f 0c0a 	mov.w	ip, #10
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd12:	3a30      	subs	r2, #48	; 0x30
 800fd14:	2a09      	cmp	r2, #9
 800fd16:	d903      	bls.n	800fd20 <_vfiprintf_r+0x1d0>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d0c6      	beq.n	800fcaa <_vfiprintf_r+0x15a>
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	e7c4      	b.n	800fcaa <_vfiprintf_r+0x15a>
 800fd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd24:	4604      	mov	r4, r0
 800fd26:	2301      	movs	r3, #1
 800fd28:	e7f0      	b.n	800fd0c <_vfiprintf_r+0x1bc>
 800fd2a:	ab03      	add	r3, sp, #12
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	462a      	mov	r2, r5
 800fd30:	4b12      	ldr	r3, [pc, #72]	; (800fd7c <_vfiprintf_r+0x22c>)
 800fd32:	a904      	add	r1, sp, #16
 800fd34:	4630      	mov	r0, r6
 800fd36:	f7fd f913 	bl	800cf60 <_printf_float>
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	1c78      	adds	r0, r7, #1
 800fd3e:	d1d6      	bne.n	800fcee <_vfiprintf_r+0x19e>
 800fd40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd42:	07d9      	lsls	r1, r3, #31
 800fd44:	d405      	bmi.n	800fd52 <_vfiprintf_r+0x202>
 800fd46:	89ab      	ldrh	r3, [r5, #12]
 800fd48:	059a      	lsls	r2, r3, #22
 800fd4a:	d402      	bmi.n	800fd52 <_vfiprintf_r+0x202>
 800fd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd4e:	f7fd ffcb 	bl	800dce8 <__retarget_lock_release_recursive>
 800fd52:	89ab      	ldrh	r3, [r5, #12]
 800fd54:	065b      	lsls	r3, r3, #25
 800fd56:	f53f af1d 	bmi.w	800fb94 <_vfiprintf_r+0x44>
 800fd5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd5c:	e71c      	b.n	800fb98 <_vfiprintf_r+0x48>
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	462a      	mov	r2, r5
 800fd64:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <_vfiprintf_r+0x22c>)
 800fd66:	a904      	add	r1, sp, #16
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f7fd fb9d 	bl	800d4a8 <_printf_i>
 800fd6e:	e7e4      	b.n	800fd3a <_vfiprintf_r+0x1ea>
 800fd70:	08011944 	.word	0x08011944
 800fd74:	0801194e 	.word	0x0801194e
 800fd78:	0800cf61 	.word	0x0800cf61
 800fd7c:	0800fb2b 	.word	0x0800fb2b
 800fd80:	0801194a 	.word	0x0801194a

0800fd84 <__sflush_r>:
 800fd84:	898a      	ldrh	r2, [r1, #12]
 800fd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	0710      	lsls	r0, r2, #28
 800fd8e:	460c      	mov	r4, r1
 800fd90:	d458      	bmi.n	800fe44 <__sflush_r+0xc0>
 800fd92:	684b      	ldr	r3, [r1, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	dc05      	bgt.n	800fda4 <__sflush_r+0x20>
 800fd98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	dc02      	bgt.n	800fda4 <__sflush_r+0x20>
 800fd9e:	2000      	movs	r0, #0
 800fda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fda6:	2e00      	cmp	r6, #0
 800fda8:	d0f9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdb0:	682f      	ldr	r7, [r5, #0]
 800fdb2:	6a21      	ldr	r1, [r4, #32]
 800fdb4:	602b      	str	r3, [r5, #0]
 800fdb6:	d032      	beq.n	800fe1e <__sflush_r+0x9a>
 800fdb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	075a      	lsls	r2, r3, #29
 800fdbe:	d505      	bpl.n	800fdcc <__sflush_r+0x48>
 800fdc0:	6863      	ldr	r3, [r4, #4]
 800fdc2:	1ac0      	subs	r0, r0, r3
 800fdc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdc6:	b10b      	cbz	r3, 800fdcc <__sflush_r+0x48>
 800fdc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdca:	1ac0      	subs	r0, r0, r3
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4602      	mov	r2, r0
 800fdd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdd2:	6a21      	ldr	r1, [r4, #32]
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	47b0      	blx	r6
 800fdd8:	1c43      	adds	r3, r0, #1
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	d106      	bne.n	800fdec <__sflush_r+0x68>
 800fdde:	6829      	ldr	r1, [r5, #0]
 800fde0:	291d      	cmp	r1, #29
 800fde2:	d82b      	bhi.n	800fe3c <__sflush_r+0xb8>
 800fde4:	4a29      	ldr	r2, [pc, #164]	; (800fe8c <__sflush_r+0x108>)
 800fde6:	410a      	asrs	r2, r1
 800fde8:	07d6      	lsls	r6, r2, #31
 800fdea:	d427      	bmi.n	800fe3c <__sflush_r+0xb8>
 800fdec:	2200      	movs	r2, #0
 800fdee:	6062      	str	r2, [r4, #4]
 800fdf0:	04d9      	lsls	r1, r3, #19
 800fdf2:	6922      	ldr	r2, [r4, #16]
 800fdf4:	6022      	str	r2, [r4, #0]
 800fdf6:	d504      	bpl.n	800fe02 <__sflush_r+0x7e>
 800fdf8:	1c42      	adds	r2, r0, #1
 800fdfa:	d101      	bne.n	800fe00 <__sflush_r+0x7c>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b903      	cbnz	r3, 800fe02 <__sflush_r+0x7e>
 800fe00:	6560      	str	r0, [r4, #84]	; 0x54
 800fe02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe04:	602f      	str	r7, [r5, #0]
 800fe06:	2900      	cmp	r1, #0
 800fe08:	d0c9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fe0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe0e:	4299      	cmp	r1, r3
 800fe10:	d002      	beq.n	800fe18 <__sflush_r+0x94>
 800fe12:	4628      	mov	r0, r5
 800fe14:	f7fe fdfa 	bl	800ea0c <_free_r>
 800fe18:	2000      	movs	r0, #0
 800fe1a:	6360      	str	r0, [r4, #52]	; 0x34
 800fe1c:	e7c0      	b.n	800fda0 <__sflush_r+0x1c>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4628      	mov	r0, r5
 800fe22:	47b0      	blx	r6
 800fe24:	1c41      	adds	r1, r0, #1
 800fe26:	d1c8      	bne.n	800fdba <__sflush_r+0x36>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c5      	beq.n	800fdba <__sflush_r+0x36>
 800fe2e:	2b1d      	cmp	r3, #29
 800fe30:	d001      	beq.n	800fe36 <__sflush_r+0xb2>
 800fe32:	2b16      	cmp	r3, #22
 800fe34:	d101      	bne.n	800fe3a <__sflush_r+0xb6>
 800fe36:	602f      	str	r7, [r5, #0]
 800fe38:	e7b1      	b.n	800fd9e <__sflush_r+0x1a>
 800fe3a:	89a3      	ldrh	r3, [r4, #12]
 800fe3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe40:	81a3      	strh	r3, [r4, #12]
 800fe42:	e7ad      	b.n	800fda0 <__sflush_r+0x1c>
 800fe44:	690f      	ldr	r7, [r1, #16]
 800fe46:	2f00      	cmp	r7, #0
 800fe48:	d0a9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fe4a:	0793      	lsls	r3, r2, #30
 800fe4c:	680e      	ldr	r6, [r1, #0]
 800fe4e:	bf08      	it	eq
 800fe50:	694b      	ldreq	r3, [r1, #20]
 800fe52:	600f      	str	r7, [r1, #0]
 800fe54:	bf18      	it	ne
 800fe56:	2300      	movne	r3, #0
 800fe58:	eba6 0807 	sub.w	r8, r6, r7
 800fe5c:	608b      	str	r3, [r1, #8]
 800fe5e:	f1b8 0f00 	cmp.w	r8, #0
 800fe62:	dd9c      	ble.n	800fd9e <__sflush_r+0x1a>
 800fe64:	6a21      	ldr	r1, [r4, #32]
 800fe66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe68:	4643      	mov	r3, r8
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	47b0      	blx	r6
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dc06      	bgt.n	800fe82 <__sflush_r+0xfe>
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe80:	e78e      	b.n	800fda0 <__sflush_r+0x1c>
 800fe82:	4407      	add	r7, r0
 800fe84:	eba8 0800 	sub.w	r8, r8, r0
 800fe88:	e7e9      	b.n	800fe5e <__sflush_r+0xda>
 800fe8a:	bf00      	nop
 800fe8c:	dfbffffe 	.word	0xdfbffffe

0800fe90 <_fflush_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	690b      	ldr	r3, [r1, #16]
 800fe94:	4605      	mov	r5, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	b913      	cbnz	r3, 800fea0 <_fflush_r+0x10>
 800fe9a:	2500      	movs	r5, #0
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	b118      	cbz	r0, 800feaa <_fflush_r+0x1a>
 800fea2:	6a03      	ldr	r3, [r0, #32]
 800fea4:	b90b      	cbnz	r3, 800feaa <_fflush_r+0x1a>
 800fea6:	f7fd fcad 	bl	800d804 <__sinit>
 800feaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0f3      	beq.n	800fe9a <_fflush_r+0xa>
 800feb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800feb4:	07d0      	lsls	r0, r2, #31
 800feb6:	d404      	bmi.n	800fec2 <_fflush_r+0x32>
 800feb8:	0599      	lsls	r1, r3, #22
 800feba:	d402      	bmi.n	800fec2 <_fflush_r+0x32>
 800febc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800febe:	f7fd ff12 	bl	800dce6 <__retarget_lock_acquire_recursive>
 800fec2:	4628      	mov	r0, r5
 800fec4:	4621      	mov	r1, r4
 800fec6:	f7ff ff5d 	bl	800fd84 <__sflush_r>
 800feca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fecc:	07da      	lsls	r2, r3, #31
 800fece:	4605      	mov	r5, r0
 800fed0:	d4e4      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	059b      	lsls	r3, r3, #22
 800fed6:	d4e1      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feda:	f7fd ff05 	bl	800dce8 <__retarget_lock_release_recursive>
 800fede:	e7dd      	b.n	800fe9c <_fflush_r+0xc>

0800fee0 <__swhatbuf_r>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	460c      	mov	r4, r1
 800fee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee8:	2900      	cmp	r1, #0
 800feea:	b096      	sub	sp, #88	; 0x58
 800feec:	4615      	mov	r5, r2
 800feee:	461e      	mov	r6, r3
 800fef0:	da0d      	bge.n	800ff0e <__swhatbuf_r+0x2e>
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fef8:	f04f 0100 	mov.w	r1, #0
 800fefc:	bf0c      	ite	eq
 800fefe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff02:	2340      	movne	r3, #64	; 0x40
 800ff04:	2000      	movs	r0, #0
 800ff06:	6031      	str	r1, [r6, #0]
 800ff08:	602b      	str	r3, [r5, #0]
 800ff0a:	b016      	add	sp, #88	; 0x58
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	466a      	mov	r2, sp
 800ff10:	f000 f848 	bl	800ffa4 <_fstat_r>
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dbec      	blt.n	800fef2 <__swhatbuf_r+0x12>
 800ff18:	9901      	ldr	r1, [sp, #4]
 800ff1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ff1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ff22:	4259      	negs	r1, r3
 800ff24:	4159      	adcs	r1, r3
 800ff26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff2a:	e7eb      	b.n	800ff04 <__swhatbuf_r+0x24>

0800ff2c <__smakebuf_r>:
 800ff2c:	898b      	ldrh	r3, [r1, #12]
 800ff2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff30:	079d      	lsls	r5, r3, #30
 800ff32:	4606      	mov	r6, r0
 800ff34:	460c      	mov	r4, r1
 800ff36:	d507      	bpl.n	800ff48 <__smakebuf_r+0x1c>
 800ff38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	2301      	movs	r3, #1
 800ff42:	6163      	str	r3, [r4, #20]
 800ff44:	b002      	add	sp, #8
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	ab01      	add	r3, sp, #4
 800ff4a:	466a      	mov	r2, sp
 800ff4c:	f7ff ffc8 	bl	800fee0 <__swhatbuf_r>
 800ff50:	9900      	ldr	r1, [sp, #0]
 800ff52:	4605      	mov	r5, r0
 800ff54:	4630      	mov	r0, r6
 800ff56:	f7fc f887 	bl	800c068 <_malloc_r>
 800ff5a:	b948      	cbnz	r0, 800ff70 <__smakebuf_r+0x44>
 800ff5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff60:	059a      	lsls	r2, r3, #22
 800ff62:	d4ef      	bmi.n	800ff44 <__smakebuf_r+0x18>
 800ff64:	f023 0303 	bic.w	r3, r3, #3
 800ff68:	f043 0302 	orr.w	r3, r3, #2
 800ff6c:	81a3      	strh	r3, [r4, #12]
 800ff6e:	e7e3      	b.n	800ff38 <__smakebuf_r+0xc>
 800ff70:	89a3      	ldrh	r3, [r4, #12]
 800ff72:	6020      	str	r0, [r4, #0]
 800ff74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff78:	81a3      	strh	r3, [r4, #12]
 800ff7a:	9b00      	ldr	r3, [sp, #0]
 800ff7c:	6163      	str	r3, [r4, #20]
 800ff7e:	9b01      	ldr	r3, [sp, #4]
 800ff80:	6120      	str	r0, [r4, #16]
 800ff82:	b15b      	cbz	r3, 800ff9c <__smakebuf_r+0x70>
 800ff84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f000 f81d 	bl	800ffc8 <_isatty_r>
 800ff8e:	b128      	cbz	r0, 800ff9c <__smakebuf_r+0x70>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f023 0303 	bic.w	r3, r3, #3
 800ff96:	f043 0301 	orr.w	r3, r3, #1
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	431d      	orrs	r5, r3
 800ffa0:	81a5      	strh	r5, [r4, #12]
 800ffa2:	e7cf      	b.n	800ff44 <__smakebuf_r+0x18>

0800ffa4 <_fstat_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d07      	ldr	r5, [pc, #28]	; (800ffc4 <_fstat_r+0x20>)
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4604      	mov	r4, r0
 800ffac:	4608      	mov	r0, r1
 800ffae:	4611      	mov	r1, r2
 800ffb0:	602b      	str	r3, [r5, #0]
 800ffb2:	f7f2 fa8a 	bl	80024ca <_fstat>
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	d102      	bne.n	800ffc0 <_fstat_r+0x1c>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	b103      	cbz	r3, 800ffc0 <_fstat_r+0x1c>
 800ffbe:	6023      	str	r3, [r4, #0]
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20005754 	.word	0x20005754

0800ffc8 <_isatty_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4d06      	ldr	r5, [pc, #24]	; (800ffe4 <_isatty_r+0x1c>)
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4604      	mov	r4, r0
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	602b      	str	r3, [r5, #0]
 800ffd4:	f7f2 fa89 	bl	80024ea <_isatty>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_isatty_r+0x1a>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_isatty_r+0x1a>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	20005754 	.word	0x20005754

0800ffe8 <__assert_func>:
 800ffe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffea:	4614      	mov	r4, r2
 800ffec:	461a      	mov	r2, r3
 800ffee:	4b09      	ldr	r3, [pc, #36]	; (8010014 <__assert_func+0x2c>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4605      	mov	r5, r0
 800fff4:	68d8      	ldr	r0, [r3, #12]
 800fff6:	b14c      	cbz	r4, 801000c <__assert_func+0x24>
 800fff8:	4b07      	ldr	r3, [pc, #28]	; (8010018 <__assert_func+0x30>)
 800fffa:	9100      	str	r1, [sp, #0]
 800fffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010000:	4906      	ldr	r1, [pc, #24]	; (801001c <__assert_func+0x34>)
 8010002:	462b      	mov	r3, r5
 8010004:	f000 f824 	bl	8010050 <fiprintf>
 8010008:	f000 f834 	bl	8010074 <abort>
 801000c:	4b04      	ldr	r3, [pc, #16]	; (8010020 <__assert_func+0x38>)
 801000e:	461c      	mov	r4, r3
 8010010:	e7f3      	b.n	800fffa <__assert_func+0x12>
 8010012:	bf00      	nop
 8010014:	200002b0 	.word	0x200002b0
 8010018:	08011955 	.word	0x08011955
 801001c:	08011962 	.word	0x08011962
 8010020:	08011990 	.word	0x08011990

08010024 <_calloc_r>:
 8010024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010026:	fba1 2402 	umull	r2, r4, r1, r2
 801002a:	b94c      	cbnz	r4, 8010040 <_calloc_r+0x1c>
 801002c:	4611      	mov	r1, r2
 801002e:	9201      	str	r2, [sp, #4]
 8010030:	f7fc f81a 	bl	800c068 <_malloc_r>
 8010034:	9a01      	ldr	r2, [sp, #4]
 8010036:	4605      	mov	r5, r0
 8010038:	b930      	cbnz	r0, 8010048 <_calloc_r+0x24>
 801003a:	4628      	mov	r0, r5
 801003c:	b003      	add	sp, #12
 801003e:	bd30      	pop	{r4, r5, pc}
 8010040:	220c      	movs	r2, #12
 8010042:	6002      	str	r2, [r0, #0]
 8010044:	2500      	movs	r5, #0
 8010046:	e7f8      	b.n	801003a <_calloc_r+0x16>
 8010048:	4621      	mov	r1, r4
 801004a:	f7fd fd57 	bl	800dafc <memset>
 801004e:	e7f4      	b.n	801003a <_calloc_r+0x16>

08010050 <fiprintf>:
 8010050:	b40e      	push	{r1, r2, r3}
 8010052:	b503      	push	{r0, r1, lr}
 8010054:	4601      	mov	r1, r0
 8010056:	ab03      	add	r3, sp, #12
 8010058:	4805      	ldr	r0, [pc, #20]	; (8010070 <fiprintf+0x20>)
 801005a:	f853 2b04 	ldr.w	r2, [r3], #4
 801005e:	6800      	ldr	r0, [r0, #0]
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	f7ff fd75 	bl	800fb50 <_vfiprintf_r>
 8010066:	b002      	add	sp, #8
 8010068:	f85d eb04 	ldr.w	lr, [sp], #4
 801006c:	b003      	add	sp, #12
 801006e:	4770      	bx	lr
 8010070:	200002b0 	.word	0x200002b0

08010074 <abort>:
 8010074:	b508      	push	{r3, lr}
 8010076:	2006      	movs	r0, #6
 8010078:	f000 f82c 	bl	80100d4 <raise>
 801007c:	2001      	movs	r0, #1
 801007e:	f7f2 f9f1 	bl	8002464 <_exit>

08010082 <_raise_r>:
 8010082:	291f      	cmp	r1, #31
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4604      	mov	r4, r0
 8010088:	460d      	mov	r5, r1
 801008a:	d904      	bls.n	8010096 <_raise_r+0x14>
 801008c:	2316      	movs	r3, #22
 801008e:	6003      	str	r3, [r0, #0]
 8010090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010094:	bd38      	pop	{r3, r4, r5, pc}
 8010096:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010098:	b112      	cbz	r2, 80100a0 <_raise_r+0x1e>
 801009a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801009e:	b94b      	cbnz	r3, 80100b4 <_raise_r+0x32>
 80100a0:	4620      	mov	r0, r4
 80100a2:	f000 f831 	bl	8010108 <_getpid_r>
 80100a6:	462a      	mov	r2, r5
 80100a8:	4601      	mov	r1, r0
 80100aa:	4620      	mov	r0, r4
 80100ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100b0:	f000 b818 	b.w	80100e4 <_kill_r>
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d00a      	beq.n	80100ce <_raise_r+0x4c>
 80100b8:	1c59      	adds	r1, r3, #1
 80100ba:	d103      	bne.n	80100c4 <_raise_r+0x42>
 80100bc:	2316      	movs	r3, #22
 80100be:	6003      	str	r3, [r0, #0]
 80100c0:	2001      	movs	r0, #1
 80100c2:	e7e7      	b.n	8010094 <_raise_r+0x12>
 80100c4:	2400      	movs	r4, #0
 80100c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100ca:	4628      	mov	r0, r5
 80100cc:	4798      	blx	r3
 80100ce:	2000      	movs	r0, #0
 80100d0:	e7e0      	b.n	8010094 <_raise_r+0x12>
	...

080100d4 <raise>:
 80100d4:	4b02      	ldr	r3, [pc, #8]	; (80100e0 <raise+0xc>)
 80100d6:	4601      	mov	r1, r0
 80100d8:	6818      	ldr	r0, [r3, #0]
 80100da:	f7ff bfd2 	b.w	8010082 <_raise_r>
 80100de:	bf00      	nop
 80100e0:	200002b0 	.word	0x200002b0

080100e4 <_kill_r>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4d07      	ldr	r5, [pc, #28]	; (8010104 <_kill_r+0x20>)
 80100e8:	2300      	movs	r3, #0
 80100ea:	4604      	mov	r4, r0
 80100ec:	4608      	mov	r0, r1
 80100ee:	4611      	mov	r1, r2
 80100f0:	602b      	str	r3, [r5, #0]
 80100f2:	f7f2 f9a7 	bl	8002444 <_kill>
 80100f6:	1c43      	adds	r3, r0, #1
 80100f8:	d102      	bne.n	8010100 <_kill_r+0x1c>
 80100fa:	682b      	ldr	r3, [r5, #0]
 80100fc:	b103      	cbz	r3, 8010100 <_kill_r+0x1c>
 80100fe:	6023      	str	r3, [r4, #0]
 8010100:	bd38      	pop	{r3, r4, r5, pc}
 8010102:	bf00      	nop
 8010104:	20005754 	.word	0x20005754

08010108 <_getpid_r>:
 8010108:	f7f2 b994 	b.w	8002434 <_getpid>
 801010c:	0000      	movs	r0, r0
	...

08010110 <cos>:
 8010110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010112:	ec53 2b10 	vmov	r2, r3, d0
 8010116:	4826      	ldr	r0, [pc, #152]	; (80101b0 <cos+0xa0>)
 8010118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801011c:	4281      	cmp	r1, r0
 801011e:	dc06      	bgt.n	801012e <cos+0x1e>
 8010120:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80101a8 <cos+0x98>
 8010124:	b005      	add	sp, #20
 8010126:	f85d eb04 	ldr.w	lr, [sp], #4
 801012a:	f000 b8f1 	b.w	8010310 <__kernel_cos>
 801012e:	4821      	ldr	r0, [pc, #132]	; (80101b4 <cos+0xa4>)
 8010130:	4281      	cmp	r1, r0
 8010132:	dd09      	ble.n	8010148 <cos+0x38>
 8010134:	ee10 0a10 	vmov	r0, s0
 8010138:	4619      	mov	r1, r3
 801013a:	f7f0 f8bd 	bl	80002b8 <__aeabi_dsub>
 801013e:	ec41 0b10 	vmov	d0, r0, r1
 8010142:	b005      	add	sp, #20
 8010144:	f85d fb04 	ldr.w	pc, [sp], #4
 8010148:	4668      	mov	r0, sp
 801014a:	f000 fa69 	bl	8010620 <__ieee754_rem_pio2>
 801014e:	f000 0003 	and.w	r0, r0, #3
 8010152:	2801      	cmp	r0, #1
 8010154:	d00b      	beq.n	801016e <cos+0x5e>
 8010156:	2802      	cmp	r0, #2
 8010158:	d016      	beq.n	8010188 <cos+0x78>
 801015a:	b9e0      	cbnz	r0, 8010196 <cos+0x86>
 801015c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010160:	ed9d 0b00 	vldr	d0, [sp]
 8010164:	f000 f8d4 	bl	8010310 <__kernel_cos>
 8010168:	ec51 0b10 	vmov	r0, r1, d0
 801016c:	e7e7      	b.n	801013e <cos+0x2e>
 801016e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010172:	ed9d 0b00 	vldr	d0, [sp]
 8010176:	f000 f993 	bl	80104a0 <__kernel_sin>
 801017a:	ec53 2b10 	vmov	r2, r3, d0
 801017e:	ee10 0a10 	vmov	r0, s0
 8010182:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010186:	e7da      	b.n	801013e <cos+0x2e>
 8010188:	ed9d 1b02 	vldr	d1, [sp, #8]
 801018c:	ed9d 0b00 	vldr	d0, [sp]
 8010190:	f000 f8be 	bl	8010310 <__kernel_cos>
 8010194:	e7f1      	b.n	801017a <cos+0x6a>
 8010196:	ed9d 1b02 	vldr	d1, [sp, #8]
 801019a:	ed9d 0b00 	vldr	d0, [sp]
 801019e:	2001      	movs	r0, #1
 80101a0:	f000 f97e 	bl	80104a0 <__kernel_sin>
 80101a4:	e7e0      	b.n	8010168 <cos+0x58>
 80101a6:	bf00      	nop
	...
 80101b0:	3fe921fb 	.word	0x3fe921fb
 80101b4:	7fefffff 	.word	0x7fefffff

080101b8 <sin>:
 80101b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ba:	ec53 2b10 	vmov	r2, r3, d0
 80101be:	4828      	ldr	r0, [pc, #160]	; (8010260 <sin+0xa8>)
 80101c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101c4:	4281      	cmp	r1, r0
 80101c6:	dc07      	bgt.n	80101d8 <sin+0x20>
 80101c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010258 <sin+0xa0>
 80101cc:	2000      	movs	r0, #0
 80101ce:	b005      	add	sp, #20
 80101d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80101d4:	f000 b964 	b.w	80104a0 <__kernel_sin>
 80101d8:	4822      	ldr	r0, [pc, #136]	; (8010264 <sin+0xac>)
 80101da:	4281      	cmp	r1, r0
 80101dc:	dd09      	ble.n	80101f2 <sin+0x3a>
 80101de:	ee10 0a10 	vmov	r0, s0
 80101e2:	4619      	mov	r1, r3
 80101e4:	f7f0 f868 	bl	80002b8 <__aeabi_dsub>
 80101e8:	ec41 0b10 	vmov	d0, r0, r1
 80101ec:	b005      	add	sp, #20
 80101ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80101f2:	4668      	mov	r0, sp
 80101f4:	f000 fa14 	bl	8010620 <__ieee754_rem_pio2>
 80101f8:	f000 0003 	and.w	r0, r0, #3
 80101fc:	2801      	cmp	r0, #1
 80101fe:	d00c      	beq.n	801021a <sin+0x62>
 8010200:	2802      	cmp	r0, #2
 8010202:	d011      	beq.n	8010228 <sin+0x70>
 8010204:	b9f0      	cbnz	r0, 8010244 <sin+0x8c>
 8010206:	ed9d 1b02 	vldr	d1, [sp, #8]
 801020a:	ed9d 0b00 	vldr	d0, [sp]
 801020e:	2001      	movs	r0, #1
 8010210:	f000 f946 	bl	80104a0 <__kernel_sin>
 8010214:	ec51 0b10 	vmov	r0, r1, d0
 8010218:	e7e6      	b.n	80101e8 <sin+0x30>
 801021a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801021e:	ed9d 0b00 	vldr	d0, [sp]
 8010222:	f000 f875 	bl	8010310 <__kernel_cos>
 8010226:	e7f5      	b.n	8010214 <sin+0x5c>
 8010228:	ed9d 1b02 	vldr	d1, [sp, #8]
 801022c:	ed9d 0b00 	vldr	d0, [sp]
 8010230:	2001      	movs	r0, #1
 8010232:	f000 f935 	bl	80104a0 <__kernel_sin>
 8010236:	ec53 2b10 	vmov	r2, r3, d0
 801023a:	ee10 0a10 	vmov	r0, s0
 801023e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010242:	e7d1      	b.n	80101e8 <sin+0x30>
 8010244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010248:	ed9d 0b00 	vldr	d0, [sp]
 801024c:	f000 f860 	bl	8010310 <__kernel_cos>
 8010250:	e7f1      	b.n	8010236 <sin+0x7e>
 8010252:	bf00      	nop
 8010254:	f3af 8000 	nop.w
	...
 8010260:	3fe921fb 	.word	0x3fe921fb
 8010264:	7fefffff 	.word	0x7fefffff

08010268 <fmaxf>:
 8010268:	b508      	push	{r3, lr}
 801026a:	ed2d 8b02 	vpush	{d8}
 801026e:	eeb0 8a40 	vmov.f32	s16, s0
 8010272:	eef0 8a60 	vmov.f32	s17, s1
 8010276:	f000 f82d 	bl	80102d4 <__fpclassifyf>
 801027a:	b148      	cbz	r0, 8010290 <fmaxf+0x28>
 801027c:	eeb0 0a68 	vmov.f32	s0, s17
 8010280:	f000 f828 	bl	80102d4 <__fpclassifyf>
 8010284:	b130      	cbz	r0, 8010294 <fmaxf+0x2c>
 8010286:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801028a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028e:	dc01      	bgt.n	8010294 <fmaxf+0x2c>
 8010290:	eeb0 8a68 	vmov.f32	s16, s17
 8010294:	eeb0 0a48 	vmov.f32	s0, s16
 8010298:	ecbd 8b02 	vpop	{d8}
 801029c:	bd08      	pop	{r3, pc}

0801029e <fminf>:
 801029e:	b508      	push	{r3, lr}
 80102a0:	ed2d 8b02 	vpush	{d8}
 80102a4:	eeb0 8a40 	vmov.f32	s16, s0
 80102a8:	eef0 8a60 	vmov.f32	s17, s1
 80102ac:	f000 f812 	bl	80102d4 <__fpclassifyf>
 80102b0:	b148      	cbz	r0, 80102c6 <fminf+0x28>
 80102b2:	eeb0 0a68 	vmov.f32	s0, s17
 80102b6:	f000 f80d 	bl	80102d4 <__fpclassifyf>
 80102ba:	b130      	cbz	r0, 80102ca <fminf+0x2c>
 80102bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80102c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c4:	d401      	bmi.n	80102ca <fminf+0x2c>
 80102c6:	eeb0 8a68 	vmov.f32	s16, s17
 80102ca:	eeb0 0a48 	vmov.f32	s0, s16
 80102ce:	ecbd 8b02 	vpop	{d8}
 80102d2:	bd08      	pop	{r3, pc}

080102d4 <__fpclassifyf>:
 80102d4:	ee10 3a10 	vmov	r3, s0
 80102d8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80102dc:	d00d      	beq.n	80102fa <__fpclassifyf+0x26>
 80102de:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80102e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80102e6:	d30a      	bcc.n	80102fe <__fpclassifyf+0x2a>
 80102e8:	4b07      	ldr	r3, [pc, #28]	; (8010308 <__fpclassifyf+0x34>)
 80102ea:	1e42      	subs	r2, r0, #1
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d908      	bls.n	8010302 <__fpclassifyf+0x2e>
 80102f0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80102f4:	4258      	negs	r0, r3
 80102f6:	4158      	adcs	r0, r3
 80102f8:	4770      	bx	lr
 80102fa:	2002      	movs	r0, #2
 80102fc:	4770      	bx	lr
 80102fe:	2004      	movs	r0, #4
 8010300:	4770      	bx	lr
 8010302:	2003      	movs	r0, #3
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	007ffffe 	.word	0x007ffffe
 801030c:	00000000 	.word	0x00000000

08010310 <__kernel_cos>:
 8010310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	ec57 6b10 	vmov	r6, r7, d0
 8010318:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801031c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010320:	ed8d 1b00 	vstr	d1, [sp]
 8010324:	da07      	bge.n	8010336 <__kernel_cos+0x26>
 8010326:	ee10 0a10 	vmov	r0, s0
 801032a:	4639      	mov	r1, r7
 801032c:	f7f0 fc2c 	bl	8000b88 <__aeabi_d2iz>
 8010330:	2800      	cmp	r0, #0
 8010332:	f000 8088 	beq.w	8010446 <__kernel_cos+0x136>
 8010336:	4632      	mov	r2, r6
 8010338:	463b      	mov	r3, r7
 801033a:	4630      	mov	r0, r6
 801033c:	4639      	mov	r1, r7
 801033e:	f7f0 f973 	bl	8000628 <__aeabi_dmul>
 8010342:	4b51      	ldr	r3, [pc, #324]	; (8010488 <__kernel_cos+0x178>)
 8010344:	2200      	movs	r2, #0
 8010346:	4604      	mov	r4, r0
 8010348:	460d      	mov	r5, r1
 801034a:	f7f0 f96d 	bl	8000628 <__aeabi_dmul>
 801034e:	a340      	add	r3, pc, #256	; (adr r3, 8010450 <__kernel_cos+0x140>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	4682      	mov	sl, r0
 8010356:	468b      	mov	fp, r1
 8010358:	4620      	mov	r0, r4
 801035a:	4629      	mov	r1, r5
 801035c:	f7f0 f964 	bl	8000628 <__aeabi_dmul>
 8010360:	a33d      	add	r3, pc, #244	; (adr r3, 8010458 <__kernel_cos+0x148>)
 8010362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010366:	f7ef ffa9 	bl	80002bc <__adddf3>
 801036a:	4622      	mov	r2, r4
 801036c:	462b      	mov	r3, r5
 801036e:	f7f0 f95b 	bl	8000628 <__aeabi_dmul>
 8010372:	a33b      	add	r3, pc, #236	; (adr r3, 8010460 <__kernel_cos+0x150>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	f7ef ff9e 	bl	80002b8 <__aeabi_dsub>
 801037c:	4622      	mov	r2, r4
 801037e:	462b      	mov	r3, r5
 8010380:	f7f0 f952 	bl	8000628 <__aeabi_dmul>
 8010384:	a338      	add	r3, pc, #224	; (adr r3, 8010468 <__kernel_cos+0x158>)
 8010386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038a:	f7ef ff97 	bl	80002bc <__adddf3>
 801038e:	4622      	mov	r2, r4
 8010390:	462b      	mov	r3, r5
 8010392:	f7f0 f949 	bl	8000628 <__aeabi_dmul>
 8010396:	a336      	add	r3, pc, #216	; (adr r3, 8010470 <__kernel_cos+0x160>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7ef ff8c 	bl	80002b8 <__aeabi_dsub>
 80103a0:	4622      	mov	r2, r4
 80103a2:	462b      	mov	r3, r5
 80103a4:	f7f0 f940 	bl	8000628 <__aeabi_dmul>
 80103a8:	a333      	add	r3, pc, #204	; (adr r3, 8010478 <__kernel_cos+0x168>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	f7ef ff85 	bl	80002bc <__adddf3>
 80103b2:	4622      	mov	r2, r4
 80103b4:	462b      	mov	r3, r5
 80103b6:	f7f0 f937 	bl	8000628 <__aeabi_dmul>
 80103ba:	4622      	mov	r2, r4
 80103bc:	462b      	mov	r3, r5
 80103be:	f7f0 f933 	bl	8000628 <__aeabi_dmul>
 80103c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103c6:	4604      	mov	r4, r0
 80103c8:	460d      	mov	r5, r1
 80103ca:	4630      	mov	r0, r6
 80103cc:	4639      	mov	r1, r7
 80103ce:	f7f0 f92b 	bl	8000628 <__aeabi_dmul>
 80103d2:	460b      	mov	r3, r1
 80103d4:	4602      	mov	r2, r0
 80103d6:	4629      	mov	r1, r5
 80103d8:	4620      	mov	r0, r4
 80103da:	f7ef ff6d 	bl	80002b8 <__aeabi_dsub>
 80103de:	4b2b      	ldr	r3, [pc, #172]	; (801048c <__kernel_cos+0x17c>)
 80103e0:	4598      	cmp	r8, r3
 80103e2:	4606      	mov	r6, r0
 80103e4:	460f      	mov	r7, r1
 80103e6:	dc10      	bgt.n	801040a <__kernel_cos+0xfa>
 80103e8:	4602      	mov	r2, r0
 80103ea:	460b      	mov	r3, r1
 80103ec:	4650      	mov	r0, sl
 80103ee:	4659      	mov	r1, fp
 80103f0:	f7ef ff62 	bl	80002b8 <__aeabi_dsub>
 80103f4:	460b      	mov	r3, r1
 80103f6:	4926      	ldr	r1, [pc, #152]	; (8010490 <__kernel_cos+0x180>)
 80103f8:	4602      	mov	r2, r0
 80103fa:	2000      	movs	r0, #0
 80103fc:	f7ef ff5c 	bl	80002b8 <__aeabi_dsub>
 8010400:	ec41 0b10 	vmov	d0, r0, r1
 8010404:	b003      	add	sp, #12
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040a:	4b22      	ldr	r3, [pc, #136]	; (8010494 <__kernel_cos+0x184>)
 801040c:	4920      	ldr	r1, [pc, #128]	; (8010490 <__kernel_cos+0x180>)
 801040e:	4598      	cmp	r8, r3
 8010410:	bfcc      	ite	gt
 8010412:	4d21      	ldrgt	r5, [pc, #132]	; (8010498 <__kernel_cos+0x188>)
 8010414:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010418:	2400      	movs	r4, #0
 801041a:	4622      	mov	r2, r4
 801041c:	462b      	mov	r3, r5
 801041e:	2000      	movs	r0, #0
 8010420:	f7ef ff4a 	bl	80002b8 <__aeabi_dsub>
 8010424:	4622      	mov	r2, r4
 8010426:	4680      	mov	r8, r0
 8010428:	4689      	mov	r9, r1
 801042a:	462b      	mov	r3, r5
 801042c:	4650      	mov	r0, sl
 801042e:	4659      	mov	r1, fp
 8010430:	f7ef ff42 	bl	80002b8 <__aeabi_dsub>
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	f7ef ff3e 	bl	80002b8 <__aeabi_dsub>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4640      	mov	r0, r8
 8010442:	4649      	mov	r1, r9
 8010444:	e7da      	b.n	80103fc <__kernel_cos+0xec>
 8010446:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010480 <__kernel_cos+0x170>
 801044a:	e7db      	b.n	8010404 <__kernel_cos+0xf4>
 801044c:	f3af 8000 	nop.w
 8010450:	be8838d4 	.word	0xbe8838d4
 8010454:	bda8fae9 	.word	0xbda8fae9
 8010458:	bdb4b1c4 	.word	0xbdb4b1c4
 801045c:	3e21ee9e 	.word	0x3e21ee9e
 8010460:	809c52ad 	.word	0x809c52ad
 8010464:	3e927e4f 	.word	0x3e927e4f
 8010468:	19cb1590 	.word	0x19cb1590
 801046c:	3efa01a0 	.word	0x3efa01a0
 8010470:	16c15177 	.word	0x16c15177
 8010474:	3f56c16c 	.word	0x3f56c16c
 8010478:	5555554c 	.word	0x5555554c
 801047c:	3fa55555 	.word	0x3fa55555
 8010480:	00000000 	.word	0x00000000
 8010484:	3ff00000 	.word	0x3ff00000
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	3fd33332 	.word	0x3fd33332
 8010490:	3ff00000 	.word	0x3ff00000
 8010494:	3fe90000 	.word	0x3fe90000
 8010498:	3fd20000 	.word	0x3fd20000
 801049c:	00000000 	.word	0x00000000

080104a0 <__kernel_sin>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	ed2d 8b04 	vpush	{d8-d9}
 80104a8:	eeb0 8a41 	vmov.f32	s16, s2
 80104ac:	eef0 8a61 	vmov.f32	s17, s3
 80104b0:	ec55 4b10 	vmov	r4, r5, d0
 80104b4:	b083      	sub	sp, #12
 80104b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80104be:	9001      	str	r0, [sp, #4]
 80104c0:	da06      	bge.n	80104d0 <__kernel_sin+0x30>
 80104c2:	ee10 0a10 	vmov	r0, s0
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7f0 fb5e 	bl	8000b88 <__aeabi_d2iz>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d051      	beq.n	8010574 <__kernel_sin+0xd4>
 80104d0:	4622      	mov	r2, r4
 80104d2:	462b      	mov	r3, r5
 80104d4:	4620      	mov	r0, r4
 80104d6:	4629      	mov	r1, r5
 80104d8:	f7f0 f8a6 	bl	8000628 <__aeabi_dmul>
 80104dc:	4682      	mov	sl, r0
 80104de:	468b      	mov	fp, r1
 80104e0:	4602      	mov	r2, r0
 80104e2:	460b      	mov	r3, r1
 80104e4:	4620      	mov	r0, r4
 80104e6:	4629      	mov	r1, r5
 80104e8:	f7f0 f89e 	bl	8000628 <__aeabi_dmul>
 80104ec:	a341      	add	r3, pc, #260	; (adr r3, 80105f4 <__kernel_sin+0x154>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	4680      	mov	r8, r0
 80104f4:	4689      	mov	r9, r1
 80104f6:	4650      	mov	r0, sl
 80104f8:	4659      	mov	r1, fp
 80104fa:	f7f0 f895 	bl	8000628 <__aeabi_dmul>
 80104fe:	a33f      	add	r3, pc, #252	; (adr r3, 80105fc <__kernel_sin+0x15c>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	f7ef fed8 	bl	80002b8 <__aeabi_dsub>
 8010508:	4652      	mov	r2, sl
 801050a:	465b      	mov	r3, fp
 801050c:	f7f0 f88c 	bl	8000628 <__aeabi_dmul>
 8010510:	a33c      	add	r3, pc, #240	; (adr r3, 8010604 <__kernel_sin+0x164>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef fed1 	bl	80002bc <__adddf3>
 801051a:	4652      	mov	r2, sl
 801051c:	465b      	mov	r3, fp
 801051e:	f7f0 f883 	bl	8000628 <__aeabi_dmul>
 8010522:	a33a      	add	r3, pc, #232	; (adr r3, 801060c <__kernel_sin+0x16c>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7ef fec6 	bl	80002b8 <__aeabi_dsub>
 801052c:	4652      	mov	r2, sl
 801052e:	465b      	mov	r3, fp
 8010530:	f7f0 f87a 	bl	8000628 <__aeabi_dmul>
 8010534:	a337      	add	r3, pc, #220	; (adr r3, 8010614 <__kernel_sin+0x174>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	f7ef febf 	bl	80002bc <__adddf3>
 801053e:	9b01      	ldr	r3, [sp, #4]
 8010540:	4606      	mov	r6, r0
 8010542:	460f      	mov	r7, r1
 8010544:	b9eb      	cbnz	r3, 8010582 <__kernel_sin+0xe2>
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	4650      	mov	r0, sl
 801054c:	4659      	mov	r1, fp
 801054e:	f7f0 f86b 	bl	8000628 <__aeabi_dmul>
 8010552:	a325      	add	r3, pc, #148	; (adr r3, 80105e8 <__kernel_sin+0x148>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	f7ef feae 	bl	80002b8 <__aeabi_dsub>
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	f7f0 f862 	bl	8000628 <__aeabi_dmul>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	4620      	mov	r0, r4
 801056a:	4629      	mov	r1, r5
 801056c:	f7ef fea6 	bl	80002bc <__adddf3>
 8010570:	4604      	mov	r4, r0
 8010572:	460d      	mov	r5, r1
 8010574:	ec45 4b10 	vmov	d0, r4, r5
 8010578:	b003      	add	sp, #12
 801057a:	ecbd 8b04 	vpop	{d8-d9}
 801057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010582:	4b1b      	ldr	r3, [pc, #108]	; (80105f0 <__kernel_sin+0x150>)
 8010584:	ec51 0b18 	vmov	r0, r1, d8
 8010588:	2200      	movs	r2, #0
 801058a:	f7f0 f84d 	bl	8000628 <__aeabi_dmul>
 801058e:	4632      	mov	r2, r6
 8010590:	ec41 0b19 	vmov	d9, r0, r1
 8010594:	463b      	mov	r3, r7
 8010596:	4640      	mov	r0, r8
 8010598:	4649      	mov	r1, r9
 801059a:	f7f0 f845 	bl	8000628 <__aeabi_dmul>
 801059e:	4602      	mov	r2, r0
 80105a0:	460b      	mov	r3, r1
 80105a2:	ec51 0b19 	vmov	r0, r1, d9
 80105a6:	f7ef fe87 	bl	80002b8 <__aeabi_dsub>
 80105aa:	4652      	mov	r2, sl
 80105ac:	465b      	mov	r3, fp
 80105ae:	f7f0 f83b 	bl	8000628 <__aeabi_dmul>
 80105b2:	ec53 2b18 	vmov	r2, r3, d8
 80105b6:	f7ef fe7f 	bl	80002b8 <__aeabi_dsub>
 80105ba:	a30b      	add	r3, pc, #44	; (adr r3, 80105e8 <__kernel_sin+0x148>)
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	4606      	mov	r6, r0
 80105c2:	460f      	mov	r7, r1
 80105c4:	4640      	mov	r0, r8
 80105c6:	4649      	mov	r1, r9
 80105c8:	f7f0 f82e 	bl	8000628 <__aeabi_dmul>
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	4630      	mov	r0, r6
 80105d2:	4639      	mov	r1, r7
 80105d4:	f7ef fe72 	bl	80002bc <__adddf3>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7ef fe6a 	bl	80002b8 <__aeabi_dsub>
 80105e4:	e7c4      	b.n	8010570 <__kernel_sin+0xd0>
 80105e6:	bf00      	nop
 80105e8:	55555549 	.word	0x55555549
 80105ec:	3fc55555 	.word	0x3fc55555
 80105f0:	3fe00000 	.word	0x3fe00000
 80105f4:	5acfd57c 	.word	0x5acfd57c
 80105f8:	3de5d93a 	.word	0x3de5d93a
 80105fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8010600:	3e5ae5e6 	.word	0x3e5ae5e6
 8010604:	57b1fe7d 	.word	0x57b1fe7d
 8010608:	3ec71de3 	.word	0x3ec71de3
 801060c:	19c161d5 	.word	0x19c161d5
 8010610:	3f2a01a0 	.word	0x3f2a01a0
 8010614:	1110f8a6 	.word	0x1110f8a6
 8010618:	3f811111 	.word	0x3f811111
 801061c:	00000000 	.word	0x00000000

08010620 <__ieee754_rem_pio2>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	ed2d 8b02 	vpush	{d8}
 8010628:	ec55 4b10 	vmov	r4, r5, d0
 801062c:	4bca      	ldr	r3, [pc, #808]	; (8010958 <__ieee754_rem_pio2+0x338>)
 801062e:	b08b      	sub	sp, #44	; 0x2c
 8010630:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010634:	4598      	cmp	r8, r3
 8010636:	4682      	mov	sl, r0
 8010638:	9502      	str	r5, [sp, #8]
 801063a:	dc08      	bgt.n	801064e <__ieee754_rem_pio2+0x2e>
 801063c:	2200      	movs	r2, #0
 801063e:	2300      	movs	r3, #0
 8010640:	ed80 0b00 	vstr	d0, [r0]
 8010644:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010648:	f04f 0b00 	mov.w	fp, #0
 801064c:	e028      	b.n	80106a0 <__ieee754_rem_pio2+0x80>
 801064e:	4bc3      	ldr	r3, [pc, #780]	; (801095c <__ieee754_rem_pio2+0x33c>)
 8010650:	4598      	cmp	r8, r3
 8010652:	dc78      	bgt.n	8010746 <__ieee754_rem_pio2+0x126>
 8010654:	9b02      	ldr	r3, [sp, #8]
 8010656:	4ec2      	ldr	r6, [pc, #776]	; (8010960 <__ieee754_rem_pio2+0x340>)
 8010658:	2b00      	cmp	r3, #0
 801065a:	ee10 0a10 	vmov	r0, s0
 801065e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010920 <__ieee754_rem_pio2+0x300>)
 8010660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010664:	4629      	mov	r1, r5
 8010666:	dd39      	ble.n	80106dc <__ieee754_rem_pio2+0xbc>
 8010668:	f7ef fe26 	bl	80002b8 <__aeabi_dsub>
 801066c:	45b0      	cmp	r8, r6
 801066e:	4604      	mov	r4, r0
 8010670:	460d      	mov	r5, r1
 8010672:	d01b      	beq.n	80106ac <__ieee754_rem_pio2+0x8c>
 8010674:	a3ac      	add	r3, pc, #688	; (adr r3, 8010928 <__ieee754_rem_pio2+0x308>)
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f7ef fe1d 	bl	80002b8 <__aeabi_dsub>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	e9ca 2300 	strd	r2, r3, [sl]
 8010686:	4620      	mov	r0, r4
 8010688:	4629      	mov	r1, r5
 801068a:	f7ef fe15 	bl	80002b8 <__aeabi_dsub>
 801068e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010928 <__ieee754_rem_pio2+0x308>)
 8010690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010694:	f7ef fe10 	bl	80002b8 <__aeabi_dsub>
 8010698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801069c:	f04f 0b01 	mov.w	fp, #1
 80106a0:	4658      	mov	r0, fp
 80106a2:	b00b      	add	sp, #44	; 0x2c
 80106a4:	ecbd 8b02 	vpop	{d8}
 80106a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8010930 <__ieee754_rem_pio2+0x310>)
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	f7ef fe01 	bl	80002b8 <__aeabi_dsub>
 80106b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010938 <__ieee754_rem_pio2+0x318>)
 80106b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106bc:	4604      	mov	r4, r0
 80106be:	460d      	mov	r5, r1
 80106c0:	f7ef fdfa 	bl	80002b8 <__aeabi_dsub>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	e9ca 2300 	strd	r2, r3, [sl]
 80106cc:	4620      	mov	r0, r4
 80106ce:	4629      	mov	r1, r5
 80106d0:	f7ef fdf2 	bl	80002b8 <__aeabi_dsub>
 80106d4:	a398      	add	r3, pc, #608	; (adr r3, 8010938 <__ieee754_rem_pio2+0x318>)
 80106d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106da:	e7db      	b.n	8010694 <__ieee754_rem_pio2+0x74>
 80106dc:	f7ef fdee 	bl	80002bc <__adddf3>
 80106e0:	45b0      	cmp	r8, r6
 80106e2:	4604      	mov	r4, r0
 80106e4:	460d      	mov	r5, r1
 80106e6:	d016      	beq.n	8010716 <__ieee754_rem_pio2+0xf6>
 80106e8:	a38f      	add	r3, pc, #572	; (adr r3, 8010928 <__ieee754_rem_pio2+0x308>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7ef fde5 	bl	80002bc <__adddf3>
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	e9ca 2300 	strd	r2, r3, [sl]
 80106fa:	4620      	mov	r0, r4
 80106fc:	4629      	mov	r1, r5
 80106fe:	f7ef fddb 	bl	80002b8 <__aeabi_dsub>
 8010702:	a389      	add	r3, pc, #548	; (adr r3, 8010928 <__ieee754_rem_pio2+0x308>)
 8010704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010708:	f7ef fdd8 	bl	80002bc <__adddf3>
 801070c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8010710:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010714:	e7c4      	b.n	80106a0 <__ieee754_rem_pio2+0x80>
 8010716:	a386      	add	r3, pc, #536	; (adr r3, 8010930 <__ieee754_rem_pio2+0x310>)
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	f7ef fdce 	bl	80002bc <__adddf3>
 8010720:	a385      	add	r3, pc, #532	; (adr r3, 8010938 <__ieee754_rem_pio2+0x318>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	4604      	mov	r4, r0
 8010728:	460d      	mov	r5, r1
 801072a:	f7ef fdc7 	bl	80002bc <__adddf3>
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	e9ca 2300 	strd	r2, r3, [sl]
 8010736:	4620      	mov	r0, r4
 8010738:	4629      	mov	r1, r5
 801073a:	f7ef fdbd 	bl	80002b8 <__aeabi_dsub>
 801073e:	a37e      	add	r3, pc, #504	; (adr r3, 8010938 <__ieee754_rem_pio2+0x318>)
 8010740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010744:	e7e0      	b.n	8010708 <__ieee754_rem_pio2+0xe8>
 8010746:	4b87      	ldr	r3, [pc, #540]	; (8010964 <__ieee754_rem_pio2+0x344>)
 8010748:	4598      	cmp	r8, r3
 801074a:	f300 80d8 	bgt.w	80108fe <__ieee754_rem_pio2+0x2de>
 801074e:	f000 f96d 	bl	8010a2c <fabs>
 8010752:	ec55 4b10 	vmov	r4, r5, d0
 8010756:	ee10 0a10 	vmov	r0, s0
 801075a:	a379      	add	r3, pc, #484	; (adr r3, 8010940 <__ieee754_rem_pio2+0x320>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	4629      	mov	r1, r5
 8010762:	f7ef ff61 	bl	8000628 <__aeabi_dmul>
 8010766:	4b80      	ldr	r3, [pc, #512]	; (8010968 <__ieee754_rem_pio2+0x348>)
 8010768:	2200      	movs	r2, #0
 801076a:	f7ef fda7 	bl	80002bc <__adddf3>
 801076e:	f7f0 fa0b 	bl	8000b88 <__aeabi_d2iz>
 8010772:	4683      	mov	fp, r0
 8010774:	f7ef feee 	bl	8000554 <__aeabi_i2d>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	ec43 2b18 	vmov	d8, r2, r3
 8010780:	a367      	add	r3, pc, #412	; (adr r3, 8010920 <__ieee754_rem_pio2+0x300>)
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	f7ef ff4f 	bl	8000628 <__aeabi_dmul>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7ef fd91 	bl	80002b8 <__aeabi_dsub>
 8010796:	a364      	add	r3, pc, #400	; (adr r3, 8010928 <__ieee754_rem_pio2+0x308>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	4606      	mov	r6, r0
 801079e:	460f      	mov	r7, r1
 80107a0:	ec51 0b18 	vmov	r0, r1, d8
 80107a4:	f7ef ff40 	bl	8000628 <__aeabi_dmul>
 80107a8:	f1bb 0f1f 	cmp.w	fp, #31
 80107ac:	4604      	mov	r4, r0
 80107ae:	460d      	mov	r5, r1
 80107b0:	dc0d      	bgt.n	80107ce <__ieee754_rem_pio2+0x1ae>
 80107b2:	4b6e      	ldr	r3, [pc, #440]	; (801096c <__ieee754_rem_pio2+0x34c>)
 80107b4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80107b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107bc:	4543      	cmp	r3, r8
 80107be:	d006      	beq.n	80107ce <__ieee754_rem_pio2+0x1ae>
 80107c0:	4622      	mov	r2, r4
 80107c2:	462b      	mov	r3, r5
 80107c4:	4630      	mov	r0, r6
 80107c6:	4639      	mov	r1, r7
 80107c8:	f7ef fd76 	bl	80002b8 <__aeabi_dsub>
 80107cc:	e00e      	b.n	80107ec <__ieee754_rem_pio2+0x1cc>
 80107ce:	462b      	mov	r3, r5
 80107d0:	4622      	mov	r2, r4
 80107d2:	4630      	mov	r0, r6
 80107d4:	4639      	mov	r1, r7
 80107d6:	f7ef fd6f 	bl	80002b8 <__aeabi_dsub>
 80107da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80107de:	9303      	str	r3, [sp, #12]
 80107e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80107e4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80107e8:	2b10      	cmp	r3, #16
 80107ea:	dc02      	bgt.n	80107f2 <__ieee754_rem_pio2+0x1d2>
 80107ec:	e9ca 0100 	strd	r0, r1, [sl]
 80107f0:	e039      	b.n	8010866 <__ieee754_rem_pio2+0x246>
 80107f2:	a34f      	add	r3, pc, #316	; (adr r3, 8010930 <__ieee754_rem_pio2+0x310>)
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	ec51 0b18 	vmov	r0, r1, d8
 80107fc:	f7ef ff14 	bl	8000628 <__aeabi_dmul>
 8010800:	4604      	mov	r4, r0
 8010802:	460d      	mov	r5, r1
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	4630      	mov	r0, r6
 801080a:	4639      	mov	r1, r7
 801080c:	f7ef fd54 	bl	80002b8 <__aeabi_dsub>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4680      	mov	r8, r0
 8010816:	4689      	mov	r9, r1
 8010818:	4630      	mov	r0, r6
 801081a:	4639      	mov	r1, r7
 801081c:	f7ef fd4c 	bl	80002b8 <__aeabi_dsub>
 8010820:	4622      	mov	r2, r4
 8010822:	462b      	mov	r3, r5
 8010824:	f7ef fd48 	bl	80002b8 <__aeabi_dsub>
 8010828:	a343      	add	r3, pc, #268	; (adr r3, 8010938 <__ieee754_rem_pio2+0x318>)
 801082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082e:	4604      	mov	r4, r0
 8010830:	460d      	mov	r5, r1
 8010832:	ec51 0b18 	vmov	r0, r1, d8
 8010836:	f7ef fef7 	bl	8000628 <__aeabi_dmul>
 801083a:	4622      	mov	r2, r4
 801083c:	462b      	mov	r3, r5
 801083e:	f7ef fd3b 	bl	80002b8 <__aeabi_dsub>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4604      	mov	r4, r0
 8010848:	460d      	mov	r5, r1
 801084a:	4640      	mov	r0, r8
 801084c:	4649      	mov	r1, r9
 801084e:	f7ef fd33 	bl	80002b8 <__aeabi_dsub>
 8010852:	9a03      	ldr	r2, [sp, #12]
 8010854:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	2b31      	cmp	r3, #49	; 0x31
 801085c:	dc24      	bgt.n	80108a8 <__ieee754_rem_pio2+0x288>
 801085e:	e9ca 0100 	strd	r0, r1, [sl]
 8010862:	4646      	mov	r6, r8
 8010864:	464f      	mov	r7, r9
 8010866:	e9da 8900 	ldrd	r8, r9, [sl]
 801086a:	4630      	mov	r0, r6
 801086c:	4642      	mov	r2, r8
 801086e:	464b      	mov	r3, r9
 8010870:	4639      	mov	r1, r7
 8010872:	f7ef fd21 	bl	80002b8 <__aeabi_dsub>
 8010876:	462b      	mov	r3, r5
 8010878:	4622      	mov	r2, r4
 801087a:	f7ef fd1d 	bl	80002b8 <__aeabi_dsub>
 801087e:	9b02      	ldr	r3, [sp, #8]
 8010880:	2b00      	cmp	r3, #0
 8010882:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010886:	f6bf af0b 	bge.w	80106a0 <__ieee754_rem_pio2+0x80>
 801088a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801088e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010896:	f8ca 8000 	str.w	r8, [sl]
 801089a:	f8ca 0008 	str.w	r0, [sl, #8]
 801089e:	f8ca 300c 	str.w	r3, [sl, #12]
 80108a2:	f1cb 0b00 	rsb	fp, fp, #0
 80108a6:	e6fb      	b.n	80106a0 <__ieee754_rem_pio2+0x80>
 80108a8:	a327      	add	r3, pc, #156	; (adr r3, 8010948 <__ieee754_rem_pio2+0x328>)
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	ec51 0b18 	vmov	r0, r1, d8
 80108b2:	f7ef feb9 	bl	8000628 <__aeabi_dmul>
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	4640      	mov	r0, r8
 80108c0:	4649      	mov	r1, r9
 80108c2:	f7ef fcf9 	bl	80002b8 <__aeabi_dsub>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4606      	mov	r6, r0
 80108cc:	460f      	mov	r7, r1
 80108ce:	4640      	mov	r0, r8
 80108d0:	4649      	mov	r1, r9
 80108d2:	f7ef fcf1 	bl	80002b8 <__aeabi_dsub>
 80108d6:	4622      	mov	r2, r4
 80108d8:	462b      	mov	r3, r5
 80108da:	f7ef fced 	bl	80002b8 <__aeabi_dsub>
 80108de:	a31c      	add	r3, pc, #112	; (adr r3, 8010950 <__ieee754_rem_pio2+0x330>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	4604      	mov	r4, r0
 80108e6:	460d      	mov	r5, r1
 80108e8:	ec51 0b18 	vmov	r0, r1, d8
 80108ec:	f7ef fe9c 	bl	8000628 <__aeabi_dmul>
 80108f0:	4622      	mov	r2, r4
 80108f2:	462b      	mov	r3, r5
 80108f4:	f7ef fce0 	bl	80002b8 <__aeabi_dsub>
 80108f8:	4604      	mov	r4, r0
 80108fa:	460d      	mov	r5, r1
 80108fc:	e760      	b.n	80107c0 <__ieee754_rem_pio2+0x1a0>
 80108fe:	4b1c      	ldr	r3, [pc, #112]	; (8010970 <__ieee754_rem_pio2+0x350>)
 8010900:	4598      	cmp	r8, r3
 8010902:	dd37      	ble.n	8010974 <__ieee754_rem_pio2+0x354>
 8010904:	ee10 2a10 	vmov	r2, s0
 8010908:	462b      	mov	r3, r5
 801090a:	4620      	mov	r0, r4
 801090c:	4629      	mov	r1, r5
 801090e:	f7ef fcd3 	bl	80002b8 <__aeabi_dsub>
 8010912:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010916:	e9ca 0100 	strd	r0, r1, [sl]
 801091a:	e695      	b.n	8010648 <__ieee754_rem_pio2+0x28>
 801091c:	f3af 8000 	nop.w
 8010920:	54400000 	.word	0x54400000
 8010924:	3ff921fb 	.word	0x3ff921fb
 8010928:	1a626331 	.word	0x1a626331
 801092c:	3dd0b461 	.word	0x3dd0b461
 8010930:	1a600000 	.word	0x1a600000
 8010934:	3dd0b461 	.word	0x3dd0b461
 8010938:	2e037073 	.word	0x2e037073
 801093c:	3ba3198a 	.word	0x3ba3198a
 8010940:	6dc9c883 	.word	0x6dc9c883
 8010944:	3fe45f30 	.word	0x3fe45f30
 8010948:	2e000000 	.word	0x2e000000
 801094c:	3ba3198a 	.word	0x3ba3198a
 8010950:	252049c1 	.word	0x252049c1
 8010954:	397b839a 	.word	0x397b839a
 8010958:	3fe921fb 	.word	0x3fe921fb
 801095c:	4002d97b 	.word	0x4002d97b
 8010960:	3ff921fb 	.word	0x3ff921fb
 8010964:	413921fb 	.word	0x413921fb
 8010968:	3fe00000 	.word	0x3fe00000
 801096c:	08011994 	.word	0x08011994
 8010970:	7fefffff 	.word	0x7fefffff
 8010974:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010978:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801097c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010980:	4620      	mov	r0, r4
 8010982:	460d      	mov	r5, r1
 8010984:	f7f0 f900 	bl	8000b88 <__aeabi_d2iz>
 8010988:	f7ef fde4 	bl	8000554 <__aeabi_i2d>
 801098c:	4602      	mov	r2, r0
 801098e:	460b      	mov	r3, r1
 8010990:	4620      	mov	r0, r4
 8010992:	4629      	mov	r1, r5
 8010994:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010998:	f7ef fc8e 	bl	80002b8 <__aeabi_dsub>
 801099c:	4b21      	ldr	r3, [pc, #132]	; (8010a24 <__ieee754_rem_pio2+0x404>)
 801099e:	2200      	movs	r2, #0
 80109a0:	f7ef fe42 	bl	8000628 <__aeabi_dmul>
 80109a4:	460d      	mov	r5, r1
 80109a6:	4604      	mov	r4, r0
 80109a8:	f7f0 f8ee 	bl	8000b88 <__aeabi_d2iz>
 80109ac:	f7ef fdd2 	bl	8000554 <__aeabi_i2d>
 80109b0:	4602      	mov	r2, r0
 80109b2:	460b      	mov	r3, r1
 80109b4:	4620      	mov	r0, r4
 80109b6:	4629      	mov	r1, r5
 80109b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80109bc:	f7ef fc7c 	bl	80002b8 <__aeabi_dsub>
 80109c0:	4b18      	ldr	r3, [pc, #96]	; (8010a24 <__ieee754_rem_pio2+0x404>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	f7ef fe30 	bl	8000628 <__aeabi_dmul>
 80109c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80109d0:	2703      	movs	r7, #3
 80109d2:	2400      	movs	r4, #0
 80109d4:	2500      	movs	r5, #0
 80109d6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80109da:	4622      	mov	r2, r4
 80109dc:	462b      	mov	r3, r5
 80109de:	46b9      	mov	r9, r7
 80109e0:	3f01      	subs	r7, #1
 80109e2:	f7f0 f889 	bl	8000af8 <__aeabi_dcmpeq>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d1f5      	bne.n	80109d6 <__ieee754_rem_pio2+0x3b6>
 80109ea:	4b0f      	ldr	r3, [pc, #60]	; (8010a28 <__ieee754_rem_pio2+0x408>)
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	2302      	movs	r3, #2
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	4632      	mov	r2, r6
 80109f4:	464b      	mov	r3, r9
 80109f6:	4651      	mov	r1, sl
 80109f8:	a804      	add	r0, sp, #16
 80109fa:	f000 f821 	bl	8010a40 <__kernel_rem_pio2>
 80109fe:	9b02      	ldr	r3, [sp, #8]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	4683      	mov	fp, r0
 8010a04:	f6bf ae4c 	bge.w	80106a0 <__ieee754_rem_pio2+0x80>
 8010a08:	e9da 2100 	ldrd	r2, r1, [sl]
 8010a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a10:	e9ca 2300 	strd	r2, r3, [sl]
 8010a14:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010a18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a1c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010a20:	e73f      	b.n	80108a2 <__ieee754_rem_pio2+0x282>
 8010a22:	bf00      	nop
 8010a24:	41700000 	.word	0x41700000
 8010a28:	08011a14 	.word	0x08011a14

08010a2c <fabs>:
 8010a2c:	ec51 0b10 	vmov	r0, r1, d0
 8010a30:	ee10 2a10 	vmov	r2, s0
 8010a34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a38:	ec43 2b10 	vmov	d0, r2, r3
 8010a3c:	4770      	bx	lr
	...

08010a40 <__kernel_rem_pio2>:
 8010a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a44:	ed2d 8b02 	vpush	{d8}
 8010a48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010a4c:	f112 0f14 	cmn.w	r2, #20
 8010a50:	9306      	str	r3, [sp, #24]
 8010a52:	9104      	str	r1, [sp, #16]
 8010a54:	4bc2      	ldr	r3, [pc, #776]	; (8010d60 <__kernel_rem_pio2+0x320>)
 8010a56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010a58:	9009      	str	r0, [sp, #36]	; 0x24
 8010a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	9b06      	ldr	r3, [sp, #24]
 8010a62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010a66:	bfa8      	it	ge
 8010a68:	1ed4      	subge	r4, r2, #3
 8010a6a:	9305      	str	r3, [sp, #20]
 8010a6c:	bfb2      	itee	lt
 8010a6e:	2400      	movlt	r4, #0
 8010a70:	2318      	movge	r3, #24
 8010a72:	fb94 f4f3 	sdivge	r4, r4, r3
 8010a76:	f06f 0317 	mvn.w	r3, #23
 8010a7a:	fb04 3303 	mla	r3, r4, r3, r3
 8010a7e:	eb03 0a02 	add.w	sl, r3, r2
 8010a82:	9b00      	ldr	r3, [sp, #0]
 8010a84:	9a05      	ldr	r2, [sp, #20]
 8010a86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010d50 <__kernel_rem_pio2+0x310>
 8010a8a:	eb03 0802 	add.w	r8, r3, r2
 8010a8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010a90:	1aa7      	subs	r7, r4, r2
 8010a92:	ae20      	add	r6, sp, #128	; 0x80
 8010a94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010a98:	2500      	movs	r5, #0
 8010a9a:	4545      	cmp	r5, r8
 8010a9c:	dd13      	ble.n	8010ac6 <__kernel_rem_pio2+0x86>
 8010a9e:	9b06      	ldr	r3, [sp, #24]
 8010aa0:	aa20      	add	r2, sp, #128	; 0x80
 8010aa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010aa6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010aaa:	f04f 0800 	mov.w	r8, #0
 8010aae:	9b00      	ldr	r3, [sp, #0]
 8010ab0:	4598      	cmp	r8, r3
 8010ab2:	dc31      	bgt.n	8010b18 <__kernel_rem_pio2+0xd8>
 8010ab4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010d50 <__kernel_rem_pio2+0x310>
 8010ab8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ac0:	462f      	mov	r7, r5
 8010ac2:	2600      	movs	r6, #0
 8010ac4:	e01b      	b.n	8010afe <__kernel_rem_pio2+0xbe>
 8010ac6:	42ef      	cmn	r7, r5
 8010ac8:	d407      	bmi.n	8010ada <__kernel_rem_pio2+0x9a>
 8010aca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010ace:	f7ef fd41 	bl	8000554 <__aeabi_i2d>
 8010ad2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010ad6:	3501      	adds	r5, #1
 8010ad8:	e7df      	b.n	8010a9a <__kernel_rem_pio2+0x5a>
 8010ada:	ec51 0b18 	vmov	r0, r1, d8
 8010ade:	e7f8      	b.n	8010ad2 <__kernel_rem_pio2+0x92>
 8010ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ae4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010ae8:	f7ef fd9e 	bl	8000628 <__aeabi_dmul>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010af4:	f7ef fbe2 	bl	80002bc <__adddf3>
 8010af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010afc:	3601      	adds	r6, #1
 8010afe:	9b05      	ldr	r3, [sp, #20]
 8010b00:	429e      	cmp	r6, r3
 8010b02:	f1a7 0708 	sub.w	r7, r7, #8
 8010b06:	ddeb      	ble.n	8010ae0 <__kernel_rem_pio2+0xa0>
 8010b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b0c:	f108 0801 	add.w	r8, r8, #1
 8010b10:	ecab 7b02 	vstmia	fp!, {d7}
 8010b14:	3508      	adds	r5, #8
 8010b16:	e7ca      	b.n	8010aae <__kernel_rem_pio2+0x6e>
 8010b18:	9b00      	ldr	r3, [sp, #0]
 8010b1a:	aa0c      	add	r2, sp, #48	; 0x30
 8010b1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b22:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010b24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010b28:	9c00      	ldr	r4, [sp, #0]
 8010b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b2c:	00e3      	lsls	r3, r4, #3
 8010b2e:	9308      	str	r3, [sp, #32]
 8010b30:	ab98      	add	r3, sp, #608	; 0x260
 8010b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010b3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010b3e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010b40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010b44:	46c3      	mov	fp, r8
 8010b46:	46a1      	mov	r9, r4
 8010b48:	f1b9 0f00 	cmp.w	r9, #0
 8010b4c:	f1a5 0508 	sub.w	r5, r5, #8
 8010b50:	dc77      	bgt.n	8010c42 <__kernel_rem_pio2+0x202>
 8010b52:	ec47 6b10 	vmov	d0, r6, r7
 8010b56:	4650      	mov	r0, sl
 8010b58:	f000 fac2 	bl	80110e0 <scalbn>
 8010b5c:	ec57 6b10 	vmov	r6, r7, d0
 8010b60:	2200      	movs	r2, #0
 8010b62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b66:	ee10 0a10 	vmov	r0, s0
 8010b6a:	4639      	mov	r1, r7
 8010b6c:	f7ef fd5c 	bl	8000628 <__aeabi_dmul>
 8010b70:	ec41 0b10 	vmov	d0, r0, r1
 8010b74:	f000 fb34 	bl	80111e0 <floor>
 8010b78:	4b7a      	ldr	r3, [pc, #488]	; (8010d64 <__kernel_rem_pio2+0x324>)
 8010b7a:	ec51 0b10 	vmov	r0, r1, d0
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f7ef fd52 	bl	8000628 <__aeabi_dmul>
 8010b84:	4602      	mov	r2, r0
 8010b86:	460b      	mov	r3, r1
 8010b88:	4630      	mov	r0, r6
 8010b8a:	4639      	mov	r1, r7
 8010b8c:	f7ef fb94 	bl	80002b8 <__aeabi_dsub>
 8010b90:	460f      	mov	r7, r1
 8010b92:	4606      	mov	r6, r0
 8010b94:	f7ef fff8 	bl	8000b88 <__aeabi_d2iz>
 8010b98:	9002      	str	r0, [sp, #8]
 8010b9a:	f7ef fcdb 	bl	8000554 <__aeabi_i2d>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	f7ef fb87 	bl	80002b8 <__aeabi_dsub>
 8010baa:	f1ba 0f00 	cmp.w	sl, #0
 8010bae:	4606      	mov	r6, r0
 8010bb0:	460f      	mov	r7, r1
 8010bb2:	dd6d      	ble.n	8010c90 <__kernel_rem_pio2+0x250>
 8010bb4:	1e61      	subs	r1, r4, #1
 8010bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8010bb8:	9d02      	ldr	r5, [sp, #8]
 8010bba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bbe:	f1ca 0018 	rsb	r0, sl, #24
 8010bc2:	fa43 f200 	asr.w	r2, r3, r0
 8010bc6:	4415      	add	r5, r2
 8010bc8:	4082      	lsls	r2, r0
 8010bca:	1a9b      	subs	r3, r3, r2
 8010bcc:	aa0c      	add	r2, sp, #48	; 0x30
 8010bce:	9502      	str	r5, [sp, #8]
 8010bd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010bd4:	f1ca 0217 	rsb	r2, sl, #23
 8010bd8:	fa43 fb02 	asr.w	fp, r3, r2
 8010bdc:	f1bb 0f00 	cmp.w	fp, #0
 8010be0:	dd65      	ble.n	8010cae <__kernel_rem_pio2+0x26e>
 8010be2:	9b02      	ldr	r3, [sp, #8]
 8010be4:	2200      	movs	r2, #0
 8010be6:	3301      	adds	r3, #1
 8010be8:	9302      	str	r3, [sp, #8]
 8010bea:	4615      	mov	r5, r2
 8010bec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010bf0:	4294      	cmp	r4, r2
 8010bf2:	f300 809f 	bgt.w	8010d34 <__kernel_rem_pio2+0x2f4>
 8010bf6:	f1ba 0f00 	cmp.w	sl, #0
 8010bfa:	dd07      	ble.n	8010c0c <__kernel_rem_pio2+0x1cc>
 8010bfc:	f1ba 0f01 	cmp.w	sl, #1
 8010c00:	f000 80c1 	beq.w	8010d86 <__kernel_rem_pio2+0x346>
 8010c04:	f1ba 0f02 	cmp.w	sl, #2
 8010c08:	f000 80c7 	beq.w	8010d9a <__kernel_rem_pio2+0x35a>
 8010c0c:	f1bb 0f02 	cmp.w	fp, #2
 8010c10:	d14d      	bne.n	8010cae <__kernel_rem_pio2+0x26e>
 8010c12:	4632      	mov	r2, r6
 8010c14:	463b      	mov	r3, r7
 8010c16:	4954      	ldr	r1, [pc, #336]	; (8010d68 <__kernel_rem_pio2+0x328>)
 8010c18:	2000      	movs	r0, #0
 8010c1a:	f7ef fb4d 	bl	80002b8 <__aeabi_dsub>
 8010c1e:	4606      	mov	r6, r0
 8010c20:	460f      	mov	r7, r1
 8010c22:	2d00      	cmp	r5, #0
 8010c24:	d043      	beq.n	8010cae <__kernel_rem_pio2+0x26e>
 8010c26:	4650      	mov	r0, sl
 8010c28:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010d58 <__kernel_rem_pio2+0x318>
 8010c2c:	f000 fa58 	bl	80110e0 <scalbn>
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	ec53 2b10 	vmov	r2, r3, d0
 8010c38:	f7ef fb3e 	bl	80002b8 <__aeabi_dsub>
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	460f      	mov	r7, r1
 8010c40:	e035      	b.n	8010cae <__kernel_rem_pio2+0x26e>
 8010c42:	4b4a      	ldr	r3, [pc, #296]	; (8010d6c <__kernel_rem_pio2+0x32c>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	4630      	mov	r0, r6
 8010c48:	4639      	mov	r1, r7
 8010c4a:	f7ef fced 	bl	8000628 <__aeabi_dmul>
 8010c4e:	f7ef ff9b 	bl	8000b88 <__aeabi_d2iz>
 8010c52:	f7ef fc7f 	bl	8000554 <__aeabi_i2d>
 8010c56:	4602      	mov	r2, r0
 8010c58:	460b      	mov	r3, r1
 8010c5a:	ec43 2b18 	vmov	d8, r2, r3
 8010c5e:	4b44      	ldr	r3, [pc, #272]	; (8010d70 <__kernel_rem_pio2+0x330>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	f7ef fce1 	bl	8000628 <__aeabi_dmul>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	4639      	mov	r1, r7
 8010c6e:	f7ef fb23 	bl	80002b8 <__aeabi_dsub>
 8010c72:	f7ef ff89 	bl	8000b88 <__aeabi_d2iz>
 8010c76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c7a:	f84b 0b04 	str.w	r0, [fp], #4
 8010c7e:	ec51 0b18 	vmov	r0, r1, d8
 8010c82:	f7ef fb1b 	bl	80002bc <__adddf3>
 8010c86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010c8a:	4606      	mov	r6, r0
 8010c8c:	460f      	mov	r7, r1
 8010c8e:	e75b      	b.n	8010b48 <__kernel_rem_pio2+0x108>
 8010c90:	d106      	bne.n	8010ca0 <__kernel_rem_pio2+0x260>
 8010c92:	1e63      	subs	r3, r4, #1
 8010c94:	aa0c      	add	r2, sp, #48	; 0x30
 8010c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c9a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010c9e:	e79d      	b.n	8010bdc <__kernel_rem_pio2+0x19c>
 8010ca0:	4b34      	ldr	r3, [pc, #208]	; (8010d74 <__kernel_rem_pio2+0x334>)
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f7ef ff46 	bl	8000b34 <__aeabi_dcmpge>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d140      	bne.n	8010d2e <__kernel_rem_pio2+0x2ee>
 8010cac:	4683      	mov	fp, r0
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	4639      	mov	r1, r7
 8010cb6:	f7ef ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	f000 80c1 	beq.w	8010e42 <__kernel_rem_pio2+0x402>
 8010cc0:	1e65      	subs	r5, r4, #1
 8010cc2:	462b      	mov	r3, r5
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	9900      	ldr	r1, [sp, #0]
 8010cc8:	428b      	cmp	r3, r1
 8010cca:	da6d      	bge.n	8010da8 <__kernel_rem_pio2+0x368>
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	f000 808a 	beq.w	8010de6 <__kernel_rem_pio2+0x3a6>
 8010cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8010cd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8010cd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 80ae 	beq.w	8010e3e <__kernel_rem_pio2+0x3fe>
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010d58 <__kernel_rem_pio2+0x318>
 8010ce8:	f000 f9fa 	bl	80110e0 <scalbn>
 8010cec:	1c6b      	adds	r3, r5, #1
 8010cee:	00da      	lsls	r2, r3, #3
 8010cf0:	9205      	str	r2, [sp, #20]
 8010cf2:	ec57 6b10 	vmov	r6, r7, d0
 8010cf6:	aa70      	add	r2, sp, #448	; 0x1c0
 8010cf8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010d6c <__kernel_rem_pio2+0x32c>
 8010cfc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010d00:	462c      	mov	r4, r5
 8010d02:	f04f 0800 	mov.w	r8, #0
 8010d06:	2c00      	cmp	r4, #0
 8010d08:	f280 80d4 	bge.w	8010eb4 <__kernel_rem_pio2+0x474>
 8010d0c:	462c      	mov	r4, r5
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	f2c0 8102 	blt.w	8010f18 <__kernel_rem_pio2+0x4d8>
 8010d14:	4b18      	ldr	r3, [pc, #96]	; (8010d78 <__kernel_rem_pio2+0x338>)
 8010d16:	461e      	mov	r6, r3
 8010d18:	ab70      	add	r3, sp, #448	; 0x1c0
 8010d1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010d1e:	1b2b      	subs	r3, r5, r4
 8010d20:	f04f 0900 	mov.w	r9, #0
 8010d24:	f04f 0a00 	mov.w	sl, #0
 8010d28:	2700      	movs	r7, #0
 8010d2a:	9306      	str	r3, [sp, #24]
 8010d2c:	e0e6      	b.n	8010efc <__kernel_rem_pio2+0x4bc>
 8010d2e:	f04f 0b02 	mov.w	fp, #2
 8010d32:	e756      	b.n	8010be2 <__kernel_rem_pio2+0x1a2>
 8010d34:	f8d8 3000 	ldr.w	r3, [r8]
 8010d38:	bb05      	cbnz	r5, 8010d7c <__kernel_rem_pio2+0x33c>
 8010d3a:	b123      	cbz	r3, 8010d46 <__kernel_rem_pio2+0x306>
 8010d3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010d40:	f8c8 3000 	str.w	r3, [r8]
 8010d44:	2301      	movs	r3, #1
 8010d46:	3201      	adds	r2, #1
 8010d48:	f108 0804 	add.w	r8, r8, #4
 8010d4c:	461d      	mov	r5, r3
 8010d4e:	e74f      	b.n	8010bf0 <__kernel_rem_pio2+0x1b0>
	...
 8010d5c:	3ff00000 	.word	0x3ff00000
 8010d60:	08011b60 	.word	0x08011b60
 8010d64:	40200000 	.word	0x40200000
 8010d68:	3ff00000 	.word	0x3ff00000
 8010d6c:	3e700000 	.word	0x3e700000
 8010d70:	41700000 	.word	0x41700000
 8010d74:	3fe00000 	.word	0x3fe00000
 8010d78:	08011b20 	.word	0x08011b20
 8010d7c:	1acb      	subs	r3, r1, r3
 8010d7e:	f8c8 3000 	str.w	r3, [r8]
 8010d82:	462b      	mov	r3, r5
 8010d84:	e7df      	b.n	8010d46 <__kernel_rem_pio2+0x306>
 8010d86:	1e62      	subs	r2, r4, #1
 8010d88:	ab0c      	add	r3, sp, #48	; 0x30
 8010d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010d92:	a90c      	add	r1, sp, #48	; 0x30
 8010d94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010d98:	e738      	b.n	8010c0c <__kernel_rem_pio2+0x1cc>
 8010d9a:	1e62      	subs	r2, r4, #1
 8010d9c:	ab0c      	add	r3, sp, #48	; 0x30
 8010d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010da2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010da6:	e7f4      	b.n	8010d92 <__kernel_rem_pio2+0x352>
 8010da8:	a90c      	add	r1, sp, #48	; 0x30
 8010daa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	430a      	orrs	r2, r1
 8010db2:	e788      	b.n	8010cc6 <__kernel_rem_pio2+0x286>
 8010db4:	3301      	adds	r3, #1
 8010db6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010dba:	2900      	cmp	r1, #0
 8010dbc:	d0fa      	beq.n	8010db4 <__kernel_rem_pio2+0x374>
 8010dbe:	9a08      	ldr	r2, [sp, #32]
 8010dc0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010dc4:	446a      	add	r2, sp
 8010dc6:	3a98      	subs	r2, #152	; 0x98
 8010dc8:	9208      	str	r2, [sp, #32]
 8010dca:	9a06      	ldr	r2, [sp, #24]
 8010dcc:	a920      	add	r1, sp, #128	; 0x80
 8010dce:	18a2      	adds	r2, r4, r2
 8010dd0:	18e3      	adds	r3, r4, r3
 8010dd2:	f104 0801 	add.w	r8, r4, #1
 8010dd6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010dda:	9302      	str	r3, [sp, #8]
 8010ddc:	9b02      	ldr	r3, [sp, #8]
 8010dde:	4543      	cmp	r3, r8
 8010de0:	da04      	bge.n	8010dec <__kernel_rem_pio2+0x3ac>
 8010de2:	461c      	mov	r4, r3
 8010de4:	e6a2      	b.n	8010b2c <__kernel_rem_pio2+0xec>
 8010de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010de8:	2301      	movs	r3, #1
 8010dea:	e7e4      	b.n	8010db6 <__kernel_rem_pio2+0x376>
 8010dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010df2:	f7ef fbaf 	bl	8000554 <__aeabi_i2d>
 8010df6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dfc:	46ab      	mov	fp, r5
 8010dfe:	461c      	mov	r4, r3
 8010e00:	f04f 0900 	mov.w	r9, #0
 8010e04:	2600      	movs	r6, #0
 8010e06:	2700      	movs	r7, #0
 8010e08:	9b05      	ldr	r3, [sp, #20]
 8010e0a:	4599      	cmp	r9, r3
 8010e0c:	dd06      	ble.n	8010e1c <__kernel_rem_pio2+0x3dc>
 8010e0e:	9b08      	ldr	r3, [sp, #32]
 8010e10:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010e14:	f108 0801 	add.w	r8, r8, #1
 8010e18:	9308      	str	r3, [sp, #32]
 8010e1a:	e7df      	b.n	8010ddc <__kernel_rem_pio2+0x39c>
 8010e1c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010e20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010e24:	f7ef fc00 	bl	8000628 <__aeabi_dmul>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	4639      	mov	r1, r7
 8010e30:	f7ef fa44 	bl	80002bc <__adddf3>
 8010e34:	f109 0901 	add.w	r9, r9, #1
 8010e38:	4606      	mov	r6, r0
 8010e3a:	460f      	mov	r7, r1
 8010e3c:	e7e4      	b.n	8010e08 <__kernel_rem_pio2+0x3c8>
 8010e3e:	3d01      	subs	r5, #1
 8010e40:	e747      	b.n	8010cd2 <__kernel_rem_pio2+0x292>
 8010e42:	ec47 6b10 	vmov	d0, r6, r7
 8010e46:	f1ca 0000 	rsb	r0, sl, #0
 8010e4a:	f000 f949 	bl	80110e0 <scalbn>
 8010e4e:	ec57 6b10 	vmov	r6, r7, d0
 8010e52:	4ba0      	ldr	r3, [pc, #640]	; (80110d4 <__kernel_rem_pio2+0x694>)
 8010e54:	ee10 0a10 	vmov	r0, s0
 8010e58:	2200      	movs	r2, #0
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	f7ef fe6a 	bl	8000b34 <__aeabi_dcmpge>
 8010e60:	b1f8      	cbz	r0, 8010ea2 <__kernel_rem_pio2+0x462>
 8010e62:	4b9d      	ldr	r3, [pc, #628]	; (80110d8 <__kernel_rem_pio2+0x698>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	f7ef fbdd 	bl	8000628 <__aeabi_dmul>
 8010e6e:	f7ef fe8b 	bl	8000b88 <__aeabi_d2iz>
 8010e72:	4680      	mov	r8, r0
 8010e74:	f7ef fb6e 	bl	8000554 <__aeabi_i2d>
 8010e78:	4b96      	ldr	r3, [pc, #600]	; (80110d4 <__kernel_rem_pio2+0x694>)
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f7ef fbd4 	bl	8000628 <__aeabi_dmul>
 8010e80:	460b      	mov	r3, r1
 8010e82:	4602      	mov	r2, r0
 8010e84:	4639      	mov	r1, r7
 8010e86:	4630      	mov	r0, r6
 8010e88:	f7ef fa16 	bl	80002b8 <__aeabi_dsub>
 8010e8c:	f7ef fe7c 	bl	8000b88 <__aeabi_d2iz>
 8010e90:	1c65      	adds	r5, r4, #1
 8010e92:	ab0c      	add	r3, sp, #48	; 0x30
 8010e94:	f10a 0a18 	add.w	sl, sl, #24
 8010e98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e9c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010ea0:	e71f      	b.n	8010ce2 <__kernel_rem_pio2+0x2a2>
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	f7ef fe6f 	bl	8000b88 <__aeabi_d2iz>
 8010eaa:	ab0c      	add	r3, sp, #48	; 0x30
 8010eac:	4625      	mov	r5, r4
 8010eae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010eb2:	e716      	b.n	8010ce2 <__kernel_rem_pio2+0x2a2>
 8010eb4:	ab0c      	add	r3, sp, #48	; 0x30
 8010eb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010eba:	f7ef fb4b 	bl	8000554 <__aeabi_i2d>
 8010ebe:	4632      	mov	r2, r6
 8010ec0:	463b      	mov	r3, r7
 8010ec2:	f7ef fbb1 	bl	8000628 <__aeabi_dmul>
 8010ec6:	4642      	mov	r2, r8
 8010ec8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010ecc:	464b      	mov	r3, r9
 8010ece:	4630      	mov	r0, r6
 8010ed0:	4639      	mov	r1, r7
 8010ed2:	f7ef fba9 	bl	8000628 <__aeabi_dmul>
 8010ed6:	3c01      	subs	r4, #1
 8010ed8:	4606      	mov	r6, r0
 8010eda:	460f      	mov	r7, r1
 8010edc:	e713      	b.n	8010d06 <__kernel_rem_pio2+0x2c6>
 8010ede:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010ee2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010ee6:	f7ef fb9f 	bl	8000628 <__aeabi_dmul>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	4648      	mov	r0, r9
 8010ef0:	4651      	mov	r1, sl
 8010ef2:	f7ef f9e3 	bl	80002bc <__adddf3>
 8010ef6:	3701      	adds	r7, #1
 8010ef8:	4681      	mov	r9, r0
 8010efa:	468a      	mov	sl, r1
 8010efc:	9b00      	ldr	r3, [sp, #0]
 8010efe:	429f      	cmp	r7, r3
 8010f00:	dc02      	bgt.n	8010f08 <__kernel_rem_pio2+0x4c8>
 8010f02:	9b06      	ldr	r3, [sp, #24]
 8010f04:	429f      	cmp	r7, r3
 8010f06:	ddea      	ble.n	8010ede <__kernel_rem_pio2+0x49e>
 8010f08:	9a06      	ldr	r2, [sp, #24]
 8010f0a:	ab48      	add	r3, sp, #288	; 0x120
 8010f0c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010f10:	e9c6 9a00 	strd	r9, sl, [r6]
 8010f14:	3c01      	subs	r4, #1
 8010f16:	e6fa      	b.n	8010d0e <__kernel_rem_pio2+0x2ce>
 8010f18:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010f1a:	2b02      	cmp	r3, #2
 8010f1c:	dc0b      	bgt.n	8010f36 <__kernel_rem_pio2+0x4f6>
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	dc39      	bgt.n	8010f96 <__kernel_rem_pio2+0x556>
 8010f22:	d05d      	beq.n	8010fe0 <__kernel_rem_pio2+0x5a0>
 8010f24:	9b02      	ldr	r3, [sp, #8]
 8010f26:	f003 0007 	and.w	r0, r3, #7
 8010f2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010f2e:	ecbd 8b02 	vpop	{d8}
 8010f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010f38:	2b03      	cmp	r3, #3
 8010f3a:	d1f3      	bne.n	8010f24 <__kernel_rem_pio2+0x4e4>
 8010f3c:	9b05      	ldr	r3, [sp, #20]
 8010f3e:	9500      	str	r5, [sp, #0]
 8010f40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010f44:	eb0d 0403 	add.w	r4, sp, r3
 8010f48:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010f4c:	46a2      	mov	sl, r4
 8010f4e:	9b00      	ldr	r3, [sp, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f1aa 0a08 	sub.w	sl, sl, #8
 8010f56:	dc69      	bgt.n	801102c <__kernel_rem_pio2+0x5ec>
 8010f58:	46aa      	mov	sl, r5
 8010f5a:	f1ba 0f01 	cmp.w	sl, #1
 8010f5e:	f1a4 0408 	sub.w	r4, r4, #8
 8010f62:	f300 8083 	bgt.w	801106c <__kernel_rem_pio2+0x62c>
 8010f66:	9c05      	ldr	r4, [sp, #20]
 8010f68:	ab48      	add	r3, sp, #288	; 0x120
 8010f6a:	441c      	add	r4, r3
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	2100      	movs	r1, #0
 8010f70:	2d01      	cmp	r5, #1
 8010f72:	f300 809a 	bgt.w	80110aa <__kernel_rem_pio2+0x66a>
 8010f76:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010f7a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010f7e:	f1bb 0f00 	cmp.w	fp, #0
 8010f82:	f040 8098 	bne.w	80110b6 <__kernel_rem_pio2+0x676>
 8010f86:	9b04      	ldr	r3, [sp, #16]
 8010f88:	e9c3 7800 	strd	r7, r8, [r3]
 8010f8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010f90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010f94:	e7c6      	b.n	8010f24 <__kernel_rem_pio2+0x4e4>
 8010f96:	9e05      	ldr	r6, [sp, #20]
 8010f98:	ab48      	add	r3, sp, #288	; 0x120
 8010f9a:	441e      	add	r6, r3
 8010f9c:	462c      	mov	r4, r5
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	da33      	bge.n	801100e <__kernel_rem_pio2+0x5ce>
 8010fa6:	f1bb 0f00 	cmp.w	fp, #0
 8010faa:	d036      	beq.n	801101a <__kernel_rem_pio2+0x5da>
 8010fac:	4602      	mov	r2, r0
 8010fae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fb2:	9c04      	ldr	r4, [sp, #16]
 8010fb4:	e9c4 2300 	strd	r2, r3, [r4]
 8010fb8:	4602      	mov	r2, r0
 8010fba:	460b      	mov	r3, r1
 8010fbc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010fc0:	f7ef f97a 	bl	80002b8 <__aeabi_dsub>
 8010fc4:	ae4a      	add	r6, sp, #296	; 0x128
 8010fc6:	2401      	movs	r4, #1
 8010fc8:	42a5      	cmp	r5, r4
 8010fca:	da29      	bge.n	8011020 <__kernel_rem_pio2+0x5e0>
 8010fcc:	f1bb 0f00 	cmp.w	fp, #0
 8010fd0:	d002      	beq.n	8010fd8 <__kernel_rem_pio2+0x598>
 8010fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	9b04      	ldr	r3, [sp, #16]
 8010fda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010fde:	e7a1      	b.n	8010f24 <__kernel_rem_pio2+0x4e4>
 8010fe0:	9c05      	ldr	r4, [sp, #20]
 8010fe2:	ab48      	add	r3, sp, #288	; 0x120
 8010fe4:	441c      	add	r4, r3
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	2100      	movs	r1, #0
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	da09      	bge.n	8011002 <__kernel_rem_pio2+0x5c2>
 8010fee:	f1bb 0f00 	cmp.w	fp, #0
 8010ff2:	d002      	beq.n	8010ffa <__kernel_rem_pio2+0x5ba>
 8010ff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	9b04      	ldr	r3, [sp, #16]
 8010ffc:	e9c3 0100 	strd	r0, r1, [r3]
 8011000:	e790      	b.n	8010f24 <__kernel_rem_pio2+0x4e4>
 8011002:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011006:	f7ef f959 	bl	80002bc <__adddf3>
 801100a:	3d01      	subs	r5, #1
 801100c:	e7ed      	b.n	8010fea <__kernel_rem_pio2+0x5aa>
 801100e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011012:	f7ef f953 	bl	80002bc <__adddf3>
 8011016:	3c01      	subs	r4, #1
 8011018:	e7c3      	b.n	8010fa2 <__kernel_rem_pio2+0x562>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	e7c8      	b.n	8010fb2 <__kernel_rem_pio2+0x572>
 8011020:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011024:	f7ef f94a 	bl	80002bc <__adddf3>
 8011028:	3401      	adds	r4, #1
 801102a:	e7cd      	b.n	8010fc8 <__kernel_rem_pio2+0x588>
 801102c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011030:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011034:	9b00      	ldr	r3, [sp, #0]
 8011036:	3b01      	subs	r3, #1
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	4632      	mov	r2, r6
 801103c:	463b      	mov	r3, r7
 801103e:	4640      	mov	r0, r8
 8011040:	4649      	mov	r1, r9
 8011042:	f7ef f93b 	bl	80002bc <__adddf3>
 8011046:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	4640      	mov	r0, r8
 8011050:	4649      	mov	r1, r9
 8011052:	f7ef f931 	bl	80002b8 <__aeabi_dsub>
 8011056:	4632      	mov	r2, r6
 8011058:	463b      	mov	r3, r7
 801105a:	f7ef f92f 	bl	80002bc <__adddf3>
 801105e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011062:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011066:	ed8a 7b00 	vstr	d7, [sl]
 801106a:	e770      	b.n	8010f4e <__kernel_rem_pio2+0x50e>
 801106c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011070:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011074:	4640      	mov	r0, r8
 8011076:	4632      	mov	r2, r6
 8011078:	463b      	mov	r3, r7
 801107a:	4649      	mov	r1, r9
 801107c:	f7ef f91e 	bl	80002bc <__adddf3>
 8011080:	e9cd 0100 	strd	r0, r1, [sp]
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4640      	mov	r0, r8
 801108a:	4649      	mov	r1, r9
 801108c:	f7ef f914 	bl	80002b8 <__aeabi_dsub>
 8011090:	4632      	mov	r2, r6
 8011092:	463b      	mov	r3, r7
 8011094:	f7ef f912 	bl	80002bc <__adddf3>
 8011098:	ed9d 7b00 	vldr	d7, [sp]
 801109c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80110a0:	ed84 7b00 	vstr	d7, [r4]
 80110a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80110a8:	e757      	b.n	8010f5a <__kernel_rem_pio2+0x51a>
 80110aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80110ae:	f7ef f905 	bl	80002bc <__adddf3>
 80110b2:	3d01      	subs	r5, #1
 80110b4:	e75c      	b.n	8010f70 <__kernel_rem_pio2+0x530>
 80110b6:	9b04      	ldr	r3, [sp, #16]
 80110b8:	9a04      	ldr	r2, [sp, #16]
 80110ba:	601f      	str	r7, [r3, #0]
 80110bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80110c0:	605c      	str	r4, [r3, #4]
 80110c2:	609d      	str	r5, [r3, #8]
 80110c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80110c8:	60d3      	str	r3, [r2, #12]
 80110ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110ce:	6110      	str	r0, [r2, #16]
 80110d0:	6153      	str	r3, [r2, #20]
 80110d2:	e727      	b.n	8010f24 <__kernel_rem_pio2+0x4e4>
 80110d4:	41700000 	.word	0x41700000
 80110d8:	3e700000 	.word	0x3e700000
 80110dc:	00000000 	.word	0x00000000

080110e0 <scalbn>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	ec55 4b10 	vmov	r4, r5, d0
 80110e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80110ea:	4606      	mov	r6, r0
 80110ec:	462b      	mov	r3, r5
 80110ee:	b999      	cbnz	r1, 8011118 <scalbn+0x38>
 80110f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80110f4:	4323      	orrs	r3, r4
 80110f6:	d03f      	beq.n	8011178 <scalbn+0x98>
 80110f8:	4b35      	ldr	r3, [pc, #212]	; (80111d0 <scalbn+0xf0>)
 80110fa:	4629      	mov	r1, r5
 80110fc:	ee10 0a10 	vmov	r0, s0
 8011100:	2200      	movs	r2, #0
 8011102:	f7ef fa91 	bl	8000628 <__aeabi_dmul>
 8011106:	4b33      	ldr	r3, [pc, #204]	; (80111d4 <scalbn+0xf4>)
 8011108:	429e      	cmp	r6, r3
 801110a:	4604      	mov	r4, r0
 801110c:	460d      	mov	r5, r1
 801110e:	da10      	bge.n	8011132 <scalbn+0x52>
 8011110:	a327      	add	r3, pc, #156	; (adr r3, 80111b0 <scalbn+0xd0>)
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	e01f      	b.n	8011158 <scalbn+0x78>
 8011118:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801111c:	4291      	cmp	r1, r2
 801111e:	d10c      	bne.n	801113a <scalbn+0x5a>
 8011120:	ee10 2a10 	vmov	r2, s0
 8011124:	4620      	mov	r0, r4
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef f8c8 	bl	80002bc <__adddf3>
 801112c:	4604      	mov	r4, r0
 801112e:	460d      	mov	r5, r1
 8011130:	e022      	b.n	8011178 <scalbn+0x98>
 8011132:	460b      	mov	r3, r1
 8011134:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011138:	3936      	subs	r1, #54	; 0x36
 801113a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801113e:	4296      	cmp	r6, r2
 8011140:	dd0d      	ble.n	801115e <scalbn+0x7e>
 8011142:	2d00      	cmp	r5, #0
 8011144:	a11c      	add	r1, pc, #112	; (adr r1, 80111b8 <scalbn+0xd8>)
 8011146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801114a:	da02      	bge.n	8011152 <scalbn+0x72>
 801114c:	a11c      	add	r1, pc, #112	; (adr r1, 80111c0 <scalbn+0xe0>)
 801114e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011152:	a319      	add	r3, pc, #100	; (adr r3, 80111b8 <scalbn+0xd8>)
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	f7ef fa66 	bl	8000628 <__aeabi_dmul>
 801115c:	e7e6      	b.n	801112c <scalbn+0x4c>
 801115e:	1872      	adds	r2, r6, r1
 8011160:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011164:	428a      	cmp	r2, r1
 8011166:	dcec      	bgt.n	8011142 <scalbn+0x62>
 8011168:	2a00      	cmp	r2, #0
 801116a:	dd08      	ble.n	801117e <scalbn+0x9e>
 801116c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011170:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011178:	ec45 4b10 	vmov	d0, r4, r5
 801117c:	bd70      	pop	{r4, r5, r6, pc}
 801117e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011182:	da08      	bge.n	8011196 <scalbn+0xb6>
 8011184:	2d00      	cmp	r5, #0
 8011186:	a10a      	add	r1, pc, #40	; (adr r1, 80111b0 <scalbn+0xd0>)
 8011188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801118c:	dac0      	bge.n	8011110 <scalbn+0x30>
 801118e:	a10e      	add	r1, pc, #56	; (adr r1, 80111c8 <scalbn+0xe8>)
 8011190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011194:	e7bc      	b.n	8011110 <scalbn+0x30>
 8011196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801119a:	3236      	adds	r2, #54	; 0x36
 801119c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80111a4:	4620      	mov	r0, r4
 80111a6:	4b0c      	ldr	r3, [pc, #48]	; (80111d8 <scalbn+0xf8>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	e7d5      	b.n	8011158 <scalbn+0x78>
 80111ac:	f3af 8000 	nop.w
 80111b0:	c2f8f359 	.word	0xc2f8f359
 80111b4:	01a56e1f 	.word	0x01a56e1f
 80111b8:	8800759c 	.word	0x8800759c
 80111bc:	7e37e43c 	.word	0x7e37e43c
 80111c0:	8800759c 	.word	0x8800759c
 80111c4:	fe37e43c 	.word	0xfe37e43c
 80111c8:	c2f8f359 	.word	0xc2f8f359
 80111cc:	81a56e1f 	.word	0x81a56e1f
 80111d0:	43500000 	.word	0x43500000
 80111d4:	ffff3cb0 	.word	0xffff3cb0
 80111d8:	3c900000 	.word	0x3c900000
 80111dc:	00000000 	.word	0x00000000

080111e0 <floor>:
 80111e0:	ec51 0b10 	vmov	r0, r1, d0
 80111e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80111e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80111f0:	2e13      	cmp	r6, #19
 80111f2:	ee10 5a10 	vmov	r5, s0
 80111f6:	ee10 8a10 	vmov	r8, s0
 80111fa:	460c      	mov	r4, r1
 80111fc:	dc31      	bgt.n	8011262 <floor+0x82>
 80111fe:	2e00      	cmp	r6, #0
 8011200:	da14      	bge.n	801122c <floor+0x4c>
 8011202:	a333      	add	r3, pc, #204	; (adr r3, 80112d0 <floor+0xf0>)
 8011204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011208:	f7ef f858 	bl	80002bc <__adddf3>
 801120c:	2200      	movs	r2, #0
 801120e:	2300      	movs	r3, #0
 8011210:	f7ef fc9a 	bl	8000b48 <__aeabi_dcmpgt>
 8011214:	b138      	cbz	r0, 8011226 <floor+0x46>
 8011216:	2c00      	cmp	r4, #0
 8011218:	da53      	bge.n	80112c2 <floor+0xe2>
 801121a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801121e:	4325      	orrs	r5, r4
 8011220:	d052      	beq.n	80112c8 <floor+0xe8>
 8011222:	4c2d      	ldr	r4, [pc, #180]	; (80112d8 <floor+0xf8>)
 8011224:	2500      	movs	r5, #0
 8011226:	4621      	mov	r1, r4
 8011228:	4628      	mov	r0, r5
 801122a:	e024      	b.n	8011276 <floor+0x96>
 801122c:	4f2b      	ldr	r7, [pc, #172]	; (80112dc <floor+0xfc>)
 801122e:	4137      	asrs	r7, r6
 8011230:	ea01 0307 	and.w	r3, r1, r7
 8011234:	4303      	orrs	r3, r0
 8011236:	d01e      	beq.n	8011276 <floor+0x96>
 8011238:	a325      	add	r3, pc, #148	; (adr r3, 80112d0 <floor+0xf0>)
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	f7ef f83d 	bl	80002bc <__adddf3>
 8011242:	2200      	movs	r2, #0
 8011244:	2300      	movs	r3, #0
 8011246:	f7ef fc7f 	bl	8000b48 <__aeabi_dcmpgt>
 801124a:	2800      	cmp	r0, #0
 801124c:	d0eb      	beq.n	8011226 <floor+0x46>
 801124e:	2c00      	cmp	r4, #0
 8011250:	bfbe      	ittt	lt
 8011252:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011256:	4133      	asrlt	r3, r6
 8011258:	18e4      	addlt	r4, r4, r3
 801125a:	ea24 0407 	bic.w	r4, r4, r7
 801125e:	2500      	movs	r5, #0
 8011260:	e7e1      	b.n	8011226 <floor+0x46>
 8011262:	2e33      	cmp	r6, #51	; 0x33
 8011264:	dd0b      	ble.n	801127e <floor+0x9e>
 8011266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801126a:	d104      	bne.n	8011276 <floor+0x96>
 801126c:	ee10 2a10 	vmov	r2, s0
 8011270:	460b      	mov	r3, r1
 8011272:	f7ef f823 	bl	80002bc <__adddf3>
 8011276:	ec41 0b10 	vmov	d0, r0, r1
 801127a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801127e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011282:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011286:	40df      	lsrs	r7, r3
 8011288:	4238      	tst	r0, r7
 801128a:	d0f4      	beq.n	8011276 <floor+0x96>
 801128c:	a310      	add	r3, pc, #64	; (adr r3, 80112d0 <floor+0xf0>)
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef f813 	bl	80002bc <__adddf3>
 8011296:	2200      	movs	r2, #0
 8011298:	2300      	movs	r3, #0
 801129a:	f7ef fc55 	bl	8000b48 <__aeabi_dcmpgt>
 801129e:	2800      	cmp	r0, #0
 80112a0:	d0c1      	beq.n	8011226 <floor+0x46>
 80112a2:	2c00      	cmp	r4, #0
 80112a4:	da0a      	bge.n	80112bc <floor+0xdc>
 80112a6:	2e14      	cmp	r6, #20
 80112a8:	d101      	bne.n	80112ae <floor+0xce>
 80112aa:	3401      	adds	r4, #1
 80112ac:	e006      	b.n	80112bc <floor+0xdc>
 80112ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80112b2:	2301      	movs	r3, #1
 80112b4:	40b3      	lsls	r3, r6
 80112b6:	441d      	add	r5, r3
 80112b8:	45a8      	cmp	r8, r5
 80112ba:	d8f6      	bhi.n	80112aa <floor+0xca>
 80112bc:	ea25 0507 	bic.w	r5, r5, r7
 80112c0:	e7b1      	b.n	8011226 <floor+0x46>
 80112c2:	2500      	movs	r5, #0
 80112c4:	462c      	mov	r4, r5
 80112c6:	e7ae      	b.n	8011226 <floor+0x46>
 80112c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80112cc:	e7ab      	b.n	8011226 <floor+0x46>
 80112ce:	bf00      	nop
 80112d0:	8800759c 	.word	0x8800759c
 80112d4:	7e37e43c 	.word	0x7e37e43c
 80112d8:	bff00000 	.word	0xbff00000
 80112dc:	000fffff 	.word	0x000fffff

080112e0 <_init>:
 80112e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e2:	bf00      	nop
 80112e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112e6:	bc08      	pop	{r3}
 80112e8:	469e      	mov	lr, r3
 80112ea:	4770      	bx	lr

080112ec <_fini>:
 80112ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ee:	bf00      	nop
 80112f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112f2:	bc08      	pop	{r3}
 80112f4:	469e      	mov	lr, r3
 80112f6:	4770      	bx	lr
