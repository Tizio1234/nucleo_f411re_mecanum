
rover_mecanum_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f038  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800f1d8  0800f1d8  0001f1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8f8  0800f8f8  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8f8  0800f8f8  0001f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f900  0800f900  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f900  0800f900  0001f900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056e4  20000258  0800fb60  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000593c  0800fb60  0002593c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6cf  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba2  00000000  00000000  0003b99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113d  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e89  00000000  00000000  00041cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bed  00000000  00000000  00046b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf71  00000000  00000000  0005e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077f8  00000000  00000000  000fb6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00102e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1c0 	.word	0x0800f1c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800f1c0 	.word	0x0800f1c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f001 f950 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f820 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fa0c 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001010:	f000 f9ea 	bl	80013e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001014:	f000 f9be 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001018:	f000 f882 	bl	8001120 <MX_TIM1_Init>
  MX_TIM2_Init();
 800101c:	f000 f938 	bl	8001290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001020:	f000 f98e 	bl	8001340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001024:	f004 ff94 	bl	8005f50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <main+0x40>)
 800102a:	2100      	movs	r1, #0
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <main+0x44>)
 800102e:	f004 ffd9 	bl	8005fe4 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <main+0x48>)
 8001036:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001038:	f004 ffae 	bl	8005f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x3c>
 800103e:	bf00      	nop
 8001040:	0800f278 	.word	0x0800f278
 8001044:	080015d5 	.word	0x080015d5
 8001048:	200003f4 	.word	0x200003f4

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 ff2f 	bl	8009ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 ffac 	bl	8003030 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010de:	f000 fb69 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fa0e 	bl	8003520 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 fb53 	bl	80017b4 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f008 feb0 	bl	8009ebe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <MX_TIM1_Init+0x168>)
 8001160:	4a4a      	ldr	r2, [pc, #296]	; (800128c <MX_TIM1_Init+0x16c>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_TIM1_Init+0x168>)
 8001166:	2209      	movs	r2, #9
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <MX_TIM1_Init+0x168>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_TIM1_Init+0x168>)
 8001172:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_TIM1_Init+0x168>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_TIM1_Init+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_TIM1_Init+0x168>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	483f      	ldr	r0, [pc, #252]	; (8001288 <MX_TIM1_Init+0x168>)
 800118c:	f002 fc1a 	bl	80039c4 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 fb0d 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a4:	4619      	mov	r1, r3
 80011a6:	4838      	ldr	r0, [pc, #224]	; (8001288 <MX_TIM1_Init+0x168>)
 80011a8:	f002 ffd4 	bl	8004154 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 faff 	bl	80017b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b6:	4834      	ldr	r0, [pc, #208]	; (8001288 <MX_TIM1_Init+0x168>)
 80011b8:	f002 fcb6 	bl	8003b28 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011c2:	f000 faf7 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	482c      	ldr	r0, [pc, #176]	; (8001288 <MX_TIM1_Init+0x168>)
 80011d6:	f003 fb85 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f000 fae8 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_TIM1_Init+0x168>)
 800120a:	f002 fee1 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001214:	f000 face 	bl	80017b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2204      	movs	r2, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <MX_TIM1_Init+0x168>)
 8001222:	f002 fed5 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800122c:	f000 fac2 	bl	80017b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x168>)
 800123a:	f002 fec9 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001244:	f000 fab6 	bl	80017b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM1_Init+0x168>)
 800126c:	f003 fba8 	bl	80049c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001276:	f000 fa9d 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM1_Init+0x168>)
 800127c:	f000 fd32 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000274 	.word	0x20000274
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_TIM2_Init+0xac>)
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM2_Init+0xac>)
 80012bc:	2209      	movs	r2, #9
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM2_Init+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM2_Init+0xac>)
 80012c8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM2_Init+0xac>)
 80012dc:	f002 fc24 	bl	8003b28 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 fa65 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM2_Init+0xac>)
 80012fa:	f003 faf3 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fa56 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xac>)
 8001320:	f002 fe56 	bl	8003fd0 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 fa43 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xac>)
 8001330:	f000 fcd8 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002bc 	.word	0x200002bc

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001378:	f003 fb88 	bl	8004a8c <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 fa17 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000304 	.word	0x20000304
 8001390:	40011000 	.word	0x40011000

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fb5e 	bl	8004a8c <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f9ed 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000034c 	.word	0x2000034c
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2105      	movs	r1, #5
 800140e:	203a      	movs	r0, #58	; 0x3a
 8001410:	f001 f844 	bl	800249c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001414:	203a      	movs	r0, #58	; 0x3a
 8001416:	f001 f85d 	bl	80024d4 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <MX_GPIO_Init+0x120>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <MX_GPIO_Init+0x120>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <MX_GPIO_Init+0x120>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_GPIO_Init+0x120>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a39      	ldr	r2, [pc, #228]	; (8001548 <MX_GPIO_Init+0x120>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_GPIO_Init+0x120>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <MX_GPIO_Init+0x120>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <MX_GPIO_Init+0x120>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_GPIO_Init+0x120>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MX_GPIO_Init+0x120>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <MX_GPIO_Init+0x120>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_GPIO_Init+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	21c0      	movs	r1, #192	; 0xc0
 80014b2:	4826      	ldr	r0, [pc, #152]	; (800154c <MX_GPIO_Init+0x124>)
 80014b4:	f001 fda2 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80014be:	4824      	ldr	r0, [pc, #144]	; (8001550 <MX_GPIO_Init+0x128>)
 80014c0:	f001 fd9c 	bl	8002ffc <HAL_GPIO_WritePin>
                          |ROBOT_IN2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROBOT_IN1_A_GPIO_Port, ROBOT_IN1_A_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014ca:	f001 fd97 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014e6:	f001 fc05 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_A_Pin ROBOT_IN3_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_GPIO_Init+0x124>)
 8001502:	f001 fbf7 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_B_Pin ROBOT_IN1_B_Pin ROBOT_IN3_B_Pin ROBOT_IN2_B_Pin
                           ROBOT_IN2_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 8001506:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800150a:	617b      	str	r3, [r7, #20]
                          |ROBOT_IN2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x128>)
 8001520:	f001 fbe8 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROBOT_IN1_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN1_A_Pin;
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROBOT_IN1_A_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_GPIO_Init+0x12c>)
 800153c:	f001 fbda 	bl	8002cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800

08001558 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001560:	1d39      	adds	r1, r7, #4
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001566:	2201      	movs	r2, #1
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <__io_putchar+0x20>)
 800156a:	f003 fadf 	bl	8004b2c <HAL_UART_Transmit>
  return ch;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000034c 	.word	0x2000034c

0800157c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d116      	bne.n	80015c0 <HAL_UARTEx_RxEventCallback+0x44>
    static uint16_t pos = 0;
    lwrb_advance(&uart_buffer, Size >= pos ? Size - pos : Size - pos + sizeof(uart_buffer_data));
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	429a      	cmp	r2, r3
 800159a:	d304      	bcc.n	80015a6 <HAL_UARTEx_RxEventCallback+0x2a>
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	e005      	b.n	80015b2 <HAL_UARTEx_RxEventCallback+0x36>
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x54>)
 80015b6:	f007 fbca 	bl	8008d4e <lwrb_advance>
    pos = Size;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	8013      	strh	r3, [r2, #0]
  }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40011000 	.word	0x40011000
 80015cc:	20000db4 	.word	0x20000db4
 80015d0:	20000ca0 	.word	0x20000ca0

080015d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d8:	b0d0      	sub	sp, #320	; 0x140
 80015da:	af04      	add	r7, sp, #16
 80015dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  mecanum_robot_init(&robot);
 80015e6:	485f      	ldr	r0, [pc, #380]	; (8001764 <StartDefaultTask+0x190>)
 80015e8:	f000 f9c3 	bl	8001972 <mecanum_robot_init>

  lwrb_init(&uart_buffer, uart_buffer_data, sizeof(uart_buffer_data));
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	495d      	ldr	r1, [pc, #372]	; (8001768 <StartDefaultTask+0x194>)
 80015f2:	485e      	ldr	r0, [pc, #376]	; (800176c <StartDefaultTask+0x198>)
 80015f4:	f007 fa2a 	bl	8008a4c <lwrb_init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buffer_data, sizeof(uart_buffer_data));
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	495a      	ldr	r1, [pc, #360]	; (8001768 <StartDefaultTask+0x194>)
 80015fe:	485c      	ldr	r0, [pc, #368]	; (8001770 <StartDefaultTask+0x19c>)
 8001600:	f003 fb1f 	bl	8004c42 <HAL_UARTEx_ReceiveToIdle_DMA>

  size_t full = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  size_t old_full = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  /* Infinite loop */
  for (;;) {
    old_full = full;
 8001610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    osDelay(2);
 8001618:	2002      	movs	r0, #2
 800161a:	f004 fd75 	bl	8006108 <osDelay>

    full = lwrb_get_full(&uart_buffer);
 800161e:	4853      	ldr	r0, [pc, #332]	; (800176c <StartDefaultTask+0x198>)
 8001620:	f007 fb06 	bl	8008c30 <lwrb_get_full>
 8001624:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    if (full == old_full && full != UART_BUFFER_SIZE){
 8001628:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800162c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001630:	429a      	cmp	r2, r3
 8001632:	d105      	bne.n	8001640 <StartDefaultTask+0x6c>
 8001634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163c:	f040 808c 	bne.w	8001758 <StartDefaultTask+0x184>
      continue;
    }

    printf("%d\r\n", full);
 8001640:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001644:	484b      	ldr	r0, [pc, #300]	; (8001774 <StartDefaultTask+0x1a0>)
 8001646:	f008 fb97 	bl	8009d78 <iprintf>

    size_t found_start;
    if (lwrb_find(&uart_buffer, packet_start_sequence, sizeof(packet_start_sequence), 0, &found_start) != 1){
 800164a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	2202      	movs	r2, #2
 8001654:	4948      	ldr	r1, [pc, #288]	; (8001778 <StartDefaultTask+0x1a4>)
 8001656:	4845      	ldr	r0, [pc, #276]	; (800176c <StartDefaultTask+0x198>)
 8001658:	f007 fbc9 	bl	8008dee <lwrb_find>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d17c      	bne.n	800175c <StartDefaultTask+0x188>
      continue;
    }

    size_t found_end;
    if (lwrb_find(&uart_buffer, packet_end_sequence, sizeof(packet_end_sequence), found_start + sizeof(packet_start_sequence), &found_end) != 1){
 8001662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001666:	1c9a      	adds	r2, r3, #2
 8001668:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	2202      	movs	r2, #2
 8001672:	4942      	ldr	r1, [pc, #264]	; (800177c <StartDefaultTask+0x1a8>)
 8001674:	483d      	ldr	r0, [pc, #244]	; (800176c <StartDefaultTask+0x198>)
 8001676:	f007 fbba 	bl	8008dee <lwrb_find>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d16f      	bne.n	8001760 <StartDefaultTask+0x18c>
      continue;
    }

    (void)lwrb_skip(&uart_buffer, found_start + sizeof(packet_start_sequence));
 8001680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001684:	3302      	adds	r3, #2
 8001686:	4619      	mov	r1, r3
 8001688:	4838      	ldr	r0, [pc, #224]	; (800176c <StartDefaultTask+0x198>)
 800168a:	f007 fb10 	bl	8008cae <lwrb_skip>
    char temp_buff[UART_BUFFER_SIZE];

    size_t read_size = lwrb_read(&uart_buffer, temp_buff, found_end - found_start - sizeof(packet_start_sequence));
 800168e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	1e9a      	subs	r2, r3, #2
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	4832      	ldr	r0, [pc, #200]	; (800176c <StartDefaultTask+0x198>)
 80016a2:	f007 fa04 	bl	8008aae <lwrb_read>
 80016a6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    (void)lwrb_skip(&uart_buffer, sizeof(packet_end_sequence));
 80016aa:	2102      	movs	r1, #2
 80016ac:	482f      	ldr	r0, [pc, #188]	; (800176c <StartDefaultTask+0x198>)
 80016ae:	f007 fafe 	bl	8008cae <lwrb_skip>

    printf("Selected packet: %.*s\r\n", read_size, temp_buff);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	461a      	mov	r2, r3
 80016b8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80016bc:	4830      	ldr	r0, [pc, #192]	; (8001780 <StartDefaultTask+0x1ac>)
 80016be:	f008 fb5b 	bl	8009d78 <iprintf>
    float power, angle, angular_speed;
    int res;
    if ((res = sscanf(temp_buff, packet_format, &power, &angle, &angular_speed)) == 3) {
 80016c2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80016c6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80016ca:	f107 000c 	add.w	r0, r7, #12
 80016ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	460b      	mov	r3, r1
 80016d6:	492b      	ldr	r1, [pc, #172]	; (8001784 <StartDefaultTask+0x1b0>)
 80016d8:	f008 fb80 	bl	8009ddc <siscanf>
 80016dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80016e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d131      	bne.n	800174c <StartDefaultTask+0x178>
      printf("Power: %f, Angle: %f, Angular Speed: %f\r\n", power, angle, angular_speed);
 80016e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff33 	bl	8000558 <__aeabi_f2d>
 80016f2:	4680      	mov	r8, r0
 80016f4:	4689      	mov	r9, r1
 80016f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff2c 	bl	8000558 <__aeabi_f2d>
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001716:	e9cd 4500 	strd	r4, r5, [sp]
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	481a      	ldr	r0, [pc, #104]	; (8001788 <StartDefaultTask+0x1b4>)
 8001720:	f008 fb2a 	bl	8009d78 <iprintf>
      mecanum_robot_move(&robot, power, angle, angular_speed / 5.0f);
 8001724:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8001728:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 800172c:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8001730:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8001734:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001738:	eeb0 1a46 	vmov.f32	s2, s12
 800173c:	eef0 0a66 	vmov.f32	s1, s13
 8001740:	eeb0 0a47 	vmov.f32	s0, s14
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <StartDefaultTask+0x190>)
 8001746:	f000 f94f 	bl	80019e8 <mecanum_robot_move>
 800174a:	e761      	b.n	8001610 <StartDefaultTask+0x3c>
    } else {
      printf("Wrong packet payload format(%i)\r\n", res);
 800174c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <StartDefaultTask+0x1b8>)
 8001752:	f008 fb11 	bl	8009d78 <iprintf>
 8001756:	e75b      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 8001758:	bf00      	nop
 800175a:	e759      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 800175c:	bf00      	nop
 800175e:	e757      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 8001760:	bf00      	nop
  for (;;) {
 8001762:	e755      	b.n	8001610 <StartDefaultTask+0x3c>
 8001764:	20000070 	.word	0x20000070
 8001768:	20000cb4 	.word	0x20000cb4
 800176c:	20000ca0 	.word	0x20000ca0
 8001770:	20000304 	.word	0x20000304
 8001774:	0800f1e4 	.word	0x0800f1e4
 8001778:	0800f29c 	.word	0x0800f29c
 800177c:	0800f2a0 	.word	0x0800f2a0
 8001780:	0800f1ec 	.word	0x0800f1ec
 8001784:	0800f2a4 	.word	0x0800f2a4
 8001788:	0800f204 	.word	0x0800f204
 800178c:	0800f230 	.word	0x0800f230

08001790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017a2:	f000 fda3 	bl	80022ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40014800 	.word	0x40014800

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>

080017be <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	f001 fc03 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6898      	ldr	r0, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	899b      	ldrh	r3, [r3, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	f001 fbfb 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	8a9b      	ldrh	r3, [r3, #20]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f002 fa89 	bl	8003d28 <HAL_TIM_PWM_Stop>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 800182a:	edd7 7a00 	vldr	s15, [r7]
 800182e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	f000 8095 	beq.w	8001964 <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 800183a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800183e:	ed97 0a00 	vldr	s0, [r7]
 8001842:	f00c fc81 	bl	800e148 <fmaxf>
 8001846:	eef0 7a40 	vmov.f32	s15, s0
 800184a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	f00c fc94 	bl	800e17e <fminf>
 8001856:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 800185a:	edd7 7a00 	vldr	s15, [r7]
 800185e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	bfcc      	ite	gt
 8001868:	2301      	movgt	r3, #1
 800186a:	2300      	movle	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	889b      	ldrh	r3, [r3, #4]
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	4619      	mov	r1, r3
 800187a:	f001 fbbf 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6898      	ldr	r0, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	8999      	ldrh	r1, [r3, #12]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	f001 fbb4 	bl	8002ffc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8a9b      	ldrh	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d114      	bne.n	80018c6 <motor_run+0xa8>
 800189c:	edd7 7a00 	vldr	s15, [r7]
 80018a0:	eeb0 7ae7 	vabs.f32	s14, s15
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 2a90 	vmov	r2, s15
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
 80018c4:	e045      	b.n	8001952 <motor_run+0x134>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8a9b      	ldrh	r3, [r3, #20]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d114      	bne.n	80018f8 <motor_run+0xda>
 80018ce:	edd7 7a00 	vldr	s15, [r7]
 80018d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38
 80018f6:	e02c      	b.n	8001952 <motor_run+0x134>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8a9b      	ldrh	r3, [r3, #20]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d114      	bne.n	800192a <motor_run+0x10c>
 8001900:	edd7 7a00 	vldr	s15, [r7]
 8001904:	eeb0 7ae7 	vabs.f32	s14, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001928:	e013      	b.n	8001952 <motor_run+0x134>
 800192a:	edd7 7a00 	vldr	s15, [r7]
 800192e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8a9b      	ldrh	r3, [r3, #20]
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f002 f933 	bl	8003bc8 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 8001962:	e002      	b.n	800196a <motor_run+0x14c>
		motor_stop(motor);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff3a 	bl	80017de <motor_stop>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <mecanum_robot_init>:

void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot){
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	motor_init(mecanum_robot->fl_motor);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff1d 	bl	80017be <motor_init>
	motor_init(mecanum_robot->fr_motor);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff18 	bl	80017be <motor_init>
	motor_init(mecanum_robot->bl_motor);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff13 	bl	80017be <motor_init>
	motor_init(mecanum_robot->br_motor);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff0e 	bl	80017be <motor_init>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff11 	bl	80017de <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff0c 	bl	80017de <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff07 	bl	80017de <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff02 	bl	80017de <motor_stop>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	0000      	movs	r0, r0
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80019f8:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 80019fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d10a      	bne.n	8001a20 <mecanum_robot_move+0x38>
 8001a0a:	edd7 7a00 	vldr	s15, [r7]
 8001a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d103      	bne.n	8001a20 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ffc6 	bl	80019aa <mecanum_robot_stop>
		return;
 8001a1e:	e0e4      	b.n	8001bea <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 8001a20:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001bf8 <mecanum_robot_move+0x210>
 8001a24:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a28:	f00c fb8e 	bl	800e148 <fmaxf>
 8001a2c:	eef0 7a40 	vmov.f32	s15, s0
 8001a30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	f00c fba1 	bl	800e17e <fminf>
 8001a3c:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe fd89 	bl	8000558 <__aeabi_f2d>
 8001a46:	a36a      	add	r3, pc, #424	; (adr r3, 8001bf0 <mecanum_robot_move+0x208>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fc24 	bl	8000298 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f8ce 	bl	8000bf8 <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 8001a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a62:	f7fe fd79 	bl	8000558 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	ec43 2b10 	vmov	d0, r2, r3
 8001a6e:	f00c fb13 	bl	800e098 <sin>
 8001a72:	ec53 2b10 	vmov	r2, r3, d0
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f8bd 	bl	8000bf8 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 8001a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	ec43 2b10 	vmov	d0, r2, r3
 8001a90:	f00c faae 	bl	800dff0 <cos>
 8001a94:	ec53 2b10 	vmov	r2, r3, d0
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f8ac 	bl	8000bf8 <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 8001aa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa8:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab4:	eef0 0a67 	vmov.f32	s1, s15
 8001ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8001abc:	f00c fb44 	bl	800e148 <fmaxf>
 8001ac0:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 8001ac4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ac8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001acc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ad0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	ed97 7a00 	vldr	s14, [r7]
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 8001ae4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aec:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001af0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001af8:	edd7 7a00 	vldr	s15, [r7]
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 8001b04:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b08:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b10:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	ed97 7a00 	vldr	s14, [r7]
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 8001b24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b38:	edd7 7a00 	vldr	s15, [r7]
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 8001b44:	edd7 7a00 	vldr	s15, [r7]
 8001b48:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	dd27      	ble.n	8001bb2 <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 8001b62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b66:	edd7 7a00 	vldr	s15, [r7]
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 8001b72:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b76:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 8001b82:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001b86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 8001b92:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b96:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 8001ba2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ba6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fe2f 	bl	800181e <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe28 	bl	800181e <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe21 	bl	800181e <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe1a 	bl	800181e <motor_run>
}
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	54442d18 	.word	0x54442d18
 8001bf4:	3fe921fb 	.word	0x3fe921fb
 8001bf8:	00000000 	.word	0x00000000

08001bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_MspInit+0x54>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_MspInit+0x54>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_MspInit+0x54>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_MspInit+0x54>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_MspInit+0x54>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_MspInit+0x54>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	f06f 0001 	mvn.w	r0, #1
 8001c42:	f000 fc2b 	bl	800249c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d115      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	201a      	movs	r0, #26
 8001c88:	f000 fc08 	bl	800249c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c8c:	201a      	movs	r0, #26
 8001c8e:	f000 fc21 	bl	80024d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_TIM_MspPostInit+0xb0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d11f      	bne.n	8001d46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ROBOT_ENB_B_Pin|ROBOT_ENA_A_Pin|ROBOT_ENA_B_Pin;
 8001d22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4817      	ldr	r0, [pc, #92]	; (8001d9c <HAL_TIM_MspPostInit+0xb8>)
 8001d40:	f000 ffd8 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d44:	e022      	b.n	8001d8c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4e:	d11d      	bne.n	8001d8c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_TIM_MspPostInit+0xb4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROBOT_ENB_A_Pin;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROBOT_ENB_A_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_TIM_MspPostInit+0xb8>)
 8001d88:	f000 ffb4 	bl	8002cf4 <HAL_GPIO_Init>
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5d      	ldr	r2, [pc, #372]	; (8001f34 <HAL_UART_MspInit+0x194>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 8083 	bne.w	8001eca <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd4:	4b58      	ldr	r3, [pc, #352]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4841      	ldr	r0, [pc, #260]	; (8001f3c <HAL_UART_MspInit+0x19c>)
 8001e36:	f000 ff5d 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	483a      	ldr	r0, [pc, #232]	; (8001f40 <HAL_UART_MspInit+0x1a0>)
 8001e56:	f000 ff4d 	bl	8002cf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e5c:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <HAL_UART_MspInit+0x1a8>)
 8001e5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e9c:	4829      	ldr	r0, [pc, #164]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001e9e:	f000 fb27 	bl	80024f0 <HAL_DMA_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001ea8:	f7ff fc84 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eb2:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_UART_MspInit+0x1a4>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2105      	movs	r1, #5
 8001ebc:	2025      	movs	r0, #37	; 0x25
 8001ebe:	f000 faed 	bl	800249c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec2:	2025      	movs	r0, #37	; 0x25
 8001ec4:	f000 fb06 	bl	80024d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec8:	e030      	b.n	8001f2c <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_UART_MspInit+0x1ac>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d12b      	bne.n	8001f2c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_UART_MspInit+0x198>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_UART_MspInit+0x19c>)
 8001f28:	f000 fee4 	bl	8002cf4 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	20000394 	.word	0x20000394
 8001f48:	40026440 	.word	0x40026440
 8001f4c:	40004400 	.word	0x40004400

08001f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_InitTick+0xd0>)
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <HAL_InitTick+0xd0>)
 8001f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_InitTick+0xd0>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f7c:	f107 020c 	add.w	r2, r7, #12
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 fcea 	bl	8003960 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f8c:	f001 fcd4 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8001f90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_InitTick+0xd4>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_InitTick+0xd8>)
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_InitTick+0xdc>)
 8001fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_InitTick+0xd8>)
 8001fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fac:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_InitTick+0xd8>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_InitTick+0xd8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_InitTick+0xd8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_InitTick+0xd8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <HAL_InitTick+0xd8>)
 8001fc8:	f001 fcfc 	bl	80039c4 <HAL_TIM_Base_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11b      	bne.n	8002012 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001fda:	4813      	ldr	r0, [pc, #76]	; (8002028 <HAL_InitTick+0xd8>)
 8001fdc:	f001 fd42 	bl	8003a64 <HAL_TIM_Base_Start_IT>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d111      	bne.n	8002012 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fee:	201a      	movs	r0, #26
 8001ff0:	f000 fa70 	bl	80024d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	d808      	bhi.n	800200c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	201a      	movs	r0, #26
 8002000:	f000 fa4c 	bl	800249c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_InitTick+0xe0>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e002      	b.n	8002012 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002016:	4618      	mov	r0, r3
 8002018:	3730      	adds	r7, #48	; 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	431bde83 	.word	0x431bde83
 8002028:	20000db8 	.word	0x20000db8
 800202c:	40014800 	.word	0x40014800
 8002030:	20000084 	.word	0x20000084

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002066:	f001 fec3 	bl	8003df0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800206c:	f001 fec0 	bl	8003df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000274 	.word	0x20000274
 8002078:	20000db8 	.word	0x20000db8

0800207c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <USART1_IRQHandler+0x10>)
 8002082:	f002 fe3b 	bl	8004cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000304 	.word	0x20000304

08002090 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002096:	f000 fbc3 	bl	8002820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000394 	.word	0x20000394

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	f007 ffa7 	bl	800a010 <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e6:	e7fe      	b.n	80020e6 <_exit+0x12>

080020e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e00a      	b.n	8002110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020fa:	f3af 8000 	nop.w
 80020fe:	4601      	mov	r1, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	b2ca      	uxtb	r2, r1
 8002108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf0      	blt.n	80020fa <_read+0x12>
  }

  return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e009      	b.n	8002148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fa0b 	bl	8001558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf1      	blt.n	8002134 <_write+0x12>
  }
  return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_close>:

int _close(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002182:	605a      	str	r2, [r3, #4]
  return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_isatty>:

int _isatty(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <_sbrk+0x5c>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <_sbrk+0x60>)
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_sbrk+0x64>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <_sbrk+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f4:	f007 ff0c 	bl	800a010 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002202:	e009      	b.n	8002218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20020000 	.word	0x20020000
 8002224:	00000400 	.word	0x00000400
 8002228:	20000e00 	.word	0x20000e00
 800222c:	20005940 	.word	0x20005940

08002230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <SystemInit+0x20>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <SystemInit+0x20>)
 800223c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002270:	4c0b      	ldr	r4, [pc, #44]	; (80022a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227e:	f7ff ffd7 	bl	8002230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f007 fecb 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7fe febb 	bl	8001000 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800228c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002298:	0800f908 	.word	0x0800f908
  ldr r2, =_sbss
 800229c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80022a0:	2000593c 	.word	0x2000593c

080022a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_Init+0x40>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_Init+0x40>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x40>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f8d8 	bl	8002486 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	2005      	movs	r0, #5
 80022d8:	f7ff fe3a 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fc8e 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000088 	.word	0x20000088
 8002310:	20000e04 	.word	0x20000e04

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000e04 	.word	0x20000e04

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff4c 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ae:	f7ff ff61 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	6978      	ldr	r0, [r7, #20]
 80024ba:	f7ff ffb1 	bl	8002420 <NVIC_EncodePriority>
 80024be:	4602      	mov	r2, r0
 80024c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff80 	bl	80023cc <__NVIC_SetPriority>
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff54 	bl	8002390 <__NVIC_EnableIRQ>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ff0a 	bl	8002314 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e099      	b.n	8002640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	e00f      	b.n	800254e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252e:	f7ff fef1 	bl	8002314 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d908      	bls.n	800254e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e078      	b.n	8002640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_DMA_Init+0x158>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb01 	bl	8002bfc <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fab8 	bl	8002b90 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	223f      	movs	r2, #63	; 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	f010803f 	.word	0xf010803f

0800264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Start_IT+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e040      	b.n	80026f4 <HAL_DMA_Start_IT+0xa8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12f      	bne.n	80026e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa4a 	bl	8002b34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0216 	orr.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e005      	b.n	80026f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800270a:	f7ff fe03 	bl	8002314 <HAL_GetTick>
 800270e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d008      	beq.n	800272e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e052      	b.n	80027d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0216 	bic.w	r2, r2, #22
 800273c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <HAL_DMA_Abort+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0208 	bic.w	r2, r2, #8
 800276c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277e:	e013      	b.n	80027a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002780:	f7ff fdc8 	bl	8002314 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b05      	cmp	r3, #5
 800278c:	d90c      	bls.n	80027a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2203      	movs	r2, #3
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e015      	b.n	80027d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e4      	bne.n	8002780 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	223f      	movs	r2, #63	; 0x3f
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00c      	b.n	8002814 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2205      	movs	r2, #5
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800282c:	4b8e      	ldr	r3, [pc, #568]	; (8002a68 <HAL_DMA_IRQHandler+0x248>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a8e      	ldr	r2, [pc, #568]	; (8002a6c <HAL_DMA_IRQHandler+0x24c>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a9b      	lsrs	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2208      	movs	r2, #8
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01a      	beq.n	800288c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2208      	movs	r2, #8
 800287a:	409a      	lsls	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	2201      	movs	r2, #1
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f043 0202 	orr.w	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	2204      	movs	r2, #4
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2204      	movs	r2, #4
 80028e6:	409a      	lsls	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2210      	movs	r2, #16
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d043      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03c      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	2210      	movs	r2, #16
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
 800294e:	e01f      	b.n	8002990 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e016      	b.n	8002990 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0208 	bic.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2220      	movs	r2, #32
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 808f 	beq.w	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8087 	beq.w	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2220      	movs	r2, #32
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d136      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0216 	bic.w	r2, r2, #22
 80029d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_DMA_IRQHandler+0x1da>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	223f      	movs	r2, #63	; 0x3f
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d07e      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
        }
        return;
 8002a36:	e079      	b.n	8002b2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d031      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e02c      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
 8002a66:	bf00      	nop
 8002a68:	20000080 	.word	0x20000080
 8002a6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
 8002a80:	e01e      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0210 	bic.w	r2, r2, #16
 8002a9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3301      	adds	r3, #1
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d307      	bcc.n	8002b08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f2      	bne.n	8002aec <HAL_DMA_IRQHandler+0x2cc>
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e000      	b.n	8002b2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b2c:	bf00      	nop
    }
  }
}
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d108      	bne.n	8002b74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b72:	e007      	b.n	8002b84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3b10      	subs	r3, #16
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x64>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d909      	bls.n	8002bd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bc6:	f023 0303 	bic.w	r3, r3, #3
 8002bca:	1d1a      	adds	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58
 8002bd0:	e007      	b.n	8002be2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	aaaaaaab 	.word	0xaaaaaaab
 8002bf8:	0800f2cc 	.word	0x0800f2cc

08002bfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11f      	bne.n	8002c56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d856      	bhi.n	8002cca <DMA_CheckFifoParam+0xce>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <DMA_CheckFifoParam+0x28>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c47 	.word	0x08002c47
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002ccb 	.word	0x08002ccb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d046      	beq.n	8002cce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e043      	b.n	8002cce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c4e:	d140      	bne.n	8002cd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c54:	e03d      	b.n	8002cd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	d121      	bne.n	8002ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d837      	bhi.n	8002cd6 <DMA_CheckFifoParam+0xda>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <DMA_CheckFifoParam+0x70>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c83 	.word	0x08002c83
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002c95 	.word	0x08002c95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e030      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d025      	beq.n	8002cda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c92:	e022      	b.n	8002cda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ca2:	e01c      	b.n	8002cde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d903      	bls.n	8002cb2 <DMA_CheckFifoParam+0xb6>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d003      	beq.n	8002cb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cb0:	e018      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e015      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e00b      	b.n	8002ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e00a      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e008      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e006      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e159      	b.n	8002fc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f040 8148 	bne.w	8002fbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d017      	beq.n	8002de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d123      	bne.n	8002e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a2 	beq.w	8002fbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4a56      	ldr	r2, [pc, #344]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e96:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_GPIO_Init+0x2ec>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a49      	ldr	r2, [pc, #292]	; (8002fe4 <HAL_GPIO_Init+0x2f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x202>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a48      	ldr	r2, [pc, #288]	; (8002fe8 <HAL_GPIO_Init+0x2f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x1fe>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_GPIO_Init+0x2f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x1fa>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a46      	ldr	r2, [pc, #280]	; (8002ff0 <HAL_GPIO_Init+0x2fc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x1f6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a45      	ldr	r2, [pc, #276]	; (8002ff4 <HAL_GPIO_Init+0x300>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x1f2>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x204>
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x204>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x204>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x204>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x204>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <HAL_GPIO_Init+0x2ec>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b38      	ldr	r3, [pc, #224]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	f67f aea2 	bls.w	8002d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40013c00 	.word	0x40013c00

08002ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
 8003008:	4613      	mov	r3, r2
 800300a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003018:	e003      	b.n	8003022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e267      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d075      	beq.n	800313a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304e:	4b88      	ldr	r3, [pc, #544]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d00c      	beq.n	8003074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305a:	4b85      	ldr	r3, [pc, #532]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d112      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003066:	4b82      	ldr	r3, [pc, #520]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05b      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d157      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e242      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x74>
 8003096:	4b76      	ldr	r3, [pc, #472]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a75      	ldr	r2, [pc, #468]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030ae:	4b70      	ldr	r3, [pc, #448]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6f      	ldr	r2, [pc, #444]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6c      	ldr	r2, [pc, #432]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030c8:	4b69      	ldr	r3, [pc, #420]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a68      	ldr	r2, [pc, #416]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff f914 	bl	8002314 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7ff f910 	bl	8002314 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e207      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff f900 	bl	8002314 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff f8fc 	bl	8002314 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1f3      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b51      	ldr	r3, [pc, #324]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1c7      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4937      	ldr	r1, [pc, #220]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x244>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7ff f8b5 	bl	8002314 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ae:	f7ff f8b1 	bl	8002314 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1a8      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4925      	ldr	r1, [pc, #148]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x244>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7ff f894 	bl	8002314 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f0:	f7ff f890 	bl	8002314 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e187      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d036      	beq.n	8003288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_RCC_OscConfig+0x248>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7ff f874 	bl	8002314 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003230:	f7ff f870 	bl	8002314 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e167      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_OscConfig+0x240>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x200>
 800324e:	e01b      	b.n	8003288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_OscConfig+0x248>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7ff f85d 	bl	8002314 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	e00e      	b.n	800327c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325e:	f7ff f859 	bl	8002314 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d907      	bls.n	800327c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e150      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
 8003270:	40023800 	.word	0x40023800
 8003274:	42470000 	.word	0x42470000
 8003278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ea      	bne.n	800325e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8097 	beq.w	80033c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a7c      	ldr	r2, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b7a      	ldr	r3, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d118      	bne.n	8003304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d2:	4b74      	ldr	r3, [pc, #464]	; (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a73      	ldr	r2, [pc, #460]	; (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032de:	f7ff f819 	bl	8002314 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e6:	f7ff f815 	bl	8002314 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e10c      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCC_OscConfig+0x474>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x2ea>
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	e01c      	b.n	8003354 <HAL_RCC_OscConfig+0x324>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x30c>
 8003322:	4b5f      	ldr	r3, [pc, #380]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a5e      	ldr	r2, [pc, #376]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	4b5c      	ldr	r3, [pc, #368]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a5b      	ldr	r2, [pc, #364]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0x324>
 800333c:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe ffda 	bl	8002314 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	e00a      	b.n	800337a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe ffd6 	bl	8002314 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0cb      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ee      	beq.n	8003364 <HAL_RCC_OscConfig+0x334>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe ffc4 	bl	8002314 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe ffc0 	bl	8002314 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0b5      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ee      	bne.n	8003390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a1 	beq.w	8003510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d05c      	beq.n	8003494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d141      	bne.n	8003466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe ff94 	bl	8002314 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe ff90 	bl	8002314 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e087      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	491b      	ldr	r1, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x478>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe ff69 	bl	8002314 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe ff65 	bl	8002314 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e05c      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x416>
 8003464:	e054      	b.n	8003510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe ff52 	bl	8002314 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe ff4e 	bl	8002314 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e045      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x444>
 8003492:	e03d      	b.n	8003510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e038      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40007000 	.word	0x40007000
 80034a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x4ec>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d028      	beq.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d121      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11a      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d111      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	3b01      	subs	r3, #1
 80034f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0cc      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d90c      	bls.n	800355c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800357e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d044      	beq.n	8003640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d119      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d003      	beq.n	80035de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e067      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4934      	ldr	r1, [pc, #208]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003610:	f7fe fe80 	bl	8002314 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fe fe7c 	bl	8002314 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e04f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 020c 	and.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	429a      	cmp	r2, r3
 800363e:	d1eb      	bne.n	8003618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d20c      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fc42 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800f2b4 	.word	0x0800f2b4
 80036e4:	20000080 	.word	0x20000080
 80036e8:	20000084 	.word	0x20000084

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f0:	b094      	sub	sp, #80	; 0x50
 80036f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	647b      	str	r3, [r7, #68]	; 0x44
 80036f8:	2300      	movs	r3, #0
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	2300      	movs	r3, #0
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003704:	4b79      	ldr	r3, [pc, #484]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d00d      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x40>
 8003710:	2b08      	cmp	r3, #8
 8003712:	f200 80e1 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x34>
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x3a>
 800371e:	e0db      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003724:	e0db      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4b73      	ldr	r3, [pc, #460]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800372a:	e0d8      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003734:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003736:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
 800374c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
 800375a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003770:	0150      	lsls	r0, r2, #5
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4621      	mov	r1, r4
 8003778:	1a51      	subs	r1, r2, r1
 800377a:	6139      	str	r1, [r7, #16]
 800377c:	4629      	mov	r1, r5
 800377e:	eb63 0301 	sbc.w	r3, r3, r1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003790:	4659      	mov	r1, fp
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379a:	4651      	mov	r1, sl
 800379c:	018a      	lsls	r2, r1, #6
 800379e:	4651      	mov	r1, sl
 80037a0:	ebb2 0801 	subs.w	r8, r2, r1
 80037a4:	4659      	mov	r1, fp
 80037a6:	eb63 0901 	sbc.w	r9, r3, r1
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037be:	4690      	mov	r8, r2
 80037c0:	4699      	mov	r9, r3
 80037c2:	4623      	mov	r3, r4
 80037c4:	eb18 0303 	adds.w	r3, r8, r3
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	462b      	mov	r3, r5
 80037cc:	eb49 0303 	adc.w	r3, r9, r3
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037de:	4629      	mov	r1, r5
 80037e0:	024b      	lsls	r3, r1, #9
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e8:	4621      	mov	r1, r4
 80037ea:	024a      	lsls	r2, r1, #9
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f2:	2200      	movs	r2, #0
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037fc:	f7fd fa4c 	bl	8000c98 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003808:	e058      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	2200      	movs	r2, #0
 8003812:	4618      	mov	r0, r3
 8003814:	4611      	mov	r1, r2
 8003816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	f04f 0000 	mov.w	r0, #0
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	0159      	lsls	r1, r3, #5
 8003832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003836:	0150      	lsls	r0, r2, #5
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4641      	mov	r1, r8
 800383e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003842:	4649      	mov	r1, r9
 8003844:	eb63 0b01 	sbc.w	fp, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800385c:	ebb2 040a 	subs.w	r4, r2, sl
 8003860:	eb63 050b 	sbc.w	r5, r3, fp
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	00eb      	lsls	r3, r5, #3
 800386e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003872:	00e2      	lsls	r2, r4, #3
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4643      	mov	r3, r8
 800387a:	18e3      	adds	r3, r4, r3
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	464b      	mov	r3, r9
 8003880:	eb45 0303 	adc.w	r3, r5, r3
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003892:	4629      	mov	r1, r5
 8003894:	028b      	lsls	r3, r1, #10
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800389c:	4621      	mov	r1, r4
 800389e:	028a      	lsls	r2, r1, #10
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	61fa      	str	r2, [r7, #28]
 80038ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b0:	f7fd f9f2 	bl	8000c98 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3750      	adds	r7, #80	; 0x50
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000080 	.word	0x20000080

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	0800f2c4 	.word	0x0800f2c4

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffdc 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	0800f2c4 	.word	0x0800f2c4

08003960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	220f      	movs	r2, #15
 800396e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCC_GetClockConfig+0x60>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40023c00 	.word	0x40023c00

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fe f932 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fc96 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e044      	b.n	8003b06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d013      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_TIM_Base_Start_IT+0xb4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d111      	bne.n	8003af4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d010      	beq.n	8003b04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	e007      	b.n	8003b04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40014000 	.word	0x40014000

08003b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fe f8a8 	bl	8001ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fbe4 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x24>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e022      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d109      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x3e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e015      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x58>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e068      	b.n	8003d0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x82>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	e013      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x92>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	e00b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	e003      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe0c 	bl	8004898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_TIM_PWM_Start+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_TIM_PWM_Start+0x154>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <HAL_TIM_PWM_Start+0x158>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <HAL_TIM_PWM_Start+0x15c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d111      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d010      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	e007      	b.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000

08003d28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fdac 	bl	8004898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <HAL_TIM_PWM_Stop+0xc4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d117      	bne.n	8003d7a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_TIM_PWM_Stop+0x52>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	f240 4344 	movw	r3, #1092	; 0x444
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_PWM_Stop+0x52>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10f      	bne.n	8003daa <HAL_TIM_PWM_Stop+0x82>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	f240 4344 	movw	r3, #1092	; 0x444
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_PWM_Stop+0x82>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Stop+0x92>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_PWM_Stop+0xba>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Stop+0xa2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_PWM_Stop+0xba>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Stop+0xb2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_PWM_Stop+0xba>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40010000 	.word	0x40010000

08003df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0202 	mvn.w	r2, #2
 8003e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa5b 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa4d 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa5e 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d020      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0204 	mvn.w	r2, #4
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa35 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa27 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa38 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d020      	beq.n	8003eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01b      	beq.n	8003eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0208 	mvn.w	r2, #8
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa0f 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa01 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa12 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d020      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0210 	mvn.w	r2, #16
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f9e9 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9db 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f9ec 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0201 	mvn.w	r2, #1
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd fc1a 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00c      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fd7c 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9bd 	bl	800431e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0220 	mvn.w	r2, #32
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fd4e 	bl	8004a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0ae      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	f200 809f 	bhi.w	800413c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004039 	.word	0x08004039
 8004008:	0800413d 	.word	0x0800413d
 800400c:	0800413d 	.word	0x0800413d
 8004010:	0800413d 	.word	0x0800413d
 8004014:	08004079 	.word	0x08004079
 8004018:	0800413d 	.word	0x0800413d
 800401c:	0800413d 	.word	0x0800413d
 8004020:	0800413d 	.word	0x0800413d
 8004024:	080040bb 	.word	0x080040bb
 8004028:	0800413d 	.word	0x0800413d
 800402c:	0800413d 	.word	0x0800413d
 8004030:	0800413d 	.word	0x0800413d
 8004034:	080040fb 	.word	0x080040fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa04 	bl	800444c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0208 	orr.w	r2, r2, #8
 8004052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	619a      	str	r2, [r3, #24]
      break;
 8004076:	e064      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa4a 	bl	8004518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	619a      	str	r2, [r3, #24]
      break;
 80040b8:	e043      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa95 	bl	80045f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0208 	orr.w	r2, r2, #8
 80040d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
      break;
 80040f8:	e023      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fadf 	bl	80046c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	61da      	str	r2, [r3, #28]
      break;
 800413a:	e002      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
      break;
 8004140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_TIM_ConfigClockSource+0x1c>
 800416c:	2302      	movs	r3, #2
 800416e:	e0b4      	b.n	80042da <HAL_TIM_ConfigClockSource+0x186>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800418e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d03e      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0xd4>
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	f200 8087 	bhi.w	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	f000 8086 	beq.w	80042c6 <HAL_TIM_ConfigClockSource+0x172>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d87f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b70      	cmp	r3, #112	; 0x70
 80041c2:	d01a      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xa6>
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d87b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b60      	cmp	r3, #96	; 0x60
 80041ca:	d050      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x11a>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d877      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b50      	cmp	r3, #80	; 0x50
 80041d2:	d03c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0xfa>
 80041d4:	2b50      	cmp	r3, #80	; 0x50
 80041d6:	d873      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d058      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x13a>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d86f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d064      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d86b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d060      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d867      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d05c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d05a      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	e062      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800420a:	f000 fb25 	bl	8004858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800421c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
      break;
 8004226:	e04f      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004238:	f000 fb0e 	bl	8004858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424a:	609a      	str	r2, [r3, #8]
      break;
 800424c:	e03c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	461a      	mov	r2, r3
 800425c:	f000 fa82 	bl	8004764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2150      	movs	r1, #80	; 0x50
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fadb 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800426c:	e02c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800427a:	461a      	mov	r2, r3
 800427c:	f000 faa1 	bl	80047c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2160      	movs	r1, #96	; 0x60
 8004286:	4618      	mov	r0, r3
 8004288:	f000 facb 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800428c:	e01c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	461a      	mov	r2, r3
 800429c:	f000 fa62 	bl	8004764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fabb 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e00c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f000 fab2 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80042be:	e003      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a37      	ldr	r2, [pc, #220]	; (8004434 <TIM_Base_SetConfig+0x100>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a36      	ldr	r2, [pc, #216]	; (8004438 <TIM_Base_SetConfig+0x104>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a35      	ldr	r2, [pc, #212]	; (800443c <TIM_Base_SetConfig+0x108>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <TIM_Base_SetConfig+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <TIM_Base_SetConfig+0x104>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <TIM_Base_SetConfig+0x108>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <TIM_Base_SetConfig+0x10c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <TIM_Base_SetConfig+0x110>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <TIM_Base_SetConfig+0x114>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]
  }
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800

0800444c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f023 0201 	bic.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 0302 	bic.w	r3, r3, #2
 8004494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10c      	bne.n	80044c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0308 	bic.w	r3, r3, #8
 80044ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d111      	bne.n	80044ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40010000 	.word	0x40010000

08004518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0210 	bic.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0320 	bic.w	r3, r3, #32
 8004562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <TIM_OC2_SetConfig+0xd4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10d      	bne.n	8004594 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <TIM_OC2_SetConfig+0xd4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d113      	bne.n	80045c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000

080045f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <TIM_OC3_SetConfig+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10d      	bne.n	800466a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <TIM_OC3_SetConfig+0xd0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d113      	bne.n	800469a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40010000 	.word	0x40010000

080046c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <TIM_OC4_SetConfig+0x9c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d109      	bne.n	8004738 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000

08004764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 030a 	bic.w	r3, r3, #10
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b087      	sub	sp, #28
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f023 0210 	bic.w	r2, r3, #16
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	f043 0307 	orr.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	431a      	orrs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2201      	movs	r2, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	401a      	ands	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e050      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d013      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40014000 	.word	0x40014000

080049c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e03d      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e042      	b.n	8004b24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fd f974 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 ff85 	bl	80059e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d175      	bne.n	8004c38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Transmit+0x2c>
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e06e      	b.n	8004c3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2221      	movs	r2, #33	; 0x21
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fbd3 	bl	8002314 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba0:	e02e      	b.n	8004c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fc5d 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e03a      	b.n	8004c3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e007      	b.n	8004bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cb      	bne.n	8004ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fc29 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b08c      	sub	sp, #48	; 0x30
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d14a      	bne.n	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e043      	b.n	8004cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fc4e 	bl	8005520 <UART_Start_Receive_DMA>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d12c      	bne.n	8004cec <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d125      	bne.n	8004ce6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f043 0310 	orr.w	r3, r3, #16
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004ce4:	e002      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cf0:	e000      	b.n	8004cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
  }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3730      	adds	r7, #48	; 0x30
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b0ba      	sub	sp, #232	; 0xe8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_UART_IRQHandler+0x66>
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fd81 	bl	8005862 <UART_Receive_IT>
      return;
 8004d60:	e25b      	b.n	800521a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80de 	beq.w	8004f28 <HAL_UART_IRQHandler+0x22c>
 8004d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80d1 	beq.w	8004f28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_UART_IRQHandler+0xae>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0201 	orr.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_UART_IRQHandler+0xd2>
 8004db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_UART_IRQHandler+0xf6>
 8004dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d011      	beq.n	8004e22 <HAL_UART_IRQHandler+0x126>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f043 0208 	orr.w	r2, r3, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 81f2 	beq.w	8005210 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x14e>
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fd0c 	bl	8005862 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	bf0c      	ite	eq
 8004e58:	2301      	moveq	r3, #1
 8004e5a:	2300      	movne	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <HAL_UART_IRQHandler+0x17a>
 8004e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04f      	beq.n	8004f16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fc14 	bl	80056a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d141      	bne.n	8004f0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3314      	adds	r3, #20
 8004eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1d9      	bne.n	8004e8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d013      	beq.n	8004f06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	4a7e      	ldr	r2, [pc, #504]	; (80050dc <HAL_UART_IRQHandler+0x3e0>)
 8004ee4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fc76 	bl	80027dc <HAL_DMA_Abort_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d016      	beq.n	8004f24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	e00e      	b.n	8004f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f9a8 	bl	800525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	e00a      	b.n	8004f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9a4 	bl	800525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	e006      	b.n	8004f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9a0 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f22:	e175      	b.n	8005210 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	bf00      	nop
    return;
 8004f26:	e173      	b.n	8005210 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	f040 814f 	bne.w	80051d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8148 	beq.w	80051d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8141 	beq.w	80051d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	f040 80b6 	bne.w	80050e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8145 	beq.w	8005214 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f92:	429a      	cmp	r2, r3
 8004f94:	f080 813e 	bcs.w	8005214 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	f000 8088 	beq.w	80050be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1d9      	bne.n	8004fae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800500a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800501e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005022:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005026:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e1      	bne.n	8004ffa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800505a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800505c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005060:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e3      	bne.n	8005036 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e3      	bne.n	800507c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd fb1f 	bl	80026fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc fa51 	bl	800157c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050da:	e09b      	b.n	8005214 <HAL_UART_IRQHandler+0x518>
 80050dc:	0800576b 	.word	0x0800576b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 808e 	beq.w	8005218 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8089 	beq.w	8005218 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800512a:	647a      	str	r2, [r7, #68]	; 0x44
 800512c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e3      	bne.n	8005106 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3314      	adds	r3, #20
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	623b      	str	r3, [r7, #32]
   return(result);
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3314      	adds	r3, #20
 800515e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005162:	633a      	str	r2, [r7, #48]	; 0x30
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e3      	bne.n	800513e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	60fb      	str	r3, [r7, #12]
   return(result);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0310 	bic.w	r3, r3, #16
 800519a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051a8:	61fa      	str	r2, [r7, #28]
 80051aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	617b      	str	r3, [r7, #20]
   return(result);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e3      	bne.n	8005184 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fc f9d7 	bl	800157c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051ce:	e023      	b.n	8005218 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <HAL_UART_IRQHandler+0x4f4>
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fad2 	bl	8005792 <UART_Transmit_IT>
    return;
 80051ee:	e014      	b.n	800521a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <HAL_UART_IRQHandler+0x51e>
 80051fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb12 	bl	8005832 <UART_EndTransmit_IT>
    return;
 800520e:	e004      	b.n	800521a <HAL_UART_IRQHandler+0x51e>
    return;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <HAL_UART_IRQHandler+0x51e>
      return;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_UART_IRQHandler+0x51e>
      return;
 8005218:	bf00      	nop
  }
}
 800521a:	37e8      	adds	r7, #232	; 0xe8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b09c      	sub	sp, #112	; 0x70
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d172      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	2200      	movs	r2, #0
 8005290:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	667b      	str	r3, [r7, #100]	; 0x64
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052e6:	647a      	str	r2, [r7, #68]	; 0x44
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	623b      	str	r3, [r7, #32]
   return(result);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531a:	633a      	str	r2, [r7, #48]	; 0x30
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	2b01      	cmp	r3, #1
 800533c:	d119      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60fb      	str	r3, [r7, #12]
   return(result);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0310 	bic.w	r3, r3, #16
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	617b      	str	r3, [r7, #20]
   return(result);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	2200      	movs	r2, #0
 8005376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	d106      	bne.n	800538e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005382:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005384:	4619      	mov	r1, r3
 8005386:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005388:	f7fc f8f8 	bl	800157c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800538c:	e002      	b.n	8005394 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800538e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005390:	f7ff ff50 	bl	8005234 <HAL_UART_RxCpltCallback>
}
 8005394:	bf00      	nop
 8005396:	3770      	adds	r7, #112	; 0x70
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053bc:	085b      	lsrs	r3, r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4619      	mov	r1, r3
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7fc f8da 	bl	800157c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053c8:	e002      	b.n	80053d0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff ff3c 	bl	8005248 <HAL_UART_RxHalfCpltCallback>
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b21      	cmp	r3, #33	; 0x21
 800540a:	d108      	bne.n	800541e <UART_DMAError+0x46>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005418:	68b8      	ldr	r0, [r7, #8]
 800541a:	f000 f91b 	bl	8005654 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b22      	cmp	r3, #34	; 0x22
 800543e:	d108      	bne.n	8005452 <UART_DMAError+0x7a>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800544c:	68b8      	ldr	r0, [r7, #8]
 800544e:	f000 f929 	bl	80056a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0210 	orr.w	r2, r3, #16
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800545e:	68b8      	ldr	r0, [r7, #8]
 8005460:	f7ff fefc 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e03b      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005484:	d037      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fc ff45 	bl	8002314 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e03a      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d023      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d020      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d01d      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d116      	bne.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f8e0 	bl	80056a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2208      	movs	r2, #8
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d0b4      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b098      	sub	sp, #96	; 0x60
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2222      	movs	r2, #34	; 0x22
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	4a3e      	ldr	r2, [pc, #248]	; (8005648 <UART_Start_Receive_DMA+0x128>)
 800554e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005554:	4a3d      	ldr	r2, [pc, #244]	; (800564c <UART_Start_Receive_DMA+0x12c>)
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	4a3c      	ldr	r2, [pc, #240]	; (8005650 <UART_Start_Receive_DMA+0x130>)
 800555e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005568:	f107 0308 	add.w	r3, r7, #8
 800556c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	f7fd f864 	bl	800264c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d019      	beq.n	80055d6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3314      	adds	r3, #20
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	657b      	str	r3, [r7, #84]	; 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800562a:	627a      	str	r2, [r7, #36]	; 0x24
 800562c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6a39      	ldr	r1, [r7, #32]
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3760      	adds	r7, #96	; 0x60
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	08005271 	.word	0x08005271
 800564c:	0800539d 	.word	0x0800539d
 8005650:	080053d9 	.word	0x080053d9

08005654 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60bb      	str	r3, [r7, #8]
   return(result);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	61ba      	str	r2, [r7, #24]
 800567e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6979      	ldr	r1, [r7, #20]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	613b      	str	r3, [r7, #16]
   return(result);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005698:	bf00      	nop
 800569a:	3724      	adds	r7, #36	; 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b095      	sub	sp, #84	; 0x54
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056cc:	643a      	str	r2, [r7, #64]	; 0x40
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d119      	bne.n	8005750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	60bb      	str	r3, [r7, #8]
   return(result);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	647b      	str	r3, [r7, #68]	; 0x44
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800573c:	61ba      	str	r2, [r7, #24]
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6979      	ldr	r1, [r7, #20]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	613b      	str	r3, [r7, #16]
   return(result);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800575e:	bf00      	nop
 8005760:	3754      	adds	r7, #84	; 0x54
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fd69 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b21      	cmp	r3, #33	; 0x21
 80057a4:	d13e      	bne.n	8005824 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d114      	bne.n	80057da <UART_Transmit_IT+0x48>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d110      	bne.n	80057da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	1c9a      	adds	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	621a      	str	r2, [r3, #32]
 80057d8:	e008      	b.n	80057ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	1c59      	adds	r1, r3, #1
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6211      	str	r1, [r2, #32]
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4619      	mov	r1, r3
 80057fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10f      	bne.n	8005820 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005848:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fce4 	bl	8005220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b08c      	sub	sp, #48	; 0x30
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b22      	cmp	r3, #34	; 0x22
 8005874:	f040 80ae 	bne.w	80059d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d117      	bne.n	80058b2 <UART_Receive_IT+0x50>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d113      	bne.n	80058b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	1c9a      	adds	r2, r3, #2
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28
 80058b0:	e026      	b.n	8005900 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d007      	beq.n	80058d6 <UART_Receive_IT+0x74>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <UART_Receive_IT+0x82>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e008      	b.n	80058f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4619      	mov	r1, r3
 800590e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005910:	2b00      	cmp	r3, #0
 8005912:	d15d      	bne.n	80059d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0220 	bic.w	r2, r2, #32
 8005922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	2b01      	cmp	r3, #1
 8005958:	d135      	bne.n	80059c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	623a      	str	r2, [r7, #32]
 8005982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	61bb      	str	r3, [r7, #24]
   return(result);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d10a      	bne.n	80059b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb fddc 	bl	800157c <HAL_UARTEx_RxEventCallback>
 80059c4:	e002      	b.n	80059cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff fc34 	bl	8005234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e002      	b.n	80059d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3730      	adds	r7, #48	; 0x30
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b0c0      	sub	sp, #256	; 0x100
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	68d9      	ldr	r1, [r3, #12]
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	ea40 0301 	orr.w	r3, r0, r1
 8005a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a38:	f021 010c 	bic.w	r1, r1, #12
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a46:	430b      	orrs	r3, r1
 8005a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	6999      	ldr	r1, [r3, #24]
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	ea40 0301 	orr.w	r3, r0, r1
 8005a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b8f      	ldr	r3, [pc, #572]	; (8005cac <UART_SetConfig+0x2cc>)
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d005      	beq.n	8005a80 <UART_SetConfig+0xa0>
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <UART_SetConfig+0x2d0>)
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fd ff5a 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8005a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a88:	e003      	b.n	8005a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8a:	f7fd ff41 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 810c 	bne.w	8005cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	1891      	adds	r1, r2, r2
 8005ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005aba:	415b      	adcs	r3, r3
 8005abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	eb12 0801 	adds.w	r8, r2, r1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	eb43 0901 	adc.w	r9, r3, r1
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	4699      	mov	r9, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	eb18 0303 	adds.w	r3, r8, r3
 8005aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005af0:	462b      	mov	r3, r5
 8005af2:	eb49 0303 	adc.w	r3, r9, r3
 8005af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b0e:	460b      	mov	r3, r1
 8005b10:	18db      	adds	r3, r3, r3
 8005b12:	653b      	str	r3, [r7, #80]	; 0x50
 8005b14:	4613      	mov	r3, r2
 8005b16:	eb42 0303 	adc.w	r3, r2, r3
 8005b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b24:	f7fb f8b8 	bl	8000c98 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4b61      	ldr	r3, [pc, #388]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	011c      	lsls	r4, r3, #4
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b50:	415b      	adcs	r3, r3
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b58:	4641      	mov	r1, r8
 8005b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5e:	4649      	mov	r1, r9
 8005b60:	eb43 0b01 	adc.w	fp, r3, r1
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b78:	4692      	mov	sl, r2
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b86:	464b      	mov	r3, r9
 8005b88:	eb4b 0303 	adc.w	r3, fp, r3
 8005b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	18db      	adds	r3, r3, r3
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8005baa:	4613      	mov	r3, r2
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bba:	f7fb f86d 	bl	8000c98 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2264      	movs	r2, #100	; 0x64
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	1acb      	subs	r3, r1, r3
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bda:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005be8:	441c      	add	r4, r3
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	1891      	adds	r1, r2, r2
 8005c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c04:	415b      	adcs	r3, r3
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	1851      	adds	r1, r2, r1
 8005c10:	6339      	str	r1, [r7, #48]	; 0x30
 8005c12:	4649      	mov	r1, r9
 8005c14:	414b      	adcs	r3, r1
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c24:	4659      	mov	r1, fp
 8005c26:	00cb      	lsls	r3, r1, #3
 8005c28:	4651      	mov	r1, sl
 8005c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2e:	4651      	mov	r1, sl
 8005c30:	00ca      	lsls	r2, r1, #3
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c40:	464b      	mov	r3, r9
 8005c42:	460a      	mov	r2, r1
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c60:	460b      	mov	r3, r1
 8005c62:	18db      	adds	r3, r3, r3
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c66:	4613      	mov	r3, r2
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c76:	f7fb f80f 	bl	8000c98 <__aeabi_uldivmod>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005c80:	fba3 1302 	umull	r1, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	2164      	movs	r1, #100	; 0x64
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	3332      	adds	r3, #50	; 0x32
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <UART_SetConfig+0x2d4>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4422      	add	r2, r4
 8005ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca8:	e106      	b.n	8005eb8 <UART_SetConfig+0x4d8>
 8005caa:	bf00      	nop
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	6239      	str	r1, [r7, #32]
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cda:	4641      	mov	r1, r8
 8005cdc:	1854      	adds	r4, r2, r1
 8005cde:	4649      	mov	r1, r9
 8005ce0:	eb43 0501 	adc.w	r5, r3, r1
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	00eb      	lsls	r3, r5, #3
 8005cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf2:	00e2      	lsls	r2, r4, #3
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	18e3      	adds	r3, r4, r3
 8005cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d00:	464b      	mov	r3, r9
 8005d02:	eb45 0303 	adc.w	r3, r5, r3
 8005d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d26:	4629      	mov	r1, r5
 8005d28:	008b      	lsls	r3, r1, #2
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d30:	4621      	mov	r1, r4
 8005d32:	008a      	lsls	r2, r1, #2
 8005d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d38:	f7fa ffae 	bl	8000c98 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b60      	ldr	r3, [pc, #384]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011c      	lsls	r4, r3, #4
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	61b9      	str	r1, [r7, #24]
 8005d64:	415b      	adcs	r3, r3
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	1851      	adds	r1, r2, r1
 8005d70:	6139      	str	r1, [r7, #16]
 8005d72:	4649      	mov	r1, r9
 8005d74:	414b      	adcs	r3, r1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d84:	4659      	mov	r1, fp
 8005d86:	00cb      	lsls	r3, r1, #3
 8005d88:	4651      	mov	r1, sl
 8005d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8e:	4651      	mov	r1, sl
 8005d90:	00ca      	lsls	r2, r1, #3
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	4642      	mov	r2, r8
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da0:	464b      	mov	r3, r9
 8005da2:	460a      	mov	r2, r1
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	4641      	mov	r1, r8
 8005dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dce:	4641      	mov	r1, r8
 8005dd0:	008a      	lsls	r2, r1, #2
 8005dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dd6:	f7fa ff5f 	bl	8000c98 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005de2:	fba3 2301 	umull	r2, r3, r3, r1
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2264      	movs	r2, #100	; 0x64
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	1acb      	subs	r3, r1, r3
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	3332      	adds	r3, #50	; 0x32
 8005df4:	4a33      	ldr	r2, [pc, #204]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e00:	441c      	add	r4, r3
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e06:	2200      	movs	r2, #0
 8005e08:	673b      	str	r3, [r7, #112]	; 0x70
 8005e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8005e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e20:	4641      	mov	r1, r8
 8005e22:	1851      	adds	r1, r2, r1
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	4649      	mov	r1, r9
 8005e28:	414b      	adcs	r3, r1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e38:	4659      	mov	r1, fp
 8005e3a:	00cb      	lsls	r3, r1, #3
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e42:	4651      	mov	r1, sl
 8005e44:	00ca      	lsls	r2, r1, #3
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e52:	464b      	mov	r3, r9
 8005e54:	460a      	mov	r2, r1
 8005e56:	eb42 0303 	adc.w	r3, r2, r3
 8005e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	663b      	str	r3, [r7, #96]	; 0x60
 8005e66:	667a      	str	r2, [r7, #100]	; 0x64
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e74:	4649      	mov	r1, r9
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7e:	4641      	mov	r1, r8
 8005e80:	008a      	lsls	r2, r1, #2
 8005e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e86:	f7fa ff07 	bl	8000c98 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <UART_SetConfig+0x4e4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4422      	add	r2, r4
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec4:	51eb851f 	.word	0x51eb851f

08005ec8 <__NVIC_SetPriority>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	; (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <SysTick_Handler+0x1c>)
 8005f22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f24:	f001 fd28 	bl	8007978 <xTaskGetSchedulerState>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f2e:	f002 fb13 	bl	8008558 <xPortSysTickHandler>
  }
}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000e010 	.word	0xe000e010

08005f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f40:	2100      	movs	r1, #0
 8005f42:	f06f 0004 	mvn.w	r0, #4
 8005f46:	f7ff ffbf 	bl	8005ec8 <__NVIC_SetPriority>
#endif
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f56:	f3ef 8305 	mrs	r3, IPSR
 8005f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f62:	f06f 0305 	mvn.w	r3, #5
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	e00c      	b.n	8005f84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <osKernelInitialize+0x44>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <osKernelInitialize+0x44>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e002      	b.n	8005f84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f84:	687b      	ldr	r3, [r7, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000e08 	.word	0x20000e08

08005f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9e:	f3ef 8305 	mrs	r3, IPSR
 8005fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005faa:	f06f 0305 	mvn.w	r3, #5
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	e010      	b.n	8005fd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <osKernelStart+0x48>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d109      	bne.n	8005fce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fba:	f7ff ffbf 	bl	8005f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <osKernelStart+0x48>)
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fc4:	f001 f87c 	bl	80070c0 <vTaskStartScheduler>
      stat = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	e002      	b.n	8005fd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fd4:	687b      	ldr	r3, [r7, #4]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000e08 	.word	0x20000e08

08005fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	; 0x38
 8005fe8:	af04      	add	r7, sp, #16
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff4:	f3ef 8305 	mrs	r3, IPSR
 8005ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8005ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d17e      	bne.n	80060fe <osThreadNew+0x11a>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d07b      	beq.n	80060fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006006:	2380      	movs	r3, #128	; 0x80
 8006008:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800600a:	2318      	movs	r3, #24
 800600c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d045      	beq.n	80060aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <osThreadNew+0x48>
        name = attr->name;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <osThreadNew+0x6e>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b38      	cmp	r3, #56	; 0x38
 8006044:	d805      	bhi.n	8006052 <osThreadNew+0x6e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <osThreadNew+0x72>
        return (NULL);
 8006052:	2300      	movs	r3, #0
 8006054:	e054      	b.n	8006100 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <osThreadNew+0xa8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2ba7      	cmp	r3, #167	; 0xa7
 8006074:	d90a      	bls.n	800608c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800607a:	2b00      	cmp	r3, #0
 800607c:	d006      	beq.n	800608c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <osThreadNew+0xa8>
        mem = 1;
 8006086:	2301      	movs	r3, #1
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e010      	b.n	80060ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <osThreadNew+0xca>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <osThreadNew+0xca>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <osThreadNew+0xca>
          mem = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	e001      	b.n	80060ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d110      	bne.n	80060d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060bc:	9202      	str	r2, [sp, #8]
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fe0c 	bl	8006ce8 <xTaskCreateStatic>
 80060d0:	4603      	mov	r3, r0
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	e013      	b.n	80060fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d110      	bne.n	80060fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fe57 	bl	8006da2 <xTaskCreate>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <osThreadNew+0x11a>
            hTask = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060fe:	693b      	ldr	r3, [r7, #16]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3728      	adds	r7, #40	; 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006110:	f3ef 8305 	mrs	r3, IPSR
 8006114:	60bb      	str	r3, [r7, #8]
  return(result);
 8006116:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <osDelay+0x1c>
    stat = osErrorISR;
 800611c:	f06f 0305 	mvn.w	r3, #5
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e007      	b.n	8006134 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <osDelay+0x2c>
      vTaskDelay(ticks);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 ff92 	bl	8007058 <vTaskDelay>
    }
  }

  return (stat);
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a07      	ldr	r2, [pc, #28]	; (800616c <vApplicationGetIdleTaskMemory+0x2c>)
 8006150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4a06      	ldr	r2, [pc, #24]	; (8006170 <vApplicationGetIdleTaskMemory+0x30>)
 8006156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2280      	movs	r2, #128	; 0x80
 800615c:	601a      	str	r2, [r3, #0]
}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000e0c 	.word	0x20000e0c
 8006170:	20000eb4 	.word	0x20000eb4

08006174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a07      	ldr	r2, [pc, #28]	; (80061a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <vApplicationGetTimerTaskMemory+0x30>)
 800618a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006192:	601a      	str	r2, [r3, #0]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	200010b4 	.word	0x200010b4
 80061a4:	2000115c 	.word	0x2000115c

080061a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f103 0208 	add.w	r2, r3, #8
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f103 0208 	add.w	r2, r3, #8
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f103 0208 	add.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
}
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006260:	d103      	bne.n	800626a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e00c      	b.n	8006284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3308      	adds	r3, #8
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e002      	b.n	8006278 <vListInsert+0x2e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	d2f6      	bcs.n	8006272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6892      	ldr	r2, [r2, #8]
 80062d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d103      	bne.n	80062f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1e5a      	subs	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800633a:	f002 f87b 	bl	8008434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	3b01      	subs	r3, #1
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	441a      	add	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22ff      	movs	r2, #255	; 0xff
 8006386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d114      	bne.n	80063ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3310      	adds	r3, #16
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f929 	bl	80075f4 <xTaskRemoveFromEventList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <xQueueGenericReset+0xcc>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	e009      	b.n	80063ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3310      	adds	r3, #16
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fef2 	bl	80061a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff feed 	bl	80061a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ce:	f002 f861 	bl	8008494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063d2:	2301      	movs	r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <xQueueGenericCreateStatic+0x52>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <xQueueGenericCreateStatic+0x56>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <xQueueGenericCreateStatic+0x58>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	623b      	str	r3, [r7, #32]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <xQueueGenericCreateStatic+0x7e>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueGenericCreateStatic+0x82>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueGenericCreateStatic+0x84>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61fb      	str	r3, [r7, #28]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800647e:	2350      	movs	r3, #80	; 0x50
 8006480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b50      	cmp	r3, #80	; 0x50
 8006486:	d00a      	beq.n	800649e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800649e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f805 	bl	80064d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064fe:	2101      	movs	r1, #1
 8006500:	69b8      	ldr	r0, [r7, #24]
 8006502:	f7ff ff05 	bl	8006310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xQueueGenericSend+0x32>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <xQueueGenericSend+0x40>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <xQueueGenericSend+0x44>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <xQueueGenericSend+0x46>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <xQueueGenericSend+0x60>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d103      	bne.n	8006586 <xQueueGenericSend+0x6e>
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <xQueueGenericSend+0x72>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <xQueueGenericSend+0x74>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a6:	f001 f9e7 	bl	8007978 <xTaskGetSchedulerState>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <xQueueGenericSend+0x9e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <xQueueGenericSend+0xa2>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueGenericSend+0xa4>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d6:	f001 ff2d 	bl	8008434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <xQueueGenericSend+0xd4>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d129      	bne.n	8006640 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f2:	f000 fa0b 	bl	8006a0c <prvCopyDataToQueue>
 80065f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d010      	beq.n	8006622 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fff5 	bl	80075f4 <xTaskRemoveFromEventList>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <xQueueGenericSend+0x1f8>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	e00a      	b.n	8006638 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <xQueueGenericSend+0x1f8>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006638:	f001 ff2c 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	e063      	b.n	8006708 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006646:	f001 ff25 	bl	8008494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800664a:	2300      	movs	r3, #0
 800664c:	e05c      	b.n	8006708 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f82f 	bl	80076bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006662:	f001 ff17 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006666:	f000 fd9b 	bl	80071a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800666a:	f001 fee3 	bl	8008434 <vPortEnterCritical>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006674:	b25b      	sxtb	r3, r3
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667a:	d103      	bne.n	8006684 <xQueueGenericSend+0x16c>
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800668a:	b25b      	sxtb	r3, r3
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006690:	d103      	bne.n	800669a <xQueueGenericSend+0x182>
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800669a:	f001 fefb 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800669e:	1d3a      	adds	r2, r7, #4
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f81e 	bl	80076e8 <xTaskCheckForTimeOut>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d124      	bne.n	80066fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b4:	f000 faa2 	bl	8006bfc <prvIsQueueFull>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	3310      	adds	r3, #16
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 ff44 	bl	8007554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ce:	f000 fa2d 	bl	8006b2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066d2:	f000 fd73 	bl	80071bc <xTaskResumeAll>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f af7c 	bne.w	80065d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <xQueueGenericSend+0x1f8>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	e772      	b.n	80065d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f2:	f000 fa1b 	bl	8006b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f6:	f000 fd61 	bl	80071bc <xTaskResumeAll>
 80066fa:	e76c      	b.n	80065d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066fe:	f000 fa15 	bl	8006b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006702:	f000 fd5b 	bl	80071bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006708:	4618      	mov	r0, r3
 800670a:	3738      	adds	r7, #56	; 0x38
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b090      	sub	sp, #64	; 0x40
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <xQueueGenericSendFromISR+0x3c>
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <xQueueGenericSendFromISR+0x40>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <xQueueGenericSendFromISR+0x42>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d103      	bne.n	800677e <xQueueGenericSendFromISR+0x6a>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <xQueueGenericSendFromISR+0x6e>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueGenericSendFromISR+0x70>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	623b      	str	r3, [r7, #32]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679e:	f001 ff2b 	bl	80085f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067a2:	f3ef 8211 	mrs	r2, BASEPRI
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	61fa      	str	r2, [r7, #28]
 80067b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <xQueueGenericSendFromISR+0xbc>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d12f      	bne.n	8006830 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067e6:	f000 f911 	bl	8006a0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f2:	d112      	bne.n	800681a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d016      	beq.n	800682a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	3324      	adds	r3, #36	; 0x24
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fef7 	bl	80075f4 <xTaskRemoveFromEventList>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e007      	b.n	800682a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800681a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800681e:	3301      	adds	r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	b25a      	sxtb	r2, r3
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800682a:	2301      	movs	r3, #1
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800682e:	e001      	b.n	8006834 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006830:	2300      	movs	r3, #0
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800683e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006842:	4618      	mov	r0, r3
 8006844:	3740      	adds	r7, #64	; 0x40
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08c      	sub	sp, #48	; 0x30
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <xQueueReceive+0x30>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	623b      	str	r3, [r7, #32]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <xQueueReceive+0x3e>
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueReceive+0x42>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueReceive+0x44>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueReceive+0x5e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61fb      	str	r3, [r7, #28]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068aa:	f001 f865 	bl	8007978 <xTaskGetSchedulerState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xQueueReceive+0x6e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xQueueReceive+0x72>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueReceive+0x74>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueReceive+0x8e>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	61bb      	str	r3, [r7, #24]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068da:	f001 fdab 	bl	8008434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01f      	beq.n	800692a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ee:	f000 f8f7 	bl	8006ae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fe74 	bl	80075f4 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006912:	4b3d      	ldr	r3, [pc, #244]	; (8006a08 <xQueueReceive+0x1bc>)
 8006914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006922:	f001 fdb7 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 8006926:	2301      	movs	r3, #1
 8006928:	e069      	b.n	80069fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d103      	bne.n	8006938 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006930:	f001 fdb0 	bl	8008494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006934:	2300      	movs	r3, #0
 8006936:	e062      	b.n	80069fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800693e:	f107 0310 	add.w	r3, r7, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f000 feba 	bl	80076bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800694c:	f001 fda2 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006950:	f000 fc26 	bl	80071a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006954:	f001 fd6e 	bl	8008434 <vPortEnterCritical>
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800695e:	b25b      	sxtb	r3, r3
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006964:	d103      	bne.n	800696e <xQueueReceive+0x122>
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006974:	b25b      	sxtb	r3, r3
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800697a:	d103      	bne.n	8006984 <xQueueReceive+0x138>
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006984:	f001 fd86 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006988:	1d3a      	adds	r2, r7, #4
 800698a:	f107 0310 	add.w	r3, r7, #16
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fea9 	bl	80076e8 <xTaskCheckForTimeOut>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d123      	bne.n	80069e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800699c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699e:	f000 f917 	bl	8006bd0 <prvIsQueueEmpty>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d017      	beq.n	80069d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4611      	mov	r1, r2
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fdcf 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b8:	f000 f8b8 	bl	8006b2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069bc:	f000 fbfe 	bl	80071bc <xTaskResumeAll>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d189      	bne.n	80068da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <xQueueReceive+0x1bc>)
 80069c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	e780      	b.n	80068da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	f000 f8a7 	bl	8006b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069de:	f000 fbed 	bl	80071bc <xTaskResumeAll>
 80069e2:	e77a      	b.n	80068da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e6:	f000 f8a1 	bl	8006b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ea:	f000 fbe7 	bl	80071bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f0:	f000 f8ee 	bl	8006bd0 <prvIsQueueEmpty>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f43f af6f 	beq.w	80068da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3730      	adds	r7, #48	; 0x30
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d14d      	bne.n	8006ace <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 ffbc 	bl	80079b4 <xTaskPriorityDisinherit>
 8006a3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	e043      	b.n	8006ace <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d119      	bne.n	8006a80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6858      	ldr	r0, [r3, #4]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	461a      	mov	r2, r3
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	f003 fb07 	bl	800a06a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	441a      	add	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d32b      	bcc.n	8006ace <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	e026      	b.n	8006ace <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68d8      	ldr	r0, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	f003 faed 	bl	800a06a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	425b      	negs	r3, r3
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d207      	bcs.n	8006abc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	441a      	add	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d105      	bne.n	8006ace <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ad6:	697b      	ldr	r3, [r7, #20]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d018      	beq.n	8006b24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	441a      	add	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d303      	bcc.n	8006b14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68d9      	ldr	r1, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	f003 faa3 	bl	800a06a <memcpy>
	}
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b34:	f001 fc7e 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b40:	e011      	b.n	8006b66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d012      	beq.n	8006b70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3324      	adds	r3, #36	; 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fd50 	bl	80075f4 <xTaskRemoveFromEventList>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b5a:	f000 fe27 	bl	80077ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dce9      	bgt.n	8006b42 <prvUnlockQueue+0x16>
 8006b6e:	e000      	b.n	8006b72 <prvUnlockQueue+0x46>
					break;
 8006b70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	22ff      	movs	r2, #255	; 0xff
 8006b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b7a:	f001 fc8b 	bl	8008494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b7e:	f001 fc59 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b8a:	e011      	b.n	8006bb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3310      	adds	r3, #16
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fd2b 	bl	80075f4 <xTaskRemoveFromEventList>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ba4:	f000 fe02 	bl	80077ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dce9      	bgt.n	8006b8c <prvUnlockQueue+0x60>
 8006bb8:	e000      	b.n	8006bbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	22ff      	movs	r2, #255	; 0xff
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006bc4:	f001 fc66 	bl	8008494 <vPortExitCritical>
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bd8:	f001 fc2c 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e001      	b.n	8006bee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bee:	f001 fc51 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c04:	f001 fc16 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d102      	bne.n	8006c1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e001      	b.n	8006c1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c1e:	f001 fc39 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006c22:	68fb      	ldr	r3, [r7, #12]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e014      	b.n	8006c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c3c:	4a0f      	ldr	r2, [pc, #60]	; (8006c7c <vQueueAddToRegistry+0x50>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c48:	490c      	ldr	r1, [pc, #48]	; (8006c7c <vQueueAddToRegistry+0x50>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c52:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <vQueueAddToRegistry+0x50>)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c5e:	e006      	b.n	8006c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	d9e7      	bls.n	8006c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	2000155c 	.word	0x2000155c

08006c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c90:	f001 fbd0 	bl	8008434 <vPortEnterCritical>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca0:	d103      	bne.n	8006caa <vQueueWaitForMessageRestricted+0x2a>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb6:	d103      	bne.n	8006cc0 <vQueueWaitForMessageRestricted+0x40>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc0:	f001 fbe8 	bl	8008494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3324      	adds	r3, #36	; 0x24
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc61 	bl	800759c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f7ff ff26 	bl	8006b2c <prvUnlockQueue>
	}
 8006ce0:	bf00      	nop
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	623b      	str	r3, [r7, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	61fb      	str	r3, [r7, #28]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d2e:	23a8      	movs	r3, #168	; 0xa8
 8006d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2ba8      	cmp	r3, #168	; 0xa8
 8006d36:	d00a      	beq.n	8006d4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61bb      	str	r3, [r7, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01e      	beq.n	8006d94 <xTaskCreateStatic+0xac>
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f850 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8e:	f000 f8f3 	bl	8006f78 <prvAddNewTaskToReadyList>
 8006d92:	e001      	b.n	8006d98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d98:	697b      	ldr	r3, [r7, #20]
	}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3728      	adds	r7, #40	; 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b08c      	sub	sp, #48	; 0x30
 8006da6:	af04      	add	r7, sp, #16
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fc5e 	bl	8008678 <pvPortMalloc>
 8006dbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dc4:	20a8      	movs	r0, #168	; 0xa8
 8006dc6:	f001 fc57 	bl	8008678 <pvPortMalloc>
 8006dca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006dd8:	e005      	b.n	8006de6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f001 fd18 	bl	8008810 <vPortFree>
 8006de0:	e001      	b.n	8006de6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d017      	beq.n	8006e1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006df4:	88fa      	ldrh	r2, [r7, #6]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	9302      	str	r3, [sp, #8]
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f80e 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e10:	69f8      	ldr	r0, [r7, #28]
 8006e12:	f000 f8b1 	bl	8006f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e002      	b.n	8006e22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e22:	69bb      	ldr	r3, [r7, #24]
	}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	461a      	mov	r2, r3
 8006e44:	21a5      	movs	r1, #165	; 0xa5
 8006e46:	f003 f83a 	bl	8009ebe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e54:	3b01      	subs	r3, #1
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01f      	beq.n	8006eca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e012      	b.n	8006eb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3334      	adds	r3, #52	; 0x34
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d006      	beq.n	8006ebe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d9e9      	bls.n	8006e90 <prvInitialiseNewTask+0x64>
 8006ebc:	e000      	b.n	8006ec0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ec8:	e003      	b.n	8006ed2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	2b37      	cmp	r3, #55	; 0x37
 8006ed6:	d901      	bls.n	8006edc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ed8:	2337      	movs	r3, #55	; 0x37
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	2200      	movs	r2, #0
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff f978 	bl	80061e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	3318      	adds	r3, #24
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff f973 	bl	80061e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	3354      	adds	r3, #84	; 0x54
 8006f2c:	224c      	movs	r2, #76	; 0x4c
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 ffc4 	bl	8009ebe <memset>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <prvInitialiseNewTask+0x140>)
 8006f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <prvInitialiseNewTask+0x144>)
 8006f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	4a0b      	ldr	r2, [pc, #44]	; (8006f74 <prvInitialiseNewTask+0x148>)
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	69b8      	ldr	r0, [r7, #24]
 8006f4e:	f001 f941 	bl	80081d4 <pxPortInitialiseStack>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f64:	bf00      	nop
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200057f0 	.word	0x200057f0
 8006f70:	20005858 	.word	0x20005858
 8006f74:	200058c0 	.word	0x200058c0

08006f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f80:	f001 fa58 	bl	8008434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f84:	4b2d      	ldr	r3, [pc, #180]	; (800703c <prvAddNewTaskToReadyList+0xc4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a2c      	ldr	r2, [pc, #176]	; (800703c <prvAddNewTaskToReadyList+0xc4>)
 8006f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f8e:	4b2c      	ldr	r3, [pc, #176]	; (8007040 <prvAddNewTaskToReadyList+0xc8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f96:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <prvAddNewTaskToReadyList+0xc8>)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f9c:	4b27      	ldr	r3, [pc, #156]	; (800703c <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d110      	bne.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fa4:	f000 fc26 	bl	80077f4 <prvInitialiseTaskLists>
 8006fa8:	e00d      	b.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006faa:	4b26      	ldr	r3, [pc, #152]	; (8007044 <prvAddNewTaskToReadyList+0xcc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fb2:	4b23      	ldr	r3, [pc, #140]	; (8007040 <prvAddNewTaskToReadyList+0xc8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d802      	bhi.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <prvAddNewTaskToReadyList+0xc8>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fc6:	4b20      	ldr	r3, [pc, #128]	; (8007048 <prvAddNewTaskToReadyList+0xd0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <prvAddNewTaskToReadyList+0xd0>)
 8006fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fd0:	4b1d      	ldr	r3, [pc, #116]	; (8007048 <prvAddNewTaskToReadyList+0xd0>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <prvAddNewTaskToReadyList+0xd4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <prvAddNewTaskToReadyList+0x74>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a18      	ldr	r2, [pc, #96]	; (800704c <prvAddNewTaskToReadyList+0xd4>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <prvAddNewTaskToReadyList+0xd8>)
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7ff f8fd 	bl	8006202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007008:	f001 fa44 	bl	8008494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <prvAddNewTaskToReadyList+0xcc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <prvAddNewTaskToReadyList+0xc8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	429a      	cmp	r2, r3
 8007020:	d207      	bcs.n	8007032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <prvAddNewTaskToReadyList+0xdc>)
 8007024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20001a70 	.word	0x20001a70
 8007040:	2000159c 	.word	0x2000159c
 8007044:	20001a7c 	.word	0x20001a7c
 8007048:	20001a8c 	.word	0x20001a8c
 800704c:	20001a78 	.word	0x20001a78
 8007050:	200015a0 	.word	0x200015a0
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d017      	beq.n	800709a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800706a:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <vTaskDelay+0x60>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <vTaskDelay+0x30>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007088:	f000 f88a 	bl	80071a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fcfe 	bl	8007a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007094:	f000 f892 	bl	80071bc <xTaskResumeAll>
 8007098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d107      	bne.n	80070b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <vTaskDelay+0x64>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20001a98 	.word	0x20001a98
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070ce:	463a      	mov	r2, r7
 80070d0:	1d39      	adds	r1, r7, #4
 80070d2:	f107 0308 	add.w	r3, r7, #8
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff f832 	bl	8006140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	9202      	str	r2, [sp, #8]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	2300      	movs	r3, #0
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	460a      	mov	r2, r1
 80070ee:	4924      	ldr	r1, [pc, #144]	; (8007180 <vTaskStartScheduler+0xc0>)
 80070f0:	4824      	ldr	r0, [pc, #144]	; (8007184 <vTaskStartScheduler+0xc4>)
 80070f2:	f7ff fdf9 	bl	8006ce8 <xTaskCreateStatic>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4a23      	ldr	r2, [pc, #140]	; (8007188 <vTaskStartScheduler+0xc8>)
 80070fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <vTaskStartScheduler+0xc8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007104:	2301      	movs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e001      	b.n	800710e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d102      	bne.n	800711a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007114:	f000 fd10 	bl	8007b38 <xTimerCreateTimerTask>
 8007118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d11b      	bne.n	8007158 <vTaskStartScheduler+0x98>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	613b      	str	r3, [r7, #16]
}
 8007132:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007134:	4b15      	ldr	r3, [pc, #84]	; (800718c <vTaskStartScheduler+0xcc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3354      	adds	r3, #84	; 0x54
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <vTaskStartScheduler+0xd0>)
 800713c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <vTaskStartScheduler+0xd4>)
 8007140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <vTaskStartScheduler+0xd8>)
 8007148:	2201      	movs	r2, #1
 800714a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800714c:	4b13      	ldr	r3, [pc, #76]	; (800719c <vTaskStartScheduler+0xdc>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007152:	f001 f8cd 	bl	80082f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007156:	e00e      	b.n	8007176 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715e:	d10a      	bne.n	8007176 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <vTaskStartScheduler+0xb4>
}
 8007176:	bf00      	nop
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800f254 	.word	0x0800f254
 8007184:	080077c5 	.word	0x080077c5
 8007188:	20001a94 	.word	0x20001a94
 800718c:	2000159c 	.word	0x2000159c
 8007190:	200000e8 	.word	0x200000e8
 8007194:	20001a90 	.word	0x20001a90
 8007198:	20001a7c 	.word	0x20001a7c
 800719c:	20001a74 	.word	0x20001a74

080071a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <vTaskSuspendAll+0x18>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	4a03      	ldr	r2, [pc, #12]	; (80071b8 <vTaskSuspendAll+0x18>)
 80071ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	20001a98 	.word	0x20001a98

080071bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ca:	4b42      	ldr	r3, [pc, #264]	; (80072d4 <xTaskResumeAll+0x118>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	603b      	str	r3, [r7, #0]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071e8:	f001 f924 	bl	8008434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <xTaskResumeAll+0x118>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	4a38      	ldr	r2, [pc, #224]	; (80072d4 <xTaskResumeAll+0x118>)
 80071f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071f6:	4b37      	ldr	r3, [pc, #220]	; (80072d4 <xTaskResumeAll+0x118>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d162      	bne.n	80072c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071fe:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <xTaskResumeAll+0x11c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d05e      	beq.n	80072c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007206:	e02f      	b.n	8007268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007208:	4b34      	ldr	r3, [pc, #208]	; (80072dc <xTaskResumeAll+0x120>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3318      	adds	r3, #24
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff f851 	bl	80062bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3304      	adds	r3, #4
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff f84c 	bl	80062bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <xTaskResumeAll+0x124>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d903      	bls.n	8007238 <xTaskResumeAll+0x7c>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <xTaskResumeAll+0x124>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4a27      	ldr	r2, [pc, #156]	; (80072e4 <xTaskResumeAll+0x128>)
 8007246:	441a      	add	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe ffd7 	bl	8006202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <xTaskResumeAll+0x12c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <xTaskResumeAll+0x130>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007268:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <xTaskResumeAll+0x120>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1cb      	bne.n	8007208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007276:	f000 fb5f 	bl	8007938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <xTaskResumeAll+0x134>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d010      	beq.n	80072a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007286:	f000 f847 	bl	8007318 <xTaskIncrementTick>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007290:	4b16      	ldr	r3, [pc, #88]	; (80072ec <xTaskResumeAll+0x130>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f1      	bne.n	8007286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <xTaskResumeAll+0x134>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072a8:	4b10      	ldr	r3, [pc, #64]	; (80072ec <xTaskResumeAll+0x130>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <xTaskResumeAll+0x138>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 f8e6 	bl	8008494 <vPortExitCritical>

	return xAlreadyYielded;
 80072c8:	68bb      	ldr	r3, [r7, #8]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20001a98 	.word	0x20001a98
 80072d8:	20001a70 	.word	0x20001a70
 80072dc:	20001a30 	.word	0x20001a30
 80072e0:	20001a78 	.word	0x20001a78
 80072e4:	200015a0 	.word	0x200015a0
 80072e8:	2000159c 	.word	0x2000159c
 80072ec:	20001a84 	.word	0x20001a84
 80072f0:	20001a80 	.word	0x20001a80
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <xTaskGetTickCount+0x1c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007304:	687b      	ldr	r3, [r7, #4]
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20001a74 	.word	0x20001a74

08007318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007322:	4b4f      	ldr	r3, [pc, #316]	; (8007460 <xTaskIncrementTick+0x148>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 808f 	bne.w	800744a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800732c:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <xTaskIncrementTick+0x14c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007334:	4a4b      	ldr	r2, [pc, #300]	; (8007464 <xTaskIncrementTick+0x14c>)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d120      	bne.n	8007382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <xTaskIncrementTick+0x150>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <xTaskIncrementTick+0x48>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	603b      	str	r3, [r7, #0]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <xTaskIncrementTick+0x46>
 8007360:	4b41      	ldr	r3, [pc, #260]	; (8007468 <xTaskIncrementTick+0x150>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	4b41      	ldr	r3, [pc, #260]	; (800746c <xTaskIncrementTick+0x154>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3f      	ldr	r2, [pc, #252]	; (8007468 <xTaskIncrementTick+0x150>)
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	4a3f      	ldr	r2, [pc, #252]	; (800746c <xTaskIncrementTick+0x154>)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <xTaskIncrementTick+0x158>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a3d      	ldr	r2, [pc, #244]	; (8007470 <xTaskIncrementTick+0x158>)
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	f000 fadb 	bl	8007938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007382:	4b3c      	ldr	r3, [pc, #240]	; (8007474 <xTaskIncrementTick+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	d349      	bcc.n	8007420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738c:	4b36      	ldr	r3, [pc, #216]	; (8007468 <xTaskIncrementTick+0x150>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d104      	bne.n	80073a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007396:	4b37      	ldr	r3, [pc, #220]	; (8007474 <xTaskIncrementTick+0x15c>)
 8007398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800739c:	601a      	str	r2, [r3, #0]
					break;
 800739e:	e03f      	b.n	8007420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a0:	4b31      	ldr	r3, [pc, #196]	; (8007468 <xTaskIncrementTick+0x150>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d203      	bcs.n	80073c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073b8:	4a2e      	ldr	r2, [pc, #184]	; (8007474 <xTaskIncrementTick+0x15c>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073be:	e02f      	b.n	8007420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe ff79 	bl	80062bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	3318      	adds	r3, #24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe ff70 	bl	80062bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <xTaskIncrementTick+0x160>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d903      	bls.n	80073f0 <xTaskIncrementTick+0xd8>
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a22      	ldr	r2, [pc, #136]	; (8007478 <xTaskIncrementTick+0x160>)
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4a1f      	ldr	r2, [pc, #124]	; (800747c <xTaskIncrementTick+0x164>)
 80073fe:	441a      	add	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3304      	adds	r3, #4
 8007404:	4619      	mov	r1, r3
 8007406:	4610      	mov	r0, r2
 8007408:	f7fe fefb 	bl	8006202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <xTaskIncrementTick+0x168>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	429a      	cmp	r2, r3
 8007418:	d3b8      	bcc.n	800738c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800741e:	e7b5      	b.n	800738c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <xTaskIncrementTick+0x168>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	4915      	ldr	r1, [pc, #84]	; (800747c <xTaskIncrementTick+0x164>)
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d901      	bls.n	800743c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <xTaskIncrementTick+0x16c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	e004      	b.n	8007454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800744a:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <xTaskIncrementTick+0x170>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3301      	adds	r3, #1
 8007450:	4a0d      	ldr	r2, [pc, #52]	; (8007488 <xTaskIncrementTick+0x170>)
 8007452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007454:	697b      	ldr	r3, [r7, #20]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20001a98 	.word	0x20001a98
 8007464:	20001a74 	.word	0x20001a74
 8007468:	20001a28 	.word	0x20001a28
 800746c:	20001a2c 	.word	0x20001a2c
 8007470:	20001a88 	.word	0x20001a88
 8007474:	20001a90 	.word	0x20001a90
 8007478:	20001a78 	.word	0x20001a78
 800747c:	200015a0 	.word	0x200015a0
 8007480:	2000159c 	.word	0x2000159c
 8007484:	20001a84 	.word	0x20001a84
 8007488:	20001a80 	.word	0x20001a80

0800748c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007492:	4b2a      	ldr	r3, [pc, #168]	; (800753c <vTaskSwitchContext+0xb0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800749a:	4b29      	ldr	r3, [pc, #164]	; (8007540 <vTaskSwitchContext+0xb4>)
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074a0:	e046      	b.n	8007530 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80074a2:	4b27      	ldr	r3, [pc, #156]	; (8007540 <vTaskSwitchContext+0xb4>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a8:	4b26      	ldr	r3, [pc, #152]	; (8007544 <vTaskSwitchContext+0xb8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e010      	b.n	80074d2 <vTaskSwitchContext+0x46>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <vTaskSwitchContext+0x40>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	607b      	str	r3, [r7, #4]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <vTaskSwitchContext+0x3e>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	491d      	ldr	r1, [pc, #116]	; (8007548 <vTaskSwitchContext+0xbc>)
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0e4      	beq.n	80074b0 <vTaskSwitchContext+0x24>
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a15      	ldr	r2, [pc, #84]	; (8007548 <vTaskSwitchContext+0xbc>)
 80074f2:	4413      	add	r3, r2
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3308      	adds	r3, #8
 8007508:	429a      	cmp	r2, r3
 800750a:	d104      	bne.n	8007516 <vTaskSwitchContext+0x8a>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	605a      	str	r2, [r3, #4]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a0b      	ldr	r2, [pc, #44]	; (800754c <vTaskSwitchContext+0xc0>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4a08      	ldr	r2, [pc, #32]	; (8007544 <vTaskSwitchContext+0xb8>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <vTaskSwitchContext+0xc0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3354      	adds	r3, #84	; 0x54
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <vTaskSwitchContext+0xc4>)
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20001a98 	.word	0x20001a98
 8007540:	20001a84 	.word	0x20001a84
 8007544:	20001a78 	.word	0x20001a78
 8007548:	200015a0 	.word	0x200015a0
 800754c:	2000159c 	.word	0x2000159c
 8007550:	200000e8 	.word	0x200000e8

08007554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <vTaskPlaceOnEventList+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3318      	adds	r3, #24
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fe fe61 	bl	800624a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007588:	2101      	movs	r1, #1
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f000 fa80 	bl	8007a90 <prvAddCurrentTaskToDelayedList>
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	2000159c 	.word	0x2000159c

0800759c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	617b      	str	r3, [r7, #20]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3318      	adds	r3, #24
 80075ca:	4619      	mov	r1, r3
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7fe fe18 	bl	8006202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68b8      	ldr	r0, [r7, #8]
 80075e2:	f000 fa55 	bl	8007a90 <prvAddCurrentTaskToDelayedList>
	}
 80075e6:	bf00      	nop
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	2000159c 	.word	0x2000159c

080075f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60fb      	str	r3, [r7, #12]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	3318      	adds	r3, #24
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fe49 	bl	80062bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762a:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <xTaskRemoveFromEventList+0xb0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d11d      	bne.n	800766e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3304      	adds	r3, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fe40 	bl	80062bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <xTaskRemoveFromEventList+0xb4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <xTaskRemoveFromEventList+0x5c>
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <xTaskRemoveFromEventList+0xb4>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a13      	ldr	r2, [pc, #76]	; (80076ac <xTaskRemoveFromEventList+0xb8>)
 800765e:	441a      	add	r2, r3
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fdcb 	bl	8006202 <vListInsertEnd>
 800766c:	e005      	b.n	800767a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3318      	adds	r3, #24
 8007672:	4619      	mov	r1, r3
 8007674:	480e      	ldr	r0, [pc, #56]	; (80076b0 <xTaskRemoveFromEventList+0xbc>)
 8007676:	f7fe fdc4 	bl	8006202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <xTaskRemoveFromEventList+0xc0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	429a      	cmp	r2, r3
 8007686:	d905      	bls.n	8007694 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <xTaskRemoveFromEventList+0xc4>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e001      	b.n	8007698 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007698:	697b      	ldr	r3, [r7, #20]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20001a98 	.word	0x20001a98
 80076a8:	20001a78 	.word	0x20001a78
 80076ac:	200015a0 	.word	0x200015a0
 80076b0:	20001a30 	.word	0x20001a30
 80076b4:	2000159c 	.word	0x2000159c
 80076b8:	20001a84 	.word	0x20001a84

080076bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <vTaskInternalSetTimeOutState+0x24>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <vTaskInternalSetTimeOutState+0x28>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	605a      	str	r2, [r3, #4]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	20001a88 	.word	0x20001a88
 80076e4:	20001a74 	.word	0x20001a74

080076e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	613b      	str	r3, [r7, #16]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800772a:	f000 fe83 	bl	8008434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <xTaskCheckForTimeOut+0xbc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007746:	d102      	bne.n	800774e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e023      	b.n	8007796 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <xTaskCheckForTimeOut+0xc0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d007      	beq.n	800776a <xTaskCheckForTimeOut+0x82>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	429a      	cmp	r2, r3
 8007762:	d302      	bcc.n	800776a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	e015      	b.n	8007796 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	429a      	cmp	r2, r3
 8007772:	d20b      	bcs.n	800778c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff ff9b 	bl	80076bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e004      	b.n	8007796 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007792:	2301      	movs	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007796:	f000 fe7d 	bl	8008494 <vPortExitCritical>

	return xReturn;
 800779a:	69fb      	ldr	r3, [r7, #28]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20001a74 	.word	0x20001a74
 80077a8:	20001a88 	.word	0x20001a88

080077ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b0:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <vTaskMissedYield+0x14>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
}
 80077b6:	bf00      	nop
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20001a84 	.word	0x20001a84

080077c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077cc:	f000 f852 	bl	8007874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <prvIdleTask+0x28>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d9f9      	bls.n	80077cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <prvIdleTask+0x2c>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077e8:	e7f0      	b.n	80077cc <prvIdleTask+0x8>
 80077ea:	bf00      	nop
 80077ec:	200015a0 	.word	0x200015a0
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	e00c      	b.n	800781a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4a12      	ldr	r2, [pc, #72]	; (8007854 <prvInitialiseTaskLists+0x60>)
 800780c:	4413      	add	r3, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fcca 	bl	80061a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3301      	adds	r3, #1
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b37      	cmp	r3, #55	; 0x37
 800781e:	d9ef      	bls.n	8007800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007820:	480d      	ldr	r0, [pc, #52]	; (8007858 <prvInitialiseTaskLists+0x64>)
 8007822:	f7fe fcc1 	bl	80061a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007826:	480d      	ldr	r0, [pc, #52]	; (800785c <prvInitialiseTaskLists+0x68>)
 8007828:	f7fe fcbe 	bl	80061a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800782c:	480c      	ldr	r0, [pc, #48]	; (8007860 <prvInitialiseTaskLists+0x6c>)
 800782e:	f7fe fcbb 	bl	80061a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007832:	480c      	ldr	r0, [pc, #48]	; (8007864 <prvInitialiseTaskLists+0x70>)
 8007834:	f7fe fcb8 	bl	80061a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007838:	480b      	ldr	r0, [pc, #44]	; (8007868 <prvInitialiseTaskLists+0x74>)
 800783a:	f7fe fcb5 	bl	80061a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800783e:	4b0b      	ldr	r3, [pc, #44]	; (800786c <prvInitialiseTaskLists+0x78>)
 8007840:	4a05      	ldr	r2, [pc, #20]	; (8007858 <prvInitialiseTaskLists+0x64>)
 8007842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <prvInitialiseTaskLists+0x7c>)
 8007846:	4a05      	ldr	r2, [pc, #20]	; (800785c <prvInitialiseTaskLists+0x68>)
 8007848:	601a      	str	r2, [r3, #0]
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	200015a0 	.word	0x200015a0
 8007858:	20001a00 	.word	0x20001a00
 800785c:	20001a14 	.word	0x20001a14
 8007860:	20001a30 	.word	0x20001a30
 8007864:	20001a44 	.word	0x20001a44
 8007868:	20001a5c 	.word	0x20001a5c
 800786c:	20001a28 	.word	0x20001a28
 8007870:	20001a2c 	.word	0x20001a2c

08007874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800787a:	e019      	b.n	80078b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800787c:	f000 fdda 	bl	8008434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007880:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <prvCheckTasksWaitingTermination+0x50>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3304      	adds	r3, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fd15 	bl	80062bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007892:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <prvCheckTasksWaitingTermination+0x54>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3b01      	subs	r3, #1
 8007898:	4a0b      	ldr	r2, [pc, #44]	; (80078c8 <prvCheckTasksWaitingTermination+0x54>)
 800789a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800789c:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <prvCheckTasksWaitingTermination+0x58>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <prvCheckTasksWaitingTermination+0x58>)
 80078a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078a6:	f000 fdf5 	bl	8008494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f810 	bl	80078d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <prvCheckTasksWaitingTermination+0x58>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e1      	bne.n	800787c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20001a44 	.word	0x20001a44
 80078c8:	20001a70 	.word	0x20001a70
 80078cc:	20001a58 	.word	0x20001a58

080078d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3354      	adds	r3, #84	; 0x54
 80078dc:	4618      	mov	r0, r3
 80078de:	f002 fb0b 	bl	8009ef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d108      	bne.n	80078fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 ff8d 	bl	8008810 <vPortFree>
				vPortFree( pxTCB );
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 ff8a 	bl	8008810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078fc:	e018      	b.n	8007930 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007904:	2b01      	cmp	r3, #1
 8007906:	d103      	bne.n	8007910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 ff81 	bl	8008810 <vPortFree>
	}
 800790e:	e00f      	b.n	8007930 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007916:	2b02      	cmp	r3, #2
 8007918:	d00a      	beq.n	8007930 <prvDeleteTCB+0x60>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	60fb      	str	r3, [r7, #12]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <prvDeleteTCB+0x5e>
	}
 8007930:	bf00      	nop
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 800794a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800794e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007950:	e008      	b.n	8007964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 8007962:	6013      	str	r3, [r2, #0]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20001a28 	.word	0x20001a28
 8007974:	20001a90 	.word	0x20001a90

08007978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800797e:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <xTaskGetSchedulerState+0x34>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007986:	2301      	movs	r3, #1
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	e008      	b.n	800799e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798c:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <xTaskGetSchedulerState+0x38>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007994:	2302      	movs	r3, #2
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	e001      	b.n	800799e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800799a:	2300      	movs	r3, #0
 800799c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800799e:	687b      	ldr	r3, [r7, #4]
	}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20001a7c 	.word	0x20001a7c
 80079b0:	20001a98 	.word	0x20001a98

080079b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d056      	beq.n	8007a78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ca:	4b2e      	ldr	r3, [pc, #184]	; (8007a84 <xTaskPriorityDisinherit+0xd0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d00a      	beq.n	80079ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60bb      	str	r3, [r7, #8]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	1e5a      	subs	r2, r3, #1
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d02c      	beq.n	8007a78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d128      	bne.n	8007a78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fc46 	bl	80062bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <xTaskPriorityDisinherit+0xd4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <xTaskPriorityDisinherit+0xa4>
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <xTaskPriorityDisinherit+0xd4>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <xTaskPriorityDisinherit+0xd8>)
 8007a66:	441a      	add	r2, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fe fbc7 	bl	8006202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a78:	697b      	ldr	r3, [r7, #20]
	}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000159c 	.word	0x2000159c
 8007a88:	20001a78 	.word	0x20001a78
 8007a8c:	200015a0 	.word	0x200015a0

08007a90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a9a:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa0:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fc08 	bl	80062bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab2:	d10a      	bne.n	8007aca <prvAddCurrentTaskToDelayedList+0x3a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aba:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4819      	ldr	r0, [pc, #100]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ac4:	f7fe fb9d 	bl	8006202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ac8:	e026      	b.n	8007b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad2:	4b14      	ldr	r3, [pc, #80]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d209      	bcs.n	8007af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe fbab 	bl	800624a <vListInsert>
}
 8007af4:	e010      	b.n	8007b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3304      	adds	r3, #4
 8007b00:	4619      	mov	r1, r3
 8007b02:	4610      	mov	r0, r2
 8007b04:	f7fe fba1 	bl	800624a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d202      	bcs.n	8007b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b12:	4a08      	ldr	r2, [pc, #32]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6013      	str	r3, [r2, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001a74 	.word	0x20001a74
 8007b24:	2000159c 	.word	0x2000159c
 8007b28:	20001a5c 	.word	0x20001a5c
 8007b2c:	20001a2c 	.word	0x20001a2c
 8007b30:	20001a28 	.word	0x20001a28
 8007b34:	20001a90 	.word	0x20001a90

08007b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b42:	f000 fb07 	bl	8008154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b46:	4b1c      	ldr	r3, [pc, #112]	; (8007bb8 <xTimerCreateTimerTask+0x80>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d021      	beq.n	8007b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b56:	1d3a      	adds	r2, r7, #4
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	f107 030c 	add.w	r3, r7, #12
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fb07 	bl	8006174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	9202      	str	r2, [sp, #8]
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	2302      	movs	r3, #2
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	460a      	mov	r2, r1
 8007b78:	4910      	ldr	r1, [pc, #64]	; (8007bbc <xTimerCreateTimerTask+0x84>)
 8007b7a:	4811      	ldr	r0, [pc, #68]	; (8007bc0 <xTimerCreateTimerTask+0x88>)
 8007b7c:	f7ff f8b4 	bl	8006ce8 <xTaskCreateStatic>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4a10      	ldr	r2, [pc, #64]	; (8007bc4 <xTimerCreateTimerTask+0x8c>)
 8007b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b86:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <xTimerCreateTimerTask+0x8c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	613b      	str	r3, [r7, #16]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bae:	697b      	ldr	r3, [r7, #20]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20001acc 	.word	0x20001acc
 8007bbc:	0800f25c 	.word	0x0800f25c
 8007bc0:	08007cfd 	.word	0x08007cfd
 8007bc4:	20001ad0 	.word	0x20001ad0

08007bc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	623b      	str	r3, [r7, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <xTimerGenericCommand+0x98>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d02a      	beq.n	8007c54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	dc18      	bgt.n	8007c42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c10:	f7ff feb2 	bl	8007978 <xTaskGetSchedulerState>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d109      	bne.n	8007c2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c1a:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <xTimerGenericCommand+0x98>)
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f107 0110 	add.w	r1, r7, #16
 8007c22:	2300      	movs	r3, #0
 8007c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c26:	f7fe fc77 	bl	8006518 <xQueueGenericSend>
 8007c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8007c2c:	e012      	b.n	8007c54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <xTimerGenericCommand+0x98>)
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f107 0110 	add.w	r1, r7, #16
 8007c36:	2300      	movs	r3, #0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f7fe fc6d 	bl	8006518 <xQueueGenericSend>
 8007c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c40:	e008      	b.n	8007c54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <xTimerGenericCommand+0x98>)
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f107 0110 	add.w	r1, r7, #16
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	f7fe fd61 	bl	8006714 <xQueueGenericSendFromISR>
 8007c52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3728      	adds	r7, #40	; 0x28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20001acc 	.word	0x20001acc

08007c64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6e:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <prvProcessExpiredTimer+0x94>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fb1d 	bl	80062bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d022      	beq.n	8007cd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	18d1      	adds	r1, r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	6978      	ldr	r0, [r7, #20]
 8007c9e:	f000 f8d1 	bl	8007e44 <prvInsertTimerInActiveList>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01f      	beq.n	8007ce8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2300      	movs	r3, #0
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	6978      	ldr	r0, [r7, #20]
 8007cb4:	f7ff ff88 	bl	8007bc8 <xTimerGenericCommand>
 8007cb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d113      	bne.n	8007ce8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	60fb      	str	r3, [r7, #12]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cdc:	f023 0301 	bic.w	r3, r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	6978      	ldr	r0, [r7, #20]
 8007cee:	4798      	blx	r3
}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20001ac4 	.word	0x20001ac4

08007cfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d04:	f107 0308 	add.w	r3, r7, #8
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f857 	bl	8007dbc <prvGetNextExpireTime>
 8007d0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4619      	mov	r1, r3
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f803 	bl	8007d20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d1a:	f000 f8d5 	bl	8007ec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d1e:	e7f1      	b.n	8007d04 <prvTimerTask+0x8>

08007d20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d2a:	f7ff fa39 	bl	80071a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 f866 	bl	8007e04 <prvSampleTimeNow>
 8007d38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d130      	bne.n	8007da2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <prvProcessTimerOrBlockTask+0x3c>
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d806      	bhi.n	8007d5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d4e:	f7ff fa35 	bl	80071bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff85 	bl	8007c64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d5a:	e024      	b.n	8007da6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d62:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <prvProcessTimerOrBlockTask+0x90>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <prvProcessTimerOrBlockTask+0x50>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <prvProcessTimerOrBlockTask+0x52>
 8007d70:	2300      	movs	r3, #0
 8007d72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d74:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <prvProcessTimerOrBlockTask+0x94>)
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4619      	mov	r1, r3
 8007d82:	f7fe ff7d 	bl	8006c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d86:	f7ff fa19 	bl	80071bc <xTaskResumeAll>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <prvProcessTimerOrBlockTask+0x98>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
}
 8007da0:	e001      	b.n	8007da6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007da2:	f7ff fa0b 	bl	80071bc <xTaskResumeAll>
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20001ac8 	.word	0x20001ac8
 8007db4:	20001acc 	.word	0x20001acc
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <prvGetNextExpireTime+0x44>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <prvGetNextExpireTime+0x16>
 8007dce:	2201      	movs	r2, #1
 8007dd0:	e000      	b.n	8007dd4 <prvGetNextExpireTime+0x18>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d105      	bne.n	8007dec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <prvGetNextExpireTime+0x44>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e001      	b.n	8007df0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007df0:	68fb      	ldr	r3, [r7, #12]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20001ac4 	.word	0x20001ac4

08007e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e0c:	f7ff fa74 	bl	80072f8 <xTaskGetTickCount>
 8007e10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e12:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <prvSampleTimeNow+0x3c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d205      	bcs.n	8007e28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e1c:	f000 f936 	bl	800808c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e002      	b.n	8007e2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e2e:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <prvSampleTimeNow+0x3c>)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e34:	68fb      	ldr	r3, [r7, #12]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20001ad4 	.word	0x20001ad4

08007e44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d812      	bhi.n	8007e90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d302      	bcc.n	8007e7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	e01b      	b.n	8007eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e7e:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <prvInsertTimerInActiveList+0x7c>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fe f9de 	bl	800624a <vListInsert>
 8007e8e:	e012      	b.n	8007eb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d206      	bcs.n	8007ea6 <prvInsertTimerInActiveList+0x62>
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e007      	b.n	8007eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <prvInsertTimerInActiveList+0x80>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fe f9ca 	bl	800624a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eb6:	697b      	ldr	r3, [r7, #20]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20001ac8 	.word	0x20001ac8
 8007ec4:	20001ac4 	.word	0x20001ac4

08007ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08e      	sub	sp, #56	; 0x38
 8007ecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ece:	e0ca      	b.n	8008066 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	da18      	bge.n	8007f08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ed6:	1d3b      	adds	r3, r7, #4
 8007ed8:	3304      	adds	r3, #4
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	61fb      	str	r3, [r7, #28]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efe:	6850      	ldr	r0, [r2, #4]
 8007f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f02:	6892      	ldr	r2, [r2, #8]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f2c0 80ab 	blt.w	8008066 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe f9cb 	bl	80062bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f26:	463b      	mov	r3, r7
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff ff6b 	bl	8007e04 <prvSampleTimeNow>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	f200 8096 	bhi.w	8008064 <prvProcessReceivedCommands+0x19c>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <prvProcessReceivedCommands+0x78>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007fdd 	.word	0x08007fdd
 8007f50:	08007ff1 	.word	0x08007ff1
 8007f54:	0800803b 	.word	0x0800803b
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f69 	.word	0x08007f69
 8007f60:	08007fdd 	.word	0x08007fdd
 8007f64:	08007ff1 	.word	0x08007ff1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	18d1      	adds	r1, r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f88:	f7ff ff5c 	bl	8007e44 <prvInsertTimerInActiveList>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d069      	beq.n	8008066 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d05e      	beq.n	8008066 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	441a      	add	r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fba:	f7ff fe05 	bl	8007bc8 <xTimerGenericCommand>
 8007fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d14f      	bne.n	8008066 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	61bb      	str	r3, [r7, #24]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007fee:	e03a      	b.n	8008066 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ff6:	f043 0301 	orr.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	617b      	str	r3, [r7, #20]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	18d1      	adds	r1, r2, r3
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008034:	f7ff ff06 	bl	8007e44 <prvInsertTimerInActiveList>
					break;
 8008038:	e015      	b.n	8008066 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804a:	f000 fbe1 	bl	8008810 <vPortFree>
 800804e:	e00a      	b.n	8008066 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008062:	e000      	b.n	8008066 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008066:	4b08      	ldr	r3, [pc, #32]	; (8008088 <prvProcessReceivedCommands+0x1c0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	1d39      	adds	r1, r7, #4
 800806c:	2200      	movs	r2, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fbec 	bl	800684c <xQueueReceive>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	f47f af2a 	bne.w	8007ed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	3730      	adds	r7, #48	; 0x30
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20001acc 	.word	0x20001acc

0800808c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008092:	e048      	b.n	8008126 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008094:	4b2d      	ldr	r3, [pc, #180]	; (800814c <prvSwitchTimerLists+0xc0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809e:	4b2b      	ldr	r3, [pc, #172]	; (800814c <prvSwitchTimerLists+0xc0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe f905 	bl	80062bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02e      	beq.n	8008126 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4413      	add	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d90e      	bls.n	80080f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <prvSwitchTimerLists+0xc0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe f8aa 	bl	800624a <vListInsert>
 80080f6:	e016      	b.n	8008126 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f8:	2300      	movs	r3, #0
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2300      	movs	r3, #0
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fd60 	bl	8007bc8 <xTimerGenericCommand>
 8008108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	603b      	str	r3, [r7, #0]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <prvSwitchTimerLists+0xc0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1b1      	bne.n	8008094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008130:	4b06      	ldr	r3, [pc, #24]	; (800814c <prvSwitchTimerLists+0xc0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008136:	4b06      	ldr	r3, [pc, #24]	; (8008150 <prvSwitchTimerLists+0xc4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a04      	ldr	r2, [pc, #16]	; (800814c <prvSwitchTimerLists+0xc0>)
 800813c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800813e:	4a04      	ldr	r2, [pc, #16]	; (8008150 <prvSwitchTimerLists+0xc4>)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20001ac4 	.word	0x20001ac4
 8008150:	20001ac8 	.word	0x20001ac8

08008154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800815a:	f000 f96b 	bl	8008434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <prvCheckForValidListAndQueue+0x60>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d120      	bne.n	80081a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008166:	4814      	ldr	r0, [pc, #80]	; (80081b8 <prvCheckForValidListAndQueue+0x64>)
 8008168:	f7fe f81e 	bl	80061a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800816c:	4813      	ldr	r0, [pc, #76]	; (80081bc <prvCheckForValidListAndQueue+0x68>)
 800816e:	f7fe f81b 	bl	80061a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008172:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <prvCheckForValidListAndQueue+0x6c>)
 8008174:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <prvCheckForValidListAndQueue+0x64>)
 8008176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <prvCheckForValidListAndQueue+0x70>)
 800817a:	4a10      	ldr	r2, [pc, #64]	; (80081bc <prvCheckForValidListAndQueue+0x68>)
 800817c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800817e:	2300      	movs	r3, #0
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <prvCheckForValidListAndQueue+0x74>)
 8008184:	4a11      	ldr	r2, [pc, #68]	; (80081cc <prvCheckForValidListAndQueue+0x78>)
 8008186:	2110      	movs	r1, #16
 8008188:	200a      	movs	r0, #10
 800818a:	f7fe f929 	bl	80063e0 <xQueueGenericCreateStatic>
 800818e:	4603      	mov	r3, r0
 8008190:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <prvCheckForValidListAndQueue+0x60>)
 8008192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008194:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <prvCheckForValidListAndQueue+0x60>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800819c:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <prvCheckForValidListAndQueue+0x60>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	490b      	ldr	r1, [pc, #44]	; (80081d0 <prvCheckForValidListAndQueue+0x7c>)
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fd42 	bl	8006c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a8:	f000 f974 	bl	8008494 <vPortExitCritical>
}
 80081ac:	bf00      	nop
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20001acc 	.word	0x20001acc
 80081b8:	20001a9c 	.word	0x20001a9c
 80081bc:	20001ab0 	.word	0x20001ab0
 80081c0:	20001ac4 	.word	0x20001ac4
 80081c4:	20001ac8 	.word	0x20001ac8
 80081c8:	20001b78 	.word	0x20001b78
 80081cc:	20001ad8 	.word	0x20001ad8
 80081d0:	0800f264 	.word	0x0800f264

080081d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3b04      	subs	r3, #4
 80081e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3b04      	subs	r3, #4
 80081f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f023 0201 	bic.w	r2, r3, #1
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3b04      	subs	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008204:	4a0c      	ldr	r2, [pc, #48]	; (8008238 <pxPortInitialiseStack+0x64>)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3b14      	subs	r3, #20
 800820e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3b04      	subs	r3, #4
 800821a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f06f 0202 	mvn.w	r2, #2
 8008222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3b20      	subs	r3, #32
 8008228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	0800823d 	.word	0x0800823d

0800823c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008246:	4b12      	ldr	r3, [pc, #72]	; (8008290 <prvTaskExitError+0x54>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800824e:	d00a      	beq.n	8008266 <prvTaskExitError+0x2a>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <prvTaskExitError+0x28>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60bb      	str	r3, [r7, #8]
}
 8008278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800827a:	bf00      	nop
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0fc      	beq.n	800827c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	2000008c 	.word	0x2000008c
	...

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	4770      	bx	lr
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst2>:
 80082c0:	2000159c 	.word	0x2000159c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <prvPortStartFirstTask+0x24>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8814 	msr	CONTROL, r0
 80082da:	b662      	cpsie	i
 80082dc:	b661      	cpsie	f
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	df00      	svc	0
 80082e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ea:	bf00      	nop
 80082ec:	e000ed08 	.word	0xe000ed08

080082f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082f6:	4b46      	ldr	r3, [pc, #280]	; (8008410 <xPortStartScheduler+0x120>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a46      	ldr	r2, [pc, #280]	; (8008414 <xPortStartScheduler+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10a      	bne.n	8008316 <xPortStartScheduler+0x26>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008316:	4b3e      	ldr	r3, [pc, #248]	; (8008410 <xPortStartScheduler+0x120>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3f      	ldr	r2, [pc, #252]	; (8008418 <xPortStartScheduler+0x128>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10a      	bne.n	8008336 <xPortStartScheduler+0x46>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008336:	4b39      	ldr	r3, [pc, #228]	; (800841c <xPortStartScheduler+0x12c>)
 8008338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	22ff      	movs	r2, #255	; 0xff
 8008346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <xPortStartScheduler+0x130>)
 800835c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800835e:	4b31      	ldr	r3, [pc, #196]	; (8008424 <xPortStartScheduler+0x134>)
 8008360:	2207      	movs	r2, #7
 8008362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008364:	e009      	b.n	800837a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008366:	4b2f      	ldr	r3, [pc, #188]	; (8008424 <xPortStartScheduler+0x134>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3b01      	subs	r3, #1
 800836c:	4a2d      	ldr	r2, [pc, #180]	; (8008424 <xPortStartScheduler+0x134>)
 800836e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d0ef      	beq.n	8008366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008386:	4b27      	ldr	r3, [pc, #156]	; (8008424 <xPortStartScheduler+0x134>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1c3 0307 	rsb	r3, r3, #7
 800838e:	2b04      	cmp	r3, #4
 8008390:	d00a      	beq.n	80083a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60bb      	str	r3, [r7, #8]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a8:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <xPortStartScheduler+0x134>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <xPortStartScheduler+0x134>)
 80083b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <xPortStartScheduler+0x134>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083ba:	4a1a      	ldr	r2, [pc, #104]	; (8008424 <xPortStartScheduler+0x134>)
 80083bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083c6:	4b18      	ldr	r3, [pc, #96]	; (8008428 <xPortStartScheduler+0x138>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <xPortStartScheduler+0x138>)
 80083cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <xPortStartScheduler+0x138>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <xPortStartScheduler+0x138>)
 80083d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083de:	f000 f8dd 	bl	800859c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <xPortStartScheduler+0x13c>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083e8:	f000 f8fc 	bl	80085e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <xPortStartScheduler+0x140>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <xPortStartScheduler+0x140>)
 80083f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083f8:	f7ff ff66 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083fc:	f7ff f846 	bl	800748c <vTaskSwitchContext>
	prvTaskExitError();
 8008400:	f7ff ff1c 	bl	800823c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	e000ed00 	.word	0xe000ed00
 8008414:	410fc271 	.word	0x410fc271
 8008418:	410fc270 	.word	0x410fc270
 800841c:	e000e400 	.word	0xe000e400
 8008420:	20001bc8 	.word	0x20001bc8
 8008424:	20001bcc 	.word	0x20001bcc
 8008428:	e000ed20 	.word	0xe000ed20
 800842c:	2000008c 	.word	0x2000008c
 8008430:	e000ef34 	.word	0xe000ef34

08008434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	607b      	str	r3, [r7, #4]
}
 800844c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <vPortEnterCritical+0x58>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <vPortEnterCritical+0x58>)
 8008456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <vPortEnterCritical+0x58>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10f      	bne.n	8008480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortEnterCritical+0x5c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <vPortEnterCritical+0x4c>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	603b      	str	r3, [r7, #0]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vPortEnterCritical+0x4a>
	}
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	2000008c 	.word	0x2000008c
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <vPortExitCritical+0x50>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <vPortExitCritical+0x24>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	607b      	str	r3, [r7, #4]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <vPortExitCritical+0x50>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <vPortExitCritical+0x50>)
 80084c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <vPortExitCritical+0x50>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <vPortExitCritical+0x42>
 80084ca:	2300      	movs	r3, #0
 80084cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f383 8811 	msr	BASEPRI, r3
}
 80084d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000008c 	.word	0x2000008c
	...

080084f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084f0:	f3ef 8009 	mrs	r0, PSP
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <pxCurrentTCBConst>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f01e 0f10 	tst.w	lr, #16
 8008500:	bf08      	it	eq
 8008502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008514:	f380 8811 	msr	BASEPRI, r0
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f7fe ffb4 	bl	800748c <vTaskSwitchContext>
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f380 8811 	msr	BASEPRI, r0
 800852c:	bc09      	pop	{r0, r3}
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	f01e 0f10 	tst.w	lr, #16
 800853a:	bf08      	it	eq
 800853c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008540:	f380 8809 	msr	PSP, r0
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst>:
 8008550:	2000159c 	.word	0x2000159c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop

08008558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	607b      	str	r3, [r7, #4]
}
 8008570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008572:	f7fe fed1 	bl	8007318 <xTaskIncrementTick>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <xPortSysTickHandler+0x40>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f383 8811 	msr	BASEPRI, r3
}
 800858e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <vPortSetupTimerInterrupt+0x38>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <vPortSetupTimerInterrupt+0x3c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <vPortSetupTimerInterrupt+0x40>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	099b      	lsrs	r3, r3, #6
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <vPortSetupTimerInterrupt+0x44>)
 80085ba:	3b01      	subs	r3, #1
 80085bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	e000e010 	.word	0xe000e010
 80085d4:	e000e018 	.word	0xe000e018
 80085d8:	20000080 	.word	0x20000080
 80085dc:	10624dd3 	.word	0x10624dd3
 80085e0:	e000e014 	.word	0xe000e014

080085e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085f4 <vPortEnableVFP+0x10>
 80085e8:	6801      	ldr	r1, [r0, #0]
 80085ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ee:	6001      	str	r1, [r0, #0]
 80085f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085f2:	bf00      	nop
 80085f4:	e000ed88 	.word	0xe000ed88

080085f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085fe:	f3ef 8305 	mrs	r3, IPSR
 8008602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b0f      	cmp	r3, #15
 8008608:	d914      	bls.n	8008634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <vPortValidateInterruptPriority+0x70>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <vPortValidateInterruptPriority+0x74>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	7afa      	ldrb	r2, [r7, #11]
 800861a:	429a      	cmp	r2, r3
 800861c:	d20a      	bcs.n	8008634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <vPortValidateInterruptPriority+0x78>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <vPortValidateInterruptPriority+0x7c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d90a      	bls.n	800865a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	603b      	str	r3, [r7, #0]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <vPortValidateInterruptPriority+0x60>
	}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	e000e3f0 	.word	0xe000e3f0
 800866c:	20001bc8 	.word	0x20001bc8
 8008670:	e000ed0c 	.word	0xe000ed0c
 8008674:	20001bcc 	.word	0x20001bcc

08008678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008684:	f7fe fd8c 	bl	80071a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <pvPortMalloc+0x180>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008690:	f000 f920 	bl	80088d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008694:	4b59      	ldr	r3, [pc, #356]	; (80087fc <pvPortMalloc+0x184>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8093 	bne.w	80087c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01d      	beq.n	80086e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086a8:	2208      	movs	r2, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	3308      	adds	r3, #8
 80086c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <pvPortMalloc+0x6c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06e      	beq.n	80087c8 <pvPortMalloc+0x150>
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <pvPortMalloc+0x188>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d869      	bhi.n	80087c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086f4:	4b43      	ldr	r3, [pc, #268]	; (8008804 <pvPortMalloc+0x18c>)
 80086f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <pvPortMalloc+0x18c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fe:	e004      	b.n	800870a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <pvPortMalloc+0xa4>
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f1      	bne.n	8008700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <pvPortMalloc+0x180>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	429a      	cmp	r2, r3
 8008724:	d050      	beq.n	80087c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2208      	movs	r2, #8
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	2308      	movs	r3, #8
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	429a      	cmp	r2, r3
 8008746:	d91f      	bls.n	8008788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <pvPortMalloc+0xf8>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	613b      	str	r3, [r7, #16]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008782:	69b8      	ldr	r0, [r7, #24]
 8008784:	f000 f908 	bl	8008998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <pvPortMalloc+0x188>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <pvPortMalloc+0x188>)
 8008794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008796:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <pvPortMalloc+0x188>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <pvPortMalloc+0x190>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <pvPortMalloc+0x188>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <pvPortMalloc+0x190>)
 80087a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <pvPortMalloc+0x184>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <pvPortMalloc+0x194>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <pvPortMalloc+0x194>)
 80087c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c8:	f7fe fcf8 	bl	80071bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <pvPortMalloc+0x174>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <pvPortMalloc+0x172>
	return pvReturn;
 80087ec:	69fb      	ldr	r3, [r7, #28]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200057d8 	.word	0x200057d8
 80087fc:	200057ec 	.word	0x200057ec
 8008800:	200057dc 	.word	0x200057dc
 8008804:	200057d0 	.word	0x200057d0
 8008808:	200057e0 	.word	0x200057e0
 800880c:	200057e4 	.word	0x200057e4

08008810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04d      	beq.n	80088be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008822:	2308      	movs	r3, #8
 8008824:	425b      	negs	r3, r3
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <vPortFree+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <vPortFree+0x44>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <vPortFree+0x62>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60bb      	str	r3, [r7, #8]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <vPortFree+0xb8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11a      	bne.n	80088be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <vPortFree+0xb8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	43db      	mvns	r3, r3
 8008892:	401a      	ands	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008898:	f7fe fc82 	bl	80071a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortFree+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4413      	add	r3, r2
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vPortFree+0xbc>)
 80088a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f874 	bl	8008998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <vPortFree+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <vPortFree+0xc0>)
 80088b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ba:	f7fe fc7f 	bl	80071bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200057ec 	.word	0x200057ec
 80088cc:	200057dc 	.word	0x200057dc
 80088d0:	200057e8 	.word	0x200057e8

080088d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <prvHeapInit+0xac>)
 80088e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <prvHeapInit+0xac>)
 8008904:	4413      	add	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800890c:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <prvHeapInit+0xb0>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008912:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <prvHeapInit+0xb0>)
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <prvHeapInit+0xb4>)
 8008934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvHeapInit+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <prvHeapInit+0xb4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvHeapInit+0xb4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvHeapInit+0xb8>)
 8008962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <prvHeapInit+0xbc>)
 800896a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <prvHeapInit+0xc0>)
 800896e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20001bd0 	.word	0x20001bd0
 8008984:	200057d0 	.word	0x200057d0
 8008988:	200057d8 	.word	0x200057d8
 800898c:	200057e0 	.word	0x200057e0
 8008990:	200057dc 	.word	0x200057dc
 8008994:	200057ec 	.word	0x200057ec

08008998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <prvInsertBlockIntoFreeList+0xac>)
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <prvInsertBlockIntoFreeList+0x14>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d8f7      	bhi.n	80089a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d108      	bne.n	80089da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d118      	bne.n	8008a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d00d      	beq.n	8008a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e008      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e003      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d002      	beq.n	8008a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	200057d0 	.word	0x200057d0
 8008a48:	200057d8 	.word	0x200057d8

08008a4c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8008a4c:	b480      	push	{r7}
 8008a4e:	b089      	sub	sp, #36	; 0x24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <lwrb_init+0x1e>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <lwrb_init+0x1e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <lwrb_init+0x22>
        return 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e019      	b.n	8008aa2 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	330c      	adds	r3, #12
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3308      	adds	r3, #8
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	2300      	movs	r3, #0
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	601a      	str	r2, [r3, #0]
    return 1;
 8008aa0:	2301      	movs	r3, #1
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3724      	adds	r7, #36	; 0x24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b08c      	sub	sp, #48	; 0x30
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00d      	beq.n	8008ae0 <lwrb_read+0x32>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <lwrb_read+0x32>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <lwrb_read+0x32>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <lwrb_read+0x32>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <lwrb_read+0x36>
        return 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e060      	b.n	8008ba6 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f8a3 	bl	8008c30 <lwrb_get_full>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bf28      	it	cs
 8008af4:	4613      	movcs	r3, r2
 8008af6:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <lwrb_read+0x54>
        return 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e051      	b.n	8008ba6 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3308      	adds	r3, #8
 8008b06:	623b      	str	r3, [r7, #32]
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f3bf 8f5b 	dmb	ish
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bf28      	it	cs
 8008b24:	4613      	movcs	r3, r2
 8008b26:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	4413      	add	r3, r2
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b36:	f001 fa98 	bl	800a06a <memcpy>
    buff_r_ptr += tocopy;
 8008b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8008b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	18d0      	adds	r0, r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f001 fa84 	bl	800a06a <memcpy>
        buff_r_ptr = btr;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d301      	bcc.n	8008b74 <lwrb_read+0xc6>
        buff_r_ptr = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3308      	adds	r3, #8
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f3bf 8f5b 	dmb	ish
 8008b86:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <lwrb_read+0xf2>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	69f9      	ldr	r1, [r7, #28]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	440a      	add	r2, r1
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4798      	blx	r3
    return tocopy + btr;
 8008ba0:	69fa      	ldr	r2, [r7, #28]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4413      	add	r3, r2
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3730      	adds	r7, #48	; 0x30
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 8008bae:	b480      	push	{r7}
 8008bb0:	b08b      	sub	sp, #44	; 0x2c
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d007      	beq.n	8008bcc <lwrb_get_free+0x1e>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <lwrb_get_free+0x1e>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <lwrb_get_free+0x22>
        return 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e029      	b.n	8008c24 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	623b      	str	r3, [r7, #32]
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3308      	adds	r3, #8
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d103      	bne.n	8008c00 <lwrb_get_free+0x52>
        size = buff->size;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfe:	e00f      	b.n	8008c20 <lwrb_get_free+0x72>
    } else if (r > w) {
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d904      	bls.n	8008c12 <lwrb_get_free+0x64>
        size = r - w;
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c10:	e006      	b.n	8008c20 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	6979      	ldr	r1, [r7, #20]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	1acb      	subs	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	3b01      	subs	r3, #1
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	372c      	adds	r7, #44	; 0x2c
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 8008c30:	b480      	push	{r7}
 8008c32:	b08b      	sub	sp, #44	; 0x2c
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d007      	beq.n	8008c4e <lwrb_get_full+0x1e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <lwrb_get_full+0x1e>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <lwrb_get_full+0x22>
        return 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	e027      	b.n	8008ca2 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	330c      	adds	r3, #12
 8008c56:	623b      	str	r3, [r7, #32]
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3308      	adds	r3, #8
 8008c66:	61bb      	str	r3, [r7, #24]
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d102      	bne.n	8008c80 <lwrb_get_full+0x50>
        size = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7e:	e00f      	b.n	8008ca0 <lwrb_get_full+0x70>
    } else if (w > r) {
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d904      	bls.n	8008c92 <lwrb_get_full+0x62>
        size = w - r;
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c90:	e006      	b.n	8008ca0 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	69f9      	ldr	r1, [r7, #28]
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	1acb      	subs	r3, r1, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	372c      	adds	r7, #44	; 0x2c
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(lwrb_t* buff, size_t len) {
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
    size_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <lwrb_skip+0x26>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d006      	beq.n	8008cd4 <lwrb_skip+0x26>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <lwrb_skip+0x26>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <lwrb_skip+0x2a>
        return 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e036      	b.n	8008d46 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ffa9 	bl	8008c30 <lwrb_get_full>
 8008cde:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	bf28      	it	cs
 8008ce8:	4613      	movcs	r3, r2
 8008cea:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3308      	adds	r3, #8
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f3bf 8f5b 	dmb	ish
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	61fb      	str	r3, [r7, #28]
    r += len;
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	4413      	add	r3, r2
 8008d06:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d304      	bcc.n	8008d1c <lwrb_skip+0x6e>
        r -= buff->size;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f3bf 8f5b 	dmb	ish
 8008d2e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <lwrb_skip+0x96>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	2100      	movs	r1, #0
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
    return len;
 8008d44:	683b      	ldr	r3, [r7, #0]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <lwrb_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
lwrb_advance(lwrb_t* buff, size_t len) {
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b088      	sub	sp, #32
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
    size_t free, w;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <lwrb_advance+0x26>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d006      	beq.n	8008d74 <lwrb_advance+0x26>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <lwrb_advance+0x26>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <lwrb_advance+0x2a>
        return 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e036      	b.n	8008de6 <lwrb_advance+0x98>
    }

    /* Use local variables before writing back to main structure */
    free = lwrb_get_free(buff);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff18 	bl	8008bae <lwrb_get_free>
 8008d7e:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, free);
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	4293      	cmp	r3, r2
 8008d86:	bf28      	it	cs
 8008d88:	4613      	movcs	r3, r2
 8008d8a:	603b      	str	r3, [r7, #0]
    w = LWRB_LOAD(buff->w, memory_order_acquire);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f3bf 8f5b 	dmb	ish
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	61fb      	str	r3, [r7, #28]
    w += len;
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	4413      	add	r3, r2
 8008da6:	61fb      	str	r3, [r7, #28]
    if (w >= buff->size) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d304      	bcc.n	8008dbc <lwrb_advance+0x6e>
        w -= buff->size;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->w, w, memory_order_release);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	60bb      	str	r3, [r7, #8]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f3bf 8f5b 	dmb	ish
 8008dce:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <lwrb_advance+0x96>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
    return len;
 8008de4:	683b      	ldr	r3, [r7, #0]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <lwrb_find>:
 * \param           found_idx: Pointer to variable to write index in array where bts has been found
 *                      Must not be set to `NULL`
 * \return          `1` if \arg bts found, `0` otherwise
 */
uint8_t
lwrb_find(const lwrb_t* buff, const void* bts, size_t len, size_t start_offset, size_t* found_idx) {
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b08c      	sub	sp, #48	; 0x30
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	603b      	str	r3, [r7, #0]
    size_t full, r, max_x;
    uint8_t found = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    const uint8_t* needle = bts;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || needle == NULL || len == 0 || found_idx == NULL) {
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d010      	beq.n	8008e2e <lwrb_find+0x40>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00c      	beq.n	8008e2e <lwrb_find+0x40>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <lwrb_find+0x40>
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <lwrb_find+0x40>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <lwrb_find+0x40>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <lwrb_find+0x44>
        return 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e065      	b.n	8008efe <lwrb_find+0x110>
    }
    *found_idx = 0;
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]

    full = lwrb_get_full(buff);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fef9 	bl	8008c30 <lwrb_get_full>
 8008e3e:	61b8      	str	r0, [r7, #24]
    /* Verify initial conditions */
    if (full < (len + start_offset)) {
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	4413      	add	r3, r2
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d201      	bcs.n	8008e50 <lwrb_find+0x62>
        return 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e056      	b.n	8008efe <lwrb_find+0x110>
    }

    /* Max number of for loops is buff_full - input_len - start_offset of buffer length */
    max_x = full - len;
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	617b      	str	r3, [r7, #20]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e5c:	e045      	b.n	8008eea <lwrb_find+0xfc>
        found = 1; /* Found by default */
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* Prepare the starting point for reading */
        r = buff->r + skip_x;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3308      	adds	r3, #8
 8008e68:	f3bf 8f5b 	dmb	ish
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f3bf 8f5b 	dmb	ish
 8008e72:	613b      	str	r3, [r7, #16]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e78:	4413      	add	r3, r2
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (r >= buff->size) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d304      	bcc.n	8008e90 <lwrb_find+0xa2>
            r -= buff->size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Search in the buffer */
        for (size_t i = 0; i < len; ++i) {
 8008e90:	2300      	movs	r3, #0
 8008e92:	623b      	str	r3, [r7, #32]
 8008e94:	e01b      	b.n	8008ece <lwrb_find+0xe0>
            if (buff->buff[r] != needle[i]) {
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	4413      	add	r3, r2
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	69f9      	ldr	r1, [r7, #28]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	440b      	add	r3, r1
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d003      	beq.n	8008eb4 <lwrb_find+0xc6>
                found = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                break;
 8008eb2:	e010      	b.n	8008ed6 <lwrb_find+0xe8>
            }
            if (++r >= buff->size) {
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d301      	bcc.n	8008ec8 <lwrb_find+0xda>
                r = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t i = 0; i < len; ++i) {
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	623b      	str	r3, [r7, #32]
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3df      	bcc.n	8008e96 <lwrb_find+0xa8>
            }
        }
        if (found) {
 8008ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <lwrb_find+0xf6>
            *found_idx = skip_x;
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee2:	601a      	str	r2, [r3, #0]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <lwrb_find+0x10c>
 8008ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d9b1      	bls.n	8008e5e <lwrb_find+0x70>
        }
    }
    return found;
 8008efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3730      	adds	r7, #48	; 0x30
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <__cvt>:
 8008f06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0a:	ec55 4b10 	vmov	r4, r5, d0
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	460e      	mov	r6, r1
 8008f12:	4619      	mov	r1, r3
 8008f14:	462b      	mov	r3, r5
 8008f16:	bfbb      	ittet	lt
 8008f18:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f1c:	461d      	movlt	r5, r3
 8008f1e:	2300      	movge	r3, #0
 8008f20:	232d      	movlt	r3, #45	; 0x2d
 8008f22:	700b      	strb	r3, [r1, #0]
 8008f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f2a:	4691      	mov	r9, r2
 8008f2c:	f023 0820 	bic.w	r8, r3, #32
 8008f30:	bfbc      	itt	lt
 8008f32:	4622      	movlt	r2, r4
 8008f34:	4614      	movlt	r4, r2
 8008f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f3a:	d005      	beq.n	8008f48 <__cvt+0x42>
 8008f3c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f40:	d100      	bne.n	8008f44 <__cvt+0x3e>
 8008f42:	3601      	adds	r6, #1
 8008f44:	2102      	movs	r1, #2
 8008f46:	e000      	b.n	8008f4a <__cvt+0x44>
 8008f48:	2103      	movs	r1, #3
 8008f4a:	ab03      	add	r3, sp, #12
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	ab02      	add	r3, sp, #8
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	ec45 4b10 	vmov	d0, r4, r5
 8008f56:	4653      	mov	r3, sl
 8008f58:	4632      	mov	r2, r6
 8008f5a:	f001 f925 	bl	800a1a8 <_dtoa_r>
 8008f5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f62:	4607      	mov	r7, r0
 8008f64:	d102      	bne.n	8008f6c <__cvt+0x66>
 8008f66:	f019 0f01 	tst.w	r9, #1
 8008f6a:	d022      	beq.n	8008fb2 <__cvt+0xac>
 8008f6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f70:	eb07 0906 	add.w	r9, r7, r6
 8008f74:	d110      	bne.n	8008f98 <__cvt+0x92>
 8008f76:	783b      	ldrb	r3, [r7, #0]
 8008f78:	2b30      	cmp	r3, #48	; 0x30
 8008f7a:	d10a      	bne.n	8008f92 <__cvt+0x8c>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f88:	b918      	cbnz	r0, 8008f92 <__cvt+0x8c>
 8008f8a:	f1c6 0601 	rsb	r6, r6, #1
 8008f8e:	f8ca 6000 	str.w	r6, [sl]
 8008f92:	f8da 3000 	ldr.w	r3, [sl]
 8008f96:	4499      	add	r9, r3
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f7f7 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa4:	b108      	cbz	r0, 8008faa <__cvt+0xa4>
 8008fa6:	f8cd 900c 	str.w	r9, [sp, #12]
 8008faa:	2230      	movs	r2, #48	; 0x30
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	454b      	cmp	r3, r9
 8008fb0:	d307      	bcc.n	8008fc2 <__cvt+0xbc>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb6:	1bdb      	subs	r3, r3, r7
 8008fb8:	4638      	mov	r0, r7
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	b004      	add	sp, #16
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	9103      	str	r1, [sp, #12]
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	e7f0      	b.n	8008fac <__cvt+0xa6>

08008fca <__exponent>:
 8008fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	4249      	neglt	r1, r1
 8008fd4:	f803 2b02 	strb.w	r2, [r3], #2
 8008fd8:	bfb4      	ite	lt
 8008fda:	222d      	movlt	r2, #45	; 0x2d
 8008fdc:	222b      	movge	r2, #43	; 0x2b
 8008fde:	2909      	cmp	r1, #9
 8008fe0:	7042      	strb	r2, [r0, #1]
 8008fe2:	dd2a      	ble.n	800903a <__exponent+0x70>
 8008fe4:	f10d 0207 	add.w	r2, sp, #7
 8008fe8:	4617      	mov	r7, r2
 8008fea:	260a      	movs	r6, #10
 8008fec:	4694      	mov	ip, r2
 8008fee:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ff2:	fb06 1415 	mls	r4, r6, r5, r1
 8008ff6:	3430      	adds	r4, #48	; 0x30
 8008ff8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	2c63      	cmp	r4, #99	; 0x63
 8009000:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009004:	4629      	mov	r1, r5
 8009006:	dcf1      	bgt.n	8008fec <__exponent+0x22>
 8009008:	3130      	adds	r1, #48	; 0x30
 800900a:	f1ac 0402 	sub.w	r4, ip, #2
 800900e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009012:	1c41      	adds	r1, r0, #1
 8009014:	4622      	mov	r2, r4
 8009016:	42ba      	cmp	r2, r7
 8009018:	d30a      	bcc.n	8009030 <__exponent+0x66>
 800901a:	f10d 0209 	add.w	r2, sp, #9
 800901e:	eba2 020c 	sub.w	r2, r2, ip
 8009022:	42bc      	cmp	r4, r7
 8009024:	bf88      	it	hi
 8009026:	2200      	movhi	r2, #0
 8009028:	4413      	add	r3, r2
 800902a:	1a18      	subs	r0, r3, r0
 800902c:	b003      	add	sp, #12
 800902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009030:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009034:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009038:	e7ed      	b.n	8009016 <__exponent+0x4c>
 800903a:	2330      	movs	r3, #48	; 0x30
 800903c:	3130      	adds	r1, #48	; 0x30
 800903e:	7083      	strb	r3, [r0, #2]
 8009040:	70c1      	strb	r1, [r0, #3]
 8009042:	1d03      	adds	r3, r0, #4
 8009044:	e7f1      	b.n	800902a <__exponent+0x60>
	...

08009048 <_printf_float>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	ed2d 8b02 	vpush	{d8}
 8009050:	b08d      	sub	sp, #52	; 0x34
 8009052:	460c      	mov	r4, r1
 8009054:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009058:	4616      	mov	r6, r2
 800905a:	461f      	mov	r7, r3
 800905c:	4605      	mov	r5, r0
 800905e:	f000 ff37 	bl	8009ed0 <_localeconv_r>
 8009062:	f8d0 a000 	ldr.w	sl, [r0]
 8009066:	4650      	mov	r0, sl
 8009068:	f7f7 f90a 	bl	8000280 <strlen>
 800906c:	2300      	movs	r3, #0
 800906e:	930a      	str	r3, [sp, #40]	; 0x28
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8d8 3000 	ldr.w	r3, [r8]
 8009078:	f894 b018 	ldrb.w	fp, [r4, #24]
 800907c:	3307      	adds	r3, #7
 800907e:	f023 0307 	bic.w	r3, r3, #7
 8009082:	f103 0208 	add.w	r2, r3, #8
 8009086:	f8c8 2000 	str.w	r2, [r8]
 800908a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800908e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	f8cd 8018 	str.w	r8, [sp, #24]
 8009098:	ee08 0a10 	vmov	s16, r0
 800909c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a4:	4b9e      	ldr	r3, [pc, #632]	; (8009320 <_printf_float+0x2d8>)
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090aa:	f7f7 fd47 	bl	8000b3c <__aeabi_dcmpun>
 80090ae:	bb88      	cbnz	r0, 8009114 <_printf_float+0xcc>
 80090b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090b4:	4b9a      	ldr	r3, [pc, #616]	; (8009320 <_printf_float+0x2d8>)
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ba:	f7f7 fd21 	bl	8000b00 <__aeabi_dcmple>
 80090be:	bb48      	cbnz	r0, 8009114 <_printf_float+0xcc>
 80090c0:	2200      	movs	r2, #0
 80090c2:	2300      	movs	r3, #0
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f7f7 fd10 	bl	8000aec <__aeabi_dcmplt>
 80090cc:	b110      	cbz	r0, 80090d4 <_printf_float+0x8c>
 80090ce:	232d      	movs	r3, #45	; 0x2d
 80090d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d4:	4a93      	ldr	r2, [pc, #588]	; (8009324 <_printf_float+0x2dc>)
 80090d6:	4b94      	ldr	r3, [pc, #592]	; (8009328 <_printf_float+0x2e0>)
 80090d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090dc:	bf94      	ite	ls
 80090de:	4690      	movls	r8, r2
 80090e0:	4698      	movhi	r8, r3
 80090e2:	2303      	movs	r3, #3
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	9b05      	ldr	r3, [sp, #20]
 80090e8:	f023 0304 	bic.w	r3, r3, #4
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	f04f 0900 	mov.w	r9, #0
 80090f2:	9700      	str	r7, [sp, #0]
 80090f4:	4633      	mov	r3, r6
 80090f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80090f8:	4621      	mov	r1, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 f9da 	bl	80094b4 <_printf_common>
 8009100:	3001      	adds	r0, #1
 8009102:	f040 8090 	bne.w	8009226 <_printf_float+0x1de>
 8009106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800910a:	b00d      	add	sp, #52	; 0x34
 800910c:	ecbd 8b02 	vpop	{d8}
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	4642      	mov	r2, r8
 8009116:	464b      	mov	r3, r9
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 fd0e 	bl	8000b3c <__aeabi_dcmpun>
 8009120:	b140      	cbz	r0, 8009134 <_printf_float+0xec>
 8009122:	464b      	mov	r3, r9
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfbc      	itt	lt
 8009128:	232d      	movlt	r3, #45	; 0x2d
 800912a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800912e:	4a7f      	ldr	r2, [pc, #508]	; (800932c <_printf_float+0x2e4>)
 8009130:	4b7f      	ldr	r3, [pc, #508]	; (8009330 <_printf_float+0x2e8>)
 8009132:	e7d1      	b.n	80090d8 <_printf_float+0x90>
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800913a:	9206      	str	r2, [sp, #24]
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	d13f      	bne.n	80091c0 <_printf_float+0x178>
 8009140:	2306      	movs	r3, #6
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	9b05      	ldr	r3, [sp, #20]
 8009146:	6861      	ldr	r1, [r4, #4]
 8009148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800914c:	2300      	movs	r3, #0
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	ab0a      	add	r3, sp, #40	; 0x28
 8009152:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009156:	ab09      	add	r3, sp, #36	; 0x24
 8009158:	ec49 8b10 	vmov	d0, r8, r9
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009164:	4628      	mov	r0, r5
 8009166:	f7ff fece 	bl	8008f06 <__cvt>
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800916e:	2b47      	cmp	r3, #71	; 0x47
 8009170:	4680      	mov	r8, r0
 8009172:	d108      	bne.n	8009186 <_printf_float+0x13e>
 8009174:	1cc8      	adds	r0, r1, #3
 8009176:	db02      	blt.n	800917e <_printf_float+0x136>
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	4299      	cmp	r1, r3
 800917c:	dd41      	ble.n	8009202 <_printf_float+0x1ba>
 800917e:	f1ab 0302 	sub.w	r3, fp, #2
 8009182:	fa5f fb83 	uxtb.w	fp, r3
 8009186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800918a:	d820      	bhi.n	80091ce <_printf_float+0x186>
 800918c:	3901      	subs	r1, #1
 800918e:	465a      	mov	r2, fp
 8009190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009194:	9109      	str	r1, [sp, #36]	; 0x24
 8009196:	f7ff ff18 	bl	8008fca <__exponent>
 800919a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800919c:	1813      	adds	r3, r2, r0
 800919e:	2a01      	cmp	r2, #1
 80091a0:	4681      	mov	r9, r0
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	dc02      	bgt.n	80091ac <_printf_float+0x164>
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	07d2      	lsls	r2, r2, #31
 80091aa:	d501      	bpl.n	80091b0 <_printf_float+0x168>
 80091ac:	3301      	adds	r3, #1
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d09c      	beq.n	80090f2 <_printf_float+0xaa>
 80091b8:	232d      	movs	r3, #45	; 0x2d
 80091ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091be:	e798      	b.n	80090f2 <_printf_float+0xaa>
 80091c0:	9a06      	ldr	r2, [sp, #24]
 80091c2:	2a47      	cmp	r2, #71	; 0x47
 80091c4:	d1be      	bne.n	8009144 <_printf_float+0xfc>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1bc      	bne.n	8009144 <_printf_float+0xfc>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7b9      	b.n	8009142 <_printf_float+0xfa>
 80091ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091d2:	d118      	bne.n	8009206 <_printf_float+0x1be>
 80091d4:	2900      	cmp	r1, #0
 80091d6:	6863      	ldr	r3, [r4, #4]
 80091d8:	dd0b      	ble.n	80091f2 <_printf_float+0x1aa>
 80091da:	6121      	str	r1, [r4, #16]
 80091dc:	b913      	cbnz	r3, 80091e4 <_printf_float+0x19c>
 80091de:	6822      	ldr	r2, [r4, #0]
 80091e0:	07d0      	lsls	r0, r2, #31
 80091e2:	d502      	bpl.n	80091ea <_printf_float+0x1a2>
 80091e4:	3301      	adds	r3, #1
 80091e6:	440b      	add	r3, r1
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80091ec:	f04f 0900 	mov.w	r9, #0
 80091f0:	e7de      	b.n	80091b0 <_printf_float+0x168>
 80091f2:	b913      	cbnz	r3, 80091fa <_printf_float+0x1b2>
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	07d2      	lsls	r2, r2, #31
 80091f8:	d501      	bpl.n	80091fe <_printf_float+0x1b6>
 80091fa:	3302      	adds	r3, #2
 80091fc:	e7f4      	b.n	80091e8 <_printf_float+0x1a0>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7f2      	b.n	80091e8 <_printf_float+0x1a0>
 8009202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009208:	4299      	cmp	r1, r3
 800920a:	db05      	blt.n	8009218 <_printf_float+0x1d0>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	6121      	str	r1, [r4, #16]
 8009210:	07d8      	lsls	r0, r3, #31
 8009212:	d5ea      	bpl.n	80091ea <_printf_float+0x1a2>
 8009214:	1c4b      	adds	r3, r1, #1
 8009216:	e7e7      	b.n	80091e8 <_printf_float+0x1a0>
 8009218:	2900      	cmp	r1, #0
 800921a:	bfd4      	ite	le
 800921c:	f1c1 0202 	rsble	r2, r1, #2
 8009220:	2201      	movgt	r2, #1
 8009222:	4413      	add	r3, r2
 8009224:	e7e0      	b.n	80091e8 <_printf_float+0x1a0>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	055a      	lsls	r2, r3, #21
 800922a:	d407      	bmi.n	800923c <_printf_float+0x1f4>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	4642      	mov	r2, r8
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	d12c      	bne.n	8009294 <_printf_float+0x24c>
 800923a:	e764      	b.n	8009106 <_printf_float+0xbe>
 800923c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009240:	f240 80e0 	bls.w	8009404 <_printf_float+0x3bc>
 8009244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009248:	2200      	movs	r2, #0
 800924a:	2300      	movs	r3, #0
 800924c:	f7f7 fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009250:	2800      	cmp	r0, #0
 8009252:	d034      	beq.n	80092be <_printf_float+0x276>
 8009254:	4a37      	ldr	r2, [pc, #220]	; (8009334 <_printf_float+0x2ec>)
 8009256:	2301      	movs	r3, #1
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af51 	beq.w	8009106 <_printf_float+0xbe>
 8009264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009268:	429a      	cmp	r2, r3
 800926a:	db02      	blt.n	8009272 <_printf_float+0x22a>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07d8      	lsls	r0, r3, #31
 8009270:	d510      	bpl.n	8009294 <_printf_float+0x24c>
 8009272:	ee18 3a10 	vmov	r3, s16
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af41 	beq.w	8009106 <_printf_float+0xbe>
 8009284:	f04f 0800 	mov.w	r8, #0
 8009288:	f104 091a 	add.w	r9, r4, #26
 800928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928e:	3b01      	subs	r3, #1
 8009290:	4543      	cmp	r3, r8
 8009292:	dc09      	bgt.n	80092a8 <_printf_float+0x260>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	079b      	lsls	r3, r3, #30
 8009298:	f100 8107 	bmi.w	80094aa <_printf_float+0x462>
 800929c:	68e0      	ldr	r0, [r4, #12]
 800929e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a0:	4298      	cmp	r0, r3
 80092a2:	bfb8      	it	lt
 80092a4:	4618      	movlt	r0, r3
 80092a6:	e730      	b.n	800910a <_printf_float+0xc2>
 80092a8:	2301      	movs	r3, #1
 80092aa:	464a      	mov	r2, r9
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	f43f af27 	beq.w	8009106 <_printf_float+0xbe>
 80092b8:	f108 0801 	add.w	r8, r8, #1
 80092bc:	e7e6      	b.n	800928c <_printf_float+0x244>
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc39      	bgt.n	8009338 <_printf_float+0x2f0>
 80092c4:	4a1b      	ldr	r2, [pc, #108]	; (8009334 <_printf_float+0x2ec>)
 80092c6:	2301      	movs	r3, #1
 80092c8:	4631      	mov	r1, r6
 80092ca:	4628      	mov	r0, r5
 80092cc:	47b8      	blx	r7
 80092ce:	3001      	adds	r0, #1
 80092d0:	f43f af19 	beq.w	8009106 <_printf_float+0xbe>
 80092d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092d8:	4313      	orrs	r3, r2
 80092da:	d102      	bne.n	80092e2 <_printf_float+0x29a>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	d5d8      	bpl.n	8009294 <_printf_float+0x24c>
 80092e2:	ee18 3a10 	vmov	r3, s16
 80092e6:	4652      	mov	r2, sl
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f af09 	beq.w	8009106 <_printf_float+0xbe>
 80092f4:	f04f 0900 	mov.w	r9, #0
 80092f8:	f104 0a1a 	add.w	sl, r4, #26
 80092fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fe:	425b      	negs	r3, r3
 8009300:	454b      	cmp	r3, r9
 8009302:	dc01      	bgt.n	8009308 <_printf_float+0x2c0>
 8009304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009306:	e792      	b.n	800922e <_printf_float+0x1e6>
 8009308:	2301      	movs	r3, #1
 800930a:	4652      	mov	r2, sl
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f aef7 	beq.w	8009106 <_printf_float+0xbe>
 8009318:	f109 0901 	add.w	r9, r9, #1
 800931c:	e7ee      	b.n	80092fc <_printf_float+0x2b4>
 800931e:	bf00      	nop
 8009320:	7fefffff 	.word	0x7fefffff
 8009324:	0800f2d4 	.word	0x0800f2d4
 8009328:	0800f2d8 	.word	0x0800f2d8
 800932c:	0800f2dc 	.word	0x0800f2dc
 8009330:	0800f2e0 	.word	0x0800f2e0
 8009334:	0800f670 	.word	0x0800f670
 8009338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800933a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800933c:	429a      	cmp	r2, r3
 800933e:	bfa8      	it	ge
 8009340:	461a      	movge	r2, r3
 8009342:	2a00      	cmp	r2, #0
 8009344:	4691      	mov	r9, r2
 8009346:	dc37      	bgt.n	80093b8 <_printf_float+0x370>
 8009348:	f04f 0b00 	mov.w	fp, #0
 800934c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009350:	f104 021a 	add.w	r2, r4, #26
 8009354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009356:	9305      	str	r3, [sp, #20]
 8009358:	eba3 0309 	sub.w	r3, r3, r9
 800935c:	455b      	cmp	r3, fp
 800935e:	dc33      	bgt.n	80093c8 <_printf_float+0x380>
 8009360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009364:	429a      	cmp	r2, r3
 8009366:	db3b      	blt.n	80093e0 <_printf_float+0x398>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d438      	bmi.n	80093e0 <_printf_float+0x398>
 800936e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009372:	eba2 0903 	sub.w	r9, r2, r3
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	4591      	cmp	r9, r2
 800937c:	bfa8      	it	ge
 800937e:	4691      	movge	r9, r2
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	dc35      	bgt.n	80093f2 <_printf_float+0x3aa>
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800938e:	f104 0a1a 	add.w	sl, r4, #26
 8009392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009396:	1a9b      	subs	r3, r3, r2
 8009398:	eba3 0309 	sub.w	r3, r3, r9
 800939c:	4543      	cmp	r3, r8
 800939e:	f77f af79 	ble.w	8009294 <_printf_float+0x24c>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4652      	mov	r2, sl
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f aeaa 	beq.w	8009106 <_printf_float+0xbe>
 80093b2:	f108 0801 	add.w	r8, r8, #1
 80093b6:	e7ec      	b.n	8009392 <_printf_float+0x34a>
 80093b8:	4613      	mov	r3, r2
 80093ba:	4631      	mov	r1, r6
 80093bc:	4642      	mov	r2, r8
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	d1c0      	bne.n	8009348 <_printf_float+0x300>
 80093c6:	e69e      	b.n	8009106 <_printf_float+0xbe>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	9205      	str	r2, [sp, #20]
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f ae97 	beq.w	8009106 <_printf_float+0xbe>
 80093d8:	9a05      	ldr	r2, [sp, #20]
 80093da:	f10b 0b01 	add.w	fp, fp, #1
 80093de:	e7b9      	b.n	8009354 <_printf_float+0x30c>
 80093e0:	ee18 3a10 	vmov	r3, s16
 80093e4:	4652      	mov	r2, sl
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1be      	bne.n	800936e <_printf_float+0x326>
 80093f0:	e689      	b.n	8009106 <_printf_float+0xbe>
 80093f2:	9a05      	ldr	r2, [sp, #20]
 80093f4:	464b      	mov	r3, r9
 80093f6:	4442      	add	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d1c1      	bne.n	8009386 <_printf_float+0x33e>
 8009402:	e680      	b.n	8009106 <_printf_float+0xbe>
 8009404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009406:	2a01      	cmp	r2, #1
 8009408:	dc01      	bgt.n	800940e <_printf_float+0x3c6>
 800940a:	07db      	lsls	r3, r3, #31
 800940c:	d53a      	bpl.n	8009484 <_printf_float+0x43c>
 800940e:	2301      	movs	r3, #1
 8009410:	4642      	mov	r2, r8
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	f43f ae74 	beq.w	8009106 <_printf_float+0xbe>
 800941e:	ee18 3a10 	vmov	r3, s16
 8009422:	4652      	mov	r2, sl
 8009424:	4631      	mov	r1, r6
 8009426:	4628      	mov	r0, r5
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f ae6b 	beq.w	8009106 <_printf_float+0xbe>
 8009430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009434:	2200      	movs	r2, #0
 8009436:	2300      	movs	r3, #0
 8009438:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800943c:	f7f7 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009440:	b9d8      	cbnz	r0, 800947a <_printf_float+0x432>
 8009442:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009446:	f108 0201 	add.w	r2, r8, #1
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	d10e      	bne.n	8009472 <_printf_float+0x42a>
 8009454:	e657      	b.n	8009106 <_printf_float+0xbe>
 8009456:	2301      	movs	r3, #1
 8009458:	4652      	mov	r2, sl
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	f43f ae50 	beq.w	8009106 <_printf_float+0xbe>
 8009466:	f108 0801 	add.w	r8, r8, #1
 800946a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946c:	3b01      	subs	r3, #1
 800946e:	4543      	cmp	r3, r8
 8009470:	dcf1      	bgt.n	8009456 <_printf_float+0x40e>
 8009472:	464b      	mov	r3, r9
 8009474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009478:	e6da      	b.n	8009230 <_printf_float+0x1e8>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	f104 0a1a 	add.w	sl, r4, #26
 8009482:	e7f2      	b.n	800946a <_printf_float+0x422>
 8009484:	2301      	movs	r3, #1
 8009486:	4642      	mov	r2, r8
 8009488:	e7df      	b.n	800944a <_printf_float+0x402>
 800948a:	2301      	movs	r3, #1
 800948c:	464a      	mov	r2, r9
 800948e:	4631      	mov	r1, r6
 8009490:	4628      	mov	r0, r5
 8009492:	47b8      	blx	r7
 8009494:	3001      	adds	r0, #1
 8009496:	f43f ae36 	beq.w	8009106 <_printf_float+0xbe>
 800949a:	f108 0801 	add.w	r8, r8, #1
 800949e:	68e3      	ldr	r3, [r4, #12]
 80094a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094a2:	1a5b      	subs	r3, r3, r1
 80094a4:	4543      	cmp	r3, r8
 80094a6:	dcf0      	bgt.n	800948a <_printf_float+0x442>
 80094a8:	e6f8      	b.n	800929c <_printf_float+0x254>
 80094aa:	f04f 0800 	mov.w	r8, #0
 80094ae:	f104 0919 	add.w	r9, r4, #25
 80094b2:	e7f4      	b.n	800949e <_printf_float+0x456>

080094b4 <_printf_common>:
 80094b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b8:	4616      	mov	r6, r2
 80094ba:	4699      	mov	r9, r3
 80094bc:	688a      	ldr	r2, [r1, #8]
 80094be:	690b      	ldr	r3, [r1, #16]
 80094c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bfb8      	it	lt
 80094c8:	4613      	movlt	r3, r2
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094d0:	4607      	mov	r7, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b10a      	cbz	r2, 80094da <_printf_common+0x26>
 80094d6:	3301      	adds	r3, #1
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	0699      	lsls	r1, r3, #26
 80094de:	bf42      	ittt	mi
 80094e0:	6833      	ldrmi	r3, [r6, #0]
 80094e2:	3302      	addmi	r3, #2
 80094e4:	6033      	strmi	r3, [r6, #0]
 80094e6:	6825      	ldr	r5, [r4, #0]
 80094e8:	f015 0506 	ands.w	r5, r5, #6
 80094ec:	d106      	bne.n	80094fc <_printf_common+0x48>
 80094ee:	f104 0a19 	add.w	sl, r4, #25
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	6832      	ldr	r2, [r6, #0]
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dc26      	bgt.n	800954a <_printf_common+0x96>
 80094fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009500:	1e13      	subs	r3, r2, #0
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	bf18      	it	ne
 8009506:	2301      	movne	r3, #1
 8009508:	0692      	lsls	r2, r2, #26
 800950a:	d42b      	bmi.n	8009564 <_printf_common+0xb0>
 800950c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009510:	4649      	mov	r1, r9
 8009512:	4638      	mov	r0, r7
 8009514:	47c0      	blx	r8
 8009516:	3001      	adds	r0, #1
 8009518:	d01e      	beq.n	8009558 <_printf_common+0xa4>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	f003 0306 	and.w	r3, r3, #6
 8009522:	2b04      	cmp	r3, #4
 8009524:	bf02      	ittt	eq
 8009526:	68e5      	ldreq	r5, [r4, #12]
 8009528:	6833      	ldreq	r3, [r6, #0]
 800952a:	1aed      	subeq	r5, r5, r3
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	bf0c      	ite	eq
 8009530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009534:	2500      	movne	r5, #0
 8009536:	4293      	cmp	r3, r2
 8009538:	bfc4      	itt	gt
 800953a:	1a9b      	subgt	r3, r3, r2
 800953c:	18ed      	addgt	r5, r5, r3
 800953e:	2600      	movs	r6, #0
 8009540:	341a      	adds	r4, #26
 8009542:	42b5      	cmp	r5, r6
 8009544:	d11a      	bne.n	800957c <_printf_common+0xc8>
 8009546:	2000      	movs	r0, #0
 8009548:	e008      	b.n	800955c <_printf_common+0xa8>
 800954a:	2301      	movs	r3, #1
 800954c:	4652      	mov	r2, sl
 800954e:	4649      	mov	r1, r9
 8009550:	4638      	mov	r0, r7
 8009552:	47c0      	blx	r8
 8009554:	3001      	adds	r0, #1
 8009556:	d103      	bne.n	8009560 <_printf_common+0xac>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009560:	3501      	adds	r5, #1
 8009562:	e7c6      	b.n	80094f2 <_printf_common+0x3e>
 8009564:	18e1      	adds	r1, r4, r3
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	2030      	movs	r0, #48	; 0x30
 800956a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800956e:	4422      	add	r2, r4
 8009570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009578:	3302      	adds	r3, #2
 800957a:	e7c7      	b.n	800950c <_printf_common+0x58>
 800957c:	2301      	movs	r3, #1
 800957e:	4622      	mov	r2, r4
 8009580:	4649      	mov	r1, r9
 8009582:	4638      	mov	r0, r7
 8009584:	47c0      	blx	r8
 8009586:	3001      	adds	r0, #1
 8009588:	d0e6      	beq.n	8009558 <_printf_common+0xa4>
 800958a:	3601      	adds	r6, #1
 800958c:	e7d9      	b.n	8009542 <_printf_common+0x8e>
	...

08009590 <_printf_i>:
 8009590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009594:	7e0f      	ldrb	r7, [r1, #24]
 8009596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009598:	2f78      	cmp	r7, #120	; 0x78
 800959a:	4691      	mov	r9, r2
 800959c:	4680      	mov	r8, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	469a      	mov	sl, r3
 80095a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095a6:	d807      	bhi.n	80095b8 <_printf_i+0x28>
 80095a8:	2f62      	cmp	r7, #98	; 0x62
 80095aa:	d80a      	bhi.n	80095c2 <_printf_i+0x32>
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	f000 80d4 	beq.w	800975a <_printf_i+0x1ca>
 80095b2:	2f58      	cmp	r7, #88	; 0x58
 80095b4:	f000 80c0 	beq.w	8009738 <_printf_i+0x1a8>
 80095b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095c0:	e03a      	b.n	8009638 <_printf_i+0xa8>
 80095c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095c6:	2b15      	cmp	r3, #21
 80095c8:	d8f6      	bhi.n	80095b8 <_printf_i+0x28>
 80095ca:	a101      	add	r1, pc, #4	; (adr r1, 80095d0 <_printf_i+0x40>)
 80095cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095d0:	08009629 	.word	0x08009629
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	080095b9 	.word	0x080095b9
 80095dc:	080095b9 	.word	0x080095b9
 80095e0:	080095b9 	.word	0x080095b9
 80095e4:	080095b9 	.word	0x080095b9
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	080095b9 	.word	0x080095b9
 80095f0:	080095b9 	.word	0x080095b9
 80095f4:	080095b9 	.word	0x080095b9
 80095f8:	080095b9 	.word	0x080095b9
 80095fc:	08009741 	.word	0x08009741
 8009600:	08009669 	.word	0x08009669
 8009604:	080096fb 	.word	0x080096fb
 8009608:	080095b9 	.word	0x080095b9
 800960c:	080095b9 	.word	0x080095b9
 8009610:	08009763 	.word	0x08009763
 8009614:	080095b9 	.word	0x080095b9
 8009618:	08009669 	.word	0x08009669
 800961c:	080095b9 	.word	0x080095b9
 8009620:	080095b9 	.word	0x080095b9
 8009624:	08009703 	.word	0x08009703
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	1d1a      	adds	r2, r3, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009638:	2301      	movs	r3, #1
 800963a:	e09f      	b.n	800977c <_printf_i+0x1ec>
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	0607      	lsls	r7, r0, #24
 8009642:	f103 0104 	add.w	r1, r3, #4
 8009646:	6029      	str	r1, [r5, #0]
 8009648:	d501      	bpl.n	800964e <_printf_i+0xbe>
 800964a:	681e      	ldr	r6, [r3, #0]
 800964c:	e003      	b.n	8009656 <_printf_i+0xc6>
 800964e:	0646      	lsls	r6, r0, #25
 8009650:	d5fb      	bpl.n	800964a <_printf_i+0xba>
 8009652:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009656:	2e00      	cmp	r6, #0
 8009658:	da03      	bge.n	8009662 <_printf_i+0xd2>
 800965a:	232d      	movs	r3, #45	; 0x2d
 800965c:	4276      	negs	r6, r6
 800965e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009662:	485a      	ldr	r0, [pc, #360]	; (80097cc <_printf_i+0x23c>)
 8009664:	230a      	movs	r3, #10
 8009666:	e012      	b.n	800968e <_printf_i+0xfe>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	1d19      	adds	r1, r3, #4
 800966e:	6029      	str	r1, [r5, #0]
 8009670:	0605      	lsls	r5, r0, #24
 8009672:	d501      	bpl.n	8009678 <_printf_i+0xe8>
 8009674:	681e      	ldr	r6, [r3, #0]
 8009676:	e002      	b.n	800967e <_printf_i+0xee>
 8009678:	0641      	lsls	r1, r0, #25
 800967a:	d5fb      	bpl.n	8009674 <_printf_i+0xe4>
 800967c:	881e      	ldrh	r6, [r3, #0]
 800967e:	4853      	ldr	r0, [pc, #332]	; (80097cc <_printf_i+0x23c>)
 8009680:	2f6f      	cmp	r7, #111	; 0x6f
 8009682:	bf0c      	ite	eq
 8009684:	2308      	moveq	r3, #8
 8009686:	230a      	movne	r3, #10
 8009688:	2100      	movs	r1, #0
 800968a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968e:	6865      	ldr	r5, [r4, #4]
 8009690:	60a5      	str	r5, [r4, #8]
 8009692:	2d00      	cmp	r5, #0
 8009694:	bfa2      	ittt	ge
 8009696:	6821      	ldrge	r1, [r4, #0]
 8009698:	f021 0104 	bicge.w	r1, r1, #4
 800969c:	6021      	strge	r1, [r4, #0]
 800969e:	b90e      	cbnz	r6, 80096a4 <_printf_i+0x114>
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	d04b      	beq.n	800973c <_printf_i+0x1ac>
 80096a4:	4615      	mov	r5, r2
 80096a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80096aa:	fb03 6711 	mls	r7, r3, r1, r6
 80096ae:	5dc7      	ldrb	r7, [r0, r7]
 80096b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b4:	4637      	mov	r7, r6
 80096b6:	42bb      	cmp	r3, r7
 80096b8:	460e      	mov	r6, r1
 80096ba:	d9f4      	bls.n	80096a6 <_printf_i+0x116>
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d10b      	bne.n	80096d8 <_printf_i+0x148>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	07de      	lsls	r6, r3, #31
 80096c4:	d508      	bpl.n	80096d8 <_printf_i+0x148>
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	6861      	ldr	r1, [r4, #4]
 80096ca:	4299      	cmp	r1, r3
 80096cc:	bfde      	ittt	le
 80096ce:	2330      	movle	r3, #48	; 0x30
 80096d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096d8:	1b52      	subs	r2, r2, r5
 80096da:	6122      	str	r2, [r4, #16]
 80096dc:	f8cd a000 	str.w	sl, [sp]
 80096e0:	464b      	mov	r3, r9
 80096e2:	aa03      	add	r2, sp, #12
 80096e4:	4621      	mov	r1, r4
 80096e6:	4640      	mov	r0, r8
 80096e8:	f7ff fee4 	bl	80094b4 <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d14a      	bne.n	8009786 <_printf_i+0x1f6>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	b004      	add	sp, #16
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	f043 0320 	orr.w	r3, r3, #32
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	4833      	ldr	r0, [pc, #204]	; (80097d0 <_printf_i+0x240>)
 8009704:	2778      	movs	r7, #120	; 0x78
 8009706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	6829      	ldr	r1, [r5, #0]
 800970e:	061f      	lsls	r7, r3, #24
 8009710:	f851 6b04 	ldr.w	r6, [r1], #4
 8009714:	d402      	bmi.n	800971c <_printf_i+0x18c>
 8009716:	065f      	lsls	r7, r3, #25
 8009718:	bf48      	it	mi
 800971a:	b2b6      	uxthmi	r6, r6
 800971c:	07df      	lsls	r7, r3, #31
 800971e:	bf48      	it	mi
 8009720:	f043 0320 	orrmi.w	r3, r3, #32
 8009724:	6029      	str	r1, [r5, #0]
 8009726:	bf48      	it	mi
 8009728:	6023      	strmi	r3, [r4, #0]
 800972a:	b91e      	cbnz	r6, 8009734 <_printf_i+0x1a4>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	f023 0320 	bic.w	r3, r3, #32
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	2310      	movs	r3, #16
 8009736:	e7a7      	b.n	8009688 <_printf_i+0xf8>
 8009738:	4824      	ldr	r0, [pc, #144]	; (80097cc <_printf_i+0x23c>)
 800973a:	e7e4      	b.n	8009706 <_printf_i+0x176>
 800973c:	4615      	mov	r5, r2
 800973e:	e7bd      	b.n	80096bc <_printf_i+0x12c>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	6826      	ldr	r6, [r4, #0]
 8009744:	6961      	ldr	r1, [r4, #20]
 8009746:	1d18      	adds	r0, r3, #4
 8009748:	6028      	str	r0, [r5, #0]
 800974a:	0635      	lsls	r5, r6, #24
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	d501      	bpl.n	8009754 <_printf_i+0x1c4>
 8009750:	6019      	str	r1, [r3, #0]
 8009752:	e002      	b.n	800975a <_printf_i+0x1ca>
 8009754:	0670      	lsls	r0, r6, #25
 8009756:	d5fb      	bpl.n	8009750 <_printf_i+0x1c0>
 8009758:	8019      	strh	r1, [r3, #0]
 800975a:	2300      	movs	r3, #0
 800975c:	6123      	str	r3, [r4, #16]
 800975e:	4615      	mov	r5, r2
 8009760:	e7bc      	b.n	80096dc <_printf_i+0x14c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	602a      	str	r2, [r5, #0]
 8009768:	681d      	ldr	r5, [r3, #0]
 800976a:	6862      	ldr	r2, [r4, #4]
 800976c:	2100      	movs	r1, #0
 800976e:	4628      	mov	r0, r5
 8009770:	f7f6 fd36 	bl	80001e0 <memchr>
 8009774:	b108      	cbz	r0, 800977a <_printf_i+0x1ea>
 8009776:	1b40      	subs	r0, r0, r5
 8009778:	6060      	str	r0, [r4, #4]
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	2300      	movs	r3, #0
 8009780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009784:	e7aa      	b.n	80096dc <_printf_i+0x14c>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	462a      	mov	r2, r5
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	47d0      	blx	sl
 8009790:	3001      	adds	r0, #1
 8009792:	d0ad      	beq.n	80096f0 <_printf_i+0x160>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	079b      	lsls	r3, r3, #30
 8009798:	d413      	bmi.n	80097c2 <_printf_i+0x232>
 800979a:	68e0      	ldr	r0, [r4, #12]
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	4298      	cmp	r0, r3
 80097a0:	bfb8      	it	lt
 80097a2:	4618      	movlt	r0, r3
 80097a4:	e7a6      	b.n	80096f4 <_printf_i+0x164>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4632      	mov	r2, r6
 80097aa:	4649      	mov	r1, r9
 80097ac:	4640      	mov	r0, r8
 80097ae:	47d0      	blx	sl
 80097b0:	3001      	adds	r0, #1
 80097b2:	d09d      	beq.n	80096f0 <_printf_i+0x160>
 80097b4:	3501      	adds	r5, #1
 80097b6:	68e3      	ldr	r3, [r4, #12]
 80097b8:	9903      	ldr	r1, [sp, #12]
 80097ba:	1a5b      	subs	r3, r3, r1
 80097bc:	42ab      	cmp	r3, r5
 80097be:	dcf2      	bgt.n	80097a6 <_printf_i+0x216>
 80097c0:	e7eb      	b.n	800979a <_printf_i+0x20a>
 80097c2:	2500      	movs	r5, #0
 80097c4:	f104 0619 	add.w	r6, r4, #25
 80097c8:	e7f5      	b.n	80097b6 <_printf_i+0x226>
 80097ca:	bf00      	nop
 80097cc:	0800f2e4 	.word	0x0800f2e4
 80097d0:	0800f2f5 	.word	0x0800f2f5

080097d4 <_scanf_float>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	b087      	sub	sp, #28
 80097da:	4617      	mov	r7, r2
 80097dc:	9303      	str	r3, [sp, #12]
 80097de:	688b      	ldr	r3, [r1, #8]
 80097e0:	1e5a      	subs	r2, r3, #1
 80097e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80097e6:	bf83      	ittte	hi
 80097e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097ec:	195b      	addhi	r3, r3, r5
 80097ee:	9302      	strhi	r3, [sp, #8]
 80097f0:	2300      	movls	r3, #0
 80097f2:	bf86      	itte	hi
 80097f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80097f8:	608b      	strhi	r3, [r1, #8]
 80097fa:	9302      	strls	r3, [sp, #8]
 80097fc:	680b      	ldr	r3, [r1, #0]
 80097fe:	468b      	mov	fp, r1
 8009800:	2500      	movs	r5, #0
 8009802:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009806:	f84b 3b1c 	str.w	r3, [fp], #28
 800980a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800980e:	4680      	mov	r8, r0
 8009810:	460c      	mov	r4, r1
 8009812:	465e      	mov	r6, fp
 8009814:	46aa      	mov	sl, r5
 8009816:	46a9      	mov	r9, r5
 8009818:	9501      	str	r5, [sp, #4]
 800981a:	68a2      	ldr	r2, [r4, #8]
 800981c:	b152      	cbz	r2, 8009834 <_scanf_float+0x60>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b4e      	cmp	r3, #78	; 0x4e
 8009824:	d864      	bhi.n	80098f0 <_scanf_float+0x11c>
 8009826:	2b40      	cmp	r3, #64	; 0x40
 8009828:	d83c      	bhi.n	80098a4 <_scanf_float+0xd0>
 800982a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800982e:	b2c8      	uxtb	r0, r1
 8009830:	280e      	cmp	r0, #14
 8009832:	d93a      	bls.n	80098aa <_scanf_float+0xd6>
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	d003      	beq.n	8009842 <_scanf_float+0x6e>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009846:	f1ba 0f01 	cmp.w	sl, #1
 800984a:	f200 8113 	bhi.w	8009a74 <_scanf_float+0x2a0>
 800984e:	455e      	cmp	r6, fp
 8009850:	f200 8105 	bhi.w	8009a5e <_scanf_float+0x28a>
 8009854:	2501      	movs	r5, #1
 8009856:	4628      	mov	r0, r5
 8009858:	b007      	add	sp, #28
 800985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009862:	2a0d      	cmp	r2, #13
 8009864:	d8e6      	bhi.n	8009834 <_scanf_float+0x60>
 8009866:	a101      	add	r1, pc, #4	; (adr r1, 800986c <_scanf_float+0x98>)
 8009868:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800986c:	080099ab 	.word	0x080099ab
 8009870:	08009835 	.word	0x08009835
 8009874:	08009835 	.word	0x08009835
 8009878:	08009835 	.word	0x08009835
 800987c:	08009a0b 	.word	0x08009a0b
 8009880:	080099e3 	.word	0x080099e3
 8009884:	08009835 	.word	0x08009835
 8009888:	08009835 	.word	0x08009835
 800988c:	080099b9 	.word	0x080099b9
 8009890:	08009835 	.word	0x08009835
 8009894:	08009835 	.word	0x08009835
 8009898:	08009835 	.word	0x08009835
 800989c:	08009835 	.word	0x08009835
 80098a0:	08009971 	.word	0x08009971
 80098a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80098a8:	e7db      	b.n	8009862 <_scanf_float+0x8e>
 80098aa:	290e      	cmp	r1, #14
 80098ac:	d8c2      	bhi.n	8009834 <_scanf_float+0x60>
 80098ae:	a001      	add	r0, pc, #4	; (adr r0, 80098b4 <_scanf_float+0xe0>)
 80098b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098b4:	08009963 	.word	0x08009963
 80098b8:	08009835 	.word	0x08009835
 80098bc:	08009963 	.word	0x08009963
 80098c0:	080099f7 	.word	0x080099f7
 80098c4:	08009835 	.word	0x08009835
 80098c8:	08009911 	.word	0x08009911
 80098cc:	0800994d 	.word	0x0800994d
 80098d0:	0800994d 	.word	0x0800994d
 80098d4:	0800994d 	.word	0x0800994d
 80098d8:	0800994d 	.word	0x0800994d
 80098dc:	0800994d 	.word	0x0800994d
 80098e0:	0800994d 	.word	0x0800994d
 80098e4:	0800994d 	.word	0x0800994d
 80098e8:	0800994d 	.word	0x0800994d
 80098ec:	0800994d 	.word	0x0800994d
 80098f0:	2b6e      	cmp	r3, #110	; 0x6e
 80098f2:	d809      	bhi.n	8009908 <_scanf_float+0x134>
 80098f4:	2b60      	cmp	r3, #96	; 0x60
 80098f6:	d8b2      	bhi.n	800985e <_scanf_float+0x8a>
 80098f8:	2b54      	cmp	r3, #84	; 0x54
 80098fa:	d077      	beq.n	80099ec <_scanf_float+0x218>
 80098fc:	2b59      	cmp	r3, #89	; 0x59
 80098fe:	d199      	bne.n	8009834 <_scanf_float+0x60>
 8009900:	2d07      	cmp	r5, #7
 8009902:	d197      	bne.n	8009834 <_scanf_float+0x60>
 8009904:	2508      	movs	r5, #8
 8009906:	e029      	b.n	800995c <_scanf_float+0x188>
 8009908:	2b74      	cmp	r3, #116	; 0x74
 800990a:	d06f      	beq.n	80099ec <_scanf_float+0x218>
 800990c:	2b79      	cmp	r3, #121	; 0x79
 800990e:	e7f6      	b.n	80098fe <_scanf_float+0x12a>
 8009910:	6821      	ldr	r1, [r4, #0]
 8009912:	05c8      	lsls	r0, r1, #23
 8009914:	d51a      	bpl.n	800994c <_scanf_float+0x178>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800991c:	6021      	str	r1, [r4, #0]
 800991e:	f109 0901 	add.w	r9, r9, #1
 8009922:	b11b      	cbz	r3, 800992c <_scanf_float+0x158>
 8009924:	3b01      	subs	r3, #1
 8009926:	3201      	adds	r2, #1
 8009928:	9302      	str	r3, [sp, #8]
 800992a:	60a2      	str	r2, [r4, #8]
 800992c:	68a3      	ldr	r3, [r4, #8]
 800992e:	3b01      	subs	r3, #1
 8009930:	60a3      	str	r3, [r4, #8]
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	3301      	adds	r3, #1
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3b01      	subs	r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	607b      	str	r3, [r7, #4]
 8009940:	f340 8084 	ble.w	8009a4c <_scanf_float+0x278>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	3301      	adds	r3, #1
 8009948:	603b      	str	r3, [r7, #0]
 800994a:	e766      	b.n	800981a <_scanf_float+0x46>
 800994c:	eb1a 0f05 	cmn.w	sl, r5
 8009950:	f47f af70 	bne.w	8009834 <_scanf_float+0x60>
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800995a:	6022      	str	r2, [r4, #0]
 800995c:	f806 3b01 	strb.w	r3, [r6], #1
 8009960:	e7e4      	b.n	800992c <_scanf_float+0x158>
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	0610      	lsls	r0, r2, #24
 8009966:	f57f af65 	bpl.w	8009834 <_scanf_float+0x60>
 800996a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800996e:	e7f4      	b.n	800995a <_scanf_float+0x186>
 8009970:	f1ba 0f00 	cmp.w	sl, #0
 8009974:	d10e      	bne.n	8009994 <_scanf_float+0x1c0>
 8009976:	f1b9 0f00 	cmp.w	r9, #0
 800997a:	d10e      	bne.n	800999a <_scanf_float+0x1c6>
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009982:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009986:	d108      	bne.n	800999a <_scanf_float+0x1c6>
 8009988:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	f04f 0a01 	mov.w	sl, #1
 8009992:	e7e3      	b.n	800995c <_scanf_float+0x188>
 8009994:	f1ba 0f02 	cmp.w	sl, #2
 8009998:	d055      	beq.n	8009a46 <_scanf_float+0x272>
 800999a:	2d01      	cmp	r5, #1
 800999c:	d002      	beq.n	80099a4 <_scanf_float+0x1d0>
 800999e:	2d04      	cmp	r5, #4
 80099a0:	f47f af48 	bne.w	8009834 <_scanf_float+0x60>
 80099a4:	3501      	adds	r5, #1
 80099a6:	b2ed      	uxtb	r5, r5
 80099a8:	e7d8      	b.n	800995c <_scanf_float+0x188>
 80099aa:	f1ba 0f01 	cmp.w	sl, #1
 80099ae:	f47f af41 	bne.w	8009834 <_scanf_float+0x60>
 80099b2:	f04f 0a02 	mov.w	sl, #2
 80099b6:	e7d1      	b.n	800995c <_scanf_float+0x188>
 80099b8:	b97d      	cbnz	r5, 80099da <_scanf_float+0x206>
 80099ba:	f1b9 0f00 	cmp.w	r9, #0
 80099be:	f47f af3c 	bne.w	800983a <_scanf_float+0x66>
 80099c2:	6822      	ldr	r2, [r4, #0]
 80099c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099cc:	f47f af39 	bne.w	8009842 <_scanf_float+0x6e>
 80099d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	2501      	movs	r5, #1
 80099d8:	e7c0      	b.n	800995c <_scanf_float+0x188>
 80099da:	2d03      	cmp	r5, #3
 80099dc:	d0e2      	beq.n	80099a4 <_scanf_float+0x1d0>
 80099de:	2d05      	cmp	r5, #5
 80099e0:	e7de      	b.n	80099a0 <_scanf_float+0x1cc>
 80099e2:	2d02      	cmp	r5, #2
 80099e4:	f47f af26 	bne.w	8009834 <_scanf_float+0x60>
 80099e8:	2503      	movs	r5, #3
 80099ea:	e7b7      	b.n	800995c <_scanf_float+0x188>
 80099ec:	2d06      	cmp	r5, #6
 80099ee:	f47f af21 	bne.w	8009834 <_scanf_float+0x60>
 80099f2:	2507      	movs	r5, #7
 80099f4:	e7b2      	b.n	800995c <_scanf_float+0x188>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	0591      	lsls	r1, r2, #22
 80099fa:	f57f af1b 	bpl.w	8009834 <_scanf_float+0x60>
 80099fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a08:	e7a8      	b.n	800995c <_scanf_float+0x188>
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a14:	d006      	beq.n	8009a24 <_scanf_float+0x250>
 8009a16:	0550      	lsls	r0, r2, #21
 8009a18:	f57f af0c 	bpl.w	8009834 <_scanf_float+0x60>
 8009a1c:	f1b9 0f00 	cmp.w	r9, #0
 8009a20:	f43f af0f 	beq.w	8009842 <_scanf_float+0x6e>
 8009a24:	0591      	lsls	r1, r2, #22
 8009a26:	bf58      	it	pl
 8009a28:	9901      	ldrpl	r1, [sp, #4]
 8009a2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a2e:	bf58      	it	pl
 8009a30:	eba9 0101 	subpl.w	r1, r9, r1
 8009a34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009a38:	bf58      	it	pl
 8009a3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a3e:	6022      	str	r2, [r4, #0]
 8009a40:	f04f 0900 	mov.w	r9, #0
 8009a44:	e78a      	b.n	800995c <_scanf_float+0x188>
 8009a46:	f04f 0a03 	mov.w	sl, #3
 8009a4a:	e787      	b.n	800995c <_scanf_float+0x188>
 8009a4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a50:	4639      	mov	r1, r7
 8009a52:	4640      	mov	r0, r8
 8009a54:	4798      	blx	r3
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f43f aedf 	beq.w	800981a <_scanf_float+0x46>
 8009a5c:	e6ea      	b.n	8009834 <_scanf_float+0x60>
 8009a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a66:	463a      	mov	r2, r7
 8009a68:	4640      	mov	r0, r8
 8009a6a:	4798      	blx	r3
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	e6ec      	b.n	800984e <_scanf_float+0x7a>
 8009a74:	1e6b      	subs	r3, r5, #1
 8009a76:	2b06      	cmp	r3, #6
 8009a78:	d825      	bhi.n	8009ac6 <_scanf_float+0x2f2>
 8009a7a:	2d02      	cmp	r5, #2
 8009a7c:	d836      	bhi.n	8009aec <_scanf_float+0x318>
 8009a7e:	455e      	cmp	r6, fp
 8009a80:	f67f aee8 	bls.w	8009854 <_scanf_float+0x80>
 8009a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a8c:	463a      	mov	r2, r7
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4798      	blx	r3
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	e7f1      	b.n	8009a7e <_scanf_float+0x2aa>
 8009a9a:	9802      	ldr	r0, [sp, #8]
 8009a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009aa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	463a      	mov	r2, r7
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4798      	blx	r3
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	6123      	str	r3, [r4, #16]
 8009ab2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ab6:	fa5f fa8a 	uxtb.w	sl, sl
 8009aba:	f1ba 0f02 	cmp.w	sl, #2
 8009abe:	d1ec      	bne.n	8009a9a <_scanf_float+0x2c6>
 8009ac0:	3d03      	subs	r5, #3
 8009ac2:	b2ed      	uxtb	r5, r5
 8009ac4:	1b76      	subs	r6, r6, r5
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	05da      	lsls	r2, r3, #23
 8009aca:	d52f      	bpl.n	8009b2c <_scanf_float+0x358>
 8009acc:	055b      	lsls	r3, r3, #21
 8009ace:	d510      	bpl.n	8009af2 <_scanf_float+0x31e>
 8009ad0:	455e      	cmp	r6, fp
 8009ad2:	f67f aebf 	bls.w	8009854 <_scanf_float+0x80>
 8009ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ade:	463a      	mov	r2, r7
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4798      	blx	r3
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	e7f1      	b.n	8009ad0 <_scanf_float+0x2fc>
 8009aec:	46aa      	mov	sl, r5
 8009aee:	9602      	str	r6, [sp, #8]
 8009af0:	e7df      	b.n	8009ab2 <_scanf_float+0x2de>
 8009af2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	2965      	cmp	r1, #101	; 0x65
 8009afa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009afe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	d00c      	beq.n	8009b20 <_scanf_float+0x34c>
 8009b06:	2945      	cmp	r1, #69	; 0x45
 8009b08:	d00a      	beq.n	8009b20 <_scanf_float+0x34c>
 8009b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b0e:	463a      	mov	r2, r7
 8009b10:	4640      	mov	r0, r8
 8009b12:	4798      	blx	r3
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	1eb5      	subs	r5, r6, #2
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b24:	463a      	mov	r2, r7
 8009b26:	4640      	mov	r0, r8
 8009b28:	4798      	blx	r3
 8009b2a:	462e      	mov	r6, r5
 8009b2c:	6825      	ldr	r5, [r4, #0]
 8009b2e:	f015 0510 	ands.w	r5, r5, #16
 8009b32:	d158      	bne.n	8009be6 <_scanf_float+0x412>
 8009b34:	7035      	strb	r5, [r6, #0]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b40:	d11c      	bne.n	8009b7c <_scanf_float+0x3a8>
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	454b      	cmp	r3, r9
 8009b46:	eba3 0209 	sub.w	r2, r3, r9
 8009b4a:	d124      	bne.n	8009b96 <_scanf_float+0x3c2>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4659      	mov	r1, fp
 8009b50:	4640      	mov	r0, r8
 8009b52:	f002 fcd5 	bl	800c500 <_strtod_r>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	6821      	ldr	r1, [r4, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f011 0f02 	tst.w	r1, #2
 8009b60:	ec57 6b10 	vmov	r6, r7, d0
 8009b64:	f103 0204 	add.w	r2, r3, #4
 8009b68:	d020      	beq.n	8009bac <_scanf_float+0x3d8>
 8009b6a:	9903      	ldr	r1, [sp, #12]
 8009b6c:	600a      	str	r2, [r1, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	e9c3 6700 	strd	r6, r7, [r3]
 8009b74:	68e3      	ldr	r3, [r4, #12]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60e3      	str	r3, [r4, #12]
 8009b7a:	e66c      	b.n	8009856 <_scanf_float+0x82>
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0e4      	beq.n	8009b4c <_scanf_float+0x378>
 8009b82:	9905      	ldr	r1, [sp, #20]
 8009b84:	230a      	movs	r3, #10
 8009b86:	462a      	mov	r2, r5
 8009b88:	3101      	adds	r1, #1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	f002 fd40 	bl	800c610 <_strtol_r>
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	9e05      	ldr	r6, [sp, #20]
 8009b94:	1ac2      	subs	r2, r0, r3
 8009b96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	bf28      	it	cs
 8009b9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ba2:	4912      	ldr	r1, [pc, #72]	; (8009bec <_scanf_float+0x418>)
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 f8f9 	bl	8009d9c <siprintf>
 8009baa:	e7cf      	b.n	8009b4c <_scanf_float+0x378>
 8009bac:	f011 0f04 	tst.w	r1, #4
 8009bb0:	9903      	ldr	r1, [sp, #12]
 8009bb2:	600a      	str	r2, [r1, #0]
 8009bb4:	d1db      	bne.n	8009b6e <_scanf_float+0x39a>
 8009bb6:	f8d3 8000 	ldr.w	r8, [r3]
 8009bba:	ee10 2a10 	vmov	r2, s0
 8009bbe:	ee10 0a10 	vmov	r0, s0
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 ffb9 	bl	8000b3c <__aeabi_dcmpun>
 8009bca:	b128      	cbz	r0, 8009bd8 <_scanf_float+0x404>
 8009bcc:	4808      	ldr	r0, [pc, #32]	; (8009bf0 <_scanf_float+0x41c>)
 8009bce:	f000 fa5b 	bl	800a088 <nanf>
 8009bd2:	ed88 0a00 	vstr	s0, [r8]
 8009bd6:	e7cd      	b.n	8009b74 <_scanf_float+0x3a0>
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f7 f80c 	bl	8000bf8 <__aeabi_d2f>
 8009be0:	f8c8 0000 	str.w	r0, [r8]
 8009be4:	e7c6      	b.n	8009b74 <_scanf_float+0x3a0>
 8009be6:	2500      	movs	r5, #0
 8009be8:	e635      	b.n	8009856 <_scanf_float+0x82>
 8009bea:	bf00      	nop
 8009bec:	0800f306 	.word	0x0800f306
 8009bf0:	0800f6b8 	.word	0x0800f6b8

08009bf4 <std>:
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8009bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c02:	6083      	str	r3, [r0, #8]
 8009c04:	8181      	strh	r1, [r0, #12]
 8009c06:	6643      	str	r3, [r0, #100]	; 0x64
 8009c08:	81c2      	strh	r2, [r0, #14]
 8009c0a:	6183      	str	r3, [r0, #24]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	2208      	movs	r2, #8
 8009c10:	305c      	adds	r0, #92	; 0x5c
 8009c12:	f000 f954 	bl	8009ebe <memset>
 8009c16:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <std+0x58>)
 8009c18:	6263      	str	r3, [r4, #36]	; 0x24
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <std+0x5c>)
 8009c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c1e:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <std+0x60>)
 8009c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c22:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <std+0x64>)
 8009c24:	6323      	str	r3, [r4, #48]	; 0x30
 8009c26:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <std+0x68>)
 8009c28:	6224      	str	r4, [r4, #32]
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	d006      	beq.n	8009c3c <std+0x48>
 8009c2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c32:	4294      	cmp	r4, r2
 8009c34:	d002      	beq.n	8009c3c <std+0x48>
 8009c36:	33d0      	adds	r3, #208	; 0xd0
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	d105      	bne.n	8009c48 <std+0x54>
 8009c3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c44:	f000 ba0e 	b.w	800a064 <__retarget_lock_init_recursive>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	bf00      	nop
 8009c4c:	08009e35 	.word	0x08009e35
 8009c50:	08009e5b 	.word	0x08009e5b
 8009c54:	08009e93 	.word	0x08009e93
 8009c58:	08009eb7 	.word	0x08009eb7
 8009c5c:	200057f0 	.word	0x200057f0

08009c60 <stdio_exit_handler>:
 8009c60:	4a02      	ldr	r2, [pc, #8]	; (8009c6c <stdio_exit_handler+0xc>)
 8009c62:	4903      	ldr	r1, [pc, #12]	; (8009c70 <stdio_exit_handler+0x10>)
 8009c64:	4803      	ldr	r0, [pc, #12]	; (8009c74 <stdio_exit_handler+0x14>)
 8009c66:	f000 b869 	b.w	8009d3c <_fwalk_sglue>
 8009c6a:	bf00      	nop
 8009c6c:	20000090 	.word	0x20000090
 8009c70:	0800d299 	.word	0x0800d299
 8009c74:	2000009c 	.word	0x2000009c

08009c78 <cleanup_stdio>:
 8009c78:	6841      	ldr	r1, [r0, #4]
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <cleanup_stdio+0x34>)
 8009c7c:	4299      	cmp	r1, r3
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	d001      	beq.n	8009c88 <cleanup_stdio+0x10>
 8009c84:	f003 fb08 	bl	800d298 <_fflush_r>
 8009c88:	68a1      	ldr	r1, [r4, #8]
 8009c8a:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <cleanup_stdio+0x38>)
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <cleanup_stdio+0x1e>
 8009c90:	4620      	mov	r0, r4
 8009c92:	f003 fb01 	bl	800d298 <_fflush_r>
 8009c96:	68e1      	ldr	r1, [r4, #12]
 8009c98:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <cleanup_stdio+0x3c>)
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	d004      	beq.n	8009ca8 <cleanup_stdio+0x30>
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca4:	f003 baf8 	b.w	800d298 <_fflush_r>
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	bf00      	nop
 8009cac:	200057f0 	.word	0x200057f0
 8009cb0:	20005858 	.word	0x20005858
 8009cb4:	200058c0 	.word	0x200058c0

08009cb8 <global_stdio_init.part.0>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <global_stdio_init.part.0+0x30>)
 8009cbc:	4c0b      	ldr	r4, [pc, #44]	; (8009cec <global_stdio_init.part.0+0x34>)
 8009cbe:	4a0c      	ldr	r2, [pc, #48]	; (8009cf0 <global_stdio_init.part.0+0x38>)
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2104      	movs	r1, #4
 8009cc8:	f7ff ff94 	bl	8009bf4 <std>
 8009ccc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	2109      	movs	r1, #9
 8009cd4:	f7ff ff8e 	bl	8009bf4 <std>
 8009cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009cdc:	2202      	movs	r2, #2
 8009cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce2:	2112      	movs	r1, #18
 8009ce4:	f7ff bf86 	b.w	8009bf4 <std>
 8009ce8:	20005928 	.word	0x20005928
 8009cec:	200057f0 	.word	0x200057f0
 8009cf0:	08009c61 	.word	0x08009c61

08009cf4 <__sfp_lock_acquire>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__sfp_lock_acquire+0x8>)
 8009cf6:	f000 b9b6 	b.w	800a066 <__retarget_lock_acquire_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	20005931 	.word	0x20005931

08009d00 <__sfp_lock_release>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__sfp_lock_release+0x8>)
 8009d02:	f000 b9b1 	b.w	800a068 <__retarget_lock_release_recursive>
 8009d06:	bf00      	nop
 8009d08:	20005931 	.word	0x20005931

08009d0c <__sinit>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4604      	mov	r4, r0
 8009d10:	f7ff fff0 	bl	8009cf4 <__sfp_lock_acquire>
 8009d14:	6a23      	ldr	r3, [r4, #32]
 8009d16:	b11b      	cbz	r3, 8009d20 <__sinit+0x14>
 8009d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1c:	f7ff bff0 	b.w	8009d00 <__sfp_lock_release>
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <__sinit+0x28>)
 8009d22:	6223      	str	r3, [r4, #32]
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <__sinit+0x2c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f5      	bne.n	8009d18 <__sinit+0xc>
 8009d2c:	f7ff ffc4 	bl	8009cb8 <global_stdio_init.part.0>
 8009d30:	e7f2      	b.n	8009d18 <__sinit+0xc>
 8009d32:	bf00      	nop
 8009d34:	08009c79 	.word	0x08009c79
 8009d38:	20005928 	.word	0x20005928

08009d3c <_fwalk_sglue>:
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	4607      	mov	r7, r0
 8009d42:	4688      	mov	r8, r1
 8009d44:	4614      	mov	r4, r2
 8009d46:	2600      	movs	r6, #0
 8009d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d50:	d505      	bpl.n	8009d5e <_fwalk_sglue+0x22>
 8009d52:	6824      	ldr	r4, [r4, #0]
 8009d54:	2c00      	cmp	r4, #0
 8009d56:	d1f7      	bne.n	8009d48 <_fwalk_sglue+0xc>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d907      	bls.n	8009d74 <_fwalk_sglue+0x38>
 8009d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	d003      	beq.n	8009d74 <_fwalk_sglue+0x38>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	47c0      	blx	r8
 8009d72:	4306      	orrs	r6, r0
 8009d74:	3568      	adds	r5, #104	; 0x68
 8009d76:	e7e9      	b.n	8009d4c <_fwalk_sglue+0x10>

08009d78 <iprintf>:
 8009d78:	b40f      	push	{r0, r1, r2, r3}
 8009d7a:	b507      	push	{r0, r1, r2, lr}
 8009d7c:	4906      	ldr	r1, [pc, #24]	; (8009d98 <iprintf+0x20>)
 8009d7e:	ab04      	add	r3, sp, #16
 8009d80:	6808      	ldr	r0, [r1, #0]
 8009d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d86:	6881      	ldr	r1, [r0, #8]
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	f002 ff97 	bl	800ccbc <_vfiprintf_r>
 8009d8e:	b003      	add	sp, #12
 8009d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d94:	b004      	add	sp, #16
 8009d96:	4770      	bx	lr
 8009d98:	200000e8 	.word	0x200000e8

08009d9c <siprintf>:
 8009d9c:	b40e      	push	{r1, r2, r3}
 8009d9e:	b500      	push	{lr}
 8009da0:	b09c      	sub	sp, #112	; 0x70
 8009da2:	ab1d      	add	r3, sp, #116	; 0x74
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	9006      	str	r0, [sp, #24]
 8009da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dac:	4809      	ldr	r0, [pc, #36]	; (8009dd4 <siprintf+0x38>)
 8009dae:	9107      	str	r1, [sp, #28]
 8009db0:	9104      	str	r1, [sp, #16]
 8009db2:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <siprintf+0x3c>)
 8009db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	a902      	add	r1, sp, #8
 8009dc0:	f002 fc82 	bl	800c6c8 <_svfiprintf_r>
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	b01c      	add	sp, #112	; 0x70
 8009dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd0:	b003      	add	sp, #12
 8009dd2:	4770      	bx	lr
 8009dd4:	200000e8 	.word	0x200000e8
 8009dd8:	ffff0208 	.word	0xffff0208

08009ddc <siscanf>:
 8009ddc:	b40e      	push	{r1, r2, r3}
 8009dde:	b510      	push	{r4, lr}
 8009de0:	b09f      	sub	sp, #124	; 0x7c
 8009de2:	ac21      	add	r4, sp, #132	; 0x84
 8009de4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009de8:	f854 2b04 	ldr.w	r2, [r4], #4
 8009dec:	9201      	str	r2, [sp, #4]
 8009dee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009df2:	9004      	str	r0, [sp, #16]
 8009df4:	9008      	str	r0, [sp, #32]
 8009df6:	f7f6 fa43 	bl	8000280 <strlen>
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <siscanf+0x50>)
 8009dfc:	9005      	str	r0, [sp, #20]
 8009dfe:	9009      	str	r0, [sp, #36]	; 0x24
 8009e00:	930d      	str	r3, [sp, #52]	; 0x34
 8009e02:	480b      	ldr	r0, [pc, #44]	; (8009e30 <siscanf+0x54>)
 8009e04:	9a01      	ldr	r2, [sp, #4]
 8009e06:	6800      	ldr	r0, [r0, #0]
 8009e08:	9403      	str	r4, [sp, #12]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8009e0e:	9316      	str	r3, [sp, #88]	; 0x58
 8009e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4623      	mov	r3, r4
 8009e1c:	f002 fdac 	bl	800c978 <__ssvfiscanf_r>
 8009e20:	b01f      	add	sp, #124	; 0x7c
 8009e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e26:	b003      	add	sp, #12
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	08009e57 	.word	0x08009e57
 8009e30:	200000e8 	.word	0x200000e8

08009e34 <__sread>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	460c      	mov	r4, r1
 8009e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3c:	f000 f8c4 	bl	8009fc8 <_read_r>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	bfab      	itete	ge
 8009e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e46:	89a3      	ldrhlt	r3, [r4, #12]
 8009e48:	181b      	addge	r3, r3, r0
 8009e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e4e:	bfac      	ite	ge
 8009e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e52:	81a3      	strhlt	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__seofread>:
 8009e56:	2000      	movs	r0, #0
 8009e58:	4770      	bx	lr

08009e5a <__swrite>:
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	461f      	mov	r7, r3
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	05db      	lsls	r3, r3, #23
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	4616      	mov	r6, r2
 8009e6a:	d505      	bpl.n	8009e78 <__swrite+0x1e>
 8009e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e70:	2302      	movs	r3, #2
 8009e72:	2200      	movs	r2, #0
 8009e74:	f000 f896 	bl	8009fa4 <_lseek_r>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	4632      	mov	r2, r6
 8009e86:	463b      	mov	r3, r7
 8009e88:	4628      	mov	r0, r5
 8009e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	f000 b8ad 	b.w	8009fec <_write_r>

08009e92 <__sseek>:
 8009e92:	b510      	push	{r4, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 f883 	bl	8009fa4 <_lseek_r>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	bf15      	itete	ne
 8009ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eae:	81a3      	strheq	r3, [r4, #12]
 8009eb0:	bf18      	it	ne
 8009eb2:	81a3      	strhne	r3, [r4, #12]
 8009eb4:	bd10      	pop	{r4, pc}

08009eb6 <__sclose>:
 8009eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eba:	f000 b80d 	b.w	8009ed8 <_close_r>

08009ebe <memset>:
 8009ebe:	4402      	add	r2, r0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d100      	bne.n	8009ec8 <memset+0xa>
 8009ec6:	4770      	bx	lr
 8009ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ecc:	e7f9      	b.n	8009ec2 <memset+0x4>
	...

08009ed0 <_localeconv_r>:
 8009ed0:	4800      	ldr	r0, [pc, #0]	; (8009ed4 <_localeconv_r+0x4>)
 8009ed2:	4770      	bx	lr
 8009ed4:	200001dc 	.word	0x200001dc

08009ed8 <_close_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_close_r+0x1c>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f8 f939 	bl	800215a <_close>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_close_r+0x1a>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_close_r+0x1a>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	2000592c 	.word	0x2000592c

08009ef8 <_reclaim_reent>:
 8009ef8:	4b29      	ldr	r3, [pc, #164]	; (8009fa0 <_reclaim_reent+0xa8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4283      	cmp	r3, r0
 8009efe:	b570      	push	{r4, r5, r6, lr}
 8009f00:	4604      	mov	r4, r0
 8009f02:	d04b      	beq.n	8009f9c <_reclaim_reent+0xa4>
 8009f04:	69c3      	ldr	r3, [r0, #28]
 8009f06:	b143      	cbz	r3, 8009f1a <_reclaim_reent+0x22>
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d144      	bne.n	8009f98 <_reclaim_reent+0xa0>
 8009f0e:	69e3      	ldr	r3, [r4, #28]
 8009f10:	6819      	ldr	r1, [r3, #0]
 8009f12:	b111      	cbz	r1, 8009f1a <_reclaim_reent+0x22>
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 ff39 	bl	800ad8c <_free_r>
 8009f1a:	6961      	ldr	r1, [r4, #20]
 8009f1c:	b111      	cbz	r1, 8009f24 <_reclaim_reent+0x2c>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 ff34 	bl	800ad8c <_free_r>
 8009f24:	69e1      	ldr	r1, [r4, #28]
 8009f26:	b111      	cbz	r1, 8009f2e <_reclaim_reent+0x36>
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 ff2f 	bl	800ad8c <_free_r>
 8009f2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f30:	b111      	cbz	r1, 8009f38 <_reclaim_reent+0x40>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 ff2a 	bl	800ad8c <_free_r>
 8009f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f3a:	b111      	cbz	r1, 8009f42 <_reclaim_reent+0x4a>
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 ff25 	bl	800ad8c <_free_r>
 8009f42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f44:	b111      	cbz	r1, 8009f4c <_reclaim_reent+0x54>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 ff20 	bl	800ad8c <_free_r>
 8009f4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f4e:	b111      	cbz	r1, 8009f56 <_reclaim_reent+0x5e>
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 ff1b 	bl	800ad8c <_free_r>
 8009f56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009f58:	b111      	cbz	r1, 8009f60 <_reclaim_reent+0x68>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 ff16 	bl	800ad8c <_free_r>
 8009f60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009f62:	b111      	cbz	r1, 8009f6a <_reclaim_reent+0x72>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 ff11 	bl	800ad8c <_free_r>
 8009f6a:	6a23      	ldr	r3, [r4, #32]
 8009f6c:	b1b3      	cbz	r3, 8009f9c <_reclaim_reent+0xa4>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f74:	4718      	bx	r3
 8009f76:	5949      	ldr	r1, [r1, r5]
 8009f78:	b941      	cbnz	r1, 8009f8c <_reclaim_reent+0x94>
 8009f7a:	3504      	adds	r5, #4
 8009f7c:	69e3      	ldr	r3, [r4, #28]
 8009f7e:	2d80      	cmp	r5, #128	; 0x80
 8009f80:	68d9      	ldr	r1, [r3, #12]
 8009f82:	d1f8      	bne.n	8009f76 <_reclaim_reent+0x7e>
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 ff01 	bl	800ad8c <_free_r>
 8009f8a:	e7c0      	b.n	8009f0e <_reclaim_reent+0x16>
 8009f8c:	680e      	ldr	r6, [r1, #0]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fefc 	bl	800ad8c <_free_r>
 8009f94:	4631      	mov	r1, r6
 8009f96:	e7ef      	b.n	8009f78 <_reclaim_reent+0x80>
 8009f98:	2500      	movs	r5, #0
 8009f9a:	e7ef      	b.n	8009f7c <_reclaim_reent+0x84>
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	bf00      	nop
 8009fa0:	200000e8 	.word	0x200000e8

08009fa4 <_lseek_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_lseek_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f8 f8f8 	bl	80021a8 <_lseek>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_lseek_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_lseek_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	2000592c 	.word	0x2000592c

08009fc8 <_read_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_read_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f8 f886 	bl	80020e8 <_read>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_read_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_read_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	2000592c 	.word	0x2000592c

08009fec <_write_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_write_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f8 f891 	bl	8002122 <_write>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_write_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_write_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	2000592c 	.word	0x2000592c

0800a010 <__errno>:
 800a010:	4b01      	ldr	r3, [pc, #4]	; (800a018 <__errno+0x8>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	200000e8 	.word	0x200000e8

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4d0d      	ldr	r5, [pc, #52]	; (800a054 <__libc_init_array+0x38>)
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a022:	1b64      	subs	r4, r4, r5
 800a024:	10a4      	asrs	r4, r4, #2
 800a026:	2600      	movs	r6, #0
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	4d0b      	ldr	r5, [pc, #44]	; (800a05c <__libc_init_array+0x40>)
 800a02e:	4c0c      	ldr	r4, [pc, #48]	; (800a060 <__libc_init_array+0x44>)
 800a030:	f005 f8c6 	bl	800f1c0 <_init>
 800a034:	1b64      	subs	r4, r4, r5
 800a036:	10a4      	asrs	r4, r4, #2
 800a038:	2600      	movs	r6, #0
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f855 3b04 	ldr.w	r3, [r5], #4
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800f900 	.word	0x0800f900
 800a058:	0800f900 	.word	0x0800f900
 800a05c:	0800f900 	.word	0x0800f900
 800a060:	0800f904 	.word	0x0800f904

0800a064 <__retarget_lock_init_recursive>:
 800a064:	4770      	bx	lr

0800a066 <__retarget_lock_acquire_recursive>:
 800a066:	4770      	bx	lr

0800a068 <__retarget_lock_release_recursive>:
 800a068:	4770      	bx	lr

0800a06a <memcpy>:
 800a06a:	440a      	add	r2, r1
 800a06c:	4291      	cmp	r1, r2
 800a06e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a072:	d100      	bne.n	800a076 <memcpy+0xc>
 800a074:	4770      	bx	lr
 800a076:	b510      	push	{r4, lr}
 800a078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a080:	4291      	cmp	r1, r2
 800a082:	d1f9      	bne.n	800a078 <memcpy+0xe>
 800a084:	bd10      	pop	{r4, pc}
	...

0800a088 <nanf>:
 800a088:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a090 <nanf+0x8>
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	7fc00000 	.word	0x7fc00000

0800a094 <quorem>:
 800a094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	6903      	ldr	r3, [r0, #16]
 800a09a:	690c      	ldr	r4, [r1, #16]
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	4607      	mov	r7, r0
 800a0a0:	db7e      	blt.n	800a1a0 <quorem+0x10c>
 800a0a2:	3c01      	subs	r4, #1
 800a0a4:	f101 0814 	add.w	r8, r1, #20
 800a0a8:	f100 0514 	add.w	r5, r0, #20
 800a0ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0ca:	d331      	bcc.n	800a130 <quorem+0x9c>
 800a0cc:	f04f 0e00 	mov.w	lr, #0
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	46ac      	mov	ip, r5
 800a0d4:	46f2      	mov	sl, lr
 800a0d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0da:	b293      	uxth	r3, r2
 800a0dc:	fb06 e303 	mla	r3, r6, r3, lr
 800a0e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0e4:	0c1a      	lsrs	r2, r3, #16
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ec:	f8dc a000 	ldr.w	sl, [ip]
 800a0f0:	fa13 f38a 	uxtah	r3, r3, sl
 800a0f4:	fb06 220e 	mla	r2, r6, lr, r2
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a100:	b292      	uxth	r2, r2
 800a102:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a106:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a10a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a10e:	4581      	cmp	r9, r0
 800a110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a114:	f84c 3b04 	str.w	r3, [ip], #4
 800a118:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a11c:	d2db      	bcs.n	800a0d6 <quorem+0x42>
 800a11e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a122:	b92b      	cbnz	r3, 800a130 <quorem+0x9c>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	3b04      	subs	r3, #4
 800a128:	429d      	cmp	r5, r3
 800a12a:	461a      	mov	r2, r3
 800a12c:	d32c      	bcc.n	800a188 <quorem+0xf4>
 800a12e:	613c      	str	r4, [r7, #16]
 800a130:	4638      	mov	r0, r7
 800a132:	f001 f9f1 	bl	800b518 <__mcmp>
 800a136:	2800      	cmp	r0, #0
 800a138:	db22      	blt.n	800a180 <quorem+0xec>
 800a13a:	3601      	adds	r6, #1
 800a13c:	4629      	mov	r1, r5
 800a13e:	2000      	movs	r0, #0
 800a140:	f858 2b04 	ldr.w	r2, [r8], #4
 800a144:	f8d1 c000 	ldr.w	ip, [r1]
 800a148:	b293      	uxth	r3, r2
 800a14a:	1ac3      	subs	r3, r0, r3
 800a14c:	0c12      	lsrs	r2, r2, #16
 800a14e:	fa13 f38c 	uxtah	r3, r3, ip
 800a152:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a160:	45c1      	cmp	r9, r8
 800a162:	f841 3b04 	str.w	r3, [r1], #4
 800a166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a16a:	d2e9      	bcs.n	800a140 <quorem+0xac>
 800a16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a174:	b922      	cbnz	r2, 800a180 <quorem+0xec>
 800a176:	3b04      	subs	r3, #4
 800a178:	429d      	cmp	r5, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	d30a      	bcc.n	800a194 <quorem+0x100>
 800a17e:	613c      	str	r4, [r7, #16]
 800a180:	4630      	mov	r0, r6
 800a182:	b003      	add	sp, #12
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	3b04      	subs	r3, #4
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d1ce      	bne.n	800a12e <quorem+0x9a>
 800a190:	3c01      	subs	r4, #1
 800a192:	e7c9      	b.n	800a128 <quorem+0x94>
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	3b04      	subs	r3, #4
 800a198:	2a00      	cmp	r2, #0
 800a19a:	d1f0      	bne.n	800a17e <quorem+0xea>
 800a19c:	3c01      	subs	r4, #1
 800a19e:	e7eb      	b.n	800a178 <quorem+0xe4>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	e7ee      	b.n	800a182 <quorem+0xee>
 800a1a4:	0000      	movs	r0, r0
	...

0800a1a8 <_dtoa_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	ed2d 8b04 	vpush	{d8-d9}
 800a1b0:	69c5      	ldr	r5, [r0, #28]
 800a1b2:	b093      	sub	sp, #76	; 0x4c
 800a1b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1b8:	ec57 6b10 	vmov	r6, r7, d0
 800a1bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1c0:	9107      	str	r1, [sp, #28]
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1c8:	b975      	cbnz	r5, 800a1e8 <_dtoa_r+0x40>
 800a1ca:	2010      	movs	r0, #16
 800a1cc:	f000 fe2a 	bl	800ae24 <malloc>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	61e0      	str	r0, [r4, #28]
 800a1d4:	b920      	cbnz	r0, 800a1e0 <_dtoa_r+0x38>
 800a1d6:	4bae      	ldr	r3, [pc, #696]	; (800a490 <_dtoa_r+0x2e8>)
 800a1d8:	21ef      	movs	r1, #239	; 0xef
 800a1da:	48ae      	ldr	r0, [pc, #696]	; (800a494 <_dtoa_r+0x2ec>)
 800a1dc:	f003 f9d0 	bl	800d580 <__assert_func>
 800a1e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1e4:	6005      	str	r5, [r0, #0]
 800a1e6:	60c5      	str	r5, [r0, #12]
 800a1e8:	69e3      	ldr	r3, [r4, #28]
 800a1ea:	6819      	ldr	r1, [r3, #0]
 800a1ec:	b151      	cbz	r1, 800a204 <_dtoa_r+0x5c>
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	604a      	str	r2, [r1, #4]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4093      	lsls	r3, r2
 800a1f6:	608b      	str	r3, [r1, #8]
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 ff07 	bl	800b00c <_Bfree>
 800a1fe:	69e3      	ldr	r3, [r4, #28]
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	1e3b      	subs	r3, r7, #0
 800a206:	bfbb      	ittet	lt
 800a208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a20c:	9303      	strlt	r3, [sp, #12]
 800a20e:	2300      	movge	r3, #0
 800a210:	2201      	movlt	r2, #1
 800a212:	bfac      	ite	ge
 800a214:	f8c8 3000 	strge.w	r3, [r8]
 800a218:	f8c8 2000 	strlt.w	r2, [r8]
 800a21c:	4b9e      	ldr	r3, [pc, #632]	; (800a498 <_dtoa_r+0x2f0>)
 800a21e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a222:	ea33 0308 	bics.w	r3, r3, r8
 800a226:	d11b      	bne.n	800a260 <_dtoa_r+0xb8>
 800a228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a22a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a234:	4333      	orrs	r3, r6
 800a236:	f000 8593 	beq.w	800ad60 <_dtoa_r+0xbb8>
 800a23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a23c:	b963      	cbnz	r3, 800a258 <_dtoa_r+0xb0>
 800a23e:	4b97      	ldr	r3, [pc, #604]	; (800a49c <_dtoa_r+0x2f4>)
 800a240:	e027      	b.n	800a292 <_dtoa_r+0xea>
 800a242:	4b97      	ldr	r3, [pc, #604]	; (800a4a0 <_dtoa_r+0x2f8>)
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	9800      	ldr	r0, [sp, #0]
 800a24e:	b013      	add	sp, #76	; 0x4c
 800a250:	ecbd 8b04 	vpop	{d8-d9}
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	4b90      	ldr	r3, [pc, #576]	; (800a49c <_dtoa_r+0x2f4>)
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	3303      	adds	r3, #3
 800a25e:	e7f3      	b.n	800a248 <_dtoa_r+0xa0>
 800a260:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a264:	2200      	movs	r2, #0
 800a266:	ec51 0b17 	vmov	r0, r1, d7
 800a26a:	eeb0 8a47 	vmov.f32	s16, s14
 800a26e:	eef0 8a67 	vmov.f32	s17, s15
 800a272:	2300      	movs	r3, #0
 800a274:	f7f6 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 800a278:	4681      	mov	r9, r0
 800a27a:	b160      	cbz	r0, 800a296 <_dtoa_r+0xee>
 800a27c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a27e:	2301      	movs	r3, #1
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8568 	beq.w	800ad5a <_dtoa_r+0xbb2>
 800a28a:	4b86      	ldr	r3, [pc, #536]	; (800a4a4 <_dtoa_r+0x2fc>)
 800a28c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	e7da      	b.n	800a24c <_dtoa_r+0xa4>
 800a296:	aa10      	add	r2, sp, #64	; 0x40
 800a298:	a911      	add	r1, sp, #68	; 0x44
 800a29a:	4620      	mov	r0, r4
 800a29c:	eeb0 0a48 	vmov.f32	s0, s16
 800a2a0:	eef0 0a68 	vmov.f32	s1, s17
 800a2a4:	f001 fa4e 	bl	800b744 <__d2b>
 800a2a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	d07f      	beq.n	800a3b2 <_dtoa_r+0x20a>
 800a2b2:	ee18 3a90 	vmov	r3, s17
 800a2b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2be:	ec51 0b18 	vmov	r0, r1, d8
 800a2c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4b75      	ldr	r3, [pc, #468]	; (800a4a8 <_dtoa_r+0x300>)
 800a2d4:	f7f5 ffe0 	bl	8000298 <__aeabi_dsub>
 800a2d8:	a367      	add	r3, pc, #412	; (adr r3, 800a478 <_dtoa_r+0x2d0>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f6 f993 	bl	8000608 <__aeabi_dmul>
 800a2e2:	a367      	add	r3, pc, #412	; (adr r3, 800a480 <_dtoa_r+0x2d8>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f5 ffd8 	bl	800029c <__adddf3>
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	f7f6 f91f 	bl	8000534 <__aeabi_i2d>
 800a2f6:	a364      	add	r3, pc, #400	; (adr r3, 800a488 <_dtoa_r+0x2e0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f6 f984 	bl	8000608 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f5 ffc8 	bl	800029c <__adddf3>
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	f7f6 fc2a 	bl	8000b68 <__aeabi_d2iz>
 800a314:	2200      	movs	r2, #0
 800a316:	4683      	mov	fp, r0
 800a318:	2300      	movs	r3, #0
 800a31a:	4630      	mov	r0, r6
 800a31c:	4639      	mov	r1, r7
 800a31e:	f7f6 fbe5 	bl	8000aec <__aeabi_dcmplt>
 800a322:	b148      	cbz	r0, 800a338 <_dtoa_r+0x190>
 800a324:	4658      	mov	r0, fp
 800a326:	f7f6 f905 	bl	8000534 <__aeabi_i2d>
 800a32a:	4632      	mov	r2, r6
 800a32c:	463b      	mov	r3, r7
 800a32e:	f7f6 fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a332:	b908      	cbnz	r0, 800a338 <_dtoa_r+0x190>
 800a334:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a338:	f1bb 0f16 	cmp.w	fp, #22
 800a33c:	d857      	bhi.n	800a3ee <_dtoa_r+0x246>
 800a33e:	4b5b      	ldr	r3, [pc, #364]	; (800a4ac <_dtoa_r+0x304>)
 800a340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	ec51 0b18 	vmov	r0, r1, d8
 800a34c:	f7f6 fbce 	bl	8000aec <__aeabi_dcmplt>
 800a350:	2800      	cmp	r0, #0
 800a352:	d04e      	beq.n	800a3f2 <_dtoa_r+0x24a>
 800a354:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a358:	2300      	movs	r3, #0
 800a35a:	930c      	str	r3, [sp, #48]	; 0x30
 800a35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a35e:	1b5b      	subs	r3, r3, r5
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	bf45      	ittet	mi
 800a364:	f1c3 0301 	rsbmi	r3, r3, #1
 800a368:	9305      	strmi	r3, [sp, #20]
 800a36a:	2300      	movpl	r3, #0
 800a36c:	2300      	movmi	r3, #0
 800a36e:	9206      	str	r2, [sp, #24]
 800a370:	bf54      	ite	pl
 800a372:	9305      	strpl	r3, [sp, #20]
 800a374:	9306      	strmi	r3, [sp, #24]
 800a376:	f1bb 0f00 	cmp.w	fp, #0
 800a37a:	db3c      	blt.n	800a3f6 <_dtoa_r+0x24e>
 800a37c:	9b06      	ldr	r3, [sp, #24]
 800a37e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a382:	445b      	add	r3, fp
 800a384:	9306      	str	r3, [sp, #24]
 800a386:	2300      	movs	r3, #0
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	9b07      	ldr	r3, [sp, #28]
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d868      	bhi.n	800a462 <_dtoa_r+0x2ba>
 800a390:	2b05      	cmp	r3, #5
 800a392:	bfc4      	itt	gt
 800a394:	3b04      	subgt	r3, #4
 800a396:	9307      	strgt	r3, [sp, #28]
 800a398:	9b07      	ldr	r3, [sp, #28]
 800a39a:	f1a3 0302 	sub.w	r3, r3, #2
 800a39e:	bfcc      	ite	gt
 800a3a0:	2500      	movgt	r5, #0
 800a3a2:	2501      	movle	r5, #1
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	f200 8085 	bhi.w	800a4b4 <_dtoa_r+0x30c>
 800a3aa:	e8df f003 	tbb	[pc, r3]
 800a3ae:	3b2e      	.short	0x3b2e
 800a3b0:	5839      	.short	0x5839
 800a3b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3b6:	441d      	add	r5, r3
 800a3b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	bfc1      	itttt	gt
 800a3c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a3cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a3d0:	bfd6      	itet	le
 800a3d2:	f1c3 0320 	rsble	r3, r3, #32
 800a3d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3da:	fa06 f003 	lslle.w	r0, r6, r3
 800a3de:	f7f6 f899 	bl	8000514 <__aeabi_ui2d>
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a3e8:	3d01      	subs	r5, #1
 800a3ea:	920e      	str	r2, [sp, #56]	; 0x38
 800a3ec:	e76f      	b.n	800a2ce <_dtoa_r+0x126>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7b3      	b.n	800a35a <_dtoa_r+0x1b2>
 800a3f2:	900c      	str	r0, [sp, #48]	; 0x30
 800a3f4:	e7b2      	b.n	800a35c <_dtoa_r+0x1b4>
 800a3f6:	9b05      	ldr	r3, [sp, #20]
 800a3f8:	eba3 030b 	sub.w	r3, r3, fp
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	f1cb 0300 	rsb	r3, fp, #0
 800a402:	9308      	str	r3, [sp, #32]
 800a404:	2300      	movs	r3, #0
 800a406:	930b      	str	r3, [sp, #44]	; 0x2c
 800a408:	e7bf      	b.n	800a38a <_dtoa_r+0x1e2>
 800a40a:	2300      	movs	r3, #0
 800a40c:	9309      	str	r3, [sp, #36]	; 0x24
 800a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a410:	2b00      	cmp	r3, #0
 800a412:	dc52      	bgt.n	800a4ba <_dtoa_r+0x312>
 800a414:	2301      	movs	r3, #1
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	461a      	mov	r2, r3
 800a41c:	920a      	str	r2, [sp, #40]	; 0x28
 800a41e:	e00b      	b.n	800a438 <_dtoa_r+0x290>
 800a420:	2301      	movs	r3, #1
 800a422:	e7f3      	b.n	800a40c <_dtoa_r+0x264>
 800a424:	2300      	movs	r3, #0
 800a426:	9309      	str	r3, [sp, #36]	; 0x24
 800a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42a:	445b      	add	r3, fp
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	3301      	adds	r3, #1
 800a430:	2b01      	cmp	r3, #1
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	bfb8      	it	lt
 800a436:	2301      	movlt	r3, #1
 800a438:	69e0      	ldr	r0, [r4, #28]
 800a43a:	2100      	movs	r1, #0
 800a43c:	2204      	movs	r2, #4
 800a43e:	f102 0614 	add.w	r6, r2, #20
 800a442:	429e      	cmp	r6, r3
 800a444:	d93d      	bls.n	800a4c2 <_dtoa_r+0x31a>
 800a446:	6041      	str	r1, [r0, #4]
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fd9f 	bl	800af8c <_Balloc>
 800a44e:	9000      	str	r0, [sp, #0]
 800a450:	2800      	cmp	r0, #0
 800a452:	d139      	bne.n	800a4c8 <_dtoa_r+0x320>
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <_dtoa_r+0x308>)
 800a456:	4602      	mov	r2, r0
 800a458:	f240 11af 	movw	r1, #431	; 0x1af
 800a45c:	e6bd      	b.n	800a1da <_dtoa_r+0x32>
 800a45e:	2301      	movs	r3, #1
 800a460:	e7e1      	b.n	800a426 <_dtoa_r+0x27e>
 800a462:	2501      	movs	r5, #1
 800a464:	2300      	movs	r3, #0
 800a466:	9307      	str	r3, [sp, #28]
 800a468:	9509      	str	r5, [sp, #36]	; 0x24
 800a46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	2200      	movs	r2, #0
 800a474:	2312      	movs	r3, #18
 800a476:	e7d1      	b.n	800a41c <_dtoa_r+0x274>
 800a478:	636f4361 	.word	0x636f4361
 800a47c:	3fd287a7 	.word	0x3fd287a7
 800a480:	8b60c8b3 	.word	0x8b60c8b3
 800a484:	3fc68a28 	.word	0x3fc68a28
 800a488:	509f79fb 	.word	0x509f79fb
 800a48c:	3fd34413 	.word	0x3fd34413
 800a490:	0800f318 	.word	0x0800f318
 800a494:	0800f32f 	.word	0x0800f32f
 800a498:	7ff00000 	.word	0x7ff00000
 800a49c:	0800f314 	.word	0x0800f314
 800a4a0:	0800f30b 	.word	0x0800f30b
 800a4a4:	0800f671 	.word	0x0800f671
 800a4a8:	3ff80000 	.word	0x3ff80000
 800a4ac:	0800f420 	.word	0x0800f420
 800a4b0:	0800f387 	.word	0x0800f387
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b8:	e7d7      	b.n	800a46a <_dtoa_r+0x2c2>
 800a4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	e7ba      	b.n	800a438 <_dtoa_r+0x290>
 800a4c2:	3101      	adds	r1, #1
 800a4c4:	0052      	lsls	r2, r2, #1
 800a4c6:	e7ba      	b.n	800a43e <_dtoa_r+0x296>
 800a4c8:	69e3      	ldr	r3, [r4, #28]
 800a4ca:	9a00      	ldr	r2, [sp, #0]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	2b0e      	cmp	r3, #14
 800a4d2:	f200 80a8 	bhi.w	800a626 <_dtoa_r+0x47e>
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	f000 80a5 	beq.w	800a626 <_dtoa_r+0x47e>
 800a4dc:	f1bb 0f00 	cmp.w	fp, #0
 800a4e0:	dd38      	ble.n	800a554 <_dtoa_r+0x3ac>
 800a4e2:	4bc0      	ldr	r3, [pc, #768]	; (800a7e4 <_dtoa_r+0x63c>)
 800a4e4:	f00b 020f 	and.w	r2, fp, #15
 800a4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a4f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a4f8:	d019      	beq.n	800a52e <_dtoa_r+0x386>
 800a4fa:	4bbb      	ldr	r3, [pc, #748]	; (800a7e8 <_dtoa_r+0x640>)
 800a4fc:	ec51 0b18 	vmov	r0, r1, d8
 800a500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a504:	f7f6 f9aa 	bl	800085c <__aeabi_ddiv>
 800a508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a50c:	f008 080f 	and.w	r8, r8, #15
 800a510:	2503      	movs	r5, #3
 800a512:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a7e8 <_dtoa_r+0x640>
 800a516:	f1b8 0f00 	cmp.w	r8, #0
 800a51a:	d10a      	bne.n	800a532 <_dtoa_r+0x38a>
 800a51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a520:	4632      	mov	r2, r6
 800a522:	463b      	mov	r3, r7
 800a524:	f7f6 f99a 	bl	800085c <__aeabi_ddiv>
 800a528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a52c:	e02b      	b.n	800a586 <_dtoa_r+0x3de>
 800a52e:	2502      	movs	r5, #2
 800a530:	e7ef      	b.n	800a512 <_dtoa_r+0x36a>
 800a532:	f018 0f01 	tst.w	r8, #1
 800a536:	d008      	beq.n	800a54a <_dtoa_r+0x3a2>
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a540:	f7f6 f862 	bl	8000608 <__aeabi_dmul>
 800a544:	3501      	adds	r5, #1
 800a546:	4606      	mov	r6, r0
 800a548:	460f      	mov	r7, r1
 800a54a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a54e:	f109 0908 	add.w	r9, r9, #8
 800a552:	e7e0      	b.n	800a516 <_dtoa_r+0x36e>
 800a554:	f000 809f 	beq.w	800a696 <_dtoa_r+0x4ee>
 800a558:	f1cb 0600 	rsb	r6, fp, #0
 800a55c:	4ba1      	ldr	r3, [pc, #644]	; (800a7e4 <_dtoa_r+0x63c>)
 800a55e:	4fa2      	ldr	r7, [pc, #648]	; (800a7e8 <_dtoa_r+0x640>)
 800a560:	f006 020f 	and.w	r2, r6, #15
 800a564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	ec51 0b18 	vmov	r0, r1, d8
 800a570:	f7f6 f84a 	bl	8000608 <__aeabi_dmul>
 800a574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a578:	1136      	asrs	r6, r6, #4
 800a57a:	2300      	movs	r3, #0
 800a57c:	2502      	movs	r5, #2
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d17e      	bne.n	800a680 <_dtoa_r+0x4d8>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1d0      	bne.n	800a528 <_dtoa_r+0x380>
 800a586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a588:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 8084 	beq.w	800a69a <_dtoa_r+0x4f2>
 800a592:	4b96      	ldr	r3, [pc, #600]	; (800a7ec <_dtoa_r+0x644>)
 800a594:	2200      	movs	r2, #0
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f6 faa7 	bl	8000aec <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d07b      	beq.n	800a69a <_dtoa_r+0x4f2>
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d078      	beq.n	800a69a <_dtoa_r+0x4f2>
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dd39      	ble.n	800a622 <_dtoa_r+0x47a>
 800a5ae:	4b90      	ldr	r3, [pc, #576]	; (800a7f0 <_dtoa_r+0x648>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f6 f827 	bl	8000608 <__aeabi_dmul>
 800a5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5be:	9e01      	ldr	r6, [sp, #4]
 800a5c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f7f5 ffb2 	bl	8000534 <__aeabi_i2d>
 800a5d0:	4642      	mov	r2, r8
 800a5d2:	464b      	mov	r3, r9
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	4b86      	ldr	r3, [pc, #536]	; (800a7f4 <_dtoa_r+0x64c>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f7f5 fe5e 	bl	800029c <__adddf3>
 800a5e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	d158      	bne.n	800a6a0 <_dtoa_r+0x4f8>
 800a5ee:	4b82      	ldr	r3, [pc, #520]	; (800a7f8 <_dtoa_r+0x650>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	f7f5 fe4f 	bl	8000298 <__aeabi_dsub>
 800a5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5fe:	4680      	mov	r8, r0
 800a600:	4689      	mov	r9, r1
 800a602:	f7f6 fa91 	bl	8000b28 <__aeabi_dcmpgt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f040 8296 	bne.w	800ab38 <_dtoa_r+0x990>
 800a60c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a610:	4640      	mov	r0, r8
 800a612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a616:	4649      	mov	r1, r9
 800a618:	f7f6 fa68 	bl	8000aec <__aeabi_dcmplt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f040 8289 	bne.w	800ab34 <_dtoa_r+0x98c>
 800a622:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f2c0 814e 	blt.w	800a8ca <_dtoa_r+0x722>
 800a62e:	f1bb 0f0e 	cmp.w	fp, #14
 800a632:	f300 814a 	bgt.w	800a8ca <_dtoa_r+0x722>
 800a636:	4b6b      	ldr	r3, [pc, #428]	; (800a7e4 <_dtoa_r+0x63c>)
 800a638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a642:	2b00      	cmp	r3, #0
 800a644:	f280 80dc 	bge.w	800a800 <_dtoa_r+0x658>
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f300 80d8 	bgt.w	800a800 <_dtoa_r+0x658>
 800a650:	f040 826f 	bne.w	800ab32 <_dtoa_r+0x98a>
 800a654:	4b68      	ldr	r3, [pc, #416]	; (800a7f8 <_dtoa_r+0x650>)
 800a656:	2200      	movs	r2, #0
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f5 ffd4 	bl	8000608 <__aeabi_dmul>
 800a660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a664:	f7f6 fa56 	bl	8000b14 <__aeabi_dcmpge>
 800a668:	9e04      	ldr	r6, [sp, #16]
 800a66a:	4637      	mov	r7, r6
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f040 8245 	bne.w	800aafc <_dtoa_r+0x954>
 800a672:	9d00      	ldr	r5, [sp, #0]
 800a674:	2331      	movs	r3, #49	; 0x31
 800a676:	f805 3b01 	strb.w	r3, [r5], #1
 800a67a:	f10b 0b01 	add.w	fp, fp, #1
 800a67e:	e241      	b.n	800ab04 <_dtoa_r+0x95c>
 800a680:	07f2      	lsls	r2, r6, #31
 800a682:	d505      	bpl.n	800a690 <_dtoa_r+0x4e8>
 800a684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a688:	f7f5 ffbe 	bl	8000608 <__aeabi_dmul>
 800a68c:	3501      	adds	r5, #1
 800a68e:	2301      	movs	r3, #1
 800a690:	1076      	asrs	r6, r6, #1
 800a692:	3708      	adds	r7, #8
 800a694:	e773      	b.n	800a57e <_dtoa_r+0x3d6>
 800a696:	2502      	movs	r5, #2
 800a698:	e775      	b.n	800a586 <_dtoa_r+0x3de>
 800a69a:	9e04      	ldr	r6, [sp, #16]
 800a69c:	465f      	mov	r7, fp
 800a69e:	e792      	b.n	800a5c6 <_dtoa_r+0x41e>
 800a6a0:	9900      	ldr	r1, [sp, #0]
 800a6a2:	4b50      	ldr	r3, [pc, #320]	; (800a7e4 <_dtoa_r+0x63c>)
 800a6a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6a8:	4431      	add	r1, r6
 800a6aa:	9102      	str	r1, [sp, #8]
 800a6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6ae:	eeb0 9a47 	vmov.f32	s18, s14
 800a6b2:	eef0 9a67 	vmov.f32	s19, s15
 800a6b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	d044      	beq.n	800a74c <_dtoa_r+0x5a4>
 800a6c2:	494e      	ldr	r1, [pc, #312]	; (800a7fc <_dtoa_r+0x654>)
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f7f6 f8c9 	bl	800085c <__aeabi_ddiv>
 800a6ca:	ec53 2b19 	vmov	r2, r3, d9
 800a6ce:	f7f5 fde3 	bl	8000298 <__aeabi_dsub>
 800a6d2:	9d00      	ldr	r5, [sp, #0]
 800a6d4:	ec41 0b19 	vmov	d9, r0, r1
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7f6 fa44 	bl	8000b68 <__aeabi_d2iz>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	f7f5 ff27 	bl	8000534 <__aeabi_i2d>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	f7f5 fdd3 	bl	8000298 <__aeabi_dsub>
 800a6f2:	3630      	adds	r6, #48	; 0x30
 800a6f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6f8:	ec53 2b19 	vmov	r2, r3, d9
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	f7f6 f9f4 	bl	8000aec <__aeabi_dcmplt>
 800a704:	2800      	cmp	r0, #0
 800a706:	d164      	bne.n	800a7d2 <_dtoa_r+0x62a>
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	4937      	ldr	r1, [pc, #220]	; (800a7ec <_dtoa_r+0x644>)
 800a70e:	2000      	movs	r0, #0
 800a710:	f7f5 fdc2 	bl	8000298 <__aeabi_dsub>
 800a714:	ec53 2b19 	vmov	r2, r3, d9
 800a718:	f7f6 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 80b6 	bne.w	800a88e <_dtoa_r+0x6e6>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	429d      	cmp	r5, r3
 800a726:	f43f af7c 	beq.w	800a622 <_dtoa_r+0x47a>
 800a72a:	4b31      	ldr	r3, [pc, #196]	; (800a7f0 <_dtoa_r+0x648>)
 800a72c:	ec51 0b19 	vmov	r0, r1, d9
 800a730:	2200      	movs	r2, #0
 800a732:	f7f5 ff69 	bl	8000608 <__aeabi_dmul>
 800a736:	4b2e      	ldr	r3, [pc, #184]	; (800a7f0 <_dtoa_r+0x648>)
 800a738:	ec41 0b19 	vmov	d9, r0, r1
 800a73c:	2200      	movs	r2, #0
 800a73e:	4640      	mov	r0, r8
 800a740:	4649      	mov	r1, r9
 800a742:	f7f5 ff61 	bl	8000608 <__aeabi_dmul>
 800a746:	4680      	mov	r8, r0
 800a748:	4689      	mov	r9, r1
 800a74a:	e7c5      	b.n	800a6d8 <_dtoa_r+0x530>
 800a74c:	ec51 0b17 	vmov	r0, r1, d7
 800a750:	f7f5 ff5a 	bl	8000608 <__aeabi_dmul>
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	9d00      	ldr	r5, [sp, #0]
 800a758:	930f      	str	r3, [sp, #60]	; 0x3c
 800a75a:	ec41 0b19 	vmov	d9, r0, r1
 800a75e:	4649      	mov	r1, r9
 800a760:	4640      	mov	r0, r8
 800a762:	f7f6 fa01 	bl	8000b68 <__aeabi_d2iz>
 800a766:	4606      	mov	r6, r0
 800a768:	f7f5 fee4 	bl	8000534 <__aeabi_i2d>
 800a76c:	3630      	adds	r6, #48	; 0x30
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f5 fd8f 	bl	8000298 <__aeabi_dsub>
 800a77a:	f805 6b01 	strb.w	r6, [r5], #1
 800a77e:	9b02      	ldr	r3, [sp, #8]
 800a780:	429d      	cmp	r5, r3
 800a782:	4680      	mov	r8, r0
 800a784:	4689      	mov	r9, r1
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	d124      	bne.n	800a7d6 <_dtoa_r+0x62e>
 800a78c:	4b1b      	ldr	r3, [pc, #108]	; (800a7fc <_dtoa_r+0x654>)
 800a78e:	ec51 0b19 	vmov	r0, r1, d9
 800a792:	f7f5 fd83 	bl	800029c <__adddf3>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f7f6 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d173      	bne.n	800a88e <_dtoa_r+0x6e6>
 800a7a6:	ec53 2b19 	vmov	r2, r3, d9
 800a7aa:	4914      	ldr	r1, [pc, #80]	; (800a7fc <_dtoa_r+0x654>)
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f7f5 fd73 	bl	8000298 <__aeabi_dsub>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f6 f997 	bl	8000aec <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f43f af2f 	beq.w	800a622 <_dtoa_r+0x47a>
 800a7c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7c6:	1e6b      	subs	r3, r5, #1
 800a7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7ce:	2b30      	cmp	r3, #48	; 0x30
 800a7d0:	d0f8      	beq.n	800a7c4 <_dtoa_r+0x61c>
 800a7d2:	46bb      	mov	fp, r7
 800a7d4:	e04a      	b.n	800a86c <_dtoa_r+0x6c4>
 800a7d6:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <_dtoa_r+0x648>)
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	e7bd      	b.n	800a75e <_dtoa_r+0x5b6>
 800a7e2:	bf00      	nop
 800a7e4:	0800f420 	.word	0x0800f420
 800a7e8:	0800f3f8 	.word	0x0800f3f8
 800a7ec:	3ff00000 	.word	0x3ff00000
 800a7f0:	40240000 	.word	0x40240000
 800a7f4:	401c0000 	.word	0x401c0000
 800a7f8:	40140000 	.word	0x40140000
 800a7fc:	3fe00000 	.word	0x3fe00000
 800a800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a804:	9d00      	ldr	r5, [sp, #0]
 800a806:	4642      	mov	r2, r8
 800a808:	464b      	mov	r3, r9
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f6 f825 	bl	800085c <__aeabi_ddiv>
 800a812:	f7f6 f9a9 	bl	8000b68 <__aeabi_d2iz>
 800a816:	9001      	str	r0, [sp, #4]
 800a818:	f7f5 fe8c 	bl	8000534 <__aeabi_i2d>
 800a81c:	4642      	mov	r2, r8
 800a81e:	464b      	mov	r3, r9
 800a820:	f7f5 fef2 	bl	8000608 <__aeabi_dmul>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fd34 	bl	8000298 <__aeabi_dsub>
 800a830:	9e01      	ldr	r6, [sp, #4]
 800a832:	9f04      	ldr	r7, [sp, #16]
 800a834:	3630      	adds	r6, #48	; 0x30
 800a836:	f805 6b01 	strb.w	r6, [r5], #1
 800a83a:	9e00      	ldr	r6, [sp, #0]
 800a83c:	1bae      	subs	r6, r5, r6
 800a83e:	42b7      	cmp	r7, r6
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	d134      	bne.n	800a8b0 <_dtoa_r+0x708>
 800a846:	f7f5 fd29 	bl	800029c <__adddf3>
 800a84a:	4642      	mov	r2, r8
 800a84c:	464b      	mov	r3, r9
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	f7f6 f969 	bl	8000b28 <__aeabi_dcmpgt>
 800a856:	b9c8      	cbnz	r0, 800a88c <_dtoa_r+0x6e4>
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	4630      	mov	r0, r6
 800a85e:	4639      	mov	r1, r7
 800a860:	f7f6 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a864:	b110      	cbz	r0, 800a86c <_dtoa_r+0x6c4>
 800a866:	9b01      	ldr	r3, [sp, #4]
 800a868:	07db      	lsls	r3, r3, #31
 800a86a:	d40f      	bmi.n	800a88c <_dtoa_r+0x6e4>
 800a86c:	4651      	mov	r1, sl
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fbcc 	bl	800b00c <_Bfree>
 800a874:	2300      	movs	r3, #0
 800a876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a878:	702b      	strb	r3, [r5, #0]
 800a87a:	f10b 0301 	add.w	r3, fp, #1
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a882:	2b00      	cmp	r3, #0
 800a884:	f43f ace2 	beq.w	800a24c <_dtoa_r+0xa4>
 800a888:	601d      	str	r5, [r3, #0]
 800a88a:	e4df      	b.n	800a24c <_dtoa_r+0xa4>
 800a88c:	465f      	mov	r7, fp
 800a88e:	462b      	mov	r3, r5
 800a890:	461d      	mov	r5, r3
 800a892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a896:	2a39      	cmp	r2, #57	; 0x39
 800a898:	d106      	bne.n	800a8a8 <_dtoa_r+0x700>
 800a89a:	9a00      	ldr	r2, [sp, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d1f7      	bne.n	800a890 <_dtoa_r+0x6e8>
 800a8a0:	9900      	ldr	r1, [sp, #0]
 800a8a2:	2230      	movs	r2, #48	; 0x30
 800a8a4:	3701      	adds	r7, #1
 800a8a6:	700a      	strb	r2, [r1, #0]
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	3201      	adds	r2, #1
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e790      	b.n	800a7d2 <_dtoa_r+0x62a>
 800a8b0:	4ba3      	ldr	r3, [pc, #652]	; (800ab40 <_dtoa_r+0x998>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f7f5 fea8 	bl	8000608 <__aeabi_dmul>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460f      	mov	r7, r1
 800a8c0:	f7f6 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d09e      	beq.n	800a806 <_dtoa_r+0x65e>
 800a8c8:	e7d0      	b.n	800a86c <_dtoa_r+0x6c4>
 800a8ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	f000 80ca 	beq.w	800aa66 <_dtoa_r+0x8be>
 800a8d2:	9a07      	ldr	r2, [sp, #28]
 800a8d4:	2a01      	cmp	r2, #1
 800a8d6:	f300 80ad 	bgt.w	800aa34 <_dtoa_r+0x88c>
 800a8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	f000 80a5 	beq.w	800aa2c <_dtoa_r+0x884>
 800a8e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8e6:	9e08      	ldr	r6, [sp, #32]
 800a8e8:	9d05      	ldr	r5, [sp, #20]
 800a8ea:	9a05      	ldr	r2, [sp, #20]
 800a8ec:	441a      	add	r2, r3
 800a8ee:	9205      	str	r2, [sp, #20]
 800a8f0:	9a06      	ldr	r2, [sp, #24]
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	441a      	add	r2, r3
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	9206      	str	r2, [sp, #24]
 800a8fa:	f000 fc87 	bl	800b20c <__i2b>
 800a8fe:	4607      	mov	r7, r0
 800a900:	b165      	cbz	r5, 800a91c <_dtoa_r+0x774>
 800a902:	9b06      	ldr	r3, [sp, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	dd09      	ble.n	800a91c <_dtoa_r+0x774>
 800a908:	42ab      	cmp	r3, r5
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	bfa8      	it	ge
 800a90e:	462b      	movge	r3, r5
 800a910:	1ad2      	subs	r2, r2, r3
 800a912:	9205      	str	r2, [sp, #20]
 800a914:	9a06      	ldr	r2, [sp, #24]
 800a916:	1aed      	subs	r5, r5, r3
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	9306      	str	r3, [sp, #24]
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	b1f3      	cbz	r3, 800a95e <_dtoa_r+0x7b6>
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80a3 	beq.w	800aa6e <_dtoa_r+0x8c6>
 800a928:	2e00      	cmp	r6, #0
 800a92a:	dd10      	ble.n	800a94e <_dtoa_r+0x7a6>
 800a92c:	4639      	mov	r1, r7
 800a92e:	4632      	mov	r2, r6
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fd2b 	bl	800b38c <__pow5mult>
 800a936:	4652      	mov	r2, sl
 800a938:	4601      	mov	r1, r0
 800a93a:	4607      	mov	r7, r0
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fc7b 	bl	800b238 <__multiply>
 800a942:	4651      	mov	r1, sl
 800a944:	4680      	mov	r8, r0
 800a946:	4620      	mov	r0, r4
 800a948:	f000 fb60 	bl	800b00c <_Bfree>
 800a94c:	46c2      	mov	sl, r8
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	1b9a      	subs	r2, r3, r6
 800a952:	d004      	beq.n	800a95e <_dtoa_r+0x7b6>
 800a954:	4651      	mov	r1, sl
 800a956:	4620      	mov	r0, r4
 800a958:	f000 fd18 	bl	800b38c <__pow5mult>
 800a95c:	4682      	mov	sl, r0
 800a95e:	2101      	movs	r1, #1
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fc53 	bl	800b20c <__i2b>
 800a966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	4606      	mov	r6, r0
 800a96c:	f340 8081 	ble.w	800aa72 <_dtoa_r+0x8ca>
 800a970:	461a      	mov	r2, r3
 800a972:	4601      	mov	r1, r0
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fd09 	bl	800b38c <__pow5mult>
 800a97a:	9b07      	ldr	r3, [sp, #28]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	4606      	mov	r6, r0
 800a980:	dd7a      	ble.n	800aa78 <_dtoa_r+0x8d0>
 800a982:	f04f 0800 	mov.w	r8, #0
 800a986:	6933      	ldr	r3, [r6, #16]
 800a988:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a98c:	6918      	ldr	r0, [r3, #16]
 800a98e:	f000 fbef 	bl	800b170 <__hi0bits>
 800a992:	f1c0 0020 	rsb	r0, r0, #32
 800a996:	9b06      	ldr	r3, [sp, #24]
 800a998:	4418      	add	r0, r3
 800a99a:	f010 001f 	ands.w	r0, r0, #31
 800a99e:	f000 8094 	beq.w	800aaca <_dtoa_r+0x922>
 800a9a2:	f1c0 0320 	rsb	r3, r0, #32
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	f340 8085 	ble.w	800aab6 <_dtoa_r+0x90e>
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	f1c0 001c 	rsb	r0, r0, #28
 800a9b2:	4403      	add	r3, r0
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	9b06      	ldr	r3, [sp, #24]
 800a9b8:	4403      	add	r3, r0
 800a9ba:	4405      	add	r5, r0
 800a9bc:	9306      	str	r3, [sp, #24]
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd05      	ble.n	800a9d0 <_dtoa_r+0x828>
 800a9c4:	4651      	mov	r1, sl
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fd39 	bl	800b440 <__lshift>
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	9b06      	ldr	r3, [sp, #24]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd05      	ble.n	800a9e2 <_dtoa_r+0x83a>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fd30 	bl	800b440 <__lshift>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d072      	beq.n	800aace <_dtoa_r+0x926>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f000 fd94 	bl	800b518 <__mcmp>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	da6c      	bge.n	800aace <_dtoa_r+0x926>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4651      	mov	r1, sl
 800a9f8:	220a      	movs	r2, #10
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fb28 	bl	800b050 <__multadd>
 800aa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aa06:	4682      	mov	sl, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 81b0 	beq.w	800ad6e <_dtoa_r+0xbc6>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	4639      	mov	r1, r7
 800aa12:	220a      	movs	r2, #10
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fb1b 	bl	800b050 <__multadd>
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	4607      	mov	r7, r0
 800aa20:	f300 8096 	bgt.w	800ab50 <_dtoa_r+0x9a8>
 800aa24:	9b07      	ldr	r3, [sp, #28]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	dc59      	bgt.n	800aade <_dtoa_r+0x936>
 800aa2a:	e091      	b.n	800ab50 <_dtoa_r+0x9a8>
 800aa2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa32:	e758      	b.n	800a8e6 <_dtoa_r+0x73e>
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	1e5e      	subs	r6, r3, #1
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	42b3      	cmp	r3, r6
 800aa3c:	bfbf      	itttt	lt
 800aa3e:	9b08      	ldrlt	r3, [sp, #32]
 800aa40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa42:	9608      	strlt	r6, [sp, #32]
 800aa44:	1af3      	sublt	r3, r6, r3
 800aa46:	bfb4      	ite	lt
 800aa48:	18d2      	addlt	r2, r2, r3
 800aa4a:	1b9e      	subge	r6, r3, r6
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	bfbc      	itt	lt
 800aa50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa52:	2600      	movlt	r6, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	bfb7      	itett	lt
 800aa58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa60:	1a9d      	sublt	r5, r3, r2
 800aa62:	2300      	movlt	r3, #0
 800aa64:	e741      	b.n	800a8ea <_dtoa_r+0x742>
 800aa66:	9e08      	ldr	r6, [sp, #32]
 800aa68:	9d05      	ldr	r5, [sp, #20]
 800aa6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa6c:	e748      	b.n	800a900 <_dtoa_r+0x758>
 800aa6e:	9a08      	ldr	r2, [sp, #32]
 800aa70:	e770      	b.n	800a954 <_dtoa_r+0x7ac>
 800aa72:	9b07      	ldr	r3, [sp, #28]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	dc19      	bgt.n	800aaac <_dtoa_r+0x904>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	b9bb      	cbnz	r3, 800aaac <_dtoa_r+0x904>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa82:	b99b      	cbnz	r3, 800aaac <_dtoa_r+0x904>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa8a:	0d1b      	lsrs	r3, r3, #20
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	b183      	cbz	r3, 800aab2 <_dtoa_r+0x90a>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	3301      	adds	r3, #1
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	9b06      	ldr	r3, [sp, #24]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	f04f 0801 	mov.w	r8, #1
 800aaa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f47f af6f 	bne.w	800a986 <_dtoa_r+0x7de>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	e774      	b.n	800a996 <_dtoa_r+0x7ee>
 800aaac:	f04f 0800 	mov.w	r8, #0
 800aab0:	e7f6      	b.n	800aaa0 <_dtoa_r+0x8f8>
 800aab2:	4698      	mov	r8, r3
 800aab4:	e7f4      	b.n	800aaa0 <_dtoa_r+0x8f8>
 800aab6:	d082      	beq.n	800a9be <_dtoa_r+0x816>
 800aab8:	9a05      	ldr	r2, [sp, #20]
 800aaba:	331c      	adds	r3, #28
 800aabc:	441a      	add	r2, r3
 800aabe:	9205      	str	r2, [sp, #20]
 800aac0:	9a06      	ldr	r2, [sp, #24]
 800aac2:	441a      	add	r2, r3
 800aac4:	441d      	add	r5, r3
 800aac6:	9206      	str	r2, [sp, #24]
 800aac8:	e779      	b.n	800a9be <_dtoa_r+0x816>
 800aaca:	4603      	mov	r3, r0
 800aacc:	e7f4      	b.n	800aab8 <_dtoa_r+0x910>
 800aace:	9b04      	ldr	r3, [sp, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dc37      	bgt.n	800ab44 <_dtoa_r+0x99c>
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	dd34      	ble.n	800ab44 <_dtoa_r+0x99c>
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	b963      	cbnz	r3, 800aafc <_dtoa_r+0x954>
 800aae2:	4631      	mov	r1, r6
 800aae4:	2205      	movs	r2, #5
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fab2 	bl	800b050 <__multadd>
 800aaec:	4601      	mov	r1, r0
 800aaee:	4606      	mov	r6, r0
 800aaf0:	4650      	mov	r0, sl
 800aaf2:	f000 fd11 	bl	800b518 <__mcmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f73f adbb 	bgt.w	800a672 <_dtoa_r+0x4ca>
 800aafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafe:	9d00      	ldr	r5, [sp, #0]
 800ab00:	ea6f 0b03 	mvn.w	fp, r3
 800ab04:	f04f 0800 	mov.w	r8, #0
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fa7e 	bl	800b00c <_Bfree>
 800ab10:	2f00      	cmp	r7, #0
 800ab12:	f43f aeab 	beq.w	800a86c <_dtoa_r+0x6c4>
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	d005      	beq.n	800ab28 <_dtoa_r+0x980>
 800ab1c:	45b8      	cmp	r8, r7
 800ab1e:	d003      	beq.n	800ab28 <_dtoa_r+0x980>
 800ab20:	4641      	mov	r1, r8
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fa72 	bl	800b00c <_Bfree>
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fa6e 	bl	800b00c <_Bfree>
 800ab30:	e69c      	b.n	800a86c <_dtoa_r+0x6c4>
 800ab32:	2600      	movs	r6, #0
 800ab34:	4637      	mov	r7, r6
 800ab36:	e7e1      	b.n	800aafc <_dtoa_r+0x954>
 800ab38:	46bb      	mov	fp, r7
 800ab3a:	4637      	mov	r7, r6
 800ab3c:	e599      	b.n	800a672 <_dtoa_r+0x4ca>
 800ab3e:	bf00      	nop
 800ab40:	40240000 	.word	0x40240000
 800ab44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80c8 	beq.w	800acdc <_dtoa_r+0xb34>
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	dd05      	ble.n	800ab60 <_dtoa_r+0x9b8>
 800ab54:	4639      	mov	r1, r7
 800ab56:	462a      	mov	r2, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fc71 	bl	800b440 <__lshift>
 800ab5e:	4607      	mov	r7, r0
 800ab60:	f1b8 0f00 	cmp.w	r8, #0
 800ab64:	d05b      	beq.n	800ac1e <_dtoa_r+0xa76>
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fa0f 	bl	800af8c <_Balloc>
 800ab6e:	4605      	mov	r5, r0
 800ab70:	b928      	cbnz	r0, 800ab7e <_dtoa_r+0x9d6>
 800ab72:	4b83      	ldr	r3, [pc, #524]	; (800ad80 <_dtoa_r+0xbd8>)
 800ab74:	4602      	mov	r2, r0
 800ab76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab7a:	f7ff bb2e 	b.w	800a1da <_dtoa_r+0x32>
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	3202      	adds	r2, #2
 800ab82:	0092      	lsls	r2, r2, #2
 800ab84:	f107 010c 	add.w	r1, r7, #12
 800ab88:	300c      	adds	r0, #12
 800ab8a:	f7ff fa6e 	bl	800a06a <memcpy>
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4629      	mov	r1, r5
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 fc54 	bl	800b440 <__lshift>
 800ab98:	9b00      	ldr	r3, [sp, #0]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aba2:	4413      	add	r3, r2
 800aba4:	9308      	str	r3, [sp, #32]
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	46b8      	mov	r8, r7
 800abae:	9306      	str	r3, [sp, #24]
 800abb0:	4607      	mov	r7, r0
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	4631      	mov	r1, r6
 800abb6:	3b01      	subs	r3, #1
 800abb8:	4650      	mov	r0, sl
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	f7ff fa6a 	bl	800a094 <quorem>
 800abc0:	4641      	mov	r1, r8
 800abc2:	9002      	str	r0, [sp, #8]
 800abc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abc8:	4650      	mov	r0, sl
 800abca:	f000 fca5 	bl	800b518 <__mcmp>
 800abce:	463a      	mov	r2, r7
 800abd0:	9005      	str	r0, [sp, #20]
 800abd2:	4631      	mov	r1, r6
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fcbb 	bl	800b550 <__mdiff>
 800abda:	68c2      	ldr	r2, [r0, #12]
 800abdc:	4605      	mov	r5, r0
 800abde:	bb02      	cbnz	r2, 800ac22 <_dtoa_r+0xa7a>
 800abe0:	4601      	mov	r1, r0
 800abe2:	4650      	mov	r0, sl
 800abe4:	f000 fc98 	bl	800b518 <__mcmp>
 800abe8:	4602      	mov	r2, r0
 800abea:	4629      	mov	r1, r5
 800abec:	4620      	mov	r0, r4
 800abee:	9209      	str	r2, [sp, #36]	; 0x24
 800abf0:	f000 fa0c 	bl	800b00c <_Bfree>
 800abf4:	9b07      	ldr	r3, [sp, #28]
 800abf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf8:	9d04      	ldr	r5, [sp, #16]
 800abfa:	ea43 0102 	orr.w	r1, r3, r2
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	4319      	orrs	r1, r3
 800ac02:	d110      	bne.n	800ac26 <_dtoa_r+0xa7e>
 800ac04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac08:	d029      	beq.n	800ac5e <_dtoa_r+0xab6>
 800ac0a:	9b05      	ldr	r3, [sp, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd02      	ble.n	800ac16 <_dtoa_r+0xa6e>
 800ac10:	9b02      	ldr	r3, [sp, #8]
 800ac12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	f883 9000 	strb.w	r9, [r3]
 800ac1c:	e774      	b.n	800ab08 <_dtoa_r+0x960>
 800ac1e:	4638      	mov	r0, r7
 800ac20:	e7ba      	b.n	800ab98 <_dtoa_r+0x9f0>
 800ac22:	2201      	movs	r2, #1
 800ac24:	e7e1      	b.n	800abea <_dtoa_r+0xa42>
 800ac26:	9b05      	ldr	r3, [sp, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	db04      	blt.n	800ac36 <_dtoa_r+0xa8e>
 800ac2c:	9907      	ldr	r1, [sp, #28]
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	9906      	ldr	r1, [sp, #24]
 800ac32:	430b      	orrs	r3, r1
 800ac34:	d120      	bne.n	800ac78 <_dtoa_r+0xad0>
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	dded      	ble.n	800ac16 <_dtoa_r+0xa6e>
 800ac3a:	4651      	mov	r1, sl
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 fbfe 	bl	800b440 <__lshift>
 800ac44:	4631      	mov	r1, r6
 800ac46:	4682      	mov	sl, r0
 800ac48:	f000 fc66 	bl	800b518 <__mcmp>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	dc03      	bgt.n	800ac58 <_dtoa_r+0xab0>
 800ac50:	d1e1      	bne.n	800ac16 <_dtoa_r+0xa6e>
 800ac52:	f019 0f01 	tst.w	r9, #1
 800ac56:	d0de      	beq.n	800ac16 <_dtoa_r+0xa6e>
 800ac58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac5c:	d1d8      	bne.n	800ac10 <_dtoa_r+0xa68>
 800ac5e:	9a01      	ldr	r2, [sp, #4]
 800ac60:	2339      	movs	r3, #57	; 0x39
 800ac62:	7013      	strb	r3, [r2, #0]
 800ac64:	462b      	mov	r3, r5
 800ac66:	461d      	mov	r5, r3
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac6e:	2a39      	cmp	r2, #57	; 0x39
 800ac70:	d06c      	beq.n	800ad4c <_dtoa_r+0xba4>
 800ac72:	3201      	adds	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e747      	b.n	800ab08 <_dtoa_r+0x960>
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	dd07      	ble.n	800ac8c <_dtoa_r+0xae4>
 800ac7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac80:	d0ed      	beq.n	800ac5e <_dtoa_r+0xab6>
 800ac82:	9a01      	ldr	r2, [sp, #4]
 800ac84:	f109 0301 	add.w	r3, r9, #1
 800ac88:	7013      	strb	r3, [r2, #0]
 800ac8a:	e73d      	b.n	800ab08 <_dtoa_r+0x960>
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	9a08      	ldr	r2, [sp, #32]
 800ac90:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d043      	beq.n	800ad20 <_dtoa_r+0xb78>
 800ac98:	4651      	mov	r1, sl
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 f9d6 	bl	800b050 <__multadd>
 800aca4:	45b8      	cmp	r8, r7
 800aca6:	4682      	mov	sl, r0
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	f04f 020a 	mov.w	r2, #10
 800acb0:	4641      	mov	r1, r8
 800acb2:	4620      	mov	r0, r4
 800acb4:	d107      	bne.n	800acc6 <_dtoa_r+0xb1e>
 800acb6:	f000 f9cb 	bl	800b050 <__multadd>
 800acba:	4680      	mov	r8, r0
 800acbc:	4607      	mov	r7, r0
 800acbe:	9b04      	ldr	r3, [sp, #16]
 800acc0:	3301      	adds	r3, #1
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	e775      	b.n	800abb2 <_dtoa_r+0xa0a>
 800acc6:	f000 f9c3 	bl	800b050 <__multadd>
 800acca:	4639      	mov	r1, r7
 800accc:	4680      	mov	r8, r0
 800acce:	2300      	movs	r3, #0
 800acd0:	220a      	movs	r2, #10
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 f9bc 	bl	800b050 <__multadd>
 800acd8:	4607      	mov	r7, r0
 800acda:	e7f0      	b.n	800acbe <_dtoa_r+0xb16>
 800acdc:	9b04      	ldr	r3, [sp, #16]
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	9d00      	ldr	r5, [sp, #0]
 800ace2:	4631      	mov	r1, r6
 800ace4:	4650      	mov	r0, sl
 800ace6:	f7ff f9d5 	bl	800a094 <quorem>
 800acea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acee:	9b00      	ldr	r3, [sp, #0]
 800acf0:	f805 9b01 	strb.w	r9, [r5], #1
 800acf4:	1aea      	subs	r2, r5, r3
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	dd07      	ble.n	800ad0c <_dtoa_r+0xb64>
 800acfc:	4651      	mov	r1, sl
 800acfe:	2300      	movs	r3, #0
 800ad00:	220a      	movs	r2, #10
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f9a4 	bl	800b050 <__multadd>
 800ad08:	4682      	mov	sl, r0
 800ad0a:	e7ea      	b.n	800ace2 <_dtoa_r+0xb3a>
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	bfc8      	it	gt
 800ad12:	461d      	movgt	r5, r3
 800ad14:	9b00      	ldr	r3, [sp, #0]
 800ad16:	bfd8      	it	le
 800ad18:	2501      	movle	r5, #1
 800ad1a:	441d      	add	r5, r3
 800ad1c:	f04f 0800 	mov.w	r8, #0
 800ad20:	4651      	mov	r1, sl
 800ad22:	2201      	movs	r2, #1
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fb8b 	bl	800b440 <__lshift>
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	f000 fbf3 	bl	800b518 <__mcmp>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	dc96      	bgt.n	800ac64 <_dtoa_r+0xabc>
 800ad36:	d102      	bne.n	800ad3e <_dtoa_r+0xb96>
 800ad38:	f019 0f01 	tst.w	r9, #1
 800ad3c:	d192      	bne.n	800ac64 <_dtoa_r+0xabc>
 800ad3e:	462b      	mov	r3, r5
 800ad40:	461d      	mov	r5, r3
 800ad42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad46:	2a30      	cmp	r2, #48	; 0x30
 800ad48:	d0fa      	beq.n	800ad40 <_dtoa_r+0xb98>
 800ad4a:	e6dd      	b.n	800ab08 <_dtoa_r+0x960>
 800ad4c:	9a00      	ldr	r2, [sp, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d189      	bne.n	800ac66 <_dtoa_r+0xabe>
 800ad52:	f10b 0b01 	add.w	fp, fp, #1
 800ad56:	2331      	movs	r3, #49	; 0x31
 800ad58:	e796      	b.n	800ac88 <_dtoa_r+0xae0>
 800ad5a:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <_dtoa_r+0xbdc>)
 800ad5c:	f7ff ba99 	b.w	800a292 <_dtoa_r+0xea>
 800ad60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f47f aa6d 	bne.w	800a242 <_dtoa_r+0x9a>
 800ad68:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <_dtoa_r+0xbe0>)
 800ad6a:	f7ff ba92 	b.w	800a292 <_dtoa_r+0xea>
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dcb5      	bgt.n	800ace0 <_dtoa_r+0xb38>
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	f73f aeb1 	bgt.w	800aade <_dtoa_r+0x936>
 800ad7c:	e7b0      	b.n	800ace0 <_dtoa_r+0xb38>
 800ad7e:	bf00      	nop
 800ad80:	0800f387 	.word	0x0800f387
 800ad84:	0800f670 	.word	0x0800f670
 800ad88:	0800f30b 	.word	0x0800f30b

0800ad8c <_free_r>:
 800ad8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	d044      	beq.n	800ae1c <_free_r+0x90>
 800ad92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad96:	9001      	str	r0, [sp, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad9e:	bfb8      	it	lt
 800ada0:	18e4      	addlt	r4, r4, r3
 800ada2:	f000 f8e7 	bl	800af74 <__malloc_lock>
 800ada6:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <_free_r+0x94>)
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	6813      	ldr	r3, [r2, #0]
 800adac:	b933      	cbnz	r3, 800adbc <_free_r+0x30>
 800adae:	6063      	str	r3, [r4, #4]
 800adb0:	6014      	str	r4, [r2, #0]
 800adb2:	b003      	add	sp, #12
 800adb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adb8:	f000 b8e2 	b.w	800af80 <__malloc_unlock>
 800adbc:	42a3      	cmp	r3, r4
 800adbe:	d908      	bls.n	800add2 <_free_r+0x46>
 800adc0:	6825      	ldr	r5, [r4, #0]
 800adc2:	1961      	adds	r1, r4, r5
 800adc4:	428b      	cmp	r3, r1
 800adc6:	bf01      	itttt	eq
 800adc8:	6819      	ldreq	r1, [r3, #0]
 800adca:	685b      	ldreq	r3, [r3, #4]
 800adcc:	1949      	addeq	r1, r1, r5
 800adce:	6021      	streq	r1, [r4, #0]
 800add0:	e7ed      	b.n	800adae <_free_r+0x22>
 800add2:	461a      	mov	r2, r3
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	b10b      	cbz	r3, 800addc <_free_r+0x50>
 800add8:	42a3      	cmp	r3, r4
 800adda:	d9fa      	bls.n	800add2 <_free_r+0x46>
 800addc:	6811      	ldr	r1, [r2, #0]
 800adde:	1855      	adds	r5, r2, r1
 800ade0:	42a5      	cmp	r5, r4
 800ade2:	d10b      	bne.n	800adfc <_free_r+0x70>
 800ade4:	6824      	ldr	r4, [r4, #0]
 800ade6:	4421      	add	r1, r4
 800ade8:	1854      	adds	r4, r2, r1
 800adea:	42a3      	cmp	r3, r4
 800adec:	6011      	str	r1, [r2, #0]
 800adee:	d1e0      	bne.n	800adb2 <_free_r+0x26>
 800adf0:	681c      	ldr	r4, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	6053      	str	r3, [r2, #4]
 800adf6:	440c      	add	r4, r1
 800adf8:	6014      	str	r4, [r2, #0]
 800adfa:	e7da      	b.n	800adb2 <_free_r+0x26>
 800adfc:	d902      	bls.n	800ae04 <_free_r+0x78>
 800adfe:	230c      	movs	r3, #12
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	e7d6      	b.n	800adb2 <_free_r+0x26>
 800ae04:	6825      	ldr	r5, [r4, #0]
 800ae06:	1961      	adds	r1, r4, r5
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	bf04      	itt	eq
 800ae0c:	6819      	ldreq	r1, [r3, #0]
 800ae0e:	685b      	ldreq	r3, [r3, #4]
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	bf04      	itt	eq
 800ae14:	1949      	addeq	r1, r1, r5
 800ae16:	6021      	streq	r1, [r4, #0]
 800ae18:	6054      	str	r4, [r2, #4]
 800ae1a:	e7ca      	b.n	800adb2 <_free_r+0x26>
 800ae1c:	b003      	add	sp, #12
 800ae1e:	bd30      	pop	{r4, r5, pc}
 800ae20:	20005934 	.word	0x20005934

0800ae24 <malloc>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <malloc+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 b823 	b.w	800ae74 <_malloc_r>
 800ae2e:	bf00      	nop
 800ae30:	200000e8 	.word	0x200000e8

0800ae34 <sbrk_aligned>:
 800ae34:	b570      	push	{r4, r5, r6, lr}
 800ae36:	4e0e      	ldr	r6, [pc, #56]	; (800ae70 <sbrk_aligned+0x3c>)
 800ae38:	460c      	mov	r4, r1
 800ae3a:	6831      	ldr	r1, [r6, #0]
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	b911      	cbnz	r1, 800ae46 <sbrk_aligned+0x12>
 800ae40:	f002 fb86 	bl	800d550 <_sbrk_r>
 800ae44:	6030      	str	r0, [r6, #0]
 800ae46:	4621      	mov	r1, r4
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f002 fb81 	bl	800d550 <_sbrk_r>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	d00a      	beq.n	800ae68 <sbrk_aligned+0x34>
 800ae52:	1cc4      	adds	r4, r0, #3
 800ae54:	f024 0403 	bic.w	r4, r4, #3
 800ae58:	42a0      	cmp	r0, r4
 800ae5a:	d007      	beq.n	800ae6c <sbrk_aligned+0x38>
 800ae5c:	1a21      	subs	r1, r4, r0
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f002 fb76 	bl	800d550 <_sbrk_r>
 800ae64:	3001      	adds	r0, #1
 800ae66:	d101      	bne.n	800ae6c <sbrk_aligned+0x38>
 800ae68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
 800ae70:	20005938 	.word	0x20005938

0800ae74 <_malloc_r>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	1ccd      	adds	r5, r1, #3
 800ae7a:	f025 0503 	bic.w	r5, r5, #3
 800ae7e:	3508      	adds	r5, #8
 800ae80:	2d0c      	cmp	r5, #12
 800ae82:	bf38      	it	cc
 800ae84:	250c      	movcc	r5, #12
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	4607      	mov	r7, r0
 800ae8a:	db01      	blt.n	800ae90 <_malloc_r+0x1c>
 800ae8c:	42a9      	cmp	r1, r5
 800ae8e:	d905      	bls.n	800ae9c <_malloc_r+0x28>
 800ae90:	230c      	movs	r3, #12
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	2600      	movs	r6, #0
 800ae96:	4630      	mov	r0, r6
 800ae98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af70 <_malloc_r+0xfc>
 800aea0:	f000 f868 	bl	800af74 <__malloc_lock>
 800aea4:	f8d8 3000 	ldr.w	r3, [r8]
 800aea8:	461c      	mov	r4, r3
 800aeaa:	bb5c      	cbnz	r4, 800af04 <_malloc_r+0x90>
 800aeac:	4629      	mov	r1, r5
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f7ff ffc0 	bl	800ae34 <sbrk_aligned>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	d155      	bne.n	800af66 <_malloc_r+0xf2>
 800aeba:	f8d8 4000 	ldr.w	r4, [r8]
 800aebe:	4626      	mov	r6, r4
 800aec0:	2e00      	cmp	r6, #0
 800aec2:	d145      	bne.n	800af50 <_malloc_r+0xdc>
 800aec4:	2c00      	cmp	r4, #0
 800aec6:	d048      	beq.n	800af5a <_malloc_r+0xe6>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	4631      	mov	r1, r6
 800aecc:	4638      	mov	r0, r7
 800aece:	eb04 0903 	add.w	r9, r4, r3
 800aed2:	f002 fb3d 	bl	800d550 <_sbrk_r>
 800aed6:	4581      	cmp	r9, r0
 800aed8:	d13f      	bne.n	800af5a <_malloc_r+0xe6>
 800aeda:	6821      	ldr	r1, [r4, #0]
 800aedc:	1a6d      	subs	r5, r5, r1
 800aede:	4629      	mov	r1, r5
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7ff ffa7 	bl	800ae34 <sbrk_aligned>
 800aee6:	3001      	adds	r0, #1
 800aee8:	d037      	beq.n	800af5a <_malloc_r+0xe6>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	442b      	add	r3, r5
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	f8d8 3000 	ldr.w	r3, [r8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d038      	beq.n	800af6a <_malloc_r+0xf6>
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	42a2      	cmp	r2, r4
 800aefc:	d12b      	bne.n	800af56 <_malloc_r+0xe2>
 800aefe:	2200      	movs	r2, #0
 800af00:	605a      	str	r2, [r3, #4]
 800af02:	e00f      	b.n	800af24 <_malloc_r+0xb0>
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	1b52      	subs	r2, r2, r5
 800af08:	d41f      	bmi.n	800af4a <_malloc_r+0xd6>
 800af0a:	2a0b      	cmp	r2, #11
 800af0c:	d917      	bls.n	800af3e <_malloc_r+0xca>
 800af0e:	1961      	adds	r1, r4, r5
 800af10:	42a3      	cmp	r3, r4
 800af12:	6025      	str	r5, [r4, #0]
 800af14:	bf18      	it	ne
 800af16:	6059      	strne	r1, [r3, #4]
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	bf08      	it	eq
 800af1c:	f8c8 1000 	streq.w	r1, [r8]
 800af20:	5162      	str	r2, [r4, r5]
 800af22:	604b      	str	r3, [r1, #4]
 800af24:	4638      	mov	r0, r7
 800af26:	f104 060b 	add.w	r6, r4, #11
 800af2a:	f000 f829 	bl	800af80 <__malloc_unlock>
 800af2e:	f026 0607 	bic.w	r6, r6, #7
 800af32:	1d23      	adds	r3, r4, #4
 800af34:	1af2      	subs	r2, r6, r3
 800af36:	d0ae      	beq.n	800ae96 <_malloc_r+0x22>
 800af38:	1b9b      	subs	r3, r3, r6
 800af3a:	50a3      	str	r3, [r4, r2]
 800af3c:	e7ab      	b.n	800ae96 <_malloc_r+0x22>
 800af3e:	42a3      	cmp	r3, r4
 800af40:	6862      	ldr	r2, [r4, #4]
 800af42:	d1dd      	bne.n	800af00 <_malloc_r+0x8c>
 800af44:	f8c8 2000 	str.w	r2, [r8]
 800af48:	e7ec      	b.n	800af24 <_malloc_r+0xb0>
 800af4a:	4623      	mov	r3, r4
 800af4c:	6864      	ldr	r4, [r4, #4]
 800af4e:	e7ac      	b.n	800aeaa <_malloc_r+0x36>
 800af50:	4634      	mov	r4, r6
 800af52:	6876      	ldr	r6, [r6, #4]
 800af54:	e7b4      	b.n	800aec0 <_malloc_r+0x4c>
 800af56:	4613      	mov	r3, r2
 800af58:	e7cc      	b.n	800aef4 <_malloc_r+0x80>
 800af5a:	230c      	movs	r3, #12
 800af5c:	603b      	str	r3, [r7, #0]
 800af5e:	4638      	mov	r0, r7
 800af60:	f000 f80e 	bl	800af80 <__malloc_unlock>
 800af64:	e797      	b.n	800ae96 <_malloc_r+0x22>
 800af66:	6025      	str	r5, [r4, #0]
 800af68:	e7dc      	b.n	800af24 <_malloc_r+0xb0>
 800af6a:	605b      	str	r3, [r3, #4]
 800af6c:	deff      	udf	#255	; 0xff
 800af6e:	bf00      	nop
 800af70:	20005934 	.word	0x20005934

0800af74 <__malloc_lock>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__malloc_lock+0x8>)
 800af76:	f7ff b876 	b.w	800a066 <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	20005930 	.word	0x20005930

0800af80 <__malloc_unlock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_unlock+0x8>)
 800af82:	f7ff b871 	b.w	800a068 <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	20005930 	.word	0x20005930

0800af8c <_Balloc>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	69c6      	ldr	r6, [r0, #28]
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	b976      	cbnz	r6, 800afb4 <_Balloc+0x28>
 800af96:	2010      	movs	r0, #16
 800af98:	f7ff ff44 	bl	800ae24 <malloc>
 800af9c:	4602      	mov	r2, r0
 800af9e:	61e0      	str	r0, [r4, #28]
 800afa0:	b920      	cbnz	r0, 800afac <_Balloc+0x20>
 800afa2:	4b18      	ldr	r3, [pc, #96]	; (800b004 <_Balloc+0x78>)
 800afa4:	4818      	ldr	r0, [pc, #96]	; (800b008 <_Balloc+0x7c>)
 800afa6:	216b      	movs	r1, #107	; 0x6b
 800afa8:	f002 faea 	bl	800d580 <__assert_func>
 800afac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afb0:	6006      	str	r6, [r0, #0]
 800afb2:	60c6      	str	r6, [r0, #12]
 800afb4:	69e6      	ldr	r6, [r4, #28]
 800afb6:	68f3      	ldr	r3, [r6, #12]
 800afb8:	b183      	cbz	r3, 800afdc <_Balloc+0x50>
 800afba:	69e3      	ldr	r3, [r4, #28]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afc2:	b9b8      	cbnz	r0, 800aff4 <_Balloc+0x68>
 800afc4:	2101      	movs	r1, #1
 800afc6:	fa01 f605 	lsl.w	r6, r1, r5
 800afca:	1d72      	adds	r2, r6, #5
 800afcc:	0092      	lsls	r2, r2, #2
 800afce:	4620      	mov	r0, r4
 800afd0:	f002 faf4 	bl	800d5bc <_calloc_r>
 800afd4:	b160      	cbz	r0, 800aff0 <_Balloc+0x64>
 800afd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afda:	e00e      	b.n	800affa <_Balloc+0x6e>
 800afdc:	2221      	movs	r2, #33	; 0x21
 800afde:	2104      	movs	r1, #4
 800afe0:	4620      	mov	r0, r4
 800afe2:	f002 faeb 	bl	800d5bc <_calloc_r>
 800afe6:	69e3      	ldr	r3, [r4, #28]
 800afe8:	60f0      	str	r0, [r6, #12]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e4      	bne.n	800afba <_Balloc+0x2e>
 800aff0:	2000      	movs	r0, #0
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	6802      	ldr	r2, [r0, #0]
 800aff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800affa:	2300      	movs	r3, #0
 800affc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b000:	e7f7      	b.n	800aff2 <_Balloc+0x66>
 800b002:	bf00      	nop
 800b004:	0800f318 	.word	0x0800f318
 800b008:	0800f398 	.word	0x0800f398

0800b00c <_Bfree>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	69c6      	ldr	r6, [r0, #28]
 800b010:	4605      	mov	r5, r0
 800b012:	460c      	mov	r4, r1
 800b014:	b976      	cbnz	r6, 800b034 <_Bfree+0x28>
 800b016:	2010      	movs	r0, #16
 800b018:	f7ff ff04 	bl	800ae24 <malloc>
 800b01c:	4602      	mov	r2, r0
 800b01e:	61e8      	str	r0, [r5, #28]
 800b020:	b920      	cbnz	r0, 800b02c <_Bfree+0x20>
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <_Bfree+0x3c>)
 800b024:	4809      	ldr	r0, [pc, #36]	; (800b04c <_Bfree+0x40>)
 800b026:	218f      	movs	r1, #143	; 0x8f
 800b028:	f002 faaa 	bl	800d580 <__assert_func>
 800b02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b030:	6006      	str	r6, [r0, #0]
 800b032:	60c6      	str	r6, [r0, #12]
 800b034:	b13c      	cbz	r4, 800b046 <_Bfree+0x3a>
 800b036:	69eb      	ldr	r3, [r5, #28]
 800b038:	6862      	ldr	r2, [r4, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b040:	6021      	str	r1, [r4, #0]
 800b042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	0800f318 	.word	0x0800f318
 800b04c:	0800f398 	.word	0x0800f398

0800b050 <__multadd>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	690d      	ldr	r5, [r1, #16]
 800b056:	4607      	mov	r7, r0
 800b058:	460c      	mov	r4, r1
 800b05a:	461e      	mov	r6, r3
 800b05c:	f101 0c14 	add.w	ip, r1, #20
 800b060:	2000      	movs	r0, #0
 800b062:	f8dc 3000 	ldr.w	r3, [ip]
 800b066:	b299      	uxth	r1, r3
 800b068:	fb02 6101 	mla	r1, r2, r1, r6
 800b06c:	0c1e      	lsrs	r6, r3, #16
 800b06e:	0c0b      	lsrs	r3, r1, #16
 800b070:	fb02 3306 	mla	r3, r2, r6, r3
 800b074:	b289      	uxth	r1, r1
 800b076:	3001      	adds	r0, #1
 800b078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b07c:	4285      	cmp	r5, r0
 800b07e:	f84c 1b04 	str.w	r1, [ip], #4
 800b082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b086:	dcec      	bgt.n	800b062 <__multadd+0x12>
 800b088:	b30e      	cbz	r6, 800b0ce <__multadd+0x7e>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	42ab      	cmp	r3, r5
 800b08e:	dc19      	bgt.n	800b0c4 <__multadd+0x74>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	4638      	mov	r0, r7
 800b094:	3101      	adds	r1, #1
 800b096:	f7ff ff79 	bl	800af8c <_Balloc>
 800b09a:	4680      	mov	r8, r0
 800b09c:	b928      	cbnz	r0, 800b0aa <__multadd+0x5a>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <__multadd+0x84>)
 800b0a2:	480d      	ldr	r0, [pc, #52]	; (800b0d8 <__multadd+0x88>)
 800b0a4:	21ba      	movs	r1, #186	; 0xba
 800b0a6:	f002 fa6b 	bl	800d580 <__assert_func>
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	3202      	adds	r2, #2
 800b0ae:	f104 010c 	add.w	r1, r4, #12
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	300c      	adds	r0, #12
 800b0b6:	f7fe ffd8 	bl	800a06a <memcpy>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff ffa5 	bl	800b00c <_Bfree>
 800b0c2:	4644      	mov	r4, r8
 800b0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	615e      	str	r6, [r3, #20]
 800b0cc:	6125      	str	r5, [r4, #16]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d4:	0800f387 	.word	0x0800f387
 800b0d8:	0800f398 	.word	0x0800f398

0800b0dc <__s2b>:
 800b0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	4615      	mov	r5, r2
 800b0e4:	461f      	mov	r7, r3
 800b0e6:	2209      	movs	r2, #9
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	db09      	blt.n	800b10c <__s2b+0x30>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff ff47 	bl	800af8c <_Balloc>
 800b0fe:	b940      	cbnz	r0, 800b112 <__s2b+0x36>
 800b100:	4602      	mov	r2, r0
 800b102:	4b19      	ldr	r3, [pc, #100]	; (800b168 <__s2b+0x8c>)
 800b104:	4819      	ldr	r0, [pc, #100]	; (800b16c <__s2b+0x90>)
 800b106:	21d3      	movs	r1, #211	; 0xd3
 800b108:	f002 fa3a 	bl	800d580 <__assert_func>
 800b10c:	0052      	lsls	r2, r2, #1
 800b10e:	3101      	adds	r1, #1
 800b110:	e7f0      	b.n	800b0f4 <__s2b+0x18>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	6143      	str	r3, [r0, #20]
 800b116:	2d09      	cmp	r5, #9
 800b118:	f04f 0301 	mov.w	r3, #1
 800b11c:	6103      	str	r3, [r0, #16]
 800b11e:	dd16      	ble.n	800b14e <__s2b+0x72>
 800b120:	f104 0909 	add.w	r9, r4, #9
 800b124:	46c8      	mov	r8, r9
 800b126:	442c      	add	r4, r5
 800b128:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b12c:	4601      	mov	r1, r0
 800b12e:	3b30      	subs	r3, #48	; 0x30
 800b130:	220a      	movs	r2, #10
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff ff8c 	bl	800b050 <__multadd>
 800b138:	45a0      	cmp	r8, r4
 800b13a:	d1f5      	bne.n	800b128 <__s2b+0x4c>
 800b13c:	f1a5 0408 	sub.w	r4, r5, #8
 800b140:	444c      	add	r4, r9
 800b142:	1b2d      	subs	r5, r5, r4
 800b144:	1963      	adds	r3, r4, r5
 800b146:	42bb      	cmp	r3, r7
 800b148:	db04      	blt.n	800b154 <__s2b+0x78>
 800b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14e:	340a      	adds	r4, #10
 800b150:	2509      	movs	r5, #9
 800b152:	e7f6      	b.n	800b142 <__s2b+0x66>
 800b154:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b158:	4601      	mov	r1, r0
 800b15a:	3b30      	subs	r3, #48	; 0x30
 800b15c:	220a      	movs	r2, #10
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff ff76 	bl	800b050 <__multadd>
 800b164:	e7ee      	b.n	800b144 <__s2b+0x68>
 800b166:	bf00      	nop
 800b168:	0800f387 	.word	0x0800f387
 800b16c:	0800f398 	.word	0x0800f398

0800b170 <__hi0bits>:
 800b170:	0c03      	lsrs	r3, r0, #16
 800b172:	041b      	lsls	r3, r3, #16
 800b174:	b9d3      	cbnz	r3, 800b1ac <__hi0bits+0x3c>
 800b176:	0400      	lsls	r0, r0, #16
 800b178:	2310      	movs	r3, #16
 800b17a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b17e:	bf04      	itt	eq
 800b180:	0200      	lsleq	r0, r0, #8
 800b182:	3308      	addeq	r3, #8
 800b184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b188:	bf04      	itt	eq
 800b18a:	0100      	lsleq	r0, r0, #4
 800b18c:	3304      	addeq	r3, #4
 800b18e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b192:	bf04      	itt	eq
 800b194:	0080      	lsleq	r0, r0, #2
 800b196:	3302      	addeq	r3, #2
 800b198:	2800      	cmp	r0, #0
 800b19a:	db05      	blt.n	800b1a8 <__hi0bits+0x38>
 800b19c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1a0:	f103 0301 	add.w	r3, r3, #1
 800b1a4:	bf08      	it	eq
 800b1a6:	2320      	moveq	r3, #32
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	4770      	bx	lr
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e7e4      	b.n	800b17a <__hi0bits+0xa>

0800b1b0 <__lo0bits>:
 800b1b0:	6803      	ldr	r3, [r0, #0]
 800b1b2:	f013 0207 	ands.w	r2, r3, #7
 800b1b6:	d00c      	beq.n	800b1d2 <__lo0bits+0x22>
 800b1b8:	07d9      	lsls	r1, r3, #31
 800b1ba:	d422      	bmi.n	800b202 <__lo0bits+0x52>
 800b1bc:	079a      	lsls	r2, r3, #30
 800b1be:	bf49      	itett	mi
 800b1c0:	085b      	lsrmi	r3, r3, #1
 800b1c2:	089b      	lsrpl	r3, r3, #2
 800b1c4:	6003      	strmi	r3, [r0, #0]
 800b1c6:	2201      	movmi	r2, #1
 800b1c8:	bf5c      	itt	pl
 800b1ca:	6003      	strpl	r3, [r0, #0]
 800b1cc:	2202      	movpl	r2, #2
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4770      	bx	lr
 800b1d2:	b299      	uxth	r1, r3
 800b1d4:	b909      	cbnz	r1, 800b1da <__lo0bits+0x2a>
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	2210      	movs	r2, #16
 800b1da:	b2d9      	uxtb	r1, r3
 800b1dc:	b909      	cbnz	r1, 800b1e2 <__lo0bits+0x32>
 800b1de:	3208      	adds	r2, #8
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	0719      	lsls	r1, r3, #28
 800b1e4:	bf04      	itt	eq
 800b1e6:	091b      	lsreq	r3, r3, #4
 800b1e8:	3204      	addeq	r2, #4
 800b1ea:	0799      	lsls	r1, r3, #30
 800b1ec:	bf04      	itt	eq
 800b1ee:	089b      	lsreq	r3, r3, #2
 800b1f0:	3202      	addeq	r2, #2
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	d403      	bmi.n	800b1fe <__lo0bits+0x4e>
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	f102 0201 	add.w	r2, r2, #1
 800b1fc:	d003      	beq.n	800b206 <__lo0bits+0x56>
 800b1fe:	6003      	str	r3, [r0, #0]
 800b200:	e7e5      	b.n	800b1ce <__lo0bits+0x1e>
 800b202:	2200      	movs	r2, #0
 800b204:	e7e3      	b.n	800b1ce <__lo0bits+0x1e>
 800b206:	2220      	movs	r2, #32
 800b208:	e7e1      	b.n	800b1ce <__lo0bits+0x1e>
	...

0800b20c <__i2b>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	460c      	mov	r4, r1
 800b210:	2101      	movs	r1, #1
 800b212:	f7ff febb 	bl	800af8c <_Balloc>
 800b216:	4602      	mov	r2, r0
 800b218:	b928      	cbnz	r0, 800b226 <__i2b+0x1a>
 800b21a:	4b05      	ldr	r3, [pc, #20]	; (800b230 <__i2b+0x24>)
 800b21c:	4805      	ldr	r0, [pc, #20]	; (800b234 <__i2b+0x28>)
 800b21e:	f240 1145 	movw	r1, #325	; 0x145
 800b222:	f002 f9ad 	bl	800d580 <__assert_func>
 800b226:	2301      	movs	r3, #1
 800b228:	6144      	str	r4, [r0, #20]
 800b22a:	6103      	str	r3, [r0, #16]
 800b22c:	bd10      	pop	{r4, pc}
 800b22e:	bf00      	nop
 800b230:	0800f387 	.word	0x0800f387
 800b234:	0800f398 	.word	0x0800f398

0800b238 <__multiply>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	4691      	mov	r9, r2
 800b23e:	690a      	ldr	r2, [r1, #16]
 800b240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b244:	429a      	cmp	r2, r3
 800b246:	bfb8      	it	lt
 800b248:	460b      	movlt	r3, r1
 800b24a:	460c      	mov	r4, r1
 800b24c:	bfbc      	itt	lt
 800b24e:	464c      	movlt	r4, r9
 800b250:	4699      	movlt	r9, r3
 800b252:	6927      	ldr	r7, [r4, #16]
 800b254:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	6861      	ldr	r1, [r4, #4]
 800b25c:	eb07 060a 	add.w	r6, r7, sl
 800b260:	42b3      	cmp	r3, r6
 800b262:	b085      	sub	sp, #20
 800b264:	bfb8      	it	lt
 800b266:	3101      	addlt	r1, #1
 800b268:	f7ff fe90 	bl	800af8c <_Balloc>
 800b26c:	b930      	cbnz	r0, 800b27c <__multiply+0x44>
 800b26e:	4602      	mov	r2, r0
 800b270:	4b44      	ldr	r3, [pc, #272]	; (800b384 <__multiply+0x14c>)
 800b272:	4845      	ldr	r0, [pc, #276]	; (800b388 <__multiply+0x150>)
 800b274:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b278:	f002 f982 	bl	800d580 <__assert_func>
 800b27c:	f100 0514 	add.w	r5, r0, #20
 800b280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b284:	462b      	mov	r3, r5
 800b286:	2200      	movs	r2, #0
 800b288:	4543      	cmp	r3, r8
 800b28a:	d321      	bcc.n	800b2d0 <__multiply+0x98>
 800b28c:	f104 0314 	add.w	r3, r4, #20
 800b290:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b294:	f109 0314 	add.w	r3, r9, #20
 800b298:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b29c:	9202      	str	r2, [sp, #8]
 800b29e:	1b3a      	subs	r2, r7, r4
 800b2a0:	3a15      	subs	r2, #21
 800b2a2:	f022 0203 	bic.w	r2, r2, #3
 800b2a6:	3204      	adds	r2, #4
 800b2a8:	f104 0115 	add.w	r1, r4, #21
 800b2ac:	428f      	cmp	r7, r1
 800b2ae:	bf38      	it	cc
 800b2b0:	2204      	movcc	r2, #4
 800b2b2:	9201      	str	r2, [sp, #4]
 800b2b4:	9a02      	ldr	r2, [sp, #8]
 800b2b6:	9303      	str	r3, [sp, #12]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d80c      	bhi.n	800b2d6 <__multiply+0x9e>
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	dd03      	ble.n	800b2c8 <__multiply+0x90>
 800b2c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d05b      	beq.n	800b380 <__multiply+0x148>
 800b2c8:	6106      	str	r6, [r0, #16]
 800b2ca:	b005      	add	sp, #20
 800b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d0:	f843 2b04 	str.w	r2, [r3], #4
 800b2d4:	e7d8      	b.n	800b288 <__multiply+0x50>
 800b2d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2da:	f1ba 0f00 	cmp.w	sl, #0
 800b2de:	d024      	beq.n	800b32a <__multiply+0xf2>
 800b2e0:	f104 0e14 	add.w	lr, r4, #20
 800b2e4:	46a9      	mov	r9, r5
 800b2e6:	f04f 0c00 	mov.w	ip, #0
 800b2ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2ee:	f8d9 1000 	ldr.w	r1, [r9]
 800b2f2:	fa1f fb82 	uxth.w	fp, r2
 800b2f6:	b289      	uxth	r1, r1
 800b2f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b300:	f8d9 2000 	ldr.w	r2, [r9]
 800b304:	4461      	add	r1, ip
 800b306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b30a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b30e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b312:	b289      	uxth	r1, r1
 800b314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b318:	4577      	cmp	r7, lr
 800b31a:	f849 1b04 	str.w	r1, [r9], #4
 800b31e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b322:	d8e2      	bhi.n	800b2ea <__multiply+0xb2>
 800b324:	9a01      	ldr	r2, [sp, #4]
 800b326:	f845 c002 	str.w	ip, [r5, r2]
 800b32a:	9a03      	ldr	r2, [sp, #12]
 800b32c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b330:	3304      	adds	r3, #4
 800b332:	f1b9 0f00 	cmp.w	r9, #0
 800b336:	d021      	beq.n	800b37c <__multiply+0x144>
 800b338:	6829      	ldr	r1, [r5, #0]
 800b33a:	f104 0c14 	add.w	ip, r4, #20
 800b33e:	46ae      	mov	lr, r5
 800b340:	f04f 0a00 	mov.w	sl, #0
 800b344:	f8bc b000 	ldrh.w	fp, [ip]
 800b348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b34c:	fb09 220b 	mla	r2, r9, fp, r2
 800b350:	4452      	add	r2, sl
 800b352:	b289      	uxth	r1, r1
 800b354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b358:	f84e 1b04 	str.w	r1, [lr], #4
 800b35c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b360:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b364:	f8be 1000 	ldrh.w	r1, [lr]
 800b368:	fb09 110a 	mla	r1, r9, sl, r1
 800b36c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b370:	4567      	cmp	r7, ip
 800b372:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b376:	d8e5      	bhi.n	800b344 <__multiply+0x10c>
 800b378:	9a01      	ldr	r2, [sp, #4]
 800b37a:	50a9      	str	r1, [r5, r2]
 800b37c:	3504      	adds	r5, #4
 800b37e:	e799      	b.n	800b2b4 <__multiply+0x7c>
 800b380:	3e01      	subs	r6, #1
 800b382:	e79b      	b.n	800b2bc <__multiply+0x84>
 800b384:	0800f387 	.word	0x0800f387
 800b388:	0800f398 	.word	0x0800f398

0800b38c <__pow5mult>:
 800b38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	4615      	mov	r5, r2
 800b392:	f012 0203 	ands.w	r2, r2, #3
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	d007      	beq.n	800b3ac <__pow5mult+0x20>
 800b39c:	4c25      	ldr	r4, [pc, #148]	; (800b434 <__pow5mult+0xa8>)
 800b39e:	3a01      	subs	r2, #1
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3a6:	f7ff fe53 	bl	800b050 <__multadd>
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	10ad      	asrs	r5, r5, #2
 800b3ae:	d03d      	beq.n	800b42c <__pow5mult+0xa0>
 800b3b0:	69f4      	ldr	r4, [r6, #28]
 800b3b2:	b97c      	cbnz	r4, 800b3d4 <__pow5mult+0x48>
 800b3b4:	2010      	movs	r0, #16
 800b3b6:	f7ff fd35 	bl	800ae24 <malloc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	61f0      	str	r0, [r6, #28]
 800b3be:	b928      	cbnz	r0, 800b3cc <__pow5mult+0x40>
 800b3c0:	4b1d      	ldr	r3, [pc, #116]	; (800b438 <__pow5mult+0xac>)
 800b3c2:	481e      	ldr	r0, [pc, #120]	; (800b43c <__pow5mult+0xb0>)
 800b3c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b3c8:	f002 f8da 	bl	800d580 <__assert_func>
 800b3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3d0:	6004      	str	r4, [r0, #0]
 800b3d2:	60c4      	str	r4, [r0, #12]
 800b3d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3dc:	b94c      	cbnz	r4, 800b3f2 <__pow5mult+0x66>
 800b3de:	f240 2171 	movw	r1, #625	; 0x271
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff ff12 	bl	800b20c <__i2b>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	f04f 0900 	mov.w	r9, #0
 800b3f6:	07eb      	lsls	r3, r5, #31
 800b3f8:	d50a      	bpl.n	800b410 <__pow5mult+0x84>
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ff1a 	bl	800b238 <__multiply>
 800b404:	4639      	mov	r1, r7
 800b406:	4680      	mov	r8, r0
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff fdff 	bl	800b00c <_Bfree>
 800b40e:	4647      	mov	r7, r8
 800b410:	106d      	asrs	r5, r5, #1
 800b412:	d00b      	beq.n	800b42c <__pow5mult+0xa0>
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	b938      	cbnz	r0, 800b428 <__pow5mult+0x9c>
 800b418:	4622      	mov	r2, r4
 800b41a:	4621      	mov	r1, r4
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff ff0b 	bl	800b238 <__multiply>
 800b422:	6020      	str	r0, [r4, #0]
 800b424:	f8c0 9000 	str.w	r9, [r0]
 800b428:	4604      	mov	r4, r0
 800b42a:	e7e4      	b.n	800b3f6 <__pow5mult+0x6a>
 800b42c:	4638      	mov	r0, r7
 800b42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b432:	bf00      	nop
 800b434:	0800f4e8 	.word	0x0800f4e8
 800b438:	0800f318 	.word	0x0800f318
 800b43c:	0800f398 	.word	0x0800f398

0800b440 <__lshift>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	460c      	mov	r4, r1
 800b446:	6849      	ldr	r1, [r1, #4]
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	4607      	mov	r7, r0
 800b452:	4691      	mov	r9, r2
 800b454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b458:	f108 0601 	add.w	r6, r8, #1
 800b45c:	42b3      	cmp	r3, r6
 800b45e:	db0b      	blt.n	800b478 <__lshift+0x38>
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff fd93 	bl	800af8c <_Balloc>
 800b466:	4605      	mov	r5, r0
 800b468:	b948      	cbnz	r0, 800b47e <__lshift+0x3e>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4b28      	ldr	r3, [pc, #160]	; (800b510 <__lshift+0xd0>)
 800b46e:	4829      	ldr	r0, [pc, #164]	; (800b514 <__lshift+0xd4>)
 800b470:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b474:	f002 f884 	bl	800d580 <__assert_func>
 800b478:	3101      	adds	r1, #1
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	e7ee      	b.n	800b45c <__lshift+0x1c>
 800b47e:	2300      	movs	r3, #0
 800b480:	f100 0114 	add.w	r1, r0, #20
 800b484:	f100 0210 	add.w	r2, r0, #16
 800b488:	4618      	mov	r0, r3
 800b48a:	4553      	cmp	r3, sl
 800b48c:	db33      	blt.n	800b4f6 <__lshift+0xb6>
 800b48e:	6920      	ldr	r0, [r4, #16]
 800b490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b494:	f104 0314 	add.w	r3, r4, #20
 800b498:	f019 091f 	ands.w	r9, r9, #31
 800b49c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4a4:	d02b      	beq.n	800b4fe <__lshift+0xbe>
 800b4a6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4aa:	468a      	mov	sl, r1
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	fa00 f009 	lsl.w	r0, r0, r9
 800b4b4:	4310      	orrs	r0, r2
 800b4b6:	f84a 0b04 	str.w	r0, [sl], #4
 800b4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4be:	459c      	cmp	ip, r3
 800b4c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4c4:	d8f3      	bhi.n	800b4ae <__lshift+0x6e>
 800b4c6:	ebac 0304 	sub.w	r3, ip, r4
 800b4ca:	3b15      	subs	r3, #21
 800b4cc:	f023 0303 	bic.w	r3, r3, #3
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	f104 0015 	add.w	r0, r4, #21
 800b4d6:	4584      	cmp	ip, r0
 800b4d8:	bf38      	it	cc
 800b4da:	2304      	movcc	r3, #4
 800b4dc:	50ca      	str	r2, [r1, r3]
 800b4de:	b10a      	cbz	r2, 800b4e4 <__lshift+0xa4>
 800b4e0:	f108 0602 	add.w	r6, r8, #2
 800b4e4:	3e01      	subs	r6, #1
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	612e      	str	r6, [r5, #16]
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f7ff fd8e 	bl	800b00c <_Bfree>
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	e7c5      	b.n	800b48a <__lshift+0x4a>
 800b4fe:	3904      	subs	r1, #4
 800b500:	f853 2b04 	ldr.w	r2, [r3], #4
 800b504:	f841 2f04 	str.w	r2, [r1, #4]!
 800b508:	459c      	cmp	ip, r3
 800b50a:	d8f9      	bhi.n	800b500 <__lshift+0xc0>
 800b50c:	e7ea      	b.n	800b4e4 <__lshift+0xa4>
 800b50e:	bf00      	nop
 800b510:	0800f387 	.word	0x0800f387
 800b514:	0800f398 	.word	0x0800f398

0800b518 <__mcmp>:
 800b518:	b530      	push	{r4, r5, lr}
 800b51a:	6902      	ldr	r2, [r0, #16]
 800b51c:	690c      	ldr	r4, [r1, #16]
 800b51e:	1b12      	subs	r2, r2, r4
 800b520:	d10e      	bne.n	800b540 <__mcmp+0x28>
 800b522:	f100 0314 	add.w	r3, r0, #20
 800b526:	3114      	adds	r1, #20
 800b528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b52c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b538:	42a5      	cmp	r5, r4
 800b53a:	d003      	beq.n	800b544 <__mcmp+0x2c>
 800b53c:	d305      	bcc.n	800b54a <__mcmp+0x32>
 800b53e:	2201      	movs	r2, #1
 800b540:	4610      	mov	r0, r2
 800b542:	bd30      	pop	{r4, r5, pc}
 800b544:	4283      	cmp	r3, r0
 800b546:	d3f3      	bcc.n	800b530 <__mcmp+0x18>
 800b548:	e7fa      	b.n	800b540 <__mcmp+0x28>
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b54e:	e7f7      	b.n	800b540 <__mcmp+0x28>

0800b550 <__mdiff>:
 800b550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	460c      	mov	r4, r1
 800b556:	4606      	mov	r6, r0
 800b558:	4611      	mov	r1, r2
 800b55a:	4620      	mov	r0, r4
 800b55c:	4690      	mov	r8, r2
 800b55e:	f7ff ffdb 	bl	800b518 <__mcmp>
 800b562:	1e05      	subs	r5, r0, #0
 800b564:	d110      	bne.n	800b588 <__mdiff+0x38>
 800b566:	4629      	mov	r1, r5
 800b568:	4630      	mov	r0, r6
 800b56a:	f7ff fd0f 	bl	800af8c <_Balloc>
 800b56e:	b930      	cbnz	r0, 800b57e <__mdiff+0x2e>
 800b570:	4b3a      	ldr	r3, [pc, #232]	; (800b65c <__mdiff+0x10c>)
 800b572:	4602      	mov	r2, r0
 800b574:	f240 2137 	movw	r1, #567	; 0x237
 800b578:	4839      	ldr	r0, [pc, #228]	; (800b660 <__mdiff+0x110>)
 800b57a:	f002 f801 	bl	800d580 <__assert_func>
 800b57e:	2301      	movs	r3, #1
 800b580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b588:	bfa4      	itt	ge
 800b58a:	4643      	movge	r3, r8
 800b58c:	46a0      	movge	r8, r4
 800b58e:	4630      	mov	r0, r6
 800b590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b594:	bfa6      	itte	ge
 800b596:	461c      	movge	r4, r3
 800b598:	2500      	movge	r5, #0
 800b59a:	2501      	movlt	r5, #1
 800b59c:	f7ff fcf6 	bl	800af8c <_Balloc>
 800b5a0:	b920      	cbnz	r0, 800b5ac <__mdiff+0x5c>
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	; (800b65c <__mdiff+0x10c>)
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 2145 	movw	r1, #581	; 0x245
 800b5aa:	e7e5      	b.n	800b578 <__mdiff+0x28>
 800b5ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5b0:	6926      	ldr	r6, [r4, #16]
 800b5b2:	60c5      	str	r5, [r0, #12]
 800b5b4:	f104 0914 	add.w	r9, r4, #20
 800b5b8:	f108 0514 	add.w	r5, r8, #20
 800b5bc:	f100 0e14 	add.w	lr, r0, #20
 800b5c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5c8:	f108 0210 	add.w	r2, r8, #16
 800b5cc:	46f2      	mov	sl, lr
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5d8:	fa11 f88b 	uxtah	r8, r1, fp
 800b5dc:	b299      	uxth	r1, r3
 800b5de:	0c1b      	lsrs	r3, r3, #16
 800b5e0:	eba8 0801 	sub.w	r8, r8, r1
 800b5e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5ec:	fa1f f888 	uxth.w	r8, r8
 800b5f0:	1419      	asrs	r1, r3, #16
 800b5f2:	454e      	cmp	r6, r9
 800b5f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5f8:	f84a 3b04 	str.w	r3, [sl], #4
 800b5fc:	d8e8      	bhi.n	800b5d0 <__mdiff+0x80>
 800b5fe:	1b33      	subs	r3, r6, r4
 800b600:	3b15      	subs	r3, #21
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	3304      	adds	r3, #4
 800b608:	3415      	adds	r4, #21
 800b60a:	42a6      	cmp	r6, r4
 800b60c:	bf38      	it	cc
 800b60e:	2304      	movcc	r3, #4
 800b610:	441d      	add	r5, r3
 800b612:	4473      	add	r3, lr
 800b614:	469e      	mov	lr, r3
 800b616:	462e      	mov	r6, r5
 800b618:	4566      	cmp	r6, ip
 800b61a:	d30e      	bcc.n	800b63a <__mdiff+0xea>
 800b61c:	f10c 0203 	add.w	r2, ip, #3
 800b620:	1b52      	subs	r2, r2, r5
 800b622:	f022 0203 	bic.w	r2, r2, #3
 800b626:	3d03      	subs	r5, #3
 800b628:	45ac      	cmp	ip, r5
 800b62a:	bf38      	it	cc
 800b62c:	2200      	movcc	r2, #0
 800b62e:	4413      	add	r3, r2
 800b630:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b634:	b17a      	cbz	r2, 800b656 <__mdiff+0x106>
 800b636:	6107      	str	r7, [r0, #16]
 800b638:	e7a4      	b.n	800b584 <__mdiff+0x34>
 800b63a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b63e:	fa11 f288 	uxtah	r2, r1, r8
 800b642:	1414      	asrs	r4, r2, #16
 800b644:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b648:	b292      	uxth	r2, r2
 800b64a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b64e:	f84e 2b04 	str.w	r2, [lr], #4
 800b652:	1421      	asrs	r1, r4, #16
 800b654:	e7e0      	b.n	800b618 <__mdiff+0xc8>
 800b656:	3f01      	subs	r7, #1
 800b658:	e7ea      	b.n	800b630 <__mdiff+0xe0>
 800b65a:	bf00      	nop
 800b65c:	0800f387 	.word	0x0800f387
 800b660:	0800f398 	.word	0x0800f398

0800b664 <__ulp>:
 800b664:	b082      	sub	sp, #8
 800b666:	ed8d 0b00 	vstr	d0, [sp]
 800b66a:	9a01      	ldr	r2, [sp, #4]
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <__ulp+0x48>)
 800b66e:	4013      	ands	r3, r2
 800b670:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b674:	2b00      	cmp	r3, #0
 800b676:	dc08      	bgt.n	800b68a <__ulp+0x26>
 800b678:	425b      	negs	r3, r3
 800b67a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b67e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b682:	da04      	bge.n	800b68e <__ulp+0x2a>
 800b684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b688:	4113      	asrs	r3, r2
 800b68a:	2200      	movs	r2, #0
 800b68c:	e008      	b.n	800b6a0 <__ulp+0x3c>
 800b68e:	f1a2 0314 	sub.w	r3, r2, #20
 800b692:	2b1e      	cmp	r3, #30
 800b694:	bfda      	itte	le
 800b696:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b69a:	40da      	lsrle	r2, r3
 800b69c:	2201      	movgt	r2, #1
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	ec41 0b10 	vmov	d0, r0, r1
 800b6a8:	b002      	add	sp, #8
 800b6aa:	4770      	bx	lr
 800b6ac:	7ff00000 	.word	0x7ff00000

0800b6b0 <__b2d>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	6906      	ldr	r6, [r0, #16]
 800b6b6:	f100 0814 	add.w	r8, r0, #20
 800b6ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b6be:	1f37      	subs	r7, r6, #4
 800b6c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7ff fd53 	bl	800b170 <__hi0bits>
 800b6ca:	f1c0 0320 	rsb	r3, r0, #32
 800b6ce:	280a      	cmp	r0, #10
 800b6d0:	600b      	str	r3, [r1, #0]
 800b6d2:	491b      	ldr	r1, [pc, #108]	; (800b740 <__b2d+0x90>)
 800b6d4:	dc15      	bgt.n	800b702 <__b2d+0x52>
 800b6d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6da:	fa22 f30c 	lsr.w	r3, r2, ip
 800b6de:	45b8      	cmp	r8, r7
 800b6e0:	ea43 0501 	orr.w	r5, r3, r1
 800b6e4:	bf34      	ite	cc
 800b6e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ea:	2300      	movcs	r3, #0
 800b6ec:	3015      	adds	r0, #21
 800b6ee:	fa02 f000 	lsl.w	r0, r2, r0
 800b6f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b6f6:	4303      	orrs	r3, r0
 800b6f8:	461c      	mov	r4, r3
 800b6fa:	ec45 4b10 	vmov	d0, r4, r5
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	45b8      	cmp	r8, r7
 800b704:	bf3a      	itte	cc
 800b706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b70a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b70e:	2300      	movcs	r3, #0
 800b710:	380b      	subs	r0, #11
 800b712:	d012      	beq.n	800b73a <__b2d+0x8a>
 800b714:	f1c0 0120 	rsb	r1, r0, #32
 800b718:	fa23 f401 	lsr.w	r4, r3, r1
 800b71c:	4082      	lsls	r2, r0
 800b71e:	4322      	orrs	r2, r4
 800b720:	4547      	cmp	r7, r8
 800b722:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b726:	bf8c      	ite	hi
 800b728:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b72c:	2200      	movls	r2, #0
 800b72e:	4083      	lsls	r3, r0
 800b730:	40ca      	lsrs	r2, r1
 800b732:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b736:	4313      	orrs	r3, r2
 800b738:	e7de      	b.n	800b6f8 <__b2d+0x48>
 800b73a:	ea42 0501 	orr.w	r5, r2, r1
 800b73e:	e7db      	b.n	800b6f8 <__b2d+0x48>
 800b740:	3ff00000 	.word	0x3ff00000

0800b744 <__d2b>:
 800b744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b748:	460f      	mov	r7, r1
 800b74a:	2101      	movs	r1, #1
 800b74c:	ec59 8b10 	vmov	r8, r9, d0
 800b750:	4616      	mov	r6, r2
 800b752:	f7ff fc1b 	bl	800af8c <_Balloc>
 800b756:	4604      	mov	r4, r0
 800b758:	b930      	cbnz	r0, 800b768 <__d2b+0x24>
 800b75a:	4602      	mov	r2, r0
 800b75c:	4b24      	ldr	r3, [pc, #144]	; (800b7f0 <__d2b+0xac>)
 800b75e:	4825      	ldr	r0, [pc, #148]	; (800b7f4 <__d2b+0xb0>)
 800b760:	f240 310f 	movw	r1, #783	; 0x30f
 800b764:	f001 ff0c 	bl	800d580 <__assert_func>
 800b768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b76c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b770:	bb2d      	cbnz	r5, 800b7be <__d2b+0x7a>
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	f1b8 0300 	subs.w	r3, r8, #0
 800b778:	d026      	beq.n	800b7c8 <__d2b+0x84>
 800b77a:	4668      	mov	r0, sp
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	f7ff fd17 	bl	800b1b0 <__lo0bits>
 800b782:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b786:	b1e8      	cbz	r0, 800b7c4 <__d2b+0x80>
 800b788:	f1c0 0320 	rsb	r3, r0, #32
 800b78c:	fa02 f303 	lsl.w	r3, r2, r3
 800b790:	430b      	orrs	r3, r1
 800b792:	40c2      	lsrs	r2, r0
 800b794:	6163      	str	r3, [r4, #20]
 800b796:	9201      	str	r2, [sp, #4]
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	61a3      	str	r3, [r4, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bf14      	ite	ne
 800b7a0:	2202      	movne	r2, #2
 800b7a2:	2201      	moveq	r2, #1
 800b7a4:	6122      	str	r2, [r4, #16]
 800b7a6:	b1bd      	cbz	r5, 800b7d8 <__d2b+0x94>
 800b7a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ac:	4405      	add	r5, r0
 800b7ae:	603d      	str	r5, [r7, #0]
 800b7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7b4:	6030      	str	r0, [r6, #0]
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	b003      	add	sp, #12
 800b7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7c2:	e7d6      	b.n	800b772 <__d2b+0x2e>
 800b7c4:	6161      	str	r1, [r4, #20]
 800b7c6:	e7e7      	b.n	800b798 <__d2b+0x54>
 800b7c8:	a801      	add	r0, sp, #4
 800b7ca:	f7ff fcf1 	bl	800b1b0 <__lo0bits>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	6163      	str	r3, [r4, #20]
 800b7d2:	3020      	adds	r0, #32
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	e7e5      	b.n	800b7a4 <__d2b+0x60>
 800b7d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7e0:	6038      	str	r0, [r7, #0]
 800b7e2:	6918      	ldr	r0, [r3, #16]
 800b7e4:	f7ff fcc4 	bl	800b170 <__hi0bits>
 800b7e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ec:	e7e2      	b.n	800b7b4 <__d2b+0x70>
 800b7ee:	bf00      	nop
 800b7f0:	0800f387 	.word	0x0800f387
 800b7f4:	0800f398 	.word	0x0800f398

0800b7f8 <__ratio>:
 800b7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	4688      	mov	r8, r1
 800b7fe:	4669      	mov	r1, sp
 800b800:	4681      	mov	r9, r0
 800b802:	f7ff ff55 	bl	800b6b0 <__b2d>
 800b806:	a901      	add	r1, sp, #4
 800b808:	4640      	mov	r0, r8
 800b80a:	ec55 4b10 	vmov	r4, r5, d0
 800b80e:	f7ff ff4f 	bl	800b6b0 <__b2d>
 800b812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b816:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b81a:	eba3 0c02 	sub.w	ip, r3, r2
 800b81e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b828:	ec51 0b10 	vmov	r0, r1, d0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfd6      	itet	le
 800b830:	460a      	movle	r2, r1
 800b832:	462a      	movgt	r2, r5
 800b834:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b838:	468b      	mov	fp, r1
 800b83a:	462f      	mov	r7, r5
 800b83c:	bfd4      	ite	le
 800b83e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b842:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b846:	4620      	mov	r0, r4
 800b848:	ee10 2a10 	vmov	r2, s0
 800b84c:	465b      	mov	r3, fp
 800b84e:	4639      	mov	r1, r7
 800b850:	f7f5 f804 	bl	800085c <__aeabi_ddiv>
 800b854:	ec41 0b10 	vmov	d0, r0, r1
 800b858:	b003      	add	sp, #12
 800b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b85e <__copybits>:
 800b85e:	3901      	subs	r1, #1
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	1149      	asrs	r1, r1, #5
 800b864:	6914      	ldr	r4, [r2, #16]
 800b866:	3101      	adds	r1, #1
 800b868:	f102 0314 	add.w	r3, r2, #20
 800b86c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b874:	1f05      	subs	r5, r0, #4
 800b876:	42a3      	cmp	r3, r4
 800b878:	d30c      	bcc.n	800b894 <__copybits+0x36>
 800b87a:	1aa3      	subs	r3, r4, r2
 800b87c:	3b11      	subs	r3, #17
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	3211      	adds	r2, #17
 800b884:	42a2      	cmp	r2, r4
 800b886:	bf88      	it	hi
 800b888:	2300      	movhi	r3, #0
 800b88a:	4418      	add	r0, r3
 800b88c:	2300      	movs	r3, #0
 800b88e:	4288      	cmp	r0, r1
 800b890:	d305      	bcc.n	800b89e <__copybits+0x40>
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	f853 6b04 	ldr.w	r6, [r3], #4
 800b898:	f845 6f04 	str.w	r6, [r5, #4]!
 800b89c:	e7eb      	b.n	800b876 <__copybits+0x18>
 800b89e:	f840 3b04 	str.w	r3, [r0], #4
 800b8a2:	e7f4      	b.n	800b88e <__copybits+0x30>

0800b8a4 <__any_on>:
 800b8a4:	f100 0214 	add.w	r2, r0, #20
 800b8a8:	6900      	ldr	r0, [r0, #16]
 800b8aa:	114b      	asrs	r3, r1, #5
 800b8ac:	4298      	cmp	r0, r3
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	db11      	blt.n	800b8d6 <__any_on+0x32>
 800b8b2:	dd0a      	ble.n	800b8ca <__any_on+0x26>
 800b8b4:	f011 011f 	ands.w	r1, r1, #31
 800b8b8:	d007      	beq.n	800b8ca <__any_on+0x26>
 800b8ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8be:	fa24 f001 	lsr.w	r0, r4, r1
 800b8c2:	fa00 f101 	lsl.w	r1, r0, r1
 800b8c6:	428c      	cmp	r4, r1
 800b8c8:	d10b      	bne.n	800b8e2 <__any_on+0x3e>
 800b8ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d803      	bhi.n	800b8da <__any_on+0x36>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	bd10      	pop	{r4, pc}
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	e7f7      	b.n	800b8ca <__any_on+0x26>
 800b8da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8de:	2900      	cmp	r1, #0
 800b8e0:	d0f5      	beq.n	800b8ce <__any_on+0x2a>
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	e7f6      	b.n	800b8d4 <__any_on+0x30>

0800b8e6 <sulp>:
 800b8e6:	b570      	push	{r4, r5, r6, lr}
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	ec45 4b10 	vmov	d0, r4, r5
 800b8f0:	4616      	mov	r6, r2
 800b8f2:	f7ff feb7 	bl	800b664 <__ulp>
 800b8f6:	ec51 0b10 	vmov	r0, r1, d0
 800b8fa:	b17e      	cbz	r6, 800b91c <sulp+0x36>
 800b8fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b900:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd09      	ble.n	800b91c <sulp+0x36>
 800b908:	051b      	lsls	r3, r3, #20
 800b90a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b90e:	2400      	movs	r4, #0
 800b910:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b914:	4622      	mov	r2, r4
 800b916:	462b      	mov	r3, r5
 800b918:	f7f4 fe76 	bl	8000608 <__aeabi_dmul>
 800b91c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b920 <_strtod_l>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b02 	vpush	{d8}
 800b928:	b09b      	sub	sp, #108	; 0x6c
 800b92a:	4604      	mov	r4, r0
 800b92c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b92e:	2200      	movs	r2, #0
 800b930:	9216      	str	r2, [sp, #88]	; 0x58
 800b932:	460d      	mov	r5, r1
 800b934:	f04f 0800 	mov.w	r8, #0
 800b938:	f04f 0900 	mov.w	r9, #0
 800b93c:	460a      	mov	r2, r1
 800b93e:	9215      	str	r2, [sp, #84]	; 0x54
 800b940:	7811      	ldrb	r1, [r2, #0]
 800b942:	292b      	cmp	r1, #43	; 0x2b
 800b944:	d04c      	beq.n	800b9e0 <_strtod_l+0xc0>
 800b946:	d83a      	bhi.n	800b9be <_strtod_l+0x9e>
 800b948:	290d      	cmp	r1, #13
 800b94a:	d834      	bhi.n	800b9b6 <_strtod_l+0x96>
 800b94c:	2908      	cmp	r1, #8
 800b94e:	d834      	bhi.n	800b9ba <_strtod_l+0x9a>
 800b950:	2900      	cmp	r1, #0
 800b952:	d03d      	beq.n	800b9d0 <_strtod_l+0xb0>
 800b954:	2200      	movs	r2, #0
 800b956:	920a      	str	r2, [sp, #40]	; 0x28
 800b958:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b95a:	7832      	ldrb	r2, [r6, #0]
 800b95c:	2a30      	cmp	r2, #48	; 0x30
 800b95e:	f040 80b4 	bne.w	800baca <_strtod_l+0x1aa>
 800b962:	7872      	ldrb	r2, [r6, #1]
 800b964:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b968:	2a58      	cmp	r2, #88	; 0x58
 800b96a:	d170      	bne.n	800ba4e <_strtod_l+0x12e>
 800b96c:	9302      	str	r3, [sp, #8]
 800b96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	ab16      	add	r3, sp, #88	; 0x58
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	4a8e      	ldr	r2, [pc, #568]	; (800bbb0 <_strtod_l+0x290>)
 800b978:	ab17      	add	r3, sp, #92	; 0x5c
 800b97a:	a915      	add	r1, sp, #84	; 0x54
 800b97c:	4620      	mov	r0, r4
 800b97e:	f001 fe9b 	bl	800d6b8 <__gethex>
 800b982:	f010 070f 	ands.w	r7, r0, #15
 800b986:	4605      	mov	r5, r0
 800b988:	d005      	beq.n	800b996 <_strtod_l+0x76>
 800b98a:	2f06      	cmp	r7, #6
 800b98c:	d12a      	bne.n	800b9e4 <_strtod_l+0xc4>
 800b98e:	3601      	adds	r6, #1
 800b990:	2300      	movs	r3, #0
 800b992:	9615      	str	r6, [sp, #84]	; 0x54
 800b994:	930a      	str	r3, [sp, #40]	; 0x28
 800b996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 857f 	bne.w	800c49c <_strtod_l+0xb7c>
 800b99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a0:	b1db      	cbz	r3, 800b9da <_strtod_l+0xba>
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9a8:	ec43 2b10 	vmov	d0, r2, r3
 800b9ac:	b01b      	add	sp, #108	; 0x6c
 800b9ae:	ecbd 8b02 	vpop	{d8}
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	2920      	cmp	r1, #32
 800b9b8:	d1cc      	bne.n	800b954 <_strtod_l+0x34>
 800b9ba:	3201      	adds	r2, #1
 800b9bc:	e7bf      	b.n	800b93e <_strtod_l+0x1e>
 800b9be:	292d      	cmp	r1, #45	; 0x2d
 800b9c0:	d1c8      	bne.n	800b954 <_strtod_l+0x34>
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	910a      	str	r1, [sp, #40]	; 0x28
 800b9c6:	1c51      	adds	r1, r2, #1
 800b9c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b9ca:	7852      	ldrb	r2, [r2, #1]
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	d1c3      	bne.n	800b958 <_strtod_l+0x38>
 800b9d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9d2:	9515      	str	r5, [sp, #84]	; 0x54
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f040 855f 	bne.w	800c498 <_strtod_l+0xb78>
 800b9da:	4642      	mov	r2, r8
 800b9dc:	464b      	mov	r3, r9
 800b9de:	e7e3      	b.n	800b9a8 <_strtod_l+0x88>
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	e7ef      	b.n	800b9c4 <_strtod_l+0xa4>
 800b9e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b9e6:	b13a      	cbz	r2, 800b9f8 <_strtod_l+0xd8>
 800b9e8:	2135      	movs	r1, #53	; 0x35
 800b9ea:	a818      	add	r0, sp, #96	; 0x60
 800b9ec:	f7ff ff37 	bl	800b85e <__copybits>
 800b9f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f7ff fb0a 	bl	800b00c <_Bfree>
 800b9f8:	3f01      	subs	r7, #1
 800b9fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b9fc:	2f04      	cmp	r7, #4
 800b9fe:	d806      	bhi.n	800ba0e <_strtod_l+0xee>
 800ba00:	e8df f007 	tbb	[pc, r7]
 800ba04:	201d0314 	.word	0x201d0314
 800ba08:	14          	.byte	0x14
 800ba09:	00          	.byte	0x00
 800ba0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ba0e:	05e9      	lsls	r1, r5, #23
 800ba10:	bf48      	it	mi
 800ba12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ba16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba1a:	0d1b      	lsrs	r3, r3, #20
 800ba1c:	051b      	lsls	r3, r3, #20
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1b9      	bne.n	800b996 <_strtod_l+0x76>
 800ba22:	f7fe faf5 	bl	800a010 <__errno>
 800ba26:	2322      	movs	r3, #34	; 0x22
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	e7b4      	b.n	800b996 <_strtod_l+0x76>
 800ba2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ba30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ba3c:	e7e7      	b.n	800ba0e <_strtod_l+0xee>
 800ba3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bbb8 <_strtod_l+0x298>
 800ba42:	e7e4      	b.n	800ba0e <_strtod_l+0xee>
 800ba44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ba48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ba4c:	e7df      	b.n	800ba0e <_strtod_l+0xee>
 800ba4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	9215      	str	r2, [sp, #84]	; 0x54
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	2b30      	cmp	r3, #48	; 0x30
 800ba58:	d0f9      	beq.n	800ba4e <_strtod_l+0x12e>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d09b      	beq.n	800b996 <_strtod_l+0x76>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f04f 0a00 	mov.w	sl, #0
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ba6e:	46d3      	mov	fp, sl
 800ba70:	220a      	movs	r2, #10
 800ba72:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ba74:	7806      	ldrb	r6, [r0, #0]
 800ba76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba7a:	b2d9      	uxtb	r1, r3
 800ba7c:	2909      	cmp	r1, #9
 800ba7e:	d926      	bls.n	800bace <_strtod_l+0x1ae>
 800ba80:	494c      	ldr	r1, [pc, #304]	; (800bbb4 <_strtod_l+0x294>)
 800ba82:	2201      	movs	r2, #1
 800ba84:	f001 fd52 	bl	800d52c <strncmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d030      	beq.n	800baee <_strtod_l+0x1ce>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4632      	mov	r2, r6
 800ba90:	9005      	str	r0, [sp, #20]
 800ba92:	465e      	mov	r6, fp
 800ba94:	4603      	mov	r3, r0
 800ba96:	2a65      	cmp	r2, #101	; 0x65
 800ba98:	d001      	beq.n	800ba9e <_strtod_l+0x17e>
 800ba9a:	2a45      	cmp	r2, #69	; 0x45
 800ba9c:	d113      	bne.n	800bac6 <_strtod_l+0x1a6>
 800ba9e:	b91e      	cbnz	r6, 800baa8 <_strtod_l+0x188>
 800baa0:	9a04      	ldr	r2, [sp, #16]
 800baa2:	4302      	orrs	r2, r0
 800baa4:	d094      	beq.n	800b9d0 <_strtod_l+0xb0>
 800baa6:	2600      	movs	r6, #0
 800baa8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800baaa:	1c6a      	adds	r2, r5, #1
 800baac:	9215      	str	r2, [sp, #84]	; 0x54
 800baae:	786a      	ldrb	r2, [r5, #1]
 800bab0:	2a2b      	cmp	r2, #43	; 0x2b
 800bab2:	d074      	beq.n	800bb9e <_strtod_l+0x27e>
 800bab4:	2a2d      	cmp	r2, #45	; 0x2d
 800bab6:	d078      	beq.n	800bbaa <_strtod_l+0x28a>
 800bab8:	f04f 0c00 	mov.w	ip, #0
 800babc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bac0:	2909      	cmp	r1, #9
 800bac2:	d97f      	bls.n	800bbc4 <_strtod_l+0x2a4>
 800bac4:	9515      	str	r5, [sp, #84]	; 0x54
 800bac6:	2700      	movs	r7, #0
 800bac8:	e09e      	b.n	800bc08 <_strtod_l+0x2e8>
 800baca:	2300      	movs	r3, #0
 800bacc:	e7c8      	b.n	800ba60 <_strtod_l+0x140>
 800bace:	f1bb 0f08 	cmp.w	fp, #8
 800bad2:	bfd8      	it	le
 800bad4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bad6:	f100 0001 	add.w	r0, r0, #1
 800bada:	bfda      	itte	le
 800badc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bae0:	9309      	strle	r3, [sp, #36]	; 0x24
 800bae2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bae6:	f10b 0b01 	add.w	fp, fp, #1
 800baea:	9015      	str	r0, [sp, #84]	; 0x54
 800baec:	e7c1      	b.n	800ba72 <_strtod_l+0x152>
 800baee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	9215      	str	r2, [sp, #84]	; 0x54
 800baf4:	785a      	ldrb	r2, [r3, #1]
 800baf6:	f1bb 0f00 	cmp.w	fp, #0
 800bafa:	d037      	beq.n	800bb6c <_strtod_l+0x24c>
 800bafc:	9005      	str	r0, [sp, #20]
 800bafe:	465e      	mov	r6, fp
 800bb00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d912      	bls.n	800bb2e <_strtod_l+0x20e>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e7c4      	b.n	800ba96 <_strtod_l+0x176>
 800bb0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	9215      	str	r2, [sp, #84]	; 0x54
 800bb12:	785a      	ldrb	r2, [r3, #1]
 800bb14:	3001      	adds	r0, #1
 800bb16:	2a30      	cmp	r2, #48	; 0x30
 800bb18:	d0f8      	beq.n	800bb0c <_strtod_l+0x1ec>
 800bb1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	f200 84c1 	bhi.w	800c4a6 <_strtod_l+0xb86>
 800bb24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb26:	9005      	str	r0, [sp, #20]
 800bb28:	2000      	movs	r0, #0
 800bb2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	3a30      	subs	r2, #48	; 0x30
 800bb30:	f100 0301 	add.w	r3, r0, #1
 800bb34:	d014      	beq.n	800bb60 <_strtod_l+0x240>
 800bb36:	9905      	ldr	r1, [sp, #20]
 800bb38:	4419      	add	r1, r3
 800bb3a:	9105      	str	r1, [sp, #20]
 800bb3c:	4633      	mov	r3, r6
 800bb3e:	eb00 0c06 	add.w	ip, r0, r6
 800bb42:	210a      	movs	r1, #10
 800bb44:	4563      	cmp	r3, ip
 800bb46:	d113      	bne.n	800bb70 <_strtod_l+0x250>
 800bb48:	1833      	adds	r3, r6, r0
 800bb4a:	2b08      	cmp	r3, #8
 800bb4c:	f106 0601 	add.w	r6, r6, #1
 800bb50:	4406      	add	r6, r0
 800bb52:	dc1a      	bgt.n	800bb8a <_strtod_l+0x26a>
 800bb54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb56:	230a      	movs	r3, #10
 800bb58:	fb03 2301 	mla	r3, r3, r1, r2
 800bb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb62:	1c51      	adds	r1, r2, #1
 800bb64:	9115      	str	r1, [sp, #84]	; 0x54
 800bb66:	7852      	ldrb	r2, [r2, #1]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	e7c9      	b.n	800bb00 <_strtod_l+0x1e0>
 800bb6c:	4658      	mov	r0, fp
 800bb6e:	e7d2      	b.n	800bb16 <_strtod_l+0x1f6>
 800bb70:	2b08      	cmp	r3, #8
 800bb72:	f103 0301 	add.w	r3, r3, #1
 800bb76:	dc03      	bgt.n	800bb80 <_strtod_l+0x260>
 800bb78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb7a:	434f      	muls	r7, r1
 800bb7c:	9709      	str	r7, [sp, #36]	; 0x24
 800bb7e:	e7e1      	b.n	800bb44 <_strtod_l+0x224>
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	bfd8      	it	le
 800bb84:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bb88:	e7dc      	b.n	800bb44 <_strtod_l+0x224>
 800bb8a:	2e10      	cmp	r6, #16
 800bb8c:	bfdc      	itt	le
 800bb8e:	230a      	movle	r3, #10
 800bb90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bb94:	e7e3      	b.n	800bb5e <_strtod_l+0x23e>
 800bb96:	2300      	movs	r3, #0
 800bb98:	9305      	str	r3, [sp, #20]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e780      	b.n	800baa0 <_strtod_l+0x180>
 800bb9e:	f04f 0c00 	mov.w	ip, #0
 800bba2:	1caa      	adds	r2, r5, #2
 800bba4:	9215      	str	r2, [sp, #84]	; 0x54
 800bba6:	78aa      	ldrb	r2, [r5, #2]
 800bba8:	e788      	b.n	800babc <_strtod_l+0x19c>
 800bbaa:	f04f 0c01 	mov.w	ip, #1
 800bbae:	e7f8      	b.n	800bba2 <_strtod_l+0x282>
 800bbb0:	0800f4f8 	.word	0x0800f4f8
 800bbb4:	0800f4f4 	.word	0x0800f4f4
 800bbb8:	7ff00000 	.word	0x7ff00000
 800bbbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbbe:	1c51      	adds	r1, r2, #1
 800bbc0:	9115      	str	r1, [sp, #84]	; 0x54
 800bbc2:	7852      	ldrb	r2, [r2, #1]
 800bbc4:	2a30      	cmp	r2, #48	; 0x30
 800bbc6:	d0f9      	beq.n	800bbbc <_strtod_l+0x29c>
 800bbc8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bbcc:	2908      	cmp	r1, #8
 800bbce:	f63f af7a 	bhi.w	800bac6 <_strtod_l+0x1a6>
 800bbd2:	3a30      	subs	r2, #48	; 0x30
 800bbd4:	9208      	str	r2, [sp, #32]
 800bbd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbd8:	920c      	str	r2, [sp, #48]	; 0x30
 800bbda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbdc:	1c57      	adds	r7, r2, #1
 800bbde:	9715      	str	r7, [sp, #84]	; 0x54
 800bbe0:	7852      	ldrb	r2, [r2, #1]
 800bbe2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bbe6:	f1be 0f09 	cmp.w	lr, #9
 800bbea:	d938      	bls.n	800bc5e <_strtod_l+0x33e>
 800bbec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbee:	1a7f      	subs	r7, r7, r1
 800bbf0:	2f08      	cmp	r7, #8
 800bbf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bbf6:	dc03      	bgt.n	800bc00 <_strtod_l+0x2e0>
 800bbf8:	9908      	ldr	r1, [sp, #32]
 800bbfa:	428f      	cmp	r7, r1
 800bbfc:	bfa8      	it	ge
 800bbfe:	460f      	movge	r7, r1
 800bc00:	f1bc 0f00 	cmp.w	ip, #0
 800bc04:	d000      	beq.n	800bc08 <_strtod_l+0x2e8>
 800bc06:	427f      	negs	r7, r7
 800bc08:	2e00      	cmp	r6, #0
 800bc0a:	d14f      	bne.n	800bcac <_strtod_l+0x38c>
 800bc0c:	9904      	ldr	r1, [sp, #16]
 800bc0e:	4301      	orrs	r1, r0
 800bc10:	f47f aec1 	bne.w	800b996 <_strtod_l+0x76>
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f aedb 	bne.w	800b9d0 <_strtod_l+0xb0>
 800bc1a:	2a69      	cmp	r2, #105	; 0x69
 800bc1c:	d029      	beq.n	800bc72 <_strtod_l+0x352>
 800bc1e:	dc26      	bgt.n	800bc6e <_strtod_l+0x34e>
 800bc20:	2a49      	cmp	r2, #73	; 0x49
 800bc22:	d026      	beq.n	800bc72 <_strtod_l+0x352>
 800bc24:	2a4e      	cmp	r2, #78	; 0x4e
 800bc26:	f47f aed3 	bne.w	800b9d0 <_strtod_l+0xb0>
 800bc2a:	499b      	ldr	r1, [pc, #620]	; (800be98 <_strtod_l+0x578>)
 800bc2c:	a815      	add	r0, sp, #84	; 0x54
 800bc2e:	f001 ff83 	bl	800db38 <__match>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f43f aecc 	beq.w	800b9d0 <_strtod_l+0xb0>
 800bc38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b28      	cmp	r3, #40	; 0x28
 800bc3e:	d12f      	bne.n	800bca0 <_strtod_l+0x380>
 800bc40:	4996      	ldr	r1, [pc, #600]	; (800be9c <_strtod_l+0x57c>)
 800bc42:	aa18      	add	r2, sp, #96	; 0x60
 800bc44:	a815      	add	r0, sp, #84	; 0x54
 800bc46:	f001 ff8b 	bl	800db60 <__hexnan>
 800bc4a:	2805      	cmp	r0, #5
 800bc4c:	d128      	bne.n	800bca0 <_strtod_l+0x380>
 800bc4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bc58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bc5c:	e69b      	b.n	800b996 <_strtod_l+0x76>
 800bc5e:	9f08      	ldr	r7, [sp, #32]
 800bc60:	210a      	movs	r1, #10
 800bc62:	fb01 2107 	mla	r1, r1, r7, r2
 800bc66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc6a:	9208      	str	r2, [sp, #32]
 800bc6c:	e7b5      	b.n	800bbda <_strtod_l+0x2ba>
 800bc6e:	2a6e      	cmp	r2, #110	; 0x6e
 800bc70:	e7d9      	b.n	800bc26 <_strtod_l+0x306>
 800bc72:	498b      	ldr	r1, [pc, #556]	; (800bea0 <_strtod_l+0x580>)
 800bc74:	a815      	add	r0, sp, #84	; 0x54
 800bc76:	f001 ff5f 	bl	800db38 <__match>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f aea8 	beq.w	800b9d0 <_strtod_l+0xb0>
 800bc80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc82:	4988      	ldr	r1, [pc, #544]	; (800bea4 <_strtod_l+0x584>)
 800bc84:	3b01      	subs	r3, #1
 800bc86:	a815      	add	r0, sp, #84	; 0x54
 800bc88:	9315      	str	r3, [sp, #84]	; 0x54
 800bc8a:	f001 ff55 	bl	800db38 <__match>
 800bc8e:	b910      	cbnz	r0, 800bc96 <_strtod_l+0x376>
 800bc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc92:	3301      	adds	r3, #1
 800bc94:	9315      	str	r3, [sp, #84]	; 0x54
 800bc96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800beb4 <_strtod_l+0x594>
 800bc9a:	f04f 0800 	mov.w	r8, #0
 800bc9e:	e67a      	b.n	800b996 <_strtod_l+0x76>
 800bca0:	4881      	ldr	r0, [pc, #516]	; (800bea8 <_strtod_l+0x588>)
 800bca2:	f001 fc65 	bl	800d570 <nan>
 800bca6:	ec59 8b10 	vmov	r8, r9, d0
 800bcaa:	e674      	b.n	800b996 <_strtod_l+0x76>
 800bcac:	9b05      	ldr	r3, [sp, #20]
 800bcae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcb0:	1afb      	subs	r3, r7, r3
 800bcb2:	f1bb 0f00 	cmp.w	fp, #0
 800bcb6:	bf08      	it	eq
 800bcb8:	46b3      	moveq	fp, r6
 800bcba:	2e10      	cmp	r6, #16
 800bcbc:	9308      	str	r3, [sp, #32]
 800bcbe:	4635      	mov	r5, r6
 800bcc0:	bfa8      	it	ge
 800bcc2:	2510      	movge	r5, #16
 800bcc4:	f7f4 fc26 	bl	8000514 <__aeabi_ui2d>
 800bcc8:	2e09      	cmp	r6, #9
 800bcca:	4680      	mov	r8, r0
 800bccc:	4689      	mov	r9, r1
 800bcce:	dd13      	ble.n	800bcf8 <_strtod_l+0x3d8>
 800bcd0:	4b76      	ldr	r3, [pc, #472]	; (800beac <_strtod_l+0x58c>)
 800bcd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bcd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bcda:	f7f4 fc95 	bl	8000608 <__aeabi_dmul>
 800bcde:	4680      	mov	r8, r0
 800bce0:	4650      	mov	r0, sl
 800bce2:	4689      	mov	r9, r1
 800bce4:	f7f4 fc16 	bl	8000514 <__aeabi_ui2d>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4640      	mov	r0, r8
 800bcee:	4649      	mov	r1, r9
 800bcf0:	f7f4 fad4 	bl	800029c <__adddf3>
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	4689      	mov	r9, r1
 800bcf8:	2e0f      	cmp	r6, #15
 800bcfa:	dc38      	bgt.n	800bd6e <_strtod_l+0x44e>
 800bcfc:	9b08      	ldr	r3, [sp, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f43f ae49 	beq.w	800b996 <_strtod_l+0x76>
 800bd04:	dd24      	ble.n	800bd50 <_strtod_l+0x430>
 800bd06:	2b16      	cmp	r3, #22
 800bd08:	dc0b      	bgt.n	800bd22 <_strtod_l+0x402>
 800bd0a:	4968      	ldr	r1, [pc, #416]	; (800beac <_strtod_l+0x58c>)
 800bd0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd14:	4642      	mov	r2, r8
 800bd16:	464b      	mov	r3, r9
 800bd18:	f7f4 fc76 	bl	8000608 <__aeabi_dmul>
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	e639      	b.n	800b996 <_strtod_l+0x76>
 800bd22:	9a08      	ldr	r2, [sp, #32]
 800bd24:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	db20      	blt.n	800bd6e <_strtod_l+0x44e>
 800bd2c:	4c5f      	ldr	r4, [pc, #380]	; (800beac <_strtod_l+0x58c>)
 800bd2e:	f1c6 060f 	rsb	r6, r6, #15
 800bd32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	9b08      	ldr	r3, [sp, #32]
 800bd44:	1b9e      	subs	r6, r3, r6
 800bd46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bd4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd4e:	e7e3      	b.n	800bd18 <_strtod_l+0x3f8>
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	3316      	adds	r3, #22
 800bd54:	db0b      	blt.n	800bd6e <_strtod_l+0x44e>
 800bd56:	9b05      	ldr	r3, [sp, #20]
 800bd58:	1bdf      	subs	r7, r3, r7
 800bd5a:	4b54      	ldr	r3, [pc, #336]	; (800beac <_strtod_l+0x58c>)
 800bd5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd64:	4640      	mov	r0, r8
 800bd66:	4649      	mov	r1, r9
 800bd68:	f7f4 fd78 	bl	800085c <__aeabi_ddiv>
 800bd6c:	e7d6      	b.n	800bd1c <_strtod_l+0x3fc>
 800bd6e:	9b08      	ldr	r3, [sp, #32]
 800bd70:	1b75      	subs	r5, r6, r5
 800bd72:	441d      	add	r5, r3
 800bd74:	2d00      	cmp	r5, #0
 800bd76:	dd70      	ble.n	800be5a <_strtod_l+0x53a>
 800bd78:	f015 030f 	ands.w	r3, r5, #15
 800bd7c:	d00a      	beq.n	800bd94 <_strtod_l+0x474>
 800bd7e:	494b      	ldr	r1, [pc, #300]	; (800beac <_strtod_l+0x58c>)
 800bd80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd84:	4642      	mov	r2, r8
 800bd86:	464b      	mov	r3, r9
 800bd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8c:	f7f4 fc3c 	bl	8000608 <__aeabi_dmul>
 800bd90:	4680      	mov	r8, r0
 800bd92:	4689      	mov	r9, r1
 800bd94:	f035 050f 	bics.w	r5, r5, #15
 800bd98:	d04d      	beq.n	800be36 <_strtod_l+0x516>
 800bd9a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bd9e:	dd22      	ble.n	800bde6 <_strtod_l+0x4c6>
 800bda0:	2500      	movs	r5, #0
 800bda2:	46ab      	mov	fp, r5
 800bda4:	9509      	str	r5, [sp, #36]	; 0x24
 800bda6:	9505      	str	r5, [sp, #20]
 800bda8:	2322      	movs	r3, #34	; 0x22
 800bdaa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800beb4 <_strtod_l+0x594>
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	f04f 0800 	mov.w	r8, #0
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f43f aded 	beq.w	800b996 <_strtod_l+0x76>
 800bdbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7ff f924 	bl	800b00c <_Bfree>
 800bdc4:	9905      	ldr	r1, [sp, #20]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff f920 	bl	800b00c <_Bfree>
 800bdcc:	4659      	mov	r1, fp
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7ff f91c 	bl	800b00c <_Bfree>
 800bdd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff f918 	bl	800b00c <_Bfree>
 800bddc:	4629      	mov	r1, r5
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7ff f914 	bl	800b00c <_Bfree>
 800bde4:	e5d7      	b.n	800b996 <_strtod_l+0x76>
 800bde6:	4b32      	ldr	r3, [pc, #200]	; (800beb0 <_strtod_l+0x590>)
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	2300      	movs	r3, #0
 800bdec:	112d      	asrs	r5, r5, #4
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	469a      	mov	sl, r3
 800bdf4:	2d01      	cmp	r5, #1
 800bdf6:	dc21      	bgt.n	800be3c <_strtod_l+0x51c>
 800bdf8:	b10b      	cbz	r3, 800bdfe <_strtod_l+0x4de>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	492c      	ldr	r1, [pc, #176]	; (800beb0 <_strtod_l+0x590>)
 800be00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800be04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be08:	4642      	mov	r2, r8
 800be0a:	464b      	mov	r3, r9
 800be0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be10:	f7f4 fbfa 	bl	8000608 <__aeabi_dmul>
 800be14:	4b27      	ldr	r3, [pc, #156]	; (800beb4 <_strtod_l+0x594>)
 800be16:	460a      	mov	r2, r1
 800be18:	400b      	ands	r3, r1
 800be1a:	4927      	ldr	r1, [pc, #156]	; (800beb8 <_strtod_l+0x598>)
 800be1c:	428b      	cmp	r3, r1
 800be1e:	4680      	mov	r8, r0
 800be20:	d8be      	bhi.n	800bda0 <_strtod_l+0x480>
 800be22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be26:	428b      	cmp	r3, r1
 800be28:	bf86      	itte	hi
 800be2a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bebc <_strtod_l+0x59c>
 800be2e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800be32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800be36:	2300      	movs	r3, #0
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	e07b      	b.n	800bf34 <_strtod_l+0x614>
 800be3c:	07ea      	lsls	r2, r5, #31
 800be3e:	d505      	bpl.n	800be4c <_strtod_l+0x52c>
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fbdf 	bl	8000608 <__aeabi_dmul>
 800be4a:	2301      	movs	r3, #1
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	3208      	adds	r2, #8
 800be50:	f10a 0a01 	add.w	sl, sl, #1
 800be54:	106d      	asrs	r5, r5, #1
 800be56:	9204      	str	r2, [sp, #16]
 800be58:	e7cc      	b.n	800bdf4 <_strtod_l+0x4d4>
 800be5a:	d0ec      	beq.n	800be36 <_strtod_l+0x516>
 800be5c:	426d      	negs	r5, r5
 800be5e:	f015 020f 	ands.w	r2, r5, #15
 800be62:	d00a      	beq.n	800be7a <_strtod_l+0x55a>
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <_strtod_l+0x58c>)
 800be66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be6a:	4640      	mov	r0, r8
 800be6c:	4649      	mov	r1, r9
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fcf3 	bl	800085c <__aeabi_ddiv>
 800be76:	4680      	mov	r8, r0
 800be78:	4689      	mov	r9, r1
 800be7a:	112d      	asrs	r5, r5, #4
 800be7c:	d0db      	beq.n	800be36 <_strtod_l+0x516>
 800be7e:	2d1f      	cmp	r5, #31
 800be80:	dd1e      	ble.n	800bec0 <_strtod_l+0x5a0>
 800be82:	2500      	movs	r5, #0
 800be84:	46ab      	mov	fp, r5
 800be86:	9509      	str	r5, [sp, #36]	; 0x24
 800be88:	9505      	str	r5, [sp, #20]
 800be8a:	2322      	movs	r3, #34	; 0x22
 800be8c:	f04f 0800 	mov.w	r8, #0
 800be90:	f04f 0900 	mov.w	r9, #0
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	e78d      	b.n	800bdb4 <_strtod_l+0x494>
 800be98:	0800f2e1 	.word	0x0800f2e1
 800be9c:	0800f50c 	.word	0x0800f50c
 800bea0:	0800f2d9 	.word	0x0800f2d9
 800bea4:	0800f30e 	.word	0x0800f30e
 800bea8:	0800f6b8 	.word	0x0800f6b8
 800beac:	0800f420 	.word	0x0800f420
 800beb0:	0800f3f8 	.word	0x0800f3f8
 800beb4:	7ff00000 	.word	0x7ff00000
 800beb8:	7ca00000 	.word	0x7ca00000
 800bebc:	7fefffff 	.word	0x7fefffff
 800bec0:	f015 0310 	ands.w	r3, r5, #16
 800bec4:	bf18      	it	ne
 800bec6:	236a      	movne	r3, #106	; 0x6a
 800bec8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c26c <_strtod_l+0x94c>
 800becc:	9304      	str	r3, [sp, #16]
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	2300      	movs	r3, #0
 800bed4:	07ea      	lsls	r2, r5, #31
 800bed6:	d504      	bpl.n	800bee2 <_strtod_l+0x5c2>
 800bed8:	e9da 2300 	ldrd	r2, r3, [sl]
 800bedc:	f7f4 fb94 	bl	8000608 <__aeabi_dmul>
 800bee0:	2301      	movs	r3, #1
 800bee2:	106d      	asrs	r5, r5, #1
 800bee4:	f10a 0a08 	add.w	sl, sl, #8
 800bee8:	d1f4      	bne.n	800bed4 <_strtod_l+0x5b4>
 800beea:	b10b      	cbz	r3, 800bef0 <_strtod_l+0x5d0>
 800beec:	4680      	mov	r8, r0
 800beee:	4689      	mov	r9, r1
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	b1bb      	cbz	r3, 800bf24 <_strtod_l+0x604>
 800bef4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bef8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800befc:	2b00      	cmp	r3, #0
 800befe:	4649      	mov	r1, r9
 800bf00:	dd10      	ble.n	800bf24 <_strtod_l+0x604>
 800bf02:	2b1f      	cmp	r3, #31
 800bf04:	f340 811e 	ble.w	800c144 <_strtod_l+0x824>
 800bf08:	2b34      	cmp	r3, #52	; 0x34
 800bf0a:	bfde      	ittt	le
 800bf0c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bf10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bf14:	4093      	lslle	r3, r2
 800bf16:	f04f 0800 	mov.w	r8, #0
 800bf1a:	bfcc      	ite	gt
 800bf1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bf20:	ea03 0901 	andle.w	r9, r3, r1
 800bf24:	2200      	movs	r2, #0
 800bf26:	2300      	movs	r3, #0
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	f7f4 fdd4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d1a6      	bne.n	800be82 <_strtod_l+0x562>
 800bf34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf3a:	4633      	mov	r3, r6
 800bf3c:	465a      	mov	r2, fp
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f7ff f8cc 	bl	800b0dc <__s2b>
 800bf44:	9009      	str	r0, [sp, #36]	; 0x24
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f43f af2a 	beq.w	800bda0 <_strtod_l+0x480>
 800bf4c:	9a08      	ldr	r2, [sp, #32]
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	eba3 0307 	sub.w	r3, r3, r7
 800bf56:	bfa8      	it	ge
 800bf58:	2300      	movge	r3, #0
 800bf5a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf62:	9312      	str	r3, [sp, #72]	; 0x48
 800bf64:	46ab      	mov	fp, r5
 800bf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf68:	4620      	mov	r0, r4
 800bf6a:	6859      	ldr	r1, [r3, #4]
 800bf6c:	f7ff f80e 	bl	800af8c <_Balloc>
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	2800      	cmp	r0, #0
 800bf74:	f43f af18 	beq.w	800bda8 <_strtod_l+0x488>
 800bf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	3202      	adds	r2, #2
 800bf7e:	f103 010c 	add.w	r1, r3, #12
 800bf82:	0092      	lsls	r2, r2, #2
 800bf84:	300c      	adds	r0, #12
 800bf86:	f7fe f870 	bl	800a06a <memcpy>
 800bf8a:	ec49 8b10 	vmov	d0, r8, r9
 800bf8e:	aa18      	add	r2, sp, #96	; 0x60
 800bf90:	a917      	add	r1, sp, #92	; 0x5c
 800bf92:	4620      	mov	r0, r4
 800bf94:	f7ff fbd6 	bl	800b744 <__d2b>
 800bf98:	ec49 8b18 	vmov	d8, r8, r9
 800bf9c:	9016      	str	r0, [sp, #88]	; 0x58
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	f43f af02 	beq.w	800bda8 <_strtod_l+0x488>
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f7ff f930 	bl	800b20c <__i2b>
 800bfac:	4683      	mov	fp, r0
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f43f aefa 	beq.w	800bda8 <_strtod_l+0x488>
 800bfb4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bfb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	bfab      	itete	ge
 800bfbc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bfbe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bfc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bfc2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bfc6:	bfac      	ite	ge
 800bfc8:	eb06 0a03 	addge.w	sl, r6, r3
 800bfcc:	1b9f      	sublt	r7, r3, r6
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	1af6      	subs	r6, r6, r3
 800bfd2:	4416      	add	r6, r2
 800bfd4:	4ba0      	ldr	r3, [pc, #640]	; (800c258 <_strtod_l+0x938>)
 800bfd6:	3e01      	subs	r6, #1
 800bfd8:	429e      	cmp	r6, r3
 800bfda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bfde:	f280 80c4 	bge.w	800c16a <_strtod_l+0x84a>
 800bfe2:	1b9b      	subs	r3, r3, r6
 800bfe4:	2b1f      	cmp	r3, #31
 800bfe6:	eba2 0203 	sub.w	r2, r2, r3
 800bfea:	f04f 0101 	mov.w	r1, #1
 800bfee:	f300 80b0 	bgt.w	800c152 <_strtod_l+0x832>
 800bff2:	fa01 f303 	lsl.w	r3, r1, r3
 800bff6:	930e      	str	r3, [sp, #56]	; 0x38
 800bff8:	2300      	movs	r3, #0
 800bffa:	930d      	str	r3, [sp, #52]	; 0x34
 800bffc:	eb0a 0602 	add.w	r6, sl, r2
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	45b2      	cmp	sl, r6
 800c004:	4417      	add	r7, r2
 800c006:	441f      	add	r7, r3
 800c008:	4653      	mov	r3, sl
 800c00a:	bfa8      	it	ge
 800c00c:	4633      	movge	r3, r6
 800c00e:	42bb      	cmp	r3, r7
 800c010:	bfa8      	it	ge
 800c012:	463b      	movge	r3, r7
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfc2      	ittt	gt
 800c018:	1af6      	subgt	r6, r6, r3
 800c01a:	1aff      	subgt	r7, r7, r3
 800c01c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c022:	2b00      	cmp	r3, #0
 800c024:	dd17      	ble.n	800c056 <_strtod_l+0x736>
 800c026:	4659      	mov	r1, fp
 800c028:	461a      	mov	r2, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff f9ae 	bl	800b38c <__pow5mult>
 800c030:	4683      	mov	fp, r0
 800c032:	2800      	cmp	r0, #0
 800c034:	f43f aeb8 	beq.w	800bda8 <_strtod_l+0x488>
 800c038:	4601      	mov	r1, r0
 800c03a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff f8fb 	bl	800b238 <__multiply>
 800c042:	900b      	str	r0, [sp, #44]	; 0x2c
 800c044:	2800      	cmp	r0, #0
 800c046:	f43f aeaf 	beq.w	800bda8 <_strtod_l+0x488>
 800c04a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7fe ffdd 	bl	800b00c <_Bfree>
 800c052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c054:	9316      	str	r3, [sp, #88]	; 0x58
 800c056:	2e00      	cmp	r6, #0
 800c058:	f300 808c 	bgt.w	800c174 <_strtod_l+0x854>
 800c05c:	9b08      	ldr	r3, [sp, #32]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd08      	ble.n	800c074 <_strtod_l+0x754>
 800c062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c064:	9905      	ldr	r1, [sp, #20]
 800c066:	4620      	mov	r0, r4
 800c068:	f7ff f990 	bl	800b38c <__pow5mult>
 800c06c:	9005      	str	r0, [sp, #20]
 800c06e:	2800      	cmp	r0, #0
 800c070:	f43f ae9a 	beq.w	800bda8 <_strtod_l+0x488>
 800c074:	2f00      	cmp	r7, #0
 800c076:	dd08      	ble.n	800c08a <_strtod_l+0x76a>
 800c078:	9905      	ldr	r1, [sp, #20]
 800c07a:	463a      	mov	r2, r7
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7ff f9df 	bl	800b440 <__lshift>
 800c082:	9005      	str	r0, [sp, #20]
 800c084:	2800      	cmp	r0, #0
 800c086:	f43f ae8f 	beq.w	800bda8 <_strtod_l+0x488>
 800c08a:	f1ba 0f00 	cmp.w	sl, #0
 800c08e:	dd08      	ble.n	800c0a2 <_strtod_l+0x782>
 800c090:	4659      	mov	r1, fp
 800c092:	4652      	mov	r2, sl
 800c094:	4620      	mov	r0, r4
 800c096:	f7ff f9d3 	bl	800b440 <__lshift>
 800c09a:	4683      	mov	fp, r0
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f43f ae83 	beq.w	800bda8 <_strtod_l+0x488>
 800c0a2:	9a05      	ldr	r2, [sp, #20]
 800c0a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f7ff fa52 	bl	800b550 <__mdiff>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f43f ae7a 	beq.w	800bda8 <_strtod_l+0x488>
 800c0b4:	68c3      	ldr	r3, [r0, #12]
 800c0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60c3      	str	r3, [r0, #12]
 800c0bc:	4659      	mov	r1, fp
 800c0be:	f7ff fa2b 	bl	800b518 <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	da60      	bge.n	800c188 <_strtod_l+0x868>
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c8:	ea53 0308 	orrs.w	r3, r3, r8
 800c0cc:	f040 8084 	bne.w	800c1d8 <_strtod_l+0x8b8>
 800c0d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d17f      	bne.n	800c1d8 <_strtod_l+0x8b8>
 800c0d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0dc:	0d1b      	lsrs	r3, r3, #20
 800c0de:	051b      	lsls	r3, r3, #20
 800c0e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c0e4:	d978      	bls.n	800c1d8 <_strtod_l+0x8b8>
 800c0e6:	696b      	ldr	r3, [r5, #20]
 800c0e8:	b913      	cbnz	r3, 800c0f0 <_strtod_l+0x7d0>
 800c0ea:	692b      	ldr	r3, [r5, #16]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	dd73      	ble.n	800c1d8 <_strtod_l+0x8b8>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f7ff f9a3 	bl	800b440 <__lshift>
 800c0fa:	4659      	mov	r1, fp
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	f7ff fa0b 	bl	800b518 <__mcmp>
 800c102:	2800      	cmp	r0, #0
 800c104:	dd68      	ble.n	800c1d8 <_strtod_l+0x8b8>
 800c106:	9904      	ldr	r1, [sp, #16]
 800c108:	4a54      	ldr	r2, [pc, #336]	; (800c25c <_strtod_l+0x93c>)
 800c10a:	464b      	mov	r3, r9
 800c10c:	2900      	cmp	r1, #0
 800c10e:	f000 8084 	beq.w	800c21a <_strtod_l+0x8fa>
 800c112:	ea02 0109 	and.w	r1, r2, r9
 800c116:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c11a:	dc7e      	bgt.n	800c21a <_strtod_l+0x8fa>
 800c11c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c120:	f77f aeb3 	ble.w	800be8a <_strtod_l+0x56a>
 800c124:	4b4e      	ldr	r3, [pc, #312]	; (800c260 <_strtod_l+0x940>)
 800c126:	4640      	mov	r0, r8
 800c128:	4649      	mov	r1, r9
 800c12a:	2200      	movs	r2, #0
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4b4a      	ldr	r3, [pc, #296]	; (800c25c <_strtod_l+0x93c>)
 800c132:	400b      	ands	r3, r1
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f ae3f 	bne.w	800bdbc <_strtod_l+0x49c>
 800c13e:	2322      	movs	r3, #34	; 0x22
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	e63b      	b.n	800bdbc <_strtod_l+0x49c>
 800c144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c148:	fa02 f303 	lsl.w	r3, r2, r3
 800c14c:	ea03 0808 	and.w	r8, r3, r8
 800c150:	e6e8      	b.n	800bf24 <_strtod_l+0x604>
 800c152:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c156:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c15a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c15e:	36e2      	adds	r6, #226	; 0xe2
 800c160:	fa01 f306 	lsl.w	r3, r1, r6
 800c164:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c168:	e748      	b.n	800bffc <_strtod_l+0x6dc>
 800c16a:	2100      	movs	r1, #0
 800c16c:	2301      	movs	r3, #1
 800c16e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c172:	e743      	b.n	800bffc <_strtod_l+0x6dc>
 800c174:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c176:	4632      	mov	r2, r6
 800c178:	4620      	mov	r0, r4
 800c17a:	f7ff f961 	bl	800b440 <__lshift>
 800c17e:	9016      	str	r0, [sp, #88]	; 0x58
 800c180:	2800      	cmp	r0, #0
 800c182:	f47f af6b 	bne.w	800c05c <_strtod_l+0x73c>
 800c186:	e60f      	b.n	800bda8 <_strtod_l+0x488>
 800c188:	46ca      	mov	sl, r9
 800c18a:	d171      	bne.n	800c270 <_strtod_l+0x950>
 800c18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c18e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c192:	b352      	cbz	r2, 800c1ea <_strtod_l+0x8ca>
 800c194:	4a33      	ldr	r2, [pc, #204]	; (800c264 <_strtod_l+0x944>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d12a      	bne.n	800c1f0 <_strtod_l+0x8d0>
 800c19a:	9b04      	ldr	r3, [sp, #16]
 800c19c:	4641      	mov	r1, r8
 800c19e:	b1fb      	cbz	r3, 800c1e0 <_strtod_l+0x8c0>
 800c1a0:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <_strtod_l+0x93c>)
 800c1a2:	ea09 0303 	and.w	r3, r9, r3
 800c1a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c1aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ae:	d81a      	bhi.n	800c1e6 <_strtod_l+0x8c6>
 800c1b0:	0d1b      	lsrs	r3, r3, #20
 800c1b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d118      	bne.n	800c1f0 <_strtod_l+0x8d0>
 800c1be:	4b2a      	ldr	r3, [pc, #168]	; (800c268 <_strtod_l+0x948>)
 800c1c0:	459a      	cmp	sl, r3
 800c1c2:	d102      	bne.n	800c1ca <_strtod_l+0x8aa>
 800c1c4:	3101      	adds	r1, #1
 800c1c6:	f43f adef 	beq.w	800bda8 <_strtod_l+0x488>
 800c1ca:	4b24      	ldr	r3, [pc, #144]	; (800c25c <_strtod_l+0x93c>)
 800c1cc:	ea0a 0303 	and.w	r3, sl, r3
 800c1d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c1d4:	f04f 0800 	mov.w	r8, #0
 800c1d8:	9b04      	ldr	r3, [sp, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1a2      	bne.n	800c124 <_strtod_l+0x804>
 800c1de:	e5ed      	b.n	800bdbc <_strtod_l+0x49c>
 800c1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1e4:	e7e9      	b.n	800c1ba <_strtod_l+0x89a>
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	e7e7      	b.n	800c1ba <_strtod_l+0x89a>
 800c1ea:	ea53 0308 	orrs.w	r3, r3, r8
 800c1ee:	d08a      	beq.n	800c106 <_strtod_l+0x7e6>
 800c1f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f2:	b1e3      	cbz	r3, 800c22e <_strtod_l+0x90e>
 800c1f4:	ea13 0f0a 	tst.w	r3, sl
 800c1f8:	d0ee      	beq.n	800c1d8 <_strtod_l+0x8b8>
 800c1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fc:	9a04      	ldr	r2, [sp, #16]
 800c1fe:	4640      	mov	r0, r8
 800c200:	4649      	mov	r1, r9
 800c202:	b1c3      	cbz	r3, 800c236 <_strtod_l+0x916>
 800c204:	f7ff fb6f 	bl	800b8e6 <sulp>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	ec51 0b18 	vmov	r0, r1, d8
 800c210:	f7f4 f844 	bl	800029c <__adddf3>
 800c214:	4680      	mov	r8, r0
 800c216:	4689      	mov	r9, r1
 800c218:	e7de      	b.n	800c1d8 <_strtod_l+0x8b8>
 800c21a:	4013      	ands	r3, r2
 800c21c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c220:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c224:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c228:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c22c:	e7d4      	b.n	800c1d8 <_strtod_l+0x8b8>
 800c22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c230:	ea13 0f08 	tst.w	r3, r8
 800c234:	e7e0      	b.n	800c1f8 <_strtod_l+0x8d8>
 800c236:	f7ff fb56 	bl	800b8e6 <sulp>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	ec51 0b18 	vmov	r0, r1, d8
 800c242:	f7f4 f829 	bl	8000298 <__aeabi_dsub>
 800c246:	2200      	movs	r2, #0
 800c248:	2300      	movs	r3, #0
 800c24a:	4680      	mov	r8, r0
 800c24c:	4689      	mov	r9, r1
 800c24e:	f7f4 fc43 	bl	8000ad8 <__aeabi_dcmpeq>
 800c252:	2800      	cmp	r0, #0
 800c254:	d0c0      	beq.n	800c1d8 <_strtod_l+0x8b8>
 800c256:	e618      	b.n	800be8a <_strtod_l+0x56a>
 800c258:	fffffc02 	.word	0xfffffc02
 800c25c:	7ff00000 	.word	0x7ff00000
 800c260:	39500000 	.word	0x39500000
 800c264:	000fffff 	.word	0x000fffff
 800c268:	7fefffff 	.word	0x7fefffff
 800c26c:	0800f520 	.word	0x0800f520
 800c270:	4659      	mov	r1, fp
 800c272:	4628      	mov	r0, r5
 800c274:	f7ff fac0 	bl	800b7f8 <__ratio>
 800c278:	ec57 6b10 	vmov	r6, r7, d0
 800c27c:	ee10 0a10 	vmov	r0, s0
 800c280:	2200      	movs	r2, #0
 800c282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c286:	4639      	mov	r1, r7
 800c288:	f7f4 fc3a 	bl	8000b00 <__aeabi_dcmple>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d071      	beq.n	800c374 <_strtod_l+0xa54>
 800c290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c292:	2b00      	cmp	r3, #0
 800c294:	d17c      	bne.n	800c390 <_strtod_l+0xa70>
 800c296:	f1b8 0f00 	cmp.w	r8, #0
 800c29a:	d15a      	bne.n	800c352 <_strtod_l+0xa32>
 800c29c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d15d      	bne.n	800c360 <_strtod_l+0xa40>
 800c2a4:	4b90      	ldr	r3, [pc, #576]	; (800c4e8 <_strtod_l+0xbc8>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 fc1e 	bl	8000aec <__aeabi_dcmplt>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d15c      	bne.n	800c36e <_strtod_l+0xa4e>
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	4b8c      	ldr	r3, [pc, #560]	; (800c4ec <_strtod_l+0xbcc>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f7f4 f9a4 	bl	8000608 <__aeabi_dmul>
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	460f      	mov	r7, r1
 800c2c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c2c8:	9606      	str	r6, [sp, #24]
 800c2ca:	9307      	str	r3, [sp, #28]
 800c2cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c2d4:	4b86      	ldr	r3, [pc, #536]	; (800c4f0 <_strtod_l+0xbd0>)
 800c2d6:	ea0a 0303 	and.w	r3, sl, r3
 800c2da:	930d      	str	r3, [sp, #52]	; 0x34
 800c2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2de:	4b85      	ldr	r3, [pc, #532]	; (800c4f4 <_strtod_l+0xbd4>)
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	f040 8090 	bne.w	800c406 <_strtod_l+0xae6>
 800c2e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c2ea:	ec49 8b10 	vmov	d0, r8, r9
 800c2ee:	f7ff f9b9 	bl	800b664 <__ulp>
 800c2f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2f6:	ec51 0b10 	vmov	r0, r1, d0
 800c2fa:	f7f4 f985 	bl	8000608 <__aeabi_dmul>
 800c2fe:	4642      	mov	r2, r8
 800c300:	464b      	mov	r3, r9
 800c302:	f7f3 ffcb 	bl	800029c <__adddf3>
 800c306:	460b      	mov	r3, r1
 800c308:	4979      	ldr	r1, [pc, #484]	; (800c4f0 <_strtod_l+0xbd0>)
 800c30a:	4a7b      	ldr	r2, [pc, #492]	; (800c4f8 <_strtod_l+0xbd8>)
 800c30c:	4019      	ands	r1, r3
 800c30e:	4291      	cmp	r1, r2
 800c310:	4680      	mov	r8, r0
 800c312:	d944      	bls.n	800c39e <_strtod_l+0xa7e>
 800c314:	ee18 2a90 	vmov	r2, s17
 800c318:	4b78      	ldr	r3, [pc, #480]	; (800c4fc <_strtod_l+0xbdc>)
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d104      	bne.n	800c328 <_strtod_l+0xa08>
 800c31e:	ee18 3a10 	vmov	r3, s16
 800c322:	3301      	adds	r3, #1
 800c324:	f43f ad40 	beq.w	800bda8 <_strtod_l+0x488>
 800c328:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c4fc <_strtod_l+0xbdc>
 800c32c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c330:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c332:	4620      	mov	r0, r4
 800c334:	f7fe fe6a 	bl	800b00c <_Bfree>
 800c338:	9905      	ldr	r1, [sp, #20]
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7fe fe66 	bl	800b00c <_Bfree>
 800c340:	4659      	mov	r1, fp
 800c342:	4620      	mov	r0, r4
 800c344:	f7fe fe62 	bl	800b00c <_Bfree>
 800c348:	4629      	mov	r1, r5
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7fe fe5e 	bl	800b00c <_Bfree>
 800c350:	e609      	b.n	800bf66 <_strtod_l+0x646>
 800c352:	f1b8 0f01 	cmp.w	r8, #1
 800c356:	d103      	bne.n	800c360 <_strtod_l+0xa40>
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	f43f ad95 	beq.w	800be8a <_strtod_l+0x56a>
 800c360:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c4b8 <_strtod_l+0xb98>
 800c364:	4f60      	ldr	r7, [pc, #384]	; (800c4e8 <_strtod_l+0xbc8>)
 800c366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c36a:	2600      	movs	r6, #0
 800c36c:	e7ae      	b.n	800c2cc <_strtod_l+0x9ac>
 800c36e:	4f5f      	ldr	r7, [pc, #380]	; (800c4ec <_strtod_l+0xbcc>)
 800c370:	2600      	movs	r6, #0
 800c372:	e7a7      	b.n	800c2c4 <_strtod_l+0x9a4>
 800c374:	4b5d      	ldr	r3, [pc, #372]	; (800c4ec <_strtod_l+0xbcc>)
 800c376:	4630      	mov	r0, r6
 800c378:	4639      	mov	r1, r7
 800c37a:	2200      	movs	r2, #0
 800c37c:	f7f4 f944 	bl	8000608 <__aeabi_dmul>
 800c380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c382:	4606      	mov	r6, r0
 800c384:	460f      	mov	r7, r1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d09c      	beq.n	800c2c4 <_strtod_l+0x9a4>
 800c38a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c38e:	e79d      	b.n	800c2cc <_strtod_l+0x9ac>
 800c390:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c4c0 <_strtod_l+0xba0>
 800c394:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c398:	ec57 6b17 	vmov	r6, r7, d7
 800c39c:	e796      	b.n	800c2cc <_strtod_l+0x9ac>
 800c39e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c3a2:	9b04      	ldr	r3, [sp, #16]
 800c3a4:	46ca      	mov	sl, r9
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1c2      	bne.n	800c330 <_strtod_l+0xa10>
 800c3aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3b0:	0d1b      	lsrs	r3, r3, #20
 800c3b2:	051b      	lsls	r3, r3, #20
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d1bb      	bne.n	800c330 <_strtod_l+0xa10>
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fc84 	bl	8000cc8 <__aeabi_d2lz>
 800c3c0:	f7f4 f8f4 	bl	80005ac <__aeabi_l2d>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f3 ff64 	bl	8000298 <__aeabi_dsub>
 800c3d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3d6:	ea43 0308 	orr.w	r3, r3, r8
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	4606      	mov	r6, r0
 800c3de:	460f      	mov	r7, r1
 800c3e0:	d054      	beq.n	800c48c <_strtod_l+0xb6c>
 800c3e2:	a339      	add	r3, pc, #228	; (adr r3, 800c4c8 <_strtod_l+0xba8>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f4 fb80 	bl	8000aec <__aeabi_dcmplt>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f47f ace5 	bne.w	800bdbc <_strtod_l+0x49c>
 800c3f2:	a337      	add	r3, pc, #220	; (adr r3, 800c4d0 <_strtod_l+0xbb0>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fb94 	bl	8000b28 <__aeabi_dcmpgt>
 800c400:	2800      	cmp	r0, #0
 800c402:	d095      	beq.n	800c330 <_strtod_l+0xa10>
 800c404:	e4da      	b.n	800bdbc <_strtod_l+0x49c>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	b333      	cbz	r3, 800c458 <_strtod_l+0xb38>
 800c40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c40c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c410:	d822      	bhi.n	800c458 <_strtod_l+0xb38>
 800c412:	a331      	add	r3, pc, #196	; (adr r3, 800c4d8 <_strtod_l+0xbb8>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	4630      	mov	r0, r6
 800c41a:	4639      	mov	r1, r7
 800c41c:	f7f4 fb70 	bl	8000b00 <__aeabi_dcmple>
 800c420:	b1a0      	cbz	r0, 800c44c <_strtod_l+0xb2c>
 800c422:	4639      	mov	r1, r7
 800c424:	4630      	mov	r0, r6
 800c426:	f7f4 fbc7 	bl	8000bb8 <__aeabi_d2uiz>
 800c42a:	2801      	cmp	r0, #1
 800c42c:	bf38      	it	cc
 800c42e:	2001      	movcc	r0, #1
 800c430:	f7f4 f870 	bl	8000514 <__aeabi_ui2d>
 800c434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	bb23      	cbnz	r3, 800c486 <_strtod_l+0xb66>
 800c43c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c440:	9010      	str	r0, [sp, #64]	; 0x40
 800c442:	9311      	str	r3, [sp, #68]	; 0x44
 800c444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c448:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c44e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c450:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c454:	1a9b      	subs	r3, r3, r2
 800c456:	930f      	str	r3, [sp, #60]	; 0x3c
 800c458:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c45c:	eeb0 0a48 	vmov.f32	s0, s16
 800c460:	eef0 0a68 	vmov.f32	s1, s17
 800c464:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c468:	f7ff f8fc 	bl	800b664 <__ulp>
 800c46c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c470:	ec53 2b10 	vmov	r2, r3, d0
 800c474:	f7f4 f8c8 	bl	8000608 <__aeabi_dmul>
 800c478:	ec53 2b18 	vmov	r2, r3, d8
 800c47c:	f7f3 ff0e 	bl	800029c <__adddf3>
 800c480:	4680      	mov	r8, r0
 800c482:	4689      	mov	r9, r1
 800c484:	e78d      	b.n	800c3a2 <_strtod_l+0xa82>
 800c486:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c48a:	e7db      	b.n	800c444 <_strtod_l+0xb24>
 800c48c:	a314      	add	r3, pc, #80	; (adr r3, 800c4e0 <_strtod_l+0xbc0>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f7f4 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800c496:	e7b3      	b.n	800c400 <_strtod_l+0xae0>
 800c498:	2300      	movs	r3, #0
 800c49a:	930a      	str	r3, [sp, #40]	; 0x28
 800c49c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	f7ff ba7c 	b.w	800b99e <_strtod_l+0x7e>
 800c4a6:	2a65      	cmp	r2, #101	; 0x65
 800c4a8:	f43f ab75 	beq.w	800bb96 <_strtod_l+0x276>
 800c4ac:	2a45      	cmp	r2, #69	; 0x45
 800c4ae:	f43f ab72 	beq.w	800bb96 <_strtod_l+0x276>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f7ff bbaa 	b.w	800bc0c <_strtod_l+0x2ec>
 800c4b8:	00000000 	.word	0x00000000
 800c4bc:	bff00000 	.word	0xbff00000
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	3ff00000 	.word	0x3ff00000
 800c4c8:	94a03595 	.word	0x94a03595
 800c4cc:	3fdfffff 	.word	0x3fdfffff
 800c4d0:	35afe535 	.word	0x35afe535
 800c4d4:	3fe00000 	.word	0x3fe00000
 800c4d8:	ffc00000 	.word	0xffc00000
 800c4dc:	41dfffff 	.word	0x41dfffff
 800c4e0:	94a03595 	.word	0x94a03595
 800c4e4:	3fcfffff 	.word	0x3fcfffff
 800c4e8:	3ff00000 	.word	0x3ff00000
 800c4ec:	3fe00000 	.word	0x3fe00000
 800c4f0:	7ff00000 	.word	0x7ff00000
 800c4f4:	7fe00000 	.word	0x7fe00000
 800c4f8:	7c9fffff 	.word	0x7c9fffff
 800c4fc:	7fefffff 	.word	0x7fefffff

0800c500 <_strtod_r>:
 800c500:	4b01      	ldr	r3, [pc, #4]	; (800c508 <_strtod_r+0x8>)
 800c502:	f7ff ba0d 	b.w	800b920 <_strtod_l>
 800c506:	bf00      	nop
 800c508:	200000ec 	.word	0x200000ec

0800c50c <_strtol_l.constprop.0>:
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c512:	d001      	beq.n	800c518 <_strtol_l.constprop.0+0xc>
 800c514:	2b24      	cmp	r3, #36	; 0x24
 800c516:	d906      	bls.n	800c526 <_strtol_l.constprop.0+0x1a>
 800c518:	f7fd fd7a 	bl	800a010 <__errno>
 800c51c:	2316      	movs	r3, #22
 800c51e:	6003      	str	r3, [r0, #0]
 800c520:	2000      	movs	r0, #0
 800c522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c526:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c60c <_strtol_l.constprop.0+0x100>
 800c52a:	460d      	mov	r5, r1
 800c52c:	462e      	mov	r6, r5
 800c52e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c532:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c536:	f017 0708 	ands.w	r7, r7, #8
 800c53a:	d1f7      	bne.n	800c52c <_strtol_l.constprop.0+0x20>
 800c53c:	2c2d      	cmp	r4, #45	; 0x2d
 800c53e:	d132      	bne.n	800c5a6 <_strtol_l.constprop.0+0x9a>
 800c540:	782c      	ldrb	r4, [r5, #0]
 800c542:	2701      	movs	r7, #1
 800c544:	1cb5      	adds	r5, r6, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d05b      	beq.n	800c602 <_strtol_l.constprop.0+0xf6>
 800c54a:	2b10      	cmp	r3, #16
 800c54c:	d109      	bne.n	800c562 <_strtol_l.constprop.0+0x56>
 800c54e:	2c30      	cmp	r4, #48	; 0x30
 800c550:	d107      	bne.n	800c562 <_strtol_l.constprop.0+0x56>
 800c552:	782c      	ldrb	r4, [r5, #0]
 800c554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c558:	2c58      	cmp	r4, #88	; 0x58
 800c55a:	d14d      	bne.n	800c5f8 <_strtol_l.constprop.0+0xec>
 800c55c:	786c      	ldrb	r4, [r5, #1]
 800c55e:	2310      	movs	r3, #16
 800c560:	3502      	adds	r5, #2
 800c562:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c566:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c56a:	f04f 0e00 	mov.w	lr, #0
 800c56e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c572:	4676      	mov	r6, lr
 800c574:	fb03 8a19 	mls	sl, r3, r9, r8
 800c578:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c57c:	f1bc 0f09 	cmp.w	ip, #9
 800c580:	d816      	bhi.n	800c5b0 <_strtol_l.constprop.0+0xa4>
 800c582:	4664      	mov	r4, ip
 800c584:	42a3      	cmp	r3, r4
 800c586:	dd24      	ble.n	800c5d2 <_strtol_l.constprop.0+0xc6>
 800c588:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c58c:	d008      	beq.n	800c5a0 <_strtol_l.constprop.0+0x94>
 800c58e:	45b1      	cmp	r9, r6
 800c590:	d31c      	bcc.n	800c5cc <_strtol_l.constprop.0+0xc0>
 800c592:	d101      	bne.n	800c598 <_strtol_l.constprop.0+0x8c>
 800c594:	45a2      	cmp	sl, r4
 800c596:	db19      	blt.n	800c5cc <_strtol_l.constprop.0+0xc0>
 800c598:	fb06 4603 	mla	r6, r6, r3, r4
 800c59c:	f04f 0e01 	mov.w	lr, #1
 800c5a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5a4:	e7e8      	b.n	800c578 <_strtol_l.constprop.0+0x6c>
 800c5a6:	2c2b      	cmp	r4, #43	; 0x2b
 800c5a8:	bf04      	itt	eq
 800c5aa:	782c      	ldrbeq	r4, [r5, #0]
 800c5ac:	1cb5      	addeq	r5, r6, #2
 800c5ae:	e7ca      	b.n	800c546 <_strtol_l.constprop.0+0x3a>
 800c5b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c5b4:	f1bc 0f19 	cmp.w	ip, #25
 800c5b8:	d801      	bhi.n	800c5be <_strtol_l.constprop.0+0xb2>
 800c5ba:	3c37      	subs	r4, #55	; 0x37
 800c5bc:	e7e2      	b.n	800c584 <_strtol_l.constprop.0+0x78>
 800c5be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c5c2:	f1bc 0f19 	cmp.w	ip, #25
 800c5c6:	d804      	bhi.n	800c5d2 <_strtol_l.constprop.0+0xc6>
 800c5c8:	3c57      	subs	r4, #87	; 0x57
 800c5ca:	e7db      	b.n	800c584 <_strtol_l.constprop.0+0x78>
 800c5cc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c5d0:	e7e6      	b.n	800c5a0 <_strtol_l.constprop.0+0x94>
 800c5d2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c5d6:	d105      	bne.n	800c5e4 <_strtol_l.constprop.0+0xd8>
 800c5d8:	2322      	movs	r3, #34	; 0x22
 800c5da:	6003      	str	r3, [r0, #0]
 800c5dc:	4646      	mov	r6, r8
 800c5de:	b942      	cbnz	r2, 800c5f2 <_strtol_l.constprop.0+0xe6>
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	e79e      	b.n	800c522 <_strtol_l.constprop.0+0x16>
 800c5e4:	b107      	cbz	r7, 800c5e8 <_strtol_l.constprop.0+0xdc>
 800c5e6:	4276      	negs	r6, r6
 800c5e8:	2a00      	cmp	r2, #0
 800c5ea:	d0f9      	beq.n	800c5e0 <_strtol_l.constprop.0+0xd4>
 800c5ec:	f1be 0f00 	cmp.w	lr, #0
 800c5f0:	d000      	beq.n	800c5f4 <_strtol_l.constprop.0+0xe8>
 800c5f2:	1e69      	subs	r1, r5, #1
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	e7f3      	b.n	800c5e0 <_strtol_l.constprop.0+0xd4>
 800c5f8:	2430      	movs	r4, #48	; 0x30
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1b1      	bne.n	800c562 <_strtol_l.constprop.0+0x56>
 800c5fe:	2308      	movs	r3, #8
 800c600:	e7af      	b.n	800c562 <_strtol_l.constprop.0+0x56>
 800c602:	2c30      	cmp	r4, #48	; 0x30
 800c604:	d0a5      	beq.n	800c552 <_strtol_l.constprop.0+0x46>
 800c606:	230a      	movs	r3, #10
 800c608:	e7ab      	b.n	800c562 <_strtol_l.constprop.0+0x56>
 800c60a:	bf00      	nop
 800c60c:	0800f549 	.word	0x0800f549

0800c610 <_strtol_r>:
 800c610:	f7ff bf7c 	b.w	800c50c <_strtol_l.constprop.0>

0800c614 <__ssputs_r>:
 800c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	688e      	ldr	r6, [r1, #8]
 800c61a:	461f      	mov	r7, r3
 800c61c:	42be      	cmp	r6, r7
 800c61e:	680b      	ldr	r3, [r1, #0]
 800c620:	4682      	mov	sl, r0
 800c622:	460c      	mov	r4, r1
 800c624:	4690      	mov	r8, r2
 800c626:	d82c      	bhi.n	800c682 <__ssputs_r+0x6e>
 800c628:	898a      	ldrh	r2, [r1, #12]
 800c62a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c62e:	d026      	beq.n	800c67e <__ssputs_r+0x6a>
 800c630:	6965      	ldr	r5, [r4, #20]
 800c632:	6909      	ldr	r1, [r1, #16]
 800c634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c638:	eba3 0901 	sub.w	r9, r3, r1
 800c63c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c640:	1c7b      	adds	r3, r7, #1
 800c642:	444b      	add	r3, r9
 800c644:	106d      	asrs	r5, r5, #1
 800c646:	429d      	cmp	r5, r3
 800c648:	bf38      	it	cc
 800c64a:	461d      	movcc	r5, r3
 800c64c:	0553      	lsls	r3, r2, #21
 800c64e:	d527      	bpl.n	800c6a0 <__ssputs_r+0x8c>
 800c650:	4629      	mov	r1, r5
 800c652:	f7fe fc0f 	bl	800ae74 <_malloc_r>
 800c656:	4606      	mov	r6, r0
 800c658:	b360      	cbz	r0, 800c6b4 <__ssputs_r+0xa0>
 800c65a:	6921      	ldr	r1, [r4, #16]
 800c65c:	464a      	mov	r2, r9
 800c65e:	f7fd fd04 	bl	800a06a <memcpy>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	6126      	str	r6, [r4, #16]
 800c670:	6165      	str	r5, [r4, #20]
 800c672:	444e      	add	r6, r9
 800c674:	eba5 0509 	sub.w	r5, r5, r9
 800c678:	6026      	str	r6, [r4, #0]
 800c67a:	60a5      	str	r5, [r4, #8]
 800c67c:	463e      	mov	r6, r7
 800c67e:	42be      	cmp	r6, r7
 800c680:	d900      	bls.n	800c684 <__ssputs_r+0x70>
 800c682:	463e      	mov	r6, r7
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	4632      	mov	r2, r6
 800c688:	4641      	mov	r1, r8
 800c68a:	f000 ff35 	bl	800d4f8 <memmove>
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	1b9b      	subs	r3, r3, r6
 800c692:	60a3      	str	r3, [r4, #8]
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	4433      	add	r3, r6
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	2000      	movs	r0, #0
 800c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a0:	462a      	mov	r2, r5
 800c6a2:	f001 fb0a 	bl	800dcba <_realloc_r>
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1e0      	bne.n	800c66e <__ssputs_r+0x5a>
 800c6ac:	6921      	ldr	r1, [r4, #16]
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7fe fb6c 	bl	800ad8c <_free_r>
 800c6b4:	230c      	movs	r3, #12
 800c6b6:	f8ca 3000 	str.w	r3, [sl]
 800c6ba:	89a3      	ldrh	r3, [r4, #12]
 800c6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c0:	81a3      	strh	r3, [r4, #12]
 800c6c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6c6:	e7e9      	b.n	800c69c <__ssputs_r+0x88>

0800c6c8 <_svfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	4698      	mov	r8, r3
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	061b      	lsls	r3, r3, #24
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	d50e      	bpl.n	800c6fa <_svfiprintf_r+0x32>
 800c6dc:	690b      	ldr	r3, [r1, #16]
 800c6de:	b963      	cbnz	r3, 800c6fa <_svfiprintf_r+0x32>
 800c6e0:	2140      	movs	r1, #64	; 0x40
 800c6e2:	f7fe fbc7 	bl	800ae74 <_malloc_r>
 800c6e6:	6028      	str	r0, [r5, #0]
 800c6e8:	6128      	str	r0, [r5, #16]
 800c6ea:	b920      	cbnz	r0, 800c6f6 <_svfiprintf_r+0x2e>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6f4:	e0d0      	b.n	800c898 <_svfiprintf_r+0x1d0>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	616b      	str	r3, [r5, #20]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fe:	2320      	movs	r3, #32
 800c700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c704:	f8cd 800c 	str.w	r8, [sp, #12]
 800c708:	2330      	movs	r3, #48	; 0x30
 800c70a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c8b0 <_svfiprintf_r+0x1e8>
 800c70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c712:	f04f 0901 	mov.w	r9, #1
 800c716:	4623      	mov	r3, r4
 800c718:	469a      	mov	sl, r3
 800c71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c71e:	b10a      	cbz	r2, 800c724 <_svfiprintf_r+0x5c>
 800c720:	2a25      	cmp	r2, #37	; 0x25
 800c722:	d1f9      	bne.n	800c718 <_svfiprintf_r+0x50>
 800c724:	ebba 0b04 	subs.w	fp, sl, r4
 800c728:	d00b      	beq.n	800c742 <_svfiprintf_r+0x7a>
 800c72a:	465b      	mov	r3, fp
 800c72c:	4622      	mov	r2, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff ff6f 	bl	800c614 <__ssputs_r>
 800c736:	3001      	adds	r0, #1
 800c738:	f000 80a9 	beq.w	800c88e <_svfiprintf_r+0x1c6>
 800c73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73e:	445a      	add	r2, fp
 800c740:	9209      	str	r2, [sp, #36]	; 0x24
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80a1 	beq.w	800c88e <_svfiprintf_r+0x1c6>
 800c74c:	2300      	movs	r3, #0
 800c74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c756:	f10a 0a01 	add.w	sl, sl, #1
 800c75a:	9304      	str	r3, [sp, #16]
 800c75c:	9307      	str	r3, [sp, #28]
 800c75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c762:	931a      	str	r3, [sp, #104]	; 0x68
 800c764:	4654      	mov	r4, sl
 800c766:	2205      	movs	r2, #5
 800c768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76c:	4850      	ldr	r0, [pc, #320]	; (800c8b0 <_svfiprintf_r+0x1e8>)
 800c76e:	f7f3 fd37 	bl	80001e0 <memchr>
 800c772:	9a04      	ldr	r2, [sp, #16]
 800c774:	b9d8      	cbnz	r0, 800c7ae <_svfiprintf_r+0xe6>
 800c776:	06d0      	lsls	r0, r2, #27
 800c778:	bf44      	itt	mi
 800c77a:	2320      	movmi	r3, #32
 800c77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c780:	0711      	lsls	r1, r2, #28
 800c782:	bf44      	itt	mi
 800c784:	232b      	movmi	r3, #43	; 0x2b
 800c786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78a:	f89a 3000 	ldrb.w	r3, [sl]
 800c78e:	2b2a      	cmp	r3, #42	; 0x2a
 800c790:	d015      	beq.n	800c7be <_svfiprintf_r+0xf6>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	4654      	mov	r4, sl
 800c796:	2000      	movs	r0, #0
 800c798:	f04f 0c0a 	mov.w	ip, #10
 800c79c:	4621      	mov	r1, r4
 800c79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a2:	3b30      	subs	r3, #48	; 0x30
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d94d      	bls.n	800c844 <_svfiprintf_r+0x17c>
 800c7a8:	b1b0      	cbz	r0, 800c7d8 <_svfiprintf_r+0x110>
 800c7aa:	9207      	str	r2, [sp, #28]
 800c7ac:	e014      	b.n	800c7d8 <_svfiprintf_r+0x110>
 800c7ae:	eba0 0308 	sub.w	r3, r0, r8
 800c7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	46a2      	mov	sl, r4
 800c7bc:	e7d2      	b.n	800c764 <_svfiprintf_r+0x9c>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	1d19      	adds	r1, r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	9103      	str	r1, [sp, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfbb      	ittet	lt
 800c7ca:	425b      	neglt	r3, r3
 800c7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d0:	9307      	strge	r3, [sp, #28]
 800c7d2:	9307      	strlt	r3, [sp, #28]
 800c7d4:	bfb8      	it	lt
 800c7d6:	9204      	strlt	r2, [sp, #16]
 800c7d8:	7823      	ldrb	r3, [r4, #0]
 800c7da:	2b2e      	cmp	r3, #46	; 0x2e
 800c7dc:	d10c      	bne.n	800c7f8 <_svfiprintf_r+0x130>
 800c7de:	7863      	ldrb	r3, [r4, #1]
 800c7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e2:	d134      	bne.n	800c84e <_svfiprintf_r+0x186>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9203      	str	r2, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfb8      	it	lt
 800c7f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7f4:	3402      	adds	r4, #2
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c8c0 <_svfiprintf_r+0x1f8>
 800c7fc:	7821      	ldrb	r1, [r4, #0]
 800c7fe:	2203      	movs	r2, #3
 800c800:	4650      	mov	r0, sl
 800c802:	f7f3 fced 	bl	80001e0 <memchr>
 800c806:	b138      	cbz	r0, 800c818 <_svfiprintf_r+0x150>
 800c808:	9b04      	ldr	r3, [sp, #16]
 800c80a:	eba0 000a 	sub.w	r0, r0, sl
 800c80e:	2240      	movs	r2, #64	; 0x40
 800c810:	4082      	lsls	r2, r0
 800c812:	4313      	orrs	r3, r2
 800c814:	3401      	adds	r4, #1
 800c816:	9304      	str	r3, [sp, #16]
 800c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81c:	4825      	ldr	r0, [pc, #148]	; (800c8b4 <_svfiprintf_r+0x1ec>)
 800c81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c822:	2206      	movs	r2, #6
 800c824:	f7f3 fcdc 	bl	80001e0 <memchr>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d038      	beq.n	800c89e <_svfiprintf_r+0x1d6>
 800c82c:	4b22      	ldr	r3, [pc, #136]	; (800c8b8 <_svfiprintf_r+0x1f0>)
 800c82e:	bb1b      	cbnz	r3, 800c878 <_svfiprintf_r+0x1b0>
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	3307      	adds	r3, #7
 800c834:	f023 0307 	bic.w	r3, r3, #7
 800c838:	3308      	adds	r3, #8
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83e:	4433      	add	r3, r6
 800c840:	9309      	str	r3, [sp, #36]	; 0x24
 800c842:	e768      	b.n	800c716 <_svfiprintf_r+0x4e>
 800c844:	fb0c 3202 	mla	r2, ip, r2, r3
 800c848:	460c      	mov	r4, r1
 800c84a:	2001      	movs	r0, #1
 800c84c:	e7a6      	b.n	800c79c <_svfiprintf_r+0xd4>
 800c84e:	2300      	movs	r3, #0
 800c850:	3401      	adds	r4, #1
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	4619      	mov	r1, r3
 800c856:	f04f 0c0a 	mov.w	ip, #10
 800c85a:	4620      	mov	r0, r4
 800c85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c860:	3a30      	subs	r2, #48	; 0x30
 800c862:	2a09      	cmp	r2, #9
 800c864:	d903      	bls.n	800c86e <_svfiprintf_r+0x1a6>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0c6      	beq.n	800c7f8 <_svfiprintf_r+0x130>
 800c86a:	9105      	str	r1, [sp, #20]
 800c86c:	e7c4      	b.n	800c7f8 <_svfiprintf_r+0x130>
 800c86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c872:	4604      	mov	r4, r0
 800c874:	2301      	movs	r3, #1
 800c876:	e7f0      	b.n	800c85a <_svfiprintf_r+0x192>
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <_svfiprintf_r+0x1f4>)
 800c880:	a904      	add	r1, sp, #16
 800c882:	4638      	mov	r0, r7
 800c884:	f7fc fbe0 	bl	8009048 <_printf_float>
 800c888:	1c42      	adds	r2, r0, #1
 800c88a:	4606      	mov	r6, r0
 800c88c:	d1d6      	bne.n	800c83c <_svfiprintf_r+0x174>
 800c88e:	89ab      	ldrh	r3, [r5, #12]
 800c890:	065b      	lsls	r3, r3, #25
 800c892:	f53f af2d 	bmi.w	800c6f0 <_svfiprintf_r+0x28>
 800c896:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c898:	b01d      	add	sp, #116	; 0x74
 800c89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89e:	ab03      	add	r3, sp, #12
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <_svfiprintf_r+0x1f4>)
 800c8a6:	a904      	add	r1, sp, #16
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f7fc fe71 	bl	8009590 <_printf_i>
 800c8ae:	e7eb      	b.n	800c888 <_svfiprintf_r+0x1c0>
 800c8b0:	0800f649 	.word	0x0800f649
 800c8b4:	0800f653 	.word	0x0800f653
 800c8b8:	08009049 	.word	0x08009049
 800c8bc:	0800c615 	.word	0x0800c615
 800c8c0:	0800f64f 	.word	0x0800f64f

0800c8c4 <_sungetc_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	1c4b      	adds	r3, r1, #1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	d103      	bne.n	800c8d4 <_sungetc_r+0x10>
 800c8cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	8993      	ldrh	r3, [r2, #12]
 800c8d6:	f023 0320 	bic.w	r3, r3, #32
 800c8da:	8193      	strh	r3, [r2, #12]
 800c8dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8de:	6852      	ldr	r2, [r2, #4]
 800c8e0:	b2cd      	uxtb	r5, r1
 800c8e2:	b18b      	cbz	r3, 800c908 <_sungetc_r+0x44>
 800c8e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	dd08      	ble.n	800c8fc <_sungetc_r+0x38>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	1e5a      	subs	r2, r3, #1
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c8f4:	6863      	ldr	r3, [r4, #4]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	6063      	str	r3, [r4, #4]
 800c8fa:	e7e9      	b.n	800c8d0 <_sungetc_r+0xc>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	f000 fd2c 	bl	800d35a <__submore>
 800c902:	2800      	cmp	r0, #0
 800c904:	d0f1      	beq.n	800c8ea <_sungetc_r+0x26>
 800c906:	e7e1      	b.n	800c8cc <_sungetc_r+0x8>
 800c908:	6921      	ldr	r1, [r4, #16]
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	b151      	cbz	r1, 800c924 <_sungetc_r+0x60>
 800c90e:	4299      	cmp	r1, r3
 800c910:	d208      	bcs.n	800c924 <_sungetc_r+0x60>
 800c912:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c916:	42a9      	cmp	r1, r5
 800c918:	d104      	bne.n	800c924 <_sungetc_r+0x60>
 800c91a:	3b01      	subs	r3, #1
 800c91c:	3201      	adds	r2, #1
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	6062      	str	r2, [r4, #4]
 800c922:	e7d5      	b.n	800c8d0 <_sungetc_r+0xc>
 800c924:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c92c:	6363      	str	r3, [r4, #52]	; 0x34
 800c92e:	2303      	movs	r3, #3
 800c930:	63a3      	str	r3, [r4, #56]	; 0x38
 800c932:	4623      	mov	r3, r4
 800c934:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	2301      	movs	r3, #1
 800c93c:	e7dc      	b.n	800c8f8 <_sungetc_r+0x34>

0800c93e <__ssrefill_r>:
 800c93e:	b510      	push	{r4, lr}
 800c940:	460c      	mov	r4, r1
 800c942:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c944:	b169      	cbz	r1, 800c962 <__ssrefill_r+0x24>
 800c946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c94a:	4299      	cmp	r1, r3
 800c94c:	d001      	beq.n	800c952 <__ssrefill_r+0x14>
 800c94e:	f7fe fa1d 	bl	800ad8c <_free_r>
 800c952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c954:	6063      	str	r3, [r4, #4]
 800c956:	2000      	movs	r0, #0
 800c958:	6360      	str	r0, [r4, #52]	; 0x34
 800c95a:	b113      	cbz	r3, 800c962 <__ssrefill_r+0x24>
 800c95c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	bd10      	pop	{r4, pc}
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	6063      	str	r3, [r4, #4]
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f043 0320 	orr.w	r3, r3, #32
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c976:	e7f3      	b.n	800c960 <__ssrefill_r+0x22>

0800c978 <__ssvfiscanf_r>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	460c      	mov	r4, r1
 800c97e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c982:	2100      	movs	r1, #0
 800c984:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c988:	49a6      	ldr	r1, [pc, #664]	; (800cc24 <__ssvfiscanf_r+0x2ac>)
 800c98a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c98c:	f10d 0804 	add.w	r8, sp, #4
 800c990:	49a5      	ldr	r1, [pc, #660]	; (800cc28 <__ssvfiscanf_r+0x2b0>)
 800c992:	4fa6      	ldr	r7, [pc, #664]	; (800cc2c <__ssvfiscanf_r+0x2b4>)
 800c994:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cc30 <__ssvfiscanf_r+0x2b8>
 800c998:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c99c:	4606      	mov	r6, r0
 800c99e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	7813      	ldrb	r3, [r2, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 815a 	beq.w	800cc5e <__ssvfiscanf_r+0x2e6>
 800c9aa:	5cf9      	ldrb	r1, [r7, r3]
 800c9ac:	f011 0108 	ands.w	r1, r1, #8
 800c9b0:	f102 0501 	add.w	r5, r2, #1
 800c9b4:	d019      	beq.n	800c9ea <__ssvfiscanf_r+0x72>
 800c9b6:	6863      	ldr	r3, [r4, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dd0f      	ble.n	800c9dc <__ssvfiscanf_r+0x64>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	781a      	ldrb	r2, [r3, #0]
 800c9c0:	5cba      	ldrb	r2, [r7, r2]
 800c9c2:	0712      	lsls	r2, r2, #28
 800c9c4:	d401      	bmi.n	800c9ca <__ssvfiscanf_r+0x52>
 800c9c6:	462a      	mov	r2, r5
 800c9c8:	e7eb      	b.n	800c9a2 <__ssvfiscanf_r+0x2a>
 800c9ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c9cc:	3201      	adds	r2, #1
 800c9ce:	9245      	str	r2, [sp, #276]	; 0x114
 800c9d0:	6862      	ldr	r2, [r4, #4]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	3a01      	subs	r2, #1
 800c9d6:	6062      	str	r2, [r4, #4]
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	e7ec      	b.n	800c9b6 <__ssvfiscanf_r+0x3e>
 800c9dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4798      	blx	r3
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0e9      	beq.n	800c9bc <__ssvfiscanf_r+0x44>
 800c9e8:	e7ed      	b.n	800c9c6 <__ssvfiscanf_r+0x4e>
 800c9ea:	2b25      	cmp	r3, #37	; 0x25
 800c9ec:	d012      	beq.n	800ca14 <__ssvfiscanf_r+0x9c>
 800c9ee:	469a      	mov	sl, r3
 800c9f0:	6863      	ldr	r3, [r4, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f340 8091 	ble.w	800cb1a <__ssvfiscanf_r+0x1a2>
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	7813      	ldrb	r3, [r2, #0]
 800c9fc:	4553      	cmp	r3, sl
 800c9fe:	f040 812e 	bne.w	800cc5e <__ssvfiscanf_r+0x2e6>
 800ca02:	6863      	ldr	r3, [r4, #4]
 800ca04:	3b01      	subs	r3, #1
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ca0a:	3201      	adds	r2, #1
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	6022      	str	r2, [r4, #0]
 800ca10:	9345      	str	r3, [sp, #276]	; 0x114
 800ca12:	e7d8      	b.n	800c9c6 <__ssvfiscanf_r+0x4e>
 800ca14:	9141      	str	r1, [sp, #260]	; 0x104
 800ca16:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca18:	7853      	ldrb	r3, [r2, #1]
 800ca1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca1c:	bf02      	ittt	eq
 800ca1e:	2310      	moveq	r3, #16
 800ca20:	1c95      	addeq	r5, r2, #2
 800ca22:	9341      	streq	r3, [sp, #260]	; 0x104
 800ca24:	220a      	movs	r2, #10
 800ca26:	46aa      	mov	sl, r5
 800ca28:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ca2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d91c      	bls.n	800ca6e <__ssvfiscanf_r+0xf6>
 800ca34:	487e      	ldr	r0, [pc, #504]	; (800cc30 <__ssvfiscanf_r+0x2b8>)
 800ca36:	2203      	movs	r2, #3
 800ca38:	f7f3 fbd2 	bl	80001e0 <memchr>
 800ca3c:	b138      	cbz	r0, 800ca4e <__ssvfiscanf_r+0xd6>
 800ca3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca40:	eba0 0009 	sub.w	r0, r0, r9
 800ca44:	2301      	movs	r3, #1
 800ca46:	4083      	lsls	r3, r0
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	9341      	str	r3, [sp, #260]	; 0x104
 800ca4c:	4655      	mov	r5, sl
 800ca4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca52:	2b78      	cmp	r3, #120	; 0x78
 800ca54:	d806      	bhi.n	800ca64 <__ssvfiscanf_r+0xec>
 800ca56:	2b57      	cmp	r3, #87	; 0x57
 800ca58:	d810      	bhi.n	800ca7c <__ssvfiscanf_r+0x104>
 800ca5a:	2b25      	cmp	r3, #37	; 0x25
 800ca5c:	d0c7      	beq.n	800c9ee <__ssvfiscanf_r+0x76>
 800ca5e:	d857      	bhi.n	800cb10 <__ssvfiscanf_r+0x198>
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d065      	beq.n	800cb30 <__ssvfiscanf_r+0x1b8>
 800ca64:	2303      	movs	r3, #3
 800ca66:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca68:	230a      	movs	r3, #10
 800ca6a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca6c:	e076      	b.n	800cb5c <__ssvfiscanf_r+0x1e4>
 800ca6e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca70:	fb02 1103 	mla	r1, r2, r3, r1
 800ca74:	3930      	subs	r1, #48	; 0x30
 800ca76:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca78:	4655      	mov	r5, sl
 800ca7a:	e7d4      	b.n	800ca26 <__ssvfiscanf_r+0xae>
 800ca7c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ca80:	2a20      	cmp	r2, #32
 800ca82:	d8ef      	bhi.n	800ca64 <__ssvfiscanf_r+0xec>
 800ca84:	a101      	add	r1, pc, #4	; (adr r1, 800ca8c <__ssvfiscanf_r+0x114>)
 800ca86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cb3f 	.word	0x0800cb3f
 800ca90:	0800ca65 	.word	0x0800ca65
 800ca94:	0800ca65 	.word	0x0800ca65
 800ca98:	0800cb9d 	.word	0x0800cb9d
 800ca9c:	0800ca65 	.word	0x0800ca65
 800caa0:	0800ca65 	.word	0x0800ca65
 800caa4:	0800ca65 	.word	0x0800ca65
 800caa8:	0800ca65 	.word	0x0800ca65
 800caac:	0800ca65 	.word	0x0800ca65
 800cab0:	0800ca65 	.word	0x0800ca65
 800cab4:	0800ca65 	.word	0x0800ca65
 800cab8:	0800cbb3 	.word	0x0800cbb3
 800cabc:	0800cb99 	.word	0x0800cb99
 800cac0:	0800cb17 	.word	0x0800cb17
 800cac4:	0800cb17 	.word	0x0800cb17
 800cac8:	0800cb17 	.word	0x0800cb17
 800cacc:	0800ca65 	.word	0x0800ca65
 800cad0:	0800cb55 	.word	0x0800cb55
 800cad4:	0800ca65 	.word	0x0800ca65
 800cad8:	0800ca65 	.word	0x0800ca65
 800cadc:	0800ca65 	.word	0x0800ca65
 800cae0:	0800ca65 	.word	0x0800ca65
 800cae4:	0800cbc3 	.word	0x0800cbc3
 800cae8:	0800cb91 	.word	0x0800cb91
 800caec:	0800cb37 	.word	0x0800cb37
 800caf0:	0800ca65 	.word	0x0800ca65
 800caf4:	0800ca65 	.word	0x0800ca65
 800caf8:	0800cbbf 	.word	0x0800cbbf
 800cafc:	0800ca65 	.word	0x0800ca65
 800cb00:	0800cb99 	.word	0x0800cb99
 800cb04:	0800ca65 	.word	0x0800ca65
 800cb08:	0800ca65 	.word	0x0800ca65
 800cb0c:	0800cb3f 	.word	0x0800cb3f
 800cb10:	3b45      	subs	r3, #69	; 0x45
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d8a6      	bhi.n	800ca64 <__ssvfiscanf_r+0xec>
 800cb16:	2305      	movs	r3, #5
 800cb18:	e01f      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cb1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4630      	mov	r0, r6
 800cb20:	4798      	blx	r3
 800cb22:	2800      	cmp	r0, #0
 800cb24:	f43f af68 	beq.w	800c9f8 <__ssvfiscanf_r+0x80>
 800cb28:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	f040 808d 	bne.w	800cc4a <__ssvfiscanf_r+0x2d2>
 800cb30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb34:	e08f      	b.n	800cc56 <__ssvfiscanf_r+0x2de>
 800cb36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb38:	f042 0220 	orr.w	r2, r2, #32
 800cb3c:	9241      	str	r2, [sp, #260]	; 0x104
 800cb3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb44:	9241      	str	r2, [sp, #260]	; 0x104
 800cb46:	2210      	movs	r2, #16
 800cb48:	2b6f      	cmp	r3, #111	; 0x6f
 800cb4a:	9242      	str	r2, [sp, #264]	; 0x108
 800cb4c:	bf34      	ite	cc
 800cb4e:	2303      	movcc	r3, #3
 800cb50:	2304      	movcs	r3, #4
 800cb52:	e002      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cb54:	2300      	movs	r3, #0
 800cb56:	9342      	str	r3, [sp, #264]	; 0x108
 800cb58:	2303      	movs	r3, #3
 800cb5a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb5c:	6863      	ldr	r3, [r4, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	dd3d      	ble.n	800cbde <__ssvfiscanf_r+0x266>
 800cb62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb64:	0659      	lsls	r1, r3, #25
 800cb66:	d404      	bmi.n	800cb72 <__ssvfiscanf_r+0x1fa>
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	781a      	ldrb	r2, [r3, #0]
 800cb6c:	5cba      	ldrb	r2, [r7, r2]
 800cb6e:	0712      	lsls	r2, r2, #28
 800cb70:	d43c      	bmi.n	800cbec <__ssvfiscanf_r+0x274>
 800cb72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	dc4b      	bgt.n	800cc10 <__ssvfiscanf_r+0x298>
 800cb78:	466b      	mov	r3, sp
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	a941      	add	r1, sp, #260	; 0x104
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f000 f9b6 	bl	800cef0 <_scanf_chars>
 800cb84:	2801      	cmp	r0, #1
 800cb86:	d06a      	beq.n	800cc5e <__ssvfiscanf_r+0x2e6>
 800cb88:	2802      	cmp	r0, #2
 800cb8a:	f47f af1c 	bne.w	800c9c6 <__ssvfiscanf_r+0x4e>
 800cb8e:	e7cb      	b.n	800cb28 <__ssvfiscanf_r+0x1b0>
 800cb90:	2308      	movs	r3, #8
 800cb92:	9342      	str	r3, [sp, #264]	; 0x108
 800cb94:	2304      	movs	r3, #4
 800cb96:	e7e0      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cb98:	220a      	movs	r2, #10
 800cb9a:	e7d5      	b.n	800cb48 <__ssvfiscanf_r+0x1d0>
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4640      	mov	r0, r8
 800cba0:	f000 fba2 	bl	800d2e8 <__sccl>
 800cba4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	9341      	str	r3, [sp, #260]	; 0x104
 800cbac:	4605      	mov	r5, r0
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e7d3      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cbb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb8:	9341      	str	r3, [sp, #260]	; 0x104
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e7cd      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e7cb      	b.n	800cb5a <__ssvfiscanf_r+0x1e2>
 800cbc2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cbc4:	06c3      	lsls	r3, r0, #27
 800cbc6:	f53f aefe 	bmi.w	800c9c6 <__ssvfiscanf_r+0x4e>
 800cbca:	9b00      	ldr	r3, [sp, #0]
 800cbcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbce:	1d19      	adds	r1, r3, #4
 800cbd0:	9100      	str	r1, [sp, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	07c0      	lsls	r0, r0, #31
 800cbd6:	bf4c      	ite	mi
 800cbd8:	801a      	strhmi	r2, [r3, #0]
 800cbda:	601a      	strpl	r2, [r3, #0]
 800cbdc:	e6f3      	b.n	800c9c6 <__ssvfiscanf_r+0x4e>
 800cbde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4798      	blx	r3
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d0bb      	beq.n	800cb62 <__ssvfiscanf_r+0x1ea>
 800cbea:	e79d      	b.n	800cb28 <__ssvfiscanf_r+0x1b0>
 800cbec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbee:	3201      	adds	r2, #1
 800cbf0:	9245      	str	r2, [sp, #276]	; 0x114
 800cbf2:	6862      	ldr	r2, [r4, #4]
 800cbf4:	3a01      	subs	r2, #1
 800cbf6:	2a00      	cmp	r2, #0
 800cbf8:	6062      	str	r2, [r4, #4]
 800cbfa:	dd02      	ble.n	800cc02 <__ssvfiscanf_r+0x28a>
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	6023      	str	r3, [r4, #0]
 800cc00:	e7b2      	b.n	800cb68 <__ssvfiscanf_r+0x1f0>
 800cc02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc04:	4621      	mov	r1, r4
 800cc06:	4630      	mov	r0, r6
 800cc08:	4798      	blx	r3
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d0ac      	beq.n	800cb68 <__ssvfiscanf_r+0x1f0>
 800cc0e:	e78b      	b.n	800cb28 <__ssvfiscanf_r+0x1b0>
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	dc0f      	bgt.n	800cc34 <__ssvfiscanf_r+0x2bc>
 800cc14:	466b      	mov	r3, sp
 800cc16:	4622      	mov	r2, r4
 800cc18:	a941      	add	r1, sp, #260	; 0x104
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f000 f9c2 	bl	800cfa4 <_scanf_i>
 800cc20:	e7b0      	b.n	800cb84 <__ssvfiscanf_r+0x20c>
 800cc22:	bf00      	nop
 800cc24:	0800c8c5 	.word	0x0800c8c5
 800cc28:	0800c93f 	.word	0x0800c93f
 800cc2c:	0800f549 	.word	0x0800f549
 800cc30:	0800f64f 	.word	0x0800f64f
 800cc34:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <__ssvfiscanf_r+0x2ec>)
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f43f aec5 	beq.w	800c9c6 <__ssvfiscanf_r+0x4e>
 800cc3c:	466b      	mov	r3, sp
 800cc3e:	4622      	mov	r2, r4
 800cc40:	a941      	add	r1, sp, #260	; 0x104
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7fc fdc6 	bl	80097d4 <_scanf_float>
 800cc48:	e79c      	b.n	800cb84 <__ssvfiscanf_r+0x20c>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cc50:	bf18      	it	ne
 800cc52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800cc56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc60:	e7f9      	b.n	800cc56 <__ssvfiscanf_r+0x2de>
 800cc62:	bf00      	nop
 800cc64:	080097d5 	.word	0x080097d5

0800cc68 <__sfputc_r>:
 800cc68:	6893      	ldr	r3, [r2, #8]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	b410      	push	{r4}
 800cc70:	6093      	str	r3, [r2, #8]
 800cc72:	da08      	bge.n	800cc86 <__sfputc_r+0x1e>
 800cc74:	6994      	ldr	r4, [r2, #24]
 800cc76:	42a3      	cmp	r3, r4
 800cc78:	db01      	blt.n	800cc7e <__sfputc_r+0x16>
 800cc7a:	290a      	cmp	r1, #10
 800cc7c:	d103      	bne.n	800cc86 <__sfputc_r+0x1e>
 800cc7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc82:	f000 bba4 	b.w	800d3ce <__swbuf_r>
 800cc86:	6813      	ldr	r3, [r2, #0]
 800cc88:	1c58      	adds	r0, r3, #1
 800cc8a:	6010      	str	r0, [r2, #0]
 800cc8c:	7019      	strb	r1, [r3, #0]
 800cc8e:	4608      	mov	r0, r1
 800cc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <__sfputs_r>:
 800cc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc98:	4606      	mov	r6, r0
 800cc9a:	460f      	mov	r7, r1
 800cc9c:	4614      	mov	r4, r2
 800cc9e:	18d5      	adds	r5, r2, r3
 800cca0:	42ac      	cmp	r4, r5
 800cca2:	d101      	bne.n	800cca8 <__sfputs_r+0x12>
 800cca4:	2000      	movs	r0, #0
 800cca6:	e007      	b.n	800ccb8 <__sfputs_r+0x22>
 800cca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccac:	463a      	mov	r2, r7
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f7ff ffda 	bl	800cc68 <__sfputc_r>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d1f3      	bne.n	800cca0 <__sfputs_r+0xa>
 800ccb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccbc <_vfiprintf_r>:
 800ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	b09d      	sub	sp, #116	; 0x74
 800ccc4:	4614      	mov	r4, r2
 800ccc6:	4698      	mov	r8, r3
 800ccc8:	4606      	mov	r6, r0
 800ccca:	b118      	cbz	r0, 800ccd4 <_vfiprintf_r+0x18>
 800cccc:	6a03      	ldr	r3, [r0, #32]
 800ccce:	b90b      	cbnz	r3, 800ccd4 <_vfiprintf_r+0x18>
 800ccd0:	f7fd f81c 	bl	8009d0c <__sinit>
 800ccd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccd6:	07d9      	lsls	r1, r3, #31
 800ccd8:	d405      	bmi.n	800cce6 <_vfiprintf_r+0x2a>
 800ccda:	89ab      	ldrh	r3, [r5, #12]
 800ccdc:	059a      	lsls	r2, r3, #22
 800ccde:	d402      	bmi.n	800cce6 <_vfiprintf_r+0x2a>
 800cce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cce2:	f7fd f9c0 	bl	800a066 <__retarget_lock_acquire_recursive>
 800cce6:	89ab      	ldrh	r3, [r5, #12]
 800cce8:	071b      	lsls	r3, r3, #28
 800ccea:	d501      	bpl.n	800ccf0 <_vfiprintf_r+0x34>
 800ccec:	692b      	ldr	r3, [r5, #16]
 800ccee:	b99b      	cbnz	r3, 800cd18 <_vfiprintf_r+0x5c>
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f000 fba8 	bl	800d448 <__swsetup_r>
 800ccf8:	b170      	cbz	r0, 800cd18 <_vfiprintf_r+0x5c>
 800ccfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccfc:	07dc      	lsls	r4, r3, #31
 800ccfe:	d504      	bpl.n	800cd0a <_vfiprintf_r+0x4e>
 800cd00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd04:	b01d      	add	sp, #116	; 0x74
 800cd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd0a:	89ab      	ldrh	r3, [r5, #12]
 800cd0c:	0598      	lsls	r0, r3, #22
 800cd0e:	d4f7      	bmi.n	800cd00 <_vfiprintf_r+0x44>
 800cd10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd12:	f7fd f9a9 	bl	800a068 <__retarget_lock_release_recursive>
 800cd16:	e7f3      	b.n	800cd00 <_vfiprintf_r+0x44>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1c:	2320      	movs	r3, #32
 800cd1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd22:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd26:	2330      	movs	r3, #48	; 0x30
 800cd28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cedc <_vfiprintf_r+0x220>
 800cd2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd30:	f04f 0901 	mov.w	r9, #1
 800cd34:	4623      	mov	r3, r4
 800cd36:	469a      	mov	sl, r3
 800cd38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3c:	b10a      	cbz	r2, 800cd42 <_vfiprintf_r+0x86>
 800cd3e:	2a25      	cmp	r2, #37	; 0x25
 800cd40:	d1f9      	bne.n	800cd36 <_vfiprintf_r+0x7a>
 800cd42:	ebba 0b04 	subs.w	fp, sl, r4
 800cd46:	d00b      	beq.n	800cd60 <_vfiprintf_r+0xa4>
 800cd48:	465b      	mov	r3, fp
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff ffa1 	bl	800cc96 <__sfputs_r>
 800cd54:	3001      	adds	r0, #1
 800cd56:	f000 80a9 	beq.w	800ceac <_vfiprintf_r+0x1f0>
 800cd5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd5c:	445a      	add	r2, fp
 800cd5e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd60:	f89a 3000 	ldrb.w	r3, [sl]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 80a1 	beq.w	800ceac <_vfiprintf_r+0x1f0>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd74:	f10a 0a01 	add.w	sl, sl, #1
 800cd78:	9304      	str	r3, [sp, #16]
 800cd7a:	9307      	str	r3, [sp, #28]
 800cd7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd80:	931a      	str	r3, [sp, #104]	; 0x68
 800cd82:	4654      	mov	r4, sl
 800cd84:	2205      	movs	r2, #5
 800cd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8a:	4854      	ldr	r0, [pc, #336]	; (800cedc <_vfiprintf_r+0x220>)
 800cd8c:	f7f3 fa28 	bl	80001e0 <memchr>
 800cd90:	9a04      	ldr	r2, [sp, #16]
 800cd92:	b9d8      	cbnz	r0, 800cdcc <_vfiprintf_r+0x110>
 800cd94:	06d1      	lsls	r1, r2, #27
 800cd96:	bf44      	itt	mi
 800cd98:	2320      	movmi	r3, #32
 800cd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd9e:	0713      	lsls	r3, r2, #28
 800cda0:	bf44      	itt	mi
 800cda2:	232b      	movmi	r3, #43	; 0x2b
 800cda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdac:	2b2a      	cmp	r3, #42	; 0x2a
 800cdae:	d015      	beq.n	800cddc <_vfiprintf_r+0x120>
 800cdb0:	9a07      	ldr	r2, [sp, #28]
 800cdb2:	4654      	mov	r4, sl
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	f04f 0c0a 	mov.w	ip, #10
 800cdba:	4621      	mov	r1, r4
 800cdbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc0:	3b30      	subs	r3, #48	; 0x30
 800cdc2:	2b09      	cmp	r3, #9
 800cdc4:	d94d      	bls.n	800ce62 <_vfiprintf_r+0x1a6>
 800cdc6:	b1b0      	cbz	r0, 800cdf6 <_vfiprintf_r+0x13a>
 800cdc8:	9207      	str	r2, [sp, #28]
 800cdca:	e014      	b.n	800cdf6 <_vfiprintf_r+0x13a>
 800cdcc:	eba0 0308 	sub.w	r3, r0, r8
 800cdd0:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	46a2      	mov	sl, r4
 800cdda:	e7d2      	b.n	800cd82 <_vfiprintf_r+0xc6>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	1d19      	adds	r1, r3, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9103      	str	r1, [sp, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bfbb      	ittet	lt
 800cde8:	425b      	neglt	r3, r3
 800cdea:	f042 0202 	orrlt.w	r2, r2, #2
 800cdee:	9307      	strge	r3, [sp, #28]
 800cdf0:	9307      	strlt	r3, [sp, #28]
 800cdf2:	bfb8      	it	lt
 800cdf4:	9204      	strlt	r2, [sp, #16]
 800cdf6:	7823      	ldrb	r3, [r4, #0]
 800cdf8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdfa:	d10c      	bne.n	800ce16 <_vfiprintf_r+0x15a>
 800cdfc:	7863      	ldrb	r3, [r4, #1]
 800cdfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ce00:	d134      	bne.n	800ce6c <_vfiprintf_r+0x1b0>
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	1d1a      	adds	r2, r3, #4
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	9203      	str	r2, [sp, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	bfb8      	it	lt
 800ce0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce12:	3402      	adds	r4, #2
 800ce14:	9305      	str	r3, [sp, #20]
 800ce16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ceec <_vfiprintf_r+0x230>
 800ce1a:	7821      	ldrb	r1, [r4, #0]
 800ce1c:	2203      	movs	r2, #3
 800ce1e:	4650      	mov	r0, sl
 800ce20:	f7f3 f9de 	bl	80001e0 <memchr>
 800ce24:	b138      	cbz	r0, 800ce36 <_vfiprintf_r+0x17a>
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	eba0 000a 	sub.w	r0, r0, sl
 800ce2c:	2240      	movs	r2, #64	; 0x40
 800ce2e:	4082      	lsls	r2, r0
 800ce30:	4313      	orrs	r3, r2
 800ce32:	3401      	adds	r4, #1
 800ce34:	9304      	str	r3, [sp, #16]
 800ce36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3a:	4829      	ldr	r0, [pc, #164]	; (800cee0 <_vfiprintf_r+0x224>)
 800ce3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce40:	2206      	movs	r2, #6
 800ce42:	f7f3 f9cd 	bl	80001e0 <memchr>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d03f      	beq.n	800ceca <_vfiprintf_r+0x20e>
 800ce4a:	4b26      	ldr	r3, [pc, #152]	; (800cee4 <_vfiprintf_r+0x228>)
 800ce4c:	bb1b      	cbnz	r3, 800ce96 <_vfiprintf_r+0x1da>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	3307      	adds	r3, #7
 800ce52:	f023 0307 	bic.w	r3, r3, #7
 800ce56:	3308      	adds	r3, #8
 800ce58:	9303      	str	r3, [sp, #12]
 800ce5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5c:	443b      	add	r3, r7
 800ce5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce60:	e768      	b.n	800cd34 <_vfiprintf_r+0x78>
 800ce62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce66:	460c      	mov	r4, r1
 800ce68:	2001      	movs	r0, #1
 800ce6a:	e7a6      	b.n	800cdba <_vfiprintf_r+0xfe>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	3401      	adds	r4, #1
 800ce70:	9305      	str	r3, [sp, #20]
 800ce72:	4619      	mov	r1, r3
 800ce74:	f04f 0c0a 	mov.w	ip, #10
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7e:	3a30      	subs	r2, #48	; 0x30
 800ce80:	2a09      	cmp	r2, #9
 800ce82:	d903      	bls.n	800ce8c <_vfiprintf_r+0x1d0>
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0c6      	beq.n	800ce16 <_vfiprintf_r+0x15a>
 800ce88:	9105      	str	r1, [sp, #20]
 800ce8a:	e7c4      	b.n	800ce16 <_vfiprintf_r+0x15a>
 800ce8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce90:	4604      	mov	r4, r0
 800ce92:	2301      	movs	r3, #1
 800ce94:	e7f0      	b.n	800ce78 <_vfiprintf_r+0x1bc>
 800ce96:	ab03      	add	r3, sp, #12
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <_vfiprintf_r+0x22c>)
 800ce9e:	a904      	add	r1, sp, #16
 800cea0:	4630      	mov	r0, r6
 800cea2:	f7fc f8d1 	bl	8009048 <_printf_float>
 800cea6:	4607      	mov	r7, r0
 800cea8:	1c78      	adds	r0, r7, #1
 800ceaa:	d1d6      	bne.n	800ce5a <_vfiprintf_r+0x19e>
 800ceac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceae:	07d9      	lsls	r1, r3, #31
 800ceb0:	d405      	bmi.n	800cebe <_vfiprintf_r+0x202>
 800ceb2:	89ab      	ldrh	r3, [r5, #12]
 800ceb4:	059a      	lsls	r2, r3, #22
 800ceb6:	d402      	bmi.n	800cebe <_vfiprintf_r+0x202>
 800ceb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceba:	f7fd f8d5 	bl	800a068 <__retarget_lock_release_recursive>
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	065b      	lsls	r3, r3, #25
 800cec2:	f53f af1d 	bmi.w	800cd00 <_vfiprintf_r+0x44>
 800cec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cec8:	e71c      	b.n	800cd04 <_vfiprintf_r+0x48>
 800ceca:	ab03      	add	r3, sp, #12
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	462a      	mov	r2, r5
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <_vfiprintf_r+0x22c>)
 800ced2:	a904      	add	r1, sp, #16
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7fc fb5b 	bl	8009590 <_printf_i>
 800ceda:	e7e4      	b.n	800cea6 <_vfiprintf_r+0x1ea>
 800cedc:	0800f649 	.word	0x0800f649
 800cee0:	0800f653 	.word	0x0800f653
 800cee4:	08009049 	.word	0x08009049
 800cee8:	0800cc97 	.word	0x0800cc97
 800ceec:	0800f64f 	.word	0x0800f64f

0800cef0 <_scanf_chars>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	4615      	mov	r5, r2
 800cef6:	688a      	ldr	r2, [r1, #8]
 800cef8:	4680      	mov	r8, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	b932      	cbnz	r2, 800cf0c <_scanf_chars+0x1c>
 800cefe:	698a      	ldr	r2, [r1, #24]
 800cf00:	2a00      	cmp	r2, #0
 800cf02:	bf0c      	ite	eq
 800cf04:	2201      	moveq	r2, #1
 800cf06:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800cf0a:	608a      	str	r2, [r1, #8]
 800cf0c:	6822      	ldr	r2, [r4, #0]
 800cf0e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cfa0 <_scanf_chars+0xb0>
 800cf12:	06d1      	lsls	r1, r2, #27
 800cf14:	bf5f      	itttt	pl
 800cf16:	681a      	ldrpl	r2, [r3, #0]
 800cf18:	1d11      	addpl	r1, r2, #4
 800cf1a:	6019      	strpl	r1, [r3, #0]
 800cf1c:	6816      	ldrpl	r6, [r2, #0]
 800cf1e:	2700      	movs	r7, #0
 800cf20:	69a0      	ldr	r0, [r4, #24]
 800cf22:	b188      	cbz	r0, 800cf48 <_scanf_chars+0x58>
 800cf24:	2801      	cmp	r0, #1
 800cf26:	d107      	bne.n	800cf38 <_scanf_chars+0x48>
 800cf28:	682a      	ldr	r2, [r5, #0]
 800cf2a:	7811      	ldrb	r1, [r2, #0]
 800cf2c:	6962      	ldr	r2, [r4, #20]
 800cf2e:	5c52      	ldrb	r2, [r2, r1]
 800cf30:	b952      	cbnz	r2, 800cf48 <_scanf_chars+0x58>
 800cf32:	2f00      	cmp	r7, #0
 800cf34:	d031      	beq.n	800cf9a <_scanf_chars+0xaa>
 800cf36:	e022      	b.n	800cf7e <_scanf_chars+0x8e>
 800cf38:	2802      	cmp	r0, #2
 800cf3a:	d120      	bne.n	800cf7e <_scanf_chars+0x8e>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cf44:	071b      	lsls	r3, r3, #28
 800cf46:	d41a      	bmi.n	800cf7e <_scanf_chars+0x8e>
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	06da      	lsls	r2, r3, #27
 800cf4c:	bf5e      	ittt	pl
 800cf4e:	682b      	ldrpl	r3, [r5, #0]
 800cf50:	781b      	ldrbpl	r3, [r3, #0]
 800cf52:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf56:	682a      	ldr	r2, [r5, #0]
 800cf58:	686b      	ldr	r3, [r5, #4]
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	602a      	str	r2, [r5, #0]
 800cf5e:	68a2      	ldr	r2, [r4, #8]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	3a01      	subs	r2, #1
 800cf64:	606b      	str	r3, [r5, #4]
 800cf66:	3701      	adds	r7, #1
 800cf68:	60a2      	str	r2, [r4, #8]
 800cf6a:	b142      	cbz	r2, 800cf7e <_scanf_chars+0x8e>
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dcd7      	bgt.n	800cf20 <_scanf_chars+0x30>
 800cf70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf74:	4629      	mov	r1, r5
 800cf76:	4640      	mov	r0, r8
 800cf78:	4798      	blx	r3
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d0d0      	beq.n	800cf20 <_scanf_chars+0x30>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	f013 0310 	ands.w	r3, r3, #16
 800cf84:	d105      	bne.n	800cf92 <_scanf_chars+0xa2>
 800cf86:	68e2      	ldr	r2, [r4, #12]
 800cf88:	3201      	adds	r2, #1
 800cf8a:	60e2      	str	r2, [r4, #12]
 800cf8c:	69a2      	ldr	r2, [r4, #24]
 800cf8e:	b102      	cbz	r2, 800cf92 <_scanf_chars+0xa2>
 800cf90:	7033      	strb	r3, [r6, #0]
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	443b      	add	r3, r7
 800cf96:	6123      	str	r3, [r4, #16]
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0800f549 	.word	0x0800f549

0800cfa4 <_scanf_i>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	4698      	mov	r8, r3
 800cfaa:	4b74      	ldr	r3, [pc, #464]	; (800d17c <_scanf_i+0x1d8>)
 800cfac:	460c      	mov	r4, r1
 800cfae:	4682      	mov	sl, r0
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	ab03      	add	r3, sp, #12
 800cfba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cfbe:	4b70      	ldr	r3, [pc, #448]	; (800d180 <_scanf_i+0x1dc>)
 800cfc0:	69a1      	ldr	r1, [r4, #24]
 800cfc2:	4a70      	ldr	r2, [pc, #448]	; (800d184 <_scanf_i+0x1e0>)
 800cfc4:	2903      	cmp	r1, #3
 800cfc6:	bf18      	it	ne
 800cfc8:	461a      	movne	r2, r3
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	9201      	str	r2, [sp, #4]
 800cfce:	1e5a      	subs	r2, r3, #1
 800cfd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfd4:	bf88      	it	hi
 800cfd6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfda:	4627      	mov	r7, r4
 800cfdc:	bf82      	ittt	hi
 800cfde:	eb03 0905 	addhi.w	r9, r3, r5
 800cfe2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cfe6:	60a3      	strhi	r3, [r4, #8]
 800cfe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cfec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cff0:	bf98      	it	ls
 800cff2:	f04f 0900 	movls.w	r9, #0
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	463d      	mov	r5, r7
 800cffa:	f04f 0b00 	mov.w	fp, #0
 800cffe:	6831      	ldr	r1, [r6, #0]
 800d000:	ab03      	add	r3, sp, #12
 800d002:	7809      	ldrb	r1, [r1, #0]
 800d004:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d008:	2202      	movs	r2, #2
 800d00a:	f7f3 f8e9 	bl	80001e0 <memchr>
 800d00e:	b328      	cbz	r0, 800d05c <_scanf_i+0xb8>
 800d010:	f1bb 0f01 	cmp.w	fp, #1
 800d014:	d159      	bne.n	800d0ca <_scanf_i+0x126>
 800d016:	6862      	ldr	r2, [r4, #4]
 800d018:	b92a      	cbnz	r2, 800d026 <_scanf_i+0x82>
 800d01a:	6822      	ldr	r2, [r4, #0]
 800d01c:	2308      	movs	r3, #8
 800d01e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d022:	6063      	str	r3, [r4, #4]
 800d024:	6022      	str	r2, [r4, #0]
 800d026:	6822      	ldr	r2, [r4, #0]
 800d028:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d02c:	6022      	str	r2, [r4, #0]
 800d02e:	68a2      	ldr	r2, [r4, #8]
 800d030:	1e51      	subs	r1, r2, #1
 800d032:	60a1      	str	r1, [r4, #8]
 800d034:	b192      	cbz	r2, 800d05c <_scanf_i+0xb8>
 800d036:	6832      	ldr	r2, [r6, #0]
 800d038:	1c51      	adds	r1, r2, #1
 800d03a:	6031      	str	r1, [r6, #0]
 800d03c:	7812      	ldrb	r2, [r2, #0]
 800d03e:	f805 2b01 	strb.w	r2, [r5], #1
 800d042:	6872      	ldr	r2, [r6, #4]
 800d044:	3a01      	subs	r2, #1
 800d046:	2a00      	cmp	r2, #0
 800d048:	6072      	str	r2, [r6, #4]
 800d04a:	dc07      	bgt.n	800d05c <_scanf_i+0xb8>
 800d04c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d050:	4631      	mov	r1, r6
 800d052:	4650      	mov	r0, sl
 800d054:	4790      	blx	r2
 800d056:	2800      	cmp	r0, #0
 800d058:	f040 8085 	bne.w	800d166 <_scanf_i+0x1c2>
 800d05c:	f10b 0b01 	add.w	fp, fp, #1
 800d060:	f1bb 0f03 	cmp.w	fp, #3
 800d064:	d1cb      	bne.n	800cffe <_scanf_i+0x5a>
 800d066:	6863      	ldr	r3, [r4, #4]
 800d068:	b90b      	cbnz	r3, 800d06e <_scanf_i+0xca>
 800d06a:	230a      	movs	r3, #10
 800d06c:	6063      	str	r3, [r4, #4]
 800d06e:	6863      	ldr	r3, [r4, #4]
 800d070:	4945      	ldr	r1, [pc, #276]	; (800d188 <_scanf_i+0x1e4>)
 800d072:	6960      	ldr	r0, [r4, #20]
 800d074:	1ac9      	subs	r1, r1, r3
 800d076:	f000 f937 	bl	800d2e8 <__sccl>
 800d07a:	f04f 0b00 	mov.w	fp, #0
 800d07e:	68a3      	ldr	r3, [r4, #8]
 800d080:	6822      	ldr	r2, [r4, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d03d      	beq.n	800d102 <_scanf_i+0x15e>
 800d086:	6831      	ldr	r1, [r6, #0]
 800d088:	6960      	ldr	r0, [r4, #20]
 800d08a:	f891 c000 	ldrb.w	ip, [r1]
 800d08e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d092:	2800      	cmp	r0, #0
 800d094:	d035      	beq.n	800d102 <_scanf_i+0x15e>
 800d096:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d09a:	d124      	bne.n	800d0e6 <_scanf_i+0x142>
 800d09c:	0510      	lsls	r0, r2, #20
 800d09e:	d522      	bpl.n	800d0e6 <_scanf_i+0x142>
 800d0a0:	f10b 0b01 	add.w	fp, fp, #1
 800d0a4:	f1b9 0f00 	cmp.w	r9, #0
 800d0a8:	d003      	beq.n	800d0b2 <_scanf_i+0x10e>
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d0b0:	60a3      	str	r3, [r4, #8]
 800d0b2:	6873      	ldr	r3, [r6, #4]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	6073      	str	r3, [r6, #4]
 800d0ba:	dd1b      	ble.n	800d0f4 <_scanf_i+0x150>
 800d0bc:	6833      	ldr	r3, [r6, #0]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	6033      	str	r3, [r6, #0]
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	60a3      	str	r3, [r4, #8]
 800d0c8:	e7d9      	b.n	800d07e <_scanf_i+0xda>
 800d0ca:	f1bb 0f02 	cmp.w	fp, #2
 800d0ce:	d1ae      	bne.n	800d02e <_scanf_i+0x8a>
 800d0d0:	6822      	ldr	r2, [r4, #0]
 800d0d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d0d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d0da:	d1bf      	bne.n	800d05c <_scanf_i+0xb8>
 800d0dc:	2310      	movs	r3, #16
 800d0de:	6063      	str	r3, [r4, #4]
 800d0e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0e4:	e7a2      	b.n	800d02c <_scanf_i+0x88>
 800d0e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d0ea:	6022      	str	r2, [r4, #0]
 800d0ec:	780b      	ldrb	r3, [r1, #0]
 800d0ee:	f805 3b01 	strb.w	r3, [r5], #1
 800d0f2:	e7de      	b.n	800d0b2 <_scanf_i+0x10e>
 800d0f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	4798      	blx	r3
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d0df      	beq.n	800d0c2 <_scanf_i+0x11e>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	05d9      	lsls	r1, r3, #23
 800d106:	d50d      	bpl.n	800d124 <_scanf_i+0x180>
 800d108:	42bd      	cmp	r5, r7
 800d10a:	d909      	bls.n	800d120 <_scanf_i+0x17c>
 800d10c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d114:	4632      	mov	r2, r6
 800d116:	4650      	mov	r0, sl
 800d118:	4798      	blx	r3
 800d11a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d11e:	464d      	mov	r5, r9
 800d120:	42bd      	cmp	r5, r7
 800d122:	d028      	beq.n	800d176 <_scanf_i+0x1d2>
 800d124:	6822      	ldr	r2, [r4, #0]
 800d126:	f012 0210 	ands.w	r2, r2, #16
 800d12a:	d113      	bne.n	800d154 <_scanf_i+0x1b0>
 800d12c:	702a      	strb	r2, [r5, #0]
 800d12e:	6863      	ldr	r3, [r4, #4]
 800d130:	9e01      	ldr	r6, [sp, #4]
 800d132:	4639      	mov	r1, r7
 800d134:	4650      	mov	r0, sl
 800d136:	47b0      	blx	r6
 800d138:	f8d8 3000 	ldr.w	r3, [r8]
 800d13c:	6821      	ldr	r1, [r4, #0]
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	f8c8 2000 	str.w	r2, [r8]
 800d144:	f011 0f20 	tst.w	r1, #32
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	d00f      	beq.n	800d16c <_scanf_i+0x1c8>
 800d14c:	6018      	str	r0, [r3, #0]
 800d14e:	68e3      	ldr	r3, [r4, #12]
 800d150:	3301      	adds	r3, #1
 800d152:	60e3      	str	r3, [r4, #12]
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	1bed      	subs	r5, r5, r7
 800d158:	445d      	add	r5, fp
 800d15a:	442b      	add	r3, r5
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	2000      	movs	r0, #0
 800d160:	b007      	add	sp, #28
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	f04f 0b00 	mov.w	fp, #0
 800d16a:	e7ca      	b.n	800d102 <_scanf_i+0x15e>
 800d16c:	07ca      	lsls	r2, r1, #31
 800d16e:	bf4c      	ite	mi
 800d170:	8018      	strhmi	r0, [r3, #0]
 800d172:	6018      	strpl	r0, [r3, #0]
 800d174:	e7eb      	b.n	800d14e <_scanf_i+0x1aa>
 800d176:	2001      	movs	r0, #1
 800d178:	e7f2      	b.n	800d160 <_scanf_i+0x1bc>
 800d17a:	bf00      	nop
 800d17c:	0800f26c 	.word	0x0800f26c
 800d180:	0800ddfd 	.word	0x0800ddfd
 800d184:	0800c611 	.word	0x0800c611
 800d188:	0800f66a 	.word	0x0800f66a

0800d18c <__sflush_r>:
 800d18c:	898a      	ldrh	r2, [r1, #12]
 800d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	0710      	lsls	r0, r2, #28
 800d196:	460c      	mov	r4, r1
 800d198:	d458      	bmi.n	800d24c <__sflush_r+0xc0>
 800d19a:	684b      	ldr	r3, [r1, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc05      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dc02      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d0f9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1b8:	682f      	ldr	r7, [r5, #0]
 800d1ba:	6a21      	ldr	r1, [r4, #32]
 800d1bc:	602b      	str	r3, [r5, #0]
 800d1be:	d032      	beq.n	800d226 <__sflush_r+0x9a>
 800d1c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	075a      	lsls	r2, r3, #29
 800d1c6:	d505      	bpl.n	800d1d4 <__sflush_r+0x48>
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	1ac0      	subs	r0, r0, r3
 800d1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ce:	b10b      	cbz	r3, 800d1d4 <__sflush_r+0x48>
 800d1d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1d2:	1ac0      	subs	r0, r0, r3
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1da:	6a21      	ldr	r1, [r4, #32]
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b0      	blx	r6
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	d106      	bne.n	800d1f4 <__sflush_r+0x68>
 800d1e6:	6829      	ldr	r1, [r5, #0]
 800d1e8:	291d      	cmp	r1, #29
 800d1ea:	d82b      	bhi.n	800d244 <__sflush_r+0xb8>
 800d1ec:	4a29      	ldr	r2, [pc, #164]	; (800d294 <__sflush_r+0x108>)
 800d1ee:	410a      	asrs	r2, r1
 800d1f0:	07d6      	lsls	r6, r2, #31
 800d1f2:	d427      	bmi.n	800d244 <__sflush_r+0xb8>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	6062      	str	r2, [r4, #4]
 800d1f8:	04d9      	lsls	r1, r3, #19
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	6022      	str	r2, [r4, #0]
 800d1fe:	d504      	bpl.n	800d20a <__sflush_r+0x7e>
 800d200:	1c42      	adds	r2, r0, #1
 800d202:	d101      	bne.n	800d208 <__sflush_r+0x7c>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b903      	cbnz	r3, 800d20a <__sflush_r+0x7e>
 800d208:	6560      	str	r0, [r4, #84]	; 0x54
 800d20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20c:	602f      	str	r7, [r5, #0]
 800d20e:	2900      	cmp	r1, #0
 800d210:	d0c9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d002      	beq.n	800d220 <__sflush_r+0x94>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7fd fdb6 	bl	800ad8c <_free_r>
 800d220:	2000      	movs	r0, #0
 800d222:	6360      	str	r0, [r4, #52]	; 0x34
 800d224:	e7c0      	b.n	800d1a8 <__sflush_r+0x1c>
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	1c41      	adds	r1, r0, #1
 800d22e:	d1c8      	bne.n	800d1c2 <__sflush_r+0x36>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c5      	beq.n	800d1c2 <__sflush_r+0x36>
 800d236:	2b1d      	cmp	r3, #29
 800d238:	d001      	beq.n	800d23e <__sflush_r+0xb2>
 800d23a:	2b16      	cmp	r3, #22
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0xb6>
 800d23e:	602f      	str	r7, [r5, #0]
 800d240:	e7b1      	b.n	800d1a6 <__sflush_r+0x1a>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	e7ad      	b.n	800d1a8 <__sflush_r+0x1c>
 800d24c:	690f      	ldr	r7, [r1, #16]
 800d24e:	2f00      	cmp	r7, #0
 800d250:	d0a9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d252:	0793      	lsls	r3, r2, #30
 800d254:	680e      	ldr	r6, [r1, #0]
 800d256:	bf08      	it	eq
 800d258:	694b      	ldreq	r3, [r1, #20]
 800d25a:	600f      	str	r7, [r1, #0]
 800d25c:	bf18      	it	ne
 800d25e:	2300      	movne	r3, #0
 800d260:	eba6 0807 	sub.w	r8, r6, r7
 800d264:	608b      	str	r3, [r1, #8]
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	dd9c      	ble.n	800d1a6 <__sflush_r+0x1a>
 800d26c:	6a21      	ldr	r1, [r4, #32]
 800d26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d270:	4643      	mov	r3, r8
 800d272:	463a      	mov	r2, r7
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	2800      	cmp	r0, #0
 800d27a:	dc06      	bgt.n	800d28a <__sflush_r+0xfe>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d288:	e78e      	b.n	800d1a8 <__sflush_r+0x1c>
 800d28a:	4407      	add	r7, r0
 800d28c:	eba8 0800 	sub.w	r8, r8, r0
 800d290:	e7e9      	b.n	800d266 <__sflush_r+0xda>
 800d292:	bf00      	nop
 800d294:	dfbffffe 	.word	0xdfbffffe

0800d298 <_fflush_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	4605      	mov	r5, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	b913      	cbnz	r3, 800d2a8 <_fflush_r+0x10>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	b118      	cbz	r0, 800d2b2 <_fflush_r+0x1a>
 800d2aa:	6a03      	ldr	r3, [r0, #32]
 800d2ac:	b90b      	cbnz	r3, 800d2b2 <_fflush_r+0x1a>
 800d2ae:	f7fc fd2d 	bl	8009d0c <__sinit>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f3      	beq.n	800d2a2 <_fflush_r+0xa>
 800d2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2bc:	07d0      	lsls	r0, r2, #31
 800d2be:	d404      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c0:	0599      	lsls	r1, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c6:	f7fc fece 	bl	800a066 <__retarget_lock_acquire_recursive>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	f7ff ff5d 	bl	800d18c <__sflush_r>
 800d2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2d4:	07da      	lsls	r2, r3, #31
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	d4e4      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	059b      	lsls	r3, r3, #22
 800d2de:	d4e1      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2e2:	f7fc fec1 	bl	800a068 <__retarget_lock_release_recursive>
 800d2e6:	e7dd      	b.n	800d2a4 <_fflush_r+0xc>

0800d2e8 <__sccl>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	780b      	ldrb	r3, [r1, #0]
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	2b5e      	cmp	r3, #94	; 0x5e
 800d2f0:	bf0b      	itete	eq
 800d2f2:	784b      	ldrbeq	r3, [r1, #1]
 800d2f4:	1c4a      	addne	r2, r1, #1
 800d2f6:	1c8a      	addeq	r2, r1, #2
 800d2f8:	2100      	movne	r1, #0
 800d2fa:	bf08      	it	eq
 800d2fc:	2101      	moveq	r1, #1
 800d2fe:	3801      	subs	r0, #1
 800d300:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d304:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d308:	42a8      	cmp	r0, r5
 800d30a:	d1fb      	bne.n	800d304 <__sccl+0x1c>
 800d30c:	b90b      	cbnz	r3, 800d312 <__sccl+0x2a>
 800d30e:	1e50      	subs	r0, r2, #1
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	f081 0101 	eor.w	r1, r1, #1
 800d316:	54e1      	strb	r1, [r4, r3]
 800d318:	4610      	mov	r0, r2
 800d31a:	4602      	mov	r2, r0
 800d31c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d320:	2d2d      	cmp	r5, #45	; 0x2d
 800d322:	d005      	beq.n	800d330 <__sccl+0x48>
 800d324:	2d5d      	cmp	r5, #93	; 0x5d
 800d326:	d016      	beq.n	800d356 <__sccl+0x6e>
 800d328:	2d00      	cmp	r5, #0
 800d32a:	d0f1      	beq.n	800d310 <__sccl+0x28>
 800d32c:	462b      	mov	r3, r5
 800d32e:	e7f2      	b.n	800d316 <__sccl+0x2e>
 800d330:	7846      	ldrb	r6, [r0, #1]
 800d332:	2e5d      	cmp	r6, #93	; 0x5d
 800d334:	d0fa      	beq.n	800d32c <__sccl+0x44>
 800d336:	42b3      	cmp	r3, r6
 800d338:	dcf8      	bgt.n	800d32c <__sccl+0x44>
 800d33a:	3002      	adds	r0, #2
 800d33c:	461a      	mov	r2, r3
 800d33e:	3201      	adds	r2, #1
 800d340:	4296      	cmp	r6, r2
 800d342:	54a1      	strb	r1, [r4, r2]
 800d344:	dcfb      	bgt.n	800d33e <__sccl+0x56>
 800d346:	1af2      	subs	r2, r6, r3
 800d348:	3a01      	subs	r2, #1
 800d34a:	1c5d      	adds	r5, r3, #1
 800d34c:	42b3      	cmp	r3, r6
 800d34e:	bfa8      	it	ge
 800d350:	2200      	movge	r2, #0
 800d352:	18ab      	adds	r3, r5, r2
 800d354:	e7e1      	b.n	800d31a <__sccl+0x32>
 800d356:	4610      	mov	r0, r2
 800d358:	e7da      	b.n	800d310 <__sccl+0x28>

0800d35a <__submore>:
 800d35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	460c      	mov	r4, r1
 800d360:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d366:	4299      	cmp	r1, r3
 800d368:	d11d      	bne.n	800d3a6 <__submore+0x4c>
 800d36a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d36e:	f7fd fd81 	bl	800ae74 <_malloc_r>
 800d372:	b918      	cbnz	r0, 800d37c <__submore+0x22>
 800d374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d380:	63a3      	str	r3, [r4, #56]	; 0x38
 800d382:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d386:	6360      	str	r0, [r4, #52]	; 0x34
 800d388:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d38c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d390:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d394:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d398:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d39c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d3a0:	6020      	str	r0, [r4, #0]
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e7e8      	b.n	800d378 <__submore+0x1e>
 800d3a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d3a8:	0077      	lsls	r7, r6, #1
 800d3aa:	463a      	mov	r2, r7
 800d3ac:	f000 fc85 	bl	800dcba <_realloc_r>
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d0de      	beq.n	800d374 <__submore+0x1a>
 800d3b6:	eb00 0806 	add.w	r8, r0, r6
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	4632      	mov	r2, r6
 800d3be:	4640      	mov	r0, r8
 800d3c0:	f7fc fe53 	bl	800a06a <memcpy>
 800d3c4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d3c8:	f8c4 8000 	str.w	r8, [r4]
 800d3cc:	e7e9      	b.n	800d3a2 <__submore+0x48>

0800d3ce <__swbuf_r>:
 800d3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d0:	460e      	mov	r6, r1
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	b118      	cbz	r0, 800d3e0 <__swbuf_r+0x12>
 800d3d8:	6a03      	ldr	r3, [r0, #32]
 800d3da:	b90b      	cbnz	r3, 800d3e0 <__swbuf_r+0x12>
 800d3dc:	f7fc fc96 	bl	8009d0c <__sinit>
 800d3e0:	69a3      	ldr	r3, [r4, #24]
 800d3e2:	60a3      	str	r3, [r4, #8]
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	071a      	lsls	r2, r3, #28
 800d3e8:	d525      	bpl.n	800d436 <__swbuf_r+0x68>
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	b31b      	cbz	r3, 800d436 <__swbuf_r+0x68>
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	6922      	ldr	r2, [r4, #16]
 800d3f2:	1a98      	subs	r0, r3, r2
 800d3f4:	6963      	ldr	r3, [r4, #20]
 800d3f6:	b2f6      	uxtb	r6, r6
 800d3f8:	4283      	cmp	r3, r0
 800d3fa:	4637      	mov	r7, r6
 800d3fc:	dc04      	bgt.n	800d408 <__swbuf_r+0x3a>
 800d3fe:	4621      	mov	r1, r4
 800d400:	4628      	mov	r0, r5
 800d402:	f7ff ff49 	bl	800d298 <_fflush_r>
 800d406:	b9e0      	cbnz	r0, 800d442 <__swbuf_r+0x74>
 800d408:	68a3      	ldr	r3, [r4, #8]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	60a3      	str	r3, [r4, #8]
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	6022      	str	r2, [r4, #0]
 800d414:	701e      	strb	r6, [r3, #0]
 800d416:	6962      	ldr	r2, [r4, #20]
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d004      	beq.n	800d428 <__swbuf_r+0x5a>
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	07db      	lsls	r3, r3, #31
 800d422:	d506      	bpl.n	800d432 <__swbuf_r+0x64>
 800d424:	2e0a      	cmp	r6, #10
 800d426:	d104      	bne.n	800d432 <__swbuf_r+0x64>
 800d428:	4621      	mov	r1, r4
 800d42a:	4628      	mov	r0, r5
 800d42c:	f7ff ff34 	bl	800d298 <_fflush_r>
 800d430:	b938      	cbnz	r0, 800d442 <__swbuf_r+0x74>
 800d432:	4638      	mov	r0, r7
 800d434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d436:	4621      	mov	r1, r4
 800d438:	4628      	mov	r0, r5
 800d43a:	f000 f805 	bl	800d448 <__swsetup_r>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0d5      	beq.n	800d3ee <__swbuf_r+0x20>
 800d442:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d446:	e7f4      	b.n	800d432 <__swbuf_r+0x64>

0800d448 <__swsetup_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4b2a      	ldr	r3, [pc, #168]	; (800d4f4 <__swsetup_r+0xac>)
 800d44c:	4605      	mov	r5, r0
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	460c      	mov	r4, r1
 800d452:	b118      	cbz	r0, 800d45c <__swsetup_r+0x14>
 800d454:	6a03      	ldr	r3, [r0, #32]
 800d456:	b90b      	cbnz	r3, 800d45c <__swsetup_r+0x14>
 800d458:	f7fc fc58 	bl	8009d0c <__sinit>
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d462:	0718      	lsls	r0, r3, #28
 800d464:	d422      	bmi.n	800d4ac <__swsetup_r+0x64>
 800d466:	06d9      	lsls	r1, r3, #27
 800d468:	d407      	bmi.n	800d47a <__swsetup_r+0x32>
 800d46a:	2309      	movs	r3, #9
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d472:	81a3      	strh	r3, [r4, #12]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d478:	e034      	b.n	800d4e4 <__swsetup_r+0x9c>
 800d47a:	0758      	lsls	r0, r3, #29
 800d47c:	d512      	bpl.n	800d4a4 <__swsetup_r+0x5c>
 800d47e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d480:	b141      	cbz	r1, 800d494 <__swsetup_r+0x4c>
 800d482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d486:	4299      	cmp	r1, r3
 800d488:	d002      	beq.n	800d490 <__swsetup_r+0x48>
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7fd fc7e 	bl	800ad8c <_free_r>
 800d490:	2300      	movs	r3, #0
 800d492:	6363      	str	r3, [r4, #52]	; 0x34
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	2300      	movs	r3, #0
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	6023      	str	r3, [r4, #0]
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f043 0308 	orr.w	r3, r3, #8
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	b94b      	cbnz	r3, 800d4c4 <__swsetup_r+0x7c>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ba:	d003      	beq.n	800d4c4 <__swsetup_r+0x7c>
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f000 fce4 	bl	800de8c <__smakebuf_r>
 800d4c4:	89a0      	ldrh	r0, [r4, #12]
 800d4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ca:	f010 0301 	ands.w	r3, r0, #1
 800d4ce:	d00a      	beq.n	800d4e6 <__swsetup_r+0x9e>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60a3      	str	r3, [r4, #8]
 800d4d4:	6963      	ldr	r3, [r4, #20]
 800d4d6:	425b      	negs	r3, r3
 800d4d8:	61a3      	str	r3, [r4, #24]
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	b943      	cbnz	r3, 800d4f0 <__swsetup_r+0xa8>
 800d4de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4e2:	d1c4      	bne.n	800d46e <__swsetup_r+0x26>
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	0781      	lsls	r1, r0, #30
 800d4e8:	bf58      	it	pl
 800d4ea:	6963      	ldrpl	r3, [r4, #20]
 800d4ec:	60a3      	str	r3, [r4, #8]
 800d4ee:	e7f4      	b.n	800d4da <__swsetup_r+0x92>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	e7f7      	b.n	800d4e4 <__swsetup_r+0x9c>
 800d4f4:	200000e8 	.word	0x200000e8

0800d4f8 <memmove>:
 800d4f8:	4288      	cmp	r0, r1
 800d4fa:	b510      	push	{r4, lr}
 800d4fc:	eb01 0402 	add.w	r4, r1, r2
 800d500:	d902      	bls.n	800d508 <memmove+0x10>
 800d502:	4284      	cmp	r4, r0
 800d504:	4623      	mov	r3, r4
 800d506:	d807      	bhi.n	800d518 <memmove+0x20>
 800d508:	1e43      	subs	r3, r0, #1
 800d50a:	42a1      	cmp	r1, r4
 800d50c:	d008      	beq.n	800d520 <memmove+0x28>
 800d50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d516:	e7f8      	b.n	800d50a <memmove+0x12>
 800d518:	4402      	add	r2, r0
 800d51a:	4601      	mov	r1, r0
 800d51c:	428a      	cmp	r2, r1
 800d51e:	d100      	bne.n	800d522 <memmove+0x2a>
 800d520:	bd10      	pop	{r4, pc}
 800d522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d52a:	e7f7      	b.n	800d51c <memmove+0x24>

0800d52c <strncmp>:
 800d52c:	b510      	push	{r4, lr}
 800d52e:	b16a      	cbz	r2, 800d54c <strncmp+0x20>
 800d530:	3901      	subs	r1, #1
 800d532:	1884      	adds	r4, r0, r2
 800d534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d538:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d103      	bne.n	800d548 <strncmp+0x1c>
 800d540:	42a0      	cmp	r0, r4
 800d542:	d001      	beq.n	800d548 <strncmp+0x1c>
 800d544:	2a00      	cmp	r2, #0
 800d546:	d1f5      	bne.n	800d534 <strncmp+0x8>
 800d548:	1ad0      	subs	r0, r2, r3
 800d54a:	bd10      	pop	{r4, pc}
 800d54c:	4610      	mov	r0, r2
 800d54e:	e7fc      	b.n	800d54a <strncmp+0x1e>

0800d550 <_sbrk_r>:
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	4d06      	ldr	r5, [pc, #24]	; (800d56c <_sbrk_r+0x1c>)
 800d554:	2300      	movs	r3, #0
 800d556:	4604      	mov	r4, r0
 800d558:	4608      	mov	r0, r1
 800d55a:	602b      	str	r3, [r5, #0]
 800d55c:	f7f4 fe32 	bl	80021c4 <_sbrk>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_sbrk_r+0x1a>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	b103      	cbz	r3, 800d56a <_sbrk_r+0x1a>
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	2000592c 	.word	0x2000592c

0800d570 <nan>:
 800d570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d578 <nan+0x8>
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	00000000 	.word	0x00000000
 800d57c:	7ff80000 	.word	0x7ff80000

0800d580 <__assert_func>:
 800d580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d582:	4614      	mov	r4, r2
 800d584:	461a      	mov	r2, r3
 800d586:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <__assert_func+0x2c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4605      	mov	r5, r0
 800d58c:	68d8      	ldr	r0, [r3, #12]
 800d58e:	b14c      	cbz	r4, 800d5a4 <__assert_func+0x24>
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <__assert_func+0x30>)
 800d592:	9100      	str	r1, [sp, #0]
 800d594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d598:	4906      	ldr	r1, [pc, #24]	; (800d5b4 <__assert_func+0x34>)
 800d59a:	462b      	mov	r3, r5
 800d59c:	f000 fc3e 	bl	800de1c <fiprintf>
 800d5a0:	f000 fcd2 	bl	800df48 <abort>
 800d5a4:	4b04      	ldr	r3, [pc, #16]	; (800d5b8 <__assert_func+0x38>)
 800d5a6:	461c      	mov	r4, r3
 800d5a8:	e7f3      	b.n	800d592 <__assert_func+0x12>
 800d5aa:	bf00      	nop
 800d5ac:	200000e8 	.word	0x200000e8
 800d5b0:	0800f67d 	.word	0x0800f67d
 800d5b4:	0800f68a 	.word	0x0800f68a
 800d5b8:	0800f6b8 	.word	0x0800f6b8

0800d5bc <_calloc_r>:
 800d5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5be:	fba1 2402 	umull	r2, r4, r1, r2
 800d5c2:	b94c      	cbnz	r4, 800d5d8 <_calloc_r+0x1c>
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	9201      	str	r2, [sp, #4]
 800d5c8:	f7fd fc54 	bl	800ae74 <_malloc_r>
 800d5cc:	9a01      	ldr	r2, [sp, #4]
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b930      	cbnz	r0, 800d5e0 <_calloc_r+0x24>
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	b003      	add	sp, #12
 800d5d6:	bd30      	pop	{r4, r5, pc}
 800d5d8:	220c      	movs	r2, #12
 800d5da:	6002      	str	r2, [r0, #0]
 800d5dc:	2500      	movs	r5, #0
 800d5de:	e7f8      	b.n	800d5d2 <_calloc_r+0x16>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	f7fc fc6c 	bl	8009ebe <memset>
 800d5e6:	e7f4      	b.n	800d5d2 <_calloc_r+0x16>

0800d5e8 <rshift>:
 800d5e8:	6903      	ldr	r3, [r0, #16]
 800d5ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5f6:	f100 0414 	add.w	r4, r0, #20
 800d5fa:	dd45      	ble.n	800d688 <rshift+0xa0>
 800d5fc:	f011 011f 	ands.w	r1, r1, #31
 800d600:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d604:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d608:	d10c      	bne.n	800d624 <rshift+0x3c>
 800d60a:	f100 0710 	add.w	r7, r0, #16
 800d60e:	4629      	mov	r1, r5
 800d610:	42b1      	cmp	r1, r6
 800d612:	d334      	bcc.n	800d67e <rshift+0x96>
 800d614:	1a9b      	subs	r3, r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	1eea      	subs	r2, r5, #3
 800d61a:	4296      	cmp	r6, r2
 800d61c:	bf38      	it	cc
 800d61e:	2300      	movcc	r3, #0
 800d620:	4423      	add	r3, r4
 800d622:	e015      	b.n	800d650 <rshift+0x68>
 800d624:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d628:	f1c1 0820 	rsb	r8, r1, #32
 800d62c:	40cf      	lsrs	r7, r1
 800d62e:	f105 0e04 	add.w	lr, r5, #4
 800d632:	46a1      	mov	r9, r4
 800d634:	4576      	cmp	r6, lr
 800d636:	46f4      	mov	ip, lr
 800d638:	d815      	bhi.n	800d666 <rshift+0x7e>
 800d63a:	1a9a      	subs	r2, r3, r2
 800d63c:	0092      	lsls	r2, r2, #2
 800d63e:	3a04      	subs	r2, #4
 800d640:	3501      	adds	r5, #1
 800d642:	42ae      	cmp	r6, r5
 800d644:	bf38      	it	cc
 800d646:	2200      	movcc	r2, #0
 800d648:	18a3      	adds	r3, r4, r2
 800d64a:	50a7      	str	r7, [r4, r2]
 800d64c:	b107      	cbz	r7, 800d650 <rshift+0x68>
 800d64e:	3304      	adds	r3, #4
 800d650:	1b1a      	subs	r2, r3, r4
 800d652:	42a3      	cmp	r3, r4
 800d654:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d658:	bf08      	it	eq
 800d65a:	2300      	moveq	r3, #0
 800d65c:	6102      	str	r2, [r0, #16]
 800d65e:	bf08      	it	eq
 800d660:	6143      	streq	r3, [r0, #20]
 800d662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d666:	f8dc c000 	ldr.w	ip, [ip]
 800d66a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d66e:	ea4c 0707 	orr.w	r7, ip, r7
 800d672:	f849 7b04 	str.w	r7, [r9], #4
 800d676:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d67a:	40cf      	lsrs	r7, r1
 800d67c:	e7da      	b.n	800d634 <rshift+0x4c>
 800d67e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d682:	f847 cf04 	str.w	ip, [r7, #4]!
 800d686:	e7c3      	b.n	800d610 <rshift+0x28>
 800d688:	4623      	mov	r3, r4
 800d68a:	e7e1      	b.n	800d650 <rshift+0x68>

0800d68c <__hexdig_fun>:
 800d68c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d690:	2b09      	cmp	r3, #9
 800d692:	d802      	bhi.n	800d69a <__hexdig_fun+0xe>
 800d694:	3820      	subs	r0, #32
 800d696:	b2c0      	uxtb	r0, r0
 800d698:	4770      	bx	lr
 800d69a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d69e:	2b05      	cmp	r3, #5
 800d6a0:	d801      	bhi.n	800d6a6 <__hexdig_fun+0x1a>
 800d6a2:	3847      	subs	r0, #71	; 0x47
 800d6a4:	e7f7      	b.n	800d696 <__hexdig_fun+0xa>
 800d6a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d6aa:	2b05      	cmp	r3, #5
 800d6ac:	d801      	bhi.n	800d6b2 <__hexdig_fun+0x26>
 800d6ae:	3827      	subs	r0, #39	; 0x27
 800d6b0:	e7f1      	b.n	800d696 <__hexdig_fun+0xa>
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	4770      	bx	lr
	...

0800d6b8 <__gethex>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	4617      	mov	r7, r2
 800d6be:	680a      	ldr	r2, [r1, #0]
 800d6c0:	b085      	sub	sp, #20
 800d6c2:	f102 0b02 	add.w	fp, r2, #2
 800d6c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6ce:	4681      	mov	r9, r0
 800d6d0:	468a      	mov	sl, r1
 800d6d2:	9302      	str	r3, [sp, #8]
 800d6d4:	32fe      	adds	r2, #254	; 0xfe
 800d6d6:	eb02 030b 	add.w	r3, r2, fp
 800d6da:	46d8      	mov	r8, fp
 800d6dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d6e0:	9301      	str	r3, [sp, #4]
 800d6e2:	2830      	cmp	r0, #48	; 0x30
 800d6e4:	d0f7      	beq.n	800d6d6 <__gethex+0x1e>
 800d6e6:	f7ff ffd1 	bl	800d68c <__hexdig_fun>
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d138      	bne.n	800d762 <__gethex+0xaa>
 800d6f0:	49a7      	ldr	r1, [pc, #668]	; (800d990 <__gethex+0x2d8>)
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	f7ff ff19 	bl	800d52c <strncmp>
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d169      	bne.n	800d7d4 <__gethex+0x11c>
 800d700:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d704:	465d      	mov	r5, fp
 800d706:	f7ff ffc1 	bl	800d68c <__hexdig_fun>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d064      	beq.n	800d7d8 <__gethex+0x120>
 800d70e:	465a      	mov	r2, fp
 800d710:	7810      	ldrb	r0, [r2, #0]
 800d712:	2830      	cmp	r0, #48	; 0x30
 800d714:	4690      	mov	r8, r2
 800d716:	f102 0201 	add.w	r2, r2, #1
 800d71a:	d0f9      	beq.n	800d710 <__gethex+0x58>
 800d71c:	f7ff ffb6 	bl	800d68c <__hexdig_fun>
 800d720:	2301      	movs	r3, #1
 800d722:	fab0 f480 	clz	r4, r0
 800d726:	0964      	lsrs	r4, r4, #5
 800d728:	465e      	mov	r6, fp
 800d72a:	9301      	str	r3, [sp, #4]
 800d72c:	4642      	mov	r2, r8
 800d72e:	4615      	mov	r5, r2
 800d730:	3201      	adds	r2, #1
 800d732:	7828      	ldrb	r0, [r5, #0]
 800d734:	f7ff ffaa 	bl	800d68c <__hexdig_fun>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d1f8      	bne.n	800d72e <__gethex+0x76>
 800d73c:	4994      	ldr	r1, [pc, #592]	; (800d990 <__gethex+0x2d8>)
 800d73e:	2201      	movs	r2, #1
 800d740:	4628      	mov	r0, r5
 800d742:	f7ff fef3 	bl	800d52c <strncmp>
 800d746:	b978      	cbnz	r0, 800d768 <__gethex+0xb0>
 800d748:	b946      	cbnz	r6, 800d75c <__gethex+0xa4>
 800d74a:	1c6e      	adds	r6, r5, #1
 800d74c:	4632      	mov	r2, r6
 800d74e:	4615      	mov	r5, r2
 800d750:	3201      	adds	r2, #1
 800d752:	7828      	ldrb	r0, [r5, #0]
 800d754:	f7ff ff9a 	bl	800d68c <__hexdig_fun>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d1f8      	bne.n	800d74e <__gethex+0x96>
 800d75c:	1b73      	subs	r3, r6, r5
 800d75e:	009e      	lsls	r6, r3, #2
 800d760:	e004      	b.n	800d76c <__gethex+0xb4>
 800d762:	2400      	movs	r4, #0
 800d764:	4626      	mov	r6, r4
 800d766:	e7e1      	b.n	800d72c <__gethex+0x74>
 800d768:	2e00      	cmp	r6, #0
 800d76a:	d1f7      	bne.n	800d75c <__gethex+0xa4>
 800d76c:	782b      	ldrb	r3, [r5, #0]
 800d76e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d772:	2b50      	cmp	r3, #80	; 0x50
 800d774:	d13d      	bne.n	800d7f2 <__gethex+0x13a>
 800d776:	786b      	ldrb	r3, [r5, #1]
 800d778:	2b2b      	cmp	r3, #43	; 0x2b
 800d77a:	d02f      	beq.n	800d7dc <__gethex+0x124>
 800d77c:	2b2d      	cmp	r3, #45	; 0x2d
 800d77e:	d031      	beq.n	800d7e4 <__gethex+0x12c>
 800d780:	1c69      	adds	r1, r5, #1
 800d782:	f04f 0b00 	mov.w	fp, #0
 800d786:	7808      	ldrb	r0, [r1, #0]
 800d788:	f7ff ff80 	bl	800d68c <__hexdig_fun>
 800d78c:	1e42      	subs	r2, r0, #1
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	2a18      	cmp	r2, #24
 800d792:	d82e      	bhi.n	800d7f2 <__gethex+0x13a>
 800d794:	f1a0 0210 	sub.w	r2, r0, #16
 800d798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d79c:	f7ff ff76 	bl	800d68c <__hexdig_fun>
 800d7a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d7a4:	fa5f fc8c 	uxtb.w	ip, ip
 800d7a8:	f1bc 0f18 	cmp.w	ip, #24
 800d7ac:	d91d      	bls.n	800d7ea <__gethex+0x132>
 800d7ae:	f1bb 0f00 	cmp.w	fp, #0
 800d7b2:	d000      	beq.n	800d7b6 <__gethex+0xfe>
 800d7b4:	4252      	negs	r2, r2
 800d7b6:	4416      	add	r6, r2
 800d7b8:	f8ca 1000 	str.w	r1, [sl]
 800d7bc:	b1dc      	cbz	r4, 800d7f6 <__gethex+0x13e>
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bf14      	ite	ne
 800d7c4:	f04f 0800 	movne.w	r8, #0
 800d7c8:	f04f 0806 	moveq.w	r8, #6
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	b005      	add	sp, #20
 800d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d4:	4645      	mov	r5, r8
 800d7d6:	4626      	mov	r6, r4
 800d7d8:	2401      	movs	r4, #1
 800d7da:	e7c7      	b.n	800d76c <__gethex+0xb4>
 800d7dc:	f04f 0b00 	mov.w	fp, #0
 800d7e0:	1ca9      	adds	r1, r5, #2
 800d7e2:	e7d0      	b.n	800d786 <__gethex+0xce>
 800d7e4:	f04f 0b01 	mov.w	fp, #1
 800d7e8:	e7fa      	b.n	800d7e0 <__gethex+0x128>
 800d7ea:	230a      	movs	r3, #10
 800d7ec:	fb03 0002 	mla	r0, r3, r2, r0
 800d7f0:	e7d0      	b.n	800d794 <__gethex+0xdc>
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	e7e0      	b.n	800d7b8 <__gethex+0x100>
 800d7f6:	eba5 0308 	sub.w	r3, r5, r8
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	2b07      	cmp	r3, #7
 800d800:	dc0a      	bgt.n	800d818 <__gethex+0x160>
 800d802:	4648      	mov	r0, r9
 800d804:	f7fd fbc2 	bl	800af8c <_Balloc>
 800d808:	4604      	mov	r4, r0
 800d80a:	b940      	cbnz	r0, 800d81e <__gethex+0x166>
 800d80c:	4b61      	ldr	r3, [pc, #388]	; (800d994 <__gethex+0x2dc>)
 800d80e:	4602      	mov	r2, r0
 800d810:	21e4      	movs	r1, #228	; 0xe4
 800d812:	4861      	ldr	r0, [pc, #388]	; (800d998 <__gethex+0x2e0>)
 800d814:	f7ff feb4 	bl	800d580 <__assert_func>
 800d818:	3101      	adds	r1, #1
 800d81a:	105b      	asrs	r3, r3, #1
 800d81c:	e7ef      	b.n	800d7fe <__gethex+0x146>
 800d81e:	f100 0a14 	add.w	sl, r0, #20
 800d822:	2300      	movs	r3, #0
 800d824:	495a      	ldr	r1, [pc, #360]	; (800d990 <__gethex+0x2d8>)
 800d826:	f8cd a004 	str.w	sl, [sp, #4]
 800d82a:	469b      	mov	fp, r3
 800d82c:	45a8      	cmp	r8, r5
 800d82e:	d342      	bcc.n	800d8b6 <__gethex+0x1fe>
 800d830:	9801      	ldr	r0, [sp, #4]
 800d832:	f840 bb04 	str.w	fp, [r0], #4
 800d836:	eba0 000a 	sub.w	r0, r0, sl
 800d83a:	1080      	asrs	r0, r0, #2
 800d83c:	6120      	str	r0, [r4, #16]
 800d83e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d842:	4658      	mov	r0, fp
 800d844:	f7fd fc94 	bl	800b170 <__hi0bits>
 800d848:	683d      	ldr	r5, [r7, #0]
 800d84a:	eba8 0000 	sub.w	r0, r8, r0
 800d84e:	42a8      	cmp	r0, r5
 800d850:	dd59      	ble.n	800d906 <__gethex+0x24e>
 800d852:	eba0 0805 	sub.w	r8, r0, r5
 800d856:	4641      	mov	r1, r8
 800d858:	4620      	mov	r0, r4
 800d85a:	f7fe f823 	bl	800b8a4 <__any_on>
 800d85e:	4683      	mov	fp, r0
 800d860:	b1b8      	cbz	r0, 800d892 <__gethex+0x1da>
 800d862:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d866:	1159      	asrs	r1, r3, #5
 800d868:	f003 021f 	and.w	r2, r3, #31
 800d86c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d870:	f04f 0b01 	mov.w	fp, #1
 800d874:	fa0b f202 	lsl.w	r2, fp, r2
 800d878:	420a      	tst	r2, r1
 800d87a:	d00a      	beq.n	800d892 <__gethex+0x1da>
 800d87c:	455b      	cmp	r3, fp
 800d87e:	dd06      	ble.n	800d88e <__gethex+0x1d6>
 800d880:	f1a8 0102 	sub.w	r1, r8, #2
 800d884:	4620      	mov	r0, r4
 800d886:	f7fe f80d 	bl	800b8a4 <__any_on>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d138      	bne.n	800d900 <__gethex+0x248>
 800d88e:	f04f 0b02 	mov.w	fp, #2
 800d892:	4641      	mov	r1, r8
 800d894:	4620      	mov	r0, r4
 800d896:	f7ff fea7 	bl	800d5e8 <rshift>
 800d89a:	4446      	add	r6, r8
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	42b3      	cmp	r3, r6
 800d8a0:	da41      	bge.n	800d926 <__gethex+0x26e>
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4648      	mov	r0, r9
 800d8a6:	f7fd fbb1 	bl	800b00c <_Bfree>
 800d8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	6013      	str	r3, [r2, #0]
 800d8b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d8b4:	e78a      	b.n	800d7cc <__gethex+0x114>
 800d8b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d8ba:	2a2e      	cmp	r2, #46	; 0x2e
 800d8bc:	d014      	beq.n	800d8e8 <__gethex+0x230>
 800d8be:	2b20      	cmp	r3, #32
 800d8c0:	d106      	bne.n	800d8d0 <__gethex+0x218>
 800d8c2:	9b01      	ldr	r3, [sp, #4]
 800d8c4:	f843 bb04 	str.w	fp, [r3], #4
 800d8c8:	f04f 0b00 	mov.w	fp, #0
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	465b      	mov	r3, fp
 800d8d0:	7828      	ldrb	r0, [r5, #0]
 800d8d2:	9303      	str	r3, [sp, #12]
 800d8d4:	f7ff feda 	bl	800d68c <__hexdig_fun>
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	f000 000f 	and.w	r0, r0, #15
 800d8de:	4098      	lsls	r0, r3
 800d8e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	e7a1      	b.n	800d82c <__gethex+0x174>
 800d8e8:	45a8      	cmp	r8, r5
 800d8ea:	d8e8      	bhi.n	800d8be <__gethex+0x206>
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	9303      	str	r3, [sp, #12]
 800d8f2:	f7ff fe1b 	bl	800d52c <strncmp>
 800d8f6:	4926      	ldr	r1, [pc, #152]	; (800d990 <__gethex+0x2d8>)
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d1df      	bne.n	800d8be <__gethex+0x206>
 800d8fe:	e795      	b.n	800d82c <__gethex+0x174>
 800d900:	f04f 0b03 	mov.w	fp, #3
 800d904:	e7c5      	b.n	800d892 <__gethex+0x1da>
 800d906:	da0b      	bge.n	800d920 <__gethex+0x268>
 800d908:	eba5 0800 	sub.w	r8, r5, r0
 800d90c:	4621      	mov	r1, r4
 800d90e:	4642      	mov	r2, r8
 800d910:	4648      	mov	r0, r9
 800d912:	f7fd fd95 	bl	800b440 <__lshift>
 800d916:	eba6 0608 	sub.w	r6, r6, r8
 800d91a:	4604      	mov	r4, r0
 800d91c:	f100 0a14 	add.w	sl, r0, #20
 800d920:	f04f 0b00 	mov.w	fp, #0
 800d924:	e7ba      	b.n	800d89c <__gethex+0x1e4>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	42b3      	cmp	r3, r6
 800d92a:	dd73      	ble.n	800da14 <__gethex+0x35c>
 800d92c:	1b9e      	subs	r6, r3, r6
 800d92e:	42b5      	cmp	r5, r6
 800d930:	dc34      	bgt.n	800d99c <__gethex+0x2e4>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b02      	cmp	r3, #2
 800d936:	d023      	beq.n	800d980 <__gethex+0x2c8>
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d025      	beq.n	800d988 <__gethex+0x2d0>
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d115      	bne.n	800d96c <__gethex+0x2b4>
 800d940:	42b5      	cmp	r5, r6
 800d942:	d113      	bne.n	800d96c <__gethex+0x2b4>
 800d944:	2d01      	cmp	r5, #1
 800d946:	d10b      	bne.n	800d960 <__gethex+0x2a8>
 800d948:	9a02      	ldr	r2, [sp, #8]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	2301      	movs	r3, #1
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	f8ca 3000 	str.w	r3, [sl]
 800d956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d958:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d95c:	601c      	str	r4, [r3, #0]
 800d95e:	e735      	b.n	800d7cc <__gethex+0x114>
 800d960:	1e69      	subs	r1, r5, #1
 800d962:	4620      	mov	r0, r4
 800d964:	f7fd ff9e 	bl	800b8a4 <__any_on>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d1ed      	bne.n	800d948 <__gethex+0x290>
 800d96c:	4621      	mov	r1, r4
 800d96e:	4648      	mov	r0, r9
 800d970:	f7fd fb4c 	bl	800b00c <_Bfree>
 800d974:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d976:	2300      	movs	r3, #0
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d97e:	e725      	b.n	800d7cc <__gethex+0x114>
 800d980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1f2      	bne.n	800d96c <__gethex+0x2b4>
 800d986:	e7df      	b.n	800d948 <__gethex+0x290>
 800d988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1dc      	bne.n	800d948 <__gethex+0x290>
 800d98e:	e7ed      	b.n	800d96c <__gethex+0x2b4>
 800d990:	0800f4f4 	.word	0x0800f4f4
 800d994:	0800f387 	.word	0x0800f387
 800d998:	0800f6b9 	.word	0x0800f6b9
 800d99c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d9a0:	f1bb 0f00 	cmp.w	fp, #0
 800d9a4:	d133      	bne.n	800da0e <__gethex+0x356>
 800d9a6:	f1b8 0f00 	cmp.w	r8, #0
 800d9aa:	d004      	beq.n	800d9b6 <__gethex+0x2fe>
 800d9ac:	4641      	mov	r1, r8
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f7fd ff78 	bl	800b8a4 <__any_on>
 800d9b4:	4683      	mov	fp, r0
 800d9b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d9c0:	f008 081f 	and.w	r8, r8, #31
 800d9c4:	fa03 f308 	lsl.w	r3, r3, r8
 800d9c8:	4213      	tst	r3, r2
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bf18      	it	ne
 800d9d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d9d4:	1bad      	subs	r5, r5, r6
 800d9d6:	f7ff fe07 	bl	800d5e8 <rshift>
 800d9da:	687e      	ldr	r6, [r7, #4]
 800d9dc:	f04f 0802 	mov.w	r8, #2
 800d9e0:	f1bb 0f00 	cmp.w	fp, #0
 800d9e4:	d04a      	beq.n	800da7c <__gethex+0x3c4>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d016      	beq.n	800da1a <__gethex+0x362>
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d018      	beq.n	800da22 <__gethex+0x36a>
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d109      	bne.n	800da08 <__gethex+0x350>
 800d9f4:	f01b 0f02 	tst.w	fp, #2
 800d9f8:	d006      	beq.n	800da08 <__gethex+0x350>
 800d9fa:	f8da 3000 	ldr.w	r3, [sl]
 800d9fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800da02:	f01b 0f01 	tst.w	fp, #1
 800da06:	d10f      	bne.n	800da28 <__gethex+0x370>
 800da08:	f048 0810 	orr.w	r8, r8, #16
 800da0c:	e036      	b.n	800da7c <__gethex+0x3c4>
 800da0e:	f04f 0b01 	mov.w	fp, #1
 800da12:	e7d0      	b.n	800d9b6 <__gethex+0x2fe>
 800da14:	f04f 0801 	mov.w	r8, #1
 800da18:	e7e2      	b.n	800d9e0 <__gethex+0x328>
 800da1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da1c:	f1c3 0301 	rsb	r3, r3, #1
 800da20:	930f      	str	r3, [sp, #60]	; 0x3c
 800da22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d0ef      	beq.n	800da08 <__gethex+0x350>
 800da28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da2c:	f104 0214 	add.w	r2, r4, #20
 800da30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800da3a:	2300      	movs	r3, #0
 800da3c:	4694      	mov	ip, r2
 800da3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800da42:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800da46:	d01e      	beq.n	800da86 <__gethex+0x3ce>
 800da48:	3101      	adds	r1, #1
 800da4a:	f8cc 1000 	str.w	r1, [ip]
 800da4e:	f1b8 0f02 	cmp.w	r8, #2
 800da52:	f104 0214 	add.w	r2, r4, #20
 800da56:	d13d      	bne.n	800dad4 <__gethex+0x41c>
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	42ab      	cmp	r3, r5
 800da5e:	d10b      	bne.n	800da78 <__gethex+0x3c0>
 800da60:	1169      	asrs	r1, r5, #5
 800da62:	2301      	movs	r3, #1
 800da64:	f005 051f 	and.w	r5, r5, #31
 800da68:	fa03 f505 	lsl.w	r5, r3, r5
 800da6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da70:	421d      	tst	r5, r3
 800da72:	bf18      	it	ne
 800da74:	f04f 0801 	movne.w	r8, #1
 800da78:	f048 0820 	orr.w	r8, r8, #32
 800da7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da7e:	601c      	str	r4, [r3, #0]
 800da80:	9b02      	ldr	r3, [sp, #8]
 800da82:	601e      	str	r6, [r3, #0]
 800da84:	e6a2      	b.n	800d7cc <__gethex+0x114>
 800da86:	4290      	cmp	r0, r2
 800da88:	f842 3c04 	str.w	r3, [r2, #-4]
 800da8c:	d8d6      	bhi.n	800da3c <__gethex+0x384>
 800da8e:	68a2      	ldr	r2, [r4, #8]
 800da90:	4593      	cmp	fp, r2
 800da92:	db17      	blt.n	800dac4 <__gethex+0x40c>
 800da94:	6861      	ldr	r1, [r4, #4]
 800da96:	4648      	mov	r0, r9
 800da98:	3101      	adds	r1, #1
 800da9a:	f7fd fa77 	bl	800af8c <_Balloc>
 800da9e:	4682      	mov	sl, r0
 800daa0:	b918      	cbnz	r0, 800daaa <__gethex+0x3f2>
 800daa2:	4b1b      	ldr	r3, [pc, #108]	; (800db10 <__gethex+0x458>)
 800daa4:	4602      	mov	r2, r0
 800daa6:	2184      	movs	r1, #132	; 0x84
 800daa8:	e6b3      	b.n	800d812 <__gethex+0x15a>
 800daaa:	6922      	ldr	r2, [r4, #16]
 800daac:	3202      	adds	r2, #2
 800daae:	f104 010c 	add.w	r1, r4, #12
 800dab2:	0092      	lsls	r2, r2, #2
 800dab4:	300c      	adds	r0, #12
 800dab6:	f7fc fad8 	bl	800a06a <memcpy>
 800daba:	4621      	mov	r1, r4
 800dabc:	4648      	mov	r0, r9
 800dabe:	f7fd faa5 	bl	800b00c <_Bfree>
 800dac2:	4654      	mov	r4, sl
 800dac4:	6922      	ldr	r2, [r4, #16]
 800dac6:	1c51      	adds	r1, r2, #1
 800dac8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dacc:	6121      	str	r1, [r4, #16]
 800dace:	2101      	movs	r1, #1
 800dad0:	6151      	str	r1, [r2, #20]
 800dad2:	e7bc      	b.n	800da4e <__gethex+0x396>
 800dad4:	6921      	ldr	r1, [r4, #16]
 800dad6:	4559      	cmp	r1, fp
 800dad8:	dd0b      	ble.n	800daf2 <__gethex+0x43a>
 800dada:	2101      	movs	r1, #1
 800dadc:	4620      	mov	r0, r4
 800dade:	f7ff fd83 	bl	800d5e8 <rshift>
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	3601      	adds	r6, #1
 800dae6:	42b3      	cmp	r3, r6
 800dae8:	f6ff aedb 	blt.w	800d8a2 <__gethex+0x1ea>
 800daec:	f04f 0801 	mov.w	r8, #1
 800daf0:	e7c2      	b.n	800da78 <__gethex+0x3c0>
 800daf2:	f015 051f 	ands.w	r5, r5, #31
 800daf6:	d0f9      	beq.n	800daec <__gethex+0x434>
 800daf8:	9b01      	ldr	r3, [sp, #4]
 800dafa:	441a      	add	r2, r3
 800dafc:	f1c5 0520 	rsb	r5, r5, #32
 800db00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800db04:	f7fd fb34 	bl	800b170 <__hi0bits>
 800db08:	42a8      	cmp	r0, r5
 800db0a:	dbe6      	blt.n	800dada <__gethex+0x422>
 800db0c:	e7ee      	b.n	800daec <__gethex+0x434>
 800db0e:	bf00      	nop
 800db10:	0800f387 	.word	0x0800f387

0800db14 <L_shift>:
 800db14:	f1c2 0208 	rsb	r2, r2, #8
 800db18:	0092      	lsls	r2, r2, #2
 800db1a:	b570      	push	{r4, r5, r6, lr}
 800db1c:	f1c2 0620 	rsb	r6, r2, #32
 800db20:	6843      	ldr	r3, [r0, #4]
 800db22:	6804      	ldr	r4, [r0, #0]
 800db24:	fa03 f506 	lsl.w	r5, r3, r6
 800db28:	432c      	orrs	r4, r5
 800db2a:	40d3      	lsrs	r3, r2
 800db2c:	6004      	str	r4, [r0, #0]
 800db2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800db32:	4288      	cmp	r0, r1
 800db34:	d3f4      	bcc.n	800db20 <L_shift+0xc>
 800db36:	bd70      	pop	{r4, r5, r6, pc}

0800db38 <__match>:
 800db38:	b530      	push	{r4, r5, lr}
 800db3a:	6803      	ldr	r3, [r0, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db42:	b914      	cbnz	r4, 800db4a <__match+0x12>
 800db44:	6003      	str	r3, [r0, #0]
 800db46:	2001      	movs	r0, #1
 800db48:	bd30      	pop	{r4, r5, pc}
 800db4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db52:	2d19      	cmp	r5, #25
 800db54:	bf98      	it	ls
 800db56:	3220      	addls	r2, #32
 800db58:	42a2      	cmp	r2, r4
 800db5a:	d0f0      	beq.n	800db3e <__match+0x6>
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7f3      	b.n	800db48 <__match+0x10>

0800db60 <__hexnan>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	680b      	ldr	r3, [r1, #0]
 800db66:	6801      	ldr	r1, [r0, #0]
 800db68:	115e      	asrs	r6, r3, #5
 800db6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db6e:	f013 031f 	ands.w	r3, r3, #31
 800db72:	b087      	sub	sp, #28
 800db74:	bf18      	it	ne
 800db76:	3604      	addne	r6, #4
 800db78:	2500      	movs	r5, #0
 800db7a:	1f37      	subs	r7, r6, #4
 800db7c:	4682      	mov	sl, r0
 800db7e:	4690      	mov	r8, r2
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	f846 5c04 	str.w	r5, [r6, #-4]
 800db86:	46b9      	mov	r9, r7
 800db88:	463c      	mov	r4, r7
 800db8a:	9502      	str	r5, [sp, #8]
 800db8c:	46ab      	mov	fp, r5
 800db8e:	784a      	ldrb	r2, [r1, #1]
 800db90:	1c4b      	adds	r3, r1, #1
 800db92:	9303      	str	r3, [sp, #12]
 800db94:	b342      	cbz	r2, 800dbe8 <__hexnan+0x88>
 800db96:	4610      	mov	r0, r2
 800db98:	9105      	str	r1, [sp, #20]
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	f7ff fd76 	bl	800d68c <__hexdig_fun>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d14f      	bne.n	800dc44 <__hexnan+0xe4>
 800dba4:	9a04      	ldr	r2, [sp, #16]
 800dba6:	9905      	ldr	r1, [sp, #20]
 800dba8:	2a20      	cmp	r2, #32
 800dbaa:	d818      	bhi.n	800dbde <__hexnan+0x7e>
 800dbac:	9b02      	ldr	r3, [sp, #8]
 800dbae:	459b      	cmp	fp, r3
 800dbb0:	dd13      	ble.n	800dbda <__hexnan+0x7a>
 800dbb2:	454c      	cmp	r4, r9
 800dbb4:	d206      	bcs.n	800dbc4 <__hexnan+0x64>
 800dbb6:	2d07      	cmp	r5, #7
 800dbb8:	dc04      	bgt.n	800dbc4 <__hexnan+0x64>
 800dbba:	462a      	mov	r2, r5
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7ff ffa8 	bl	800db14 <L_shift>
 800dbc4:	4544      	cmp	r4, r8
 800dbc6:	d950      	bls.n	800dc6a <__hexnan+0x10a>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f1a4 0904 	sub.w	r9, r4, #4
 800dbce:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbd2:	f8cd b008 	str.w	fp, [sp, #8]
 800dbd6:	464c      	mov	r4, r9
 800dbd8:	461d      	mov	r5, r3
 800dbda:	9903      	ldr	r1, [sp, #12]
 800dbdc:	e7d7      	b.n	800db8e <__hexnan+0x2e>
 800dbde:	2a29      	cmp	r2, #41	; 0x29
 800dbe0:	d155      	bne.n	800dc8e <__hexnan+0x12e>
 800dbe2:	3102      	adds	r1, #2
 800dbe4:	f8ca 1000 	str.w	r1, [sl]
 800dbe8:	f1bb 0f00 	cmp.w	fp, #0
 800dbec:	d04f      	beq.n	800dc8e <__hexnan+0x12e>
 800dbee:	454c      	cmp	r4, r9
 800dbf0:	d206      	bcs.n	800dc00 <__hexnan+0xa0>
 800dbf2:	2d07      	cmp	r5, #7
 800dbf4:	dc04      	bgt.n	800dc00 <__hexnan+0xa0>
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f7ff ff8a 	bl	800db14 <L_shift>
 800dc00:	4544      	cmp	r4, r8
 800dc02:	d934      	bls.n	800dc6e <__hexnan+0x10e>
 800dc04:	f1a8 0204 	sub.w	r2, r8, #4
 800dc08:	4623      	mov	r3, r4
 800dc0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc12:	429f      	cmp	r7, r3
 800dc14:	d2f9      	bcs.n	800dc0a <__hexnan+0xaa>
 800dc16:	1b3b      	subs	r3, r7, r4
 800dc18:	f023 0303 	bic.w	r3, r3, #3
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	3e03      	subs	r6, #3
 800dc20:	3401      	adds	r4, #1
 800dc22:	42a6      	cmp	r6, r4
 800dc24:	bf38      	it	cc
 800dc26:	2304      	movcc	r3, #4
 800dc28:	4443      	add	r3, r8
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f843 2b04 	str.w	r2, [r3], #4
 800dc30:	429f      	cmp	r7, r3
 800dc32:	d2fb      	bcs.n	800dc2c <__hexnan+0xcc>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	b91b      	cbnz	r3, 800dc40 <__hexnan+0xe0>
 800dc38:	4547      	cmp	r7, r8
 800dc3a:	d126      	bne.n	800dc8a <__hexnan+0x12a>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	603b      	str	r3, [r7, #0]
 800dc40:	2005      	movs	r0, #5
 800dc42:	e025      	b.n	800dc90 <__hexnan+0x130>
 800dc44:	3501      	adds	r5, #1
 800dc46:	2d08      	cmp	r5, #8
 800dc48:	f10b 0b01 	add.w	fp, fp, #1
 800dc4c:	dd06      	ble.n	800dc5c <__hexnan+0xfc>
 800dc4e:	4544      	cmp	r4, r8
 800dc50:	d9c3      	bls.n	800dbda <__hexnan+0x7a>
 800dc52:	2300      	movs	r3, #0
 800dc54:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc58:	2501      	movs	r5, #1
 800dc5a:	3c04      	subs	r4, #4
 800dc5c:	6822      	ldr	r2, [r4, #0]
 800dc5e:	f000 000f 	and.w	r0, r0, #15
 800dc62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc66:	6020      	str	r0, [r4, #0]
 800dc68:	e7b7      	b.n	800dbda <__hexnan+0x7a>
 800dc6a:	2508      	movs	r5, #8
 800dc6c:	e7b5      	b.n	800dbda <__hexnan+0x7a>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0df      	beq.n	800dc34 <__hexnan+0xd4>
 800dc74:	f1c3 0320 	rsb	r3, r3, #32
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc7c:	40da      	lsrs	r2, r3
 800dc7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc82:	4013      	ands	r3, r2
 800dc84:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc88:	e7d4      	b.n	800dc34 <__hexnan+0xd4>
 800dc8a:	3f04      	subs	r7, #4
 800dc8c:	e7d2      	b.n	800dc34 <__hexnan+0xd4>
 800dc8e:	2004      	movs	r0, #4
 800dc90:	b007      	add	sp, #28
 800dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc96 <__ascii_mbtowc>:
 800dc96:	b082      	sub	sp, #8
 800dc98:	b901      	cbnz	r1, 800dc9c <__ascii_mbtowc+0x6>
 800dc9a:	a901      	add	r1, sp, #4
 800dc9c:	b142      	cbz	r2, 800dcb0 <__ascii_mbtowc+0x1a>
 800dc9e:	b14b      	cbz	r3, 800dcb4 <__ascii_mbtowc+0x1e>
 800dca0:	7813      	ldrb	r3, [r2, #0]
 800dca2:	600b      	str	r3, [r1, #0]
 800dca4:	7812      	ldrb	r2, [r2, #0]
 800dca6:	1e10      	subs	r0, r2, #0
 800dca8:	bf18      	it	ne
 800dcaa:	2001      	movne	r0, #1
 800dcac:	b002      	add	sp, #8
 800dcae:	4770      	bx	lr
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	e7fb      	b.n	800dcac <__ascii_mbtowc+0x16>
 800dcb4:	f06f 0001 	mvn.w	r0, #1
 800dcb8:	e7f8      	b.n	800dcac <__ascii_mbtowc+0x16>

0800dcba <_realloc_r>:
 800dcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbe:	4680      	mov	r8, r0
 800dcc0:	4614      	mov	r4, r2
 800dcc2:	460e      	mov	r6, r1
 800dcc4:	b921      	cbnz	r1, 800dcd0 <_realloc_r+0x16>
 800dcc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcca:	4611      	mov	r1, r2
 800dccc:	f7fd b8d2 	b.w	800ae74 <_malloc_r>
 800dcd0:	b92a      	cbnz	r2, 800dcde <_realloc_r+0x24>
 800dcd2:	f7fd f85b 	bl	800ad8c <_free_r>
 800dcd6:	4625      	mov	r5, r4
 800dcd8:	4628      	mov	r0, r5
 800dcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcde:	f000 f93a 	bl	800df56 <_malloc_usable_size_r>
 800dce2:	4284      	cmp	r4, r0
 800dce4:	4607      	mov	r7, r0
 800dce6:	d802      	bhi.n	800dcee <_realloc_r+0x34>
 800dce8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcec:	d812      	bhi.n	800dd14 <_realloc_r+0x5a>
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	f7fd f8bf 	bl	800ae74 <_malloc_r>
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d0ed      	beq.n	800dcd8 <_realloc_r+0x1e>
 800dcfc:	42bc      	cmp	r4, r7
 800dcfe:	4622      	mov	r2, r4
 800dd00:	4631      	mov	r1, r6
 800dd02:	bf28      	it	cs
 800dd04:	463a      	movcs	r2, r7
 800dd06:	f7fc f9b0 	bl	800a06a <memcpy>
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	f7fd f83d 	bl	800ad8c <_free_r>
 800dd12:	e7e1      	b.n	800dcd8 <_realloc_r+0x1e>
 800dd14:	4635      	mov	r5, r6
 800dd16:	e7df      	b.n	800dcd8 <_realloc_r+0x1e>

0800dd18 <_strtoul_l.constprop.0>:
 800dd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd1c:	4f36      	ldr	r7, [pc, #216]	; (800ddf8 <_strtoul_l.constprop.0+0xe0>)
 800dd1e:	4686      	mov	lr, r0
 800dd20:	460d      	mov	r5, r1
 800dd22:	4628      	mov	r0, r5
 800dd24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd28:	5d3e      	ldrb	r6, [r7, r4]
 800dd2a:	f016 0608 	ands.w	r6, r6, #8
 800dd2e:	d1f8      	bne.n	800dd22 <_strtoul_l.constprop.0+0xa>
 800dd30:	2c2d      	cmp	r4, #45	; 0x2d
 800dd32:	d130      	bne.n	800dd96 <_strtoul_l.constprop.0+0x7e>
 800dd34:	782c      	ldrb	r4, [r5, #0]
 800dd36:	2601      	movs	r6, #1
 800dd38:	1c85      	adds	r5, r0, #2
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d057      	beq.n	800ddee <_strtoul_l.constprop.0+0xd6>
 800dd3e:	2b10      	cmp	r3, #16
 800dd40:	d109      	bne.n	800dd56 <_strtoul_l.constprop.0+0x3e>
 800dd42:	2c30      	cmp	r4, #48	; 0x30
 800dd44:	d107      	bne.n	800dd56 <_strtoul_l.constprop.0+0x3e>
 800dd46:	7828      	ldrb	r0, [r5, #0]
 800dd48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dd4c:	2858      	cmp	r0, #88	; 0x58
 800dd4e:	d149      	bne.n	800dde4 <_strtoul_l.constprop.0+0xcc>
 800dd50:	786c      	ldrb	r4, [r5, #1]
 800dd52:	2310      	movs	r3, #16
 800dd54:	3502      	adds	r5, #2
 800dd56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800dd5a:	2700      	movs	r7, #0
 800dd5c:	fbb8 f8f3 	udiv	r8, r8, r3
 800dd60:	fb03 f908 	mul.w	r9, r3, r8
 800dd64:	ea6f 0909 	mvn.w	r9, r9
 800dd68:	4638      	mov	r0, r7
 800dd6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd6e:	f1bc 0f09 	cmp.w	ip, #9
 800dd72:	d815      	bhi.n	800dda0 <_strtoul_l.constprop.0+0x88>
 800dd74:	4664      	mov	r4, ip
 800dd76:	42a3      	cmp	r3, r4
 800dd78:	dd23      	ble.n	800ddc2 <_strtoul_l.constprop.0+0xaa>
 800dd7a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800dd7e:	d007      	beq.n	800dd90 <_strtoul_l.constprop.0+0x78>
 800dd80:	4580      	cmp	r8, r0
 800dd82:	d31b      	bcc.n	800ddbc <_strtoul_l.constprop.0+0xa4>
 800dd84:	d101      	bne.n	800dd8a <_strtoul_l.constprop.0+0x72>
 800dd86:	45a1      	cmp	r9, r4
 800dd88:	db18      	blt.n	800ddbc <_strtoul_l.constprop.0+0xa4>
 800dd8a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd8e:	2701      	movs	r7, #1
 800dd90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd94:	e7e9      	b.n	800dd6a <_strtoul_l.constprop.0+0x52>
 800dd96:	2c2b      	cmp	r4, #43	; 0x2b
 800dd98:	bf04      	itt	eq
 800dd9a:	782c      	ldrbeq	r4, [r5, #0]
 800dd9c:	1c85      	addeq	r5, r0, #2
 800dd9e:	e7cc      	b.n	800dd3a <_strtoul_l.constprop.0+0x22>
 800dda0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dda4:	f1bc 0f19 	cmp.w	ip, #25
 800dda8:	d801      	bhi.n	800ddae <_strtoul_l.constprop.0+0x96>
 800ddaa:	3c37      	subs	r4, #55	; 0x37
 800ddac:	e7e3      	b.n	800dd76 <_strtoul_l.constprop.0+0x5e>
 800ddae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ddb2:	f1bc 0f19 	cmp.w	ip, #25
 800ddb6:	d804      	bhi.n	800ddc2 <_strtoul_l.constprop.0+0xaa>
 800ddb8:	3c57      	subs	r4, #87	; 0x57
 800ddba:	e7dc      	b.n	800dd76 <_strtoul_l.constprop.0+0x5e>
 800ddbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ddc0:	e7e6      	b.n	800dd90 <_strtoul_l.constprop.0+0x78>
 800ddc2:	1c7b      	adds	r3, r7, #1
 800ddc4:	d106      	bne.n	800ddd4 <_strtoul_l.constprop.0+0xbc>
 800ddc6:	2322      	movs	r3, #34	; 0x22
 800ddc8:	f8ce 3000 	str.w	r3, [lr]
 800ddcc:	4638      	mov	r0, r7
 800ddce:	b932      	cbnz	r2, 800ddde <_strtoul_l.constprop.0+0xc6>
 800ddd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd4:	b106      	cbz	r6, 800ddd8 <_strtoul_l.constprop.0+0xc0>
 800ddd6:	4240      	negs	r0, r0
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	d0f9      	beq.n	800ddd0 <_strtoul_l.constprop.0+0xb8>
 800dddc:	b107      	cbz	r7, 800dde0 <_strtoul_l.constprop.0+0xc8>
 800ddde:	1e69      	subs	r1, r5, #1
 800dde0:	6011      	str	r1, [r2, #0]
 800dde2:	e7f5      	b.n	800ddd0 <_strtoul_l.constprop.0+0xb8>
 800dde4:	2430      	movs	r4, #48	; 0x30
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1b5      	bne.n	800dd56 <_strtoul_l.constprop.0+0x3e>
 800ddea:	2308      	movs	r3, #8
 800ddec:	e7b3      	b.n	800dd56 <_strtoul_l.constprop.0+0x3e>
 800ddee:	2c30      	cmp	r4, #48	; 0x30
 800ddf0:	d0a9      	beq.n	800dd46 <_strtoul_l.constprop.0+0x2e>
 800ddf2:	230a      	movs	r3, #10
 800ddf4:	e7af      	b.n	800dd56 <_strtoul_l.constprop.0+0x3e>
 800ddf6:	bf00      	nop
 800ddf8:	0800f549 	.word	0x0800f549

0800ddfc <_strtoul_r>:
 800ddfc:	f7ff bf8c 	b.w	800dd18 <_strtoul_l.constprop.0>

0800de00 <__ascii_wctomb>:
 800de00:	b149      	cbz	r1, 800de16 <__ascii_wctomb+0x16>
 800de02:	2aff      	cmp	r2, #255	; 0xff
 800de04:	bf85      	ittet	hi
 800de06:	238a      	movhi	r3, #138	; 0x8a
 800de08:	6003      	strhi	r3, [r0, #0]
 800de0a:	700a      	strbls	r2, [r1, #0]
 800de0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800de10:	bf98      	it	ls
 800de12:	2001      	movls	r0, #1
 800de14:	4770      	bx	lr
 800de16:	4608      	mov	r0, r1
 800de18:	4770      	bx	lr
	...

0800de1c <fiprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b503      	push	{r0, r1, lr}
 800de20:	4601      	mov	r1, r0
 800de22:	ab03      	add	r3, sp, #12
 800de24:	4805      	ldr	r0, [pc, #20]	; (800de3c <fiprintf+0x20>)
 800de26:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2a:	6800      	ldr	r0, [r0, #0]
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	f7fe ff45 	bl	800ccbc <_vfiprintf_r>
 800de32:	b002      	add	sp, #8
 800de34:	f85d eb04 	ldr.w	lr, [sp], #4
 800de38:	b003      	add	sp, #12
 800de3a:	4770      	bx	lr
 800de3c:	200000e8 	.word	0x200000e8

0800de40 <__swhatbuf_r>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	460c      	mov	r4, r1
 800de44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de48:	2900      	cmp	r1, #0
 800de4a:	b096      	sub	sp, #88	; 0x58
 800de4c:	4615      	mov	r5, r2
 800de4e:	461e      	mov	r6, r3
 800de50:	da0d      	bge.n	800de6e <__swhatbuf_r+0x2e>
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de58:	f04f 0100 	mov.w	r1, #0
 800de5c:	bf0c      	ite	eq
 800de5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de62:	2340      	movne	r3, #64	; 0x40
 800de64:	2000      	movs	r0, #0
 800de66:	6031      	str	r1, [r6, #0]
 800de68:	602b      	str	r3, [r5, #0]
 800de6a:	b016      	add	sp, #88	; 0x58
 800de6c:	bd70      	pop	{r4, r5, r6, pc}
 800de6e:	466a      	mov	r2, sp
 800de70:	f000 f848 	bl	800df04 <_fstat_r>
 800de74:	2800      	cmp	r0, #0
 800de76:	dbec      	blt.n	800de52 <__swhatbuf_r+0x12>
 800de78:	9901      	ldr	r1, [sp, #4]
 800de7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de82:	4259      	negs	r1, r3
 800de84:	4159      	adcs	r1, r3
 800de86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de8a:	e7eb      	b.n	800de64 <__swhatbuf_r+0x24>

0800de8c <__smakebuf_r>:
 800de8c:	898b      	ldrh	r3, [r1, #12]
 800de8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de90:	079d      	lsls	r5, r3, #30
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	d507      	bpl.n	800dea8 <__smakebuf_r+0x1c>
 800de98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	6123      	str	r3, [r4, #16]
 800dea0:	2301      	movs	r3, #1
 800dea2:	6163      	str	r3, [r4, #20]
 800dea4:	b002      	add	sp, #8
 800dea6:	bd70      	pop	{r4, r5, r6, pc}
 800dea8:	ab01      	add	r3, sp, #4
 800deaa:	466a      	mov	r2, sp
 800deac:	f7ff ffc8 	bl	800de40 <__swhatbuf_r>
 800deb0:	9900      	ldr	r1, [sp, #0]
 800deb2:	4605      	mov	r5, r0
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7fc ffdd 	bl	800ae74 <_malloc_r>
 800deba:	b948      	cbnz	r0, 800ded0 <__smakebuf_r+0x44>
 800debc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dec0:	059a      	lsls	r2, r3, #22
 800dec2:	d4ef      	bmi.n	800dea4 <__smakebuf_r+0x18>
 800dec4:	f023 0303 	bic.w	r3, r3, #3
 800dec8:	f043 0302 	orr.w	r3, r3, #2
 800decc:	81a3      	strh	r3, [r4, #12]
 800dece:	e7e3      	b.n	800de98 <__smakebuf_r+0xc>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	6020      	str	r0, [r4, #0]
 800ded4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded8:	81a3      	strh	r3, [r4, #12]
 800deda:	9b00      	ldr	r3, [sp, #0]
 800dedc:	6163      	str	r3, [r4, #20]
 800dede:	9b01      	ldr	r3, [sp, #4]
 800dee0:	6120      	str	r0, [r4, #16]
 800dee2:	b15b      	cbz	r3, 800defc <__smakebuf_r+0x70>
 800dee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dee8:	4630      	mov	r0, r6
 800deea:	f000 f81d 	bl	800df28 <_isatty_r>
 800deee:	b128      	cbz	r0, 800defc <__smakebuf_r+0x70>
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	f023 0303 	bic.w	r3, r3, #3
 800def6:	f043 0301 	orr.w	r3, r3, #1
 800defa:	81a3      	strh	r3, [r4, #12]
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	431d      	orrs	r5, r3
 800df00:	81a5      	strh	r5, [r4, #12]
 800df02:	e7cf      	b.n	800dea4 <__smakebuf_r+0x18>

0800df04 <_fstat_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4d07      	ldr	r5, [pc, #28]	; (800df24 <_fstat_r+0x20>)
 800df08:	2300      	movs	r3, #0
 800df0a:	4604      	mov	r4, r0
 800df0c:	4608      	mov	r0, r1
 800df0e:	4611      	mov	r1, r2
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	f7f4 f92e 	bl	8002172 <_fstat>
 800df16:	1c43      	adds	r3, r0, #1
 800df18:	d102      	bne.n	800df20 <_fstat_r+0x1c>
 800df1a:	682b      	ldr	r3, [r5, #0]
 800df1c:	b103      	cbz	r3, 800df20 <_fstat_r+0x1c>
 800df1e:	6023      	str	r3, [r4, #0]
 800df20:	bd38      	pop	{r3, r4, r5, pc}
 800df22:	bf00      	nop
 800df24:	2000592c 	.word	0x2000592c

0800df28 <_isatty_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4d06      	ldr	r5, [pc, #24]	; (800df44 <_isatty_r+0x1c>)
 800df2c:	2300      	movs	r3, #0
 800df2e:	4604      	mov	r4, r0
 800df30:	4608      	mov	r0, r1
 800df32:	602b      	str	r3, [r5, #0]
 800df34:	f7f4 f92d 	bl	8002192 <_isatty>
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	d102      	bne.n	800df42 <_isatty_r+0x1a>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	b103      	cbz	r3, 800df42 <_isatty_r+0x1a>
 800df40:	6023      	str	r3, [r4, #0]
 800df42:	bd38      	pop	{r3, r4, r5, pc}
 800df44:	2000592c 	.word	0x2000592c

0800df48 <abort>:
 800df48:	b508      	push	{r3, lr}
 800df4a:	2006      	movs	r0, #6
 800df4c:	f000 f834 	bl	800dfb8 <raise>
 800df50:	2001      	movs	r0, #1
 800df52:	f7f4 f8bf 	bl	80020d4 <_exit>

0800df56 <_malloc_usable_size_r>:
 800df56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df5a:	1f18      	subs	r0, r3, #4
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	bfbc      	itt	lt
 800df60:	580b      	ldrlt	r3, [r1, r0]
 800df62:	18c0      	addlt	r0, r0, r3
 800df64:	4770      	bx	lr

0800df66 <_raise_r>:
 800df66:	291f      	cmp	r1, #31
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4604      	mov	r4, r0
 800df6c:	460d      	mov	r5, r1
 800df6e:	d904      	bls.n	800df7a <_raise_r+0x14>
 800df70:	2316      	movs	r3, #22
 800df72:	6003      	str	r3, [r0, #0]
 800df74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df78:	bd38      	pop	{r3, r4, r5, pc}
 800df7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df7c:	b112      	cbz	r2, 800df84 <_raise_r+0x1e>
 800df7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df82:	b94b      	cbnz	r3, 800df98 <_raise_r+0x32>
 800df84:	4620      	mov	r0, r4
 800df86:	f000 f831 	bl	800dfec <_getpid_r>
 800df8a:	462a      	mov	r2, r5
 800df8c:	4601      	mov	r1, r0
 800df8e:	4620      	mov	r0, r4
 800df90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df94:	f000 b818 	b.w	800dfc8 <_kill_r>
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d00a      	beq.n	800dfb2 <_raise_r+0x4c>
 800df9c:	1c59      	adds	r1, r3, #1
 800df9e:	d103      	bne.n	800dfa8 <_raise_r+0x42>
 800dfa0:	2316      	movs	r3, #22
 800dfa2:	6003      	str	r3, [r0, #0]
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	e7e7      	b.n	800df78 <_raise_r+0x12>
 800dfa8:	2400      	movs	r4, #0
 800dfaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfae:	4628      	mov	r0, r5
 800dfb0:	4798      	blx	r3
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	e7e0      	b.n	800df78 <_raise_r+0x12>
	...

0800dfb8 <raise>:
 800dfb8:	4b02      	ldr	r3, [pc, #8]	; (800dfc4 <raise+0xc>)
 800dfba:	4601      	mov	r1, r0
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	f7ff bfd2 	b.w	800df66 <_raise_r>
 800dfc2:	bf00      	nop
 800dfc4:	200000e8 	.word	0x200000e8

0800dfc8 <_kill_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	; (800dfe8 <_kill_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7f4 f86d 	bl	80020b4 <_kill>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_kill_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_kill_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	2000592c 	.word	0x2000592c

0800dfec <_getpid_r>:
 800dfec:	f7f4 b85a 	b.w	80020a4 <_getpid>

0800dff0 <cos>:
 800dff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dff2:	ec53 2b10 	vmov	r2, r3, d0
 800dff6:	4826      	ldr	r0, [pc, #152]	; (800e090 <cos+0xa0>)
 800dff8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dffc:	4281      	cmp	r1, r0
 800dffe:	dc06      	bgt.n	800e00e <cos+0x1e>
 800e000:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e088 <cos+0x98>
 800e004:	b005      	add	sp, #20
 800e006:	f85d eb04 	ldr.w	lr, [sp], #4
 800e00a:	f000 b8f1 	b.w	800e1f0 <__kernel_cos>
 800e00e:	4821      	ldr	r0, [pc, #132]	; (800e094 <cos+0xa4>)
 800e010:	4281      	cmp	r1, r0
 800e012:	dd09      	ble.n	800e028 <cos+0x38>
 800e014:	ee10 0a10 	vmov	r0, s0
 800e018:	4619      	mov	r1, r3
 800e01a:	f7f2 f93d 	bl	8000298 <__aeabi_dsub>
 800e01e:	ec41 0b10 	vmov	d0, r0, r1
 800e022:	b005      	add	sp, #20
 800e024:	f85d fb04 	ldr.w	pc, [sp], #4
 800e028:	4668      	mov	r0, sp
 800e02a:	f000 fa69 	bl	800e500 <__ieee754_rem_pio2>
 800e02e:	f000 0003 	and.w	r0, r0, #3
 800e032:	2801      	cmp	r0, #1
 800e034:	d00b      	beq.n	800e04e <cos+0x5e>
 800e036:	2802      	cmp	r0, #2
 800e038:	d016      	beq.n	800e068 <cos+0x78>
 800e03a:	b9e0      	cbnz	r0, 800e076 <cos+0x86>
 800e03c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e040:	ed9d 0b00 	vldr	d0, [sp]
 800e044:	f000 f8d4 	bl	800e1f0 <__kernel_cos>
 800e048:	ec51 0b10 	vmov	r0, r1, d0
 800e04c:	e7e7      	b.n	800e01e <cos+0x2e>
 800e04e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e052:	ed9d 0b00 	vldr	d0, [sp]
 800e056:	f000 f993 	bl	800e380 <__kernel_sin>
 800e05a:	ec53 2b10 	vmov	r2, r3, d0
 800e05e:	ee10 0a10 	vmov	r0, s0
 800e062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e066:	e7da      	b.n	800e01e <cos+0x2e>
 800e068:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e06c:	ed9d 0b00 	vldr	d0, [sp]
 800e070:	f000 f8be 	bl	800e1f0 <__kernel_cos>
 800e074:	e7f1      	b.n	800e05a <cos+0x6a>
 800e076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e07a:	ed9d 0b00 	vldr	d0, [sp]
 800e07e:	2001      	movs	r0, #1
 800e080:	f000 f97e 	bl	800e380 <__kernel_sin>
 800e084:	e7e0      	b.n	800e048 <cos+0x58>
 800e086:	bf00      	nop
	...
 800e090:	3fe921fb 	.word	0x3fe921fb
 800e094:	7fefffff 	.word	0x7fefffff

0800e098 <sin>:
 800e098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e09a:	ec53 2b10 	vmov	r2, r3, d0
 800e09e:	4828      	ldr	r0, [pc, #160]	; (800e140 <sin+0xa8>)
 800e0a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0a4:	4281      	cmp	r1, r0
 800e0a6:	dc07      	bgt.n	800e0b8 <sin+0x20>
 800e0a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e138 <sin+0xa0>
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	b005      	add	sp, #20
 800e0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0b4:	f000 b964 	b.w	800e380 <__kernel_sin>
 800e0b8:	4822      	ldr	r0, [pc, #136]	; (800e144 <sin+0xac>)
 800e0ba:	4281      	cmp	r1, r0
 800e0bc:	dd09      	ble.n	800e0d2 <sin+0x3a>
 800e0be:	ee10 0a10 	vmov	r0, s0
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	f7f2 f8e8 	bl	8000298 <__aeabi_dsub>
 800e0c8:	ec41 0b10 	vmov	d0, r0, r1
 800e0cc:	b005      	add	sp, #20
 800e0ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0d2:	4668      	mov	r0, sp
 800e0d4:	f000 fa14 	bl	800e500 <__ieee754_rem_pio2>
 800e0d8:	f000 0003 	and.w	r0, r0, #3
 800e0dc:	2801      	cmp	r0, #1
 800e0de:	d00c      	beq.n	800e0fa <sin+0x62>
 800e0e0:	2802      	cmp	r0, #2
 800e0e2:	d011      	beq.n	800e108 <sin+0x70>
 800e0e4:	b9f0      	cbnz	r0, 800e124 <sin+0x8c>
 800e0e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0ea:	ed9d 0b00 	vldr	d0, [sp]
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	f000 f946 	bl	800e380 <__kernel_sin>
 800e0f4:	ec51 0b10 	vmov	r0, r1, d0
 800e0f8:	e7e6      	b.n	800e0c8 <sin+0x30>
 800e0fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0fe:	ed9d 0b00 	vldr	d0, [sp]
 800e102:	f000 f875 	bl	800e1f0 <__kernel_cos>
 800e106:	e7f5      	b.n	800e0f4 <sin+0x5c>
 800e108:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e10c:	ed9d 0b00 	vldr	d0, [sp]
 800e110:	2001      	movs	r0, #1
 800e112:	f000 f935 	bl	800e380 <__kernel_sin>
 800e116:	ec53 2b10 	vmov	r2, r3, d0
 800e11a:	ee10 0a10 	vmov	r0, s0
 800e11e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e122:	e7d1      	b.n	800e0c8 <sin+0x30>
 800e124:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e128:	ed9d 0b00 	vldr	d0, [sp]
 800e12c:	f000 f860 	bl	800e1f0 <__kernel_cos>
 800e130:	e7f1      	b.n	800e116 <sin+0x7e>
 800e132:	bf00      	nop
 800e134:	f3af 8000 	nop.w
	...
 800e140:	3fe921fb 	.word	0x3fe921fb
 800e144:	7fefffff 	.word	0x7fefffff

0800e148 <fmaxf>:
 800e148:	b508      	push	{r3, lr}
 800e14a:	ed2d 8b02 	vpush	{d8}
 800e14e:	eeb0 8a40 	vmov.f32	s16, s0
 800e152:	eef0 8a60 	vmov.f32	s17, s1
 800e156:	f000 f82d 	bl	800e1b4 <__fpclassifyf>
 800e15a:	b148      	cbz	r0, 800e170 <fmaxf+0x28>
 800e15c:	eeb0 0a68 	vmov.f32	s0, s17
 800e160:	f000 f828 	bl	800e1b4 <__fpclassifyf>
 800e164:	b130      	cbz	r0, 800e174 <fmaxf+0x2c>
 800e166:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16e:	dc01      	bgt.n	800e174 <fmaxf+0x2c>
 800e170:	eeb0 8a68 	vmov.f32	s16, s17
 800e174:	eeb0 0a48 	vmov.f32	s0, s16
 800e178:	ecbd 8b02 	vpop	{d8}
 800e17c:	bd08      	pop	{r3, pc}

0800e17e <fminf>:
 800e17e:	b508      	push	{r3, lr}
 800e180:	ed2d 8b02 	vpush	{d8}
 800e184:	eeb0 8a40 	vmov.f32	s16, s0
 800e188:	eef0 8a60 	vmov.f32	s17, s1
 800e18c:	f000 f812 	bl	800e1b4 <__fpclassifyf>
 800e190:	b148      	cbz	r0, 800e1a6 <fminf+0x28>
 800e192:	eeb0 0a68 	vmov.f32	s0, s17
 800e196:	f000 f80d 	bl	800e1b4 <__fpclassifyf>
 800e19a:	b130      	cbz	r0, 800e1aa <fminf+0x2c>
 800e19c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a4:	d401      	bmi.n	800e1aa <fminf+0x2c>
 800e1a6:	eeb0 8a68 	vmov.f32	s16, s17
 800e1aa:	eeb0 0a48 	vmov.f32	s0, s16
 800e1ae:	ecbd 8b02 	vpop	{d8}
 800e1b2:	bd08      	pop	{r3, pc}

0800e1b4 <__fpclassifyf>:
 800e1b4:	ee10 3a10 	vmov	r3, s0
 800e1b8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800e1bc:	d00d      	beq.n	800e1da <__fpclassifyf+0x26>
 800e1be:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800e1c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e1c6:	d30a      	bcc.n	800e1de <__fpclassifyf+0x2a>
 800e1c8:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <__fpclassifyf+0x34>)
 800e1ca:	1e42      	subs	r2, r0, #1
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d908      	bls.n	800e1e2 <__fpclassifyf+0x2e>
 800e1d0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800e1d4:	4258      	negs	r0, r3
 800e1d6:	4158      	adcs	r0, r3
 800e1d8:	4770      	bx	lr
 800e1da:	2002      	movs	r0, #2
 800e1dc:	4770      	bx	lr
 800e1de:	2004      	movs	r0, #4
 800e1e0:	4770      	bx	lr
 800e1e2:	2003      	movs	r0, #3
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	007ffffe 	.word	0x007ffffe
 800e1ec:	00000000 	.word	0x00000000

0800e1f0 <__kernel_cos>:
 800e1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	ec57 6b10 	vmov	r6, r7, d0
 800e1f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e1fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e200:	ed8d 1b00 	vstr	d1, [sp]
 800e204:	da07      	bge.n	800e216 <__kernel_cos+0x26>
 800e206:	ee10 0a10 	vmov	r0, s0
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fcac 	bl	8000b68 <__aeabi_d2iz>
 800e210:	2800      	cmp	r0, #0
 800e212:	f000 8088 	beq.w	800e326 <__kernel_cos+0x136>
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	4630      	mov	r0, r6
 800e21c:	4639      	mov	r1, r7
 800e21e:	f7f2 f9f3 	bl	8000608 <__aeabi_dmul>
 800e222:	4b51      	ldr	r3, [pc, #324]	; (800e368 <__kernel_cos+0x178>)
 800e224:	2200      	movs	r2, #0
 800e226:	4604      	mov	r4, r0
 800e228:	460d      	mov	r5, r1
 800e22a:	f7f2 f9ed 	bl	8000608 <__aeabi_dmul>
 800e22e:	a340      	add	r3, pc, #256	; (adr r3, 800e330 <__kernel_cos+0x140>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	4682      	mov	sl, r0
 800e236:	468b      	mov	fp, r1
 800e238:	4620      	mov	r0, r4
 800e23a:	4629      	mov	r1, r5
 800e23c:	f7f2 f9e4 	bl	8000608 <__aeabi_dmul>
 800e240:	a33d      	add	r3, pc, #244	; (adr r3, 800e338 <__kernel_cos+0x148>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	f7f2 f829 	bl	800029c <__adddf3>
 800e24a:	4622      	mov	r2, r4
 800e24c:	462b      	mov	r3, r5
 800e24e:	f7f2 f9db 	bl	8000608 <__aeabi_dmul>
 800e252:	a33b      	add	r3, pc, #236	; (adr r3, 800e340 <__kernel_cos+0x150>)
 800e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e258:	f7f2 f81e 	bl	8000298 <__aeabi_dsub>
 800e25c:	4622      	mov	r2, r4
 800e25e:	462b      	mov	r3, r5
 800e260:	f7f2 f9d2 	bl	8000608 <__aeabi_dmul>
 800e264:	a338      	add	r3, pc, #224	; (adr r3, 800e348 <__kernel_cos+0x158>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f817 	bl	800029c <__adddf3>
 800e26e:	4622      	mov	r2, r4
 800e270:	462b      	mov	r3, r5
 800e272:	f7f2 f9c9 	bl	8000608 <__aeabi_dmul>
 800e276:	a336      	add	r3, pc, #216	; (adr r3, 800e350 <__kernel_cos+0x160>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f80c 	bl	8000298 <__aeabi_dsub>
 800e280:	4622      	mov	r2, r4
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	a333      	add	r3, pc, #204	; (adr r3, 800e358 <__kernel_cos+0x168>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f2 f805 	bl	800029c <__adddf3>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 f9b7 	bl	8000608 <__aeabi_dmul>
 800e29a:	4622      	mov	r2, r4
 800e29c:	462b      	mov	r3, r5
 800e29e:	f7f2 f9b3 	bl	8000608 <__aeabi_dmul>
 800e2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	4639      	mov	r1, r7
 800e2ae:	f7f2 f9ab 	bl	8000608 <__aeabi_dmul>
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7f1 ffed 	bl	8000298 <__aeabi_dsub>
 800e2be:	4b2b      	ldr	r3, [pc, #172]	; (800e36c <__kernel_cos+0x17c>)
 800e2c0:	4598      	cmp	r8, r3
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	dc10      	bgt.n	800e2ea <__kernel_cos+0xfa>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f1 ffe2 	bl	8000298 <__aeabi_dsub>
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4926      	ldr	r1, [pc, #152]	; (800e370 <__kernel_cos+0x180>)
 800e2d8:	4602      	mov	r2, r0
 800e2da:	2000      	movs	r0, #0
 800e2dc:	f7f1 ffdc 	bl	8000298 <__aeabi_dsub>
 800e2e0:	ec41 0b10 	vmov	d0, r0, r1
 800e2e4:	b003      	add	sp, #12
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	4b22      	ldr	r3, [pc, #136]	; (800e374 <__kernel_cos+0x184>)
 800e2ec:	4920      	ldr	r1, [pc, #128]	; (800e370 <__kernel_cos+0x180>)
 800e2ee:	4598      	cmp	r8, r3
 800e2f0:	bfcc      	ite	gt
 800e2f2:	4d21      	ldrgt	r5, [pc, #132]	; (800e378 <__kernel_cos+0x188>)
 800e2f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e2f8:	2400      	movs	r4, #0
 800e2fa:	4622      	mov	r2, r4
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	2000      	movs	r0, #0
 800e300:	f7f1 ffca 	bl	8000298 <__aeabi_dsub>
 800e304:	4622      	mov	r2, r4
 800e306:	4680      	mov	r8, r0
 800e308:	4689      	mov	r9, r1
 800e30a:	462b      	mov	r3, r5
 800e30c:	4650      	mov	r0, sl
 800e30e:	4659      	mov	r1, fp
 800e310:	f7f1 ffc2 	bl	8000298 <__aeabi_dsub>
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	f7f1 ffbe 	bl	8000298 <__aeabi_dsub>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	e7da      	b.n	800e2dc <__kernel_cos+0xec>
 800e326:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e360 <__kernel_cos+0x170>
 800e32a:	e7db      	b.n	800e2e4 <__kernel_cos+0xf4>
 800e32c:	f3af 8000 	nop.w
 800e330:	be8838d4 	.word	0xbe8838d4
 800e334:	bda8fae9 	.word	0xbda8fae9
 800e338:	bdb4b1c4 	.word	0xbdb4b1c4
 800e33c:	3e21ee9e 	.word	0x3e21ee9e
 800e340:	809c52ad 	.word	0x809c52ad
 800e344:	3e927e4f 	.word	0x3e927e4f
 800e348:	19cb1590 	.word	0x19cb1590
 800e34c:	3efa01a0 	.word	0x3efa01a0
 800e350:	16c15177 	.word	0x16c15177
 800e354:	3f56c16c 	.word	0x3f56c16c
 800e358:	5555554c 	.word	0x5555554c
 800e35c:	3fa55555 	.word	0x3fa55555
 800e360:	00000000 	.word	0x00000000
 800e364:	3ff00000 	.word	0x3ff00000
 800e368:	3fe00000 	.word	0x3fe00000
 800e36c:	3fd33332 	.word	0x3fd33332
 800e370:	3ff00000 	.word	0x3ff00000
 800e374:	3fe90000 	.word	0x3fe90000
 800e378:	3fd20000 	.word	0x3fd20000
 800e37c:	00000000 	.word	0x00000000

0800e380 <__kernel_sin>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	ed2d 8b04 	vpush	{d8-d9}
 800e388:	eeb0 8a41 	vmov.f32	s16, s2
 800e38c:	eef0 8a61 	vmov.f32	s17, s3
 800e390:	ec55 4b10 	vmov	r4, r5, d0
 800e394:	b083      	sub	sp, #12
 800e396:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e39a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e39e:	9001      	str	r0, [sp, #4]
 800e3a0:	da06      	bge.n	800e3b0 <__kernel_sin+0x30>
 800e3a2:	ee10 0a10 	vmov	r0, s0
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f2 fbde 	bl	8000b68 <__aeabi_d2iz>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d051      	beq.n	800e454 <__kernel_sin+0xd4>
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	f7f2 f926 	bl	8000608 <__aeabi_dmul>
 800e3bc:	4682      	mov	sl, r0
 800e3be:	468b      	mov	fp, r1
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f2 f91e 	bl	8000608 <__aeabi_dmul>
 800e3cc:	a341      	add	r3, pc, #260	; (adr r3, 800e4d4 <__kernel_sin+0x154>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	4659      	mov	r1, fp
 800e3da:	f7f2 f915 	bl	8000608 <__aeabi_dmul>
 800e3de:	a33f      	add	r3, pc, #252	; (adr r3, 800e4dc <__kernel_sin+0x15c>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	f7f1 ff58 	bl	8000298 <__aeabi_dsub>
 800e3e8:	4652      	mov	r2, sl
 800e3ea:	465b      	mov	r3, fp
 800e3ec:	f7f2 f90c 	bl	8000608 <__aeabi_dmul>
 800e3f0:	a33c      	add	r3, pc, #240	; (adr r3, 800e4e4 <__kernel_sin+0x164>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f1 ff51 	bl	800029c <__adddf3>
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	f7f2 f903 	bl	8000608 <__aeabi_dmul>
 800e402:	a33a      	add	r3, pc, #232	; (adr r3, 800e4ec <__kernel_sin+0x16c>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ff46 	bl	8000298 <__aeabi_dsub>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f2 f8fa 	bl	8000608 <__aeabi_dmul>
 800e414:	a337      	add	r3, pc, #220	; (adr r3, 800e4f4 <__kernel_sin+0x174>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff3f 	bl	800029c <__adddf3>
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	4606      	mov	r6, r0
 800e422:	460f      	mov	r7, r1
 800e424:	b9eb      	cbnz	r3, 800e462 <__kernel_sin+0xe2>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	4650      	mov	r0, sl
 800e42c:	4659      	mov	r1, fp
 800e42e:	f7f2 f8eb 	bl	8000608 <__aeabi_dmul>
 800e432:	a325      	add	r3, pc, #148	; (adr r3, 800e4c8 <__kernel_sin+0x148>)
 800e434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e438:	f7f1 ff2e 	bl	8000298 <__aeabi_dsub>
 800e43c:	4642      	mov	r2, r8
 800e43e:	464b      	mov	r3, r9
 800e440:	f7f2 f8e2 	bl	8000608 <__aeabi_dmul>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4620      	mov	r0, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	f7f1 ff26 	bl	800029c <__adddf3>
 800e450:	4604      	mov	r4, r0
 800e452:	460d      	mov	r5, r1
 800e454:	ec45 4b10 	vmov	d0, r4, r5
 800e458:	b003      	add	sp, #12
 800e45a:	ecbd 8b04 	vpop	{d8-d9}
 800e45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e462:	4b1b      	ldr	r3, [pc, #108]	; (800e4d0 <__kernel_sin+0x150>)
 800e464:	ec51 0b18 	vmov	r0, r1, d8
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f8cd 	bl	8000608 <__aeabi_dmul>
 800e46e:	4632      	mov	r2, r6
 800e470:	ec41 0b19 	vmov	d9, r0, r1
 800e474:	463b      	mov	r3, r7
 800e476:	4640      	mov	r0, r8
 800e478:	4649      	mov	r1, r9
 800e47a:	f7f2 f8c5 	bl	8000608 <__aeabi_dmul>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	ec51 0b19 	vmov	r0, r1, d9
 800e486:	f7f1 ff07 	bl	8000298 <__aeabi_dsub>
 800e48a:	4652      	mov	r2, sl
 800e48c:	465b      	mov	r3, fp
 800e48e:	f7f2 f8bb 	bl	8000608 <__aeabi_dmul>
 800e492:	ec53 2b18 	vmov	r2, r3, d8
 800e496:	f7f1 feff 	bl	8000298 <__aeabi_dsub>
 800e49a:	a30b      	add	r3, pc, #44	; (adr r3, 800e4c8 <__kernel_sin+0x148>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	4606      	mov	r6, r0
 800e4a2:	460f      	mov	r7, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f2 f8ae 	bl	8000608 <__aeabi_dmul>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	4639      	mov	r1, r7
 800e4b4:	f7f1 fef2 	bl	800029c <__adddf3>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f7f1 feea 	bl	8000298 <__aeabi_dsub>
 800e4c4:	e7c4      	b.n	800e450 <__kernel_sin+0xd0>
 800e4c6:	bf00      	nop
 800e4c8:	55555549 	.word	0x55555549
 800e4cc:	3fc55555 	.word	0x3fc55555
 800e4d0:	3fe00000 	.word	0x3fe00000
 800e4d4:	5acfd57c 	.word	0x5acfd57c
 800e4d8:	3de5d93a 	.word	0x3de5d93a
 800e4dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e4e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e4e4:	57b1fe7d 	.word	0x57b1fe7d
 800e4e8:	3ec71de3 	.word	0x3ec71de3
 800e4ec:	19c161d5 	.word	0x19c161d5
 800e4f0:	3f2a01a0 	.word	0x3f2a01a0
 800e4f4:	1110f8a6 	.word	0x1110f8a6
 800e4f8:	3f811111 	.word	0x3f811111
 800e4fc:	00000000 	.word	0x00000000

0800e500 <__ieee754_rem_pio2>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	ed2d 8b02 	vpush	{d8}
 800e508:	ec55 4b10 	vmov	r4, r5, d0
 800e50c:	4bca      	ldr	r3, [pc, #808]	; (800e838 <__ieee754_rem_pio2+0x338>)
 800e50e:	b08b      	sub	sp, #44	; 0x2c
 800e510:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e514:	4598      	cmp	r8, r3
 800e516:	4682      	mov	sl, r0
 800e518:	9502      	str	r5, [sp, #8]
 800e51a:	dc08      	bgt.n	800e52e <__ieee754_rem_pio2+0x2e>
 800e51c:	2200      	movs	r2, #0
 800e51e:	2300      	movs	r3, #0
 800e520:	ed80 0b00 	vstr	d0, [r0]
 800e524:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e528:	f04f 0b00 	mov.w	fp, #0
 800e52c:	e028      	b.n	800e580 <__ieee754_rem_pio2+0x80>
 800e52e:	4bc3      	ldr	r3, [pc, #780]	; (800e83c <__ieee754_rem_pio2+0x33c>)
 800e530:	4598      	cmp	r8, r3
 800e532:	dc78      	bgt.n	800e626 <__ieee754_rem_pio2+0x126>
 800e534:	9b02      	ldr	r3, [sp, #8]
 800e536:	4ec2      	ldr	r6, [pc, #776]	; (800e840 <__ieee754_rem_pio2+0x340>)
 800e538:	2b00      	cmp	r3, #0
 800e53a:	ee10 0a10 	vmov	r0, s0
 800e53e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e800 <__ieee754_rem_pio2+0x300>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	4629      	mov	r1, r5
 800e546:	dd39      	ble.n	800e5bc <__ieee754_rem_pio2+0xbc>
 800e548:	f7f1 fea6 	bl	8000298 <__aeabi_dsub>
 800e54c:	45b0      	cmp	r8, r6
 800e54e:	4604      	mov	r4, r0
 800e550:	460d      	mov	r5, r1
 800e552:	d01b      	beq.n	800e58c <__ieee754_rem_pio2+0x8c>
 800e554:	a3ac      	add	r3, pc, #688	; (adr r3, 800e808 <__ieee754_rem_pio2+0x308>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	f7f1 fe9d 	bl	8000298 <__aeabi_dsub>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	e9ca 2300 	strd	r2, r3, [sl]
 800e566:	4620      	mov	r0, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	f7f1 fe95 	bl	8000298 <__aeabi_dsub>
 800e56e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e808 <__ieee754_rem_pio2+0x308>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	f7f1 fe90 	bl	8000298 <__aeabi_dsub>
 800e578:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e57c:	f04f 0b01 	mov.w	fp, #1
 800e580:	4658      	mov	r0, fp
 800e582:	b00b      	add	sp, #44	; 0x2c
 800e584:	ecbd 8b02 	vpop	{d8}
 800e588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e810 <__ieee754_rem_pio2+0x310>)
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f7f1 fe81 	bl	8000298 <__aeabi_dsub>
 800e596:	a3a0      	add	r3, pc, #640	; (adr r3, 800e818 <__ieee754_rem_pio2+0x318>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	4604      	mov	r4, r0
 800e59e:	460d      	mov	r5, r1
 800e5a0:	f7f1 fe7a 	bl	8000298 <__aeabi_dsub>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	e9ca 2300 	strd	r2, r3, [sl]
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	f7f1 fe72 	bl	8000298 <__aeabi_dsub>
 800e5b4:	a398      	add	r3, pc, #608	; (adr r3, 800e818 <__ieee754_rem_pio2+0x318>)
 800e5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ba:	e7db      	b.n	800e574 <__ieee754_rem_pio2+0x74>
 800e5bc:	f7f1 fe6e 	bl	800029c <__adddf3>
 800e5c0:	45b0      	cmp	r8, r6
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	460d      	mov	r5, r1
 800e5c6:	d016      	beq.n	800e5f6 <__ieee754_rem_pio2+0xf6>
 800e5c8:	a38f      	add	r3, pc, #572	; (adr r3, 800e808 <__ieee754_rem_pio2+0x308>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f1 fe65 	bl	800029c <__adddf3>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	e9ca 2300 	strd	r2, r3, [sl]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	4629      	mov	r1, r5
 800e5de:	f7f1 fe5b 	bl	8000298 <__aeabi_dsub>
 800e5e2:	a389      	add	r3, pc, #548	; (adr r3, 800e808 <__ieee754_rem_pio2+0x308>)
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f7f1 fe58 	bl	800029c <__adddf3>
 800e5ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e5f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e5f4:	e7c4      	b.n	800e580 <__ieee754_rem_pio2+0x80>
 800e5f6:	a386      	add	r3, pc, #536	; (adr r3, 800e810 <__ieee754_rem_pio2+0x310>)
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	f7f1 fe4e 	bl	800029c <__adddf3>
 800e600:	a385      	add	r3, pc, #532	; (adr r3, 800e818 <__ieee754_rem_pio2+0x318>)
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	4604      	mov	r4, r0
 800e608:	460d      	mov	r5, r1
 800e60a:	f7f1 fe47 	bl	800029c <__adddf3>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	e9ca 2300 	strd	r2, r3, [sl]
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	f7f1 fe3d 	bl	8000298 <__aeabi_dsub>
 800e61e:	a37e      	add	r3, pc, #504	; (adr r3, 800e818 <__ieee754_rem_pio2+0x318>)
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	e7e0      	b.n	800e5e8 <__ieee754_rem_pio2+0xe8>
 800e626:	4b87      	ldr	r3, [pc, #540]	; (800e844 <__ieee754_rem_pio2+0x344>)
 800e628:	4598      	cmp	r8, r3
 800e62a:	f300 80d8 	bgt.w	800e7de <__ieee754_rem_pio2+0x2de>
 800e62e:	f000 f96d 	bl	800e90c <fabs>
 800e632:	ec55 4b10 	vmov	r4, r5, d0
 800e636:	ee10 0a10 	vmov	r0, s0
 800e63a:	a379      	add	r3, pc, #484	; (adr r3, 800e820 <__ieee754_rem_pio2+0x320>)
 800e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e640:	4629      	mov	r1, r5
 800e642:	f7f1 ffe1 	bl	8000608 <__aeabi_dmul>
 800e646:	4b80      	ldr	r3, [pc, #512]	; (800e848 <__ieee754_rem_pio2+0x348>)
 800e648:	2200      	movs	r2, #0
 800e64a:	f7f1 fe27 	bl	800029c <__adddf3>
 800e64e:	f7f2 fa8b 	bl	8000b68 <__aeabi_d2iz>
 800e652:	4683      	mov	fp, r0
 800e654:	f7f1 ff6e 	bl	8000534 <__aeabi_i2d>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	ec43 2b18 	vmov	d8, r2, r3
 800e660:	a367      	add	r3, pc, #412	; (adr r3, 800e800 <__ieee754_rem_pio2+0x300>)
 800e662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e666:	f7f1 ffcf 	bl	8000608 <__aeabi_dmul>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4620      	mov	r0, r4
 800e670:	4629      	mov	r1, r5
 800e672:	f7f1 fe11 	bl	8000298 <__aeabi_dsub>
 800e676:	a364      	add	r3, pc, #400	; (adr r3, 800e808 <__ieee754_rem_pio2+0x308>)
 800e678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67c:	4606      	mov	r6, r0
 800e67e:	460f      	mov	r7, r1
 800e680:	ec51 0b18 	vmov	r0, r1, d8
 800e684:	f7f1 ffc0 	bl	8000608 <__aeabi_dmul>
 800e688:	f1bb 0f1f 	cmp.w	fp, #31
 800e68c:	4604      	mov	r4, r0
 800e68e:	460d      	mov	r5, r1
 800e690:	dc0d      	bgt.n	800e6ae <__ieee754_rem_pio2+0x1ae>
 800e692:	4b6e      	ldr	r3, [pc, #440]	; (800e84c <__ieee754_rem_pio2+0x34c>)
 800e694:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e69c:	4543      	cmp	r3, r8
 800e69e:	d006      	beq.n	800e6ae <__ieee754_rem_pio2+0x1ae>
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	462b      	mov	r3, r5
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	4639      	mov	r1, r7
 800e6a8:	f7f1 fdf6 	bl	8000298 <__aeabi_dsub>
 800e6ac:	e00e      	b.n	800e6cc <__ieee754_rem_pio2+0x1cc>
 800e6ae:	462b      	mov	r3, r5
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	f7f1 fdef 	bl	8000298 <__aeabi_dsub>
 800e6ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e6be:	9303      	str	r3, [sp, #12]
 800e6c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e6c8:	2b10      	cmp	r3, #16
 800e6ca:	dc02      	bgt.n	800e6d2 <__ieee754_rem_pio2+0x1d2>
 800e6cc:	e9ca 0100 	strd	r0, r1, [sl]
 800e6d0:	e039      	b.n	800e746 <__ieee754_rem_pio2+0x246>
 800e6d2:	a34f      	add	r3, pc, #316	; (adr r3, 800e810 <__ieee754_rem_pio2+0x310>)
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	ec51 0b18 	vmov	r0, r1, d8
 800e6dc:	f7f1 ff94 	bl	8000608 <__aeabi_dmul>
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	460d      	mov	r5, r1
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	f7f1 fdd4 	bl	8000298 <__aeabi_dsub>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	4680      	mov	r8, r0
 800e6f6:	4689      	mov	r9, r1
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f1 fdcc 	bl	8000298 <__aeabi_dsub>
 800e700:	4622      	mov	r2, r4
 800e702:	462b      	mov	r3, r5
 800e704:	f7f1 fdc8 	bl	8000298 <__aeabi_dsub>
 800e708:	a343      	add	r3, pc, #268	; (adr r3, 800e818 <__ieee754_rem_pio2+0x318>)
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	ec51 0b18 	vmov	r0, r1, d8
 800e716:	f7f1 ff77 	bl	8000608 <__aeabi_dmul>
 800e71a:	4622      	mov	r2, r4
 800e71c:	462b      	mov	r3, r5
 800e71e:	f7f1 fdbb 	bl	8000298 <__aeabi_dsub>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4604      	mov	r4, r0
 800e728:	460d      	mov	r5, r1
 800e72a:	4640      	mov	r0, r8
 800e72c:	4649      	mov	r1, r9
 800e72e:	f7f1 fdb3 	bl	8000298 <__aeabi_dsub>
 800e732:	9a03      	ldr	r2, [sp, #12]
 800e734:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	2b31      	cmp	r3, #49	; 0x31
 800e73c:	dc24      	bgt.n	800e788 <__ieee754_rem_pio2+0x288>
 800e73e:	e9ca 0100 	strd	r0, r1, [sl]
 800e742:	4646      	mov	r6, r8
 800e744:	464f      	mov	r7, r9
 800e746:	e9da 8900 	ldrd	r8, r9, [sl]
 800e74a:	4630      	mov	r0, r6
 800e74c:	4642      	mov	r2, r8
 800e74e:	464b      	mov	r3, r9
 800e750:	4639      	mov	r1, r7
 800e752:	f7f1 fda1 	bl	8000298 <__aeabi_dsub>
 800e756:	462b      	mov	r3, r5
 800e758:	4622      	mov	r2, r4
 800e75a:	f7f1 fd9d 	bl	8000298 <__aeabi_dsub>
 800e75e:	9b02      	ldr	r3, [sp, #8]
 800e760:	2b00      	cmp	r3, #0
 800e762:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e766:	f6bf af0b 	bge.w	800e580 <__ieee754_rem_pio2+0x80>
 800e76a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e76e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e776:	f8ca 8000 	str.w	r8, [sl]
 800e77a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e77e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e782:	f1cb 0b00 	rsb	fp, fp, #0
 800e786:	e6fb      	b.n	800e580 <__ieee754_rem_pio2+0x80>
 800e788:	a327      	add	r3, pc, #156	; (adr r3, 800e828 <__ieee754_rem_pio2+0x328>)
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	ec51 0b18 	vmov	r0, r1, d8
 800e792:	f7f1 ff39 	bl	8000608 <__aeabi_dmul>
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	f7f1 fd79 	bl	8000298 <__aeabi_dsub>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4606      	mov	r6, r0
 800e7ac:	460f      	mov	r7, r1
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	f7f1 fd71 	bl	8000298 <__aeabi_dsub>
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	462b      	mov	r3, r5
 800e7ba:	f7f1 fd6d 	bl	8000298 <__aeabi_dsub>
 800e7be:	a31c      	add	r3, pc, #112	; (adr r3, 800e830 <__ieee754_rem_pio2+0x330>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	460d      	mov	r5, r1
 800e7c8:	ec51 0b18 	vmov	r0, r1, d8
 800e7cc:	f7f1 ff1c 	bl	8000608 <__aeabi_dmul>
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	462b      	mov	r3, r5
 800e7d4:	f7f1 fd60 	bl	8000298 <__aeabi_dsub>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	460d      	mov	r5, r1
 800e7dc:	e760      	b.n	800e6a0 <__ieee754_rem_pio2+0x1a0>
 800e7de:	4b1c      	ldr	r3, [pc, #112]	; (800e850 <__ieee754_rem_pio2+0x350>)
 800e7e0:	4598      	cmp	r8, r3
 800e7e2:	dd37      	ble.n	800e854 <__ieee754_rem_pio2+0x354>
 800e7e4:	ee10 2a10 	vmov	r2, s0
 800e7e8:	462b      	mov	r3, r5
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	f7f1 fd53 	bl	8000298 <__aeabi_dsub>
 800e7f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7f6:	e9ca 0100 	strd	r0, r1, [sl]
 800e7fa:	e695      	b.n	800e528 <__ieee754_rem_pio2+0x28>
 800e7fc:	f3af 8000 	nop.w
 800e800:	54400000 	.word	0x54400000
 800e804:	3ff921fb 	.word	0x3ff921fb
 800e808:	1a626331 	.word	0x1a626331
 800e80c:	3dd0b461 	.word	0x3dd0b461
 800e810:	1a600000 	.word	0x1a600000
 800e814:	3dd0b461 	.word	0x3dd0b461
 800e818:	2e037073 	.word	0x2e037073
 800e81c:	3ba3198a 	.word	0x3ba3198a
 800e820:	6dc9c883 	.word	0x6dc9c883
 800e824:	3fe45f30 	.word	0x3fe45f30
 800e828:	2e000000 	.word	0x2e000000
 800e82c:	3ba3198a 	.word	0x3ba3198a
 800e830:	252049c1 	.word	0x252049c1
 800e834:	397b839a 	.word	0x397b839a
 800e838:	3fe921fb 	.word	0x3fe921fb
 800e83c:	4002d97b 	.word	0x4002d97b
 800e840:	3ff921fb 	.word	0x3ff921fb
 800e844:	413921fb 	.word	0x413921fb
 800e848:	3fe00000 	.word	0x3fe00000
 800e84c:	0800f71c 	.word	0x0800f71c
 800e850:	7fefffff 	.word	0x7fefffff
 800e854:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e858:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e85c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e860:	4620      	mov	r0, r4
 800e862:	460d      	mov	r5, r1
 800e864:	f7f2 f980 	bl	8000b68 <__aeabi_d2iz>
 800e868:	f7f1 fe64 	bl	8000534 <__aeabi_i2d>
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	4620      	mov	r0, r4
 800e872:	4629      	mov	r1, r5
 800e874:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e878:	f7f1 fd0e 	bl	8000298 <__aeabi_dsub>
 800e87c:	4b21      	ldr	r3, [pc, #132]	; (800e904 <__ieee754_rem_pio2+0x404>)
 800e87e:	2200      	movs	r2, #0
 800e880:	f7f1 fec2 	bl	8000608 <__aeabi_dmul>
 800e884:	460d      	mov	r5, r1
 800e886:	4604      	mov	r4, r0
 800e888:	f7f2 f96e 	bl	8000b68 <__aeabi_d2iz>
 800e88c:	f7f1 fe52 	bl	8000534 <__aeabi_i2d>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4620      	mov	r0, r4
 800e896:	4629      	mov	r1, r5
 800e898:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e89c:	f7f1 fcfc 	bl	8000298 <__aeabi_dsub>
 800e8a0:	4b18      	ldr	r3, [pc, #96]	; (800e904 <__ieee754_rem_pio2+0x404>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f7f1 feb0 	bl	8000608 <__aeabi_dmul>
 800e8a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e8b0:	2703      	movs	r7, #3
 800e8b2:	2400      	movs	r4, #0
 800e8b4:	2500      	movs	r5, #0
 800e8b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e8ba:	4622      	mov	r2, r4
 800e8bc:	462b      	mov	r3, r5
 800e8be:	46b9      	mov	r9, r7
 800e8c0:	3f01      	subs	r7, #1
 800e8c2:	f7f2 f909 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d1f5      	bne.n	800e8b6 <__ieee754_rem_pio2+0x3b6>
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <__ieee754_rem_pio2+0x408>)
 800e8cc:	9301      	str	r3, [sp, #4]
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	464b      	mov	r3, r9
 800e8d6:	4651      	mov	r1, sl
 800e8d8:	a804      	add	r0, sp, #16
 800e8da:	f000 f821 	bl	800e920 <__kernel_rem_pio2>
 800e8de:	9b02      	ldr	r3, [sp, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	4683      	mov	fp, r0
 800e8e4:	f6bf ae4c 	bge.w	800e580 <__ieee754_rem_pio2+0x80>
 800e8e8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8f0:	e9ca 2300 	strd	r2, r3, [sl]
 800e8f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e8f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e900:	e73f      	b.n	800e782 <__ieee754_rem_pio2+0x282>
 800e902:	bf00      	nop
 800e904:	41700000 	.word	0x41700000
 800e908:	0800f79c 	.word	0x0800f79c

0800e90c <fabs>:
 800e90c:	ec51 0b10 	vmov	r0, r1, d0
 800e910:	ee10 2a10 	vmov	r2, s0
 800e914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e918:	ec43 2b10 	vmov	d0, r2, r3
 800e91c:	4770      	bx	lr
	...

0800e920 <__kernel_rem_pio2>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	ed2d 8b02 	vpush	{d8}
 800e928:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e92c:	f112 0f14 	cmn.w	r2, #20
 800e930:	9306      	str	r3, [sp, #24]
 800e932:	9104      	str	r1, [sp, #16]
 800e934:	4bc2      	ldr	r3, [pc, #776]	; (800ec40 <__kernel_rem_pio2+0x320>)
 800e936:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e938:	9009      	str	r0, [sp, #36]	; 0x24
 800e93a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	9b06      	ldr	r3, [sp, #24]
 800e942:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e946:	bfa8      	it	ge
 800e948:	1ed4      	subge	r4, r2, #3
 800e94a:	9305      	str	r3, [sp, #20]
 800e94c:	bfb2      	itee	lt
 800e94e:	2400      	movlt	r4, #0
 800e950:	2318      	movge	r3, #24
 800e952:	fb94 f4f3 	sdivge	r4, r4, r3
 800e956:	f06f 0317 	mvn.w	r3, #23
 800e95a:	fb04 3303 	mla	r3, r4, r3, r3
 800e95e:	eb03 0a02 	add.w	sl, r3, r2
 800e962:	9b00      	ldr	r3, [sp, #0]
 800e964:	9a05      	ldr	r2, [sp, #20]
 800e966:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ec30 <__kernel_rem_pio2+0x310>
 800e96a:	eb03 0802 	add.w	r8, r3, r2
 800e96e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e970:	1aa7      	subs	r7, r4, r2
 800e972:	ae20      	add	r6, sp, #128	; 0x80
 800e974:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e978:	2500      	movs	r5, #0
 800e97a:	4545      	cmp	r5, r8
 800e97c:	dd13      	ble.n	800e9a6 <__kernel_rem_pio2+0x86>
 800e97e:	9b06      	ldr	r3, [sp, #24]
 800e980:	aa20      	add	r2, sp, #128	; 0x80
 800e982:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e986:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e98a:	f04f 0800 	mov.w	r8, #0
 800e98e:	9b00      	ldr	r3, [sp, #0]
 800e990:	4598      	cmp	r8, r3
 800e992:	dc31      	bgt.n	800e9f8 <__kernel_rem_pio2+0xd8>
 800e994:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ec30 <__kernel_rem_pio2+0x310>
 800e998:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9a0:	462f      	mov	r7, r5
 800e9a2:	2600      	movs	r6, #0
 800e9a4:	e01b      	b.n	800e9de <__kernel_rem_pio2+0xbe>
 800e9a6:	42ef      	cmn	r7, r5
 800e9a8:	d407      	bmi.n	800e9ba <__kernel_rem_pio2+0x9a>
 800e9aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e9ae:	f7f1 fdc1 	bl	8000534 <__aeabi_i2d>
 800e9b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e9b6:	3501      	adds	r5, #1
 800e9b8:	e7df      	b.n	800e97a <__kernel_rem_pio2+0x5a>
 800e9ba:	ec51 0b18 	vmov	r0, r1, d8
 800e9be:	e7f8      	b.n	800e9b2 <__kernel_rem_pio2+0x92>
 800e9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e9c8:	f7f1 fe1e 	bl	8000608 <__aeabi_dmul>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9d4:	f7f1 fc62 	bl	800029c <__adddf3>
 800e9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9dc:	3601      	adds	r6, #1
 800e9de:	9b05      	ldr	r3, [sp, #20]
 800e9e0:	429e      	cmp	r6, r3
 800e9e2:	f1a7 0708 	sub.w	r7, r7, #8
 800e9e6:	ddeb      	ble.n	800e9c0 <__kernel_rem_pio2+0xa0>
 800e9e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9ec:	f108 0801 	add.w	r8, r8, #1
 800e9f0:	ecab 7b02 	vstmia	fp!, {d7}
 800e9f4:	3508      	adds	r5, #8
 800e9f6:	e7ca      	b.n	800e98e <__kernel_rem_pio2+0x6e>
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	aa0c      	add	r2, sp, #48	; 0x30
 800e9fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea02:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ea04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea08:	9c00      	ldr	r4, [sp, #0]
 800ea0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea0c:	00e3      	lsls	r3, r4, #3
 800ea0e:	9308      	str	r3, [sp, #32]
 800ea10:	ab98      	add	r3, sp, #608	; 0x260
 800ea12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ea1a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ea1e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ea24:	46c3      	mov	fp, r8
 800ea26:	46a1      	mov	r9, r4
 800ea28:	f1b9 0f00 	cmp.w	r9, #0
 800ea2c:	f1a5 0508 	sub.w	r5, r5, #8
 800ea30:	dc77      	bgt.n	800eb22 <__kernel_rem_pio2+0x202>
 800ea32:	ec47 6b10 	vmov	d0, r6, r7
 800ea36:	4650      	mov	r0, sl
 800ea38:	f000 fac2 	bl	800efc0 <scalbn>
 800ea3c:	ec57 6b10 	vmov	r6, r7, d0
 800ea40:	2200      	movs	r2, #0
 800ea42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea46:	ee10 0a10 	vmov	r0, s0
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	f7f1 fddc 	bl	8000608 <__aeabi_dmul>
 800ea50:	ec41 0b10 	vmov	d0, r0, r1
 800ea54:	f000 fb34 	bl	800f0c0 <floor>
 800ea58:	4b7a      	ldr	r3, [pc, #488]	; (800ec44 <__kernel_rem_pio2+0x324>)
 800ea5a:	ec51 0b10 	vmov	r0, r1, d0
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f7f1 fdd2 	bl	8000608 <__aeabi_dmul>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f1 fc14 	bl	8000298 <__aeabi_dsub>
 800ea70:	460f      	mov	r7, r1
 800ea72:	4606      	mov	r6, r0
 800ea74:	f7f2 f878 	bl	8000b68 <__aeabi_d2iz>
 800ea78:	9002      	str	r0, [sp, #8]
 800ea7a:	f7f1 fd5b 	bl	8000534 <__aeabi_i2d>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f1 fc07 	bl	8000298 <__aeabi_dsub>
 800ea8a:	f1ba 0f00 	cmp.w	sl, #0
 800ea8e:	4606      	mov	r6, r0
 800ea90:	460f      	mov	r7, r1
 800ea92:	dd6d      	ble.n	800eb70 <__kernel_rem_pio2+0x250>
 800ea94:	1e61      	subs	r1, r4, #1
 800ea96:	ab0c      	add	r3, sp, #48	; 0x30
 800ea98:	9d02      	ldr	r5, [sp, #8]
 800ea9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea9e:	f1ca 0018 	rsb	r0, sl, #24
 800eaa2:	fa43 f200 	asr.w	r2, r3, r0
 800eaa6:	4415      	add	r5, r2
 800eaa8:	4082      	lsls	r2, r0
 800eaaa:	1a9b      	subs	r3, r3, r2
 800eaac:	aa0c      	add	r2, sp, #48	; 0x30
 800eaae:	9502      	str	r5, [sp, #8]
 800eab0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800eab4:	f1ca 0217 	rsb	r2, sl, #23
 800eab8:	fa43 fb02 	asr.w	fp, r3, r2
 800eabc:	f1bb 0f00 	cmp.w	fp, #0
 800eac0:	dd65      	ble.n	800eb8e <__kernel_rem_pio2+0x26e>
 800eac2:	9b02      	ldr	r3, [sp, #8]
 800eac4:	2200      	movs	r2, #0
 800eac6:	3301      	adds	r3, #1
 800eac8:	9302      	str	r3, [sp, #8]
 800eaca:	4615      	mov	r5, r2
 800eacc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ead0:	4294      	cmp	r4, r2
 800ead2:	f300 809f 	bgt.w	800ec14 <__kernel_rem_pio2+0x2f4>
 800ead6:	f1ba 0f00 	cmp.w	sl, #0
 800eada:	dd07      	ble.n	800eaec <__kernel_rem_pio2+0x1cc>
 800eadc:	f1ba 0f01 	cmp.w	sl, #1
 800eae0:	f000 80c1 	beq.w	800ec66 <__kernel_rem_pio2+0x346>
 800eae4:	f1ba 0f02 	cmp.w	sl, #2
 800eae8:	f000 80c7 	beq.w	800ec7a <__kernel_rem_pio2+0x35a>
 800eaec:	f1bb 0f02 	cmp.w	fp, #2
 800eaf0:	d14d      	bne.n	800eb8e <__kernel_rem_pio2+0x26e>
 800eaf2:	4632      	mov	r2, r6
 800eaf4:	463b      	mov	r3, r7
 800eaf6:	4954      	ldr	r1, [pc, #336]	; (800ec48 <__kernel_rem_pio2+0x328>)
 800eaf8:	2000      	movs	r0, #0
 800eafa:	f7f1 fbcd 	bl	8000298 <__aeabi_dsub>
 800eafe:	4606      	mov	r6, r0
 800eb00:	460f      	mov	r7, r1
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	d043      	beq.n	800eb8e <__kernel_rem_pio2+0x26e>
 800eb06:	4650      	mov	r0, sl
 800eb08:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ec38 <__kernel_rem_pio2+0x318>
 800eb0c:	f000 fa58 	bl	800efc0 <scalbn>
 800eb10:	4630      	mov	r0, r6
 800eb12:	4639      	mov	r1, r7
 800eb14:	ec53 2b10 	vmov	r2, r3, d0
 800eb18:	f7f1 fbbe 	bl	8000298 <__aeabi_dsub>
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	460f      	mov	r7, r1
 800eb20:	e035      	b.n	800eb8e <__kernel_rem_pio2+0x26e>
 800eb22:	4b4a      	ldr	r3, [pc, #296]	; (800ec4c <__kernel_rem_pio2+0x32c>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	4630      	mov	r0, r6
 800eb28:	4639      	mov	r1, r7
 800eb2a:	f7f1 fd6d 	bl	8000608 <__aeabi_dmul>
 800eb2e:	f7f2 f81b 	bl	8000b68 <__aeabi_d2iz>
 800eb32:	f7f1 fcff 	bl	8000534 <__aeabi_i2d>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	ec43 2b18 	vmov	d8, r2, r3
 800eb3e:	4b44      	ldr	r3, [pc, #272]	; (800ec50 <__kernel_rem_pio2+0x330>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	f7f1 fd61 	bl	8000608 <__aeabi_dmul>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	f7f1 fba3 	bl	8000298 <__aeabi_dsub>
 800eb52:	f7f2 f809 	bl	8000b68 <__aeabi_d2iz>
 800eb56:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb5a:	f84b 0b04 	str.w	r0, [fp], #4
 800eb5e:	ec51 0b18 	vmov	r0, r1, d8
 800eb62:	f7f1 fb9b 	bl	800029c <__adddf3>
 800eb66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	460f      	mov	r7, r1
 800eb6e:	e75b      	b.n	800ea28 <__kernel_rem_pio2+0x108>
 800eb70:	d106      	bne.n	800eb80 <__kernel_rem_pio2+0x260>
 800eb72:	1e63      	subs	r3, r4, #1
 800eb74:	aa0c      	add	r2, sp, #48	; 0x30
 800eb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb7a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eb7e:	e79d      	b.n	800eabc <__kernel_rem_pio2+0x19c>
 800eb80:	4b34      	ldr	r3, [pc, #208]	; (800ec54 <__kernel_rem_pio2+0x334>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	f7f1 ffc6 	bl	8000b14 <__aeabi_dcmpge>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d140      	bne.n	800ec0e <__kernel_rem_pio2+0x2ee>
 800eb8c:	4683      	mov	fp, r0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2300      	movs	r3, #0
 800eb92:	4630      	mov	r0, r6
 800eb94:	4639      	mov	r1, r7
 800eb96:	f7f1 ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f000 80c1 	beq.w	800ed22 <__kernel_rem_pio2+0x402>
 800eba0:	1e65      	subs	r5, r4, #1
 800eba2:	462b      	mov	r3, r5
 800eba4:	2200      	movs	r2, #0
 800eba6:	9900      	ldr	r1, [sp, #0]
 800eba8:	428b      	cmp	r3, r1
 800ebaa:	da6d      	bge.n	800ec88 <__kernel_rem_pio2+0x368>
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	f000 808a 	beq.w	800ecc6 <__kernel_rem_pio2+0x3a6>
 800ebb2:	ab0c      	add	r3, sp, #48	; 0x30
 800ebb4:	f1aa 0a18 	sub.w	sl, sl, #24
 800ebb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 80ae 	beq.w	800ed1e <__kernel_rem_pio2+0x3fe>
 800ebc2:	4650      	mov	r0, sl
 800ebc4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ec38 <__kernel_rem_pio2+0x318>
 800ebc8:	f000 f9fa 	bl	800efc0 <scalbn>
 800ebcc:	1c6b      	adds	r3, r5, #1
 800ebce:	00da      	lsls	r2, r3, #3
 800ebd0:	9205      	str	r2, [sp, #20]
 800ebd2:	ec57 6b10 	vmov	r6, r7, d0
 800ebd6:	aa70      	add	r2, sp, #448	; 0x1c0
 800ebd8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ec4c <__kernel_rem_pio2+0x32c>
 800ebdc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ebe0:	462c      	mov	r4, r5
 800ebe2:	f04f 0800 	mov.w	r8, #0
 800ebe6:	2c00      	cmp	r4, #0
 800ebe8:	f280 80d4 	bge.w	800ed94 <__kernel_rem_pio2+0x474>
 800ebec:	462c      	mov	r4, r5
 800ebee:	2c00      	cmp	r4, #0
 800ebf0:	f2c0 8102 	blt.w	800edf8 <__kernel_rem_pio2+0x4d8>
 800ebf4:	4b18      	ldr	r3, [pc, #96]	; (800ec58 <__kernel_rem_pio2+0x338>)
 800ebf6:	461e      	mov	r6, r3
 800ebf8:	ab70      	add	r3, sp, #448	; 0x1c0
 800ebfa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ebfe:	1b2b      	subs	r3, r5, r4
 800ec00:	f04f 0900 	mov.w	r9, #0
 800ec04:	f04f 0a00 	mov.w	sl, #0
 800ec08:	2700      	movs	r7, #0
 800ec0a:	9306      	str	r3, [sp, #24]
 800ec0c:	e0e6      	b.n	800eddc <__kernel_rem_pio2+0x4bc>
 800ec0e:	f04f 0b02 	mov.w	fp, #2
 800ec12:	e756      	b.n	800eac2 <__kernel_rem_pio2+0x1a2>
 800ec14:	f8d8 3000 	ldr.w	r3, [r8]
 800ec18:	bb05      	cbnz	r5, 800ec5c <__kernel_rem_pio2+0x33c>
 800ec1a:	b123      	cbz	r3, 800ec26 <__kernel_rem_pio2+0x306>
 800ec1c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ec20:	f8c8 3000 	str.w	r3, [r8]
 800ec24:	2301      	movs	r3, #1
 800ec26:	3201      	adds	r2, #1
 800ec28:	f108 0804 	add.w	r8, r8, #4
 800ec2c:	461d      	mov	r5, r3
 800ec2e:	e74f      	b.n	800ead0 <__kernel_rem_pio2+0x1b0>
	...
 800ec3c:	3ff00000 	.word	0x3ff00000
 800ec40:	0800f8e8 	.word	0x0800f8e8
 800ec44:	40200000 	.word	0x40200000
 800ec48:	3ff00000 	.word	0x3ff00000
 800ec4c:	3e700000 	.word	0x3e700000
 800ec50:	41700000 	.word	0x41700000
 800ec54:	3fe00000 	.word	0x3fe00000
 800ec58:	0800f8a8 	.word	0x0800f8a8
 800ec5c:	1acb      	subs	r3, r1, r3
 800ec5e:	f8c8 3000 	str.w	r3, [r8]
 800ec62:	462b      	mov	r3, r5
 800ec64:	e7df      	b.n	800ec26 <__kernel_rem_pio2+0x306>
 800ec66:	1e62      	subs	r2, r4, #1
 800ec68:	ab0c      	add	r3, sp, #48	; 0x30
 800ec6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec72:	a90c      	add	r1, sp, #48	; 0x30
 800ec74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec78:	e738      	b.n	800eaec <__kernel_rem_pio2+0x1cc>
 800ec7a:	1e62      	subs	r2, r4, #1
 800ec7c:	ab0c      	add	r3, sp, #48	; 0x30
 800ec7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec86:	e7f4      	b.n	800ec72 <__kernel_rem_pio2+0x352>
 800ec88:	a90c      	add	r1, sp, #48	; 0x30
 800ec8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	430a      	orrs	r2, r1
 800ec92:	e788      	b.n	800eba6 <__kernel_rem_pio2+0x286>
 800ec94:	3301      	adds	r3, #1
 800ec96:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ec9a:	2900      	cmp	r1, #0
 800ec9c:	d0fa      	beq.n	800ec94 <__kernel_rem_pio2+0x374>
 800ec9e:	9a08      	ldr	r2, [sp, #32]
 800eca0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eca4:	446a      	add	r2, sp
 800eca6:	3a98      	subs	r2, #152	; 0x98
 800eca8:	9208      	str	r2, [sp, #32]
 800ecaa:	9a06      	ldr	r2, [sp, #24]
 800ecac:	a920      	add	r1, sp, #128	; 0x80
 800ecae:	18a2      	adds	r2, r4, r2
 800ecb0:	18e3      	adds	r3, r4, r3
 800ecb2:	f104 0801 	add.w	r8, r4, #1
 800ecb6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ecba:	9302      	str	r3, [sp, #8]
 800ecbc:	9b02      	ldr	r3, [sp, #8]
 800ecbe:	4543      	cmp	r3, r8
 800ecc0:	da04      	bge.n	800eccc <__kernel_rem_pio2+0x3ac>
 800ecc2:	461c      	mov	r4, r3
 800ecc4:	e6a2      	b.n	800ea0c <__kernel_rem_pio2+0xec>
 800ecc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e7e4      	b.n	800ec96 <__kernel_rem_pio2+0x376>
 800eccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ecd2:	f7f1 fc2f 	bl	8000534 <__aeabi_i2d>
 800ecd6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ecda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecdc:	46ab      	mov	fp, r5
 800ecde:	461c      	mov	r4, r3
 800ece0:	f04f 0900 	mov.w	r9, #0
 800ece4:	2600      	movs	r6, #0
 800ece6:	2700      	movs	r7, #0
 800ece8:	9b05      	ldr	r3, [sp, #20]
 800ecea:	4599      	cmp	r9, r3
 800ecec:	dd06      	ble.n	800ecfc <__kernel_rem_pio2+0x3dc>
 800ecee:	9b08      	ldr	r3, [sp, #32]
 800ecf0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ecf4:	f108 0801 	add.w	r8, r8, #1
 800ecf8:	9308      	str	r3, [sp, #32]
 800ecfa:	e7df      	b.n	800ecbc <__kernel_rem_pio2+0x39c>
 800ecfc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ed00:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ed04:	f7f1 fc80 	bl	8000608 <__aeabi_dmul>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	f7f1 fac4 	bl	800029c <__adddf3>
 800ed14:	f109 0901 	add.w	r9, r9, #1
 800ed18:	4606      	mov	r6, r0
 800ed1a:	460f      	mov	r7, r1
 800ed1c:	e7e4      	b.n	800ece8 <__kernel_rem_pio2+0x3c8>
 800ed1e:	3d01      	subs	r5, #1
 800ed20:	e747      	b.n	800ebb2 <__kernel_rem_pio2+0x292>
 800ed22:	ec47 6b10 	vmov	d0, r6, r7
 800ed26:	f1ca 0000 	rsb	r0, sl, #0
 800ed2a:	f000 f949 	bl	800efc0 <scalbn>
 800ed2e:	ec57 6b10 	vmov	r6, r7, d0
 800ed32:	4ba0      	ldr	r3, [pc, #640]	; (800efb4 <__kernel_rem_pio2+0x694>)
 800ed34:	ee10 0a10 	vmov	r0, s0
 800ed38:	2200      	movs	r2, #0
 800ed3a:	4639      	mov	r1, r7
 800ed3c:	f7f1 feea 	bl	8000b14 <__aeabi_dcmpge>
 800ed40:	b1f8      	cbz	r0, 800ed82 <__kernel_rem_pio2+0x462>
 800ed42:	4b9d      	ldr	r3, [pc, #628]	; (800efb8 <__kernel_rem_pio2+0x698>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	4630      	mov	r0, r6
 800ed48:	4639      	mov	r1, r7
 800ed4a:	f7f1 fc5d 	bl	8000608 <__aeabi_dmul>
 800ed4e:	f7f1 ff0b 	bl	8000b68 <__aeabi_d2iz>
 800ed52:	4680      	mov	r8, r0
 800ed54:	f7f1 fbee 	bl	8000534 <__aeabi_i2d>
 800ed58:	4b96      	ldr	r3, [pc, #600]	; (800efb4 <__kernel_rem_pio2+0x694>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f7f1 fc54 	bl	8000608 <__aeabi_dmul>
 800ed60:	460b      	mov	r3, r1
 800ed62:	4602      	mov	r2, r0
 800ed64:	4639      	mov	r1, r7
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7f1 fa96 	bl	8000298 <__aeabi_dsub>
 800ed6c:	f7f1 fefc 	bl	8000b68 <__aeabi_d2iz>
 800ed70:	1c65      	adds	r5, r4, #1
 800ed72:	ab0c      	add	r3, sp, #48	; 0x30
 800ed74:	f10a 0a18 	add.w	sl, sl, #24
 800ed78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed7c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ed80:	e71f      	b.n	800ebc2 <__kernel_rem_pio2+0x2a2>
 800ed82:	4630      	mov	r0, r6
 800ed84:	4639      	mov	r1, r7
 800ed86:	f7f1 feef 	bl	8000b68 <__aeabi_d2iz>
 800ed8a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed8c:	4625      	mov	r5, r4
 800ed8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed92:	e716      	b.n	800ebc2 <__kernel_rem_pio2+0x2a2>
 800ed94:	ab0c      	add	r3, sp, #48	; 0x30
 800ed96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ed9a:	f7f1 fbcb 	bl	8000534 <__aeabi_i2d>
 800ed9e:	4632      	mov	r2, r6
 800eda0:	463b      	mov	r3, r7
 800eda2:	f7f1 fc31 	bl	8000608 <__aeabi_dmul>
 800eda6:	4642      	mov	r2, r8
 800eda8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800edac:	464b      	mov	r3, r9
 800edae:	4630      	mov	r0, r6
 800edb0:	4639      	mov	r1, r7
 800edb2:	f7f1 fc29 	bl	8000608 <__aeabi_dmul>
 800edb6:	3c01      	subs	r4, #1
 800edb8:	4606      	mov	r6, r0
 800edba:	460f      	mov	r7, r1
 800edbc:	e713      	b.n	800ebe6 <__kernel_rem_pio2+0x2c6>
 800edbe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800edc2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800edc6:	f7f1 fc1f 	bl	8000608 <__aeabi_dmul>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	4648      	mov	r0, r9
 800edd0:	4651      	mov	r1, sl
 800edd2:	f7f1 fa63 	bl	800029c <__adddf3>
 800edd6:	3701      	adds	r7, #1
 800edd8:	4681      	mov	r9, r0
 800edda:	468a      	mov	sl, r1
 800eddc:	9b00      	ldr	r3, [sp, #0]
 800edde:	429f      	cmp	r7, r3
 800ede0:	dc02      	bgt.n	800ede8 <__kernel_rem_pio2+0x4c8>
 800ede2:	9b06      	ldr	r3, [sp, #24]
 800ede4:	429f      	cmp	r7, r3
 800ede6:	ddea      	ble.n	800edbe <__kernel_rem_pio2+0x49e>
 800ede8:	9a06      	ldr	r2, [sp, #24]
 800edea:	ab48      	add	r3, sp, #288	; 0x120
 800edec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800edf0:	e9c6 9a00 	strd	r9, sl, [r6]
 800edf4:	3c01      	subs	r4, #1
 800edf6:	e6fa      	b.n	800ebee <__kernel_rem_pio2+0x2ce>
 800edf8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	dc0b      	bgt.n	800ee16 <__kernel_rem_pio2+0x4f6>
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	dc39      	bgt.n	800ee76 <__kernel_rem_pio2+0x556>
 800ee02:	d05d      	beq.n	800eec0 <__kernel_rem_pio2+0x5a0>
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	f003 0007 	and.w	r0, r3, #7
 800ee0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ee0e:	ecbd 8b02 	vpop	{d8}
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d1f3      	bne.n	800ee04 <__kernel_rem_pio2+0x4e4>
 800ee1c:	9b05      	ldr	r3, [sp, #20]
 800ee1e:	9500      	str	r5, [sp, #0]
 800ee20:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ee24:	eb0d 0403 	add.w	r4, sp, r3
 800ee28:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ee2c:	46a2      	mov	sl, r4
 800ee2e:	9b00      	ldr	r3, [sp, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee36:	dc69      	bgt.n	800ef0c <__kernel_rem_pio2+0x5ec>
 800ee38:	46aa      	mov	sl, r5
 800ee3a:	f1ba 0f01 	cmp.w	sl, #1
 800ee3e:	f1a4 0408 	sub.w	r4, r4, #8
 800ee42:	f300 8083 	bgt.w	800ef4c <__kernel_rem_pio2+0x62c>
 800ee46:	9c05      	ldr	r4, [sp, #20]
 800ee48:	ab48      	add	r3, sp, #288	; 0x120
 800ee4a:	441c      	add	r4, r3
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	2100      	movs	r1, #0
 800ee50:	2d01      	cmp	r5, #1
 800ee52:	f300 809a 	bgt.w	800ef8a <__kernel_rem_pio2+0x66a>
 800ee56:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ee5a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ee5e:	f1bb 0f00 	cmp.w	fp, #0
 800ee62:	f040 8098 	bne.w	800ef96 <__kernel_rem_pio2+0x676>
 800ee66:	9b04      	ldr	r3, [sp, #16]
 800ee68:	e9c3 7800 	strd	r7, r8, [r3]
 800ee6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ee70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee74:	e7c6      	b.n	800ee04 <__kernel_rem_pio2+0x4e4>
 800ee76:	9e05      	ldr	r6, [sp, #20]
 800ee78:	ab48      	add	r3, sp, #288	; 0x120
 800ee7a:	441e      	add	r6, r3
 800ee7c:	462c      	mov	r4, r5
 800ee7e:	2000      	movs	r0, #0
 800ee80:	2100      	movs	r1, #0
 800ee82:	2c00      	cmp	r4, #0
 800ee84:	da33      	bge.n	800eeee <__kernel_rem_pio2+0x5ce>
 800ee86:	f1bb 0f00 	cmp.w	fp, #0
 800ee8a:	d036      	beq.n	800eefa <__kernel_rem_pio2+0x5da>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee92:	9c04      	ldr	r4, [sp, #16]
 800ee94:	e9c4 2300 	strd	r2, r3, [r4]
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800eea0:	f7f1 f9fa 	bl	8000298 <__aeabi_dsub>
 800eea4:	ae4a      	add	r6, sp, #296	; 0x128
 800eea6:	2401      	movs	r4, #1
 800eea8:	42a5      	cmp	r5, r4
 800eeaa:	da29      	bge.n	800ef00 <__kernel_rem_pio2+0x5e0>
 800eeac:	f1bb 0f00 	cmp.w	fp, #0
 800eeb0:	d002      	beq.n	800eeb8 <__kernel_rem_pio2+0x598>
 800eeb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eebe:	e7a1      	b.n	800ee04 <__kernel_rem_pio2+0x4e4>
 800eec0:	9c05      	ldr	r4, [sp, #20]
 800eec2:	ab48      	add	r3, sp, #288	; 0x120
 800eec4:	441c      	add	r4, r3
 800eec6:	2000      	movs	r0, #0
 800eec8:	2100      	movs	r1, #0
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	da09      	bge.n	800eee2 <__kernel_rem_pio2+0x5c2>
 800eece:	f1bb 0f00 	cmp.w	fp, #0
 800eed2:	d002      	beq.n	800eeda <__kernel_rem_pio2+0x5ba>
 800eed4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed8:	4619      	mov	r1, r3
 800eeda:	9b04      	ldr	r3, [sp, #16]
 800eedc:	e9c3 0100 	strd	r0, r1, [r3]
 800eee0:	e790      	b.n	800ee04 <__kernel_rem_pio2+0x4e4>
 800eee2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eee6:	f7f1 f9d9 	bl	800029c <__adddf3>
 800eeea:	3d01      	subs	r5, #1
 800eeec:	e7ed      	b.n	800eeca <__kernel_rem_pio2+0x5aa>
 800eeee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800eef2:	f7f1 f9d3 	bl	800029c <__adddf3>
 800eef6:	3c01      	subs	r4, #1
 800eef8:	e7c3      	b.n	800ee82 <__kernel_rem_pio2+0x562>
 800eefa:	4602      	mov	r2, r0
 800eefc:	460b      	mov	r3, r1
 800eefe:	e7c8      	b.n	800ee92 <__kernel_rem_pio2+0x572>
 800ef00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ef04:	f7f1 f9ca 	bl	800029c <__adddf3>
 800ef08:	3401      	adds	r4, #1
 800ef0a:	e7cd      	b.n	800eea8 <__kernel_rem_pio2+0x588>
 800ef0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ef14:	9b00      	ldr	r3, [sp, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	4632      	mov	r2, r6
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	4640      	mov	r0, r8
 800ef20:	4649      	mov	r1, r9
 800ef22:	f7f1 f9bb 	bl	800029c <__adddf3>
 800ef26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4640      	mov	r0, r8
 800ef30:	4649      	mov	r1, r9
 800ef32:	f7f1 f9b1 	bl	8000298 <__aeabi_dsub>
 800ef36:	4632      	mov	r2, r6
 800ef38:	463b      	mov	r3, r7
 800ef3a:	f7f1 f9af 	bl	800029c <__adddf3>
 800ef3e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ef42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef46:	ed8a 7b00 	vstr	d7, [sl]
 800ef4a:	e770      	b.n	800ee2e <__kernel_rem_pio2+0x50e>
 800ef4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ef54:	4640      	mov	r0, r8
 800ef56:	4632      	mov	r2, r6
 800ef58:	463b      	mov	r3, r7
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f7f1 f99e 	bl	800029c <__adddf3>
 800ef60:	e9cd 0100 	strd	r0, r1, [sp]
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4640      	mov	r0, r8
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f7f1 f994 	bl	8000298 <__aeabi_dsub>
 800ef70:	4632      	mov	r2, r6
 800ef72:	463b      	mov	r3, r7
 800ef74:	f7f1 f992 	bl	800029c <__adddf3>
 800ef78:	ed9d 7b00 	vldr	d7, [sp]
 800ef7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef80:	ed84 7b00 	vstr	d7, [r4]
 800ef84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef88:	e757      	b.n	800ee3a <__kernel_rem_pio2+0x51a>
 800ef8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef8e:	f7f1 f985 	bl	800029c <__adddf3>
 800ef92:	3d01      	subs	r5, #1
 800ef94:	e75c      	b.n	800ee50 <__kernel_rem_pio2+0x530>
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	9a04      	ldr	r2, [sp, #16]
 800ef9a:	601f      	str	r7, [r3, #0]
 800ef9c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800efa0:	605c      	str	r4, [r3, #4]
 800efa2:	609d      	str	r5, [r3, #8]
 800efa4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800efa8:	60d3      	str	r3, [r2, #12]
 800efaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efae:	6110      	str	r0, [r2, #16]
 800efb0:	6153      	str	r3, [r2, #20]
 800efb2:	e727      	b.n	800ee04 <__kernel_rem_pio2+0x4e4>
 800efb4:	41700000 	.word	0x41700000
 800efb8:	3e700000 	.word	0x3e700000
 800efbc:	00000000 	.word	0x00000000

0800efc0 <scalbn>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	ec55 4b10 	vmov	r4, r5, d0
 800efc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800efca:	4606      	mov	r6, r0
 800efcc:	462b      	mov	r3, r5
 800efce:	b999      	cbnz	r1, 800eff8 <scalbn+0x38>
 800efd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800efd4:	4323      	orrs	r3, r4
 800efd6:	d03f      	beq.n	800f058 <scalbn+0x98>
 800efd8:	4b35      	ldr	r3, [pc, #212]	; (800f0b0 <scalbn+0xf0>)
 800efda:	4629      	mov	r1, r5
 800efdc:	ee10 0a10 	vmov	r0, s0
 800efe0:	2200      	movs	r2, #0
 800efe2:	f7f1 fb11 	bl	8000608 <__aeabi_dmul>
 800efe6:	4b33      	ldr	r3, [pc, #204]	; (800f0b4 <scalbn+0xf4>)
 800efe8:	429e      	cmp	r6, r3
 800efea:	4604      	mov	r4, r0
 800efec:	460d      	mov	r5, r1
 800efee:	da10      	bge.n	800f012 <scalbn+0x52>
 800eff0:	a327      	add	r3, pc, #156	; (adr r3, 800f090 <scalbn+0xd0>)
 800eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff6:	e01f      	b.n	800f038 <scalbn+0x78>
 800eff8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800effc:	4291      	cmp	r1, r2
 800effe:	d10c      	bne.n	800f01a <scalbn+0x5a>
 800f000:	ee10 2a10 	vmov	r2, s0
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f948 	bl	800029c <__adddf3>
 800f00c:	4604      	mov	r4, r0
 800f00e:	460d      	mov	r5, r1
 800f010:	e022      	b.n	800f058 <scalbn+0x98>
 800f012:	460b      	mov	r3, r1
 800f014:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f018:	3936      	subs	r1, #54	; 0x36
 800f01a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f01e:	4296      	cmp	r6, r2
 800f020:	dd0d      	ble.n	800f03e <scalbn+0x7e>
 800f022:	2d00      	cmp	r5, #0
 800f024:	a11c      	add	r1, pc, #112	; (adr r1, 800f098 <scalbn+0xd8>)
 800f026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f02a:	da02      	bge.n	800f032 <scalbn+0x72>
 800f02c:	a11c      	add	r1, pc, #112	; (adr r1, 800f0a0 <scalbn+0xe0>)
 800f02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f032:	a319      	add	r3, pc, #100	; (adr r3, 800f098 <scalbn+0xd8>)
 800f034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f038:	f7f1 fae6 	bl	8000608 <__aeabi_dmul>
 800f03c:	e7e6      	b.n	800f00c <scalbn+0x4c>
 800f03e:	1872      	adds	r2, r6, r1
 800f040:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f044:	428a      	cmp	r2, r1
 800f046:	dcec      	bgt.n	800f022 <scalbn+0x62>
 800f048:	2a00      	cmp	r2, #0
 800f04a:	dd08      	ble.n	800f05e <scalbn+0x9e>
 800f04c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f054:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f058:	ec45 4b10 	vmov	d0, r4, r5
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f062:	da08      	bge.n	800f076 <scalbn+0xb6>
 800f064:	2d00      	cmp	r5, #0
 800f066:	a10a      	add	r1, pc, #40	; (adr r1, 800f090 <scalbn+0xd0>)
 800f068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f06c:	dac0      	bge.n	800eff0 <scalbn+0x30>
 800f06e:	a10e      	add	r1, pc, #56	; (adr r1, 800f0a8 <scalbn+0xe8>)
 800f070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f074:	e7bc      	b.n	800eff0 <scalbn+0x30>
 800f076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f07a:	3236      	adds	r2, #54	; 0x36
 800f07c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f080:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f084:	4620      	mov	r0, r4
 800f086:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <scalbn+0xf8>)
 800f088:	2200      	movs	r2, #0
 800f08a:	e7d5      	b.n	800f038 <scalbn+0x78>
 800f08c:	f3af 8000 	nop.w
 800f090:	c2f8f359 	.word	0xc2f8f359
 800f094:	01a56e1f 	.word	0x01a56e1f
 800f098:	8800759c 	.word	0x8800759c
 800f09c:	7e37e43c 	.word	0x7e37e43c
 800f0a0:	8800759c 	.word	0x8800759c
 800f0a4:	fe37e43c 	.word	0xfe37e43c
 800f0a8:	c2f8f359 	.word	0xc2f8f359
 800f0ac:	81a56e1f 	.word	0x81a56e1f
 800f0b0:	43500000 	.word	0x43500000
 800f0b4:	ffff3cb0 	.word	0xffff3cb0
 800f0b8:	3c900000 	.word	0x3c900000
 800f0bc:	00000000 	.word	0x00000000

0800f0c0 <floor>:
 800f0c0:	ec51 0b10 	vmov	r0, r1, d0
 800f0c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f0d0:	2e13      	cmp	r6, #19
 800f0d2:	ee10 5a10 	vmov	r5, s0
 800f0d6:	ee10 8a10 	vmov	r8, s0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	dc31      	bgt.n	800f142 <floor+0x82>
 800f0de:	2e00      	cmp	r6, #0
 800f0e0:	da14      	bge.n	800f10c <floor+0x4c>
 800f0e2:	a333      	add	r3, pc, #204	; (adr r3, 800f1b0 <floor+0xf0>)
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 f8d8 	bl	800029c <__adddf3>
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f7f1 fd1a 	bl	8000b28 <__aeabi_dcmpgt>
 800f0f4:	b138      	cbz	r0, 800f106 <floor+0x46>
 800f0f6:	2c00      	cmp	r4, #0
 800f0f8:	da53      	bge.n	800f1a2 <floor+0xe2>
 800f0fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f0fe:	4325      	orrs	r5, r4
 800f100:	d052      	beq.n	800f1a8 <floor+0xe8>
 800f102:	4c2d      	ldr	r4, [pc, #180]	; (800f1b8 <floor+0xf8>)
 800f104:	2500      	movs	r5, #0
 800f106:	4621      	mov	r1, r4
 800f108:	4628      	mov	r0, r5
 800f10a:	e024      	b.n	800f156 <floor+0x96>
 800f10c:	4f2b      	ldr	r7, [pc, #172]	; (800f1bc <floor+0xfc>)
 800f10e:	4137      	asrs	r7, r6
 800f110:	ea01 0307 	and.w	r3, r1, r7
 800f114:	4303      	orrs	r3, r0
 800f116:	d01e      	beq.n	800f156 <floor+0x96>
 800f118:	a325      	add	r3, pc, #148	; (adr r3, 800f1b0 <floor+0xf0>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	f7f1 f8bd 	bl	800029c <__adddf3>
 800f122:	2200      	movs	r2, #0
 800f124:	2300      	movs	r3, #0
 800f126:	f7f1 fcff 	bl	8000b28 <__aeabi_dcmpgt>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d0eb      	beq.n	800f106 <floor+0x46>
 800f12e:	2c00      	cmp	r4, #0
 800f130:	bfbe      	ittt	lt
 800f132:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f136:	4133      	asrlt	r3, r6
 800f138:	18e4      	addlt	r4, r4, r3
 800f13a:	ea24 0407 	bic.w	r4, r4, r7
 800f13e:	2500      	movs	r5, #0
 800f140:	e7e1      	b.n	800f106 <floor+0x46>
 800f142:	2e33      	cmp	r6, #51	; 0x33
 800f144:	dd0b      	ble.n	800f15e <floor+0x9e>
 800f146:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f14a:	d104      	bne.n	800f156 <floor+0x96>
 800f14c:	ee10 2a10 	vmov	r2, s0
 800f150:	460b      	mov	r3, r1
 800f152:	f7f1 f8a3 	bl	800029c <__adddf3>
 800f156:	ec41 0b10 	vmov	d0, r0, r1
 800f15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f162:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f166:	40df      	lsrs	r7, r3
 800f168:	4238      	tst	r0, r7
 800f16a:	d0f4      	beq.n	800f156 <floor+0x96>
 800f16c:	a310      	add	r3, pc, #64	; (adr r3, 800f1b0 <floor+0xf0>)
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	f7f1 f893 	bl	800029c <__adddf3>
 800f176:	2200      	movs	r2, #0
 800f178:	2300      	movs	r3, #0
 800f17a:	f7f1 fcd5 	bl	8000b28 <__aeabi_dcmpgt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d0c1      	beq.n	800f106 <floor+0x46>
 800f182:	2c00      	cmp	r4, #0
 800f184:	da0a      	bge.n	800f19c <floor+0xdc>
 800f186:	2e14      	cmp	r6, #20
 800f188:	d101      	bne.n	800f18e <floor+0xce>
 800f18a:	3401      	adds	r4, #1
 800f18c:	e006      	b.n	800f19c <floor+0xdc>
 800f18e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f192:	2301      	movs	r3, #1
 800f194:	40b3      	lsls	r3, r6
 800f196:	441d      	add	r5, r3
 800f198:	45a8      	cmp	r8, r5
 800f19a:	d8f6      	bhi.n	800f18a <floor+0xca>
 800f19c:	ea25 0507 	bic.w	r5, r5, r7
 800f1a0:	e7b1      	b.n	800f106 <floor+0x46>
 800f1a2:	2500      	movs	r5, #0
 800f1a4:	462c      	mov	r4, r5
 800f1a6:	e7ae      	b.n	800f106 <floor+0x46>
 800f1a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f1ac:	e7ab      	b.n	800f106 <floor+0x46>
 800f1ae:	bf00      	nop
 800f1b0:	8800759c 	.word	0x8800759c
 800f1b4:	7e37e43c 	.word	0x7e37e43c
 800f1b8:	bff00000 	.word	0xbff00000
 800f1bc:	000fffff 	.word	0x000fffff

0800f1c0 <_init>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	bf00      	nop
 800f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c6:	bc08      	pop	{r3}
 800f1c8:	469e      	mov	lr, r3
 800f1ca:	4770      	bx	lr

0800f1cc <_fini>:
 800f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ce:	bf00      	nop
 800f1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d2:	bc08      	pop	{r3}
 800f1d4:	469e      	mov	lr, r3
 800f1d6:	4770      	bx	lr
