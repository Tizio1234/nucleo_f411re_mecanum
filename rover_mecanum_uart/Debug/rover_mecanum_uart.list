
rover_mecanum_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f048  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800f1e8  0800f1e8  0001f1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f908  0800f908  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f908  0800f908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f910  0800f910  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f914  0800f914  0001f914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056dc  20000258  0800fb70  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005934  0800fb70  00025934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b637  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b93  00000000  00000000  0003b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001132  00000000  00000000  00040ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e67  00000000  00000000  00041bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f28  00000000  00000000  00046a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ca59  00000000  00000000  0005f989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077b4  00000000  00000000  000fc3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00103b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1d0 	.word	0x0800f1d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800f1d0 	.word	0x0800f1d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f001 f93c 	bl	8002280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f820 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fa0c 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001010:	f000 f9ea 	bl	80013e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001014:	f000 f9be 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001018:	f000 f882 	bl	8001120 <MX_TIM1_Init>
  MX_TIM2_Init();
 800101c:	f000 f938 	bl	8001290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001020:	f000 f98e 	bl	8001340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001024:	f004 ffa2 	bl	8005f6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <main+0x40>)
 800102a:	2100      	movs	r1, #0
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <main+0x44>)
 800102e:	f004 ffe7 	bl	8006000 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <main+0x48>)
 8001036:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001038:	f004 ffbc 	bl	8005fb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x3c>
 800103e:	bf00      	nop
 8001040:	0800f288 	.word	0x0800f288
 8001044:	080015d5 	.word	0x080015d5
 8001048:	200003ec 	.word	0x200003ec

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 ff37 	bl	8009ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 ff98 	bl	8003008 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010de:	f000 fb65 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f9fa 	bl	80034f8 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 fb4f 	bl	80017ac <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f008 feb8 	bl	8009ece <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <MX_TIM1_Init+0x168>)
 8001160:	4a4a      	ldr	r2, [pc, #296]	; (800128c <MX_TIM1_Init+0x16c>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_TIM1_Init+0x168>)
 8001166:	2209      	movs	r2, #9
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <MX_TIM1_Init+0x168>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_TIM1_Init+0x168>)
 8001172:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_TIM1_Init+0x168>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_TIM1_Init+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_TIM1_Init+0x168>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	483f      	ldr	r0, [pc, #252]	; (8001288 <MX_TIM1_Init+0x168>)
 800118c:	f002 fc06 	bl	800399c <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 fb09 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a4:	4619      	mov	r1, r3
 80011a6:	4838      	ldr	r0, [pc, #224]	; (8001288 <MX_TIM1_Init+0x168>)
 80011a8:	f002 ffd8 	bl	800415c <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 fafb 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b6:	4834      	ldr	r0, [pc, #208]	; (8001288 <MX_TIM1_Init+0x168>)
 80011b8:	f002 fca2 	bl	8003b00 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011c2:	f000 faf3 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	482c      	ldr	r0, [pc, #176]	; (8001288 <MX_TIM1_Init+0x168>)
 80011d6:	f003 fb7d 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f000 fae4 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_TIM1_Init+0x168>)
 800120a:	f002 fee5 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001214:	f000 faca 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2204      	movs	r2, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <MX_TIM1_Init+0x168>)
 8001222:	f002 fed9 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800122c:	f000 fabe 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x168>)
 800123a:	f002 fecd 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001244:	f000 fab2 	bl	80017ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM1_Init+0x168>)
 800126c:	f003 fba0 	bl	80049b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001276:	f000 fa99 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM1_Init+0x168>)
 800127c:	f000 fd1e 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000274 	.word	0x20000274
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_TIM2_Init+0xac>)
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM2_Init+0xac>)
 80012bc:	2209      	movs	r2, #9
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM2_Init+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM2_Init+0xac>)
 80012c8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM2_Init+0xac>)
 80012dc:	f002 fc10 	bl	8003b00 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 fa61 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM2_Init+0xac>)
 80012fa:	f003 faeb 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fa52 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xac>)
 8001320:	f002 fe5a 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 fa3f 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xac>)
 8001330:	f000 fcc4 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002bc 	.word	0x200002bc

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART1_UART_Init+0x4c>)
 8001378:	f003 fb80 	bl	8004a7c <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 fa13 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000304 	.word	0x20000304
 8001390:	40011000 	.word	0x40011000

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fb56 	bl	8004a7c <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f9e9 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000348 	.word	0x20000348
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MX_DMA_Init+0x3c>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2105      	movs	r1, #5
 800140e:	203a      	movs	r0, #58	; 0x3a
 8001410:	f001 f830 	bl	8002474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001414:	203a      	movs	r0, #58	; 0x3a
 8001416:	f001 f849 	bl	80024ac <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <MX_GPIO_Init+0x120>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <MX_GPIO_Init+0x120>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <MX_GPIO_Init+0x120>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_GPIO_Init+0x120>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a39      	ldr	r2, [pc, #228]	; (8001548 <MX_GPIO_Init+0x120>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_GPIO_Init+0x120>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <MX_GPIO_Init+0x120>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <MX_GPIO_Init+0x120>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_GPIO_Init+0x120>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MX_GPIO_Init+0x120>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <MX_GPIO_Init+0x120>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_GPIO_Init+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	21c0      	movs	r1, #192	; 0xc0
 80014b2:	4826      	ldr	r0, [pc, #152]	; (800154c <MX_GPIO_Init+0x124>)
 80014b4:	f001 fd8e 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80014be:	4824      	ldr	r0, [pc, #144]	; (8001550 <MX_GPIO_Init+0x128>)
 80014c0:	f001 fd88 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |ROBOT_IN2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROBOT_IN1_A_GPIO_Port, ROBOT_IN1_A_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014ca:	f001 fd83 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x12c>)
 80014e6:	f001 fbf1 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_A_Pin ROBOT_IN3_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_A_Pin|ROBOT_IN3_A_Pin;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_GPIO_Init+0x124>)
 8001502:	f001 fbe3 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROBOT_IN4_B_Pin ROBOT_IN1_B_Pin ROBOT_IN3_B_Pin ROBOT_IN2_B_Pin
                           ROBOT_IN2_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN4_B_Pin|ROBOT_IN1_B_Pin|ROBOT_IN3_B_Pin|ROBOT_IN2_B_Pin
 8001506:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800150a:	617b      	str	r3, [r7, #20]
                          |ROBOT_IN2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x128>)
 8001520:	f001 fbd4 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ROBOT_IN1_A_Pin */
  GPIO_InitStruct.Pin = ROBOT_IN1_A_Pin;
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROBOT_IN1_A_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_GPIO_Init+0x12c>)
 800153c:	f001 fbc6 	bl	8002ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800

08001558 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001560:	1d39      	adds	r1, r7, #4
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	2201      	movs	r2, #1
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <__io_putchar+0x20>)
 800156a:	f003 fad4 	bl	8004b16 <HAL_UART_Transmit>
  return ch;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000348 	.word	0x20000348

0800157c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d116      	bne.n	80015c0 <HAL_UARTEx_RxEventCallback+0x44>
    static uint16_t pos = 0;
    lwrb_advance(&uart_buffer, Size >= pos ? Size - pos : Size - pos + sizeof(uart_buffer_data));
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	429a      	cmp	r2, r3
 800159a:	d304      	bcc.n	80015a6 <HAL_UARTEx_RxEventCallback+0x2a>
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	e005      	b.n	80015b2 <HAL_UARTEx_RxEventCallback+0x36>
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x54>)
 80015b6:	f007 fbd2 	bl	8008d5e <lwrb_advance>
    pos = Size;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_UARTEx_RxEventCallback+0x50>)
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	8013      	strh	r3, [r2, #0]
  }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40011000 	.word	0x40011000
 80015cc:	20000dac 	.word	0x20000dac
 80015d0:	20000c98 	.word	0x20000c98

080015d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d8:	b0d0      	sub	sp, #320	; 0x140
 80015da:	af04      	add	r7, sp, #16
 80015dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  mecanum_robot_init(&robot);
 80015e6:	485d      	ldr	r0, [pc, #372]	; (800175c <StartDefaultTask+0x188>)
 80015e8:	f000 f9af 	bl	800194a <mecanum_robot_init>

  lwrb_init(&uart_buffer, uart_buffer_data, sizeof(uart_buffer_data));
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	495b      	ldr	r1, [pc, #364]	; (8001760 <StartDefaultTask+0x18c>)
 80015f2:	485c      	ldr	r0, [pc, #368]	; (8001764 <StartDefaultTask+0x190>)
 80015f4:	f007 fa32 	bl	8008a5c <lwrb_init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buffer_data, sizeof(uart_buffer_data));
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	4958      	ldr	r1, [pc, #352]	; (8001760 <StartDefaultTask+0x18c>)
 80015fe:	485a      	ldr	r0, [pc, #360]	; (8001768 <StartDefaultTask+0x194>)
 8001600:	f003 fb1b 	bl	8004c3a <HAL_UARTEx_ReceiveToIdle_DMA>

  size_t full = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  size_t old_full = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  /* Infinite loop */
  for (;;) {
    old_full = full;
 8001610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    osDelay(2);
 8001618:	2002      	movs	r0, #2
 800161a:	f004 fd83 	bl	8006124 <osDelay>

    full = lwrb_get_full(&uart_buffer);
 800161e:	4851      	ldr	r0, [pc, #324]	; (8001764 <StartDefaultTask+0x190>)
 8001620:	f007 fb0e 	bl	8008c40 <lwrb_get_full>
 8001624:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    if (full == old_full && full != UART_BUFFER_SIZE){
 8001628:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800162c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001630:	429a      	cmp	r2, r3
 8001632:	d105      	bne.n	8001640 <StartDefaultTask+0x6c>
 8001634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163c:	f040 8088 	bne.w	8001750 <StartDefaultTask+0x17c>
      continue;
    }

    printf("%d\r\n", full);
 8001640:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001644:	4849      	ldr	r0, [pc, #292]	; (800176c <StartDefaultTask+0x198>)
 8001646:	f008 fb9f 	bl	8009d88 <iprintf>

    size_t found_start;
    if (lwrb_find(&uart_buffer, packet_start_sequence, sizeof(packet_start_sequence), 0, &found_start) != 1){
 800164a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	2202      	movs	r2, #2
 8001654:	4946      	ldr	r1, [pc, #280]	; (8001770 <StartDefaultTask+0x19c>)
 8001656:	4843      	ldr	r0, [pc, #268]	; (8001764 <StartDefaultTask+0x190>)
 8001658:	f007 fbd1 	bl	8008dfe <lwrb_find>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d178      	bne.n	8001754 <StartDefaultTask+0x180>
      continue;
    }

    size_t found_end;
    if (lwrb_find(&uart_buffer, packet_end_sequence, sizeof(packet_end_sequence), found_start + sizeof(packet_start_sequence), &found_end) != 1){
 8001662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001666:	1c9a      	adds	r2, r3, #2
 8001668:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	2202      	movs	r2, #2
 8001672:	4940      	ldr	r1, [pc, #256]	; (8001774 <StartDefaultTask+0x1a0>)
 8001674:	483b      	ldr	r0, [pc, #236]	; (8001764 <StartDefaultTask+0x190>)
 8001676:	f007 fbc2 	bl	8008dfe <lwrb_find>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d16b      	bne.n	8001758 <StartDefaultTask+0x184>
      continue;
    }

    (void)lwrb_skip(&uart_buffer, found_start + sizeof(packet_start_sequence));
 8001680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001684:	3302      	adds	r3, #2
 8001686:	4619      	mov	r1, r3
 8001688:	4836      	ldr	r0, [pc, #216]	; (8001764 <StartDefaultTask+0x190>)
 800168a:	f007 fb18 	bl	8008cbe <lwrb_skip>
    char temp_buff[UART_BUFFER_SIZE];

    size_t read_size = lwrb_read(&uart_buffer, temp_buff, found_end - found_start - sizeof(packet_start_sequence));
 800168e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	1e9a      	subs	r2, r3, #2
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	4830      	ldr	r0, [pc, #192]	; (8001764 <StartDefaultTask+0x190>)
 80016a2:	f007 fa0c 	bl	8008abe <lwrb_read>
 80016a6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    (void)lwrb_skip(&uart_buffer, sizeof(packet_end_sequence));
 80016aa:	2102      	movs	r1, #2
 80016ac:	482d      	ldr	r0, [pc, #180]	; (8001764 <StartDefaultTask+0x190>)
 80016ae:	f007 fb06 	bl	8008cbe <lwrb_skip>

    printf("Selected packet: %.*s\r\n", read_size, temp_buff);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	461a      	mov	r2, r3
 80016b8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80016bc:	482e      	ldr	r0, [pc, #184]	; (8001778 <StartDefaultTask+0x1a4>)
 80016be:	f008 fb63 	bl	8009d88 <iprintf>
    float power, angle, angular_speed;
    int res;
    if ((res = sscanf(temp_buff, packet_format, &power, &angle, &angular_speed)) == 3) {
 80016c2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80016c6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80016ca:	f107 000c 	add.w	r0, r7, #12
 80016ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	460b      	mov	r3, r1
 80016d6:	4929      	ldr	r1, [pc, #164]	; (800177c <StartDefaultTask+0x1a8>)
 80016d8:	f008 fb88 	bl	8009dec <siscanf>
 80016dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80016e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d12d      	bne.n	8001744 <StartDefaultTask+0x170>
      printf("Power: %f, Angle: %f, Angular Speed: %f\r\n", power, angle, angular_speed);
 80016e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff33 	bl	8000558 <__aeabi_f2d>
 80016f2:	4680      	mov	r8, r0
 80016f4:	4689      	mov	r9, r1
 80016f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff2c 	bl	8000558 <__aeabi_f2d>
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001716:	e9cd 4500 	strd	r4, r5, [sp]
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	4818      	ldr	r0, [pc, #96]	; (8001780 <StartDefaultTask+0x1ac>)
 8001720:	f008 fb32 	bl	8009d88 <iprintf>
      mecanum_robot_move(&robot, power, angle, angular_speed);
 8001724:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8001728:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 800172c:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 8001730:	eeb0 1a66 	vmov.f32	s2, s13
 8001734:	eef0 0a47 	vmov.f32	s1, s14
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	4807      	ldr	r0, [pc, #28]	; (800175c <StartDefaultTask+0x188>)
 800173e:	f000 f93f 	bl	80019c0 <mecanum_robot_move>
 8001742:	e765      	b.n	8001610 <StartDefaultTask+0x3c>
    } else {
      printf("Wrong packet payload format(%i)\r\n", res);
 8001744:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <StartDefaultTask+0x1b0>)
 800174a:	f008 fb1d 	bl	8009d88 <iprintf>
 800174e:	e75f      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 8001750:	bf00      	nop
 8001752:	e75d      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 8001754:	bf00      	nop
 8001756:	e75b      	b.n	8001610 <StartDefaultTask+0x3c>
      continue;
 8001758:	bf00      	nop
  for (;;) {
 800175a:	e759      	b.n	8001610 <StartDefaultTask+0x3c>
 800175c:	20000070 	.word	0x20000070
 8001760:	20000cac 	.word	0x20000cac
 8001764:	20000c98 	.word	0x20000c98
 8001768:	20000304 	.word	0x20000304
 800176c:	0800f1f4 	.word	0x0800f1f4
 8001770:	0800f2ac 	.word	0x0800f2ac
 8001774:	0800f2b0 	.word	0x0800f2b0
 8001778:	0800f1fc 	.word	0x0800f1fc
 800177c:	0800f2b4 	.word	0x0800f2b4
 8001780:	0800f214 	.word	0x0800f214
 8001784:	0800f240 	.word	0x0800f240

08001788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179a:	f000 fd93 	bl	80022c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40014800 	.word	0x40014800

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>

080017b6 <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	889b      	ldrh	r3, [r3, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	f001 fbf3 	bl	8002fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6898      	ldr	r0, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	899b      	ldrh	r3, [r3, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	f001 fbeb 	bl	8002fd4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	8a9b      	ldrh	r3, [r3, #20]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f002 fa79 	bl	8003d00 <HAL_TIM_PWM_Stop>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 8001822:	edd7 7a00 	vldr	s15, [r7]
 8001826:	eef5 7a40 	vcmp.f32	s15, #0.0
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	f000 8085 	beq.w	800193c <motor_run+0x126>
		bool direction = power > 0.0;
 8001832:	edd7 7a00 	vldr	s15, [r7]
 8001836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	bfcc      	ite	gt
 8001840:	2301      	movgt	r3, #1
 8001842:	2300      	movle	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	889b      	ldrh	r3, [r3, #4]
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	4619      	mov	r1, r3
 8001852:	f001 fbbf 	bl	8002fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6898      	ldr	r0, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8999      	ldrh	r1, [r3, #12]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	f001 fbb4 	bl	8002fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8a9b      	ldrh	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d114      	bne.n	800189e <motor_run+0x88>
 8001874:	edd7 7a00 	vldr	s15, [r7]
 8001878:	eeb0 7ae7 	vabs.f32	s14, s15
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001896:	ee17 2a90 	vmov	r2, s15
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
 800189c:	e045      	b.n	800192a <motor_run+0x114>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	8a9b      	ldrh	r3, [r3, #20]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d114      	bne.n	80018d0 <motor_run+0xba>
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c8:	ee17 3a90 	vmov	r3, s15
 80018cc:	6393      	str	r3, [r2, #56]	; 0x38
 80018ce:	e02c      	b.n	800192a <motor_run+0x114>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	8a9b      	ldrh	r3, [r3, #20]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d114      	bne.n	8001902 <motor_run+0xec>
 80018d8:	edd7 7a00 	vldr	s15, [r7]
 80018dc:	eeb0 7ae7 	vabs.f32	s14, s15
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001900:	e013      	b.n	800192a <motor_run+0x114>
 8001902:	edd7 7a00 	vldr	s15, [r7]
 8001906:	eeb0 7ae7 	vabs.f32	s14, s15
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001924:	ee17 3a90 	vmov	r3, s15
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	8a9b      	ldrh	r3, [r3, #20]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f002 f933 	bl	8003ba0 <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 800193a:	e002      	b.n	8001942 <motor_run+0x12c>
		motor_stop(motor);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff4a 	bl	80017d6 <motor_stop>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <mecanum_robot_init>:

void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot){
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	motor_init(mecanum_robot->fl_motor);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff2d 	bl	80017b6 <motor_init>
	motor_init(mecanum_robot->fr_motor);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff28 	bl	80017b6 <motor_init>
	motor_init(mecanum_robot->bl_motor);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff23 	bl	80017b6 <motor_init>
	motor_init(mecanum_robot->br_motor);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff1e 	bl	80017b6 <motor_init>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff21 	bl	80017d6 <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff1c 	bl	80017d6 <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff17 	bl	80017d6 <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff12 	bl	80017d6 <motor_stop>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	0000      	movs	r0, r0
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	; 0x38
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80019d0:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 80019d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d10a      	bne.n	80019f8 <mecanum_robot_move+0x38>
 80019e2:	edd7 7a00 	vldr	s15, [r7]
 80019e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d103      	bne.n	80019f8 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ffc6 	bl	8001982 <mecanum_robot_stop>
		return;
 80019f6:	e0e4      	b.n	8001bc2 <mecanum_robot_move+0x202>
	}

	power = fmaxf(fminf(power, 1.0), 0.0);
 80019f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80019fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a00:	f00c fbc5 	bl	800e18e <fminf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	eddf 0a71 	vldr	s1, [pc, #452]	; 8001bd0 <mecanum_robot_move+0x210>
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	f00c fba2 	bl	800e158 <fmaxf>
 8001a14:	ed87 0a02 	vstr	s0, [r7, #8]

	float angle_offset = angle - M_PI_4;
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7fe fd9d 	bl	8000558 <__aeabi_f2d>
 8001a1e:	a36a      	add	r3, pc, #424	; (adr r3, 8001bc8 <mecanum_robot_move+0x208>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fc38 	bl	8000298 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f8e2 	bl	8000bf8 <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
	float sine = sin(angle_offset);
 8001a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a3a:	f7fe fd8d 	bl	8000558 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	ec43 2b10 	vmov	d0, r2, r3
 8001a46:	f00c fb2f 	bl	800e0a8 <sin>
 8001a4a:	ec53 2b10 	vmov	r2, r3, d0
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f8d1 	bl	8000bf8 <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 8001a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5c:	f7fe fd7c 	bl	8000558 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	ec43 2b10 	vmov	d0, r2, r3
 8001a68:	f00c faca 	bl	800e000 <cos>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f8c0 	bl	8000bf8 <__aeabi_d2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 8001a7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a80:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a88:	eef0 7ae7 	vabs.f32	s15, s15
 8001a8c:	eef0 0a67 	vmov.f32	s1, s15
 8001a90:	eeb0 0a47 	vmov.f32	s0, s14
 8001a94:	f00c fb60 	bl	800e158 <fmaxf>
 8001a98:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 8001a9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001aa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001aa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab0:	ed97 7a00 	vldr	s14, [r7]
 8001ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fr = power * sine/maximum - angular_speed;
 8001abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ac0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad0:	edd7 7a00 	vldr	s15, [r7]
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float bl = power * sine/maximum + angular_speed;
 8001adc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ae4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ae8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af0:	ed97 7a00 	vldr	s14, [r7]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float br = power * cosine/maximum - angular_speed;
 8001afc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b10:	edd7 7a00 	vldr	s15, [r7]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 8001b1c:	edd7 7a00 	vldr	s15, [r7]
 8001b20:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd27      	ble.n	8001b8a <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 8001b3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b3e:	edd7 7a00 	vldr	s15, [r7]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 8001b4a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fr /= k;
 8001b5a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001b5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		bl /= k;
 8001b6a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		br /= k;
 8001b7a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe3f 	bl	8001816 <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe38 	bl	8001816 <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe31 	bl	8001816 <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe2a 	bl	8001816 <motor_run>
}
 8001bc2:	3738      	adds	r7, #56	; 0x38
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	54442d18 	.word	0x54442d18
 8001bcc:	3fe921fb 	.word	0x3fe921fb
 8001bd0:	00000000 	.word	0x00000000

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_MspInit+0x54>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_MspInit+0x54>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_MspInit+0x54>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_MspInit+0x54>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_MspInit+0x54>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_MspInit+0x54>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f000 fc2b 	bl	8002474 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_TIM_Base_MspInit+0x48>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d115      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_TIM_Base_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_TIM_Base_MspInit+0x4c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_TIM_Base_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	201a      	movs	r0, #26
 8001c60:	f000 fc08 	bl	8002474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c64:	201a      	movs	r0, #26
 8001c66:	f000 fc21 	bl	80024ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d10d      	bne.n	8001caa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <HAL_TIM_MspPostInit+0xb0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11f      	bne.n	8001d1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ROBOT_ENB_B_Pin|ROBOT_ENA_A_Pin|ROBOT_ENA_B_Pin;
 8001cfa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <HAL_TIM_MspPostInit+0xb8>)
 8001d18:	f000 ffd8 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d1c:	e022      	b.n	8001d64 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d26:	d11d      	bne.n	8001d64 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_TIM_MspPostInit+0xb4>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ROBOT_ENB_A_Pin;
 8001d44:	2320      	movs	r3, #32
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ROBOT_ENB_A_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0xb8>)
 8001d60:	f000 ffb4 	bl	8002ccc <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <HAL_UART_MspInit+0x194>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 8083 	bne.w	8001ea2 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001da6:	f043 0310 	orr.w	r3, r3, #16
 8001daa:	6453      	str	r3, [r2, #68]	; 0x44
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e02:	2307      	movs	r3, #7
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4841      	ldr	r0, [pc, #260]	; (8001f14 <HAL_UART_MspInit+0x19c>)
 8001e0e:	f000 ff5d 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e22:	2307      	movs	r3, #7
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	483a      	ldr	r0, [pc, #232]	; (8001f18 <HAL_UART_MspInit+0x1a0>)
 8001e2e:	f000 ff4d 	bl	8002ccc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e34:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_UART_MspInit+0x1a8>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e46:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e74:	4829      	ldr	r0, [pc, #164]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e76:	f000 fb27 	bl	80024c8 <HAL_DMA_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001e80:	f7ff fc94 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8a:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_UART_MspInit+0x1a4>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2025      	movs	r0, #37	; 0x25
 8001e96:	f000 faed 	bl	8002474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9a:	2025      	movs	r0, #37	; 0x25
 8001e9c:	f000 fb06 	bl	80024ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea0:	e030      	b.n	8001f04 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_UART_MspInit+0x1ac>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d12b      	bne.n	8001f04 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_UART_MspInit+0x198>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_UART_MspInit+0x19c>)
 8001f00:	f000 fee4 	bl	8002ccc <HAL_GPIO_Init>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	2000038c 	.word	0x2000038c
 8001f20:	40026440 	.word	0x40026440
 8001f24:	40004400 	.word	0x40004400

08001f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f46:	6453      	str	r3, [r2, #68]	; 0x44
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_InitTick+0xd0>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f54:	f107 020c 	add.w	r2, r7, #12
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fcea 	bl	8003938 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f64:	f001 fcd4 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8001f68:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_InitTick+0xd4>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	3b01      	subs	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_InitTick+0xd8>)
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_InitTick+0xdc>)
 8001f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_InitTick+0xd8>)
 8001f80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f84:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_InitTick+0xd8>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_InitTick+0xd8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_InitTick+0xd8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_InitTick+0xd8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001f9e:	4818      	ldr	r0, [pc, #96]	; (8002000 <HAL_InitTick+0xd8>)
 8001fa0:	f001 fcfc 	bl	800399c <HAL_TIM_Base_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11b      	bne.n	8001fea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <HAL_InitTick+0xd8>)
 8001fb4:	f001 fd42 	bl	8003a3c <HAL_TIM_Base_Start_IT>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d111      	bne.n	8001fea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fc6:	201a      	movs	r0, #26
 8001fc8:	f000 fa70 	bl	80024ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	d808      	bhi.n	8001fe4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	201a      	movs	r0, #26
 8001fd8:	f000 fa4c 	bl	8002474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_InitTick+0xe0>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e002      	b.n	8001fea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	20000db0 	.word	0x20000db0
 8002004:	40014800 	.word	0x40014800
 8002008:	20000084 	.word	0x20000084

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800203e:	f001 fec3 	bl	8003dc8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002044:	f001 fec0 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000274 	.word	0x20000274
 8002050:	20000db0 	.word	0x20000db0

08002054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <USART1_IRQHandler+0x10>)
 800205a:	f002 fe53 	bl	8004d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000304 	.word	0x20000304

08002068 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA2_Stream2_IRQHandler+0x10>)
 800206e:	f000 fbc3 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000038c 	.word	0x2000038c

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002096:	f007 ffc3 	bl	800a020 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
  }

  return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fa1f 	bl	8001558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
  }
  return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:

int _close(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f007 ff28 	bl	800a020 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000df8 	.word	0x20000df8
 8002204:	20005938 	.word	0x20005938

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002256:	f7ff ffd7 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225a:	f007 fee7 	bl	800a02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7fe fecf 	bl	8001000 <main>
  bx  lr    
 8002262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002270:	0800f918 	.word	0x0800f918
  ldr r2, =_sbss
 8002274:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002278:	20005934 	.word	0x20005934

0800227c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_Init+0x40>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_Init+0x40>)
 8002296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_Init+0x40>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f8d8 	bl	800245e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	2005      	movs	r0, #5
 80022b0:	f7ff fe3a 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff fc8e 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000088 	.word	0x20000088
 80022e8:	20000dfc 	.word	0x20000dfc

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000dfc 	.word	0x20000dfc

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ff4c 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002486:	f7ff ff61 	bl	800234c <__NVIC_GetPriorityGrouping>
 800248a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7ff ffb1 	bl	80023f8 <NVIC_EncodePriority>
 8002496:	4602      	mov	r2, r0
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff80 	bl	80023a4 <__NVIC_SetPriority>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff54 	bl	8002368 <__NVIC_EnableIRQ>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff ff0a 	bl	80022ec <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e099      	b.n	8002618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	e00f      	b.n	8002526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002506:	f7ff fef1 	bl	80022ec <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b05      	cmp	r3, #5
 8002512:	d908      	bls.n	8002526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e078      	b.n	8002618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e8      	bne.n	8002506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_DMA_Init+0x158>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f023 0307 	bic.w	r3, r3, #7
 80025a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d117      	bne.n	80025ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fb01 	bl	8002bd4 <DMA_CheckFifoParam>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025e6:	2301      	movs	r3, #1
 80025e8:	e016      	b.n	8002618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fab8 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	223f      	movs	r2, #63	; 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	f010803f 	.word	0xf010803f

08002624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_DMA_Start_IT+0x26>
 8002646:	2302      	movs	r3, #2
 8002648:	e040      	b.n	80026cc <HAL_DMA_Start_IT+0xa8>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d12f      	bne.n	80026be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa4a 	bl	8002b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0216 	orr.w	r2, r2, #22
 8002692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e005      	b.n	80026ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e2:	f7ff fe03 	bl	80022ec <HAL_GetTick>
 80026e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e052      	b.n	80027ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0216 	bic.w	r2, r2, #22
 8002714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_DMA_Abort+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	e013      	b.n	8002780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002758:	f7ff fdc8 	bl	80022ec <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b05      	cmp	r3, #5
 8002764:	d90c      	bls.n	8002780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e015      	b.n	80027ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e4      	bne.n	8002758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	223f      	movs	r2, #63	; 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d004      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00c      	b.n	80027ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2205      	movs	r2, #5
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002804:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <HAL_DMA_IRQHandler+0x248>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a8e      	ldr	r2, [pc, #568]	; (8002a44 <HAL_DMA_IRQHandler+0x24c>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0a9b      	lsrs	r3, r3, #10
 8002810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2208      	movs	r2, #8
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01a      	beq.n	8002864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2208      	movs	r2, #8
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2201      	movs	r2, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0202 	orr.w	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2204      	movs	r2, #4
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2210      	movs	r2, #16
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d043      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03c      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2210      	movs	r2, #16
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d024      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e01f      	b.n	8002968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e016      	b.n	8002968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0208 	bic.w	r2, r2, #8
 8002956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2220      	movs	r2, #32
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 808f 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8087 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2220      	movs	r2, #32
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d136      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0216 	bic.w	r2, r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x1da>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0208 	bic.w	r2, r2, #8
 80029e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	223f      	movs	r2, #63	; 0x3f
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d07e      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
        }
        return;
 8002a0e:	e079      	b.n	8002b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d031      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
 8002a3c:	e02c      	b.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
 8002a3e:	bf00      	nop
 8002a40:	20000080 	.word	0x20000080
 8002a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e01e      	b.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0210 	bic.w	r2, r2, #16
 8002a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d307      	bcc.n	8002ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f2      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x2cc>
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
 8002b02:	e000      	b.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b04:	bf00      	nop
    }
  }
}
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d108      	bne.n	8002b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b4a:	e007      	b.n	8002b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3b10      	subs	r3, #16
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <DMA_CalcBaseAndBitshift+0x64>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d909      	bls.n	8002baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba8:	e007      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	0800f2dc 	.word	0x0800f2dc

08002bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d856      	bhi.n	8002ca2 <DMA_CheckFifoParam+0xce>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <DMA_CheckFifoParam+0x28>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c1f 	.word	0x08002c1f
 8002c04:	08002c0d 	.word	0x08002c0d
 8002c08:	08002ca3 	.word	0x08002ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d046      	beq.n	8002ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e043      	b.n	8002ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c26:	d140      	bne.n	8002caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e03d      	b.n	8002caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	d121      	bne.n	8002c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d837      	bhi.n	8002cae <DMA_CheckFifoParam+0xda>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <DMA_CheckFifoParam+0x70>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c5b 	.word	0x08002c5b
 8002c4c:	08002c55 	.word	0x08002c55
 8002c50:	08002c6d 	.word	0x08002c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e030      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d025      	beq.n	8002cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e022      	b.n	8002cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7a:	e01c      	b.n	8002cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d903      	bls.n	8002c8a <DMA_CheckFifoParam+0xb6>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d003      	beq.n	8002c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c88:	e018      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8e:	e015      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e00b      	b.n	8002cba <DMA_CheckFifoParam+0xe6>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e00a      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e008      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e006      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e004      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	e159      	b.n	8002f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8148 	bne.w	8002f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d130      	bne.n	8002d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0201 	and.w	r2, r3, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d017      	beq.n	8002dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d123      	bne.n	8002e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a2 	beq.w	8002f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_GPIO_Init+0x2e8>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <HAL_GPIO_Init+0x2e8>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6e:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_GPIO_Init+0x2ec>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a49      	ldr	r2, [pc, #292]	; (8002fbc <HAL_GPIO_Init+0x2f0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d019      	beq.n	8002ece <HAL_GPIO_Init+0x202>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_GPIO_Init+0x2f4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0x1fe>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_GPIO_Init+0x2f8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_GPIO_Init+0x1fa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a46      	ldr	r2, [pc, #280]	; (8002fc8 <HAL_GPIO_Init+0x2fc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_Init+0x1f6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a45      	ldr	r2, [pc, #276]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_GPIO_Init+0x1f2>
 8002eba:	2304      	movs	r3, #4
 8002ebc:	e008      	b.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002ebe:	2307      	movs	r3, #7
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e004      	b.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	f002 0203 	and.w	r2, r2, #3
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee0:	4935      	ldr	r1, [pc, #212]	; (8002fb8 <HAL_GPIO_Init+0x2ec>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eee:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f66:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	f67f aea2 	bls.w	8002ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e267      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00c      	beq.n	800304c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d112      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0x108>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d157      	bne.n	8003110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e242      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x74>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x98>
 8003086:	4b70      	ldr	r3, [pc, #448]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6f      	ldr	r2, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6c      	ldr	r2, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 80030a0:	4b69      	ldr	r3, [pc, #420]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff f914 	bl	80022ec <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff f910 	bl	80022ec <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e207      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff f900 	bl	80022ec <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7ff f8fc 	bl	80022ec <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f3      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0xe8>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x244>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7ff f8b5 	bl	80022ec <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003186:	f7ff f8b1 	bl	80022ec <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a8      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x244>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7ff f894 	bl	80022ec <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7ff f890 	bl	80022ec <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e187      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7ff f874 	bl	80022ec <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7ff f870 	bl	80022ec <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e167      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x200>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7ff f85d 	bl	80022ec <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7ff f859 	bl	80022ec <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e150      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7ff f819 	bl	80022ec <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7ff f815 	bl	80022ec <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e10c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ea>
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x30c>
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a5e      	ldr	r2, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a5b      	ldr	r2, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe ffda 	bl	80022ec <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe ffd6 	bl	80022ec <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cb      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x334>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe ffc4 	bl	80022ec <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe ffc0 	bl	80022ec <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0b5      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a1 	beq.w	80034e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d05c      	beq.n	800346c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d141      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe ff94 	bl	80022ec <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe ff90 	bl	80022ec <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e087      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe ff69 	bl	80022ec <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe ff65 	bl	80022ec <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e05c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x416>
 800343c:	e054      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe ff52 	bl	80022ec <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe ff4e 	bl	80022ec <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x444>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e038      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x4ec>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cc      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90c      	bls.n	8003534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d044      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e067      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4934      	ldr	r1, [pc, #208]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fe fe80 	bl	80022ec <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fe fe7c 	bl	80022ec <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e04f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d20c      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fc42 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800f2c4 	.word	0x0800f2c4
 80036bc:	20000080 	.word	0x20000080
 80036c0:	20000084 	.word	0x20000084

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b094      	sub	sp, #80	; 0x50
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	647b      	str	r3, [r7, #68]	; 0x44
 80036d0:	2300      	movs	r3, #0
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d4:	2300      	movs	r3, #0
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80e1 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e0db      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036fc:	e0db      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003702:	e0d8      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
 8003724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
 8003732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0159      	lsls	r1, r3, #5
 8003744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003748:	0150      	lsls	r0, r2, #5
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4621      	mov	r1, r4
 8003750:	1a51      	subs	r1, r2, r1
 8003752:	6139      	str	r1, [r7, #16]
 8003754:	4629      	mov	r1, r5
 8003756:	eb63 0301 	sbc.w	r3, r3, r1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003768:	4659      	mov	r1, fp
 800376a:	018b      	lsls	r3, r1, #6
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003772:	4651      	mov	r1, sl
 8003774:	018a      	lsls	r2, r1, #6
 8003776:	4651      	mov	r1, sl
 8003778:	ebb2 0801 	subs.w	r8, r2, r1
 800377c:	4659      	mov	r1, fp
 800377e:	eb63 0901 	sbc.w	r9, r3, r1
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	4690      	mov	r8, r2
 8003798:	4699      	mov	r9, r3
 800379a:	4623      	mov	r3, r4
 800379c:	eb18 0303 	adds.w	r3, r8, r3
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	462b      	mov	r3, r5
 80037a4:	eb49 0303 	adc.w	r3, r9, r3
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037b6:	4629      	mov	r1, r5
 80037b8:	024b      	lsls	r3, r1, #9
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037c0:	4621      	mov	r1, r4
 80037c2:	024a      	lsls	r2, r1, #9
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ca:	2200      	movs	r2, #0
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037d4:	f7fd fa60 	bl	8000c98 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4613      	mov	r3, r2
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e0:	e058      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	4611      	mov	r1, r2
 80037ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	f04f 0000 	mov.w	r0, #0
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380e:	0150      	lsls	r0, r2, #5
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4641      	mov	r1, r8
 8003816:	ebb2 0a01 	subs.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800382c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003834:	ebb2 040a 	subs.w	r4, r2, sl
 8003838:	eb63 050b 	sbc.w	r5, r3, fp
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	00eb      	lsls	r3, r5, #3
 8003846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	4643      	mov	r3, r8
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	464b      	mov	r3, r9
 8003858:	eb45 0303 	adc.w	r3, r5, r3
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	2200      	movs	r2, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	61fa      	str	r2, [r7, #28]
 8003884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003888:	f7fd fa06 	bl	8000c98 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3750      	adds	r7, #80	; 0x50
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000080 	.word	0x20000080

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	0800f2d4 	.word	0x0800f2d4

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	0800f2d4 	.word	0x0800f2d4

08003938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	220f      	movs	r2, #15
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCC_GetClockConfig+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0207 	and.w	r2, r3, #7
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe f932 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fcae 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e044      	b.n	8003ade <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_TIM_Base_Start_IT+0xb0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d013      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_TIM_Base_Start_IT+0xc0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d010      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	e007      	b.n	8003adc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40014000 	.word	0x40014000

08003b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e041      	b.n	8003b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe f8a8 	bl	8001c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f000 fbfc 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_TIM_PWM_Start+0x24>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e022      	b.n	8003c0a <HAL_TIM_PWM_Start+0x6a>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d109      	bne.n	8003bde <HAL_TIM_PWM_Start+0x3e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	e015      	b.n	8003c0a <HAL_TIM_PWM_Start+0x6a>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d109      	bne.n	8003bf8 <HAL_TIM_PWM_Start+0x58>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e008      	b.n	8003c0a <HAL_TIM_PWM_Start+0x6a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e068      	b.n	8003ce4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_PWM_Start+0x82>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c20:	e013      	b.n	8003c4a <HAL_TIM_PWM_Start+0xaa>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x92>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	e00b      	b.n	8003c4a <HAL_TIM_PWM_Start+0xaa>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0xa2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c40:	e003      	b.n	8003c4a <HAL_TIM_PWM_Start+0xaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fe18 	bl	8004888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_TIM_PWM_Start+0x14c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <HAL_TIM_PWM_Start+0x14c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_TIM_PWM_Start+0x10e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d013      	beq.n	8003cae <HAL_TIM_PWM_Start+0x10e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_TIM_PWM_Start+0x150>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIM_PWM_Start+0x10e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_TIM_PWM_Start+0x154>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_TIM_PWM_Start+0x10e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <HAL_TIM_PWM_Start+0x158>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIM_PWM_Start+0x10e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <HAL_TIM_PWM_Start+0x15c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d010      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	e007      	b.n	8003ce2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40014000 	.word	0x40014000

08003d00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdb8 	bl	8004888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_TIM_PWM_Stop+0xc4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d117      	bne.n	8003d52 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_TIM_PWM_Stop+0x52>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	f240 4344 	movw	r3, #1092	; 0x444
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_PWM_Stop+0x52>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10f      	bne.n	8003d82 <HAL_TIM_PWM_Stop+0x82>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	f240 4344 	movw	r3, #1092	; 0x444
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_TIM_PWM_Stop+0x82>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x92>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	e013      	b.n	8003dba <HAL_TIM_PWM_Stop+0xba>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Stop+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	e00b      	b.n	8003dba <HAL_TIM_PWM_Stop+0xba>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Stop+0xb2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	e003      	b.n	8003dba <HAL_TIM_PWM_Stop+0xba>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0202 	mvn.w	r2, #2
 8003df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa77 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa69 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fa7a 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0204 	mvn.w	r2, #4
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa4d 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa3f 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa50 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0208 	mvn.w	r2, #8
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa23 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa15 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa26 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0210 	mvn.w	r2, #16
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9f9 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9eb 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9fc 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0201 	mvn.w	r2, #1
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd fc1e 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fd78 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9c1 	bl	8004326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0220 	mvn.w	r2, #32
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fd42 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e0ae      	b.n	8004154 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	f200 809f 	bhi.w	8004144 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004041 	.word	0x08004041
 8004010:	08004145 	.word	0x08004145
 8004014:	08004145 	.word	0x08004145
 8004018:	08004145 	.word	0x08004145
 800401c:	08004081 	.word	0x08004081
 8004020:	08004145 	.word	0x08004145
 8004024:	08004145 	.word	0x08004145
 8004028:	08004145 	.word	0x08004145
 800402c:	080040c3 	.word	0x080040c3
 8004030:	08004145 	.word	0x08004145
 8004034:	08004145 	.word	0x08004145
 8004038:	08004145 	.word	0x08004145
 800403c:	08004103 	.word	0x08004103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9f8 	bl	800443c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6999      	ldr	r1, [r3, #24]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
      break;
 800407e:	e064      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fa3e 	bl	8004508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	619a      	str	r2, [r3, #24]
      break;
 80040c0:	e043      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fa89 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0208 	orr.w	r2, r2, #8
 80040dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0204 	bic.w	r2, r2, #4
 80040ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	61da      	str	r2, [r3, #28]
      break;
 8004100:	e023      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fad3 	bl	80046b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	021a      	lsls	r2, r3, #8
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	61da      	str	r2, [r3, #28]
      break;
 8004142:	e002      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
      break;
 8004148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004152:	7dfb      	ldrb	r3, [r7, #23]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIM_ConfigClockSource+0x1c>
 8004174:	2302      	movs	r3, #2
 8004176:	e0b4      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x186>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800419e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b0:	d03e      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0xd4>
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b6:	f200 8087 	bhi.w	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	f000 8086 	beq.w	80042ce <HAL_TIM_ConfigClockSource+0x172>
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	d87f      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b70      	cmp	r3, #112	; 0x70
 80041ca:	d01a      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0xa6>
 80041cc:	2b70      	cmp	r3, #112	; 0x70
 80041ce:	d87b      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b60      	cmp	r3, #96	; 0x60
 80041d2:	d050      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x11a>
 80041d4:	2b60      	cmp	r3, #96	; 0x60
 80041d6:	d877      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b50      	cmp	r3, #80	; 0x50
 80041da:	d03c      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xfa>
 80041dc:	2b50      	cmp	r3, #80	; 0x50
 80041de:	d873      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d058      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x13a>
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d86f      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b30      	cmp	r3, #48	; 0x30
 80041ea:	d064      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b30      	cmp	r3, #48	; 0x30
 80041ee:	d86b      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d060      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d867      	bhi.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15a>
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d05a      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004200:	e062      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6899      	ldr	r1, [r3, #8]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f000 fb19 	bl	8004848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	609a      	str	r2, [r3, #8]
      break;
 800422e:	e04f      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f000 fb02 	bl	8004848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004252:	609a      	str	r2, [r3, #8]
      break;
 8004254:	e03c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fa76 	bl	8004754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2150      	movs	r1, #80	; 0x50
 800426e:	4618      	mov	r0, r3
 8004270:	f000 facf 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 8004274:	e02c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fa95 	bl	80047b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2160      	movs	r1, #96	; 0x60
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fabf 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 8004294:	e01c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f000 fa56 	bl	8004754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 faaf 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042b4:	e00c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f000 faa6 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042c6:	e003      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00f      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d00b      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a31      	ldr	r2, [pc, #196]	; (8004424 <TIM_Base_SetConfig+0xe8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <TIM_Base_SetConfig+0xec>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <TIM_Base_SetConfig+0xf0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <TIM_Base_SetConfig+0xe8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a21      	ldr	r2, [pc, #132]	; (8004428 <TIM_Base_SetConfig+0xec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <TIM_Base_SetConfig+0xf0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <TIM_Base_SetConfig+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <TIM_Base_SetConfig+0xf8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <TIM_Base_SetConfig+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	615a      	str	r2, [r3, #20]
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40010000 	.word	0x40010000

08004508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <TIM_OC2_SetConfig+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC2_SetConfig+0xd4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d113      	bne.n	80045b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <TIM_OC3_SetConfig+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC3_SetConfig+0xd0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d113      	bne.n	800468a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40010000 	.word	0x40010000

080046b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	031b      	lsls	r3, r3, #12
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <TIM_OC4_SetConfig+0x9c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d109      	bne.n	8004728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800471a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000

08004754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 030a 	bic.w	r3, r3, #10
 8004790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0210 	bic.w	r2, r3, #16
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 0307 	orr.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	431a      	orrs	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e050      	b.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d018      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d013      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a13      	ldr	r2, [pc, #76]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10c      	bne.n	800497c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4313      	orrs	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000

080049b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e03d      	b.n	8004a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03f      	b.n	8004b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd f968 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 ff9b 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b08a      	sub	sp, #40	; 0x28
 8004b1a:	af02      	add	r7, sp, #8
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d17c      	bne.n	8004c30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_Transmit+0x2c>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e075      	b.n	8004c32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x3e>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e06e      	b.n	8004c32 <HAL_UART_Transmit+0x11c>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2221      	movs	r2, #33	; 0x21
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fbbf 	bl	80022ec <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x82>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ba8:	e02a      	b.n	8004c00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2180      	movs	r1, #128	; 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fc53 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e036      	b.n	8004c32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e007      	b.n	8004bf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cf      	bne.n	8004baa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fc23 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e006      	b.n	8004c32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b08c      	sub	sp, #48	; 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d152      	bne.n	8004cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e04b      	b.n	8004cfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e044      	b.n	8004cfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fc58 	bl	800553c <UART_Start_Receive_DMA>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d12c      	bne.n	8004cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d125      	bne.n	8004cee <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f043 0310 	orr.w	r3, r3, #16
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004cda:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6a39      	ldr	r1, [r7, #32]
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004cec:	e002      	b.n	8004cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cf8:	e000      	b.n	8004cfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0ba      	sub	sp, #232	; 0xe8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_UART_IRQHandler+0x66>
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fd8f 	bl	8005886 <UART_Receive_IT>
      return;
 8004d68:	e256      	b.n	8005218 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80de 	beq.w	8004f30 <HAL_UART_IRQHandler+0x22c>
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80d1 	beq.w	8004f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_UART_IRQHandler+0xae>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_UART_IRQHandler+0xd2>
 8004dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f043 0202 	orr.w	r2, r3, #2
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_UART_IRQHandler+0xf6>
 8004de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0204 	orr.w	r2, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d011      	beq.n	8004e2a <HAL_UART_IRQHandler+0x126>
 8004e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f043 0208 	orr.w	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 81ed 	beq.w	800520e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_UART_IRQHandler+0x14e>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fd1a 	bl	8005886 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_UART_IRQHandler+0x17a>
 8004e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04f      	beq.n	8004f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fc22 	bl	80056c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d141      	bne.n	8004f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1d9      	bne.n	8004e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d013      	beq.n	8004f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	4a7d      	ldr	r2, [pc, #500]	; (80050e0 <HAL_UART_IRQHandler+0x3dc>)
 8004eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd fc5e 	bl	80027b4 <HAL_DMA_Abort_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	e00e      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9a4 	bl	800525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	e00a      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9a0 	bl	800525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e006      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f99c 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f2a:	e170      	b.n	800520e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	bf00      	nop
    return;
 8004f2e:	e16e      	b.n	800520e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 814a 	bne.w	80051ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8143 	beq.w	80051ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 813c 	beq.w	80051ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	f040 80b4 	bne.w	80050e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 8140 	beq.w	8005212 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	f080 8139 	bcs.w	8005212 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	f000 8088 	beq.w	80050c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1d9      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800502a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800502e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e1      	bne.n	8005002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800504e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e3      	bne.n	800503e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	f023 0310 	bic.w	r3, r3, #16
 800509a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e3      	bne.n	8005084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fd fb07 	bl	80026d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fc fa50 	bl	800157c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050dc:	e099      	b.n	8005212 <HAL_UART_IRQHandler+0x50e>
 80050de:	bf00      	nop
 80050e0:	0800578f 	.word	0x0800578f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 808b 	beq.w	8005216 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8086 	beq.w	8005216 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	330c      	adds	r3, #12
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800512e:	647a      	str	r2, [r7, #68]	; 0x44
 8005130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800513c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e3      	bne.n	800510a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	623b      	str	r3, [r7, #32]
   return(result);
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3314      	adds	r3, #20
 8005162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005166:	633a      	str	r2, [r7, #48]	; 0x30
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e3      	bne.n	8005142 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60fb      	str	r3, [r7, #12]
   return(result);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0310 	bic.w	r3, r3, #16
 800519e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051ac:	61fa      	str	r2, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e3      	bne.n	8005188 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc f9d8 	bl	800157c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051cc:	e023      	b.n	8005216 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <HAL_UART_IRQHandler+0x4ea>
 80051da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fae5 	bl	80057b6 <UART_Transmit_IT>
    return;
 80051ec:	e014      	b.n	8005218 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <HAL_UART_IRQHandler+0x514>
 80051fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb25 	bl	8005856 <UART_EndTransmit_IT>
    return;
 800520c:	e004      	b.n	8005218 <HAL_UART_IRQHandler+0x514>
    return;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_UART_IRQHandler+0x514>
      return;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_UART_IRQHandler+0x514>
      return;
 8005216:	bf00      	nop
  }
}
 8005218:	37e8      	adds	r7, #232	; 0xe8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop

08005220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b09c      	sub	sp, #112	; 0x70
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d172      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	2200      	movs	r2, #0
 8005290:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	667b      	str	r3, [r7, #100]	; 0x64
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052e6:	647a      	str	r2, [r7, #68]	; 0x44
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	623b      	str	r3, [r7, #32]
   return(result);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531a:	633a      	str	r2, [r7, #48]	; 0x30
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	2b01      	cmp	r3, #1
 800533c:	d119      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60fb      	str	r3, [r7, #12]
   return(result);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0310 	bic.w	r3, r3, #16
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	617b      	str	r3, [r7, #20]
   return(result);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d106      	bne.n	8005388 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537e:	4619      	mov	r1, r3
 8005380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005382:	f7fc f8fb 	bl	800157c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005386:	e002      	b.n	800538e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800538a:	f7ff ff53 	bl	8005234 <HAL_UART_RxCpltCallback>
}
 800538e:	bf00      	nop
 8005390:	3770      	adds	r7, #112	; 0x70
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d108      	bne.n	80053be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	4619      	mov	r1, r3
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7fc f8e0 	bl	800157c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053bc:	e002      	b.n	80053c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff ff42 	bl	8005248 <HAL_UART_RxHalfCpltCallback>
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b21      	cmp	r3, #33	; 0x21
 80053fe:	d108      	bne.n	8005412 <UART_DMAError+0x46>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800540c:	68b8      	ldr	r0, [r7, #8]
 800540e:	f000 f933 	bl	8005678 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	d108      	bne.n	8005446 <UART_DMAError+0x7a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005440:	68b8      	ldr	r0, [r7, #8]
 8005442:	f000 f941 	bl	80056c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005452:	68b8      	ldr	r0, [r7, #8]
 8005454:	f7ff ff02 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	; 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	e050      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d04c      	beq.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800547a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
 8005480:	f7fc ff34 	bl	80022ec <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548c:	429a      	cmp	r2, r3
 800548e:	d241      	bcs.n	8005514 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b0:	637a      	str	r2, [r7, #52]	; 0x34
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e4:	623a      	str	r2, [r7, #32]
 80054e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e00f      	b.n	8005534 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	429a      	cmp	r2, r3
 8005530:	d09f      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3740      	adds	r7, #64	; 0x40
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b098      	sub	sp, #96	; 0x60
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2222      	movs	r2, #34	; 0x22
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	4a40      	ldr	r2, [pc, #256]	; (800566c <UART_Start_Receive_DMA+0x130>)
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	4a3f      	ldr	r2, [pc, #252]	; (8005670 <UART_Start_Receive_DMA+0x134>)
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	4a3e      	ldr	r2, [pc, #248]	; (8005674 <UART_Start_Receive_DMA+0x138>)
 800557a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	2200      	movs	r2, #0
 8005582:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	f7fd f842 	bl	8002624 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d019      	beq.n	80055fa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	657b      	str	r3, [r7, #84]	; 0x54
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800561a:	63ba      	str	r2, [r7, #56]	; 0x38
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	617b      	str	r3, [r7, #20]
   return(result);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005644:	653b      	str	r3, [r7, #80]	; 0x50
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3314      	adds	r3, #20
 800564c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800564e:	627a      	str	r2, [r7, #36]	; 0x24
 8005650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6a39      	ldr	r1, [r7, #32]
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	61fb      	str	r3, [r7, #28]
   return(result);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3760      	adds	r7, #96	; 0x60
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	08005271 	.word	0x08005271
 8005670:	08005397 	.word	0x08005397
 8005674:	080053cd 	.word	0x080053cd

08005678 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	61ba      	str	r2, [r7, #24]
 80056a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	613b      	str	r3, [r7, #16]
   return(result);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80056bc:	bf00      	nop
 80056be:	3724      	adds	r7, #36	; 0x24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b095      	sub	sp, #84	; 0x54
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f0:	643a      	str	r2, [r7, #64]	; 0x40
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e5      	bne.n	80056d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	64bb      	str	r3, [r7, #72]	; 0x48
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3314      	adds	r3, #20
 8005722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800572a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	d119      	bne.n	8005774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0310 	bic.w	r3, r3, #16
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005760:	61ba      	str	r2, [r7, #24]
 8005762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6979      	ldr	r1, [r7, #20]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	613b      	str	r3, [r7, #16]
   return(result);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e5      	bne.n	8005740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005782:	bf00      	nop
 8005784:	3754      	adds	r7, #84	; 0x54
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fd57 	bl	800525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b21      	cmp	r3, #33	; 0x21
 80057c8:	d13e      	bne.n	8005848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d2:	d114      	bne.n	80057fe <UART_Transmit_IT+0x48>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d110      	bne.n	80057fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]
 80057fc:	e008      	b.n	8005810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	1c59      	adds	r1, r3, #1
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6211      	str	r1, [r2, #32]
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4619      	mov	r1, r3
 800581e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fcd2 	bl	8005220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b08c      	sub	sp, #48	; 0x30
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b22      	cmp	r3, #34	; 0x22
 8005898:	f040 80ab 	bne.w	80059f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a4:	d117      	bne.n	80058d6 <UART_Receive_IT+0x50>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d113      	bne.n	80058d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	1c9a      	adds	r2, r3, #2
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
 80058d4:	e026      	b.n	8005924 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e8:	d007      	beq.n	80058fa <UART_Receive_IT+0x74>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <UART_Receive_IT+0x82>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e008      	b.n	800591a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005914:	b2da      	uxtb	r2, r3
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4619      	mov	r1, r3
 8005932:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005934:	2b00      	cmp	r3, #0
 8005936:	d15a      	bne.n	80059ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0220 	bic.w	r2, r2, #32
 8005946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	2b01      	cmp	r3, #1
 8005976:	d135      	bne.n	80059e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	613b      	str	r3, [r7, #16]
   return(result);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f023 0310 	bic.w	r3, r3, #16
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	623a      	str	r2, [r7, #32]
 80059a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	69f9      	ldr	r1, [r7, #28]
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d10a      	bne.n	80059d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fb fdcd 	bl	800157c <HAL_UARTEx_RxEventCallback>
 80059e2:	e002      	b.n	80059ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fc25 	bl	8005234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e002      	b.n	80059f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e000      	b.n	80059f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
  }
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3730      	adds	r7, #48	; 0x30
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a00:	b0c0      	sub	sp, #256	; 0x100
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	ea40 0301 	orr.w	r3, r0, r1
 8005a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a54:	f021 010c 	bic.w	r1, r1, #12
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	6999      	ldr	r1, [r3, #24]
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	ea40 0301 	orr.w	r3, r0, r1
 8005a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8f      	ldr	r3, [pc, #572]	; (8005cc8 <UART_SetConfig+0x2cc>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <UART_SetConfig+0xa0>
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <UART_SetConfig+0x2d0>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d104      	bne.n	8005aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fd ff38 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aa4:	e003      	b.n	8005aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7fd ff1f 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	f040 810c 	bne.w	8005cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ade:	4621      	mov	r1, r4
 8005ae0:	eb12 0801 	adds.w	r8, r2, r1
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb43 0901 	adc.w	r9, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afe:	4690      	mov	r8, r2
 8005b00:	4699      	mov	r9, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb18 0303 	adds.w	r3, r8, r3
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	eb49 0303 	adc.w	r3, r9, r3
 8005b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	18db      	adds	r3, r3, r3
 8005b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b30:	4613      	mov	r3, r2
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	657b      	str	r3, [r7, #84]	; 0x54
 8005b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b40:	f7fb f8aa 	bl	8000c98 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b61      	ldr	r3, [pc, #388]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b74:	4641      	mov	r1, r8
 8005b76:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b94:	4692      	mov	sl, r2
 8005b96:	469b      	mov	fp, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	18db      	adds	r3, r3, r3
 8005bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bd6:	f7fb f85f 	bl	8000c98 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005be2:	fba3 2301 	umull	r2, r3, r3, r1
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2264      	movs	r2, #100	; 0x64
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	1acb      	subs	r3, r1, r3
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bf6:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c20:	415b      	adcs	r3, r3
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c28:	4641      	mov	r1, r8
 8005c2a:	1851      	adds	r1, r2, r1
 8005c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c2e:	4649      	mov	r1, r9
 8005c30:	414b      	adcs	r3, r1
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c40:	4659      	mov	r1, fp
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	4651      	mov	r1, sl
 8005c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	00ca      	lsls	r2, r1, #3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	4642      	mov	r2, r8
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	460a      	mov	r2, r1
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	18db      	adds	r3, r3, r3
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	4613      	mov	r3, r2
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c92:	f7fb f801 	bl	8000c98 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	2164      	movs	r1, #100	; 0x64
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	3332      	adds	r3, #50	; 0x32
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f003 0207 	and.w	r2, r3, #7
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4422      	add	r2, r4
 8005cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc4:	e106      	b.n	8005ed4 <UART_SetConfig+0x4d8>
 8005cc6:	bf00      	nop
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	6239      	str	r1, [r7, #32]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1854      	adds	r4, r2, r1
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	eb43 0501 	adc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	eb45 0303 	adc.w	r3, r5, r3
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d42:	4629      	mov	r1, r5
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	4621      	mov	r1, r4
 8005d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	008a      	lsls	r2, r1, #2
 8005d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d54:	f7fa ffa0 	bl	8000c98 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b60      	ldr	r3, [pc, #384]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	61b9      	str	r1, [r7, #24]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6139      	str	r1, [r7, #16]
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005de0:	4649      	mov	r1, r9
 8005de2:	008b      	lsls	r3, r1, #2
 8005de4:	4641      	mov	r1, r8
 8005de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dea:	4641      	mov	r1, r8
 8005dec:	008a      	lsls	r2, r1, #2
 8005dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005df2:	f7fa ff51 	bl	8000c98 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	; 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1c:	441c      	add	r4, r3
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	673b      	str	r3, [r7, #112]	; 0x70
 8005e26:	677a      	str	r2, [r7, #116]	; 0x74
 8005e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	415b      	adcs	r3, r3
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	1851      	adds	r1, r2, r1
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	4649      	mov	r1, r9
 8005e44:	414b      	adcs	r3, r1
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e54:	4659      	mov	r1, fp
 8005e56:	00cb      	lsls	r3, r1, #3
 8005e58:	4651      	mov	r1, sl
 8005e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5e:	4651      	mov	r1, sl
 8005e60:	00ca      	lsls	r2, r1, #3
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	4642      	mov	r2, r8
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e6e:	464b      	mov	r3, r9
 8005e70:	460a      	mov	r2, r1
 8005e72:	eb42 0303 	adc.w	r3, r2, r3
 8005e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	663b      	str	r3, [r7, #96]	; 0x60
 8005e82:	667a      	str	r2, [r7, #100]	; 0x64
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e90:	4649      	mov	r1, r9
 8005e92:	008b      	lsls	r3, r1, #2
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	008a      	lsls	r2, r1, #2
 8005e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ea2:	f7fa fef9 	bl	8000c98 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	; 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4422      	add	r2, r4
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005eda:	46bd      	mov	sp, r7
 8005edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <__NVIC_SetPriority>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	6039      	str	r1, [r7, #0]
 8005eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	db0a      	blt.n	8005f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	490c      	ldr	r1, [pc, #48]	; (8005f30 <__NVIC_SetPriority+0x4c>)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	0112      	lsls	r2, r2, #4
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	440b      	add	r3, r1
 8005f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f0c:	e00a      	b.n	8005f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <__NVIC_SetPriority+0x50>)
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	3b04      	subs	r3, #4
 8005f1c:	0112      	lsls	r2, r2, #4
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	440b      	add	r3, r1
 8005f22:	761a      	strb	r2, [r3, #24]
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	e000e100 	.word	0xe000e100
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <SysTick_Handler+0x1c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f40:	f001 fd28 	bl	8007994 <xTaskGetSchedulerState>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d001      	beq.n	8005f4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f4a:	f002 fb0d 	bl	8008568 <xPortSysTickHandler>
  }
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	e000e010 	.word	0xe000e010

08005f58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f06f 0004 	mvn.w	r0, #4
 8005f62:	f7ff ffbf 	bl	8005ee4 <__NVIC_SetPriority>
#endif
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f72:	f3ef 8305 	mrs	r3, IPSR
 8005f76:	603b      	str	r3, [r7, #0]
  return(result);
 8005f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f7e:	f06f 0305 	mvn.w	r3, #5
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	e00c      	b.n	8005fa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <osKernelInitialize+0x44>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <osKernelInitialize+0x44>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	e002      	b.n	8005fa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fa0:	687b      	ldr	r3, [r7, #4]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000e00 	.word	0x20000e00

08005fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fba:	f3ef 8305 	mrs	r3, IPSR
 8005fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005fc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fc6:	f06f 0305 	mvn.w	r3, #5
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	e010      	b.n	8005ff0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <osKernelStart+0x48>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d109      	bne.n	8005fea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fd6:	f7ff ffbf 	bl	8005f58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <osKernelStart+0x48>)
 8005fdc:	2202      	movs	r2, #2
 8005fde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fe0:	f001 f87c 	bl	80070dc <vTaskStartScheduler>
      stat = osOK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	e002      	b.n	8005ff0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ff0:	687b      	ldr	r3, [r7, #4]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000e00 	.word	0x20000e00

08006000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b08e      	sub	sp, #56	; 0x38
 8006004:	af04      	add	r7, sp, #16
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	617b      	str	r3, [r7, #20]
  return(result);
 8006016:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006018:	2b00      	cmp	r3, #0
 800601a:	d17e      	bne.n	800611a <osThreadNew+0x11a>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d07b      	beq.n	800611a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006026:	2318      	movs	r3, #24
 8006028:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800602e:	f04f 33ff 	mov.w	r3, #4294967295
 8006032:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d045      	beq.n	80060c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <osThreadNew+0x48>
        name = attr->name;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <osThreadNew+0x6e>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b38      	cmp	r3, #56	; 0x38
 8006060:	d805      	bhi.n	800606e <osThreadNew+0x6e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <osThreadNew+0x72>
        return (NULL);
 800606e:	2300      	movs	r3, #0
 8006070:	e054      	b.n	800611c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <osThreadNew+0xa8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2ba7      	cmp	r3, #167	; 0xa7
 8006090:	d90a      	bls.n	80060a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006096:	2b00      	cmp	r3, #0
 8006098:	d006      	beq.n	80060a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <osThreadNew+0xa8>
        mem = 1;
 80060a2:	2301      	movs	r3, #1
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e010      	b.n	80060ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <osThreadNew+0xca>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d108      	bne.n	80060ca <osThreadNew+0xca>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <osThreadNew+0xca>
          mem = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	e001      	b.n	80060ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d110      	bne.n	80060f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fe0c 	bl	8006d04 <xTaskCreateStatic>
 80060ec:	4603      	mov	r3, r0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	e013      	b.n	800611a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d110      	bne.n	800611a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f107 0310 	add.w	r3, r7, #16
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fe57 	bl	8006dbe <xTaskCreate>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <osThreadNew+0x11a>
            hTask = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800611a:	693b      	ldr	r3, [r7, #16]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	; 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612c:	f3ef 8305 	mrs	r3, IPSR
 8006130:	60bb      	str	r3, [r7, #8]
  return(result);
 8006132:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <osDelay+0x1c>
    stat = osErrorISR;
 8006138:	f06f 0305 	mvn.w	r3, #5
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e007      	b.n	8006150 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <osDelay+0x2c>
      vTaskDelay(ticks);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 ff92 	bl	8007074 <vTaskDelay>
    }
  }

  return (stat);
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a07      	ldr	r2, [pc, #28]	; (8006188 <vApplicationGetIdleTaskMemory+0x2c>)
 800616c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4a06      	ldr	r2, [pc, #24]	; (800618c <vApplicationGetIdleTaskMemory+0x30>)
 8006172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2280      	movs	r2, #128	; 0x80
 8006178:	601a      	str	r2, [r3, #0]
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000e04 	.word	0x20000e04
 800618c:	20000eac 	.word	0x20000eac

08006190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <vApplicationGetTimerTaskMemory+0x2c>)
 80061a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <vApplicationGetTimerTaskMemory+0x30>)
 80061a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	200010ac 	.word	0x200010ac
 80061c0:	20001154 	.word	0x20001154

080061c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f103 0208 	add.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0208 	add.w	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 0208 	add.w	r2, r3, #8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d103      	bne.n	8006286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e00c      	b.n	80062a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3308      	adds	r3, #8
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e002      	b.n	8006294 <vListInsert+0x2e>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	d2f6      	bcs.n	800628e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6892      	ldr	r2, [r2, #8]
 80062ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d103      	bne.n	800630c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1e5a      	subs	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006356:	f002 f875 	bl	8008444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	68f9      	ldr	r1, [r7, #12]
 8006364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006366:	fb01 f303 	mul.w	r3, r1, r3
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	3b01      	subs	r3, #1
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	441a      	add	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	22ff      	movs	r2, #255	; 0xff
 80063a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d114      	bne.n	80063d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01a      	beq.n	80063ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3310      	adds	r3, #16
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 f929 	bl	8007610 <xTaskRemoveFromEventList>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d012      	beq.n	80063ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <xQueueGenericReset+0xcc>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	e009      	b.n	80063ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3310      	adds	r3, #16
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fef2 	bl	80061c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff feed 	bl	80061c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f002 f85b 	bl	80084a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063ee:	2301      	movs	r3, #1
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08e      	sub	sp, #56	; 0x38
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <xQueueGenericCreateStatic+0x52>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <xQueueGenericCreateStatic+0x56>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <xQueueGenericCreateStatic+0x58>
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	623b      	str	r3, [r7, #32]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xQueueGenericCreateStatic+0x7e>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueGenericCreateStatic+0x82>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueGenericCreateStatic+0x84>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fb      	str	r3, [r7, #28]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800649a:	2350      	movs	r3, #80	; 0x50
 800649c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b50      	cmp	r3, #80	; 0x50
 80064a2:	d00a      	beq.n	80064ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	61bb      	str	r3, [r7, #24]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00d      	beq.n	80064e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f805 	bl	80064ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3730      	adds	r7, #48	; 0x30
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e002      	b.n	800650e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800651a:	2101      	movs	r1, #1
 800651c:	69b8      	ldr	r0, [r7, #24]
 800651e:	f7ff ff05 	bl	800632c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	; 0x38
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueGenericSend+0x32>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <xQueueGenericSend+0x40>
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <xQueueGenericSend+0x44>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <xQueueGenericSend+0x46>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <xQueueGenericSend+0x60>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x6e>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSend+0x72>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSend+0x74>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c2:	f001 f9e7 	bl	8007994 <xTaskGetSchedulerState>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <xQueueGenericSend+0x9e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericSend+0xa2>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericSend+0xa4>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f2:	f001 ff27 	bl	8008444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <xQueueGenericSend+0xd4>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d129      	bne.n	800665c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660e:	f000 fa0b 	bl	8006a28 <prvCopyDataToQueue>
 8006612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	3324      	adds	r3, #36	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fff5 	bl	8007610 <xTaskRemoveFromEventList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d013      	beq.n	8006654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800662c:	4b3f      	ldr	r3, [pc, #252]	; (800672c <xQueueGenericSend+0x1f8>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	e00a      	b.n	8006654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <xQueueGenericSend+0x1f8>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006654:	f001 ff26 	bl	80084a4 <vPortExitCritical>
				return pdPASS;
 8006658:	2301      	movs	r3, #1
 800665a:	e063      	b.n	8006724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006662:	f001 ff1f 	bl	80084a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006666:	2300      	movs	r3, #0
 8006668:	e05c      	b.n	8006724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f82f 	bl	80076d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800667e:	f001 ff11 	bl	80084a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006682:	f000 fd9b 	bl	80071bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006686:	f001 fedd 	bl	8008444 <vPortEnterCritical>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d103      	bne.n	80066a0 <xQueueGenericSend+0x16c>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d103      	bne.n	80066b6 <xQueueGenericSend+0x182>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b6:	f001 fef5 	bl	80084a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ba:	1d3a      	adds	r2, r7, #4
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f81e 	bl	8007704 <xTaskCheckForTimeOut>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d124      	bne.n	8006718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d0:	f000 faa2 	bl	8006c18 <prvIsQueueFull>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d018      	beq.n	800670c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	3310      	adds	r3, #16
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 ff44 	bl	8007570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ea:	f000 fa2d 	bl	8006b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ee:	f000 fd73 	bl	80071d8 <xTaskResumeAll>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af7c 	bne.w	80065f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <xQueueGenericSend+0x1f8>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	e772      	b.n	80065f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800670c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670e:	f000 fa1b 	bl	8006b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006712:	f000 fd61 	bl	80071d8 <xTaskResumeAll>
 8006716:	e76c      	b.n	80065f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800671a:	f000 fa15 	bl	8006b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800671e:	f000 fd5b 	bl	80071d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006724:	4618      	mov	r0, r3
 8006726:	3738      	adds	r7, #56	; 0x38
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b090      	sub	sp, #64	; 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <xQueueGenericSendFromISR+0x3c>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueGenericSendFromISR+0x40>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <xQueueGenericSendFromISR+0x42>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d103      	bne.n	800679a <xQueueGenericSendFromISR+0x6a>
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <xQueueGenericSendFromISR+0x6e>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSendFromISR+0x70>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	623b      	str	r3, [r7, #32]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ba:	f001 ff25 	bl	8008608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067be:	f3ef 8211 	mrs	r2, BASEPRI
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	61fa      	str	r2, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <xQueueGenericSendFromISR+0xbc>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d12f      	bne.n	800684c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006802:	f000 f911 	bl	8006a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d112      	bne.n	8006836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fef7 	bl	8007610 <xTaskRemoveFromEventList>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00e      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e007      	b.n	8006846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800683a:	3301      	adds	r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	b25a      	sxtb	r2, r3
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006846:	2301      	movs	r3, #1
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800684a:	e001      	b.n	8006850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800685a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800685e:	4618      	mov	r0, r3
 8006860:	3740      	adds	r7, #64	; 0x40
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08c      	sub	sp, #48	; 0x30
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <xQueueReceive+0x30>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	623b      	str	r3, [r7, #32]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <xQueueReceive+0x3e>
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <xQueueReceive+0x42>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <xQueueReceive+0x44>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xQueueReceive+0x5e>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	61fb      	str	r3, [r7, #28]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068c6:	f001 f865 	bl	8007994 <xTaskGetSchedulerState>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <xQueueReceive+0x6e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <xQueueReceive+0x72>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <xQueueReceive+0x74>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xQueueReceive+0x8e>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068f6:	f001 fda5 	bl	8008444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01f      	beq.n	8006946 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690a:	f000 f8f7 	bl	8006afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	1e5a      	subs	r2, r3, #1
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	3310      	adds	r3, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fe74 	bl	8007610 <xTaskRemoveFromEventList>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800692e:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <xQueueReceive+0x1bc>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800693e:	f001 fdb1 	bl	80084a4 <vPortExitCritical>
				return pdPASS;
 8006942:	2301      	movs	r3, #1
 8006944:	e069      	b.n	8006a1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800694c:	f001 fdaa 	bl	80084a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006950:	2300      	movs	r3, #0
 8006952:	e062      	b.n	8006a1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	4618      	mov	r0, r3
 8006960:	f000 feba 	bl	80076d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006968:	f001 fd9c 	bl	80084a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800696c:	f000 fc26 	bl	80071bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006970:	f001 fd68 	bl	8008444 <vPortEnterCritical>
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697a:	b25b      	sxtb	r3, r3
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d103      	bne.n	800698a <xQueueReceive+0x122>
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006990:	b25b      	sxtb	r3, r3
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d103      	bne.n	80069a0 <xQueueReceive+0x138>
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a0:	f001 fd80 	bl	80084a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069a4:	1d3a      	adds	r2, r7, #4
 80069a6:	f107 0310 	add.w	r3, r7, #16
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fea9 	bl	8007704 <xTaskCheckForTimeOut>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d123      	bne.n	8006a00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f000 f917 	bl	8006bec <prvIsQueueEmpty>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d017      	beq.n	80069f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fdcf 	bl	8007570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d4:	f000 f8b8 	bl	8006b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069d8:	f000 fbfe 	bl	80071d8 <xTaskResumeAll>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d189      	bne.n	80068f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069e2:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <xQueueReceive+0x1bc>)
 80069e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	e780      	b.n	80068f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f6:	f000 f8a7 	bl	8006b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069fa:	f000 fbed 	bl	80071d8 <xTaskResumeAll>
 80069fe:	e77a      	b.n	80068f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a02:	f000 f8a1 	bl	8006b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a06:	f000 fbe7 	bl	80071d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0c:	f000 f8ee 	bl	8006bec <prvIsQueueEmpty>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f43f af6f 	beq.w	80068f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3730      	adds	r7, #48	; 0x30
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d14d      	bne.n	8006aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 ffbc 	bl	80079d0 <xTaskPriorityDisinherit>
 8006a58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	e043      	b.n	8006aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d119      	bne.n	8006a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6858      	ldr	r0, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	461a      	mov	r2, r3
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	f003 fb01 	bl	800a07a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d32b      	bcc.n	8006aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	e026      	b.n	8006aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68d8      	ldr	r0, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	f003 fae7 	bl	800a07a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	441a      	add	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d207      	bcs.n	8006ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	425b      	negs	r3, r3
 8006ad2:	441a      	add	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d105      	bne.n	8006aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006af2:	697b      	ldr	r3, [r7, #20]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d018      	beq.n	8006b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	441a      	add	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d303      	bcc.n	8006b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68d9      	ldr	r1, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6838      	ldr	r0, [r7, #0]
 8006b3c:	f003 fa9d 	bl	800a07a <memcpy>
	}
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b50:	f001 fc78 	bl	8008444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b5c:	e011      	b.n	8006b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d012      	beq.n	8006b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3324      	adds	r3, #36	; 0x24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fd50 	bl	8007610 <xTaskRemoveFromEventList>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b76:	f000 fe27 	bl	80077c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dce9      	bgt.n	8006b5e <prvUnlockQueue+0x16>
 8006b8a:	e000      	b.n	8006b8e <prvUnlockQueue+0x46>
					break;
 8006b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b96:	f001 fc85 	bl	80084a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b9a:	f001 fc53 	bl	8008444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ba6:	e011      	b.n	8006bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3310      	adds	r3, #16
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fd2b 	bl	8007610 <xTaskRemoveFromEventList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bc0:	f000 fe02 	bl	80077c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dce9      	bgt.n	8006ba8 <prvUnlockQueue+0x60>
 8006bd4:	e000      	b.n	8006bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	22ff      	movs	r2, #255	; 0xff
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006be0:	f001 fc60 	bl	80084a4 <vPortExitCritical>
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bf4:	f001 fc26 	bl	8008444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e001      	b.n	8006c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c0a:	f001 fc4b 	bl	80084a4 <vPortExitCritical>

	return xReturn;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c20:	f001 fc10 	bl	8008444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d102      	bne.n	8006c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e001      	b.n	8006c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c3a:	f001 fc33 	bl	80084a4 <vPortExitCritical>

	return xReturn;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e014      	b.n	8006c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c58:	4a0f      	ldr	r2, [pc, #60]	; (8006c98 <vQueueAddToRegistry+0x50>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c64:	490c      	ldr	r1, [pc, #48]	; (8006c98 <vQueueAddToRegistry+0x50>)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <vQueueAddToRegistry+0x50>)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c7a:	e006      	b.n	8006c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	d9e7      	bls.n	8006c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20001554 	.word	0x20001554

08006c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006cac:	f001 fbca 	bl	8008444 <vPortEnterCritical>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d103      	bne.n	8006cc6 <vQueueWaitForMessageRestricted+0x2a>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ccc:	b25b      	sxtb	r3, r3
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d103      	bne.n	8006cdc <vQueueWaitForMessageRestricted+0x40>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cdc:	f001 fbe2 	bl	80084a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3324      	adds	r3, #36	; 0x24
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fc61 	bl	80075b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cf6:	6978      	ldr	r0, [r7, #20]
 8006cf8:	f7ff ff26 	bl	8006b48 <prvUnlockQueue>
	}
 8006cfc:	bf00      	nop
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	; 0x38
 8006d08:	af04      	add	r7, sp, #16
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	623b      	str	r3, [r7, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xTaskCreateStatic+0x46>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	61fb      	str	r3, [r7, #28]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d4a:	23a8      	movs	r3, #168	; 0xa8
 8006d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2ba8      	cmp	r3, #168	; 0xa8
 8006d52:	d00a      	beq.n	8006d6a <xTaskCreateStatic+0x66>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61bb      	str	r3, [r7, #24]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01e      	beq.n	8006db0 <xTaskCreateStatic+0xac>
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	f107 0314 	add.w	r3, r7, #20
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f850 	bl	8006e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006daa:	f000 f8f3 	bl	8006f94 <prvAddNewTaskToReadyList>
 8006dae:	e001      	b.n	8006db4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006db4:	697b      	ldr	r3, [r7, #20]
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08c      	sub	sp, #48	; 0x30
 8006dc2:	af04      	add	r7, sp, #16
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fc58 	bl	8008688 <pvPortMalloc>
 8006dd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006de0:	20a8      	movs	r0, #168	; 0xa8
 8006de2:	f001 fc51 	bl	8008688 <pvPortMalloc>
 8006de6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
 8006df4:	e005      	b.n	8006e02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006df6:	6978      	ldr	r0, [r7, #20]
 8006df8:	f001 fd12 	bl	8008820 <vPortFree>
 8006dfc:	e001      	b.n	8006e02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d017      	beq.n	8006e38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	2300      	movs	r3, #0
 8006e14:	9303      	str	r3, [sp, #12]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f80e 	bl	8006e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e2c:	69f8      	ldr	r0, [r7, #28]
 8006e2e:	f000 f8b1 	bl	8006f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e32:	2301      	movs	r3, #1
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e002      	b.n	8006e3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	461a      	mov	r2, r3
 8006e60:	21a5      	movs	r1, #165	; 0xa5
 8006e62:	f003 f834 	bl	8009ece <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e70:	3b01      	subs	r3, #1
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	617b      	str	r3, [r7, #20]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01f      	beq.n	8006ee6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e012      	b.n	8006ed2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	7819      	ldrb	r1, [r3, #0]
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3334      	adds	r3, #52	; 0x34
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d006      	beq.n	8006eda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b0f      	cmp	r3, #15
 8006ed6:	d9e9      	bls.n	8006eac <prvInitialiseNewTask+0x64>
 8006ed8:	e000      	b.n	8006edc <prvInitialiseNewTask+0x94>
			{
				break;
 8006eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee4:	e003      	b.n	8006eee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	2b37      	cmp	r3, #55	; 0x37
 8006ef2:	d901      	bls.n	8006ef8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ef4:	2337      	movs	r3, #55	; 0x37
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff f978 	bl	8006204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	3318      	adds	r3, #24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff f973 	bl	8006204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	3354      	adds	r3, #84	; 0x54
 8006f48:	224c      	movs	r2, #76	; 0x4c
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f002 ffbe 	bl	8009ece <memset>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <prvInitialiseNewTask+0x140>)
 8006f56:	659a      	str	r2, [r3, #88]	; 0x58
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	4a0c      	ldr	r2, [pc, #48]	; (8006f8c <prvInitialiseNewTask+0x144>)
 8006f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	4a0b      	ldr	r2, [pc, #44]	; (8006f90 <prvInitialiseNewTask+0x148>)
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	68f9      	ldr	r1, [r7, #12]
 8006f68:	69b8      	ldr	r0, [r7, #24]
 8006f6a:	f001 f941 	bl	80081f0 <pxPortInitialiseStack>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f80:	bf00      	nop
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200057e8 	.word	0x200057e8
 8006f8c:	20005850 	.word	0x20005850
 8006f90:	200058b8 	.word	0x200058b8

08006f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f9c:	f001 fa52 	bl	8008444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <prvAddNewTaskToReadyList+0xc4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <prvAddNewTaskToReadyList+0xc4>)
 8006fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006faa:	4b2c      	ldr	r3, [pc, #176]	; (800705c <prvAddNewTaskToReadyList+0xc8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <prvAddNewTaskToReadyList+0xc8>)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fb8:	4b27      	ldr	r3, [pc, #156]	; (8007058 <prvAddNewTaskToReadyList+0xc4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d110      	bne.n	8006fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fc0:	f000 fc26 	bl	8007810 <prvInitialiseTaskLists>
 8006fc4:	e00d      	b.n	8006fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fc6:	4b26      	ldr	r3, [pc, #152]	; (8007060 <prvAddNewTaskToReadyList+0xcc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <prvAddNewTaskToReadyList+0xc8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d802      	bhi.n	8006fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	; (800705c <prvAddNewTaskToReadyList+0xc8>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fe2:	4b20      	ldr	r3, [pc, #128]	; (8007064 <prvAddNewTaskToReadyList+0xd0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <prvAddNewTaskToReadyList+0xd0>)
 8006fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <prvAddNewTaskToReadyList+0xd0>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <prvAddNewTaskToReadyList+0xd4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d903      	bls.n	8007008 <prvAddNewTaskToReadyList+0x74>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	4a18      	ldr	r2, [pc, #96]	; (8007068 <prvAddNewTaskToReadyList+0xd4>)
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <prvAddNewTaskToReadyList+0xd8>)
 8007016:	441a      	add	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7ff f8fd 	bl	800621e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007024:	f001 fa3e 	bl	80084a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <prvAddNewTaskToReadyList+0xcc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <prvAddNewTaskToReadyList+0xc8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d207      	bcs.n	800704e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <prvAddNewTaskToReadyList+0xdc>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20001a68 	.word	0x20001a68
 800705c:	20001594 	.word	0x20001594
 8007060:	20001a74 	.word	0x20001a74
 8007064:	20001a84 	.word	0x20001a84
 8007068:	20001a70 	.word	0x20001a70
 800706c:	20001598 	.word	0x20001598
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d017      	beq.n	80070b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007086:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <vTaskDelay+0x60>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <vTaskDelay+0x30>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	60bb      	str	r3, [r7, #8]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070a4:	f000 f88a 	bl	80071bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fcfe 	bl	8007aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070b0:	f000 f892 	bl	80071d8 <xTaskResumeAll>
 80070b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d107      	bne.n	80070cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <vTaskDelay+0x64>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20001a90 	.word	0x20001a90
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070ea:	463a      	mov	r2, r7
 80070ec:	1d39      	adds	r1, r7, #4
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff f832 	bl	800615c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	9202      	str	r2, [sp, #8]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	460a      	mov	r2, r1
 800710a:	4924      	ldr	r1, [pc, #144]	; (800719c <vTaskStartScheduler+0xc0>)
 800710c:	4824      	ldr	r0, [pc, #144]	; (80071a0 <vTaskStartScheduler+0xc4>)
 800710e:	f7ff fdf9 	bl	8006d04 <xTaskCreateStatic>
 8007112:	4603      	mov	r3, r0
 8007114:	4a23      	ldr	r2, [pc, #140]	; (80071a4 <vTaskStartScheduler+0xc8>)
 8007116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007118:	4b22      	ldr	r3, [pc, #136]	; (80071a4 <vTaskStartScheduler+0xc8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e001      	b.n	800712a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d102      	bne.n	8007136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007130:	f000 fd10 	bl	8007b54 <xTimerCreateTimerTask>
 8007134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d11b      	bne.n	8007174 <vTaskStartScheduler+0x98>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	613b      	str	r3, [r7, #16]
}
 800714e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007150:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <vTaskStartScheduler+0xcc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3354      	adds	r3, #84	; 0x54
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <vTaskStartScheduler+0xd0>)
 8007158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800715a:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <vTaskStartScheduler+0xd4>)
 800715c:	f04f 32ff 	mov.w	r2, #4294967295
 8007160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <vTaskStartScheduler+0xd8>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <vTaskStartScheduler+0xdc>)
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800716e:	f001 f8c7 	bl	8008300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007172:	e00e      	b.n	8007192 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d10a      	bne.n	8007192 <vTaskStartScheduler+0xb6>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60fb      	str	r3, [r7, #12]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <vTaskStartScheduler+0xb4>
}
 8007192:	bf00      	nop
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	0800f264 	.word	0x0800f264
 80071a0:	080077e1 	.word	0x080077e1
 80071a4:	20001a8c 	.word	0x20001a8c
 80071a8:	20001594 	.word	0x20001594
 80071ac:	200000e8 	.word	0x200000e8
 80071b0:	20001a88 	.word	0x20001a88
 80071b4:	20001a74 	.word	0x20001a74
 80071b8:	20001a6c 	.word	0x20001a6c

080071bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <vTaskSuspendAll+0x18>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <vTaskSuspendAll+0x18>)
 80071c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ca:	bf00      	nop
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	20001a90 	.word	0x20001a90

080071d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071e6:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <xTaskResumeAll+0x118>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <xTaskResumeAll+0x2c>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	603b      	str	r3, [r7, #0]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007204:	f001 f91e 	bl	8008444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <xTaskResumeAll+0x118>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a38      	ldr	r2, [pc, #224]	; (80072f0 <xTaskResumeAll+0x118>)
 8007210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007212:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <xTaskResumeAll+0x118>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d162      	bne.n	80072e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800721a:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <xTaskResumeAll+0x11c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d05e      	beq.n	80072e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007222:	e02f      	b.n	8007284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007224:	4b34      	ldr	r3, [pc, #208]	; (80072f8 <xTaskResumeAll+0x120>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3318      	adds	r3, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff f851 	bl	80062d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff f84c 	bl	80062d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4b2d      	ldr	r3, [pc, #180]	; (80072fc <xTaskResumeAll+0x124>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d903      	bls.n	8007254 <xTaskResumeAll+0x7c>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <xTaskResumeAll+0x124>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a27      	ldr	r2, [pc, #156]	; (8007300 <xTaskResumeAll+0x128>)
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3304      	adds	r3, #4
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	f7fe ffd7 	bl	800621e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	4b23      	ldr	r3, [pc, #140]	; (8007304 <xTaskResumeAll+0x12c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <xTaskResumeAll+0x130>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007284:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <xTaskResumeAll+0x120>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1cb      	bne.n	8007224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007292:	f000 fb5f 	bl	8007954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <xTaskResumeAll+0x134>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072a2:	f000 f847 	bl	8007334 <xTaskIncrementTick>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80072ac:	4b16      	ldr	r3, [pc, #88]	; (8007308 <xTaskResumeAll+0x130>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f1      	bne.n	80072a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <xTaskResumeAll+0x134>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072c4:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xTaskResumeAll+0x130>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <xTaskResumeAll+0x138>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072e0:	f001 f8e0 	bl	80084a4 <vPortExitCritical>

	return xAlreadyYielded;
 80072e4:	68bb      	ldr	r3, [r7, #8]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20001a90 	.word	0x20001a90
 80072f4:	20001a68 	.word	0x20001a68
 80072f8:	20001a28 	.word	0x20001a28
 80072fc:	20001a70 	.word	0x20001a70
 8007300:	20001598 	.word	0x20001598
 8007304:	20001594 	.word	0x20001594
 8007308:	20001a7c 	.word	0x20001a7c
 800730c:	20001a78 	.word	0x20001a78
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <xTaskGetTickCount+0x1c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007320:	687b      	ldr	r3, [r7, #4]
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20001a6c 	.word	0x20001a6c

08007334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800733e:	4b4f      	ldr	r3, [pc, #316]	; (800747c <xTaskIncrementTick+0x148>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 808f 	bne.w	8007466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007348:	4b4d      	ldr	r3, [pc, #308]	; (8007480 <xTaskIncrementTick+0x14c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007350:	4a4b      	ldr	r2, [pc, #300]	; (8007480 <xTaskIncrementTick+0x14c>)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d120      	bne.n	800739e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800735c:	4b49      	ldr	r3, [pc, #292]	; (8007484 <xTaskIncrementTick+0x150>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <xTaskIncrementTick+0x48>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	603b      	str	r3, [r7, #0]
}
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <xTaskIncrementTick+0x46>
 800737c:	4b41      	ldr	r3, [pc, #260]	; (8007484 <xTaskIncrementTick+0x150>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	4b41      	ldr	r3, [pc, #260]	; (8007488 <xTaskIncrementTick+0x154>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a3f      	ldr	r2, [pc, #252]	; (8007484 <xTaskIncrementTick+0x150>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4a3f      	ldr	r2, [pc, #252]	; (8007488 <xTaskIncrementTick+0x154>)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4b3e      	ldr	r3, [pc, #248]	; (800748c <xTaskIncrementTick+0x158>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	4a3d      	ldr	r2, [pc, #244]	; (800748c <xTaskIncrementTick+0x158>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	f000 fadb 	bl	8007954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800739e:	4b3c      	ldr	r3, [pc, #240]	; (8007490 <xTaskIncrementTick+0x15c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d349      	bcc.n	800743c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a8:	4b36      	ldr	r3, [pc, #216]	; (8007484 <xTaskIncrementTick+0x150>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b2:	4b37      	ldr	r3, [pc, #220]	; (8007490 <xTaskIncrementTick+0x15c>)
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	601a      	str	r2, [r3, #0]
					break;
 80073ba:	e03f      	b.n	800743c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073bc:	4b31      	ldr	r3, [pc, #196]	; (8007484 <xTaskIncrementTick+0x150>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d203      	bcs.n	80073dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073d4:	4a2e      	ldr	r2, [pc, #184]	; (8007490 <xTaskIncrementTick+0x15c>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073da:	e02f      	b.n	800743c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe ff79 	bl	80062d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	3318      	adds	r3, #24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe ff70 	bl	80062d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <xTaskIncrementTick+0x160>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d903      	bls.n	800740c <xTaskIncrementTick+0xd8>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	4a22      	ldr	r2, [pc, #136]	; (8007494 <xTaskIncrementTick+0x160>)
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <xTaskIncrementTick+0x164>)
 800741a:	441a      	add	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fe fefb 	bl	800621e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4b1b      	ldr	r3, [pc, #108]	; (800749c <xTaskIncrementTick+0x168>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	429a      	cmp	r2, r3
 8007434:	d3b8      	bcc.n	80073a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800743a:	e7b5      	b.n	80073a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800743c:	4b17      	ldr	r3, [pc, #92]	; (800749c <xTaskIncrementTick+0x168>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	4915      	ldr	r1, [pc, #84]	; (8007498 <xTaskIncrementTick+0x164>)
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d901      	bls.n	8007458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <xTaskIncrementTick+0x16c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e004      	b.n	8007470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <xTaskIncrementTick+0x170>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	4a0d      	ldr	r2, [pc, #52]	; (80074a4 <xTaskIncrementTick+0x170>)
 800746e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007470:	697b      	ldr	r3, [r7, #20]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20001a90 	.word	0x20001a90
 8007480:	20001a6c 	.word	0x20001a6c
 8007484:	20001a20 	.word	0x20001a20
 8007488:	20001a24 	.word	0x20001a24
 800748c:	20001a80 	.word	0x20001a80
 8007490:	20001a88 	.word	0x20001a88
 8007494:	20001a70 	.word	0x20001a70
 8007498:	20001598 	.word	0x20001598
 800749c:	20001594 	.word	0x20001594
 80074a0:	20001a7c 	.word	0x20001a7c
 80074a4:	20001a78 	.word	0x20001a78

080074a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074ae:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <vTaskSwitchContext+0xb0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074b6:	4b29      	ldr	r3, [pc, #164]	; (800755c <vTaskSwitchContext+0xb4>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074bc:	e046      	b.n	800754c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80074be:	4b27      	ldr	r3, [pc, #156]	; (800755c <vTaskSwitchContext+0xb4>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c4:	4b26      	ldr	r3, [pc, #152]	; (8007560 <vTaskSwitchContext+0xb8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e010      	b.n	80074ee <vTaskSwitchContext+0x46>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	607b      	str	r3, [r7, #4]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <vTaskSwitchContext+0x3e>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	491d      	ldr	r1, [pc, #116]	; (8007564 <vTaskSwitchContext+0xbc>)
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0e4      	beq.n	80074cc <vTaskSwitchContext+0x24>
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <vTaskSwitchContext+0xbc>)
 800750e:	4413      	add	r3, r2
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3308      	adds	r3, #8
 8007524:	429a      	cmp	r2, r3
 8007526:	d104      	bne.n	8007532 <vTaskSwitchContext+0x8a>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	605a      	str	r2, [r3, #4]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <vTaskSwitchContext+0xc0>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	4a08      	ldr	r2, [pc, #32]	; (8007560 <vTaskSwitchContext+0xb8>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <vTaskSwitchContext+0xc0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3354      	adds	r3, #84	; 0x54
 8007548:	4a08      	ldr	r2, [pc, #32]	; (800756c <vTaskSwitchContext+0xc4>)
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20001a90 	.word	0x20001a90
 800755c:	20001a7c 	.word	0x20001a7c
 8007560:	20001a70 	.word	0x20001a70
 8007564:	20001598 	.word	0x20001598
 8007568:	20001594 	.word	0x20001594
 800756c:	200000e8 	.word	0x200000e8

08007570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <vTaskPlaceOnEventList+0x44>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3318      	adds	r3, #24
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fe fe61 	bl	8006266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075a4:	2101      	movs	r1, #1
 80075a6:	6838      	ldr	r0, [r7, #0]
 80075a8:	f000 fa80 	bl	8007aac <prvAddCurrentTaskToDelayedList>
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20001594 	.word	0x20001594

080075b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	617b      	str	r3, [r7, #20]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <vTaskPlaceOnEventListRestricted+0x54>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3318      	adds	r3, #24
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7fe fe18 	bl	800621e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295
 80075f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	68b8      	ldr	r0, [r7, #8]
 80075fe:	f000 fa55 	bl	8007aac <prvAddCurrentTaskToDelayedList>
	}
 8007602:	bf00      	nop
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20001594 	.word	0x20001594

08007610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3318      	adds	r3, #24
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fe49 	bl	80062d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <xTaskRemoveFromEventList+0xb0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d11d      	bne.n	800768a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fe40 	bl	80062d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <xTaskRemoveFromEventList+0xb4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d903      	bls.n	800766c <xTaskRemoveFromEventList+0x5c>
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <xTaskRemoveFromEventList+0xb4>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <xTaskRemoveFromEventList+0xb8>)
 800767a:	441a      	add	r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7fe fdcb 	bl	800621e <vListInsertEnd>
 8007688:	e005      	b.n	8007696 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	3318      	adds	r3, #24
 800768e:	4619      	mov	r1, r3
 8007690:	480e      	ldr	r0, [pc, #56]	; (80076cc <xTaskRemoveFromEventList+0xbc>)
 8007692:	f7fe fdc4 	bl	800621e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <xTaskRemoveFromEventList+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d905      	bls.n	80076b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <xTaskRemoveFromEventList+0xc4>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e001      	b.n	80076b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076b4:	697b      	ldr	r3, [r7, #20]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20001a90 	.word	0x20001a90
 80076c4:	20001a70 	.word	0x20001a70
 80076c8:	20001598 	.word	0x20001598
 80076cc:	20001a28 	.word	0x20001a28
 80076d0:	20001594 	.word	0x20001594
 80076d4:	20001a7c 	.word	0x20001a7c

080076d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <vTaskInternalSetTimeOutState+0x24>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <vTaskInternalSetTimeOutState+0x28>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	605a      	str	r2, [r3, #4]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	20001a80 	.word	0x20001a80
 8007700:	20001a6c 	.word	0x20001a6c

08007704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007746:	f000 fe7d 	bl	8008444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800774a:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <xTaskCheckForTimeOut+0xbc>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d102      	bne.n	800776a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	e023      	b.n	80077b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <xTaskCheckForTimeOut+0xc0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d007      	beq.n	8007786 <xTaskCheckForTimeOut+0x82>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	e015      	b.n	80077b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	429a      	cmp	r2, r3
 800778e:	d20b      	bcs.n	80077a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff9b 	bl	80076d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	e004      	b.n	80077b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077ae:	2301      	movs	r3, #1
 80077b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077b2:	f000 fe77 	bl	80084a4 <vPortExitCritical>

	return xReturn;
 80077b6:	69fb      	ldr	r3, [r7, #28]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20001a6c 	.word	0x20001a6c
 80077c4:	20001a80 	.word	0x20001a80

080077c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <vTaskMissedYield+0x14>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	20001a7c 	.word	0x20001a7c

080077e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077e8:	f000 f852 	bl	8007890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <prvIdleTask+0x28>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d9f9      	bls.n	80077e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <prvIdleTask+0x2c>)
 80077f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007804:	e7f0      	b.n	80077e8 <prvIdleTask+0x8>
 8007806:	bf00      	nop
 8007808:	20001598 	.word	0x20001598
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007816:	2300      	movs	r3, #0
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	e00c      	b.n	8007836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4a12      	ldr	r2, [pc, #72]	; (8007870 <prvInitialiseTaskLists+0x60>)
 8007828:	4413      	add	r3, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fcca 	bl	80061c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3301      	adds	r3, #1
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b37      	cmp	r3, #55	; 0x37
 800783a:	d9ef      	bls.n	800781c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800783c:	480d      	ldr	r0, [pc, #52]	; (8007874 <prvInitialiseTaskLists+0x64>)
 800783e:	f7fe fcc1 	bl	80061c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007842:	480d      	ldr	r0, [pc, #52]	; (8007878 <prvInitialiseTaskLists+0x68>)
 8007844:	f7fe fcbe 	bl	80061c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007848:	480c      	ldr	r0, [pc, #48]	; (800787c <prvInitialiseTaskLists+0x6c>)
 800784a:	f7fe fcbb 	bl	80061c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800784e:	480c      	ldr	r0, [pc, #48]	; (8007880 <prvInitialiseTaskLists+0x70>)
 8007850:	f7fe fcb8 	bl	80061c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007854:	480b      	ldr	r0, [pc, #44]	; (8007884 <prvInitialiseTaskLists+0x74>)
 8007856:	f7fe fcb5 	bl	80061c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <prvInitialiseTaskLists+0x78>)
 800785c:	4a05      	ldr	r2, [pc, #20]	; (8007874 <prvInitialiseTaskLists+0x64>)
 800785e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <prvInitialiseTaskLists+0x7c>)
 8007862:	4a05      	ldr	r2, [pc, #20]	; (8007878 <prvInitialiseTaskLists+0x68>)
 8007864:	601a      	str	r2, [r3, #0]
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20001598 	.word	0x20001598
 8007874:	200019f8 	.word	0x200019f8
 8007878:	20001a0c 	.word	0x20001a0c
 800787c:	20001a28 	.word	0x20001a28
 8007880:	20001a3c 	.word	0x20001a3c
 8007884:	20001a54 	.word	0x20001a54
 8007888:	20001a20 	.word	0x20001a20
 800788c:	20001a24 	.word	0x20001a24

08007890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007896:	e019      	b.n	80078cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007898:	f000 fdd4 	bl	8008444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789c:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <prvCheckTasksWaitingTermination+0x50>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fd15 	bl	80062d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <prvCheckTasksWaitingTermination+0x54>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <prvCheckTasksWaitingTermination+0x54>)
 80078b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <prvCheckTasksWaitingTermination+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3b01      	subs	r3, #1
 80078be:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <prvCheckTasksWaitingTermination+0x58>)
 80078c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078c2:	f000 fdef 	bl	80084a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f810 	bl	80078ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <prvCheckTasksWaitingTermination+0x58>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e1      	bne.n	8007898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20001a3c 	.word	0x20001a3c
 80078e4:	20001a68 	.word	0x20001a68
 80078e8:	20001a50 	.word	0x20001a50

080078ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3354      	adds	r3, #84	; 0x54
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 fb05 	bl	8009f08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	4618      	mov	r0, r3
 800790e:	f000 ff87 	bl	8008820 <vPortFree>
				vPortFree( pxTCB );
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 ff84 	bl	8008820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007918:	e018      	b.n	800794c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007920:	2b01      	cmp	r3, #1
 8007922:	d103      	bne.n	800792c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 ff7b 	bl	8008820 <vPortFree>
	}
 800792a:	e00f      	b.n	800794c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007932:	2b02      	cmp	r3, #2
 8007934:	d00a      	beq.n	800794c <prvDeleteTCB+0x60>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <prvDeleteTCB+0x5e>
	}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <prvResetNextTaskUnblockTime+0x38>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <prvResetNextTaskUnblockTime+0x3c>)
 8007966:	f04f 32ff 	mov.w	r2, #4294967295
 800796a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800796c:	e008      	b.n	8007980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <prvResetNextTaskUnblockTime+0x38>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4a04      	ldr	r2, [pc, #16]	; (8007990 <prvResetNextTaskUnblockTime+0x3c>)
 800797e:	6013      	str	r3, [r2, #0]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20001a20 	.word	0x20001a20
 8007990:	20001a88 	.word	0x20001a88

08007994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800799a:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <xTaskGetSchedulerState+0x34>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079a2:	2301      	movs	r3, #1
 80079a4:	607b      	str	r3, [r7, #4]
 80079a6:	e008      	b.n	80079ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a8:	4b08      	ldr	r3, [pc, #32]	; (80079cc <xTaskGetSchedulerState+0x38>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079b0:	2302      	movs	r3, #2
 80079b2:	607b      	str	r3, [r7, #4]
 80079b4:	e001      	b.n	80079ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079b6:	2300      	movs	r3, #0
 80079b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079ba:	687b      	ldr	r3, [r7, #4]
	}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20001a74 	.word	0x20001a74
 80079cc:	20001a90 	.word	0x20001a90

080079d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d056      	beq.n	8007a94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079e6:	4b2e      	ldr	r3, [pc, #184]	; (8007aa0 <xTaskPriorityDisinherit+0xd0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d00a      	beq.n	8007a06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60fb      	str	r3, [r7, #12]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60bb      	str	r3, [r7, #8]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a28:	1e5a      	subs	r2, r3, #1
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d02c      	beq.n	8007a94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d128      	bne.n	8007a94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fc46 	bl	80062d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <xTaskPriorityDisinherit+0xd4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d903      	bls.n	8007a74 <xTaskPriorityDisinherit+0xa4>
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <xTaskPriorityDisinherit+0xd4>)
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <xTaskPriorityDisinherit+0xd8>)
 8007a82:	441a      	add	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f7fe fbc7 	bl	800621e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a94:	697b      	ldr	r3, [r7, #20]
	}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20001594 	.word	0x20001594
 8007aa4:	20001a70 	.word	0x20001a70
 8007aa8:	20001598 	.word	0x20001598

08007aac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007abc:	4b20      	ldr	r3, [pc, #128]	; (8007b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fc08 	bl	80062d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d10a      	bne.n	8007ae6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad6:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4819      	ldr	r0, [pc, #100]	; (8007b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ae0:	f7fe fb9d 	bl	800621e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ae4:	e026      	b.n	8007b34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aee:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d209      	bcs.n	8007b12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fe fbab 	bl	8006266 <vListInsert>
}
 8007b10:	e010      	b.n	8007b34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7fe fba1 	bl	8006266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d202      	bcs.n	8007b34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b2e:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6013      	str	r3, [r2, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20001a6c 	.word	0x20001a6c
 8007b40:	20001594 	.word	0x20001594
 8007b44:	20001a54 	.word	0x20001a54
 8007b48:	20001a24 	.word	0x20001a24
 8007b4c:	20001a20 	.word	0x20001a20
 8007b50:	20001a88 	.word	0x20001a88

08007b54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b5e:	f000 fb07 	bl	8008170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b62:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <xTimerCreateTimerTask+0x80>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d021      	beq.n	8007bae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b72:	1d3a      	adds	r2, r7, #4
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fb07 	bl	8006190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	9202      	str	r2, [sp, #8]
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	2300      	movs	r3, #0
 8007b92:	460a      	mov	r2, r1
 8007b94:	4910      	ldr	r1, [pc, #64]	; (8007bd8 <xTimerCreateTimerTask+0x84>)
 8007b96:	4811      	ldr	r0, [pc, #68]	; (8007bdc <xTimerCreateTimerTask+0x88>)
 8007b98:	f7ff f8b4 	bl	8006d04 <xTaskCreateStatic>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <xTimerCreateTimerTask+0x8c>)
 8007ba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <xTimerCreateTimerTask+0x8c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007baa:	2301      	movs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	613b      	str	r3, [r7, #16]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bca:	697b      	ldr	r3, [r7, #20]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20001ac4 	.word	0x20001ac4
 8007bd8:	0800f26c 	.word	0x0800f26c
 8007bdc:	08007d19 	.word	0x08007d19
 8007be0:	20001ac8 	.word	0x20001ac8

08007be4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	; 0x28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	623b      	str	r3, [r7, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c12:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <xTimerGenericCommand+0x98>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d02a      	beq.n	8007c70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	dc18      	bgt.n	8007c5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c2c:	f7ff feb2 	bl	8007994 <xTaskGetSchedulerState>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d109      	bne.n	8007c4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <xTimerGenericCommand+0x98>)
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	f107 0110 	add.w	r1, r7, #16
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	f7fe fc77 	bl	8006534 <xQueueGenericSend>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24
 8007c48:	e012      	b.n	8007c70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <xTimerGenericCommand+0x98>)
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f107 0110 	add.w	r1, r7, #16
 8007c52:	2300      	movs	r3, #0
 8007c54:	2200      	movs	r2, #0
 8007c56:	f7fe fc6d 	bl	8006534 <xQueueGenericSend>
 8007c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007c5c:	e008      	b.n	8007c70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <xTimerGenericCommand+0x98>)
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f107 0110 	add.w	r1, r7, #16
 8007c66:	2300      	movs	r3, #0
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	f7fe fd61 	bl	8006730 <xQueueGenericSendFromISR>
 8007c6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3728      	adds	r7, #40	; 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20001ac4 	.word	0x20001ac4

08007c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8a:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <prvProcessExpiredTimer+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	3304      	adds	r3, #4
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fb1d 	bl	80062d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d022      	beq.n	8007cf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	18d1      	adds	r1, r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	6978      	ldr	r0, [r7, #20]
 8007cba:	f000 f8d1 	bl	8007e60 <prvInsertTimerInActiveList>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01f      	beq.n	8007d04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6978      	ldr	r0, [r7, #20]
 8007cd0:	f7ff ff88 	bl	8007be4 <xTimerGenericCommand>
 8007cd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d113      	bne.n	8007d04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	6978      	ldr	r0, [r7, #20]
 8007d0a:	4798      	blx	r3
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20001abc 	.word	0x20001abc

08007d18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d20:	f107 0308 	add.w	r3, r7, #8
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f857 	bl	8007dd8 <prvGetNextExpireTime>
 8007d2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f803 	bl	8007d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d36:	f000 f8d5 	bl	8007ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d3a:	e7f1      	b.n	8007d20 <prvTimerTask+0x8>

08007d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d46:	f7ff fa39 	bl	80071bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d4a:	f107 0308 	add.w	r3, r7, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f866 	bl	8007e20 <prvSampleTimeNow>
 8007d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d130      	bne.n	8007dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <prvProcessTimerOrBlockTask+0x3c>
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d806      	bhi.n	8007d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d6a:	f7ff fa35 	bl	80071d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff ff85 	bl	8007c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d76:	e024      	b.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <prvProcessTimerOrBlockTask+0x90>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <prvProcessTimerOrBlockTask+0x50>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <prvProcessTimerOrBlockTask+0x52>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <prvProcessTimerOrBlockTask+0x94>)
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe ff7d 	bl	8006c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007da2:	f7ff fa19 	bl	80071d8 <xTaskResumeAll>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvProcessTimerOrBlockTask+0x98>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	f3bf 8f6f 	isb	sy
}
 8007dbc:	e001      	b.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dbe:	f7ff fa0b 	bl	80071d8 <xTaskResumeAll>
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20001ac0 	.word	0x20001ac0
 8007dd0:	20001ac4 	.word	0x20001ac4
 8007dd4:	e000ed04 	.word	0xe000ed04

08007dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007de0:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <prvGetNextExpireTime+0x44>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <prvGetNextExpireTime+0x16>
 8007dea:	2201      	movs	r2, #1
 8007dec:	e000      	b.n	8007df0 <prvGetNextExpireTime+0x18>
 8007dee:	2200      	movs	r2, #0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <prvGetNextExpireTime+0x44>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e001      	b.n	8007e0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20001abc 	.word	0x20001abc

08007e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e28:	f7ff fa74 	bl	8007314 <xTaskGetTickCount>
 8007e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <prvSampleTimeNow+0x3c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d205      	bcs.n	8007e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e38:	f000 f936 	bl	80080a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e002      	b.n	8007e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e4a:	4a04      	ldr	r2, [pc, #16]	; (8007e5c <prvSampleTimeNow+0x3c>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e50:	68fb      	ldr	r3, [r7, #12]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20001acc 	.word	0x20001acc

08007e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d812      	bhi.n	8007eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d302      	bcc.n	8007e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e01b      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <prvInsertTimerInActiveList+0x7c>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7fe f9de 	bl	8006266 <vListInsert>
 8007eaa:	e012      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d206      	bcs.n	8007ec2 <prvInsertTimerInActiveList+0x62>
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e007      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <prvInsertTimerInActiveList+0x80>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f7fe f9ca 	bl	8006266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ed2:	697b      	ldr	r3, [r7, #20]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20001ac0 	.word	0x20001ac0
 8007ee0:	20001abc 	.word	0x20001abc

08007ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08e      	sub	sp, #56	; 0x38
 8007ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eea:	e0ca      	b.n	8008082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da18      	bge.n	8007f24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ef2:	1d3b      	adds	r3, r7, #4
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	61fb      	str	r3, [r7, #28]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1a:	6850      	ldr	r0, [r2, #4]
 8007f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1e:	6892      	ldr	r2, [r2, #8]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f2c0 80ab 	blt.w	8008082 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe f9cb 	bl	80062d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f42:	463b      	mov	r3, r7
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff ff6b 	bl	8007e20 <prvSampleTimeNow>
 8007f4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	f200 8096 	bhi.w	8008080 <prvProcessReceivedCommands+0x19c>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <prvProcessReceivedCommands+0x78>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f85 	.word	0x08007f85
 8007f68:	08007ff9 	.word	0x08007ff9
 8007f6c:	0800800d 	.word	0x0800800d
 8007f70:	08008057 	.word	0x08008057
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f85 	.word	0x08007f85
 8007f7c:	08007ff9 	.word	0x08007ff9
 8007f80:	0800800d 	.word	0x0800800d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	18d1      	adds	r1, r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa4:	f7ff ff5c 	bl	8007e60 <prvInsertTimerInActiveList>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d069      	beq.n	8008082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d05e      	beq.n	8008082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	441a      	add	r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fd6:	f7ff fe05 	bl	8007be4 <xTimerGenericCommand>
 8007fda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d14f      	bne.n	8008082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	61bb      	str	r3, [r7, #24]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ffe:	f023 0301 	bic.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800800a:	e03a      	b.n	8008082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	617b      	str	r3, [r7, #20]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	18d1      	adds	r1, r2, r3
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	f7ff ff06 	bl	8007e60 <prvInsertTimerInActiveList>
					break;
 8008054:	e015      	b.n	8008082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008066:	f000 fbdb 	bl	8008820 <vPortFree>
 800806a:	e00a      	b.n	8008082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008072:	f023 0301 	bic.w	r3, r3, #1
 8008076:	b2da      	uxtb	r2, r3
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800807e:	e000      	b.n	8008082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <prvProcessReceivedCommands+0x1c0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1d39      	adds	r1, r7, #4
 8008088:	2200      	movs	r2, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fbec 	bl	8006868 <xQueueReceive>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	f47f af2a 	bne.w	8007eec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	3730      	adds	r7, #48	; 0x30
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20001ac4 	.word	0x20001ac4

080080a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080ae:	e048      	b.n	8008142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080b0:	4b2d      	ldr	r3, [pc, #180]	; (8008168 <prvSwitchTimerLists+0xc0>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ba:	4b2b      	ldr	r3, [pc, #172]	; (8008168 <prvSwitchTimerLists+0xc0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe f905 	bl	80062d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d02e      	beq.n	8008142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4413      	add	r3, r2
 80080ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90e      	bls.n	8008114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008102:	4b19      	ldr	r3, [pc, #100]	; (8008168 <prvSwitchTimerLists+0xc0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3304      	adds	r3, #4
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f7fe f8aa 	bl	8006266 <vListInsert>
 8008112:	e016      	b.n	8008142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2300      	movs	r3, #0
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fd60 	bl	8007be4 <xTimerGenericCommand>
 8008124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	603b      	str	r3, [r7, #0]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <prvSwitchTimerLists+0xc0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1b1      	bne.n	80080b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <prvSwitchTimerLists+0xc0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008152:	4b06      	ldr	r3, [pc, #24]	; (800816c <prvSwitchTimerLists+0xc4>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <prvSwitchTimerLists+0xc0>)
 8008158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800815a:	4a04      	ldr	r2, [pc, #16]	; (800816c <prvSwitchTimerLists+0xc4>)
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	6013      	str	r3, [r2, #0]
}
 8008160:	bf00      	nop
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20001abc 	.word	0x20001abc
 800816c:	20001ac0 	.word	0x20001ac0

08008170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008176:	f000 f965 	bl	8008444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <prvCheckForValidListAndQueue+0x60>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d120      	bne.n	80081c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008182:	4814      	ldr	r0, [pc, #80]	; (80081d4 <prvCheckForValidListAndQueue+0x64>)
 8008184:	f7fe f81e 	bl	80061c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008188:	4813      	ldr	r0, [pc, #76]	; (80081d8 <prvCheckForValidListAndQueue+0x68>)
 800818a:	f7fe f81b 	bl	80061c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800818e:	4b13      	ldr	r3, [pc, #76]	; (80081dc <prvCheckForValidListAndQueue+0x6c>)
 8008190:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <prvCheckForValidListAndQueue+0x64>)
 8008192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008194:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <prvCheckForValidListAndQueue+0x70>)
 8008196:	4a10      	ldr	r2, [pc, #64]	; (80081d8 <prvCheckForValidListAndQueue+0x68>)
 8008198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <prvCheckForValidListAndQueue+0x74>)
 80081a0:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <prvCheckForValidListAndQueue+0x78>)
 80081a2:	2110      	movs	r1, #16
 80081a4:	200a      	movs	r0, #10
 80081a6:	f7fe f929 	bl	80063fc <xQueueGenericCreateStatic>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	490b      	ldr	r1, [pc, #44]	; (80081ec <prvCheckForValidListAndQueue+0x7c>)
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fd42 	bl	8006c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081c4:	f000 f96e 	bl	80084a4 <vPortExitCritical>
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20001ac4 	.word	0x20001ac4
 80081d4:	20001a94 	.word	0x20001a94
 80081d8:	20001aa8 	.word	0x20001aa8
 80081dc:	20001abc 	.word	0x20001abc
 80081e0:	20001ac0 	.word	0x20001ac0
 80081e4:	20001b70 	.word	0x20001b70
 80081e8:	20001ad0 	.word	0x20001ad0
 80081ec:	0800f274 	.word	0x0800f274

080081f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3b04      	subs	r3, #4
 8008200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3b04      	subs	r3, #4
 800820e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f023 0201 	bic.w	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008220:	4a0c      	ldr	r2, [pc, #48]	; (8008254 <pxPortInitialiseStack+0x64>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3b14      	subs	r3, #20
 800822a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3b04      	subs	r3, #4
 8008236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f06f 0202 	mvn.w	r2, #2
 800823e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b20      	subs	r3, #32
 8008244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	08008259 	.word	0x08008259

08008258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <prvTaskExitError+0x54>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d00a      	beq.n	8008282 <prvTaskExitError+0x2a>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	60fb      	str	r3, [r7, #12]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <prvTaskExitError+0x28>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60bb      	str	r3, [r7, #8]
}
 8008294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008296:	bf00      	nop
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0fc      	beq.n	8008298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000008c 	.word	0x2000008c

080082b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <pxCurrentTCBConst2>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6808      	ldr	r0, [r1, #0]
 80082b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	f380 8809 	msr	PSP, r0
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8811 	msr	BASEPRI, r0
 80082ca:	4770      	bx	lr
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst2>:
 80082d0:	20001594 	.word	0x20001594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082d8:	4808      	ldr	r0, [pc, #32]	; (80082fc <prvPortStartFirstTask+0x24>)
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	6800      	ldr	r0, [r0, #0]
 80082de:	f380 8808 	msr	MSP, r0
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f380 8814 	msr	CONTROL, r0
 80082ea:	b662      	cpsie	i
 80082ec:	b661      	cpsie	f
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	df00      	svc	0
 80082f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082fa:	bf00      	nop
 80082fc:	e000ed08 	.word	0xe000ed08

08008300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008306:	4b46      	ldr	r3, [pc, #280]	; (8008420 <xPortStartScheduler+0x120>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a46      	ldr	r2, [pc, #280]	; (8008424 <xPortStartScheduler+0x124>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10a      	bne.n	8008326 <xPortStartScheduler+0x26>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	613b      	str	r3, [r7, #16]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008326:	4b3e      	ldr	r3, [pc, #248]	; (8008420 <xPortStartScheduler+0x120>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a3f      	ldr	r2, [pc, #252]	; (8008428 <xPortStartScheduler+0x128>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d10a      	bne.n	8008346 <xPortStartScheduler+0x46>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008346:	4b39      	ldr	r3, [pc, #228]	; (800842c <xPortStartScheduler+0x12c>)
 8008348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	22ff      	movs	r2, #255	; 0xff
 8008356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008368:	b2da      	uxtb	r2, r3
 800836a:	4b31      	ldr	r3, [pc, #196]	; (8008430 <xPortStartScheduler+0x130>)
 800836c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800836e:	4b31      	ldr	r3, [pc, #196]	; (8008434 <xPortStartScheduler+0x134>)
 8008370:	2207      	movs	r2, #7
 8008372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008374:	e009      	b.n	800838a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008376:	4b2f      	ldr	r3, [pc, #188]	; (8008434 <xPortStartScheduler+0x134>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	4a2d      	ldr	r2, [pc, #180]	; (8008434 <xPortStartScheduler+0x134>)
 800837e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b80      	cmp	r3, #128	; 0x80
 8008394:	d0ef      	beq.n	8008376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008396:	4b27      	ldr	r3, [pc, #156]	; (8008434 <xPortStartScheduler+0x134>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1c3 0307 	rsb	r3, r3, #7
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d00a      	beq.n	80083b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60bb      	str	r3, [r7, #8]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <xPortStartScheduler+0x134>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	4a1d      	ldr	r2, [pc, #116]	; (8008434 <xPortStartScheduler+0x134>)
 80083c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083c2:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <xPortStartScheduler+0x134>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083ca:	4a1a      	ldr	r2, [pc, #104]	; (8008434 <xPortStartScheduler+0x134>)
 80083cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083d6:	4b18      	ldr	r3, [pc, #96]	; (8008438 <xPortStartScheduler+0x138>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a17      	ldr	r2, [pc, #92]	; (8008438 <xPortStartScheduler+0x138>)
 80083dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083e2:	4b15      	ldr	r3, [pc, #84]	; (8008438 <xPortStartScheduler+0x138>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a14      	ldr	r2, [pc, #80]	; (8008438 <xPortStartScheduler+0x138>)
 80083e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083ee:	f000 f8dd 	bl	80085ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <xPortStartScheduler+0x13c>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083f8:	f000 f8fc 	bl	80085f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083fc:	4b10      	ldr	r3, [pc, #64]	; (8008440 <xPortStartScheduler+0x140>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0f      	ldr	r2, [pc, #60]	; (8008440 <xPortStartScheduler+0x140>)
 8008402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008408:	f7ff ff66 	bl	80082d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800840c:	f7ff f84c 	bl	80074a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008410:	f7ff ff22 	bl	8008258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	e000ed00 	.word	0xe000ed00
 8008424:	410fc271 	.word	0x410fc271
 8008428:	410fc270 	.word	0x410fc270
 800842c:	e000e400 	.word	0xe000e400
 8008430:	20001bc0 	.word	0x20001bc0
 8008434:	20001bc4 	.word	0x20001bc4
 8008438:	e000ed20 	.word	0xe000ed20
 800843c:	2000008c 	.word	0x2000008c
 8008440:	e000ef34 	.word	0xe000ef34

08008444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	607b      	str	r3, [r7, #4]
}
 800845c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <vPortEnterCritical+0x58>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a0d      	ldr	r2, [pc, #52]	; (800849c <vPortEnterCritical+0x58>)
 8008466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008468:	4b0c      	ldr	r3, [pc, #48]	; (800849c <vPortEnterCritical+0x58>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d10f      	bne.n	8008490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <vPortEnterCritical+0x5c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <vPortEnterCritical+0x4c>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	603b      	str	r3, [r7, #0]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <vPortEnterCritical+0x4a>
	}
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	2000008c 	.word	0x2000008c
 80084a0:	e000ed04 	.word	0xe000ed04

080084a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084aa:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <vPortExitCritical+0x50>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <vPortExitCritical+0x24>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	607b      	str	r3, [r7, #4]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <vPortExitCritical+0x50>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <vPortExitCritical+0x50>)
 80084d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <vPortExitCritical+0x50>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d105      	bne.n	80084e6 <vPortExitCritical+0x42>
 80084da:	2300      	movs	r3, #0
 80084dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f383 8811 	msr	BASEPRI, r3
}
 80084e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	2000008c 	.word	0x2000008c
	...

08008500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008500:	f3ef 8009 	mrs	r0, PSP
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	4b15      	ldr	r3, [pc, #84]	; (8008560 <pxCurrentTCBConst>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	f01e 0f10 	tst.w	lr, #16
 8008510:	bf08      	it	eq
 8008512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	6010      	str	r0, [r2, #0]
 800851c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008524:	f380 8811 	msr	BASEPRI, r0
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f7fe ffba 	bl	80074a8 <vTaskSwitchContext>
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	f380 8811 	msr	BASEPRI, r0
 800853c:	bc09      	pop	{r0, r3}
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	6808      	ldr	r0, [r1, #0]
 8008542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008546:	f01e 0f10 	tst.w	lr, #16
 800854a:	bf08      	it	eq
 800854c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008550:	f380 8809 	msr	PSP, r0
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst>:
 8008560:	20001594 	.word	0x20001594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	607b      	str	r3, [r7, #4]
}
 8008580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008582:	f7fe fed7 	bl	8007334 <xTaskIncrementTick>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <xPortSysTickHandler+0x40>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <vPortSetupTimerInterrupt+0x34>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <vPortSetupTimerInterrupt+0x38>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085bc:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <vPortSetupTimerInterrupt+0x3c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <vPortSetupTimerInterrupt+0x40>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	099b      	lsrs	r3, r3, #6
 80085c8:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <vPortSetupTimerInterrupt+0x44>)
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085ce:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <vPortSetupTimerInterrupt+0x34>)
 80085d0:	2207      	movs	r2, #7
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	e000e010 	.word	0xe000e010
 80085e4:	e000e018 	.word	0xe000e018
 80085e8:	20000080 	.word	0x20000080
 80085ec:	10624dd3 	.word	0x10624dd3
 80085f0:	e000e014 	.word	0xe000e014

080085f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008604 <vPortEnableVFP+0x10>
 80085f8:	6801      	ldr	r1, [r0, #0]
 80085fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085fe:	6001      	str	r1, [r0, #0]
 8008600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008602:	bf00      	nop
 8008604:	e000ed88 	.word	0xe000ed88

08008608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800860e:	f3ef 8305 	mrs	r3, IPSR
 8008612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b0f      	cmp	r3, #15
 8008618:	d914      	bls.n	8008644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <vPortValidateInterruptPriority+0x70>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008624:	4b15      	ldr	r3, [pc, #84]	; (800867c <vPortValidateInterruptPriority+0x74>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	7afa      	ldrb	r2, [r7, #11]
 800862a:	429a      	cmp	r2, r3
 800862c:	d20a      	bcs.n	8008644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	607b      	str	r3, [r7, #4]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <vPortValidateInterruptPriority+0x78>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800864c:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <vPortValidateInterruptPriority+0x7c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d90a      	bls.n	800866a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	603b      	str	r3, [r7, #0]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <vPortValidateInterruptPriority+0x60>
	}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	e000e3f0 	.word	0xe000e3f0
 800867c:	20001bc0 	.word	0x20001bc0
 8008680:	e000ed0c 	.word	0xe000ed0c
 8008684:	20001bc4 	.word	0x20001bc4

08008688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008694:	f7fe fd92 	bl	80071bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008698:	4b5b      	ldr	r3, [pc, #364]	; (8008808 <pvPortMalloc+0x180>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086a0:	f000 f920 	bl	80088e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086a4:	4b59      	ldr	r3, [pc, #356]	; (800880c <pvPortMalloc+0x184>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 8093 	bne.w	80087d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01d      	beq.n	80086f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086b8:	2208      	movs	r2, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d014      	beq.n	80086f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f023 0307 	bic.w	r3, r3, #7
 80086d0:	3308      	adds	r3, #8
 80086d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <pvPortMalloc+0x6c>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	617b      	str	r3, [r7, #20]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d06e      	beq.n	80087d8 <pvPortMalloc+0x150>
 80086fa:	4b45      	ldr	r3, [pc, #276]	; (8008810 <pvPortMalloc+0x188>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d869      	bhi.n	80087d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008704:	4b43      	ldr	r3, [pc, #268]	; (8008814 <pvPortMalloc+0x18c>)
 8008706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008708:	4b42      	ldr	r3, [pc, #264]	; (8008814 <pvPortMalloc+0x18c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800870e:	e004      	b.n	800871a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d903      	bls.n	800872c <pvPortMalloc+0xa4>
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f1      	bne.n	8008710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800872c:	4b36      	ldr	r3, [pc, #216]	; (8008808 <pvPortMalloc+0x180>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	429a      	cmp	r2, r3
 8008734:	d050      	beq.n	80087d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2208      	movs	r2, #8
 800873c:	4413      	add	r3, r2
 800873e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	2308      	movs	r3, #8
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	429a      	cmp	r2, r3
 8008756:	d91f      	bls.n	8008798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <pvPortMalloc+0xf8>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	613b      	str	r3, [r7, #16]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008792:	69b8      	ldr	r0, [r7, #24]
 8008794:	f000 f908 	bl	80089a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008798:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <pvPortMalloc+0x188>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	4a1b      	ldr	r2, [pc, #108]	; (8008810 <pvPortMalloc+0x188>)
 80087a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087a6:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <pvPortMalloc+0x188>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <pvPortMalloc+0x190>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d203      	bcs.n	80087ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087b2:	4b17      	ldr	r3, [pc, #92]	; (8008810 <pvPortMalloc+0x188>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a18      	ldr	r2, [pc, #96]	; (8008818 <pvPortMalloc+0x190>)
 80087b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <pvPortMalloc+0x184>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <pvPortMalloc+0x194>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	4a11      	ldr	r2, [pc, #68]	; (800881c <pvPortMalloc+0x194>)
 80087d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087d8:	f7fe fcfe 	bl	80071d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <pvPortMalloc+0x174>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	60fb      	str	r3, [r7, #12]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <pvPortMalloc+0x172>
	return pvReturn;
 80087fc:	69fb      	ldr	r3, [r7, #28]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3728      	adds	r7, #40	; 0x28
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	200057d0 	.word	0x200057d0
 800880c:	200057e4 	.word	0x200057e4
 8008810:	200057d4 	.word	0x200057d4
 8008814:	200057c8 	.word	0x200057c8
 8008818:	200057d8 	.word	0x200057d8
 800881c:	200057dc 	.word	0x200057dc

08008820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d04d      	beq.n	80088ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008832:	2308      	movs	r3, #8
 8008834:	425b      	negs	r3, r3
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4413      	add	r3, r2
 800883a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <vPortFree+0xb8>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4013      	ands	r3, r2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <vPortFree+0x44>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	60fb      	str	r3, [r7, #12]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <vPortFree+0x62>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	60bb      	str	r3, [r7, #8]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <vPortFree+0xb8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4013      	ands	r3, r2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01e      	beq.n	80088ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11a      	bne.n	80088ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <vPortFree+0xb8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	43db      	mvns	r3, r3
 80088a2:	401a      	ands	r2, r3
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088a8:	f7fe fc88 	bl	80071bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <vPortFree+0xbc>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4413      	add	r3, r2
 80088b6:	4a09      	ldr	r2, [pc, #36]	; (80088dc <vPortFree+0xbc>)
 80088b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088ba:	6938      	ldr	r0, [r7, #16]
 80088bc:	f000 f874 	bl	80089a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <vPortFree+0xc0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a06      	ldr	r2, [pc, #24]	; (80088e0 <vPortFree+0xc0>)
 80088c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ca:	f7fe fc85 	bl	80071d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ce:	bf00      	nop
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200057e4 	.word	0x200057e4
 80088dc:	200057d4 	.word	0x200057d4
 80088e0:	200057e0 	.word	0x200057e0

080088e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088f0:	4b27      	ldr	r3, [pc, #156]	; (8008990 <prvHeapInit+0xac>)
 80088f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00c      	beq.n	8008918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3307      	adds	r3, #7
 8008902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0307 	bic.w	r3, r3, #7
 800890a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	4a1f      	ldr	r2, [pc, #124]	; (8008990 <prvHeapInit+0xac>)
 8008914:	4413      	add	r3, r2
 8008916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800891c:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <prvHeapInit+0xb0>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008922:	4b1c      	ldr	r3, [pc, #112]	; (8008994 <prvHeapInit+0xb0>)
 8008924:	2200      	movs	r2, #0
 8008926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	4413      	add	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008930:	2208      	movs	r2, #8
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0307 	bic.w	r3, r3, #7
 800893e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a15      	ldr	r2, [pc, #84]	; (8008998 <prvHeapInit+0xb4>)
 8008944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008946:	4b14      	ldr	r3, [pc, #80]	; (8008998 <prvHeapInit+0xb4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <prvHeapInit+0xb4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008964:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <prvHeapInit+0xb4>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4a0a      	ldr	r2, [pc, #40]	; (800899c <prvHeapInit+0xb8>)
 8008972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <prvHeapInit+0xbc>)
 800897a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <prvHeapInit+0xc0>)
 800897e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	20001bc8 	.word	0x20001bc8
 8008994:	200057c8 	.word	0x200057c8
 8008998:	200057d0 	.word	0x200057d0
 800899c:	200057d8 	.word	0x200057d8
 80089a0:	200057d4 	.word	0x200057d4
 80089a4:	200057e4 	.word	0x200057e4

080089a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089b0:	4b28      	ldr	r3, [pc, #160]	; (8008a54 <prvInsertBlockIntoFreeList+0xac>)
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e002      	b.n	80089bc <prvInsertBlockIntoFreeList+0x14>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d8f7      	bhi.n	80089b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	4413      	add	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d108      	bne.n	80089ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	441a      	add	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d118      	bne.n	8008a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <prvInsertBlockIntoFreeList+0xb0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d00d      	beq.n	8008a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	441a      	add	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	e008      	b.n	8008a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <prvInsertBlockIntoFreeList+0xb0>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e003      	b.n	8008a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d002      	beq.n	8008a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	200057c8 	.word	0x200057c8
 8008a58:	200057d0 	.word	0x200057d0

08008a5c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8008a5c:	b480      	push	{r7}
 8008a5e:	b089      	sub	sp, #36	; 0x24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <lwrb_init+0x1e>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <lwrb_init+0x1e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <lwrb_init+0x22>
        return 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e019      	b.n	8008ab2 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	330c      	adds	r3, #12
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	613b      	str	r3, [r7, #16]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	601a      	str	r2, [r3, #0]
    return 1;
 8008ab0:	2301      	movs	r3, #1
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3724      	adds	r7, #36	; 0x24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08c      	sub	sp, #48	; 0x30
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00d      	beq.n	8008af0 <lwrb_read+0x32>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <lwrb_read+0x32>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <lwrb_read+0x32>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <lwrb_read+0x32>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <lwrb_read+0x36>
        return 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	e060      	b.n	8008bb6 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f8a3 	bl	8008c40 <lwrb_get_full>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bf28      	it	cs
 8008b04:	4613      	movcs	r3, r2
 8008b06:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <lwrb_read+0x54>
        return 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e051      	b.n	8008bb6 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3308      	adds	r3, #8
 8008b16:	623b      	str	r3, [r7, #32]
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f3bf 8f5b 	dmb	ish
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4293      	cmp	r3, r2
 8008b32:	bf28      	it	cs
 8008b34:	4613      	movcs	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	4413      	add	r3, r2
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b46:	f001 fa98 	bl	800a07a <memcpy>
    buff_r_ptr += tocopy;
 8008b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00a      	beq.n	8008b76 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8008b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	18d0      	adds	r0, r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f001 fa84 	bl	800a07a <memcpy>
        buff_r_ptr = btr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d301      	bcc.n	8008b84 <lwrb_read+0xc6>
        buff_r_ptr = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3308      	adds	r3, #8
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	613b      	str	r3, [r7, #16]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f3bf 8f5b 	dmb	ish
 8008b96:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <lwrb_read+0xf2>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	69f9      	ldr	r1, [r7, #28]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	440a      	add	r2, r1
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	4798      	blx	r3
    return tocopy + btr;
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3730      	adds	r7, #48	; 0x30
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 8008bbe:	b480      	push	{r7}
 8008bc0:	b08b      	sub	sp, #44	; 0x2c
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d007      	beq.n	8008bdc <lwrb_get_free+0x1e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <lwrb_get_free+0x1e>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <lwrb_get_free+0x22>
        return 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e029      	b.n	8008c34 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	330c      	adds	r3, #12
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d103      	bne.n	8008c10 <lwrb_get_free+0x52>
        size = buff->size;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0e:	e00f      	b.n	8008c30 <lwrb_get_free+0x72>
    } else if (r > w) {
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d904      	bls.n	8008c22 <lwrb_get_free+0x64>
        size = r - w;
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c20:	e006      	b.n	8008c30 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	1acb      	subs	r3, r1, r3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	3b01      	subs	r3, #1
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	372c      	adds	r7, #44	; 0x2c
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 8008c40:	b480      	push	{r7}
 8008c42:	b08b      	sub	sp, #44	; 0x2c
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <lwrb_get_full+0x1e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <lwrb_get_full+0x1e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <lwrb_get_full+0x22>
        return 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e027      	b.n	8008cb2 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	330c      	adds	r3, #12
 8008c66:	623b      	str	r3, [r7, #32]
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3308      	adds	r3, #8
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d102      	bne.n	8008c90 <lwrb_get_full+0x50>
        size = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	e00f      	b.n	8008cb0 <lwrb_get_full+0x70>
    } else if (w > r) {
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d904      	bls.n	8008ca2 <lwrb_get_full+0x62>
        size = w - r;
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	e006      	b.n	8008cb0 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	69f9      	ldr	r1, [r7, #28]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	1acb      	subs	r3, r1, r3
 8008cac:	4413      	add	r3, r2
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	372c      	adds	r7, #44	; 0x2c
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(lwrb_t* buff, size_t len) {
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
    size_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <lwrb_skip+0x26>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d006      	beq.n	8008ce4 <lwrb_skip+0x26>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <lwrb_skip+0x26>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <lwrb_skip+0x2a>
        return 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e036      	b.n	8008d56 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ffa9 	bl	8008c40 <lwrb_get_full>
 8008cee:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	bf28      	it	cs
 8008cf8:	4613      	movcs	r3, r2
 8008cfa:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f3bf 8f5b 	dmb	ish
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	61fb      	str	r3, [r7, #28]
    r += len;
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d304      	bcc.n	8008d2c <lwrb_skip+0x6e>
        r -= buff->size;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	60bb      	str	r3, [r7, #8]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f3bf 8f5b 	dmb	ish
 8008d3e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <lwrb_skip+0x96>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
    return len;
 8008d54:	683b      	ldr	r3, [r7, #0]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <lwrb_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
lwrb_advance(lwrb_t* buff, size_t len) {
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b088      	sub	sp, #32
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
    size_t free, w;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <lwrb_advance+0x26>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d006      	beq.n	8008d84 <lwrb_advance+0x26>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <lwrb_advance+0x26>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <lwrb_advance+0x2a>
        return 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e036      	b.n	8008df6 <lwrb_advance+0x98>
    }

    /* Use local variables before writing back to main structure */
    free = lwrb_get_free(buff);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff ff18 	bl	8008bbe <lwrb_get_free>
 8008d8e:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, free);
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bf28      	it	cs
 8008d98:	4613      	movcs	r3, r2
 8008d9a:	603b      	str	r3, [r7, #0]
    w = LWRB_LOAD(buff->w, memory_order_acquire);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	330c      	adds	r3, #12
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f3bf 8f5b 	dmb	ish
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	61fb      	str	r3, [r7, #28]
    w += len;
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	4413      	add	r3, r2
 8008db6:	61fb      	str	r3, [r7, #28]
    if (w >= buff->size) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d304      	bcc.n	8008dcc <lwrb_advance+0x6e>
        w -= buff->size;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->w, w, memory_order_release);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	330c      	adds	r3, #12
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	60bb      	str	r3, [r7, #8]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f3bf 8f5b 	dmb	ish
 8008dde:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <lwrb_advance+0x96>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	2101      	movs	r1, #1
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
    return len;
 8008df4:	683b      	ldr	r3, [r7, #0]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <lwrb_find>:
 * \param           found_idx: Pointer to variable to write index in array where bts has been found
 *                      Must not be set to `NULL`
 * \return          `1` if \arg bts found, `0` otherwise
 */
uint8_t
lwrb_find(const lwrb_t* buff, const void* bts, size_t len, size_t start_offset, size_t* found_idx) {
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b08c      	sub	sp, #48	; 0x30
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	603b      	str	r3, [r7, #0]
    size_t full, r, max_x;
    uint8_t found = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    const uint8_t* needle = bts;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || needle == NULL || len == 0 || found_idx == NULL) {
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d010      	beq.n	8008e3e <lwrb_find+0x40>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00c      	beq.n	8008e3e <lwrb_find+0x40>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d008      	beq.n	8008e3e <lwrb_find+0x40>
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <lwrb_find+0x40>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <lwrb_find+0x40>
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <lwrb_find+0x44>
        return 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e065      	b.n	8008f0e <lwrb_find+0x110>
    }
    *found_idx = 0;
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]

    full = lwrb_get_full(buff);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fef9 	bl	8008c40 <lwrb_get_full>
 8008e4e:	61b8      	str	r0, [r7, #24]
    /* Verify initial conditions */
    if (full < (len + start_offset)) {
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	4413      	add	r3, r2
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d201      	bcs.n	8008e60 <lwrb_find+0x62>
        return 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e056      	b.n	8008f0e <lwrb_find+0x110>
    }

    /* Max number of for loops is buff_full - input_len - start_offset of buffer length */
    max_x = full - len;
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	617b      	str	r3, [r7, #20]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6c:	e045      	b.n	8008efa <lwrb_find+0xfc>
        found = 1; /* Found by default */
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* Prepare the starting point for reading */
        r = buff->r + skip_x;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3308      	adds	r3, #8
 8008e78:	f3bf 8f5b 	dmb	ish
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f3bf 8f5b 	dmb	ish
 8008e82:	613b      	str	r3, [r7, #16]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e88:	4413      	add	r3, r2
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (r >= buff->size) {
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d304      	bcc.n	8008ea0 <lwrb_find+0xa2>
            r -= buff->size;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Search in the buffer */
        for (size_t i = 0; i < len; ++i) {
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	623b      	str	r3, [r7, #32]
 8008ea4:	e01b      	b.n	8008ede <lwrb_find+0xe0>
            if (buff->buff[r] != needle[i]) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	4413      	add	r3, r2
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	69f9      	ldr	r1, [r7, #28]
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	440b      	add	r3, r1
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d003      	beq.n	8008ec4 <lwrb_find+0xc6>
                found = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                break;
 8008ec2:	e010      	b.n	8008ee6 <lwrb_find+0xe8>
            }
            if (++r >= buff->size) {
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d301      	bcc.n	8008ed8 <lwrb_find+0xda>
                r = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t i = 0; i < len; ++i) {
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	3301      	adds	r3, #1
 8008edc:	623b      	str	r3, [r7, #32]
 8008ede:	6a3a      	ldr	r2, [r7, #32]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d3df      	bcc.n	8008ea6 <lwrb_find+0xa8>
            }
        }
        if (found) {
 8008ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <lwrb_find+0xf6>
            *found_idx = skip_x;
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef2:	601a      	str	r2, [r3, #0]
    for (size_t skip_x = start_offset; !found && skip_x <= max_x; ++skip_x) {
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8008efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <lwrb_find+0x10c>
 8008f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d9b1      	bls.n	8008e6e <lwrb_find+0x70>
        }
    }
    return found;
 8008f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3730      	adds	r7, #48	; 0x30
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <__cvt>:
 8008f16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1a:	ec55 4b10 	vmov	r4, r5, d0
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	460e      	mov	r6, r1
 8008f22:	4619      	mov	r1, r3
 8008f24:	462b      	mov	r3, r5
 8008f26:	bfbb      	ittet	lt
 8008f28:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f2c:	461d      	movlt	r5, r3
 8008f2e:	2300      	movge	r3, #0
 8008f30:	232d      	movlt	r3, #45	; 0x2d
 8008f32:	700b      	strb	r3, [r1, #0]
 8008f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f3a:	4691      	mov	r9, r2
 8008f3c:	f023 0820 	bic.w	r8, r3, #32
 8008f40:	bfbc      	itt	lt
 8008f42:	4622      	movlt	r2, r4
 8008f44:	4614      	movlt	r4, r2
 8008f46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f4a:	d005      	beq.n	8008f58 <__cvt+0x42>
 8008f4c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f50:	d100      	bne.n	8008f54 <__cvt+0x3e>
 8008f52:	3601      	adds	r6, #1
 8008f54:	2102      	movs	r1, #2
 8008f56:	e000      	b.n	8008f5a <__cvt+0x44>
 8008f58:	2103      	movs	r1, #3
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	ab02      	add	r3, sp, #8
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	ec45 4b10 	vmov	d0, r4, r5
 8008f66:	4653      	mov	r3, sl
 8008f68:	4632      	mov	r2, r6
 8008f6a:	f001 f925 	bl	800a1b8 <_dtoa_r>
 8008f6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f72:	4607      	mov	r7, r0
 8008f74:	d102      	bne.n	8008f7c <__cvt+0x66>
 8008f76:	f019 0f01 	tst.w	r9, #1
 8008f7a:	d022      	beq.n	8008fc2 <__cvt+0xac>
 8008f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f80:	eb07 0906 	add.w	r9, r7, r6
 8008f84:	d110      	bne.n	8008fa8 <__cvt+0x92>
 8008f86:	783b      	ldrb	r3, [r7, #0]
 8008f88:	2b30      	cmp	r3, #48	; 0x30
 8008f8a:	d10a      	bne.n	8008fa2 <__cvt+0x8c>
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 fda0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f98:	b918      	cbnz	r0, 8008fa2 <__cvt+0x8c>
 8008f9a:	f1c6 0601 	rsb	r6, r6, #1
 8008f9e:	f8ca 6000 	str.w	r6, [sl]
 8008fa2:	f8da 3000 	ldr.w	r3, [sl]
 8008fa6:	4499      	add	r9, r3
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2300      	movs	r3, #0
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 fd92 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fb4:	b108      	cbz	r0, 8008fba <__cvt+0xa4>
 8008fb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fba:	2230      	movs	r2, #48	; 0x30
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	454b      	cmp	r3, r9
 8008fc0:	d307      	bcc.n	8008fd2 <__cvt+0xbc>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc6:	1bdb      	subs	r3, r3, r7
 8008fc8:	4638      	mov	r0, r7
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	b004      	add	sp, #16
 8008fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd2:	1c59      	adds	r1, r3, #1
 8008fd4:	9103      	str	r1, [sp, #12]
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e7f0      	b.n	8008fbc <__cvt+0xa6>

08008fda <__exponent>:
 8008fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	bfb8      	it	lt
 8008fe2:	4249      	neglt	r1, r1
 8008fe4:	f803 2b02 	strb.w	r2, [r3], #2
 8008fe8:	bfb4      	ite	lt
 8008fea:	222d      	movlt	r2, #45	; 0x2d
 8008fec:	222b      	movge	r2, #43	; 0x2b
 8008fee:	2909      	cmp	r1, #9
 8008ff0:	7042      	strb	r2, [r0, #1]
 8008ff2:	dd2a      	ble.n	800904a <__exponent+0x70>
 8008ff4:	f10d 0207 	add.w	r2, sp, #7
 8008ff8:	4617      	mov	r7, r2
 8008ffa:	260a      	movs	r6, #10
 8008ffc:	4694      	mov	ip, r2
 8008ffe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009002:	fb06 1415 	mls	r4, r6, r5, r1
 8009006:	3430      	adds	r4, #48	; 0x30
 8009008:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800900c:	460c      	mov	r4, r1
 800900e:	2c63      	cmp	r4, #99	; 0x63
 8009010:	f102 32ff 	add.w	r2, r2, #4294967295
 8009014:	4629      	mov	r1, r5
 8009016:	dcf1      	bgt.n	8008ffc <__exponent+0x22>
 8009018:	3130      	adds	r1, #48	; 0x30
 800901a:	f1ac 0402 	sub.w	r4, ip, #2
 800901e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009022:	1c41      	adds	r1, r0, #1
 8009024:	4622      	mov	r2, r4
 8009026:	42ba      	cmp	r2, r7
 8009028:	d30a      	bcc.n	8009040 <__exponent+0x66>
 800902a:	f10d 0209 	add.w	r2, sp, #9
 800902e:	eba2 020c 	sub.w	r2, r2, ip
 8009032:	42bc      	cmp	r4, r7
 8009034:	bf88      	it	hi
 8009036:	2200      	movhi	r2, #0
 8009038:	4413      	add	r3, r2
 800903a:	1a18      	subs	r0, r3, r0
 800903c:	b003      	add	sp, #12
 800903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009040:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009044:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009048:	e7ed      	b.n	8009026 <__exponent+0x4c>
 800904a:	2330      	movs	r3, #48	; 0x30
 800904c:	3130      	adds	r1, #48	; 0x30
 800904e:	7083      	strb	r3, [r0, #2]
 8009050:	70c1      	strb	r1, [r0, #3]
 8009052:	1d03      	adds	r3, r0, #4
 8009054:	e7f1      	b.n	800903a <__exponent+0x60>
	...

08009058 <_printf_float>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	ed2d 8b02 	vpush	{d8}
 8009060:	b08d      	sub	sp, #52	; 0x34
 8009062:	460c      	mov	r4, r1
 8009064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009068:	4616      	mov	r6, r2
 800906a:	461f      	mov	r7, r3
 800906c:	4605      	mov	r5, r0
 800906e:	f000 ff37 	bl	8009ee0 <_localeconv_r>
 8009072:	f8d0 a000 	ldr.w	sl, [r0]
 8009076:	4650      	mov	r0, sl
 8009078:	f7f7 f902 	bl	8000280 <strlen>
 800907c:	2300      	movs	r3, #0
 800907e:	930a      	str	r3, [sp, #40]	; 0x28
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	9305      	str	r3, [sp, #20]
 8009084:	f8d8 3000 	ldr.w	r3, [r8]
 8009088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800908c:	3307      	adds	r3, #7
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	f103 0208 	add.w	r2, r3, #8
 8009096:	f8c8 2000 	str.w	r2, [r8]
 800909a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800909e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090b4:	4b9e      	ldr	r3, [pc, #632]	; (8009330 <_printf_float+0x2d8>)
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	f7f7 fd3f 	bl	8000b3c <__aeabi_dcmpun>
 80090be:	bb88      	cbnz	r0, 8009124 <_printf_float+0xcc>
 80090c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090c4:	4b9a      	ldr	r3, [pc, #616]	; (8009330 <_printf_float+0x2d8>)
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	f7f7 fd19 	bl	8000b00 <__aeabi_dcmple>
 80090ce:	bb48      	cbnz	r0, 8009124 <_printf_float+0xcc>
 80090d0:	2200      	movs	r2, #0
 80090d2:	2300      	movs	r3, #0
 80090d4:	4640      	mov	r0, r8
 80090d6:	4649      	mov	r1, r9
 80090d8:	f7f7 fd08 	bl	8000aec <__aeabi_dcmplt>
 80090dc:	b110      	cbz	r0, 80090e4 <_printf_float+0x8c>
 80090de:	232d      	movs	r3, #45	; 0x2d
 80090e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e4:	4a93      	ldr	r2, [pc, #588]	; (8009334 <_printf_float+0x2dc>)
 80090e6:	4b94      	ldr	r3, [pc, #592]	; (8009338 <_printf_float+0x2e0>)
 80090e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090ec:	bf94      	ite	ls
 80090ee:	4690      	movls	r8, r2
 80090f0:	4698      	movhi	r8, r3
 80090f2:	2303      	movs	r3, #3
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	9b05      	ldr	r3, [sp, #20]
 80090f8:	f023 0304 	bic.w	r3, r3, #4
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	f04f 0900 	mov.w	r9, #0
 8009102:	9700      	str	r7, [sp, #0]
 8009104:	4633      	mov	r3, r6
 8009106:	aa0b      	add	r2, sp, #44	; 0x2c
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f9da 	bl	80094c4 <_printf_common>
 8009110:	3001      	adds	r0, #1
 8009112:	f040 8090 	bne.w	8009236 <_printf_float+0x1de>
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	b00d      	add	sp, #52	; 0x34
 800911c:	ecbd 8b02 	vpop	{d8}
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	4642      	mov	r2, r8
 8009126:	464b      	mov	r3, r9
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 fd06 	bl	8000b3c <__aeabi_dcmpun>
 8009130:	b140      	cbz	r0, 8009144 <_printf_float+0xec>
 8009132:	464b      	mov	r3, r9
 8009134:	2b00      	cmp	r3, #0
 8009136:	bfbc      	itt	lt
 8009138:	232d      	movlt	r3, #45	; 0x2d
 800913a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800913e:	4a7f      	ldr	r2, [pc, #508]	; (800933c <_printf_float+0x2e4>)
 8009140:	4b7f      	ldr	r3, [pc, #508]	; (8009340 <_printf_float+0x2e8>)
 8009142:	e7d1      	b.n	80090e8 <_printf_float+0x90>
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800914a:	9206      	str	r2, [sp, #24]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	d13f      	bne.n	80091d0 <_printf_float+0x178>
 8009150:	2306      	movs	r3, #6
 8009152:	6063      	str	r3, [r4, #4]
 8009154:	9b05      	ldr	r3, [sp, #20]
 8009156:	6861      	ldr	r1, [r4, #4]
 8009158:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800915c:	2300      	movs	r3, #0
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	ab0a      	add	r3, sp, #40	; 0x28
 8009162:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009166:	ab09      	add	r3, sp, #36	; 0x24
 8009168:	ec49 8b10 	vmov	d0, r8, r9
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	6022      	str	r2, [r4, #0]
 8009170:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009174:	4628      	mov	r0, r5
 8009176:	f7ff fece 	bl	8008f16 <__cvt>
 800917a:	9b06      	ldr	r3, [sp, #24]
 800917c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917e:	2b47      	cmp	r3, #71	; 0x47
 8009180:	4680      	mov	r8, r0
 8009182:	d108      	bne.n	8009196 <_printf_float+0x13e>
 8009184:	1cc8      	adds	r0, r1, #3
 8009186:	db02      	blt.n	800918e <_printf_float+0x136>
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	4299      	cmp	r1, r3
 800918c:	dd41      	ble.n	8009212 <_printf_float+0x1ba>
 800918e:	f1ab 0302 	sub.w	r3, fp, #2
 8009192:	fa5f fb83 	uxtb.w	fp, r3
 8009196:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800919a:	d820      	bhi.n	80091de <_printf_float+0x186>
 800919c:	3901      	subs	r1, #1
 800919e:	465a      	mov	r2, fp
 80091a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091a4:	9109      	str	r1, [sp, #36]	; 0x24
 80091a6:	f7ff ff18 	bl	8008fda <__exponent>
 80091aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ac:	1813      	adds	r3, r2, r0
 80091ae:	2a01      	cmp	r2, #1
 80091b0:	4681      	mov	r9, r0
 80091b2:	6123      	str	r3, [r4, #16]
 80091b4:	dc02      	bgt.n	80091bc <_printf_float+0x164>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	07d2      	lsls	r2, r2, #31
 80091ba:	d501      	bpl.n	80091c0 <_printf_float+0x168>
 80091bc:	3301      	adds	r3, #1
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d09c      	beq.n	8009102 <_printf_float+0xaa>
 80091c8:	232d      	movs	r3, #45	; 0x2d
 80091ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ce:	e798      	b.n	8009102 <_printf_float+0xaa>
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	2a47      	cmp	r2, #71	; 0x47
 80091d4:	d1be      	bne.n	8009154 <_printf_float+0xfc>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1bc      	bne.n	8009154 <_printf_float+0xfc>
 80091da:	2301      	movs	r3, #1
 80091dc:	e7b9      	b.n	8009152 <_printf_float+0xfa>
 80091de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091e2:	d118      	bne.n	8009216 <_printf_float+0x1be>
 80091e4:	2900      	cmp	r1, #0
 80091e6:	6863      	ldr	r3, [r4, #4]
 80091e8:	dd0b      	ble.n	8009202 <_printf_float+0x1aa>
 80091ea:	6121      	str	r1, [r4, #16]
 80091ec:	b913      	cbnz	r3, 80091f4 <_printf_float+0x19c>
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	07d0      	lsls	r0, r2, #31
 80091f2:	d502      	bpl.n	80091fa <_printf_float+0x1a2>
 80091f4:	3301      	adds	r3, #1
 80091f6:	440b      	add	r3, r1
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80091fc:	f04f 0900 	mov.w	r9, #0
 8009200:	e7de      	b.n	80091c0 <_printf_float+0x168>
 8009202:	b913      	cbnz	r3, 800920a <_printf_float+0x1b2>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	07d2      	lsls	r2, r2, #31
 8009208:	d501      	bpl.n	800920e <_printf_float+0x1b6>
 800920a:	3302      	adds	r3, #2
 800920c:	e7f4      	b.n	80091f8 <_printf_float+0x1a0>
 800920e:	2301      	movs	r3, #1
 8009210:	e7f2      	b.n	80091f8 <_printf_float+0x1a0>
 8009212:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009218:	4299      	cmp	r1, r3
 800921a:	db05      	blt.n	8009228 <_printf_float+0x1d0>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	6121      	str	r1, [r4, #16]
 8009220:	07d8      	lsls	r0, r3, #31
 8009222:	d5ea      	bpl.n	80091fa <_printf_float+0x1a2>
 8009224:	1c4b      	adds	r3, r1, #1
 8009226:	e7e7      	b.n	80091f8 <_printf_float+0x1a0>
 8009228:	2900      	cmp	r1, #0
 800922a:	bfd4      	ite	le
 800922c:	f1c1 0202 	rsble	r2, r1, #2
 8009230:	2201      	movgt	r2, #1
 8009232:	4413      	add	r3, r2
 8009234:	e7e0      	b.n	80091f8 <_printf_float+0x1a0>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	055a      	lsls	r2, r3, #21
 800923a:	d407      	bmi.n	800924c <_printf_float+0x1f4>
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	4642      	mov	r2, r8
 8009240:	4631      	mov	r1, r6
 8009242:	4628      	mov	r0, r5
 8009244:	47b8      	blx	r7
 8009246:	3001      	adds	r0, #1
 8009248:	d12c      	bne.n	80092a4 <_printf_float+0x24c>
 800924a:	e764      	b.n	8009116 <_printf_float+0xbe>
 800924c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009250:	f240 80e0 	bls.w	8009414 <_printf_float+0x3bc>
 8009254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	f7f7 fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009260:	2800      	cmp	r0, #0
 8009262:	d034      	beq.n	80092ce <_printf_float+0x276>
 8009264:	4a37      	ldr	r2, [pc, #220]	; (8009344 <_printf_float+0x2ec>)
 8009266:	2301      	movs	r3, #1
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f af51 	beq.w	8009116 <_printf_float+0xbe>
 8009274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009278:	429a      	cmp	r2, r3
 800927a:	db02      	blt.n	8009282 <_printf_float+0x22a>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	07d8      	lsls	r0, r3, #31
 8009280:	d510      	bpl.n	80092a4 <_printf_float+0x24c>
 8009282:	ee18 3a10 	vmov	r3, s16
 8009286:	4652      	mov	r2, sl
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af41 	beq.w	8009116 <_printf_float+0xbe>
 8009294:	f04f 0800 	mov.w	r8, #0
 8009298:	f104 091a 	add.w	r9, r4, #26
 800929c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929e:	3b01      	subs	r3, #1
 80092a0:	4543      	cmp	r3, r8
 80092a2:	dc09      	bgt.n	80092b8 <_printf_float+0x260>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	079b      	lsls	r3, r3, #30
 80092a8:	f100 8107 	bmi.w	80094ba <_printf_float+0x462>
 80092ac:	68e0      	ldr	r0, [r4, #12]
 80092ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b0:	4298      	cmp	r0, r3
 80092b2:	bfb8      	it	lt
 80092b4:	4618      	movlt	r0, r3
 80092b6:	e730      	b.n	800911a <_printf_float+0xc2>
 80092b8:	2301      	movs	r3, #1
 80092ba:	464a      	mov	r2, r9
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f af27 	beq.w	8009116 <_printf_float+0xbe>
 80092c8:	f108 0801 	add.w	r8, r8, #1
 80092cc:	e7e6      	b.n	800929c <_printf_float+0x244>
 80092ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc39      	bgt.n	8009348 <_printf_float+0x2f0>
 80092d4:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <_printf_float+0x2ec>)
 80092d6:	2301      	movs	r3, #1
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f af19 	beq.w	8009116 <_printf_float+0xbe>
 80092e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092e8:	4313      	orrs	r3, r2
 80092ea:	d102      	bne.n	80092f2 <_printf_float+0x29a>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	07d9      	lsls	r1, r3, #31
 80092f0:	d5d8      	bpl.n	80092a4 <_printf_float+0x24c>
 80092f2:	ee18 3a10 	vmov	r3, s16
 80092f6:	4652      	mov	r2, sl
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f af09 	beq.w	8009116 <_printf_float+0xbe>
 8009304:	f04f 0900 	mov.w	r9, #0
 8009308:	f104 0a1a 	add.w	sl, r4, #26
 800930c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930e:	425b      	negs	r3, r3
 8009310:	454b      	cmp	r3, r9
 8009312:	dc01      	bgt.n	8009318 <_printf_float+0x2c0>
 8009314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009316:	e792      	b.n	800923e <_printf_float+0x1e6>
 8009318:	2301      	movs	r3, #1
 800931a:	4652      	mov	r2, sl
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f aef7 	beq.w	8009116 <_printf_float+0xbe>
 8009328:	f109 0901 	add.w	r9, r9, #1
 800932c:	e7ee      	b.n	800930c <_printf_float+0x2b4>
 800932e:	bf00      	nop
 8009330:	7fefffff 	.word	0x7fefffff
 8009334:	0800f2e4 	.word	0x0800f2e4
 8009338:	0800f2e8 	.word	0x0800f2e8
 800933c:	0800f2ec 	.word	0x0800f2ec
 8009340:	0800f2f0 	.word	0x0800f2f0
 8009344:	0800f680 	.word	0x0800f680
 8009348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800934a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800934c:	429a      	cmp	r2, r3
 800934e:	bfa8      	it	ge
 8009350:	461a      	movge	r2, r3
 8009352:	2a00      	cmp	r2, #0
 8009354:	4691      	mov	r9, r2
 8009356:	dc37      	bgt.n	80093c8 <_printf_float+0x370>
 8009358:	f04f 0b00 	mov.w	fp, #0
 800935c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009360:	f104 021a 	add.w	r2, r4, #26
 8009364:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	eba3 0309 	sub.w	r3, r3, r9
 800936c:	455b      	cmp	r3, fp
 800936e:	dc33      	bgt.n	80093d8 <_printf_float+0x380>
 8009370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009374:	429a      	cmp	r2, r3
 8009376:	db3b      	blt.n	80093f0 <_printf_float+0x398>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	07da      	lsls	r2, r3, #31
 800937c:	d438      	bmi.n	80093f0 <_printf_float+0x398>
 800937e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009382:	eba2 0903 	sub.w	r9, r2, r3
 8009386:	9b05      	ldr	r3, [sp, #20]
 8009388:	1ad2      	subs	r2, r2, r3
 800938a:	4591      	cmp	r9, r2
 800938c:	bfa8      	it	ge
 800938e:	4691      	movge	r9, r2
 8009390:	f1b9 0f00 	cmp.w	r9, #0
 8009394:	dc35      	bgt.n	8009402 <_printf_float+0x3aa>
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800939e:	f104 0a1a 	add.w	sl, r4, #26
 80093a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	eba3 0309 	sub.w	r3, r3, r9
 80093ac:	4543      	cmp	r3, r8
 80093ae:	f77f af79 	ble.w	80092a4 <_printf_float+0x24c>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4631      	mov	r1, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	47b8      	blx	r7
 80093bc:	3001      	adds	r0, #1
 80093be:	f43f aeaa 	beq.w	8009116 <_printf_float+0xbe>
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	e7ec      	b.n	80093a2 <_printf_float+0x34a>
 80093c8:	4613      	mov	r3, r2
 80093ca:	4631      	mov	r1, r6
 80093cc:	4642      	mov	r2, r8
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c0      	bne.n	8009358 <_printf_float+0x300>
 80093d6:	e69e      	b.n	8009116 <_printf_float+0xbe>
 80093d8:	2301      	movs	r3, #1
 80093da:	4631      	mov	r1, r6
 80093dc:	4628      	mov	r0, r5
 80093de:	9205      	str	r2, [sp, #20]
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f ae97 	beq.w	8009116 <_printf_float+0xbe>
 80093e8:	9a05      	ldr	r2, [sp, #20]
 80093ea:	f10b 0b01 	add.w	fp, fp, #1
 80093ee:	e7b9      	b.n	8009364 <_printf_float+0x30c>
 80093f0:	ee18 3a10 	vmov	r3, s16
 80093f4:	4652      	mov	r2, sl
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	d1be      	bne.n	800937e <_printf_float+0x326>
 8009400:	e689      	b.n	8009116 <_printf_float+0xbe>
 8009402:	9a05      	ldr	r2, [sp, #20]
 8009404:	464b      	mov	r3, r9
 8009406:	4442      	add	r2, r8
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	d1c1      	bne.n	8009396 <_printf_float+0x33e>
 8009412:	e680      	b.n	8009116 <_printf_float+0xbe>
 8009414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009416:	2a01      	cmp	r2, #1
 8009418:	dc01      	bgt.n	800941e <_printf_float+0x3c6>
 800941a:	07db      	lsls	r3, r3, #31
 800941c:	d53a      	bpl.n	8009494 <_printf_float+0x43c>
 800941e:	2301      	movs	r3, #1
 8009420:	4642      	mov	r2, r8
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	f43f ae74 	beq.w	8009116 <_printf_float+0xbe>
 800942e:	ee18 3a10 	vmov	r3, s16
 8009432:	4652      	mov	r2, sl
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f ae6b 	beq.w	8009116 <_printf_float+0xbe>
 8009440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800944c:	f7f7 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009450:	b9d8      	cbnz	r0, 800948a <_printf_float+0x432>
 8009452:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009456:	f108 0201 	add.w	r2, r8, #1
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	d10e      	bne.n	8009482 <_printf_float+0x42a>
 8009464:	e657      	b.n	8009116 <_printf_float+0xbe>
 8009466:	2301      	movs	r3, #1
 8009468:	4652      	mov	r2, sl
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae50 	beq.w	8009116 <_printf_float+0xbe>
 8009476:	f108 0801 	add.w	r8, r8, #1
 800947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947c:	3b01      	subs	r3, #1
 800947e:	4543      	cmp	r3, r8
 8009480:	dcf1      	bgt.n	8009466 <_printf_float+0x40e>
 8009482:	464b      	mov	r3, r9
 8009484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009488:	e6da      	b.n	8009240 <_printf_float+0x1e8>
 800948a:	f04f 0800 	mov.w	r8, #0
 800948e:	f104 0a1a 	add.w	sl, r4, #26
 8009492:	e7f2      	b.n	800947a <_printf_float+0x422>
 8009494:	2301      	movs	r3, #1
 8009496:	4642      	mov	r2, r8
 8009498:	e7df      	b.n	800945a <_printf_float+0x402>
 800949a:	2301      	movs	r3, #1
 800949c:	464a      	mov	r2, r9
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	f43f ae36 	beq.w	8009116 <_printf_float+0xbe>
 80094aa:	f108 0801 	add.w	r8, r8, #1
 80094ae:	68e3      	ldr	r3, [r4, #12]
 80094b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094b2:	1a5b      	subs	r3, r3, r1
 80094b4:	4543      	cmp	r3, r8
 80094b6:	dcf0      	bgt.n	800949a <_printf_float+0x442>
 80094b8:	e6f8      	b.n	80092ac <_printf_float+0x254>
 80094ba:	f04f 0800 	mov.w	r8, #0
 80094be:	f104 0919 	add.w	r9, r4, #25
 80094c2:	e7f4      	b.n	80094ae <_printf_float+0x456>

080094c4 <_printf_common>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	4616      	mov	r6, r2
 80094ca:	4699      	mov	r9, r3
 80094cc:	688a      	ldr	r2, [r1, #8]
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	bfb8      	it	lt
 80094d8:	4613      	movlt	r3, r2
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094e0:	4607      	mov	r7, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b10a      	cbz	r2, 80094ea <_printf_common+0x26>
 80094e6:	3301      	adds	r3, #1
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	0699      	lsls	r1, r3, #26
 80094ee:	bf42      	ittt	mi
 80094f0:	6833      	ldrmi	r3, [r6, #0]
 80094f2:	3302      	addmi	r3, #2
 80094f4:	6033      	strmi	r3, [r6, #0]
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	f015 0506 	ands.w	r5, r5, #6
 80094fc:	d106      	bne.n	800950c <_printf_common+0x48>
 80094fe:	f104 0a19 	add.w	sl, r4, #25
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	6832      	ldr	r2, [r6, #0]
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	42ab      	cmp	r3, r5
 800950a:	dc26      	bgt.n	800955a <_printf_common+0x96>
 800950c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009510:	1e13      	subs	r3, r2, #0
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	bf18      	it	ne
 8009516:	2301      	movne	r3, #1
 8009518:	0692      	lsls	r2, r2, #26
 800951a:	d42b      	bmi.n	8009574 <_printf_common+0xb0>
 800951c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009520:	4649      	mov	r1, r9
 8009522:	4638      	mov	r0, r7
 8009524:	47c0      	blx	r8
 8009526:	3001      	adds	r0, #1
 8009528:	d01e      	beq.n	8009568 <_printf_common+0xa4>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	f003 0306 	and.w	r3, r3, #6
 8009532:	2b04      	cmp	r3, #4
 8009534:	bf02      	ittt	eq
 8009536:	68e5      	ldreq	r5, [r4, #12]
 8009538:	6833      	ldreq	r3, [r6, #0]
 800953a:	1aed      	subeq	r5, r5, r3
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	bf0c      	ite	eq
 8009540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009544:	2500      	movne	r5, #0
 8009546:	4293      	cmp	r3, r2
 8009548:	bfc4      	itt	gt
 800954a:	1a9b      	subgt	r3, r3, r2
 800954c:	18ed      	addgt	r5, r5, r3
 800954e:	2600      	movs	r6, #0
 8009550:	341a      	adds	r4, #26
 8009552:	42b5      	cmp	r5, r6
 8009554:	d11a      	bne.n	800958c <_printf_common+0xc8>
 8009556:	2000      	movs	r0, #0
 8009558:	e008      	b.n	800956c <_printf_common+0xa8>
 800955a:	2301      	movs	r3, #1
 800955c:	4652      	mov	r2, sl
 800955e:	4649      	mov	r1, r9
 8009560:	4638      	mov	r0, r7
 8009562:	47c0      	blx	r8
 8009564:	3001      	adds	r0, #1
 8009566:	d103      	bne.n	8009570 <_printf_common+0xac>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	3501      	adds	r5, #1
 8009572:	e7c6      	b.n	8009502 <_printf_common+0x3e>
 8009574:	18e1      	adds	r1, r4, r3
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	2030      	movs	r0, #48	; 0x30
 800957a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800957e:	4422      	add	r2, r4
 8009580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009588:	3302      	adds	r3, #2
 800958a:	e7c7      	b.n	800951c <_printf_common+0x58>
 800958c:	2301      	movs	r3, #1
 800958e:	4622      	mov	r2, r4
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d0e6      	beq.n	8009568 <_printf_common+0xa4>
 800959a:	3601      	adds	r6, #1
 800959c:	e7d9      	b.n	8009552 <_printf_common+0x8e>
	...

080095a0 <_printf_i>:
 80095a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	7e0f      	ldrb	r7, [r1, #24]
 80095a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095a8:	2f78      	cmp	r7, #120	; 0x78
 80095aa:	4691      	mov	r9, r2
 80095ac:	4680      	mov	r8, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	469a      	mov	sl, r3
 80095b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095b6:	d807      	bhi.n	80095c8 <_printf_i+0x28>
 80095b8:	2f62      	cmp	r7, #98	; 0x62
 80095ba:	d80a      	bhi.n	80095d2 <_printf_i+0x32>
 80095bc:	2f00      	cmp	r7, #0
 80095be:	f000 80d4 	beq.w	800976a <_printf_i+0x1ca>
 80095c2:	2f58      	cmp	r7, #88	; 0x58
 80095c4:	f000 80c0 	beq.w	8009748 <_printf_i+0x1a8>
 80095c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095d0:	e03a      	b.n	8009648 <_printf_i+0xa8>
 80095d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095d6:	2b15      	cmp	r3, #21
 80095d8:	d8f6      	bhi.n	80095c8 <_printf_i+0x28>
 80095da:	a101      	add	r1, pc, #4	; (adr r1, 80095e0 <_printf_i+0x40>)
 80095dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095e0:	08009639 	.word	0x08009639
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	080095c9 	.word	0x080095c9
 80095ec:	080095c9 	.word	0x080095c9
 80095f0:	080095c9 	.word	0x080095c9
 80095f4:	080095c9 	.word	0x080095c9
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	080095c9 	.word	0x080095c9
 8009600:	080095c9 	.word	0x080095c9
 8009604:	080095c9 	.word	0x080095c9
 8009608:	080095c9 	.word	0x080095c9
 800960c:	08009751 	.word	0x08009751
 8009610:	08009679 	.word	0x08009679
 8009614:	0800970b 	.word	0x0800970b
 8009618:	080095c9 	.word	0x080095c9
 800961c:	080095c9 	.word	0x080095c9
 8009620:	08009773 	.word	0x08009773
 8009624:	080095c9 	.word	0x080095c9
 8009628:	08009679 	.word	0x08009679
 800962c:	080095c9 	.word	0x080095c9
 8009630:	080095c9 	.word	0x080095c9
 8009634:	08009713 	.word	0x08009713
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009648:	2301      	movs	r3, #1
 800964a:	e09f      	b.n	800978c <_printf_i+0x1ec>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	0607      	lsls	r7, r0, #24
 8009652:	f103 0104 	add.w	r1, r3, #4
 8009656:	6029      	str	r1, [r5, #0]
 8009658:	d501      	bpl.n	800965e <_printf_i+0xbe>
 800965a:	681e      	ldr	r6, [r3, #0]
 800965c:	e003      	b.n	8009666 <_printf_i+0xc6>
 800965e:	0646      	lsls	r6, r0, #25
 8009660:	d5fb      	bpl.n	800965a <_printf_i+0xba>
 8009662:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009666:	2e00      	cmp	r6, #0
 8009668:	da03      	bge.n	8009672 <_printf_i+0xd2>
 800966a:	232d      	movs	r3, #45	; 0x2d
 800966c:	4276      	negs	r6, r6
 800966e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009672:	485a      	ldr	r0, [pc, #360]	; (80097dc <_printf_i+0x23c>)
 8009674:	230a      	movs	r3, #10
 8009676:	e012      	b.n	800969e <_printf_i+0xfe>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	1d19      	adds	r1, r3, #4
 800967e:	6029      	str	r1, [r5, #0]
 8009680:	0605      	lsls	r5, r0, #24
 8009682:	d501      	bpl.n	8009688 <_printf_i+0xe8>
 8009684:	681e      	ldr	r6, [r3, #0]
 8009686:	e002      	b.n	800968e <_printf_i+0xee>
 8009688:	0641      	lsls	r1, r0, #25
 800968a:	d5fb      	bpl.n	8009684 <_printf_i+0xe4>
 800968c:	881e      	ldrh	r6, [r3, #0]
 800968e:	4853      	ldr	r0, [pc, #332]	; (80097dc <_printf_i+0x23c>)
 8009690:	2f6f      	cmp	r7, #111	; 0x6f
 8009692:	bf0c      	ite	eq
 8009694:	2308      	moveq	r3, #8
 8009696:	230a      	movne	r3, #10
 8009698:	2100      	movs	r1, #0
 800969a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800969e:	6865      	ldr	r5, [r4, #4]
 80096a0:	60a5      	str	r5, [r4, #8]
 80096a2:	2d00      	cmp	r5, #0
 80096a4:	bfa2      	ittt	ge
 80096a6:	6821      	ldrge	r1, [r4, #0]
 80096a8:	f021 0104 	bicge.w	r1, r1, #4
 80096ac:	6021      	strge	r1, [r4, #0]
 80096ae:	b90e      	cbnz	r6, 80096b4 <_printf_i+0x114>
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	d04b      	beq.n	800974c <_printf_i+0x1ac>
 80096b4:	4615      	mov	r5, r2
 80096b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ba:	fb03 6711 	mls	r7, r3, r1, r6
 80096be:	5dc7      	ldrb	r7, [r0, r7]
 80096c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096c4:	4637      	mov	r7, r6
 80096c6:	42bb      	cmp	r3, r7
 80096c8:	460e      	mov	r6, r1
 80096ca:	d9f4      	bls.n	80096b6 <_printf_i+0x116>
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d10b      	bne.n	80096e8 <_printf_i+0x148>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	07de      	lsls	r6, r3, #31
 80096d4:	d508      	bpl.n	80096e8 <_printf_i+0x148>
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	4299      	cmp	r1, r3
 80096dc:	bfde      	ittt	le
 80096de:	2330      	movle	r3, #48	; 0x30
 80096e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096e8:	1b52      	subs	r2, r2, r5
 80096ea:	6122      	str	r2, [r4, #16]
 80096ec:	f8cd a000 	str.w	sl, [sp]
 80096f0:	464b      	mov	r3, r9
 80096f2:	aa03      	add	r2, sp, #12
 80096f4:	4621      	mov	r1, r4
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7ff fee4 	bl	80094c4 <_printf_common>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d14a      	bne.n	8009796 <_printf_i+0x1f6>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b004      	add	sp, #16
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	f043 0320 	orr.w	r3, r3, #32
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	4833      	ldr	r0, [pc, #204]	; (80097e0 <_printf_i+0x240>)
 8009714:	2778      	movs	r7, #120	; 0x78
 8009716:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	6829      	ldr	r1, [r5, #0]
 800971e:	061f      	lsls	r7, r3, #24
 8009720:	f851 6b04 	ldr.w	r6, [r1], #4
 8009724:	d402      	bmi.n	800972c <_printf_i+0x18c>
 8009726:	065f      	lsls	r7, r3, #25
 8009728:	bf48      	it	mi
 800972a:	b2b6      	uxthmi	r6, r6
 800972c:	07df      	lsls	r7, r3, #31
 800972e:	bf48      	it	mi
 8009730:	f043 0320 	orrmi.w	r3, r3, #32
 8009734:	6029      	str	r1, [r5, #0]
 8009736:	bf48      	it	mi
 8009738:	6023      	strmi	r3, [r4, #0]
 800973a:	b91e      	cbnz	r6, 8009744 <_printf_i+0x1a4>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	f023 0320 	bic.w	r3, r3, #32
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	2310      	movs	r3, #16
 8009746:	e7a7      	b.n	8009698 <_printf_i+0xf8>
 8009748:	4824      	ldr	r0, [pc, #144]	; (80097dc <_printf_i+0x23c>)
 800974a:	e7e4      	b.n	8009716 <_printf_i+0x176>
 800974c:	4615      	mov	r5, r2
 800974e:	e7bd      	b.n	80096cc <_printf_i+0x12c>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	6826      	ldr	r6, [r4, #0]
 8009754:	6961      	ldr	r1, [r4, #20]
 8009756:	1d18      	adds	r0, r3, #4
 8009758:	6028      	str	r0, [r5, #0]
 800975a:	0635      	lsls	r5, r6, #24
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	d501      	bpl.n	8009764 <_printf_i+0x1c4>
 8009760:	6019      	str	r1, [r3, #0]
 8009762:	e002      	b.n	800976a <_printf_i+0x1ca>
 8009764:	0670      	lsls	r0, r6, #25
 8009766:	d5fb      	bpl.n	8009760 <_printf_i+0x1c0>
 8009768:	8019      	strh	r1, [r3, #0]
 800976a:	2300      	movs	r3, #0
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	4615      	mov	r5, r2
 8009770:	e7bc      	b.n	80096ec <_printf_i+0x14c>
 8009772:	682b      	ldr	r3, [r5, #0]
 8009774:	1d1a      	adds	r2, r3, #4
 8009776:	602a      	str	r2, [r5, #0]
 8009778:	681d      	ldr	r5, [r3, #0]
 800977a:	6862      	ldr	r2, [r4, #4]
 800977c:	2100      	movs	r1, #0
 800977e:	4628      	mov	r0, r5
 8009780:	f7f6 fd2e 	bl	80001e0 <memchr>
 8009784:	b108      	cbz	r0, 800978a <_printf_i+0x1ea>
 8009786:	1b40      	subs	r0, r0, r5
 8009788:	6060      	str	r0, [r4, #4]
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	2300      	movs	r3, #0
 8009790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009794:	e7aa      	b.n	80096ec <_printf_i+0x14c>
 8009796:	6923      	ldr	r3, [r4, #16]
 8009798:	462a      	mov	r2, r5
 800979a:	4649      	mov	r1, r9
 800979c:	4640      	mov	r0, r8
 800979e:	47d0      	blx	sl
 80097a0:	3001      	adds	r0, #1
 80097a2:	d0ad      	beq.n	8009700 <_printf_i+0x160>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	079b      	lsls	r3, r3, #30
 80097a8:	d413      	bmi.n	80097d2 <_printf_i+0x232>
 80097aa:	68e0      	ldr	r0, [r4, #12]
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	4298      	cmp	r0, r3
 80097b0:	bfb8      	it	lt
 80097b2:	4618      	movlt	r0, r3
 80097b4:	e7a6      	b.n	8009704 <_printf_i+0x164>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4632      	mov	r2, r6
 80097ba:	4649      	mov	r1, r9
 80097bc:	4640      	mov	r0, r8
 80097be:	47d0      	blx	sl
 80097c0:	3001      	adds	r0, #1
 80097c2:	d09d      	beq.n	8009700 <_printf_i+0x160>
 80097c4:	3501      	adds	r5, #1
 80097c6:	68e3      	ldr	r3, [r4, #12]
 80097c8:	9903      	ldr	r1, [sp, #12]
 80097ca:	1a5b      	subs	r3, r3, r1
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	dcf2      	bgt.n	80097b6 <_printf_i+0x216>
 80097d0:	e7eb      	b.n	80097aa <_printf_i+0x20a>
 80097d2:	2500      	movs	r5, #0
 80097d4:	f104 0619 	add.w	r6, r4, #25
 80097d8:	e7f5      	b.n	80097c6 <_printf_i+0x226>
 80097da:	bf00      	nop
 80097dc:	0800f2f4 	.word	0x0800f2f4
 80097e0:	0800f305 	.word	0x0800f305

080097e4 <_scanf_float>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	b087      	sub	sp, #28
 80097ea:	4617      	mov	r7, r2
 80097ec:	9303      	str	r3, [sp, #12]
 80097ee:	688b      	ldr	r3, [r1, #8]
 80097f0:	1e5a      	subs	r2, r3, #1
 80097f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80097f6:	bf83      	ittte	hi
 80097f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097fc:	195b      	addhi	r3, r3, r5
 80097fe:	9302      	strhi	r3, [sp, #8]
 8009800:	2300      	movls	r3, #0
 8009802:	bf86      	itte	hi
 8009804:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009808:	608b      	strhi	r3, [r1, #8]
 800980a:	9302      	strls	r3, [sp, #8]
 800980c:	680b      	ldr	r3, [r1, #0]
 800980e:	468b      	mov	fp, r1
 8009810:	2500      	movs	r5, #0
 8009812:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009816:	f84b 3b1c 	str.w	r3, [fp], #28
 800981a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800981e:	4680      	mov	r8, r0
 8009820:	460c      	mov	r4, r1
 8009822:	465e      	mov	r6, fp
 8009824:	46aa      	mov	sl, r5
 8009826:	46a9      	mov	r9, r5
 8009828:	9501      	str	r5, [sp, #4]
 800982a:	68a2      	ldr	r2, [r4, #8]
 800982c:	b152      	cbz	r2, 8009844 <_scanf_float+0x60>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b4e      	cmp	r3, #78	; 0x4e
 8009834:	d864      	bhi.n	8009900 <_scanf_float+0x11c>
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d83c      	bhi.n	80098b4 <_scanf_float+0xd0>
 800983a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800983e:	b2c8      	uxtb	r0, r1
 8009840:	280e      	cmp	r0, #14
 8009842:	d93a      	bls.n	80098ba <_scanf_float+0xd6>
 8009844:	f1b9 0f00 	cmp.w	r9, #0
 8009848:	d003      	beq.n	8009852 <_scanf_float+0x6e>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009856:	f1ba 0f01 	cmp.w	sl, #1
 800985a:	f200 8113 	bhi.w	8009a84 <_scanf_float+0x2a0>
 800985e:	455e      	cmp	r6, fp
 8009860:	f200 8105 	bhi.w	8009a6e <_scanf_float+0x28a>
 8009864:	2501      	movs	r5, #1
 8009866:	4628      	mov	r0, r5
 8009868:	b007      	add	sp, #28
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009872:	2a0d      	cmp	r2, #13
 8009874:	d8e6      	bhi.n	8009844 <_scanf_float+0x60>
 8009876:	a101      	add	r1, pc, #4	; (adr r1, 800987c <_scanf_float+0x98>)
 8009878:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800987c:	080099bb 	.word	0x080099bb
 8009880:	08009845 	.word	0x08009845
 8009884:	08009845 	.word	0x08009845
 8009888:	08009845 	.word	0x08009845
 800988c:	08009a1b 	.word	0x08009a1b
 8009890:	080099f3 	.word	0x080099f3
 8009894:	08009845 	.word	0x08009845
 8009898:	08009845 	.word	0x08009845
 800989c:	080099c9 	.word	0x080099c9
 80098a0:	08009845 	.word	0x08009845
 80098a4:	08009845 	.word	0x08009845
 80098a8:	08009845 	.word	0x08009845
 80098ac:	08009845 	.word	0x08009845
 80098b0:	08009981 	.word	0x08009981
 80098b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80098b8:	e7db      	b.n	8009872 <_scanf_float+0x8e>
 80098ba:	290e      	cmp	r1, #14
 80098bc:	d8c2      	bhi.n	8009844 <_scanf_float+0x60>
 80098be:	a001      	add	r0, pc, #4	; (adr r0, 80098c4 <_scanf_float+0xe0>)
 80098c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098c4:	08009973 	.word	0x08009973
 80098c8:	08009845 	.word	0x08009845
 80098cc:	08009973 	.word	0x08009973
 80098d0:	08009a07 	.word	0x08009a07
 80098d4:	08009845 	.word	0x08009845
 80098d8:	08009921 	.word	0x08009921
 80098dc:	0800995d 	.word	0x0800995d
 80098e0:	0800995d 	.word	0x0800995d
 80098e4:	0800995d 	.word	0x0800995d
 80098e8:	0800995d 	.word	0x0800995d
 80098ec:	0800995d 	.word	0x0800995d
 80098f0:	0800995d 	.word	0x0800995d
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	0800995d 	.word	0x0800995d
 80098fc:	0800995d 	.word	0x0800995d
 8009900:	2b6e      	cmp	r3, #110	; 0x6e
 8009902:	d809      	bhi.n	8009918 <_scanf_float+0x134>
 8009904:	2b60      	cmp	r3, #96	; 0x60
 8009906:	d8b2      	bhi.n	800986e <_scanf_float+0x8a>
 8009908:	2b54      	cmp	r3, #84	; 0x54
 800990a:	d077      	beq.n	80099fc <_scanf_float+0x218>
 800990c:	2b59      	cmp	r3, #89	; 0x59
 800990e:	d199      	bne.n	8009844 <_scanf_float+0x60>
 8009910:	2d07      	cmp	r5, #7
 8009912:	d197      	bne.n	8009844 <_scanf_float+0x60>
 8009914:	2508      	movs	r5, #8
 8009916:	e029      	b.n	800996c <_scanf_float+0x188>
 8009918:	2b74      	cmp	r3, #116	; 0x74
 800991a:	d06f      	beq.n	80099fc <_scanf_float+0x218>
 800991c:	2b79      	cmp	r3, #121	; 0x79
 800991e:	e7f6      	b.n	800990e <_scanf_float+0x12a>
 8009920:	6821      	ldr	r1, [r4, #0]
 8009922:	05c8      	lsls	r0, r1, #23
 8009924:	d51a      	bpl.n	800995c <_scanf_float+0x178>
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800992c:	6021      	str	r1, [r4, #0]
 800992e:	f109 0901 	add.w	r9, r9, #1
 8009932:	b11b      	cbz	r3, 800993c <_scanf_float+0x158>
 8009934:	3b01      	subs	r3, #1
 8009936:	3201      	adds	r2, #1
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	60a2      	str	r2, [r4, #8]
 800993c:	68a3      	ldr	r3, [r4, #8]
 800993e:	3b01      	subs	r3, #1
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	3301      	adds	r3, #1
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3b01      	subs	r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	f340 8084 	ble.w	8009a5c <_scanf_float+0x278>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	e766      	b.n	800982a <_scanf_float+0x46>
 800995c:	eb1a 0f05 	cmn.w	sl, r5
 8009960:	f47f af70 	bne.w	8009844 <_scanf_float+0x60>
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800996a:	6022      	str	r2, [r4, #0]
 800996c:	f806 3b01 	strb.w	r3, [r6], #1
 8009970:	e7e4      	b.n	800993c <_scanf_float+0x158>
 8009972:	6822      	ldr	r2, [r4, #0]
 8009974:	0610      	lsls	r0, r2, #24
 8009976:	f57f af65 	bpl.w	8009844 <_scanf_float+0x60>
 800997a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800997e:	e7f4      	b.n	800996a <_scanf_float+0x186>
 8009980:	f1ba 0f00 	cmp.w	sl, #0
 8009984:	d10e      	bne.n	80099a4 <_scanf_float+0x1c0>
 8009986:	f1b9 0f00 	cmp.w	r9, #0
 800998a:	d10e      	bne.n	80099aa <_scanf_float+0x1c6>
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009992:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009996:	d108      	bne.n	80099aa <_scanf_float+0x1c6>
 8009998:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800999c:	6022      	str	r2, [r4, #0]
 800999e:	f04f 0a01 	mov.w	sl, #1
 80099a2:	e7e3      	b.n	800996c <_scanf_float+0x188>
 80099a4:	f1ba 0f02 	cmp.w	sl, #2
 80099a8:	d055      	beq.n	8009a56 <_scanf_float+0x272>
 80099aa:	2d01      	cmp	r5, #1
 80099ac:	d002      	beq.n	80099b4 <_scanf_float+0x1d0>
 80099ae:	2d04      	cmp	r5, #4
 80099b0:	f47f af48 	bne.w	8009844 <_scanf_float+0x60>
 80099b4:	3501      	adds	r5, #1
 80099b6:	b2ed      	uxtb	r5, r5
 80099b8:	e7d8      	b.n	800996c <_scanf_float+0x188>
 80099ba:	f1ba 0f01 	cmp.w	sl, #1
 80099be:	f47f af41 	bne.w	8009844 <_scanf_float+0x60>
 80099c2:	f04f 0a02 	mov.w	sl, #2
 80099c6:	e7d1      	b.n	800996c <_scanf_float+0x188>
 80099c8:	b97d      	cbnz	r5, 80099ea <_scanf_float+0x206>
 80099ca:	f1b9 0f00 	cmp.w	r9, #0
 80099ce:	f47f af3c 	bne.w	800984a <_scanf_float+0x66>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099dc:	f47f af39 	bne.w	8009852 <_scanf_float+0x6e>
 80099e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	2501      	movs	r5, #1
 80099e8:	e7c0      	b.n	800996c <_scanf_float+0x188>
 80099ea:	2d03      	cmp	r5, #3
 80099ec:	d0e2      	beq.n	80099b4 <_scanf_float+0x1d0>
 80099ee:	2d05      	cmp	r5, #5
 80099f0:	e7de      	b.n	80099b0 <_scanf_float+0x1cc>
 80099f2:	2d02      	cmp	r5, #2
 80099f4:	f47f af26 	bne.w	8009844 <_scanf_float+0x60>
 80099f8:	2503      	movs	r5, #3
 80099fa:	e7b7      	b.n	800996c <_scanf_float+0x188>
 80099fc:	2d06      	cmp	r5, #6
 80099fe:	f47f af21 	bne.w	8009844 <_scanf_float+0x60>
 8009a02:	2507      	movs	r5, #7
 8009a04:	e7b2      	b.n	800996c <_scanf_float+0x188>
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	0591      	lsls	r1, r2, #22
 8009a0a:	f57f af1b 	bpl.w	8009844 <_scanf_float+0x60>
 8009a0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a18:	e7a8      	b.n	800996c <_scanf_float+0x188>
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a24:	d006      	beq.n	8009a34 <_scanf_float+0x250>
 8009a26:	0550      	lsls	r0, r2, #21
 8009a28:	f57f af0c 	bpl.w	8009844 <_scanf_float+0x60>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	f43f af0f 	beq.w	8009852 <_scanf_float+0x6e>
 8009a34:	0591      	lsls	r1, r2, #22
 8009a36:	bf58      	it	pl
 8009a38:	9901      	ldrpl	r1, [sp, #4]
 8009a3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a3e:	bf58      	it	pl
 8009a40:	eba9 0101 	subpl.w	r1, r9, r1
 8009a44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009a48:	bf58      	it	pl
 8009a4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	f04f 0900 	mov.w	r9, #0
 8009a54:	e78a      	b.n	800996c <_scanf_float+0x188>
 8009a56:	f04f 0a03 	mov.w	sl, #3
 8009a5a:	e787      	b.n	800996c <_scanf_float+0x188>
 8009a5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a60:	4639      	mov	r1, r7
 8009a62:	4640      	mov	r0, r8
 8009a64:	4798      	blx	r3
 8009a66:	2800      	cmp	r0, #0
 8009a68:	f43f aedf 	beq.w	800982a <_scanf_float+0x46>
 8009a6c:	e6ea      	b.n	8009844 <_scanf_float+0x60>
 8009a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a76:	463a      	mov	r2, r7
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4798      	blx	r3
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	e6ec      	b.n	800985e <_scanf_float+0x7a>
 8009a84:	1e6b      	subs	r3, r5, #1
 8009a86:	2b06      	cmp	r3, #6
 8009a88:	d825      	bhi.n	8009ad6 <_scanf_float+0x2f2>
 8009a8a:	2d02      	cmp	r5, #2
 8009a8c:	d836      	bhi.n	8009afc <_scanf_float+0x318>
 8009a8e:	455e      	cmp	r6, fp
 8009a90:	f67f aee8 	bls.w	8009864 <_scanf_float+0x80>
 8009a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4798      	blx	r3
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	6123      	str	r3, [r4, #16]
 8009aa8:	e7f1      	b.n	8009a8e <_scanf_float+0x2aa>
 8009aaa:	9802      	ldr	r0, [sp, #8]
 8009aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ab0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ab4:	9002      	str	r0, [sp, #8]
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4640      	mov	r0, r8
 8009aba:	4798      	blx	r3
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	6123      	str	r3, [r4, #16]
 8009ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ac6:	fa5f fa8a 	uxtb.w	sl, sl
 8009aca:	f1ba 0f02 	cmp.w	sl, #2
 8009ace:	d1ec      	bne.n	8009aaa <_scanf_float+0x2c6>
 8009ad0:	3d03      	subs	r5, #3
 8009ad2:	b2ed      	uxtb	r5, r5
 8009ad4:	1b76      	subs	r6, r6, r5
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	05da      	lsls	r2, r3, #23
 8009ada:	d52f      	bpl.n	8009b3c <_scanf_float+0x358>
 8009adc:	055b      	lsls	r3, r3, #21
 8009ade:	d510      	bpl.n	8009b02 <_scanf_float+0x31e>
 8009ae0:	455e      	cmp	r6, fp
 8009ae2:	f67f aebf 	bls.w	8009864 <_scanf_float+0x80>
 8009ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009aea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aee:	463a      	mov	r2, r7
 8009af0:	4640      	mov	r0, r8
 8009af2:	4798      	blx	r3
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	e7f1      	b.n	8009ae0 <_scanf_float+0x2fc>
 8009afc:	46aa      	mov	sl, r5
 8009afe:	9602      	str	r6, [sp, #8]
 8009b00:	e7df      	b.n	8009ac2 <_scanf_float+0x2de>
 8009b02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	2965      	cmp	r1, #101	; 0x65
 8009b0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b12:	6123      	str	r3, [r4, #16]
 8009b14:	d00c      	beq.n	8009b30 <_scanf_float+0x34c>
 8009b16:	2945      	cmp	r1, #69	; 0x45
 8009b18:	d00a      	beq.n	8009b30 <_scanf_float+0x34c>
 8009b1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b1e:	463a      	mov	r2, r7
 8009b20:	4640      	mov	r0, r8
 8009b22:	4798      	blx	r3
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	1eb5      	subs	r5, r6, #2
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b34:	463a      	mov	r2, r7
 8009b36:	4640      	mov	r0, r8
 8009b38:	4798      	blx	r3
 8009b3a:	462e      	mov	r6, r5
 8009b3c:	6825      	ldr	r5, [r4, #0]
 8009b3e:	f015 0510 	ands.w	r5, r5, #16
 8009b42:	d158      	bne.n	8009bf6 <_scanf_float+0x412>
 8009b44:	7035      	strb	r5, [r6, #0]
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b50:	d11c      	bne.n	8009b8c <_scanf_float+0x3a8>
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	454b      	cmp	r3, r9
 8009b56:	eba3 0209 	sub.w	r2, r3, r9
 8009b5a:	d124      	bne.n	8009ba6 <_scanf_float+0x3c2>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4659      	mov	r1, fp
 8009b60:	4640      	mov	r0, r8
 8009b62:	f002 fcd5 	bl	800c510 <_strtod_r>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	6821      	ldr	r1, [r4, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f011 0f02 	tst.w	r1, #2
 8009b70:	ec57 6b10 	vmov	r6, r7, d0
 8009b74:	f103 0204 	add.w	r2, r3, #4
 8009b78:	d020      	beq.n	8009bbc <_scanf_float+0x3d8>
 8009b7a:	9903      	ldr	r1, [sp, #12]
 8009b7c:	600a      	str	r2, [r1, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	e9c3 6700 	strd	r6, r7, [r3]
 8009b84:	68e3      	ldr	r3, [r4, #12]
 8009b86:	3301      	adds	r3, #1
 8009b88:	60e3      	str	r3, [r4, #12]
 8009b8a:	e66c      	b.n	8009866 <_scanf_float+0x82>
 8009b8c:	9b04      	ldr	r3, [sp, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0e4      	beq.n	8009b5c <_scanf_float+0x378>
 8009b92:	9905      	ldr	r1, [sp, #20]
 8009b94:	230a      	movs	r3, #10
 8009b96:	462a      	mov	r2, r5
 8009b98:	3101      	adds	r1, #1
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	f002 fd40 	bl	800c620 <_strtol_r>
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	9e05      	ldr	r6, [sp, #20]
 8009ba4:	1ac2      	subs	r2, r0, r3
 8009ba6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009baa:	429e      	cmp	r6, r3
 8009bac:	bf28      	it	cs
 8009bae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009bb2:	4912      	ldr	r1, [pc, #72]	; (8009bfc <_scanf_float+0x418>)
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f000 f8f9 	bl	8009dac <siprintf>
 8009bba:	e7cf      	b.n	8009b5c <_scanf_float+0x378>
 8009bbc:	f011 0f04 	tst.w	r1, #4
 8009bc0:	9903      	ldr	r1, [sp, #12]
 8009bc2:	600a      	str	r2, [r1, #0]
 8009bc4:	d1db      	bne.n	8009b7e <_scanf_float+0x39a>
 8009bc6:	f8d3 8000 	ldr.w	r8, [r3]
 8009bca:	ee10 2a10 	vmov	r2, s0
 8009bce:	ee10 0a10 	vmov	r0, s0
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	f7f6 ffb1 	bl	8000b3c <__aeabi_dcmpun>
 8009bda:	b128      	cbz	r0, 8009be8 <_scanf_float+0x404>
 8009bdc:	4808      	ldr	r0, [pc, #32]	; (8009c00 <_scanf_float+0x41c>)
 8009bde:	f000 fa5b 	bl	800a098 <nanf>
 8009be2:	ed88 0a00 	vstr	s0, [r8]
 8009be6:	e7cd      	b.n	8009b84 <_scanf_float+0x3a0>
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f7 f804 	bl	8000bf8 <__aeabi_d2f>
 8009bf0:	f8c8 0000 	str.w	r0, [r8]
 8009bf4:	e7c6      	b.n	8009b84 <_scanf_float+0x3a0>
 8009bf6:	2500      	movs	r5, #0
 8009bf8:	e635      	b.n	8009866 <_scanf_float+0x82>
 8009bfa:	bf00      	nop
 8009bfc:	0800f316 	.word	0x0800f316
 8009c00:	0800f6c8 	.word	0x0800f6c8

08009c04 <std>:
 8009c04:	2300      	movs	r3, #0
 8009c06:	b510      	push	{r4, lr}
 8009c08:	4604      	mov	r4, r0
 8009c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c12:	6083      	str	r3, [r0, #8]
 8009c14:	8181      	strh	r1, [r0, #12]
 8009c16:	6643      	str	r3, [r0, #100]	; 0x64
 8009c18:	81c2      	strh	r2, [r0, #14]
 8009c1a:	6183      	str	r3, [r0, #24]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	2208      	movs	r2, #8
 8009c20:	305c      	adds	r0, #92	; 0x5c
 8009c22:	f000 f954 	bl	8009ece <memset>
 8009c26:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <std+0x58>)
 8009c28:	6263      	str	r3, [r4, #36]	; 0x24
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <std+0x5c>)
 8009c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <std+0x60>)
 8009c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c32:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <std+0x64>)
 8009c34:	6323      	str	r3, [r4, #48]	; 0x30
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <std+0x68>)
 8009c38:	6224      	str	r4, [r4, #32]
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	d006      	beq.n	8009c4c <std+0x48>
 8009c3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c42:	4294      	cmp	r4, r2
 8009c44:	d002      	beq.n	8009c4c <std+0x48>
 8009c46:	33d0      	adds	r3, #208	; 0xd0
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	d105      	bne.n	8009c58 <std+0x54>
 8009c4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c54:	f000 ba0e 	b.w	800a074 <__retarget_lock_init_recursive>
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	bf00      	nop
 8009c5c:	08009e45 	.word	0x08009e45
 8009c60:	08009e6b 	.word	0x08009e6b
 8009c64:	08009ea3 	.word	0x08009ea3
 8009c68:	08009ec7 	.word	0x08009ec7
 8009c6c:	200057e8 	.word	0x200057e8

08009c70 <stdio_exit_handler>:
 8009c70:	4a02      	ldr	r2, [pc, #8]	; (8009c7c <stdio_exit_handler+0xc>)
 8009c72:	4903      	ldr	r1, [pc, #12]	; (8009c80 <stdio_exit_handler+0x10>)
 8009c74:	4803      	ldr	r0, [pc, #12]	; (8009c84 <stdio_exit_handler+0x14>)
 8009c76:	f000 b869 	b.w	8009d4c <_fwalk_sglue>
 8009c7a:	bf00      	nop
 8009c7c:	20000090 	.word	0x20000090
 8009c80:	0800d2a9 	.word	0x0800d2a9
 8009c84:	2000009c 	.word	0x2000009c

08009c88 <cleanup_stdio>:
 8009c88:	6841      	ldr	r1, [r0, #4]
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <cleanup_stdio+0x34>)
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	4604      	mov	r4, r0
 8009c92:	d001      	beq.n	8009c98 <cleanup_stdio+0x10>
 8009c94:	f003 fb08 	bl	800d2a8 <_fflush_r>
 8009c98:	68a1      	ldr	r1, [r4, #8]
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <cleanup_stdio+0x38>)
 8009c9c:	4299      	cmp	r1, r3
 8009c9e:	d002      	beq.n	8009ca6 <cleanup_stdio+0x1e>
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f003 fb01 	bl	800d2a8 <_fflush_r>
 8009ca6:	68e1      	ldr	r1, [r4, #12]
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <cleanup_stdio+0x3c>)
 8009caa:	4299      	cmp	r1, r3
 8009cac:	d004      	beq.n	8009cb8 <cleanup_stdio+0x30>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb4:	f003 baf8 	b.w	800d2a8 <_fflush_r>
 8009cb8:	bd10      	pop	{r4, pc}
 8009cba:	bf00      	nop
 8009cbc:	200057e8 	.word	0x200057e8
 8009cc0:	20005850 	.word	0x20005850
 8009cc4:	200058b8 	.word	0x200058b8

08009cc8 <global_stdio_init.part.0>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <global_stdio_init.part.0+0x30>)
 8009ccc:	4c0b      	ldr	r4, [pc, #44]	; (8009cfc <global_stdio_init.part.0+0x34>)
 8009cce:	4a0c      	ldr	r2, [pc, #48]	; (8009d00 <global_stdio_init.part.0+0x38>)
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2104      	movs	r1, #4
 8009cd8:	f7ff ff94 	bl	8009c04 <std>
 8009cdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	2109      	movs	r1, #9
 8009ce4:	f7ff ff8e 	bl	8009c04 <std>
 8009ce8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009cec:	2202      	movs	r2, #2
 8009cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf2:	2112      	movs	r1, #18
 8009cf4:	f7ff bf86 	b.w	8009c04 <std>
 8009cf8:	20005920 	.word	0x20005920
 8009cfc:	200057e8 	.word	0x200057e8
 8009d00:	08009c71 	.word	0x08009c71

08009d04 <__sfp_lock_acquire>:
 8009d04:	4801      	ldr	r0, [pc, #4]	; (8009d0c <__sfp_lock_acquire+0x8>)
 8009d06:	f000 b9b6 	b.w	800a076 <__retarget_lock_acquire_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	20005929 	.word	0x20005929

08009d10 <__sfp_lock_release>:
 8009d10:	4801      	ldr	r0, [pc, #4]	; (8009d18 <__sfp_lock_release+0x8>)
 8009d12:	f000 b9b1 	b.w	800a078 <__retarget_lock_release_recursive>
 8009d16:	bf00      	nop
 8009d18:	20005929 	.word	0x20005929

08009d1c <__sinit>:
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	4604      	mov	r4, r0
 8009d20:	f7ff fff0 	bl	8009d04 <__sfp_lock_acquire>
 8009d24:	6a23      	ldr	r3, [r4, #32]
 8009d26:	b11b      	cbz	r3, 8009d30 <__sinit+0x14>
 8009d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d2c:	f7ff bff0 	b.w	8009d10 <__sfp_lock_release>
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <__sinit+0x28>)
 8009d32:	6223      	str	r3, [r4, #32]
 8009d34:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <__sinit+0x2c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f5      	bne.n	8009d28 <__sinit+0xc>
 8009d3c:	f7ff ffc4 	bl	8009cc8 <global_stdio_init.part.0>
 8009d40:	e7f2      	b.n	8009d28 <__sinit+0xc>
 8009d42:	bf00      	nop
 8009d44:	08009c89 	.word	0x08009c89
 8009d48:	20005920 	.word	0x20005920

08009d4c <_fwalk_sglue>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4607      	mov	r7, r0
 8009d52:	4688      	mov	r8, r1
 8009d54:	4614      	mov	r4, r2
 8009d56:	2600      	movs	r6, #0
 8009d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d60:	d505      	bpl.n	8009d6e <_fwalk_sglue+0x22>
 8009d62:	6824      	ldr	r4, [r4, #0]
 8009d64:	2c00      	cmp	r4, #0
 8009d66:	d1f7      	bne.n	8009d58 <_fwalk_sglue+0xc>
 8009d68:	4630      	mov	r0, r6
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d907      	bls.n	8009d84 <_fwalk_sglue+0x38>
 8009d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	d003      	beq.n	8009d84 <_fwalk_sglue+0x38>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	4638      	mov	r0, r7
 8009d80:	47c0      	blx	r8
 8009d82:	4306      	orrs	r6, r0
 8009d84:	3568      	adds	r5, #104	; 0x68
 8009d86:	e7e9      	b.n	8009d5c <_fwalk_sglue+0x10>

08009d88 <iprintf>:
 8009d88:	b40f      	push	{r0, r1, r2, r3}
 8009d8a:	b507      	push	{r0, r1, r2, lr}
 8009d8c:	4906      	ldr	r1, [pc, #24]	; (8009da8 <iprintf+0x20>)
 8009d8e:	ab04      	add	r3, sp, #16
 8009d90:	6808      	ldr	r0, [r1, #0]
 8009d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d96:	6881      	ldr	r1, [r0, #8]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	f002 ff97 	bl	800cccc <_vfiprintf_r>
 8009d9e:	b003      	add	sp, #12
 8009da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da4:	b004      	add	sp, #16
 8009da6:	4770      	bx	lr
 8009da8:	200000e8 	.word	0x200000e8

08009dac <siprintf>:
 8009dac:	b40e      	push	{r1, r2, r3}
 8009dae:	b500      	push	{lr}
 8009db0:	b09c      	sub	sp, #112	; 0x70
 8009db2:	ab1d      	add	r3, sp, #116	; 0x74
 8009db4:	9002      	str	r0, [sp, #8]
 8009db6:	9006      	str	r0, [sp, #24]
 8009db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dbc:	4809      	ldr	r0, [pc, #36]	; (8009de4 <siprintf+0x38>)
 8009dbe:	9107      	str	r1, [sp, #28]
 8009dc0:	9104      	str	r1, [sp, #16]
 8009dc2:	4909      	ldr	r1, [pc, #36]	; (8009de8 <siprintf+0x3c>)
 8009dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc8:	9105      	str	r1, [sp, #20]
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	a902      	add	r1, sp, #8
 8009dd0:	f002 fc82 	bl	800c6d8 <_svfiprintf_r>
 8009dd4:	9b02      	ldr	r3, [sp, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	b01c      	add	sp, #112	; 0x70
 8009ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de0:	b003      	add	sp, #12
 8009de2:	4770      	bx	lr
 8009de4:	200000e8 	.word	0x200000e8
 8009de8:	ffff0208 	.word	0xffff0208

08009dec <siscanf>:
 8009dec:	b40e      	push	{r1, r2, r3}
 8009dee:	b510      	push	{r4, lr}
 8009df0:	b09f      	sub	sp, #124	; 0x7c
 8009df2:	ac21      	add	r4, sp, #132	; 0x84
 8009df4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009df8:	f854 2b04 	ldr.w	r2, [r4], #4
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	9008      	str	r0, [sp, #32]
 8009e06:	f7f6 fa3b 	bl	8000280 <strlen>
 8009e0a:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <siscanf+0x50>)
 8009e0c:	9005      	str	r0, [sp, #20]
 8009e0e:	9009      	str	r0, [sp, #36]	; 0x24
 8009e10:	930d      	str	r3, [sp, #52]	; 0x34
 8009e12:	480b      	ldr	r0, [pc, #44]	; (8009e40 <siscanf+0x54>)
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	9403      	str	r4, [sp, #12]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9311      	str	r3, [sp, #68]	; 0x44
 8009e1e:	9316      	str	r3, [sp, #88]	; 0x58
 8009e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e28:	a904      	add	r1, sp, #16
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	f002 fdac 	bl	800c988 <__ssvfiscanf_r>
 8009e30:	b01f      	add	sp, #124	; 0x7c
 8009e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e36:	b003      	add	sp, #12
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	08009e67 	.word	0x08009e67
 8009e40:	200000e8 	.word	0x200000e8

08009e44 <__sread>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	f000 f8c4 	bl	8009fd8 <_read_r>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	bfab      	itete	ge
 8009e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e56:	89a3      	ldrhlt	r3, [r4, #12]
 8009e58:	181b      	addge	r3, r3, r0
 8009e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e5e:	bfac      	ite	ge
 8009e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e62:	81a3      	strhlt	r3, [r4, #12]
 8009e64:	bd10      	pop	{r4, pc}

08009e66 <__seofread>:
 8009e66:	2000      	movs	r0, #0
 8009e68:	4770      	bx	lr

08009e6a <__swrite>:
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	461f      	mov	r7, r3
 8009e70:	898b      	ldrh	r3, [r1, #12]
 8009e72:	05db      	lsls	r3, r3, #23
 8009e74:	4605      	mov	r5, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	4616      	mov	r6, r2
 8009e7a:	d505      	bpl.n	8009e88 <__swrite+0x1e>
 8009e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e80:	2302      	movs	r3, #2
 8009e82:	2200      	movs	r2, #0
 8009e84:	f000 f896 	bl	8009fb4 <_lseek_r>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e92:	81a3      	strh	r3, [r4, #12]
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	f000 b8ad 	b.w	8009ffc <_write_r>

08009ea2 <__sseek>:
 8009ea2:	b510      	push	{r4, lr}
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eaa:	f000 f883 	bl	8009fb4 <_lseek_r>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	bf15      	itete	ne
 8009eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ebe:	81a3      	strheq	r3, [r4, #12]
 8009ec0:	bf18      	it	ne
 8009ec2:	81a3      	strhne	r3, [r4, #12]
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <__sclose>:
 8009ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eca:	f000 b80d 	b.w	8009ee8 <_close_r>

08009ece <memset>:
 8009ece:	4402      	add	r2, r0
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d100      	bne.n	8009ed8 <memset+0xa>
 8009ed6:	4770      	bx	lr
 8009ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8009edc:	e7f9      	b.n	8009ed2 <memset+0x4>
	...

08009ee0 <_localeconv_r>:
 8009ee0:	4800      	ldr	r0, [pc, #0]	; (8009ee4 <_localeconv_r+0x4>)
 8009ee2:	4770      	bx	lr
 8009ee4:	200001dc 	.word	0x200001dc

08009ee8 <_close_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_close_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 f91d 	bl	8002132 <_close>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_close_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_close_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20005924 	.word	0x20005924

08009f08 <_reclaim_reent>:
 8009f08:	4b29      	ldr	r3, [pc, #164]	; (8009fb0 <_reclaim_reent+0xa8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4283      	cmp	r3, r0
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	4604      	mov	r4, r0
 8009f12:	d04b      	beq.n	8009fac <_reclaim_reent+0xa4>
 8009f14:	69c3      	ldr	r3, [r0, #28]
 8009f16:	b143      	cbz	r3, 8009f2a <_reclaim_reent+0x22>
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d144      	bne.n	8009fa8 <_reclaim_reent+0xa0>
 8009f1e:	69e3      	ldr	r3, [r4, #28]
 8009f20:	6819      	ldr	r1, [r3, #0]
 8009f22:	b111      	cbz	r1, 8009f2a <_reclaim_reent+0x22>
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 ff39 	bl	800ad9c <_free_r>
 8009f2a:	6961      	ldr	r1, [r4, #20]
 8009f2c:	b111      	cbz	r1, 8009f34 <_reclaim_reent+0x2c>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 ff34 	bl	800ad9c <_free_r>
 8009f34:	69e1      	ldr	r1, [r4, #28]
 8009f36:	b111      	cbz	r1, 8009f3e <_reclaim_reent+0x36>
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 ff2f 	bl	800ad9c <_free_r>
 8009f3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f40:	b111      	cbz	r1, 8009f48 <_reclaim_reent+0x40>
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 ff2a 	bl	800ad9c <_free_r>
 8009f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f4a:	b111      	cbz	r1, 8009f52 <_reclaim_reent+0x4a>
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 ff25 	bl	800ad9c <_free_r>
 8009f52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f54:	b111      	cbz	r1, 8009f5c <_reclaim_reent+0x54>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 ff20 	bl	800ad9c <_free_r>
 8009f5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f5e:	b111      	cbz	r1, 8009f66 <_reclaim_reent+0x5e>
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 ff1b 	bl	800ad9c <_free_r>
 8009f66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009f68:	b111      	cbz	r1, 8009f70 <_reclaim_reent+0x68>
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 ff16 	bl	800ad9c <_free_r>
 8009f70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009f72:	b111      	cbz	r1, 8009f7a <_reclaim_reent+0x72>
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 ff11 	bl	800ad9c <_free_r>
 8009f7a:	6a23      	ldr	r3, [r4, #32]
 8009f7c:	b1b3      	cbz	r3, 8009fac <_reclaim_reent+0xa4>
 8009f7e:	4620      	mov	r0, r4
 8009f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f84:	4718      	bx	r3
 8009f86:	5949      	ldr	r1, [r1, r5]
 8009f88:	b941      	cbnz	r1, 8009f9c <_reclaim_reent+0x94>
 8009f8a:	3504      	adds	r5, #4
 8009f8c:	69e3      	ldr	r3, [r4, #28]
 8009f8e:	2d80      	cmp	r5, #128	; 0x80
 8009f90:	68d9      	ldr	r1, [r3, #12]
 8009f92:	d1f8      	bne.n	8009f86 <_reclaim_reent+0x7e>
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 ff01 	bl	800ad9c <_free_r>
 8009f9a:	e7c0      	b.n	8009f1e <_reclaim_reent+0x16>
 8009f9c:	680e      	ldr	r6, [r1, #0]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 fefc 	bl	800ad9c <_free_r>
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	e7ef      	b.n	8009f88 <_reclaim_reent+0x80>
 8009fa8:	2500      	movs	r5, #0
 8009faa:	e7ef      	b.n	8009f8c <_reclaim_reent+0x84>
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
 8009fae:	bf00      	nop
 8009fb0:	200000e8 	.word	0x200000e8

08009fb4 <_lseek_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d07      	ldr	r5, [pc, #28]	; (8009fd4 <_lseek_r+0x20>)
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	602a      	str	r2, [r5, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f7f8 f8dc 	bl	8002180 <_lseek>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_lseek_r+0x1e>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_lseek_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20005924 	.word	0x20005924

08009fd8 <_read_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_read_r+0x20>)
 8009fdc:	4604      	mov	r4, r0
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	602a      	str	r2, [r5, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f7f8 f86a 	bl	80020c0 <_read>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_read_r+0x1e>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_read_r+0x1e>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	20005924 	.word	0x20005924

08009ffc <_write_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d07      	ldr	r5, [pc, #28]	; (800a01c <_write_r+0x20>)
 800a000:	4604      	mov	r4, r0
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	2200      	movs	r2, #0
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7f8 f875 	bl	80020fa <_write>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_write_r+0x1e>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_write_r+0x1e>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	20005924 	.word	0x20005924

0800a020 <__errno>:
 800a020:	4b01      	ldr	r3, [pc, #4]	; (800a028 <__errno+0x8>)
 800a022:	6818      	ldr	r0, [r3, #0]
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	200000e8 	.word	0x200000e8

0800a02c <__libc_init_array>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	4d0d      	ldr	r5, [pc, #52]	; (800a064 <__libc_init_array+0x38>)
 800a030:	4c0d      	ldr	r4, [pc, #52]	; (800a068 <__libc_init_array+0x3c>)
 800a032:	1b64      	subs	r4, r4, r5
 800a034:	10a4      	asrs	r4, r4, #2
 800a036:	2600      	movs	r6, #0
 800a038:	42a6      	cmp	r6, r4
 800a03a:	d109      	bne.n	800a050 <__libc_init_array+0x24>
 800a03c:	4d0b      	ldr	r5, [pc, #44]	; (800a06c <__libc_init_array+0x40>)
 800a03e:	4c0c      	ldr	r4, [pc, #48]	; (800a070 <__libc_init_array+0x44>)
 800a040:	f005 f8c6 	bl	800f1d0 <_init>
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	2600      	movs	r6, #0
 800a04a:	42a6      	cmp	r6, r4
 800a04c:	d105      	bne.n	800a05a <__libc_init_array+0x2e>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	f855 3b04 	ldr.w	r3, [r5], #4
 800a054:	4798      	blx	r3
 800a056:	3601      	adds	r6, #1
 800a058:	e7ee      	b.n	800a038 <__libc_init_array+0xc>
 800a05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05e:	4798      	blx	r3
 800a060:	3601      	adds	r6, #1
 800a062:	e7f2      	b.n	800a04a <__libc_init_array+0x1e>
 800a064:	0800f910 	.word	0x0800f910
 800a068:	0800f910 	.word	0x0800f910
 800a06c:	0800f910 	.word	0x0800f910
 800a070:	0800f914 	.word	0x0800f914

0800a074 <__retarget_lock_init_recursive>:
 800a074:	4770      	bx	lr

0800a076 <__retarget_lock_acquire_recursive>:
 800a076:	4770      	bx	lr

0800a078 <__retarget_lock_release_recursive>:
 800a078:	4770      	bx	lr

0800a07a <memcpy>:
 800a07a:	440a      	add	r2, r1
 800a07c:	4291      	cmp	r1, r2
 800a07e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a082:	d100      	bne.n	800a086 <memcpy+0xc>
 800a084:	4770      	bx	lr
 800a086:	b510      	push	{r4, lr}
 800a088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a08c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a090:	4291      	cmp	r1, r2
 800a092:	d1f9      	bne.n	800a088 <memcpy+0xe>
 800a094:	bd10      	pop	{r4, pc}
	...

0800a098 <nanf>:
 800a098:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0a0 <nanf+0x8>
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	7fc00000 	.word	0x7fc00000

0800a0a4 <quorem>:
 800a0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	6903      	ldr	r3, [r0, #16]
 800a0aa:	690c      	ldr	r4, [r1, #16]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	db7e      	blt.n	800a1b0 <quorem+0x10c>
 800a0b2:	3c01      	subs	r4, #1
 800a0b4:	f101 0814 	add.w	r8, r1, #20
 800a0b8:	f100 0514 	add.w	r5, r0, #20
 800a0bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0da:	d331      	bcc.n	800a140 <quorem+0x9c>
 800a0dc:	f04f 0e00 	mov.w	lr, #0
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	46ac      	mov	ip, r5
 800a0e4:	46f2      	mov	sl, lr
 800a0e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0ea:	b293      	uxth	r3, r2
 800a0ec:	fb06 e303 	mla	r3, r6, r3, lr
 800a0f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0f4:	0c1a      	lsrs	r2, r3, #16
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0fc:	f8dc a000 	ldr.w	sl, [ip]
 800a100:	fa13 f38a 	uxtah	r3, r3, sl
 800a104:	fb06 220e 	mla	r2, r6, lr, r2
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	9b00      	ldr	r3, [sp, #0]
 800a10c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a110:	b292      	uxth	r2, r2
 800a112:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a11a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a11e:	4581      	cmp	r9, r0
 800a120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a124:	f84c 3b04 	str.w	r3, [ip], #4
 800a128:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a12c:	d2db      	bcs.n	800a0e6 <quorem+0x42>
 800a12e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a132:	b92b      	cbnz	r3, 800a140 <quorem+0x9c>
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	3b04      	subs	r3, #4
 800a138:	429d      	cmp	r5, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	d32c      	bcc.n	800a198 <quorem+0xf4>
 800a13e:	613c      	str	r4, [r7, #16]
 800a140:	4638      	mov	r0, r7
 800a142:	f001 f9f1 	bl	800b528 <__mcmp>
 800a146:	2800      	cmp	r0, #0
 800a148:	db22      	blt.n	800a190 <quorem+0xec>
 800a14a:	3601      	adds	r6, #1
 800a14c:	4629      	mov	r1, r5
 800a14e:	2000      	movs	r0, #0
 800a150:	f858 2b04 	ldr.w	r2, [r8], #4
 800a154:	f8d1 c000 	ldr.w	ip, [r1]
 800a158:	b293      	uxth	r3, r2
 800a15a:	1ac3      	subs	r3, r0, r3
 800a15c:	0c12      	lsrs	r2, r2, #16
 800a15e:	fa13 f38c 	uxtah	r3, r3, ip
 800a162:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a166:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a170:	45c1      	cmp	r9, r8
 800a172:	f841 3b04 	str.w	r3, [r1], #4
 800a176:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a17a:	d2e9      	bcs.n	800a150 <quorem+0xac>
 800a17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a184:	b922      	cbnz	r2, 800a190 <quorem+0xec>
 800a186:	3b04      	subs	r3, #4
 800a188:	429d      	cmp	r5, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	d30a      	bcc.n	800a1a4 <quorem+0x100>
 800a18e:	613c      	str	r4, [r7, #16]
 800a190:	4630      	mov	r0, r6
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	3b04      	subs	r3, #4
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1ce      	bne.n	800a13e <quorem+0x9a>
 800a1a0:	3c01      	subs	r4, #1
 800a1a2:	e7c9      	b.n	800a138 <quorem+0x94>
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	3b04      	subs	r3, #4
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	d1f0      	bne.n	800a18e <quorem+0xea>
 800a1ac:	3c01      	subs	r4, #1
 800a1ae:	e7eb      	b.n	800a188 <quorem+0xe4>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7ee      	b.n	800a192 <quorem+0xee>
 800a1b4:	0000      	movs	r0, r0
	...

0800a1b8 <_dtoa_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	ed2d 8b04 	vpush	{d8-d9}
 800a1c0:	69c5      	ldr	r5, [r0, #28]
 800a1c2:	b093      	sub	sp, #76	; 0x4c
 800a1c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1c8:	ec57 6b10 	vmov	r6, r7, d0
 800a1cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1d0:	9107      	str	r1, [sp, #28]
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a1d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1d8:	b975      	cbnz	r5, 800a1f8 <_dtoa_r+0x40>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f000 fe2a 	bl	800ae34 <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	61e0      	str	r0, [r4, #28]
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_dtoa_r+0x38>
 800a1e6:	4bae      	ldr	r3, [pc, #696]	; (800a4a0 <_dtoa_r+0x2e8>)
 800a1e8:	21ef      	movs	r1, #239	; 0xef
 800a1ea:	48ae      	ldr	r0, [pc, #696]	; (800a4a4 <_dtoa_r+0x2ec>)
 800a1ec:	f003 f9d0 	bl	800d590 <__assert_func>
 800a1f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1f4:	6005      	str	r5, [r0, #0]
 800a1f6:	60c5      	str	r5, [r0, #12]
 800a1f8:	69e3      	ldr	r3, [r4, #28]
 800a1fa:	6819      	ldr	r1, [r3, #0]
 800a1fc:	b151      	cbz	r1, 800a214 <_dtoa_r+0x5c>
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	604a      	str	r2, [r1, #4]
 800a202:	2301      	movs	r3, #1
 800a204:	4093      	lsls	r3, r2
 800a206:	608b      	str	r3, [r1, #8]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 ff07 	bl	800b01c <_Bfree>
 800a20e:	69e3      	ldr	r3, [r4, #28]
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	1e3b      	subs	r3, r7, #0
 800a216:	bfbb      	ittet	lt
 800a218:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a21c:	9303      	strlt	r3, [sp, #12]
 800a21e:	2300      	movge	r3, #0
 800a220:	2201      	movlt	r2, #1
 800a222:	bfac      	ite	ge
 800a224:	f8c8 3000 	strge.w	r3, [r8]
 800a228:	f8c8 2000 	strlt.w	r2, [r8]
 800a22c:	4b9e      	ldr	r3, [pc, #632]	; (800a4a8 <_dtoa_r+0x2f0>)
 800a22e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a232:	ea33 0308 	bics.w	r3, r3, r8
 800a236:	d11b      	bne.n	800a270 <_dtoa_r+0xb8>
 800a238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a23a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a244:	4333      	orrs	r3, r6
 800a246:	f000 8593 	beq.w	800ad70 <_dtoa_r+0xbb8>
 800a24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a24c:	b963      	cbnz	r3, 800a268 <_dtoa_r+0xb0>
 800a24e:	4b97      	ldr	r3, [pc, #604]	; (800a4ac <_dtoa_r+0x2f4>)
 800a250:	e027      	b.n	800a2a2 <_dtoa_r+0xea>
 800a252:	4b97      	ldr	r3, [pc, #604]	; (800a4b0 <_dtoa_r+0x2f8>)
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	9800      	ldr	r0, [sp, #0]
 800a25e:	b013      	add	sp, #76	; 0x4c
 800a260:	ecbd 8b04 	vpop	{d8-d9}
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	4b90      	ldr	r3, [pc, #576]	; (800a4ac <_dtoa_r+0x2f4>)
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	3303      	adds	r3, #3
 800a26e:	e7f3      	b.n	800a258 <_dtoa_r+0xa0>
 800a270:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	ec51 0b17 	vmov	r0, r1, d7
 800a27a:	eeb0 8a47 	vmov.f32	s16, s14
 800a27e:	eef0 8a67 	vmov.f32	s17, s15
 800a282:	2300      	movs	r3, #0
 800a284:	f7f6 fc28 	bl	8000ad8 <__aeabi_dcmpeq>
 800a288:	4681      	mov	r9, r0
 800a28a:	b160      	cbz	r0, 800a2a6 <_dtoa_r+0xee>
 800a28c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a28e:	2301      	movs	r3, #1
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 8568 	beq.w	800ad6a <_dtoa_r+0xbb2>
 800a29a:	4b86      	ldr	r3, [pc, #536]	; (800a4b4 <_dtoa_r+0x2fc>)
 800a29c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	e7da      	b.n	800a25c <_dtoa_r+0xa4>
 800a2a6:	aa10      	add	r2, sp, #64	; 0x40
 800a2a8:	a911      	add	r1, sp, #68	; 0x44
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a2b0:	eef0 0a68 	vmov.f32	s1, s17
 800a2b4:	f001 fa4e 	bl	800b754 <__d2b>
 800a2b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a2bc:	4682      	mov	sl, r0
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	d07f      	beq.n	800a3c2 <_dtoa_r+0x20a>
 800a2c2:	ee18 3a90 	vmov	r3, s17
 800a2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2ce:	ec51 0b18 	vmov	r0, r1, d8
 800a2d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2de:	4619      	mov	r1, r3
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4b75      	ldr	r3, [pc, #468]	; (800a4b8 <_dtoa_r+0x300>)
 800a2e4:	f7f5 ffd8 	bl	8000298 <__aeabi_dsub>
 800a2e8:	a367      	add	r3, pc, #412	; (adr r3, 800a488 <_dtoa_r+0x2d0>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f6 f98b 	bl	8000608 <__aeabi_dmul>
 800a2f2:	a367      	add	r3, pc, #412	; (adr r3, 800a490 <_dtoa_r+0x2d8>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f5 ffd0 	bl	800029c <__adddf3>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	4628      	mov	r0, r5
 800a300:	460f      	mov	r7, r1
 800a302:	f7f6 f917 	bl	8000534 <__aeabi_i2d>
 800a306:	a364      	add	r3, pc, #400	; (adr r3, 800a498 <_dtoa_r+0x2e0>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f6 f97c 	bl	8000608 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4630      	mov	r0, r6
 800a316:	4639      	mov	r1, r7
 800a318:	f7f5 ffc0 	bl	800029c <__adddf3>
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	f7f6 fc22 	bl	8000b68 <__aeabi_d2iz>
 800a324:	2200      	movs	r2, #0
 800a326:	4683      	mov	fp, r0
 800a328:	2300      	movs	r3, #0
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 fbdd 	bl	8000aec <__aeabi_dcmplt>
 800a332:	b148      	cbz	r0, 800a348 <_dtoa_r+0x190>
 800a334:	4658      	mov	r0, fp
 800a336:	f7f6 f8fd 	bl	8000534 <__aeabi_i2d>
 800a33a:	4632      	mov	r2, r6
 800a33c:	463b      	mov	r3, r7
 800a33e:	f7f6 fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a342:	b908      	cbnz	r0, 800a348 <_dtoa_r+0x190>
 800a344:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a348:	f1bb 0f16 	cmp.w	fp, #22
 800a34c:	d857      	bhi.n	800a3fe <_dtoa_r+0x246>
 800a34e:	4b5b      	ldr	r3, [pc, #364]	; (800a4bc <_dtoa_r+0x304>)
 800a350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	ec51 0b18 	vmov	r0, r1, d8
 800a35c:	f7f6 fbc6 	bl	8000aec <__aeabi_dcmplt>
 800a360:	2800      	cmp	r0, #0
 800a362:	d04e      	beq.n	800a402 <_dtoa_r+0x24a>
 800a364:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a368:	2300      	movs	r3, #0
 800a36a:	930c      	str	r3, [sp, #48]	; 0x30
 800a36c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a36e:	1b5b      	subs	r3, r3, r5
 800a370:	1e5a      	subs	r2, r3, #1
 800a372:	bf45      	ittet	mi
 800a374:	f1c3 0301 	rsbmi	r3, r3, #1
 800a378:	9305      	strmi	r3, [sp, #20]
 800a37a:	2300      	movpl	r3, #0
 800a37c:	2300      	movmi	r3, #0
 800a37e:	9206      	str	r2, [sp, #24]
 800a380:	bf54      	ite	pl
 800a382:	9305      	strpl	r3, [sp, #20]
 800a384:	9306      	strmi	r3, [sp, #24]
 800a386:	f1bb 0f00 	cmp.w	fp, #0
 800a38a:	db3c      	blt.n	800a406 <_dtoa_r+0x24e>
 800a38c:	9b06      	ldr	r3, [sp, #24]
 800a38e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a392:	445b      	add	r3, fp
 800a394:	9306      	str	r3, [sp, #24]
 800a396:	2300      	movs	r3, #0
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	9b07      	ldr	r3, [sp, #28]
 800a39c:	2b09      	cmp	r3, #9
 800a39e:	d868      	bhi.n	800a472 <_dtoa_r+0x2ba>
 800a3a0:	2b05      	cmp	r3, #5
 800a3a2:	bfc4      	itt	gt
 800a3a4:	3b04      	subgt	r3, #4
 800a3a6:	9307      	strgt	r3, [sp, #28]
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	f1a3 0302 	sub.w	r3, r3, #2
 800a3ae:	bfcc      	ite	gt
 800a3b0:	2500      	movgt	r5, #0
 800a3b2:	2501      	movle	r5, #1
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	f200 8085 	bhi.w	800a4c4 <_dtoa_r+0x30c>
 800a3ba:	e8df f003 	tbb	[pc, r3]
 800a3be:	3b2e      	.short	0x3b2e
 800a3c0:	5839      	.short	0x5839
 800a3c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3c6:	441d      	add	r5, r3
 800a3c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	bfc1      	itttt	gt
 800a3d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a3dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a3e0:	bfd6      	itet	le
 800a3e2:	f1c3 0320 	rsble	r3, r3, #32
 800a3e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3ea:	fa06 f003 	lslle.w	r0, r6, r3
 800a3ee:	f7f6 f891 	bl	8000514 <__aeabi_ui2d>
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a3f8:	3d01      	subs	r5, #1
 800a3fa:	920e      	str	r2, [sp, #56]	; 0x38
 800a3fc:	e76f      	b.n	800a2de <_dtoa_r+0x126>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e7b3      	b.n	800a36a <_dtoa_r+0x1b2>
 800a402:	900c      	str	r0, [sp, #48]	; 0x30
 800a404:	e7b2      	b.n	800a36c <_dtoa_r+0x1b4>
 800a406:	9b05      	ldr	r3, [sp, #20]
 800a408:	eba3 030b 	sub.w	r3, r3, fp
 800a40c:	9305      	str	r3, [sp, #20]
 800a40e:	f1cb 0300 	rsb	r3, fp, #0
 800a412:	9308      	str	r3, [sp, #32]
 800a414:	2300      	movs	r3, #0
 800a416:	930b      	str	r3, [sp, #44]	; 0x2c
 800a418:	e7bf      	b.n	800a39a <_dtoa_r+0x1e2>
 800a41a:	2300      	movs	r3, #0
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a420:	2b00      	cmp	r3, #0
 800a422:	dc52      	bgt.n	800a4ca <_dtoa_r+0x312>
 800a424:	2301      	movs	r3, #1
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	461a      	mov	r2, r3
 800a42c:	920a      	str	r2, [sp, #40]	; 0x28
 800a42e:	e00b      	b.n	800a448 <_dtoa_r+0x290>
 800a430:	2301      	movs	r3, #1
 800a432:	e7f3      	b.n	800a41c <_dtoa_r+0x264>
 800a434:	2300      	movs	r3, #0
 800a436:	9309      	str	r3, [sp, #36]	; 0x24
 800a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43a:	445b      	add	r3, fp
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	2b01      	cmp	r3, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	bfb8      	it	lt
 800a446:	2301      	movlt	r3, #1
 800a448:	69e0      	ldr	r0, [r4, #28]
 800a44a:	2100      	movs	r1, #0
 800a44c:	2204      	movs	r2, #4
 800a44e:	f102 0614 	add.w	r6, r2, #20
 800a452:	429e      	cmp	r6, r3
 800a454:	d93d      	bls.n	800a4d2 <_dtoa_r+0x31a>
 800a456:	6041      	str	r1, [r0, #4]
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fd9f 	bl	800af9c <_Balloc>
 800a45e:	9000      	str	r0, [sp, #0]
 800a460:	2800      	cmp	r0, #0
 800a462:	d139      	bne.n	800a4d8 <_dtoa_r+0x320>
 800a464:	4b16      	ldr	r3, [pc, #88]	; (800a4c0 <_dtoa_r+0x308>)
 800a466:	4602      	mov	r2, r0
 800a468:	f240 11af 	movw	r1, #431	; 0x1af
 800a46c:	e6bd      	b.n	800a1ea <_dtoa_r+0x32>
 800a46e:	2301      	movs	r3, #1
 800a470:	e7e1      	b.n	800a436 <_dtoa_r+0x27e>
 800a472:	2501      	movs	r5, #1
 800a474:	2300      	movs	r3, #0
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	9509      	str	r5, [sp, #36]	; 0x24
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	9304      	str	r3, [sp, #16]
 800a482:	2200      	movs	r2, #0
 800a484:	2312      	movs	r3, #18
 800a486:	e7d1      	b.n	800a42c <_dtoa_r+0x274>
 800a488:	636f4361 	.word	0x636f4361
 800a48c:	3fd287a7 	.word	0x3fd287a7
 800a490:	8b60c8b3 	.word	0x8b60c8b3
 800a494:	3fc68a28 	.word	0x3fc68a28
 800a498:	509f79fb 	.word	0x509f79fb
 800a49c:	3fd34413 	.word	0x3fd34413
 800a4a0:	0800f328 	.word	0x0800f328
 800a4a4:	0800f33f 	.word	0x0800f33f
 800a4a8:	7ff00000 	.word	0x7ff00000
 800a4ac:	0800f324 	.word	0x0800f324
 800a4b0:	0800f31b 	.word	0x0800f31b
 800a4b4:	0800f681 	.word	0x0800f681
 800a4b8:	3ff80000 	.word	0x3ff80000
 800a4bc:	0800f430 	.word	0x0800f430
 800a4c0:	0800f397 	.word	0x0800f397
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c8:	e7d7      	b.n	800a47a <_dtoa_r+0x2c2>
 800a4ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	e7ba      	b.n	800a448 <_dtoa_r+0x290>
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	0052      	lsls	r2, r2, #1
 800a4d6:	e7ba      	b.n	800a44e <_dtoa_r+0x296>
 800a4d8:	69e3      	ldr	r3, [r4, #28]
 800a4da:	9a00      	ldr	r2, [sp, #0]
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	9b04      	ldr	r3, [sp, #16]
 800a4e0:	2b0e      	cmp	r3, #14
 800a4e2:	f200 80a8 	bhi.w	800a636 <_dtoa_r+0x47e>
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	f000 80a5 	beq.w	800a636 <_dtoa_r+0x47e>
 800a4ec:	f1bb 0f00 	cmp.w	fp, #0
 800a4f0:	dd38      	ble.n	800a564 <_dtoa_r+0x3ac>
 800a4f2:	4bc0      	ldr	r3, [pc, #768]	; (800a7f4 <_dtoa_r+0x63c>)
 800a4f4:	f00b 020f 	and.w	r2, fp, #15
 800a4f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a500:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a504:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a508:	d019      	beq.n	800a53e <_dtoa_r+0x386>
 800a50a:	4bbb      	ldr	r3, [pc, #748]	; (800a7f8 <_dtoa_r+0x640>)
 800a50c:	ec51 0b18 	vmov	r0, r1, d8
 800a510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a514:	f7f6 f9a2 	bl	800085c <__aeabi_ddiv>
 800a518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51c:	f008 080f 	and.w	r8, r8, #15
 800a520:	2503      	movs	r5, #3
 800a522:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a7f8 <_dtoa_r+0x640>
 800a526:	f1b8 0f00 	cmp.w	r8, #0
 800a52a:	d10a      	bne.n	800a542 <_dtoa_r+0x38a>
 800a52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	f7f6 f992 	bl	800085c <__aeabi_ddiv>
 800a538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53c:	e02b      	b.n	800a596 <_dtoa_r+0x3de>
 800a53e:	2502      	movs	r5, #2
 800a540:	e7ef      	b.n	800a522 <_dtoa_r+0x36a>
 800a542:	f018 0f01 	tst.w	r8, #1
 800a546:	d008      	beq.n	800a55a <_dtoa_r+0x3a2>
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a550:	f7f6 f85a 	bl	8000608 <__aeabi_dmul>
 800a554:	3501      	adds	r5, #1
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a55e:	f109 0908 	add.w	r9, r9, #8
 800a562:	e7e0      	b.n	800a526 <_dtoa_r+0x36e>
 800a564:	f000 809f 	beq.w	800a6a6 <_dtoa_r+0x4ee>
 800a568:	f1cb 0600 	rsb	r6, fp, #0
 800a56c:	4ba1      	ldr	r3, [pc, #644]	; (800a7f4 <_dtoa_r+0x63c>)
 800a56e:	4fa2      	ldr	r7, [pc, #648]	; (800a7f8 <_dtoa_r+0x640>)
 800a570:	f006 020f 	and.w	r2, r6, #15
 800a574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	ec51 0b18 	vmov	r0, r1, d8
 800a580:	f7f6 f842 	bl	8000608 <__aeabi_dmul>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	1136      	asrs	r6, r6, #4
 800a58a:	2300      	movs	r3, #0
 800a58c:	2502      	movs	r5, #2
 800a58e:	2e00      	cmp	r6, #0
 800a590:	d17e      	bne.n	800a690 <_dtoa_r+0x4d8>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1d0      	bne.n	800a538 <_dtoa_r+0x380>
 800a596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a598:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 8084 	beq.w	800a6aa <_dtoa_r+0x4f2>
 800a5a2:	4b96      	ldr	r3, [pc, #600]	; (800a7fc <_dtoa_r+0x644>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	f7f6 fa9f 	bl	8000aec <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d07b      	beq.n	800a6aa <_dtoa_r+0x4f2>
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d078      	beq.n	800a6aa <_dtoa_r+0x4f2>
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dd39      	ble.n	800a632 <_dtoa_r+0x47a>
 800a5be:	4b90      	ldr	r3, [pc, #576]	; (800a800 <_dtoa_r+0x648>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f6 f81f 	bl	8000608 <__aeabi_dmul>
 800a5ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ce:	9e01      	ldr	r6, [sp, #4]
 800a5d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7f5 ffaa 	bl	8000534 <__aeabi_i2d>
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	f7f6 f810 	bl	8000608 <__aeabi_dmul>
 800a5e8:	4b86      	ldr	r3, [pc, #536]	; (800a804 <_dtoa_r+0x64c>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f7f5 fe56 	bl	800029c <__adddf3>
 800a5f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f8:	9303      	str	r3, [sp, #12]
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	d158      	bne.n	800a6b0 <_dtoa_r+0x4f8>
 800a5fe:	4b82      	ldr	r3, [pc, #520]	; (800a808 <_dtoa_r+0x650>)
 800a600:	2200      	movs	r2, #0
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	f7f5 fe47 	bl	8000298 <__aeabi_dsub>
 800a60a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a60e:	4680      	mov	r8, r0
 800a610:	4689      	mov	r9, r1
 800a612:	f7f6 fa89 	bl	8000b28 <__aeabi_dcmpgt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f040 8296 	bne.w	800ab48 <_dtoa_r+0x990>
 800a61c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a620:	4640      	mov	r0, r8
 800a622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a626:	4649      	mov	r1, r9
 800a628:	f7f6 fa60 	bl	8000aec <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f040 8289 	bne.w	800ab44 <_dtoa_r+0x98c>
 800a632:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f2c0 814e 	blt.w	800a8da <_dtoa_r+0x722>
 800a63e:	f1bb 0f0e 	cmp.w	fp, #14
 800a642:	f300 814a 	bgt.w	800a8da <_dtoa_r+0x722>
 800a646:	4b6b      	ldr	r3, [pc, #428]	; (800a7f4 <_dtoa_r+0x63c>)
 800a648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a64c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	f280 80dc 	bge.w	800a810 <_dtoa_r+0x658>
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f300 80d8 	bgt.w	800a810 <_dtoa_r+0x658>
 800a660:	f040 826f 	bne.w	800ab42 <_dtoa_r+0x98a>
 800a664:	4b68      	ldr	r3, [pc, #416]	; (800a808 <_dtoa_r+0x650>)
 800a666:	2200      	movs	r2, #0
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f5 ffcc 	bl	8000608 <__aeabi_dmul>
 800a670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a674:	f7f6 fa4e 	bl	8000b14 <__aeabi_dcmpge>
 800a678:	9e04      	ldr	r6, [sp, #16]
 800a67a:	4637      	mov	r7, r6
 800a67c:	2800      	cmp	r0, #0
 800a67e:	f040 8245 	bne.w	800ab0c <_dtoa_r+0x954>
 800a682:	9d00      	ldr	r5, [sp, #0]
 800a684:	2331      	movs	r3, #49	; 0x31
 800a686:	f805 3b01 	strb.w	r3, [r5], #1
 800a68a:	f10b 0b01 	add.w	fp, fp, #1
 800a68e:	e241      	b.n	800ab14 <_dtoa_r+0x95c>
 800a690:	07f2      	lsls	r2, r6, #31
 800a692:	d505      	bpl.n	800a6a0 <_dtoa_r+0x4e8>
 800a694:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a698:	f7f5 ffb6 	bl	8000608 <__aeabi_dmul>
 800a69c:	3501      	adds	r5, #1
 800a69e:	2301      	movs	r3, #1
 800a6a0:	1076      	asrs	r6, r6, #1
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	e773      	b.n	800a58e <_dtoa_r+0x3d6>
 800a6a6:	2502      	movs	r5, #2
 800a6a8:	e775      	b.n	800a596 <_dtoa_r+0x3de>
 800a6aa:	9e04      	ldr	r6, [sp, #16]
 800a6ac:	465f      	mov	r7, fp
 800a6ae:	e792      	b.n	800a5d6 <_dtoa_r+0x41e>
 800a6b0:	9900      	ldr	r1, [sp, #0]
 800a6b2:	4b50      	ldr	r3, [pc, #320]	; (800a7f4 <_dtoa_r+0x63c>)
 800a6b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6b8:	4431      	add	r1, r6
 800a6ba:	9102      	str	r1, [sp, #8]
 800a6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6be:	eeb0 9a47 	vmov.f32	s18, s14
 800a6c2:	eef0 9a67 	vmov.f32	s19, s15
 800a6c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	d044      	beq.n	800a75c <_dtoa_r+0x5a4>
 800a6d2:	494e      	ldr	r1, [pc, #312]	; (800a80c <_dtoa_r+0x654>)
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f7f6 f8c1 	bl	800085c <__aeabi_ddiv>
 800a6da:	ec53 2b19 	vmov	r2, r3, d9
 800a6de:	f7f5 fddb 	bl	8000298 <__aeabi_dsub>
 800a6e2:	9d00      	ldr	r5, [sp, #0]
 800a6e4:	ec41 0b19 	vmov	d9, r0, r1
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	f7f6 fa3c 	bl	8000b68 <__aeabi_d2iz>
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	f7f5 ff1f 	bl	8000534 <__aeabi_i2d>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 fdcb 	bl	8000298 <__aeabi_dsub>
 800a702:	3630      	adds	r6, #48	; 0x30
 800a704:	f805 6b01 	strb.w	r6, [r5], #1
 800a708:	ec53 2b19 	vmov	r2, r3, d9
 800a70c:	4680      	mov	r8, r0
 800a70e:	4689      	mov	r9, r1
 800a710:	f7f6 f9ec 	bl	8000aec <__aeabi_dcmplt>
 800a714:	2800      	cmp	r0, #0
 800a716:	d164      	bne.n	800a7e2 <_dtoa_r+0x62a>
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	4937      	ldr	r1, [pc, #220]	; (800a7fc <_dtoa_r+0x644>)
 800a71e:	2000      	movs	r0, #0
 800a720:	f7f5 fdba 	bl	8000298 <__aeabi_dsub>
 800a724:	ec53 2b19 	vmov	r2, r3, d9
 800a728:	f7f6 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f040 80b6 	bne.w	800a89e <_dtoa_r+0x6e6>
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	429d      	cmp	r5, r3
 800a736:	f43f af7c 	beq.w	800a632 <_dtoa_r+0x47a>
 800a73a:	4b31      	ldr	r3, [pc, #196]	; (800a800 <_dtoa_r+0x648>)
 800a73c:	ec51 0b19 	vmov	r0, r1, d9
 800a740:	2200      	movs	r2, #0
 800a742:	f7f5 ff61 	bl	8000608 <__aeabi_dmul>
 800a746:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <_dtoa_r+0x648>)
 800a748:	ec41 0b19 	vmov	d9, r0, r1
 800a74c:	2200      	movs	r2, #0
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	4680      	mov	r8, r0
 800a758:	4689      	mov	r9, r1
 800a75a:	e7c5      	b.n	800a6e8 <_dtoa_r+0x530>
 800a75c:	ec51 0b17 	vmov	r0, r1, d7
 800a760:	f7f5 ff52 	bl	8000608 <__aeabi_dmul>
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	9d00      	ldr	r5, [sp, #0]
 800a768:	930f      	str	r3, [sp, #60]	; 0x3c
 800a76a:	ec41 0b19 	vmov	d9, r0, r1
 800a76e:	4649      	mov	r1, r9
 800a770:	4640      	mov	r0, r8
 800a772:	f7f6 f9f9 	bl	8000b68 <__aeabi_d2iz>
 800a776:	4606      	mov	r6, r0
 800a778:	f7f5 fedc 	bl	8000534 <__aeabi_i2d>
 800a77c:	3630      	adds	r6, #48	; 0x30
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fd87 	bl	8000298 <__aeabi_dsub>
 800a78a:	f805 6b01 	strb.w	r6, [r5], #1
 800a78e:	9b02      	ldr	r3, [sp, #8]
 800a790:	429d      	cmp	r5, r3
 800a792:	4680      	mov	r8, r0
 800a794:	4689      	mov	r9, r1
 800a796:	f04f 0200 	mov.w	r2, #0
 800a79a:	d124      	bne.n	800a7e6 <_dtoa_r+0x62e>
 800a79c:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <_dtoa_r+0x654>)
 800a79e:	ec51 0b19 	vmov	r0, r1, d9
 800a7a2:	f7f5 fd7b 	bl	800029c <__adddf3>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f6 f9bb 	bl	8000b28 <__aeabi_dcmpgt>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d173      	bne.n	800a89e <_dtoa_r+0x6e6>
 800a7b6:	ec53 2b19 	vmov	r2, r3, d9
 800a7ba:	4914      	ldr	r1, [pc, #80]	; (800a80c <_dtoa_r+0x654>)
 800a7bc:	2000      	movs	r0, #0
 800a7be:	f7f5 fd6b 	bl	8000298 <__aeabi_dsub>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f6 f98f 	bl	8000aec <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f43f af2f 	beq.w	800a632 <_dtoa_r+0x47a>
 800a7d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7d6:	1e6b      	subs	r3, r5, #1
 800a7d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7de:	2b30      	cmp	r3, #48	; 0x30
 800a7e0:	d0f8      	beq.n	800a7d4 <_dtoa_r+0x61c>
 800a7e2:	46bb      	mov	fp, r7
 800a7e4:	e04a      	b.n	800a87c <_dtoa_r+0x6c4>
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <_dtoa_r+0x648>)
 800a7e8:	f7f5 ff0e 	bl	8000608 <__aeabi_dmul>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	e7bd      	b.n	800a76e <_dtoa_r+0x5b6>
 800a7f2:	bf00      	nop
 800a7f4:	0800f430 	.word	0x0800f430
 800a7f8:	0800f408 	.word	0x0800f408
 800a7fc:	3ff00000 	.word	0x3ff00000
 800a800:	40240000 	.word	0x40240000
 800a804:	401c0000 	.word	0x401c0000
 800a808:	40140000 	.word	0x40140000
 800a80c:	3fe00000 	.word	0x3fe00000
 800a810:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a814:	9d00      	ldr	r5, [sp, #0]
 800a816:	4642      	mov	r2, r8
 800a818:	464b      	mov	r3, r9
 800a81a:	4630      	mov	r0, r6
 800a81c:	4639      	mov	r1, r7
 800a81e:	f7f6 f81d 	bl	800085c <__aeabi_ddiv>
 800a822:	f7f6 f9a1 	bl	8000b68 <__aeabi_d2iz>
 800a826:	9001      	str	r0, [sp, #4]
 800a828:	f7f5 fe84 	bl	8000534 <__aeabi_i2d>
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	f7f5 feea 	bl	8000608 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 fd2c 	bl	8000298 <__aeabi_dsub>
 800a840:	9e01      	ldr	r6, [sp, #4]
 800a842:	9f04      	ldr	r7, [sp, #16]
 800a844:	3630      	adds	r6, #48	; 0x30
 800a846:	f805 6b01 	strb.w	r6, [r5], #1
 800a84a:	9e00      	ldr	r6, [sp, #0]
 800a84c:	1bae      	subs	r6, r5, r6
 800a84e:	42b7      	cmp	r7, r6
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	d134      	bne.n	800a8c0 <_dtoa_r+0x708>
 800a856:	f7f5 fd21 	bl	800029c <__adddf3>
 800a85a:	4642      	mov	r2, r8
 800a85c:	464b      	mov	r3, r9
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	f7f6 f961 	bl	8000b28 <__aeabi_dcmpgt>
 800a866:	b9c8      	cbnz	r0, 800a89c <_dtoa_r+0x6e4>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f6 f932 	bl	8000ad8 <__aeabi_dcmpeq>
 800a874:	b110      	cbz	r0, 800a87c <_dtoa_r+0x6c4>
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	07db      	lsls	r3, r3, #31
 800a87a:	d40f      	bmi.n	800a89c <_dtoa_r+0x6e4>
 800a87c:	4651      	mov	r1, sl
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 fbcc 	bl	800b01c <_Bfree>
 800a884:	2300      	movs	r3, #0
 800a886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a888:	702b      	strb	r3, [r5, #0]
 800a88a:	f10b 0301 	add.w	r3, fp, #1
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a892:	2b00      	cmp	r3, #0
 800a894:	f43f ace2 	beq.w	800a25c <_dtoa_r+0xa4>
 800a898:	601d      	str	r5, [r3, #0]
 800a89a:	e4df      	b.n	800a25c <_dtoa_r+0xa4>
 800a89c:	465f      	mov	r7, fp
 800a89e:	462b      	mov	r3, r5
 800a8a0:	461d      	mov	r5, r3
 800a8a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8a6:	2a39      	cmp	r2, #57	; 0x39
 800a8a8:	d106      	bne.n	800a8b8 <_dtoa_r+0x700>
 800a8aa:	9a00      	ldr	r2, [sp, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d1f7      	bne.n	800a8a0 <_dtoa_r+0x6e8>
 800a8b0:	9900      	ldr	r1, [sp, #0]
 800a8b2:	2230      	movs	r2, #48	; 0x30
 800a8b4:	3701      	adds	r7, #1
 800a8b6:	700a      	strb	r2, [r1, #0]
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	e790      	b.n	800a7e2 <_dtoa_r+0x62a>
 800a8c0:	4ba3      	ldr	r3, [pc, #652]	; (800ab50 <_dtoa_r+0x998>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f7f5 fea0 	bl	8000608 <__aeabi_dmul>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	f7f6 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d09e      	beq.n	800a816 <_dtoa_r+0x65e>
 800a8d8:	e7d0      	b.n	800a87c <_dtoa_r+0x6c4>
 800a8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	f000 80ca 	beq.w	800aa76 <_dtoa_r+0x8be>
 800a8e2:	9a07      	ldr	r2, [sp, #28]
 800a8e4:	2a01      	cmp	r2, #1
 800a8e6:	f300 80ad 	bgt.w	800aa44 <_dtoa_r+0x88c>
 800a8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f000 80a5 	beq.w	800aa3c <_dtoa_r+0x884>
 800a8f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8f6:	9e08      	ldr	r6, [sp, #32]
 800a8f8:	9d05      	ldr	r5, [sp, #20]
 800a8fa:	9a05      	ldr	r2, [sp, #20]
 800a8fc:	441a      	add	r2, r3
 800a8fe:	9205      	str	r2, [sp, #20]
 800a900:	9a06      	ldr	r2, [sp, #24]
 800a902:	2101      	movs	r1, #1
 800a904:	441a      	add	r2, r3
 800a906:	4620      	mov	r0, r4
 800a908:	9206      	str	r2, [sp, #24]
 800a90a:	f000 fc87 	bl	800b21c <__i2b>
 800a90e:	4607      	mov	r7, r0
 800a910:	b165      	cbz	r5, 800a92c <_dtoa_r+0x774>
 800a912:	9b06      	ldr	r3, [sp, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd09      	ble.n	800a92c <_dtoa_r+0x774>
 800a918:	42ab      	cmp	r3, r5
 800a91a:	9a05      	ldr	r2, [sp, #20]
 800a91c:	bfa8      	it	ge
 800a91e:	462b      	movge	r3, r5
 800a920:	1ad2      	subs	r2, r2, r3
 800a922:	9205      	str	r2, [sp, #20]
 800a924:	9a06      	ldr	r2, [sp, #24]
 800a926:	1aed      	subs	r5, r5, r3
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	9306      	str	r3, [sp, #24]
 800a92c:	9b08      	ldr	r3, [sp, #32]
 800a92e:	b1f3      	cbz	r3, 800a96e <_dtoa_r+0x7b6>
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 80a3 	beq.w	800aa7e <_dtoa_r+0x8c6>
 800a938:	2e00      	cmp	r6, #0
 800a93a:	dd10      	ble.n	800a95e <_dtoa_r+0x7a6>
 800a93c:	4639      	mov	r1, r7
 800a93e:	4632      	mov	r2, r6
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fd2b 	bl	800b39c <__pow5mult>
 800a946:	4652      	mov	r2, sl
 800a948:	4601      	mov	r1, r0
 800a94a:	4607      	mov	r7, r0
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fc7b 	bl	800b248 <__multiply>
 800a952:	4651      	mov	r1, sl
 800a954:	4680      	mov	r8, r0
 800a956:	4620      	mov	r0, r4
 800a958:	f000 fb60 	bl	800b01c <_Bfree>
 800a95c:	46c2      	mov	sl, r8
 800a95e:	9b08      	ldr	r3, [sp, #32]
 800a960:	1b9a      	subs	r2, r3, r6
 800a962:	d004      	beq.n	800a96e <_dtoa_r+0x7b6>
 800a964:	4651      	mov	r1, sl
 800a966:	4620      	mov	r0, r4
 800a968:	f000 fd18 	bl	800b39c <__pow5mult>
 800a96c:	4682      	mov	sl, r0
 800a96e:	2101      	movs	r1, #1
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fc53 	bl	800b21c <__i2b>
 800a976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a978:	2b00      	cmp	r3, #0
 800a97a:	4606      	mov	r6, r0
 800a97c:	f340 8081 	ble.w	800aa82 <_dtoa_r+0x8ca>
 800a980:	461a      	mov	r2, r3
 800a982:	4601      	mov	r1, r0
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fd09 	bl	800b39c <__pow5mult>
 800a98a:	9b07      	ldr	r3, [sp, #28]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	4606      	mov	r6, r0
 800a990:	dd7a      	ble.n	800aa88 <_dtoa_r+0x8d0>
 800a992:	f04f 0800 	mov.w	r8, #0
 800a996:	6933      	ldr	r3, [r6, #16]
 800a998:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a99c:	6918      	ldr	r0, [r3, #16]
 800a99e:	f000 fbef 	bl	800b180 <__hi0bits>
 800a9a2:	f1c0 0020 	rsb	r0, r0, #32
 800a9a6:	9b06      	ldr	r3, [sp, #24]
 800a9a8:	4418      	add	r0, r3
 800a9aa:	f010 001f 	ands.w	r0, r0, #31
 800a9ae:	f000 8094 	beq.w	800aada <_dtoa_r+0x922>
 800a9b2:	f1c0 0320 	rsb	r3, r0, #32
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	f340 8085 	ble.w	800aac6 <_dtoa_r+0x90e>
 800a9bc:	9b05      	ldr	r3, [sp, #20]
 800a9be:	f1c0 001c 	rsb	r0, r0, #28
 800a9c2:	4403      	add	r3, r0
 800a9c4:	9305      	str	r3, [sp, #20]
 800a9c6:	9b06      	ldr	r3, [sp, #24]
 800a9c8:	4403      	add	r3, r0
 800a9ca:	4405      	add	r5, r0
 800a9cc:	9306      	str	r3, [sp, #24]
 800a9ce:	9b05      	ldr	r3, [sp, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd05      	ble.n	800a9e0 <_dtoa_r+0x828>
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 fd39 	bl	800b450 <__lshift>
 800a9de:	4682      	mov	sl, r0
 800a9e0:	9b06      	ldr	r3, [sp, #24]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	dd05      	ble.n	800a9f2 <_dtoa_r+0x83a>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fd30 	bl	800b450 <__lshift>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d072      	beq.n	800aade <_dtoa_r+0x926>
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f000 fd94 	bl	800b528 <__mcmp>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	da6c      	bge.n	800aade <_dtoa_r+0x926>
 800aa04:	2300      	movs	r3, #0
 800aa06:	4651      	mov	r1, sl
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fb28 	bl	800b060 <__multadd>
 800aa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa16:	4682      	mov	sl, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 81b0 	beq.w	800ad7e <_dtoa_r+0xbc6>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4639      	mov	r1, r7
 800aa22:	220a      	movs	r2, #10
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fb1b 	bl	800b060 <__multadd>
 800aa2a:	9b01      	ldr	r3, [sp, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	4607      	mov	r7, r0
 800aa30:	f300 8096 	bgt.w	800ab60 <_dtoa_r+0x9a8>
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	dc59      	bgt.n	800aaee <_dtoa_r+0x936>
 800aa3a:	e091      	b.n	800ab60 <_dtoa_r+0x9a8>
 800aa3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa42:	e758      	b.n	800a8f6 <_dtoa_r+0x73e>
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	1e5e      	subs	r6, r3, #1
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	42b3      	cmp	r3, r6
 800aa4c:	bfbf      	itttt	lt
 800aa4e:	9b08      	ldrlt	r3, [sp, #32]
 800aa50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa52:	9608      	strlt	r6, [sp, #32]
 800aa54:	1af3      	sublt	r3, r6, r3
 800aa56:	bfb4      	ite	lt
 800aa58:	18d2      	addlt	r2, r2, r3
 800aa5a:	1b9e      	subge	r6, r3, r6
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	bfbc      	itt	lt
 800aa60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa62:	2600      	movlt	r6, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bfb7      	itett	lt
 800aa68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa70:	1a9d      	sublt	r5, r3, r2
 800aa72:	2300      	movlt	r3, #0
 800aa74:	e741      	b.n	800a8fa <_dtoa_r+0x742>
 800aa76:	9e08      	ldr	r6, [sp, #32]
 800aa78:	9d05      	ldr	r5, [sp, #20]
 800aa7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa7c:	e748      	b.n	800a910 <_dtoa_r+0x758>
 800aa7e:	9a08      	ldr	r2, [sp, #32]
 800aa80:	e770      	b.n	800a964 <_dtoa_r+0x7ac>
 800aa82:	9b07      	ldr	r3, [sp, #28]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	dc19      	bgt.n	800aabc <_dtoa_r+0x904>
 800aa88:	9b02      	ldr	r3, [sp, #8]
 800aa8a:	b9bb      	cbnz	r3, 800aabc <_dtoa_r+0x904>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa92:	b99b      	cbnz	r3, 800aabc <_dtoa_r+0x904>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa9a:	0d1b      	lsrs	r3, r3, #20
 800aa9c:	051b      	lsls	r3, r3, #20
 800aa9e:	b183      	cbz	r3, 800aac2 <_dtoa_r+0x90a>
 800aaa0:	9b05      	ldr	r3, [sp, #20]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	9305      	str	r3, [sp, #20]
 800aaa6:	9b06      	ldr	r3, [sp, #24]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	9306      	str	r3, [sp, #24]
 800aaac:	f04f 0801 	mov.w	r8, #1
 800aab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f47f af6f 	bne.w	800a996 <_dtoa_r+0x7de>
 800aab8:	2001      	movs	r0, #1
 800aaba:	e774      	b.n	800a9a6 <_dtoa_r+0x7ee>
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	e7f6      	b.n	800aab0 <_dtoa_r+0x8f8>
 800aac2:	4698      	mov	r8, r3
 800aac4:	e7f4      	b.n	800aab0 <_dtoa_r+0x8f8>
 800aac6:	d082      	beq.n	800a9ce <_dtoa_r+0x816>
 800aac8:	9a05      	ldr	r2, [sp, #20]
 800aaca:	331c      	adds	r3, #28
 800aacc:	441a      	add	r2, r3
 800aace:	9205      	str	r2, [sp, #20]
 800aad0:	9a06      	ldr	r2, [sp, #24]
 800aad2:	441a      	add	r2, r3
 800aad4:	441d      	add	r5, r3
 800aad6:	9206      	str	r2, [sp, #24]
 800aad8:	e779      	b.n	800a9ce <_dtoa_r+0x816>
 800aada:	4603      	mov	r3, r0
 800aadc:	e7f4      	b.n	800aac8 <_dtoa_r+0x910>
 800aade:	9b04      	ldr	r3, [sp, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dc37      	bgt.n	800ab54 <_dtoa_r+0x99c>
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	dd34      	ble.n	800ab54 <_dtoa_r+0x99c>
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	b963      	cbnz	r3, 800ab0c <_dtoa_r+0x954>
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	2205      	movs	r2, #5
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 fab2 	bl	800b060 <__multadd>
 800aafc:	4601      	mov	r1, r0
 800aafe:	4606      	mov	r6, r0
 800ab00:	4650      	mov	r0, sl
 800ab02:	f000 fd11 	bl	800b528 <__mcmp>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f73f adbb 	bgt.w	800a682 <_dtoa_r+0x4ca>
 800ab0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab0e:	9d00      	ldr	r5, [sp, #0]
 800ab10:	ea6f 0b03 	mvn.w	fp, r3
 800ab14:	f04f 0800 	mov.w	r8, #0
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fa7e 	bl	800b01c <_Bfree>
 800ab20:	2f00      	cmp	r7, #0
 800ab22:	f43f aeab 	beq.w	800a87c <_dtoa_r+0x6c4>
 800ab26:	f1b8 0f00 	cmp.w	r8, #0
 800ab2a:	d005      	beq.n	800ab38 <_dtoa_r+0x980>
 800ab2c:	45b8      	cmp	r8, r7
 800ab2e:	d003      	beq.n	800ab38 <_dtoa_r+0x980>
 800ab30:	4641      	mov	r1, r8
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fa72 	bl	800b01c <_Bfree>
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fa6e 	bl	800b01c <_Bfree>
 800ab40:	e69c      	b.n	800a87c <_dtoa_r+0x6c4>
 800ab42:	2600      	movs	r6, #0
 800ab44:	4637      	mov	r7, r6
 800ab46:	e7e1      	b.n	800ab0c <_dtoa_r+0x954>
 800ab48:	46bb      	mov	fp, r7
 800ab4a:	4637      	mov	r7, r6
 800ab4c:	e599      	b.n	800a682 <_dtoa_r+0x4ca>
 800ab4e:	bf00      	nop
 800ab50:	40240000 	.word	0x40240000
 800ab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 80c8 	beq.w	800acec <_dtoa_r+0xb34>
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	dd05      	ble.n	800ab70 <_dtoa_r+0x9b8>
 800ab64:	4639      	mov	r1, r7
 800ab66:	462a      	mov	r2, r5
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fc71 	bl	800b450 <__lshift>
 800ab6e:	4607      	mov	r7, r0
 800ab70:	f1b8 0f00 	cmp.w	r8, #0
 800ab74:	d05b      	beq.n	800ac2e <_dtoa_r+0xa76>
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fa0f 	bl	800af9c <_Balloc>
 800ab7e:	4605      	mov	r5, r0
 800ab80:	b928      	cbnz	r0, 800ab8e <_dtoa_r+0x9d6>
 800ab82:	4b83      	ldr	r3, [pc, #524]	; (800ad90 <_dtoa_r+0xbd8>)
 800ab84:	4602      	mov	r2, r0
 800ab86:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab8a:	f7ff bb2e 	b.w	800a1ea <_dtoa_r+0x32>
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	3202      	adds	r2, #2
 800ab92:	0092      	lsls	r2, r2, #2
 800ab94:	f107 010c 	add.w	r1, r7, #12
 800ab98:	300c      	adds	r0, #12
 800ab9a:	f7ff fa6e 	bl	800a07a <memcpy>
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4629      	mov	r1, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 fc54 	bl	800b450 <__lshift>
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	3301      	adds	r3, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb2:	4413      	add	r3, r2
 800abb4:	9308      	str	r3, [sp, #32]
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	46b8      	mov	r8, r7
 800abbe:	9306      	str	r3, [sp, #24]
 800abc0:	4607      	mov	r7, r0
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	4631      	mov	r1, r6
 800abc6:	3b01      	subs	r3, #1
 800abc8:	4650      	mov	r0, sl
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f7ff fa6a 	bl	800a0a4 <quorem>
 800abd0:	4641      	mov	r1, r8
 800abd2:	9002      	str	r0, [sp, #8]
 800abd4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abd8:	4650      	mov	r0, sl
 800abda:	f000 fca5 	bl	800b528 <__mcmp>
 800abde:	463a      	mov	r2, r7
 800abe0:	9005      	str	r0, [sp, #20]
 800abe2:	4631      	mov	r1, r6
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fcbb 	bl	800b560 <__mdiff>
 800abea:	68c2      	ldr	r2, [r0, #12]
 800abec:	4605      	mov	r5, r0
 800abee:	bb02      	cbnz	r2, 800ac32 <_dtoa_r+0xa7a>
 800abf0:	4601      	mov	r1, r0
 800abf2:	4650      	mov	r0, sl
 800abf4:	f000 fc98 	bl	800b528 <__mcmp>
 800abf8:	4602      	mov	r2, r0
 800abfa:	4629      	mov	r1, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	9209      	str	r2, [sp, #36]	; 0x24
 800ac00:	f000 fa0c 	bl	800b01c <_Bfree>
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac08:	9d04      	ldr	r5, [sp, #16]
 800ac0a:	ea43 0102 	orr.w	r1, r3, r2
 800ac0e:	9b06      	ldr	r3, [sp, #24]
 800ac10:	4319      	orrs	r1, r3
 800ac12:	d110      	bne.n	800ac36 <_dtoa_r+0xa7e>
 800ac14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac18:	d029      	beq.n	800ac6e <_dtoa_r+0xab6>
 800ac1a:	9b05      	ldr	r3, [sp, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd02      	ble.n	800ac26 <_dtoa_r+0xa6e>
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	f883 9000 	strb.w	r9, [r3]
 800ac2c:	e774      	b.n	800ab18 <_dtoa_r+0x960>
 800ac2e:	4638      	mov	r0, r7
 800ac30:	e7ba      	b.n	800aba8 <_dtoa_r+0x9f0>
 800ac32:	2201      	movs	r2, #1
 800ac34:	e7e1      	b.n	800abfa <_dtoa_r+0xa42>
 800ac36:	9b05      	ldr	r3, [sp, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	db04      	blt.n	800ac46 <_dtoa_r+0xa8e>
 800ac3c:	9907      	ldr	r1, [sp, #28]
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	9906      	ldr	r1, [sp, #24]
 800ac42:	430b      	orrs	r3, r1
 800ac44:	d120      	bne.n	800ac88 <_dtoa_r+0xad0>
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	dded      	ble.n	800ac26 <_dtoa_r+0xa6e>
 800ac4a:	4651      	mov	r1, sl
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fbfe 	bl	800b450 <__lshift>
 800ac54:	4631      	mov	r1, r6
 800ac56:	4682      	mov	sl, r0
 800ac58:	f000 fc66 	bl	800b528 <__mcmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	dc03      	bgt.n	800ac68 <_dtoa_r+0xab0>
 800ac60:	d1e1      	bne.n	800ac26 <_dtoa_r+0xa6e>
 800ac62:	f019 0f01 	tst.w	r9, #1
 800ac66:	d0de      	beq.n	800ac26 <_dtoa_r+0xa6e>
 800ac68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac6c:	d1d8      	bne.n	800ac20 <_dtoa_r+0xa68>
 800ac6e:	9a01      	ldr	r2, [sp, #4]
 800ac70:	2339      	movs	r3, #57	; 0x39
 800ac72:	7013      	strb	r3, [r2, #0]
 800ac74:	462b      	mov	r3, r5
 800ac76:	461d      	mov	r5, r3
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac7e:	2a39      	cmp	r2, #57	; 0x39
 800ac80:	d06c      	beq.n	800ad5c <_dtoa_r+0xba4>
 800ac82:	3201      	adds	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e747      	b.n	800ab18 <_dtoa_r+0x960>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	dd07      	ble.n	800ac9c <_dtoa_r+0xae4>
 800ac8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac90:	d0ed      	beq.n	800ac6e <_dtoa_r+0xab6>
 800ac92:	9a01      	ldr	r2, [sp, #4]
 800ac94:	f109 0301 	add.w	r3, r9, #1
 800ac98:	7013      	strb	r3, [r2, #0]
 800ac9a:	e73d      	b.n	800ab18 <_dtoa_r+0x960>
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	9a08      	ldr	r2, [sp, #32]
 800aca0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d043      	beq.n	800ad30 <_dtoa_r+0xb78>
 800aca8:	4651      	mov	r1, sl
 800acaa:	2300      	movs	r3, #0
 800acac:	220a      	movs	r2, #10
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f9d6 	bl	800b060 <__multadd>
 800acb4:	45b8      	cmp	r8, r7
 800acb6:	4682      	mov	sl, r0
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	f04f 020a 	mov.w	r2, #10
 800acc0:	4641      	mov	r1, r8
 800acc2:	4620      	mov	r0, r4
 800acc4:	d107      	bne.n	800acd6 <_dtoa_r+0xb1e>
 800acc6:	f000 f9cb 	bl	800b060 <__multadd>
 800acca:	4680      	mov	r8, r0
 800accc:	4607      	mov	r7, r0
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	e775      	b.n	800abc2 <_dtoa_r+0xa0a>
 800acd6:	f000 f9c3 	bl	800b060 <__multadd>
 800acda:	4639      	mov	r1, r7
 800acdc:	4680      	mov	r8, r0
 800acde:	2300      	movs	r3, #0
 800ace0:	220a      	movs	r2, #10
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f9bc 	bl	800b060 <__multadd>
 800ace8:	4607      	mov	r7, r0
 800acea:	e7f0      	b.n	800acce <_dtoa_r+0xb16>
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	9d00      	ldr	r5, [sp, #0]
 800acf2:	4631      	mov	r1, r6
 800acf4:	4650      	mov	r0, sl
 800acf6:	f7ff f9d5 	bl	800a0a4 <quorem>
 800acfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acfe:	9b00      	ldr	r3, [sp, #0]
 800ad00:	f805 9b01 	strb.w	r9, [r5], #1
 800ad04:	1aea      	subs	r2, r5, r3
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	dd07      	ble.n	800ad1c <_dtoa_r+0xb64>
 800ad0c:	4651      	mov	r1, sl
 800ad0e:	2300      	movs	r3, #0
 800ad10:	220a      	movs	r2, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f9a4 	bl	800b060 <__multadd>
 800ad18:	4682      	mov	sl, r0
 800ad1a:	e7ea      	b.n	800acf2 <_dtoa_r+0xb3a>
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bfc8      	it	gt
 800ad22:	461d      	movgt	r5, r3
 800ad24:	9b00      	ldr	r3, [sp, #0]
 800ad26:	bfd8      	it	le
 800ad28:	2501      	movle	r5, #1
 800ad2a:	441d      	add	r5, r3
 800ad2c:	f04f 0800 	mov.w	r8, #0
 800ad30:	4651      	mov	r1, sl
 800ad32:	2201      	movs	r2, #1
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 fb8b 	bl	800b450 <__lshift>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	f000 fbf3 	bl	800b528 <__mcmp>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	dc96      	bgt.n	800ac74 <_dtoa_r+0xabc>
 800ad46:	d102      	bne.n	800ad4e <_dtoa_r+0xb96>
 800ad48:	f019 0f01 	tst.w	r9, #1
 800ad4c:	d192      	bne.n	800ac74 <_dtoa_r+0xabc>
 800ad4e:	462b      	mov	r3, r5
 800ad50:	461d      	mov	r5, r3
 800ad52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad56:	2a30      	cmp	r2, #48	; 0x30
 800ad58:	d0fa      	beq.n	800ad50 <_dtoa_r+0xb98>
 800ad5a:	e6dd      	b.n	800ab18 <_dtoa_r+0x960>
 800ad5c:	9a00      	ldr	r2, [sp, #0]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d189      	bne.n	800ac76 <_dtoa_r+0xabe>
 800ad62:	f10b 0b01 	add.w	fp, fp, #1
 800ad66:	2331      	movs	r3, #49	; 0x31
 800ad68:	e796      	b.n	800ac98 <_dtoa_r+0xae0>
 800ad6a:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <_dtoa_r+0xbdc>)
 800ad6c:	f7ff ba99 	b.w	800a2a2 <_dtoa_r+0xea>
 800ad70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f47f aa6d 	bne.w	800a252 <_dtoa_r+0x9a>
 800ad78:	4b07      	ldr	r3, [pc, #28]	; (800ad98 <_dtoa_r+0xbe0>)
 800ad7a:	f7ff ba92 	b.w	800a2a2 <_dtoa_r+0xea>
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	dcb5      	bgt.n	800acf0 <_dtoa_r+0xb38>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	f73f aeb1 	bgt.w	800aaee <_dtoa_r+0x936>
 800ad8c:	e7b0      	b.n	800acf0 <_dtoa_r+0xb38>
 800ad8e:	bf00      	nop
 800ad90:	0800f397 	.word	0x0800f397
 800ad94:	0800f680 	.word	0x0800f680
 800ad98:	0800f31b 	.word	0x0800f31b

0800ad9c <_free_r>:
 800ad9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d044      	beq.n	800ae2c <_free_r+0x90>
 800ada2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada6:	9001      	str	r0, [sp, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f1a1 0404 	sub.w	r4, r1, #4
 800adae:	bfb8      	it	lt
 800adb0:	18e4      	addlt	r4, r4, r3
 800adb2:	f000 f8e7 	bl	800af84 <__malloc_lock>
 800adb6:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <_free_r+0x94>)
 800adb8:	9801      	ldr	r0, [sp, #4]
 800adba:	6813      	ldr	r3, [r2, #0]
 800adbc:	b933      	cbnz	r3, 800adcc <_free_r+0x30>
 800adbe:	6063      	str	r3, [r4, #4]
 800adc0:	6014      	str	r4, [r2, #0]
 800adc2:	b003      	add	sp, #12
 800adc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc8:	f000 b8e2 	b.w	800af90 <__malloc_unlock>
 800adcc:	42a3      	cmp	r3, r4
 800adce:	d908      	bls.n	800ade2 <_free_r+0x46>
 800add0:	6825      	ldr	r5, [r4, #0]
 800add2:	1961      	adds	r1, r4, r5
 800add4:	428b      	cmp	r3, r1
 800add6:	bf01      	itttt	eq
 800add8:	6819      	ldreq	r1, [r3, #0]
 800adda:	685b      	ldreq	r3, [r3, #4]
 800addc:	1949      	addeq	r1, r1, r5
 800adde:	6021      	streq	r1, [r4, #0]
 800ade0:	e7ed      	b.n	800adbe <_free_r+0x22>
 800ade2:	461a      	mov	r2, r3
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	b10b      	cbz	r3, 800adec <_free_r+0x50>
 800ade8:	42a3      	cmp	r3, r4
 800adea:	d9fa      	bls.n	800ade2 <_free_r+0x46>
 800adec:	6811      	ldr	r1, [r2, #0]
 800adee:	1855      	adds	r5, r2, r1
 800adf0:	42a5      	cmp	r5, r4
 800adf2:	d10b      	bne.n	800ae0c <_free_r+0x70>
 800adf4:	6824      	ldr	r4, [r4, #0]
 800adf6:	4421      	add	r1, r4
 800adf8:	1854      	adds	r4, r2, r1
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	6011      	str	r1, [r2, #0]
 800adfe:	d1e0      	bne.n	800adc2 <_free_r+0x26>
 800ae00:	681c      	ldr	r4, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	6053      	str	r3, [r2, #4]
 800ae06:	440c      	add	r4, r1
 800ae08:	6014      	str	r4, [r2, #0]
 800ae0a:	e7da      	b.n	800adc2 <_free_r+0x26>
 800ae0c:	d902      	bls.n	800ae14 <_free_r+0x78>
 800ae0e:	230c      	movs	r3, #12
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	e7d6      	b.n	800adc2 <_free_r+0x26>
 800ae14:	6825      	ldr	r5, [r4, #0]
 800ae16:	1961      	adds	r1, r4, r5
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	bf04      	itt	eq
 800ae1c:	6819      	ldreq	r1, [r3, #0]
 800ae1e:	685b      	ldreq	r3, [r3, #4]
 800ae20:	6063      	str	r3, [r4, #4]
 800ae22:	bf04      	itt	eq
 800ae24:	1949      	addeq	r1, r1, r5
 800ae26:	6021      	streq	r1, [r4, #0]
 800ae28:	6054      	str	r4, [r2, #4]
 800ae2a:	e7ca      	b.n	800adc2 <_free_r+0x26>
 800ae2c:	b003      	add	sp, #12
 800ae2e:	bd30      	pop	{r4, r5, pc}
 800ae30:	2000592c 	.word	0x2000592c

0800ae34 <malloc>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <malloc+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f000 b823 	b.w	800ae84 <_malloc_r>
 800ae3e:	bf00      	nop
 800ae40:	200000e8 	.word	0x200000e8

0800ae44 <sbrk_aligned>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	4e0e      	ldr	r6, [pc, #56]	; (800ae80 <sbrk_aligned+0x3c>)
 800ae48:	460c      	mov	r4, r1
 800ae4a:	6831      	ldr	r1, [r6, #0]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	b911      	cbnz	r1, 800ae56 <sbrk_aligned+0x12>
 800ae50:	f002 fb86 	bl	800d560 <_sbrk_r>
 800ae54:	6030      	str	r0, [r6, #0]
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f002 fb81 	bl	800d560 <_sbrk_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d00a      	beq.n	800ae78 <sbrk_aligned+0x34>
 800ae62:	1cc4      	adds	r4, r0, #3
 800ae64:	f024 0403 	bic.w	r4, r4, #3
 800ae68:	42a0      	cmp	r0, r4
 800ae6a:	d007      	beq.n	800ae7c <sbrk_aligned+0x38>
 800ae6c:	1a21      	subs	r1, r4, r0
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f002 fb76 	bl	800d560 <_sbrk_r>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d101      	bne.n	800ae7c <sbrk_aligned+0x38>
 800ae78:	f04f 34ff 	mov.w	r4, #4294967295
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	20005930 	.word	0x20005930

0800ae84 <_malloc_r>:
 800ae84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae88:	1ccd      	adds	r5, r1, #3
 800ae8a:	f025 0503 	bic.w	r5, r5, #3
 800ae8e:	3508      	adds	r5, #8
 800ae90:	2d0c      	cmp	r5, #12
 800ae92:	bf38      	it	cc
 800ae94:	250c      	movcc	r5, #12
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	4607      	mov	r7, r0
 800ae9a:	db01      	blt.n	800aea0 <_malloc_r+0x1c>
 800ae9c:	42a9      	cmp	r1, r5
 800ae9e:	d905      	bls.n	800aeac <_malloc_r+0x28>
 800aea0:	230c      	movs	r3, #12
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	2600      	movs	r6, #0
 800aea6:	4630      	mov	r0, r6
 800aea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af80 <_malloc_r+0xfc>
 800aeb0:	f000 f868 	bl	800af84 <__malloc_lock>
 800aeb4:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb8:	461c      	mov	r4, r3
 800aeba:	bb5c      	cbnz	r4, 800af14 <_malloc_r+0x90>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4638      	mov	r0, r7
 800aec0:	f7ff ffc0 	bl	800ae44 <sbrk_aligned>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	4604      	mov	r4, r0
 800aec8:	d155      	bne.n	800af76 <_malloc_r+0xf2>
 800aeca:	f8d8 4000 	ldr.w	r4, [r8]
 800aece:	4626      	mov	r6, r4
 800aed0:	2e00      	cmp	r6, #0
 800aed2:	d145      	bne.n	800af60 <_malloc_r+0xdc>
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d048      	beq.n	800af6a <_malloc_r+0xe6>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	4631      	mov	r1, r6
 800aedc:	4638      	mov	r0, r7
 800aede:	eb04 0903 	add.w	r9, r4, r3
 800aee2:	f002 fb3d 	bl	800d560 <_sbrk_r>
 800aee6:	4581      	cmp	r9, r0
 800aee8:	d13f      	bne.n	800af6a <_malloc_r+0xe6>
 800aeea:	6821      	ldr	r1, [r4, #0]
 800aeec:	1a6d      	subs	r5, r5, r1
 800aeee:	4629      	mov	r1, r5
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff ffa7 	bl	800ae44 <sbrk_aligned>
 800aef6:	3001      	adds	r0, #1
 800aef8:	d037      	beq.n	800af6a <_malloc_r+0xe6>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	442b      	add	r3, r5
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	f8d8 3000 	ldr.w	r3, [r8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d038      	beq.n	800af7a <_malloc_r+0xf6>
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	42a2      	cmp	r2, r4
 800af0c:	d12b      	bne.n	800af66 <_malloc_r+0xe2>
 800af0e:	2200      	movs	r2, #0
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	e00f      	b.n	800af34 <_malloc_r+0xb0>
 800af14:	6822      	ldr	r2, [r4, #0]
 800af16:	1b52      	subs	r2, r2, r5
 800af18:	d41f      	bmi.n	800af5a <_malloc_r+0xd6>
 800af1a:	2a0b      	cmp	r2, #11
 800af1c:	d917      	bls.n	800af4e <_malloc_r+0xca>
 800af1e:	1961      	adds	r1, r4, r5
 800af20:	42a3      	cmp	r3, r4
 800af22:	6025      	str	r5, [r4, #0]
 800af24:	bf18      	it	ne
 800af26:	6059      	strne	r1, [r3, #4]
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	bf08      	it	eq
 800af2c:	f8c8 1000 	streq.w	r1, [r8]
 800af30:	5162      	str	r2, [r4, r5]
 800af32:	604b      	str	r3, [r1, #4]
 800af34:	4638      	mov	r0, r7
 800af36:	f104 060b 	add.w	r6, r4, #11
 800af3a:	f000 f829 	bl	800af90 <__malloc_unlock>
 800af3e:	f026 0607 	bic.w	r6, r6, #7
 800af42:	1d23      	adds	r3, r4, #4
 800af44:	1af2      	subs	r2, r6, r3
 800af46:	d0ae      	beq.n	800aea6 <_malloc_r+0x22>
 800af48:	1b9b      	subs	r3, r3, r6
 800af4a:	50a3      	str	r3, [r4, r2]
 800af4c:	e7ab      	b.n	800aea6 <_malloc_r+0x22>
 800af4e:	42a3      	cmp	r3, r4
 800af50:	6862      	ldr	r2, [r4, #4]
 800af52:	d1dd      	bne.n	800af10 <_malloc_r+0x8c>
 800af54:	f8c8 2000 	str.w	r2, [r8]
 800af58:	e7ec      	b.n	800af34 <_malloc_r+0xb0>
 800af5a:	4623      	mov	r3, r4
 800af5c:	6864      	ldr	r4, [r4, #4]
 800af5e:	e7ac      	b.n	800aeba <_malloc_r+0x36>
 800af60:	4634      	mov	r4, r6
 800af62:	6876      	ldr	r6, [r6, #4]
 800af64:	e7b4      	b.n	800aed0 <_malloc_r+0x4c>
 800af66:	4613      	mov	r3, r2
 800af68:	e7cc      	b.n	800af04 <_malloc_r+0x80>
 800af6a:	230c      	movs	r3, #12
 800af6c:	603b      	str	r3, [r7, #0]
 800af6e:	4638      	mov	r0, r7
 800af70:	f000 f80e 	bl	800af90 <__malloc_unlock>
 800af74:	e797      	b.n	800aea6 <_malloc_r+0x22>
 800af76:	6025      	str	r5, [r4, #0]
 800af78:	e7dc      	b.n	800af34 <_malloc_r+0xb0>
 800af7a:	605b      	str	r3, [r3, #4]
 800af7c:	deff      	udf	#255	; 0xff
 800af7e:	bf00      	nop
 800af80:	2000592c 	.word	0x2000592c

0800af84 <__malloc_lock>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__malloc_lock+0x8>)
 800af86:	f7ff b876 	b.w	800a076 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	20005928 	.word	0x20005928

0800af90 <__malloc_unlock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_unlock+0x8>)
 800af92:	f7ff b871 	b.w	800a078 <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	20005928 	.word	0x20005928

0800af9c <_Balloc>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	69c6      	ldr	r6, [r0, #28]
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	b976      	cbnz	r6, 800afc4 <_Balloc+0x28>
 800afa6:	2010      	movs	r0, #16
 800afa8:	f7ff ff44 	bl	800ae34 <malloc>
 800afac:	4602      	mov	r2, r0
 800afae:	61e0      	str	r0, [r4, #28]
 800afb0:	b920      	cbnz	r0, 800afbc <_Balloc+0x20>
 800afb2:	4b18      	ldr	r3, [pc, #96]	; (800b014 <_Balloc+0x78>)
 800afb4:	4818      	ldr	r0, [pc, #96]	; (800b018 <_Balloc+0x7c>)
 800afb6:	216b      	movs	r1, #107	; 0x6b
 800afb8:	f002 faea 	bl	800d590 <__assert_func>
 800afbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc0:	6006      	str	r6, [r0, #0]
 800afc2:	60c6      	str	r6, [r0, #12]
 800afc4:	69e6      	ldr	r6, [r4, #28]
 800afc6:	68f3      	ldr	r3, [r6, #12]
 800afc8:	b183      	cbz	r3, 800afec <_Balloc+0x50>
 800afca:	69e3      	ldr	r3, [r4, #28]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afd2:	b9b8      	cbnz	r0, 800b004 <_Balloc+0x68>
 800afd4:	2101      	movs	r1, #1
 800afd6:	fa01 f605 	lsl.w	r6, r1, r5
 800afda:	1d72      	adds	r2, r6, #5
 800afdc:	0092      	lsls	r2, r2, #2
 800afde:	4620      	mov	r0, r4
 800afe0:	f002 faf4 	bl	800d5cc <_calloc_r>
 800afe4:	b160      	cbz	r0, 800b000 <_Balloc+0x64>
 800afe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afea:	e00e      	b.n	800b00a <_Balloc+0x6e>
 800afec:	2221      	movs	r2, #33	; 0x21
 800afee:	2104      	movs	r1, #4
 800aff0:	4620      	mov	r0, r4
 800aff2:	f002 faeb 	bl	800d5cc <_calloc_r>
 800aff6:	69e3      	ldr	r3, [r4, #28]
 800aff8:	60f0      	str	r0, [r6, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e4      	bne.n	800afca <_Balloc+0x2e>
 800b000:	2000      	movs	r0, #0
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	6802      	ldr	r2, [r0, #0]
 800b006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b00a:	2300      	movs	r3, #0
 800b00c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b010:	e7f7      	b.n	800b002 <_Balloc+0x66>
 800b012:	bf00      	nop
 800b014:	0800f328 	.word	0x0800f328
 800b018:	0800f3a8 	.word	0x0800f3a8

0800b01c <_Bfree>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	69c6      	ldr	r6, [r0, #28]
 800b020:	4605      	mov	r5, r0
 800b022:	460c      	mov	r4, r1
 800b024:	b976      	cbnz	r6, 800b044 <_Bfree+0x28>
 800b026:	2010      	movs	r0, #16
 800b028:	f7ff ff04 	bl	800ae34 <malloc>
 800b02c:	4602      	mov	r2, r0
 800b02e:	61e8      	str	r0, [r5, #28]
 800b030:	b920      	cbnz	r0, 800b03c <_Bfree+0x20>
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <_Bfree+0x3c>)
 800b034:	4809      	ldr	r0, [pc, #36]	; (800b05c <_Bfree+0x40>)
 800b036:	218f      	movs	r1, #143	; 0x8f
 800b038:	f002 faaa 	bl	800d590 <__assert_func>
 800b03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b040:	6006      	str	r6, [r0, #0]
 800b042:	60c6      	str	r6, [r0, #12]
 800b044:	b13c      	cbz	r4, 800b056 <_Bfree+0x3a>
 800b046:	69eb      	ldr	r3, [r5, #28]
 800b048:	6862      	ldr	r2, [r4, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b050:	6021      	str	r1, [r4, #0]
 800b052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	0800f328 	.word	0x0800f328
 800b05c:	0800f3a8 	.word	0x0800f3a8

0800b060 <__multadd>:
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	690d      	ldr	r5, [r1, #16]
 800b066:	4607      	mov	r7, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	461e      	mov	r6, r3
 800b06c:	f101 0c14 	add.w	ip, r1, #20
 800b070:	2000      	movs	r0, #0
 800b072:	f8dc 3000 	ldr.w	r3, [ip]
 800b076:	b299      	uxth	r1, r3
 800b078:	fb02 6101 	mla	r1, r2, r1, r6
 800b07c:	0c1e      	lsrs	r6, r3, #16
 800b07e:	0c0b      	lsrs	r3, r1, #16
 800b080:	fb02 3306 	mla	r3, r2, r6, r3
 800b084:	b289      	uxth	r1, r1
 800b086:	3001      	adds	r0, #1
 800b088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b08c:	4285      	cmp	r5, r0
 800b08e:	f84c 1b04 	str.w	r1, [ip], #4
 800b092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b096:	dcec      	bgt.n	800b072 <__multadd+0x12>
 800b098:	b30e      	cbz	r6, 800b0de <__multadd+0x7e>
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	42ab      	cmp	r3, r5
 800b09e:	dc19      	bgt.n	800b0d4 <__multadd+0x74>
 800b0a0:	6861      	ldr	r1, [r4, #4]
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	3101      	adds	r1, #1
 800b0a6:	f7ff ff79 	bl	800af9c <_Balloc>
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	b928      	cbnz	r0, 800b0ba <__multadd+0x5a>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <__multadd+0x84>)
 800b0b2:	480d      	ldr	r0, [pc, #52]	; (800b0e8 <__multadd+0x88>)
 800b0b4:	21ba      	movs	r1, #186	; 0xba
 800b0b6:	f002 fa6b 	bl	800d590 <__assert_func>
 800b0ba:	6922      	ldr	r2, [r4, #16]
 800b0bc:	3202      	adds	r2, #2
 800b0be:	f104 010c 	add.w	r1, r4, #12
 800b0c2:	0092      	lsls	r2, r2, #2
 800b0c4:	300c      	adds	r0, #12
 800b0c6:	f7fe ffd8 	bl	800a07a <memcpy>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff ffa5 	bl	800b01c <_Bfree>
 800b0d2:	4644      	mov	r4, r8
 800b0d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0d8:	3501      	adds	r5, #1
 800b0da:	615e      	str	r6, [r3, #20]
 800b0dc:	6125      	str	r5, [r4, #16]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e4:	0800f397 	.word	0x0800f397
 800b0e8:	0800f3a8 	.word	0x0800f3a8

0800b0ec <__s2b>:
 800b0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	4615      	mov	r5, r2
 800b0f4:	461f      	mov	r7, r3
 800b0f6:	2209      	movs	r2, #9
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b100:	2100      	movs	r1, #0
 800b102:	2201      	movs	r2, #1
 800b104:	429a      	cmp	r2, r3
 800b106:	db09      	blt.n	800b11c <__s2b+0x30>
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ff47 	bl	800af9c <_Balloc>
 800b10e:	b940      	cbnz	r0, 800b122 <__s2b+0x36>
 800b110:	4602      	mov	r2, r0
 800b112:	4b19      	ldr	r3, [pc, #100]	; (800b178 <__s2b+0x8c>)
 800b114:	4819      	ldr	r0, [pc, #100]	; (800b17c <__s2b+0x90>)
 800b116:	21d3      	movs	r1, #211	; 0xd3
 800b118:	f002 fa3a 	bl	800d590 <__assert_func>
 800b11c:	0052      	lsls	r2, r2, #1
 800b11e:	3101      	adds	r1, #1
 800b120:	e7f0      	b.n	800b104 <__s2b+0x18>
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	6143      	str	r3, [r0, #20]
 800b126:	2d09      	cmp	r5, #9
 800b128:	f04f 0301 	mov.w	r3, #1
 800b12c:	6103      	str	r3, [r0, #16]
 800b12e:	dd16      	ble.n	800b15e <__s2b+0x72>
 800b130:	f104 0909 	add.w	r9, r4, #9
 800b134:	46c8      	mov	r8, r9
 800b136:	442c      	add	r4, r5
 800b138:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b13c:	4601      	mov	r1, r0
 800b13e:	3b30      	subs	r3, #48	; 0x30
 800b140:	220a      	movs	r2, #10
 800b142:	4630      	mov	r0, r6
 800b144:	f7ff ff8c 	bl	800b060 <__multadd>
 800b148:	45a0      	cmp	r8, r4
 800b14a:	d1f5      	bne.n	800b138 <__s2b+0x4c>
 800b14c:	f1a5 0408 	sub.w	r4, r5, #8
 800b150:	444c      	add	r4, r9
 800b152:	1b2d      	subs	r5, r5, r4
 800b154:	1963      	adds	r3, r4, r5
 800b156:	42bb      	cmp	r3, r7
 800b158:	db04      	blt.n	800b164 <__s2b+0x78>
 800b15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15e:	340a      	adds	r4, #10
 800b160:	2509      	movs	r5, #9
 800b162:	e7f6      	b.n	800b152 <__s2b+0x66>
 800b164:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b168:	4601      	mov	r1, r0
 800b16a:	3b30      	subs	r3, #48	; 0x30
 800b16c:	220a      	movs	r2, #10
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff76 	bl	800b060 <__multadd>
 800b174:	e7ee      	b.n	800b154 <__s2b+0x68>
 800b176:	bf00      	nop
 800b178:	0800f397 	.word	0x0800f397
 800b17c:	0800f3a8 	.word	0x0800f3a8

0800b180 <__hi0bits>:
 800b180:	0c03      	lsrs	r3, r0, #16
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	b9d3      	cbnz	r3, 800b1bc <__hi0bits+0x3c>
 800b186:	0400      	lsls	r0, r0, #16
 800b188:	2310      	movs	r3, #16
 800b18a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b18e:	bf04      	itt	eq
 800b190:	0200      	lsleq	r0, r0, #8
 800b192:	3308      	addeq	r3, #8
 800b194:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b198:	bf04      	itt	eq
 800b19a:	0100      	lsleq	r0, r0, #4
 800b19c:	3304      	addeq	r3, #4
 800b19e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1a2:	bf04      	itt	eq
 800b1a4:	0080      	lsleq	r0, r0, #2
 800b1a6:	3302      	addeq	r3, #2
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	db05      	blt.n	800b1b8 <__hi0bits+0x38>
 800b1ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1b0:	f103 0301 	add.w	r3, r3, #1
 800b1b4:	bf08      	it	eq
 800b1b6:	2320      	moveq	r3, #32
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	4770      	bx	lr
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e7e4      	b.n	800b18a <__hi0bits+0xa>

0800b1c0 <__lo0bits>:
 800b1c0:	6803      	ldr	r3, [r0, #0]
 800b1c2:	f013 0207 	ands.w	r2, r3, #7
 800b1c6:	d00c      	beq.n	800b1e2 <__lo0bits+0x22>
 800b1c8:	07d9      	lsls	r1, r3, #31
 800b1ca:	d422      	bmi.n	800b212 <__lo0bits+0x52>
 800b1cc:	079a      	lsls	r2, r3, #30
 800b1ce:	bf49      	itett	mi
 800b1d0:	085b      	lsrmi	r3, r3, #1
 800b1d2:	089b      	lsrpl	r3, r3, #2
 800b1d4:	6003      	strmi	r3, [r0, #0]
 800b1d6:	2201      	movmi	r2, #1
 800b1d8:	bf5c      	itt	pl
 800b1da:	6003      	strpl	r3, [r0, #0]
 800b1dc:	2202      	movpl	r2, #2
 800b1de:	4610      	mov	r0, r2
 800b1e0:	4770      	bx	lr
 800b1e2:	b299      	uxth	r1, r3
 800b1e4:	b909      	cbnz	r1, 800b1ea <__lo0bits+0x2a>
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	2210      	movs	r2, #16
 800b1ea:	b2d9      	uxtb	r1, r3
 800b1ec:	b909      	cbnz	r1, 800b1f2 <__lo0bits+0x32>
 800b1ee:	3208      	adds	r2, #8
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	0719      	lsls	r1, r3, #28
 800b1f4:	bf04      	itt	eq
 800b1f6:	091b      	lsreq	r3, r3, #4
 800b1f8:	3204      	addeq	r2, #4
 800b1fa:	0799      	lsls	r1, r3, #30
 800b1fc:	bf04      	itt	eq
 800b1fe:	089b      	lsreq	r3, r3, #2
 800b200:	3202      	addeq	r2, #2
 800b202:	07d9      	lsls	r1, r3, #31
 800b204:	d403      	bmi.n	800b20e <__lo0bits+0x4e>
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	f102 0201 	add.w	r2, r2, #1
 800b20c:	d003      	beq.n	800b216 <__lo0bits+0x56>
 800b20e:	6003      	str	r3, [r0, #0]
 800b210:	e7e5      	b.n	800b1de <__lo0bits+0x1e>
 800b212:	2200      	movs	r2, #0
 800b214:	e7e3      	b.n	800b1de <__lo0bits+0x1e>
 800b216:	2220      	movs	r2, #32
 800b218:	e7e1      	b.n	800b1de <__lo0bits+0x1e>
	...

0800b21c <__i2b>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	460c      	mov	r4, r1
 800b220:	2101      	movs	r1, #1
 800b222:	f7ff febb 	bl	800af9c <_Balloc>
 800b226:	4602      	mov	r2, r0
 800b228:	b928      	cbnz	r0, 800b236 <__i2b+0x1a>
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <__i2b+0x24>)
 800b22c:	4805      	ldr	r0, [pc, #20]	; (800b244 <__i2b+0x28>)
 800b22e:	f240 1145 	movw	r1, #325	; 0x145
 800b232:	f002 f9ad 	bl	800d590 <__assert_func>
 800b236:	2301      	movs	r3, #1
 800b238:	6144      	str	r4, [r0, #20]
 800b23a:	6103      	str	r3, [r0, #16]
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	bf00      	nop
 800b240:	0800f397 	.word	0x0800f397
 800b244:	0800f3a8 	.word	0x0800f3a8

0800b248 <__multiply>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	4691      	mov	r9, r2
 800b24e:	690a      	ldr	r2, [r1, #16]
 800b250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b254:	429a      	cmp	r2, r3
 800b256:	bfb8      	it	lt
 800b258:	460b      	movlt	r3, r1
 800b25a:	460c      	mov	r4, r1
 800b25c:	bfbc      	itt	lt
 800b25e:	464c      	movlt	r4, r9
 800b260:	4699      	movlt	r9, r3
 800b262:	6927      	ldr	r7, [r4, #16]
 800b264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b268:	68a3      	ldr	r3, [r4, #8]
 800b26a:	6861      	ldr	r1, [r4, #4]
 800b26c:	eb07 060a 	add.w	r6, r7, sl
 800b270:	42b3      	cmp	r3, r6
 800b272:	b085      	sub	sp, #20
 800b274:	bfb8      	it	lt
 800b276:	3101      	addlt	r1, #1
 800b278:	f7ff fe90 	bl	800af9c <_Balloc>
 800b27c:	b930      	cbnz	r0, 800b28c <__multiply+0x44>
 800b27e:	4602      	mov	r2, r0
 800b280:	4b44      	ldr	r3, [pc, #272]	; (800b394 <__multiply+0x14c>)
 800b282:	4845      	ldr	r0, [pc, #276]	; (800b398 <__multiply+0x150>)
 800b284:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b288:	f002 f982 	bl	800d590 <__assert_func>
 800b28c:	f100 0514 	add.w	r5, r0, #20
 800b290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b294:	462b      	mov	r3, r5
 800b296:	2200      	movs	r2, #0
 800b298:	4543      	cmp	r3, r8
 800b29a:	d321      	bcc.n	800b2e0 <__multiply+0x98>
 800b29c:	f104 0314 	add.w	r3, r4, #20
 800b2a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2a4:	f109 0314 	add.w	r3, r9, #20
 800b2a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2ac:	9202      	str	r2, [sp, #8]
 800b2ae:	1b3a      	subs	r2, r7, r4
 800b2b0:	3a15      	subs	r2, #21
 800b2b2:	f022 0203 	bic.w	r2, r2, #3
 800b2b6:	3204      	adds	r2, #4
 800b2b8:	f104 0115 	add.w	r1, r4, #21
 800b2bc:	428f      	cmp	r7, r1
 800b2be:	bf38      	it	cc
 800b2c0:	2204      	movcc	r2, #4
 800b2c2:	9201      	str	r2, [sp, #4]
 800b2c4:	9a02      	ldr	r2, [sp, #8]
 800b2c6:	9303      	str	r3, [sp, #12]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d80c      	bhi.n	800b2e6 <__multiply+0x9e>
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	dd03      	ble.n	800b2d8 <__multiply+0x90>
 800b2d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d05b      	beq.n	800b390 <__multiply+0x148>
 800b2d8:	6106      	str	r6, [r0, #16]
 800b2da:	b005      	add	sp, #20
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	f843 2b04 	str.w	r2, [r3], #4
 800b2e4:	e7d8      	b.n	800b298 <__multiply+0x50>
 800b2e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2ea:	f1ba 0f00 	cmp.w	sl, #0
 800b2ee:	d024      	beq.n	800b33a <__multiply+0xf2>
 800b2f0:	f104 0e14 	add.w	lr, r4, #20
 800b2f4:	46a9      	mov	r9, r5
 800b2f6:	f04f 0c00 	mov.w	ip, #0
 800b2fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2fe:	f8d9 1000 	ldr.w	r1, [r9]
 800b302:	fa1f fb82 	uxth.w	fp, r2
 800b306:	b289      	uxth	r1, r1
 800b308:	fb0a 110b 	mla	r1, sl, fp, r1
 800b30c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b310:	f8d9 2000 	ldr.w	r2, [r9]
 800b314:	4461      	add	r1, ip
 800b316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b31a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b31e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b322:	b289      	uxth	r1, r1
 800b324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b328:	4577      	cmp	r7, lr
 800b32a:	f849 1b04 	str.w	r1, [r9], #4
 800b32e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b332:	d8e2      	bhi.n	800b2fa <__multiply+0xb2>
 800b334:	9a01      	ldr	r2, [sp, #4]
 800b336:	f845 c002 	str.w	ip, [r5, r2]
 800b33a:	9a03      	ldr	r2, [sp, #12]
 800b33c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b340:	3304      	adds	r3, #4
 800b342:	f1b9 0f00 	cmp.w	r9, #0
 800b346:	d021      	beq.n	800b38c <__multiply+0x144>
 800b348:	6829      	ldr	r1, [r5, #0]
 800b34a:	f104 0c14 	add.w	ip, r4, #20
 800b34e:	46ae      	mov	lr, r5
 800b350:	f04f 0a00 	mov.w	sl, #0
 800b354:	f8bc b000 	ldrh.w	fp, [ip]
 800b358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b35c:	fb09 220b 	mla	r2, r9, fp, r2
 800b360:	4452      	add	r2, sl
 800b362:	b289      	uxth	r1, r1
 800b364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b368:	f84e 1b04 	str.w	r1, [lr], #4
 800b36c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b370:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b374:	f8be 1000 	ldrh.w	r1, [lr]
 800b378:	fb09 110a 	mla	r1, r9, sl, r1
 800b37c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b380:	4567      	cmp	r7, ip
 800b382:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b386:	d8e5      	bhi.n	800b354 <__multiply+0x10c>
 800b388:	9a01      	ldr	r2, [sp, #4]
 800b38a:	50a9      	str	r1, [r5, r2]
 800b38c:	3504      	adds	r5, #4
 800b38e:	e799      	b.n	800b2c4 <__multiply+0x7c>
 800b390:	3e01      	subs	r6, #1
 800b392:	e79b      	b.n	800b2cc <__multiply+0x84>
 800b394:	0800f397 	.word	0x0800f397
 800b398:	0800f3a8 	.word	0x0800f3a8

0800b39c <__pow5mult>:
 800b39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a0:	4615      	mov	r5, r2
 800b3a2:	f012 0203 	ands.w	r2, r2, #3
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	d007      	beq.n	800b3bc <__pow5mult+0x20>
 800b3ac:	4c25      	ldr	r4, [pc, #148]	; (800b444 <__pow5mult+0xa8>)
 800b3ae:	3a01      	subs	r2, #1
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3b6:	f7ff fe53 	bl	800b060 <__multadd>
 800b3ba:	4607      	mov	r7, r0
 800b3bc:	10ad      	asrs	r5, r5, #2
 800b3be:	d03d      	beq.n	800b43c <__pow5mult+0xa0>
 800b3c0:	69f4      	ldr	r4, [r6, #28]
 800b3c2:	b97c      	cbnz	r4, 800b3e4 <__pow5mult+0x48>
 800b3c4:	2010      	movs	r0, #16
 800b3c6:	f7ff fd35 	bl	800ae34 <malloc>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	61f0      	str	r0, [r6, #28]
 800b3ce:	b928      	cbnz	r0, 800b3dc <__pow5mult+0x40>
 800b3d0:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <__pow5mult+0xac>)
 800b3d2:	481e      	ldr	r0, [pc, #120]	; (800b44c <__pow5mult+0xb0>)
 800b3d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b3d8:	f002 f8da 	bl	800d590 <__assert_func>
 800b3dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3e0:	6004      	str	r4, [r0, #0]
 800b3e2:	60c4      	str	r4, [r0, #12]
 800b3e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b3e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3ec:	b94c      	cbnz	r4, 800b402 <__pow5mult+0x66>
 800b3ee:	f240 2171 	movw	r1, #625	; 0x271
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ff12 	bl	800b21c <__i2b>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3fe:	4604      	mov	r4, r0
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	f04f 0900 	mov.w	r9, #0
 800b406:	07eb      	lsls	r3, r5, #31
 800b408:	d50a      	bpl.n	800b420 <__pow5mult+0x84>
 800b40a:	4639      	mov	r1, r7
 800b40c:	4622      	mov	r2, r4
 800b40e:	4630      	mov	r0, r6
 800b410:	f7ff ff1a 	bl	800b248 <__multiply>
 800b414:	4639      	mov	r1, r7
 800b416:	4680      	mov	r8, r0
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff fdff 	bl	800b01c <_Bfree>
 800b41e:	4647      	mov	r7, r8
 800b420:	106d      	asrs	r5, r5, #1
 800b422:	d00b      	beq.n	800b43c <__pow5mult+0xa0>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	b938      	cbnz	r0, 800b438 <__pow5mult+0x9c>
 800b428:	4622      	mov	r2, r4
 800b42a:	4621      	mov	r1, r4
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff ff0b 	bl	800b248 <__multiply>
 800b432:	6020      	str	r0, [r4, #0]
 800b434:	f8c0 9000 	str.w	r9, [r0]
 800b438:	4604      	mov	r4, r0
 800b43a:	e7e4      	b.n	800b406 <__pow5mult+0x6a>
 800b43c:	4638      	mov	r0, r7
 800b43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b442:	bf00      	nop
 800b444:	0800f4f8 	.word	0x0800f4f8
 800b448:	0800f328 	.word	0x0800f328
 800b44c:	0800f3a8 	.word	0x0800f3a8

0800b450 <__lshift>:
 800b450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	460c      	mov	r4, r1
 800b456:	6849      	ldr	r1, [r1, #4]
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	4607      	mov	r7, r0
 800b462:	4691      	mov	r9, r2
 800b464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b468:	f108 0601 	add.w	r6, r8, #1
 800b46c:	42b3      	cmp	r3, r6
 800b46e:	db0b      	blt.n	800b488 <__lshift+0x38>
 800b470:	4638      	mov	r0, r7
 800b472:	f7ff fd93 	bl	800af9c <_Balloc>
 800b476:	4605      	mov	r5, r0
 800b478:	b948      	cbnz	r0, 800b48e <__lshift+0x3e>
 800b47a:	4602      	mov	r2, r0
 800b47c:	4b28      	ldr	r3, [pc, #160]	; (800b520 <__lshift+0xd0>)
 800b47e:	4829      	ldr	r0, [pc, #164]	; (800b524 <__lshift+0xd4>)
 800b480:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b484:	f002 f884 	bl	800d590 <__assert_func>
 800b488:	3101      	adds	r1, #1
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	e7ee      	b.n	800b46c <__lshift+0x1c>
 800b48e:	2300      	movs	r3, #0
 800b490:	f100 0114 	add.w	r1, r0, #20
 800b494:	f100 0210 	add.w	r2, r0, #16
 800b498:	4618      	mov	r0, r3
 800b49a:	4553      	cmp	r3, sl
 800b49c:	db33      	blt.n	800b506 <__lshift+0xb6>
 800b49e:	6920      	ldr	r0, [r4, #16]
 800b4a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4a4:	f104 0314 	add.w	r3, r4, #20
 800b4a8:	f019 091f 	ands.w	r9, r9, #31
 800b4ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4b4:	d02b      	beq.n	800b50e <__lshift+0xbe>
 800b4b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4ba:	468a      	mov	sl, r1
 800b4bc:	2200      	movs	r2, #0
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	fa00 f009 	lsl.w	r0, r0, r9
 800b4c4:	4310      	orrs	r0, r2
 800b4c6:	f84a 0b04 	str.w	r0, [sl], #4
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	459c      	cmp	ip, r3
 800b4d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4d4:	d8f3      	bhi.n	800b4be <__lshift+0x6e>
 800b4d6:	ebac 0304 	sub.w	r3, ip, r4
 800b4da:	3b15      	subs	r3, #21
 800b4dc:	f023 0303 	bic.w	r3, r3, #3
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	f104 0015 	add.w	r0, r4, #21
 800b4e6:	4584      	cmp	ip, r0
 800b4e8:	bf38      	it	cc
 800b4ea:	2304      	movcc	r3, #4
 800b4ec:	50ca      	str	r2, [r1, r3]
 800b4ee:	b10a      	cbz	r2, 800b4f4 <__lshift+0xa4>
 800b4f0:	f108 0602 	add.w	r6, r8, #2
 800b4f4:	3e01      	subs	r6, #1
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	612e      	str	r6, [r5, #16]
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	f7ff fd8e 	bl	800b01c <_Bfree>
 800b500:	4628      	mov	r0, r5
 800b502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b506:	f842 0f04 	str.w	r0, [r2, #4]!
 800b50a:	3301      	adds	r3, #1
 800b50c:	e7c5      	b.n	800b49a <__lshift+0x4a>
 800b50e:	3904      	subs	r1, #4
 800b510:	f853 2b04 	ldr.w	r2, [r3], #4
 800b514:	f841 2f04 	str.w	r2, [r1, #4]!
 800b518:	459c      	cmp	ip, r3
 800b51a:	d8f9      	bhi.n	800b510 <__lshift+0xc0>
 800b51c:	e7ea      	b.n	800b4f4 <__lshift+0xa4>
 800b51e:	bf00      	nop
 800b520:	0800f397 	.word	0x0800f397
 800b524:	0800f3a8 	.word	0x0800f3a8

0800b528 <__mcmp>:
 800b528:	b530      	push	{r4, r5, lr}
 800b52a:	6902      	ldr	r2, [r0, #16]
 800b52c:	690c      	ldr	r4, [r1, #16]
 800b52e:	1b12      	subs	r2, r2, r4
 800b530:	d10e      	bne.n	800b550 <__mcmp+0x28>
 800b532:	f100 0314 	add.w	r3, r0, #20
 800b536:	3114      	adds	r1, #20
 800b538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b53c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b548:	42a5      	cmp	r5, r4
 800b54a:	d003      	beq.n	800b554 <__mcmp+0x2c>
 800b54c:	d305      	bcc.n	800b55a <__mcmp+0x32>
 800b54e:	2201      	movs	r2, #1
 800b550:	4610      	mov	r0, r2
 800b552:	bd30      	pop	{r4, r5, pc}
 800b554:	4283      	cmp	r3, r0
 800b556:	d3f3      	bcc.n	800b540 <__mcmp+0x18>
 800b558:	e7fa      	b.n	800b550 <__mcmp+0x28>
 800b55a:	f04f 32ff 	mov.w	r2, #4294967295
 800b55e:	e7f7      	b.n	800b550 <__mcmp+0x28>

0800b560 <__mdiff>:
 800b560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	460c      	mov	r4, r1
 800b566:	4606      	mov	r6, r0
 800b568:	4611      	mov	r1, r2
 800b56a:	4620      	mov	r0, r4
 800b56c:	4690      	mov	r8, r2
 800b56e:	f7ff ffdb 	bl	800b528 <__mcmp>
 800b572:	1e05      	subs	r5, r0, #0
 800b574:	d110      	bne.n	800b598 <__mdiff+0x38>
 800b576:	4629      	mov	r1, r5
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff fd0f 	bl	800af9c <_Balloc>
 800b57e:	b930      	cbnz	r0, 800b58e <__mdiff+0x2e>
 800b580:	4b3a      	ldr	r3, [pc, #232]	; (800b66c <__mdiff+0x10c>)
 800b582:	4602      	mov	r2, r0
 800b584:	f240 2137 	movw	r1, #567	; 0x237
 800b588:	4839      	ldr	r0, [pc, #228]	; (800b670 <__mdiff+0x110>)
 800b58a:	f002 f801 	bl	800d590 <__assert_func>
 800b58e:	2301      	movs	r3, #1
 800b590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	bfa4      	itt	ge
 800b59a:	4643      	movge	r3, r8
 800b59c:	46a0      	movge	r8, r4
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5a4:	bfa6      	itte	ge
 800b5a6:	461c      	movge	r4, r3
 800b5a8:	2500      	movge	r5, #0
 800b5aa:	2501      	movlt	r5, #1
 800b5ac:	f7ff fcf6 	bl	800af9c <_Balloc>
 800b5b0:	b920      	cbnz	r0, 800b5bc <__mdiff+0x5c>
 800b5b2:	4b2e      	ldr	r3, [pc, #184]	; (800b66c <__mdiff+0x10c>)
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	f240 2145 	movw	r1, #581	; 0x245
 800b5ba:	e7e5      	b.n	800b588 <__mdiff+0x28>
 800b5bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5c0:	6926      	ldr	r6, [r4, #16]
 800b5c2:	60c5      	str	r5, [r0, #12]
 800b5c4:	f104 0914 	add.w	r9, r4, #20
 800b5c8:	f108 0514 	add.w	r5, r8, #20
 800b5cc:	f100 0e14 	add.w	lr, r0, #20
 800b5d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5d8:	f108 0210 	add.w	r2, r8, #16
 800b5dc:	46f2      	mov	sl, lr
 800b5de:	2100      	movs	r1, #0
 800b5e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5e8:	fa11 f88b 	uxtah	r8, r1, fp
 800b5ec:	b299      	uxth	r1, r3
 800b5ee:	0c1b      	lsrs	r3, r3, #16
 800b5f0:	eba8 0801 	sub.w	r8, r8, r1
 800b5f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5fc:	fa1f f888 	uxth.w	r8, r8
 800b600:	1419      	asrs	r1, r3, #16
 800b602:	454e      	cmp	r6, r9
 800b604:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b608:	f84a 3b04 	str.w	r3, [sl], #4
 800b60c:	d8e8      	bhi.n	800b5e0 <__mdiff+0x80>
 800b60e:	1b33      	subs	r3, r6, r4
 800b610:	3b15      	subs	r3, #21
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	3304      	adds	r3, #4
 800b618:	3415      	adds	r4, #21
 800b61a:	42a6      	cmp	r6, r4
 800b61c:	bf38      	it	cc
 800b61e:	2304      	movcc	r3, #4
 800b620:	441d      	add	r5, r3
 800b622:	4473      	add	r3, lr
 800b624:	469e      	mov	lr, r3
 800b626:	462e      	mov	r6, r5
 800b628:	4566      	cmp	r6, ip
 800b62a:	d30e      	bcc.n	800b64a <__mdiff+0xea>
 800b62c:	f10c 0203 	add.w	r2, ip, #3
 800b630:	1b52      	subs	r2, r2, r5
 800b632:	f022 0203 	bic.w	r2, r2, #3
 800b636:	3d03      	subs	r5, #3
 800b638:	45ac      	cmp	ip, r5
 800b63a:	bf38      	it	cc
 800b63c:	2200      	movcc	r2, #0
 800b63e:	4413      	add	r3, r2
 800b640:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b644:	b17a      	cbz	r2, 800b666 <__mdiff+0x106>
 800b646:	6107      	str	r7, [r0, #16]
 800b648:	e7a4      	b.n	800b594 <__mdiff+0x34>
 800b64a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b64e:	fa11 f288 	uxtah	r2, r1, r8
 800b652:	1414      	asrs	r4, r2, #16
 800b654:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b658:	b292      	uxth	r2, r2
 800b65a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b65e:	f84e 2b04 	str.w	r2, [lr], #4
 800b662:	1421      	asrs	r1, r4, #16
 800b664:	e7e0      	b.n	800b628 <__mdiff+0xc8>
 800b666:	3f01      	subs	r7, #1
 800b668:	e7ea      	b.n	800b640 <__mdiff+0xe0>
 800b66a:	bf00      	nop
 800b66c:	0800f397 	.word	0x0800f397
 800b670:	0800f3a8 	.word	0x0800f3a8

0800b674 <__ulp>:
 800b674:	b082      	sub	sp, #8
 800b676:	ed8d 0b00 	vstr	d0, [sp]
 800b67a:	9a01      	ldr	r2, [sp, #4]
 800b67c:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <__ulp+0x48>)
 800b67e:	4013      	ands	r3, r2
 800b680:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b684:	2b00      	cmp	r3, #0
 800b686:	dc08      	bgt.n	800b69a <__ulp+0x26>
 800b688:	425b      	negs	r3, r3
 800b68a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b68e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b692:	da04      	bge.n	800b69e <__ulp+0x2a>
 800b694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b698:	4113      	asrs	r3, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	e008      	b.n	800b6b0 <__ulp+0x3c>
 800b69e:	f1a2 0314 	sub.w	r3, r2, #20
 800b6a2:	2b1e      	cmp	r3, #30
 800b6a4:	bfda      	itte	le
 800b6a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b6aa:	40da      	lsrle	r2, r3
 800b6ac:	2201      	movgt	r2, #1
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	ec41 0b10 	vmov	d0, r0, r1
 800b6b8:	b002      	add	sp, #8
 800b6ba:	4770      	bx	lr
 800b6bc:	7ff00000 	.word	0x7ff00000

0800b6c0 <__b2d>:
 800b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c4:	6906      	ldr	r6, [r0, #16]
 800b6c6:	f100 0814 	add.w	r8, r0, #20
 800b6ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b6ce:	1f37      	subs	r7, r6, #4
 800b6d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f7ff fd53 	bl	800b180 <__hi0bits>
 800b6da:	f1c0 0320 	rsb	r3, r0, #32
 800b6de:	280a      	cmp	r0, #10
 800b6e0:	600b      	str	r3, [r1, #0]
 800b6e2:	491b      	ldr	r1, [pc, #108]	; (800b750 <__b2d+0x90>)
 800b6e4:	dc15      	bgt.n	800b712 <__b2d+0x52>
 800b6e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800b6ee:	45b8      	cmp	r8, r7
 800b6f0:	ea43 0501 	orr.w	r5, r3, r1
 800b6f4:	bf34      	ite	cc
 800b6f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6fa:	2300      	movcs	r3, #0
 800b6fc:	3015      	adds	r0, #21
 800b6fe:	fa02 f000 	lsl.w	r0, r2, r0
 800b702:	fa23 f30c 	lsr.w	r3, r3, ip
 800b706:	4303      	orrs	r3, r0
 800b708:	461c      	mov	r4, r3
 800b70a:	ec45 4b10 	vmov	d0, r4, r5
 800b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b712:	45b8      	cmp	r8, r7
 800b714:	bf3a      	itte	cc
 800b716:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b71a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b71e:	2300      	movcs	r3, #0
 800b720:	380b      	subs	r0, #11
 800b722:	d012      	beq.n	800b74a <__b2d+0x8a>
 800b724:	f1c0 0120 	rsb	r1, r0, #32
 800b728:	fa23 f401 	lsr.w	r4, r3, r1
 800b72c:	4082      	lsls	r2, r0
 800b72e:	4322      	orrs	r2, r4
 800b730:	4547      	cmp	r7, r8
 800b732:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b736:	bf8c      	ite	hi
 800b738:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b73c:	2200      	movls	r2, #0
 800b73e:	4083      	lsls	r3, r0
 800b740:	40ca      	lsrs	r2, r1
 800b742:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b746:	4313      	orrs	r3, r2
 800b748:	e7de      	b.n	800b708 <__b2d+0x48>
 800b74a:	ea42 0501 	orr.w	r5, r2, r1
 800b74e:	e7db      	b.n	800b708 <__b2d+0x48>
 800b750:	3ff00000 	.word	0x3ff00000

0800b754 <__d2b>:
 800b754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b758:	460f      	mov	r7, r1
 800b75a:	2101      	movs	r1, #1
 800b75c:	ec59 8b10 	vmov	r8, r9, d0
 800b760:	4616      	mov	r6, r2
 800b762:	f7ff fc1b 	bl	800af9c <_Balloc>
 800b766:	4604      	mov	r4, r0
 800b768:	b930      	cbnz	r0, 800b778 <__d2b+0x24>
 800b76a:	4602      	mov	r2, r0
 800b76c:	4b24      	ldr	r3, [pc, #144]	; (800b800 <__d2b+0xac>)
 800b76e:	4825      	ldr	r0, [pc, #148]	; (800b804 <__d2b+0xb0>)
 800b770:	f240 310f 	movw	r1, #783	; 0x30f
 800b774:	f001 ff0c 	bl	800d590 <__assert_func>
 800b778:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b77c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b780:	bb2d      	cbnz	r5, 800b7ce <__d2b+0x7a>
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	f1b8 0300 	subs.w	r3, r8, #0
 800b788:	d026      	beq.n	800b7d8 <__d2b+0x84>
 800b78a:	4668      	mov	r0, sp
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	f7ff fd17 	bl	800b1c0 <__lo0bits>
 800b792:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b796:	b1e8      	cbz	r0, 800b7d4 <__d2b+0x80>
 800b798:	f1c0 0320 	rsb	r3, r0, #32
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	430b      	orrs	r3, r1
 800b7a2:	40c2      	lsrs	r2, r0
 800b7a4:	6163      	str	r3, [r4, #20]
 800b7a6:	9201      	str	r2, [sp, #4]
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bf14      	ite	ne
 800b7b0:	2202      	movne	r2, #2
 800b7b2:	2201      	moveq	r2, #1
 800b7b4:	6122      	str	r2, [r4, #16]
 800b7b6:	b1bd      	cbz	r5, 800b7e8 <__d2b+0x94>
 800b7b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7bc:	4405      	add	r5, r0
 800b7be:	603d      	str	r5, [r7, #0]
 800b7c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7c4:	6030      	str	r0, [r6, #0]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	b003      	add	sp, #12
 800b7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d2:	e7d6      	b.n	800b782 <__d2b+0x2e>
 800b7d4:	6161      	str	r1, [r4, #20]
 800b7d6:	e7e7      	b.n	800b7a8 <__d2b+0x54>
 800b7d8:	a801      	add	r0, sp, #4
 800b7da:	f7ff fcf1 	bl	800b1c0 <__lo0bits>
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	6163      	str	r3, [r4, #20]
 800b7e2:	3020      	adds	r0, #32
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	e7e5      	b.n	800b7b4 <__d2b+0x60>
 800b7e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7f0:	6038      	str	r0, [r7, #0]
 800b7f2:	6918      	ldr	r0, [r3, #16]
 800b7f4:	f7ff fcc4 	bl	800b180 <__hi0bits>
 800b7f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7fc:	e7e2      	b.n	800b7c4 <__d2b+0x70>
 800b7fe:	bf00      	nop
 800b800:	0800f397 	.word	0x0800f397
 800b804:	0800f3a8 	.word	0x0800f3a8

0800b808 <__ratio>:
 800b808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4688      	mov	r8, r1
 800b80e:	4669      	mov	r1, sp
 800b810:	4681      	mov	r9, r0
 800b812:	f7ff ff55 	bl	800b6c0 <__b2d>
 800b816:	a901      	add	r1, sp, #4
 800b818:	4640      	mov	r0, r8
 800b81a:	ec55 4b10 	vmov	r4, r5, d0
 800b81e:	f7ff ff4f 	bl	800b6c0 <__b2d>
 800b822:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b826:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b82a:	eba3 0c02 	sub.w	ip, r3, r2
 800b82e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b838:	ec51 0b10 	vmov	r0, r1, d0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	bfd6      	itet	le
 800b840:	460a      	movle	r2, r1
 800b842:	462a      	movgt	r2, r5
 800b844:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b848:	468b      	mov	fp, r1
 800b84a:	462f      	mov	r7, r5
 800b84c:	bfd4      	ite	le
 800b84e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b852:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b856:	4620      	mov	r0, r4
 800b858:	ee10 2a10 	vmov	r2, s0
 800b85c:	465b      	mov	r3, fp
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f4 fffc 	bl	800085c <__aeabi_ddiv>
 800b864:	ec41 0b10 	vmov	d0, r0, r1
 800b868:	b003      	add	sp, #12
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b86e <__copybits>:
 800b86e:	3901      	subs	r1, #1
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	1149      	asrs	r1, r1, #5
 800b874:	6914      	ldr	r4, [r2, #16]
 800b876:	3101      	adds	r1, #1
 800b878:	f102 0314 	add.w	r3, r2, #20
 800b87c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b880:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b884:	1f05      	subs	r5, r0, #4
 800b886:	42a3      	cmp	r3, r4
 800b888:	d30c      	bcc.n	800b8a4 <__copybits+0x36>
 800b88a:	1aa3      	subs	r3, r4, r2
 800b88c:	3b11      	subs	r3, #17
 800b88e:	f023 0303 	bic.w	r3, r3, #3
 800b892:	3211      	adds	r2, #17
 800b894:	42a2      	cmp	r2, r4
 800b896:	bf88      	it	hi
 800b898:	2300      	movhi	r3, #0
 800b89a:	4418      	add	r0, r3
 800b89c:	2300      	movs	r3, #0
 800b89e:	4288      	cmp	r0, r1
 800b8a0:	d305      	bcc.n	800b8ae <__copybits+0x40>
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8ac:	e7eb      	b.n	800b886 <__copybits+0x18>
 800b8ae:	f840 3b04 	str.w	r3, [r0], #4
 800b8b2:	e7f4      	b.n	800b89e <__copybits+0x30>

0800b8b4 <__any_on>:
 800b8b4:	f100 0214 	add.w	r2, r0, #20
 800b8b8:	6900      	ldr	r0, [r0, #16]
 800b8ba:	114b      	asrs	r3, r1, #5
 800b8bc:	4298      	cmp	r0, r3
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	db11      	blt.n	800b8e6 <__any_on+0x32>
 800b8c2:	dd0a      	ble.n	800b8da <__any_on+0x26>
 800b8c4:	f011 011f 	ands.w	r1, r1, #31
 800b8c8:	d007      	beq.n	800b8da <__any_on+0x26>
 800b8ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8ce:	fa24 f001 	lsr.w	r0, r4, r1
 800b8d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b8d6:	428c      	cmp	r4, r1
 800b8d8:	d10b      	bne.n	800b8f2 <__any_on+0x3e>
 800b8da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d803      	bhi.n	800b8ea <__any_on+0x36>
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	e7f7      	b.n	800b8da <__any_on+0x26>
 800b8ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d0f5      	beq.n	800b8de <__any_on+0x2a>
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7f6      	b.n	800b8e4 <__any_on+0x30>

0800b8f6 <sulp>:
 800b8f6:	b570      	push	{r4, r5, r6, lr}
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	460d      	mov	r5, r1
 800b8fc:	ec45 4b10 	vmov	d0, r4, r5
 800b900:	4616      	mov	r6, r2
 800b902:	f7ff feb7 	bl	800b674 <__ulp>
 800b906:	ec51 0b10 	vmov	r0, r1, d0
 800b90a:	b17e      	cbz	r6, 800b92c <sulp+0x36>
 800b90c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b910:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b914:	2b00      	cmp	r3, #0
 800b916:	dd09      	ble.n	800b92c <sulp+0x36>
 800b918:	051b      	lsls	r3, r3, #20
 800b91a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b91e:	2400      	movs	r4, #0
 800b920:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b924:	4622      	mov	r2, r4
 800b926:	462b      	mov	r3, r5
 800b928:	f7f4 fe6e 	bl	8000608 <__aeabi_dmul>
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b930 <_strtod_l>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	ed2d 8b02 	vpush	{d8}
 800b938:	b09b      	sub	sp, #108	; 0x6c
 800b93a:	4604      	mov	r4, r0
 800b93c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b93e:	2200      	movs	r2, #0
 800b940:	9216      	str	r2, [sp, #88]	; 0x58
 800b942:	460d      	mov	r5, r1
 800b944:	f04f 0800 	mov.w	r8, #0
 800b948:	f04f 0900 	mov.w	r9, #0
 800b94c:	460a      	mov	r2, r1
 800b94e:	9215      	str	r2, [sp, #84]	; 0x54
 800b950:	7811      	ldrb	r1, [r2, #0]
 800b952:	292b      	cmp	r1, #43	; 0x2b
 800b954:	d04c      	beq.n	800b9f0 <_strtod_l+0xc0>
 800b956:	d83a      	bhi.n	800b9ce <_strtod_l+0x9e>
 800b958:	290d      	cmp	r1, #13
 800b95a:	d834      	bhi.n	800b9c6 <_strtod_l+0x96>
 800b95c:	2908      	cmp	r1, #8
 800b95e:	d834      	bhi.n	800b9ca <_strtod_l+0x9a>
 800b960:	2900      	cmp	r1, #0
 800b962:	d03d      	beq.n	800b9e0 <_strtod_l+0xb0>
 800b964:	2200      	movs	r2, #0
 800b966:	920a      	str	r2, [sp, #40]	; 0x28
 800b968:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b96a:	7832      	ldrb	r2, [r6, #0]
 800b96c:	2a30      	cmp	r2, #48	; 0x30
 800b96e:	f040 80b4 	bne.w	800bada <_strtod_l+0x1aa>
 800b972:	7872      	ldrb	r2, [r6, #1]
 800b974:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b978:	2a58      	cmp	r2, #88	; 0x58
 800b97a:	d170      	bne.n	800ba5e <_strtod_l+0x12e>
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	ab16      	add	r3, sp, #88	; 0x58
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4a8e      	ldr	r2, [pc, #568]	; (800bbc0 <_strtod_l+0x290>)
 800b988:	ab17      	add	r3, sp, #92	; 0x5c
 800b98a:	a915      	add	r1, sp, #84	; 0x54
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 fe9b 	bl	800d6c8 <__gethex>
 800b992:	f010 070f 	ands.w	r7, r0, #15
 800b996:	4605      	mov	r5, r0
 800b998:	d005      	beq.n	800b9a6 <_strtod_l+0x76>
 800b99a:	2f06      	cmp	r7, #6
 800b99c:	d12a      	bne.n	800b9f4 <_strtod_l+0xc4>
 800b99e:	3601      	adds	r6, #1
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	9615      	str	r6, [sp, #84]	; 0x54
 800b9a4:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 857f 	bne.w	800c4ac <_strtod_l+0xb7c>
 800b9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b0:	b1db      	cbz	r3, 800b9ea <_strtod_l+0xba>
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9b8:	ec43 2b10 	vmov	d0, r2, r3
 800b9bc:	b01b      	add	sp, #108	; 0x6c
 800b9be:	ecbd 8b02 	vpop	{d8}
 800b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c6:	2920      	cmp	r1, #32
 800b9c8:	d1cc      	bne.n	800b964 <_strtod_l+0x34>
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	e7bf      	b.n	800b94e <_strtod_l+0x1e>
 800b9ce:	292d      	cmp	r1, #45	; 0x2d
 800b9d0:	d1c8      	bne.n	800b964 <_strtod_l+0x34>
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	910a      	str	r1, [sp, #40]	; 0x28
 800b9d6:	1c51      	adds	r1, r2, #1
 800b9d8:	9115      	str	r1, [sp, #84]	; 0x54
 800b9da:	7852      	ldrb	r2, [r2, #1]
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	d1c3      	bne.n	800b968 <_strtod_l+0x38>
 800b9e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9e2:	9515      	str	r5, [sp, #84]	; 0x54
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 855f 	bne.w	800c4a8 <_strtod_l+0xb78>
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	464b      	mov	r3, r9
 800b9ee:	e7e3      	b.n	800b9b8 <_strtod_l+0x88>
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	e7ef      	b.n	800b9d4 <_strtod_l+0xa4>
 800b9f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b9f6:	b13a      	cbz	r2, 800ba08 <_strtod_l+0xd8>
 800b9f8:	2135      	movs	r1, #53	; 0x35
 800b9fa:	a818      	add	r0, sp, #96	; 0x60
 800b9fc:	f7ff ff37 	bl	800b86e <__copybits>
 800ba00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff fb0a 	bl	800b01c <_Bfree>
 800ba08:	3f01      	subs	r7, #1
 800ba0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba0c:	2f04      	cmp	r7, #4
 800ba0e:	d806      	bhi.n	800ba1e <_strtod_l+0xee>
 800ba10:	e8df f007 	tbb	[pc, r7]
 800ba14:	201d0314 	.word	0x201d0314
 800ba18:	14          	.byte	0x14
 800ba19:	00          	.byte	0x00
 800ba1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ba1e:	05e9      	lsls	r1, r5, #23
 800ba20:	bf48      	it	mi
 800ba22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ba26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba2a:	0d1b      	lsrs	r3, r3, #20
 800ba2c:	051b      	lsls	r3, r3, #20
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1b9      	bne.n	800b9a6 <_strtod_l+0x76>
 800ba32:	f7fe faf5 	bl	800a020 <__errno>
 800ba36:	2322      	movs	r3, #34	; 0x22
 800ba38:	6003      	str	r3, [r0, #0]
 800ba3a:	e7b4      	b.n	800b9a6 <_strtod_l+0x76>
 800ba3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ba40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ba4c:	e7e7      	b.n	800ba1e <_strtod_l+0xee>
 800ba4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bbc8 <_strtod_l+0x298>
 800ba52:	e7e4      	b.n	800ba1e <_strtod_l+0xee>
 800ba54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ba58:	f04f 38ff 	mov.w	r8, #4294967295
 800ba5c:	e7df      	b.n	800ba1e <_strtod_l+0xee>
 800ba5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	9215      	str	r2, [sp, #84]	; 0x54
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b30      	cmp	r3, #48	; 0x30
 800ba68:	d0f9      	beq.n	800ba5e <_strtod_l+0x12e>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d09b      	beq.n	800b9a6 <_strtod_l+0x76>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f04f 0a00 	mov.w	sl, #0
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ba7e:	46d3      	mov	fp, sl
 800ba80:	220a      	movs	r2, #10
 800ba82:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ba84:	7806      	ldrb	r6, [r0, #0]
 800ba86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba8a:	b2d9      	uxtb	r1, r3
 800ba8c:	2909      	cmp	r1, #9
 800ba8e:	d926      	bls.n	800bade <_strtod_l+0x1ae>
 800ba90:	494c      	ldr	r1, [pc, #304]	; (800bbc4 <_strtod_l+0x294>)
 800ba92:	2201      	movs	r2, #1
 800ba94:	f001 fd52 	bl	800d53c <strncmp>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d030      	beq.n	800bafe <_strtod_l+0x1ce>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	4632      	mov	r2, r6
 800baa0:	9005      	str	r0, [sp, #20]
 800baa2:	465e      	mov	r6, fp
 800baa4:	4603      	mov	r3, r0
 800baa6:	2a65      	cmp	r2, #101	; 0x65
 800baa8:	d001      	beq.n	800baae <_strtod_l+0x17e>
 800baaa:	2a45      	cmp	r2, #69	; 0x45
 800baac:	d113      	bne.n	800bad6 <_strtod_l+0x1a6>
 800baae:	b91e      	cbnz	r6, 800bab8 <_strtod_l+0x188>
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	4302      	orrs	r2, r0
 800bab4:	d094      	beq.n	800b9e0 <_strtod_l+0xb0>
 800bab6:	2600      	movs	r6, #0
 800bab8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800baba:	1c6a      	adds	r2, r5, #1
 800babc:	9215      	str	r2, [sp, #84]	; 0x54
 800babe:	786a      	ldrb	r2, [r5, #1]
 800bac0:	2a2b      	cmp	r2, #43	; 0x2b
 800bac2:	d074      	beq.n	800bbae <_strtod_l+0x27e>
 800bac4:	2a2d      	cmp	r2, #45	; 0x2d
 800bac6:	d078      	beq.n	800bbba <_strtod_l+0x28a>
 800bac8:	f04f 0c00 	mov.w	ip, #0
 800bacc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bad0:	2909      	cmp	r1, #9
 800bad2:	d97f      	bls.n	800bbd4 <_strtod_l+0x2a4>
 800bad4:	9515      	str	r5, [sp, #84]	; 0x54
 800bad6:	2700      	movs	r7, #0
 800bad8:	e09e      	b.n	800bc18 <_strtod_l+0x2e8>
 800bada:	2300      	movs	r3, #0
 800badc:	e7c8      	b.n	800ba70 <_strtod_l+0x140>
 800bade:	f1bb 0f08 	cmp.w	fp, #8
 800bae2:	bfd8      	it	le
 800bae4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bae6:	f100 0001 	add.w	r0, r0, #1
 800baea:	bfda      	itte	le
 800baec:	fb02 3301 	mlale	r3, r2, r1, r3
 800baf0:	9309      	strle	r3, [sp, #36]	; 0x24
 800baf2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800baf6:	f10b 0b01 	add.w	fp, fp, #1
 800bafa:	9015      	str	r0, [sp, #84]	; 0x54
 800bafc:	e7c1      	b.n	800ba82 <_strtod_l+0x152>
 800bafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	9215      	str	r2, [sp, #84]	; 0x54
 800bb04:	785a      	ldrb	r2, [r3, #1]
 800bb06:	f1bb 0f00 	cmp.w	fp, #0
 800bb0a:	d037      	beq.n	800bb7c <_strtod_l+0x24c>
 800bb0c:	9005      	str	r0, [sp, #20]
 800bb0e:	465e      	mov	r6, fp
 800bb10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bb14:	2b09      	cmp	r3, #9
 800bb16:	d912      	bls.n	800bb3e <_strtod_l+0x20e>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e7c4      	b.n	800baa6 <_strtod_l+0x176>
 800bb1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	9215      	str	r2, [sp, #84]	; 0x54
 800bb22:	785a      	ldrb	r2, [r3, #1]
 800bb24:	3001      	adds	r0, #1
 800bb26:	2a30      	cmp	r2, #48	; 0x30
 800bb28:	d0f8      	beq.n	800bb1c <_strtod_l+0x1ec>
 800bb2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	f200 84c1 	bhi.w	800c4b6 <_strtod_l+0xb86>
 800bb34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb36:	9005      	str	r0, [sp, #20]
 800bb38:	2000      	movs	r0, #0
 800bb3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	3a30      	subs	r2, #48	; 0x30
 800bb40:	f100 0301 	add.w	r3, r0, #1
 800bb44:	d014      	beq.n	800bb70 <_strtod_l+0x240>
 800bb46:	9905      	ldr	r1, [sp, #20]
 800bb48:	4419      	add	r1, r3
 800bb4a:	9105      	str	r1, [sp, #20]
 800bb4c:	4633      	mov	r3, r6
 800bb4e:	eb00 0c06 	add.w	ip, r0, r6
 800bb52:	210a      	movs	r1, #10
 800bb54:	4563      	cmp	r3, ip
 800bb56:	d113      	bne.n	800bb80 <_strtod_l+0x250>
 800bb58:	1833      	adds	r3, r6, r0
 800bb5a:	2b08      	cmp	r3, #8
 800bb5c:	f106 0601 	add.w	r6, r6, #1
 800bb60:	4406      	add	r6, r0
 800bb62:	dc1a      	bgt.n	800bb9a <_strtod_l+0x26a>
 800bb64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb66:	230a      	movs	r3, #10
 800bb68:	fb03 2301 	mla	r3, r3, r1, r2
 800bb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb72:	1c51      	adds	r1, r2, #1
 800bb74:	9115      	str	r1, [sp, #84]	; 0x54
 800bb76:	7852      	ldrb	r2, [r2, #1]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	e7c9      	b.n	800bb10 <_strtod_l+0x1e0>
 800bb7c:	4658      	mov	r0, fp
 800bb7e:	e7d2      	b.n	800bb26 <_strtod_l+0x1f6>
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	f103 0301 	add.w	r3, r3, #1
 800bb86:	dc03      	bgt.n	800bb90 <_strtod_l+0x260>
 800bb88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb8a:	434f      	muls	r7, r1
 800bb8c:	9709      	str	r7, [sp, #36]	; 0x24
 800bb8e:	e7e1      	b.n	800bb54 <_strtod_l+0x224>
 800bb90:	2b10      	cmp	r3, #16
 800bb92:	bfd8      	it	le
 800bb94:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bb98:	e7dc      	b.n	800bb54 <_strtod_l+0x224>
 800bb9a:	2e10      	cmp	r6, #16
 800bb9c:	bfdc      	itt	le
 800bb9e:	230a      	movle	r3, #10
 800bba0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bba4:	e7e3      	b.n	800bb6e <_strtod_l+0x23e>
 800bba6:	2300      	movs	r3, #0
 800bba8:	9305      	str	r3, [sp, #20]
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e780      	b.n	800bab0 <_strtod_l+0x180>
 800bbae:	f04f 0c00 	mov.w	ip, #0
 800bbb2:	1caa      	adds	r2, r5, #2
 800bbb4:	9215      	str	r2, [sp, #84]	; 0x54
 800bbb6:	78aa      	ldrb	r2, [r5, #2]
 800bbb8:	e788      	b.n	800bacc <_strtod_l+0x19c>
 800bbba:	f04f 0c01 	mov.w	ip, #1
 800bbbe:	e7f8      	b.n	800bbb2 <_strtod_l+0x282>
 800bbc0:	0800f508 	.word	0x0800f508
 800bbc4:	0800f504 	.word	0x0800f504
 800bbc8:	7ff00000 	.word	0x7ff00000
 800bbcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbce:	1c51      	adds	r1, r2, #1
 800bbd0:	9115      	str	r1, [sp, #84]	; 0x54
 800bbd2:	7852      	ldrb	r2, [r2, #1]
 800bbd4:	2a30      	cmp	r2, #48	; 0x30
 800bbd6:	d0f9      	beq.n	800bbcc <_strtod_l+0x29c>
 800bbd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bbdc:	2908      	cmp	r1, #8
 800bbde:	f63f af7a 	bhi.w	800bad6 <_strtod_l+0x1a6>
 800bbe2:	3a30      	subs	r2, #48	; 0x30
 800bbe4:	9208      	str	r2, [sp, #32]
 800bbe6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbe8:	920c      	str	r2, [sp, #48]	; 0x30
 800bbea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbec:	1c57      	adds	r7, r2, #1
 800bbee:	9715      	str	r7, [sp, #84]	; 0x54
 800bbf0:	7852      	ldrb	r2, [r2, #1]
 800bbf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bbf6:	f1be 0f09 	cmp.w	lr, #9
 800bbfa:	d938      	bls.n	800bc6e <_strtod_l+0x33e>
 800bbfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbfe:	1a7f      	subs	r7, r7, r1
 800bc00:	2f08      	cmp	r7, #8
 800bc02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bc06:	dc03      	bgt.n	800bc10 <_strtod_l+0x2e0>
 800bc08:	9908      	ldr	r1, [sp, #32]
 800bc0a:	428f      	cmp	r7, r1
 800bc0c:	bfa8      	it	ge
 800bc0e:	460f      	movge	r7, r1
 800bc10:	f1bc 0f00 	cmp.w	ip, #0
 800bc14:	d000      	beq.n	800bc18 <_strtod_l+0x2e8>
 800bc16:	427f      	negs	r7, r7
 800bc18:	2e00      	cmp	r6, #0
 800bc1a:	d14f      	bne.n	800bcbc <_strtod_l+0x38c>
 800bc1c:	9904      	ldr	r1, [sp, #16]
 800bc1e:	4301      	orrs	r1, r0
 800bc20:	f47f aec1 	bne.w	800b9a6 <_strtod_l+0x76>
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f47f aedb 	bne.w	800b9e0 <_strtod_l+0xb0>
 800bc2a:	2a69      	cmp	r2, #105	; 0x69
 800bc2c:	d029      	beq.n	800bc82 <_strtod_l+0x352>
 800bc2e:	dc26      	bgt.n	800bc7e <_strtod_l+0x34e>
 800bc30:	2a49      	cmp	r2, #73	; 0x49
 800bc32:	d026      	beq.n	800bc82 <_strtod_l+0x352>
 800bc34:	2a4e      	cmp	r2, #78	; 0x4e
 800bc36:	f47f aed3 	bne.w	800b9e0 <_strtod_l+0xb0>
 800bc3a:	499b      	ldr	r1, [pc, #620]	; (800bea8 <_strtod_l+0x578>)
 800bc3c:	a815      	add	r0, sp, #84	; 0x54
 800bc3e:	f001 ff83 	bl	800db48 <__match>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	f43f aecc 	beq.w	800b9e0 <_strtod_l+0xb0>
 800bc48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b28      	cmp	r3, #40	; 0x28
 800bc4e:	d12f      	bne.n	800bcb0 <_strtod_l+0x380>
 800bc50:	4996      	ldr	r1, [pc, #600]	; (800beac <_strtod_l+0x57c>)
 800bc52:	aa18      	add	r2, sp, #96	; 0x60
 800bc54:	a815      	add	r0, sp, #84	; 0x54
 800bc56:	f001 ff8b 	bl	800db70 <__hexnan>
 800bc5a:	2805      	cmp	r0, #5
 800bc5c:	d128      	bne.n	800bcb0 <_strtod_l+0x380>
 800bc5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bc68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bc6c:	e69b      	b.n	800b9a6 <_strtod_l+0x76>
 800bc6e:	9f08      	ldr	r7, [sp, #32]
 800bc70:	210a      	movs	r1, #10
 800bc72:	fb01 2107 	mla	r1, r1, r7, r2
 800bc76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc7a:	9208      	str	r2, [sp, #32]
 800bc7c:	e7b5      	b.n	800bbea <_strtod_l+0x2ba>
 800bc7e:	2a6e      	cmp	r2, #110	; 0x6e
 800bc80:	e7d9      	b.n	800bc36 <_strtod_l+0x306>
 800bc82:	498b      	ldr	r1, [pc, #556]	; (800beb0 <_strtod_l+0x580>)
 800bc84:	a815      	add	r0, sp, #84	; 0x54
 800bc86:	f001 ff5f 	bl	800db48 <__match>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f43f aea8 	beq.w	800b9e0 <_strtod_l+0xb0>
 800bc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc92:	4988      	ldr	r1, [pc, #544]	; (800beb4 <_strtod_l+0x584>)
 800bc94:	3b01      	subs	r3, #1
 800bc96:	a815      	add	r0, sp, #84	; 0x54
 800bc98:	9315      	str	r3, [sp, #84]	; 0x54
 800bc9a:	f001 ff55 	bl	800db48 <__match>
 800bc9e:	b910      	cbnz	r0, 800bca6 <_strtod_l+0x376>
 800bca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bca2:	3301      	adds	r3, #1
 800bca4:	9315      	str	r3, [sp, #84]	; 0x54
 800bca6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bec4 <_strtod_l+0x594>
 800bcaa:	f04f 0800 	mov.w	r8, #0
 800bcae:	e67a      	b.n	800b9a6 <_strtod_l+0x76>
 800bcb0:	4881      	ldr	r0, [pc, #516]	; (800beb8 <_strtod_l+0x588>)
 800bcb2:	f001 fc65 	bl	800d580 <nan>
 800bcb6:	ec59 8b10 	vmov	r8, r9, d0
 800bcba:	e674      	b.n	800b9a6 <_strtod_l+0x76>
 800bcbc:	9b05      	ldr	r3, [sp, #20]
 800bcbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc0:	1afb      	subs	r3, r7, r3
 800bcc2:	f1bb 0f00 	cmp.w	fp, #0
 800bcc6:	bf08      	it	eq
 800bcc8:	46b3      	moveq	fp, r6
 800bcca:	2e10      	cmp	r6, #16
 800bccc:	9308      	str	r3, [sp, #32]
 800bcce:	4635      	mov	r5, r6
 800bcd0:	bfa8      	it	ge
 800bcd2:	2510      	movge	r5, #16
 800bcd4:	f7f4 fc1e 	bl	8000514 <__aeabi_ui2d>
 800bcd8:	2e09      	cmp	r6, #9
 800bcda:	4680      	mov	r8, r0
 800bcdc:	4689      	mov	r9, r1
 800bcde:	dd13      	ble.n	800bd08 <_strtod_l+0x3d8>
 800bce0:	4b76      	ldr	r3, [pc, #472]	; (800bebc <_strtod_l+0x58c>)
 800bce2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bce6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bcea:	f7f4 fc8d 	bl	8000608 <__aeabi_dmul>
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	4689      	mov	r9, r1
 800bcf4:	f7f4 fc0e 	bl	8000514 <__aeabi_ui2d>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4649      	mov	r1, r9
 800bd00:	f7f4 facc 	bl	800029c <__adddf3>
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	2e0f      	cmp	r6, #15
 800bd0a:	dc38      	bgt.n	800bd7e <_strtod_l+0x44e>
 800bd0c:	9b08      	ldr	r3, [sp, #32]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f43f ae49 	beq.w	800b9a6 <_strtod_l+0x76>
 800bd14:	dd24      	ble.n	800bd60 <_strtod_l+0x430>
 800bd16:	2b16      	cmp	r3, #22
 800bd18:	dc0b      	bgt.n	800bd32 <_strtod_l+0x402>
 800bd1a:	4968      	ldr	r1, [pc, #416]	; (800bebc <_strtod_l+0x58c>)
 800bd1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	f7f4 fc6e 	bl	8000608 <__aeabi_dmul>
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	4689      	mov	r9, r1
 800bd30:	e639      	b.n	800b9a6 <_strtod_l+0x76>
 800bd32:	9a08      	ldr	r2, [sp, #32]
 800bd34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	db20      	blt.n	800bd7e <_strtod_l+0x44e>
 800bd3c:	4c5f      	ldr	r4, [pc, #380]	; (800bebc <_strtod_l+0x58c>)
 800bd3e:	f1c6 060f 	rsb	r6, r6, #15
 800bd42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bd46:	4642      	mov	r2, r8
 800bd48:	464b      	mov	r3, r9
 800bd4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4e:	f7f4 fc5b 	bl	8000608 <__aeabi_dmul>
 800bd52:	9b08      	ldr	r3, [sp, #32]
 800bd54:	1b9e      	subs	r6, r3, r6
 800bd56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bd5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd5e:	e7e3      	b.n	800bd28 <_strtod_l+0x3f8>
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	3316      	adds	r3, #22
 800bd64:	db0b      	blt.n	800bd7e <_strtod_l+0x44e>
 800bd66:	9b05      	ldr	r3, [sp, #20]
 800bd68:	1bdf      	subs	r7, r3, r7
 800bd6a:	4b54      	ldr	r3, [pc, #336]	; (800bebc <_strtod_l+0x58c>)
 800bd6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd74:	4640      	mov	r0, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	f7f4 fd70 	bl	800085c <__aeabi_ddiv>
 800bd7c:	e7d6      	b.n	800bd2c <_strtod_l+0x3fc>
 800bd7e:	9b08      	ldr	r3, [sp, #32]
 800bd80:	1b75      	subs	r5, r6, r5
 800bd82:	441d      	add	r5, r3
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	dd70      	ble.n	800be6a <_strtod_l+0x53a>
 800bd88:	f015 030f 	ands.w	r3, r5, #15
 800bd8c:	d00a      	beq.n	800bda4 <_strtod_l+0x474>
 800bd8e:	494b      	ldr	r1, [pc, #300]	; (800bebc <_strtod_l+0x58c>)
 800bd90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd94:	4642      	mov	r2, r8
 800bd96:	464b      	mov	r3, r9
 800bd98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9c:	f7f4 fc34 	bl	8000608 <__aeabi_dmul>
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	f035 050f 	bics.w	r5, r5, #15
 800bda8:	d04d      	beq.n	800be46 <_strtod_l+0x516>
 800bdaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bdae:	dd22      	ble.n	800bdf6 <_strtod_l+0x4c6>
 800bdb0:	2500      	movs	r5, #0
 800bdb2:	46ab      	mov	fp, r5
 800bdb4:	9509      	str	r5, [sp, #36]	; 0x24
 800bdb6:	9505      	str	r5, [sp, #20]
 800bdb8:	2322      	movs	r3, #34	; 0x22
 800bdba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bec4 <_strtod_l+0x594>
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	f04f 0800 	mov.w	r8, #0
 800bdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f43f aded 	beq.w	800b9a6 <_strtod_l+0x76>
 800bdcc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7ff f924 	bl	800b01c <_Bfree>
 800bdd4:	9905      	ldr	r1, [sp, #20]
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff f920 	bl	800b01c <_Bfree>
 800bddc:	4659      	mov	r1, fp
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7ff f91c 	bl	800b01c <_Bfree>
 800bde4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff f918 	bl	800b01c <_Bfree>
 800bdec:	4629      	mov	r1, r5
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff f914 	bl	800b01c <_Bfree>
 800bdf4:	e5d7      	b.n	800b9a6 <_strtod_l+0x76>
 800bdf6:	4b32      	ldr	r3, [pc, #200]	; (800bec0 <_strtod_l+0x590>)
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	112d      	asrs	r5, r5, #4
 800bdfe:	4640      	mov	r0, r8
 800be00:	4649      	mov	r1, r9
 800be02:	469a      	mov	sl, r3
 800be04:	2d01      	cmp	r5, #1
 800be06:	dc21      	bgt.n	800be4c <_strtod_l+0x51c>
 800be08:	b10b      	cbz	r3, 800be0e <_strtod_l+0x4de>
 800be0a:	4680      	mov	r8, r0
 800be0c:	4689      	mov	r9, r1
 800be0e:	492c      	ldr	r1, [pc, #176]	; (800bec0 <_strtod_l+0x590>)
 800be10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800be14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be18:	4642      	mov	r2, r8
 800be1a:	464b      	mov	r3, r9
 800be1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be20:	f7f4 fbf2 	bl	8000608 <__aeabi_dmul>
 800be24:	4b27      	ldr	r3, [pc, #156]	; (800bec4 <_strtod_l+0x594>)
 800be26:	460a      	mov	r2, r1
 800be28:	400b      	ands	r3, r1
 800be2a:	4927      	ldr	r1, [pc, #156]	; (800bec8 <_strtod_l+0x598>)
 800be2c:	428b      	cmp	r3, r1
 800be2e:	4680      	mov	r8, r0
 800be30:	d8be      	bhi.n	800bdb0 <_strtod_l+0x480>
 800be32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be36:	428b      	cmp	r3, r1
 800be38:	bf86      	itte	hi
 800be3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800becc <_strtod_l+0x59c>
 800be3e:	f04f 38ff 	movhi.w	r8, #4294967295
 800be42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800be46:	2300      	movs	r3, #0
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	e07b      	b.n	800bf44 <_strtod_l+0x614>
 800be4c:	07ea      	lsls	r2, r5, #31
 800be4e:	d505      	bpl.n	800be5c <_strtod_l+0x52c>
 800be50:	9b04      	ldr	r3, [sp, #16]
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fbd7 	bl	8000608 <__aeabi_dmul>
 800be5a:	2301      	movs	r3, #1
 800be5c:	9a04      	ldr	r2, [sp, #16]
 800be5e:	3208      	adds	r2, #8
 800be60:	f10a 0a01 	add.w	sl, sl, #1
 800be64:	106d      	asrs	r5, r5, #1
 800be66:	9204      	str	r2, [sp, #16]
 800be68:	e7cc      	b.n	800be04 <_strtod_l+0x4d4>
 800be6a:	d0ec      	beq.n	800be46 <_strtod_l+0x516>
 800be6c:	426d      	negs	r5, r5
 800be6e:	f015 020f 	ands.w	r2, r5, #15
 800be72:	d00a      	beq.n	800be8a <_strtod_l+0x55a>
 800be74:	4b11      	ldr	r3, [pc, #68]	; (800bebc <_strtod_l+0x58c>)
 800be76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be7a:	4640      	mov	r0, r8
 800be7c:	4649      	mov	r1, r9
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fceb 	bl	800085c <__aeabi_ddiv>
 800be86:	4680      	mov	r8, r0
 800be88:	4689      	mov	r9, r1
 800be8a:	112d      	asrs	r5, r5, #4
 800be8c:	d0db      	beq.n	800be46 <_strtod_l+0x516>
 800be8e:	2d1f      	cmp	r5, #31
 800be90:	dd1e      	ble.n	800bed0 <_strtod_l+0x5a0>
 800be92:	2500      	movs	r5, #0
 800be94:	46ab      	mov	fp, r5
 800be96:	9509      	str	r5, [sp, #36]	; 0x24
 800be98:	9505      	str	r5, [sp, #20]
 800be9a:	2322      	movs	r3, #34	; 0x22
 800be9c:	f04f 0800 	mov.w	r8, #0
 800bea0:	f04f 0900 	mov.w	r9, #0
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	e78d      	b.n	800bdc4 <_strtod_l+0x494>
 800bea8:	0800f2f1 	.word	0x0800f2f1
 800beac:	0800f51c 	.word	0x0800f51c
 800beb0:	0800f2e9 	.word	0x0800f2e9
 800beb4:	0800f31e 	.word	0x0800f31e
 800beb8:	0800f6c8 	.word	0x0800f6c8
 800bebc:	0800f430 	.word	0x0800f430
 800bec0:	0800f408 	.word	0x0800f408
 800bec4:	7ff00000 	.word	0x7ff00000
 800bec8:	7ca00000 	.word	0x7ca00000
 800becc:	7fefffff 	.word	0x7fefffff
 800bed0:	f015 0310 	ands.w	r3, r5, #16
 800bed4:	bf18      	it	ne
 800bed6:	236a      	movne	r3, #106	; 0x6a
 800bed8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c27c <_strtod_l+0x94c>
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	4640      	mov	r0, r8
 800bee0:	4649      	mov	r1, r9
 800bee2:	2300      	movs	r3, #0
 800bee4:	07ea      	lsls	r2, r5, #31
 800bee6:	d504      	bpl.n	800bef2 <_strtod_l+0x5c2>
 800bee8:	e9da 2300 	ldrd	r2, r3, [sl]
 800beec:	f7f4 fb8c 	bl	8000608 <__aeabi_dmul>
 800bef0:	2301      	movs	r3, #1
 800bef2:	106d      	asrs	r5, r5, #1
 800bef4:	f10a 0a08 	add.w	sl, sl, #8
 800bef8:	d1f4      	bne.n	800bee4 <_strtod_l+0x5b4>
 800befa:	b10b      	cbz	r3, 800bf00 <_strtod_l+0x5d0>
 800befc:	4680      	mov	r8, r0
 800befe:	4689      	mov	r9, r1
 800bf00:	9b04      	ldr	r3, [sp, #16]
 800bf02:	b1bb      	cbz	r3, 800bf34 <_strtod_l+0x604>
 800bf04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bf08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	4649      	mov	r1, r9
 800bf10:	dd10      	ble.n	800bf34 <_strtod_l+0x604>
 800bf12:	2b1f      	cmp	r3, #31
 800bf14:	f340 811e 	ble.w	800c154 <_strtod_l+0x824>
 800bf18:	2b34      	cmp	r3, #52	; 0x34
 800bf1a:	bfde      	ittt	le
 800bf1c:	f04f 33ff 	movle.w	r3, #4294967295
 800bf20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bf24:	4093      	lslle	r3, r2
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	bfcc      	ite	gt
 800bf2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bf30:	ea03 0901 	andle.w	r9, r3, r1
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	f7f4 fdcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1a6      	bne.n	800be92 <_strtod_l+0x562>
 800bf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf4a:	4633      	mov	r3, r6
 800bf4c:	465a      	mov	r2, fp
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f7ff f8cc 	bl	800b0ec <__s2b>
 800bf54:	9009      	str	r0, [sp, #36]	; 0x24
 800bf56:	2800      	cmp	r0, #0
 800bf58:	f43f af2a 	beq.w	800bdb0 <_strtod_l+0x480>
 800bf5c:	9a08      	ldr	r2, [sp, #32]
 800bf5e:	9b05      	ldr	r3, [sp, #20]
 800bf60:	2a00      	cmp	r2, #0
 800bf62:	eba3 0307 	sub.w	r3, r3, r7
 800bf66:	bfa8      	it	ge
 800bf68:	2300      	movge	r3, #0
 800bf6a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf6c:	2500      	movs	r5, #0
 800bf6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf72:	9312      	str	r3, [sp, #72]	; 0x48
 800bf74:	46ab      	mov	fp, r5
 800bf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf78:	4620      	mov	r0, r4
 800bf7a:	6859      	ldr	r1, [r3, #4]
 800bf7c:	f7ff f80e 	bl	800af9c <_Balloc>
 800bf80:	9005      	str	r0, [sp, #20]
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f af18 	beq.w	800bdb8 <_strtod_l+0x488>
 800bf88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	3202      	adds	r2, #2
 800bf8e:	f103 010c 	add.w	r1, r3, #12
 800bf92:	0092      	lsls	r2, r2, #2
 800bf94:	300c      	adds	r0, #12
 800bf96:	f7fe f870 	bl	800a07a <memcpy>
 800bf9a:	ec49 8b10 	vmov	d0, r8, r9
 800bf9e:	aa18      	add	r2, sp, #96	; 0x60
 800bfa0:	a917      	add	r1, sp, #92	; 0x5c
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7ff fbd6 	bl	800b754 <__d2b>
 800bfa8:	ec49 8b18 	vmov	d8, r8, r9
 800bfac:	9016      	str	r0, [sp, #88]	; 0x58
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f43f af02 	beq.w	800bdb8 <_strtod_l+0x488>
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f7ff f930 	bl	800b21c <__i2b>
 800bfbc:	4683      	mov	fp, r0
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	f43f aefa 	beq.w	800bdb8 <_strtod_l+0x488>
 800bfc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bfc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	bfab      	itete	ge
 800bfcc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bfce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bfd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bfd2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bfd6:	bfac      	ite	ge
 800bfd8:	eb06 0a03 	addge.w	sl, r6, r3
 800bfdc:	1b9f      	sublt	r7, r3, r6
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	1af6      	subs	r6, r6, r3
 800bfe2:	4416      	add	r6, r2
 800bfe4:	4ba0      	ldr	r3, [pc, #640]	; (800c268 <_strtod_l+0x938>)
 800bfe6:	3e01      	subs	r6, #1
 800bfe8:	429e      	cmp	r6, r3
 800bfea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bfee:	f280 80c4 	bge.w	800c17a <_strtod_l+0x84a>
 800bff2:	1b9b      	subs	r3, r3, r6
 800bff4:	2b1f      	cmp	r3, #31
 800bff6:	eba2 0203 	sub.w	r2, r2, r3
 800bffa:	f04f 0101 	mov.w	r1, #1
 800bffe:	f300 80b0 	bgt.w	800c162 <_strtod_l+0x832>
 800c002:	fa01 f303 	lsl.w	r3, r1, r3
 800c006:	930e      	str	r3, [sp, #56]	; 0x38
 800c008:	2300      	movs	r3, #0
 800c00a:	930d      	str	r3, [sp, #52]	; 0x34
 800c00c:	eb0a 0602 	add.w	r6, sl, r2
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	45b2      	cmp	sl, r6
 800c014:	4417      	add	r7, r2
 800c016:	441f      	add	r7, r3
 800c018:	4653      	mov	r3, sl
 800c01a:	bfa8      	it	ge
 800c01c:	4633      	movge	r3, r6
 800c01e:	42bb      	cmp	r3, r7
 800c020:	bfa8      	it	ge
 800c022:	463b      	movge	r3, r7
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfc2      	ittt	gt
 800c028:	1af6      	subgt	r6, r6, r3
 800c02a:	1aff      	subgt	r7, r7, r3
 800c02c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd17      	ble.n	800c066 <_strtod_l+0x736>
 800c036:	4659      	mov	r1, fp
 800c038:	461a      	mov	r2, r3
 800c03a:	4620      	mov	r0, r4
 800c03c:	f7ff f9ae 	bl	800b39c <__pow5mult>
 800c040:	4683      	mov	fp, r0
 800c042:	2800      	cmp	r0, #0
 800c044:	f43f aeb8 	beq.w	800bdb8 <_strtod_l+0x488>
 800c048:	4601      	mov	r1, r0
 800c04a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7ff f8fb 	bl	800b248 <__multiply>
 800c052:	900b      	str	r0, [sp, #44]	; 0x2c
 800c054:	2800      	cmp	r0, #0
 800c056:	f43f aeaf 	beq.w	800bdb8 <_strtod_l+0x488>
 800c05a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c05c:	4620      	mov	r0, r4
 800c05e:	f7fe ffdd 	bl	800b01c <_Bfree>
 800c062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c064:	9316      	str	r3, [sp, #88]	; 0x58
 800c066:	2e00      	cmp	r6, #0
 800c068:	f300 808c 	bgt.w	800c184 <_strtod_l+0x854>
 800c06c:	9b08      	ldr	r3, [sp, #32]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	dd08      	ble.n	800c084 <_strtod_l+0x754>
 800c072:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c074:	9905      	ldr	r1, [sp, #20]
 800c076:	4620      	mov	r0, r4
 800c078:	f7ff f990 	bl	800b39c <__pow5mult>
 800c07c:	9005      	str	r0, [sp, #20]
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f ae9a 	beq.w	800bdb8 <_strtod_l+0x488>
 800c084:	2f00      	cmp	r7, #0
 800c086:	dd08      	ble.n	800c09a <_strtod_l+0x76a>
 800c088:	9905      	ldr	r1, [sp, #20]
 800c08a:	463a      	mov	r2, r7
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7ff f9df 	bl	800b450 <__lshift>
 800c092:	9005      	str	r0, [sp, #20]
 800c094:	2800      	cmp	r0, #0
 800c096:	f43f ae8f 	beq.w	800bdb8 <_strtod_l+0x488>
 800c09a:	f1ba 0f00 	cmp.w	sl, #0
 800c09e:	dd08      	ble.n	800c0b2 <_strtod_l+0x782>
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	4652      	mov	r2, sl
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7ff f9d3 	bl	800b450 <__lshift>
 800c0aa:	4683      	mov	fp, r0
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f43f ae83 	beq.w	800bdb8 <_strtod_l+0x488>
 800c0b2:	9a05      	ldr	r2, [sp, #20]
 800c0b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7ff fa52 	bl	800b560 <__mdiff>
 800c0bc:	4605      	mov	r5, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f ae7a 	beq.w	800bdb8 <_strtod_l+0x488>
 800c0c4:	68c3      	ldr	r3, [r0, #12]
 800c0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60c3      	str	r3, [r0, #12]
 800c0cc:	4659      	mov	r1, fp
 800c0ce:	f7ff fa2b 	bl	800b528 <__mcmp>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	da60      	bge.n	800c198 <_strtod_l+0x868>
 800c0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0d8:	ea53 0308 	orrs.w	r3, r3, r8
 800c0dc:	f040 8084 	bne.w	800c1e8 <_strtod_l+0x8b8>
 800c0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d17f      	bne.n	800c1e8 <_strtod_l+0x8b8>
 800c0e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0ec:	0d1b      	lsrs	r3, r3, #20
 800c0ee:	051b      	lsls	r3, r3, #20
 800c0f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c0f4:	d978      	bls.n	800c1e8 <_strtod_l+0x8b8>
 800c0f6:	696b      	ldr	r3, [r5, #20]
 800c0f8:	b913      	cbnz	r3, 800c100 <_strtod_l+0x7d0>
 800c0fa:	692b      	ldr	r3, [r5, #16]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	dd73      	ble.n	800c1e8 <_strtod_l+0x8b8>
 800c100:	4629      	mov	r1, r5
 800c102:	2201      	movs	r2, #1
 800c104:	4620      	mov	r0, r4
 800c106:	f7ff f9a3 	bl	800b450 <__lshift>
 800c10a:	4659      	mov	r1, fp
 800c10c:	4605      	mov	r5, r0
 800c10e:	f7ff fa0b 	bl	800b528 <__mcmp>
 800c112:	2800      	cmp	r0, #0
 800c114:	dd68      	ble.n	800c1e8 <_strtod_l+0x8b8>
 800c116:	9904      	ldr	r1, [sp, #16]
 800c118:	4a54      	ldr	r2, [pc, #336]	; (800c26c <_strtod_l+0x93c>)
 800c11a:	464b      	mov	r3, r9
 800c11c:	2900      	cmp	r1, #0
 800c11e:	f000 8084 	beq.w	800c22a <_strtod_l+0x8fa>
 800c122:	ea02 0109 	and.w	r1, r2, r9
 800c126:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c12a:	dc7e      	bgt.n	800c22a <_strtod_l+0x8fa>
 800c12c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c130:	f77f aeb3 	ble.w	800be9a <_strtod_l+0x56a>
 800c134:	4b4e      	ldr	r3, [pc, #312]	; (800c270 <_strtod_l+0x940>)
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	2200      	movs	r2, #0
 800c13c:	f7f4 fa64 	bl	8000608 <__aeabi_dmul>
 800c140:	4b4a      	ldr	r3, [pc, #296]	; (800c26c <_strtod_l+0x93c>)
 800c142:	400b      	ands	r3, r1
 800c144:	4680      	mov	r8, r0
 800c146:	4689      	mov	r9, r1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f47f ae3f 	bne.w	800bdcc <_strtod_l+0x49c>
 800c14e:	2322      	movs	r3, #34	; 0x22
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	e63b      	b.n	800bdcc <_strtod_l+0x49c>
 800c154:	f04f 32ff 	mov.w	r2, #4294967295
 800c158:	fa02 f303 	lsl.w	r3, r2, r3
 800c15c:	ea03 0808 	and.w	r8, r3, r8
 800c160:	e6e8      	b.n	800bf34 <_strtod_l+0x604>
 800c162:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c166:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c16a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c16e:	36e2      	adds	r6, #226	; 0xe2
 800c170:	fa01 f306 	lsl.w	r3, r1, r6
 800c174:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c178:	e748      	b.n	800c00c <_strtod_l+0x6dc>
 800c17a:	2100      	movs	r1, #0
 800c17c:	2301      	movs	r3, #1
 800c17e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c182:	e743      	b.n	800c00c <_strtod_l+0x6dc>
 800c184:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c186:	4632      	mov	r2, r6
 800c188:	4620      	mov	r0, r4
 800c18a:	f7ff f961 	bl	800b450 <__lshift>
 800c18e:	9016      	str	r0, [sp, #88]	; 0x58
 800c190:	2800      	cmp	r0, #0
 800c192:	f47f af6b 	bne.w	800c06c <_strtod_l+0x73c>
 800c196:	e60f      	b.n	800bdb8 <_strtod_l+0x488>
 800c198:	46ca      	mov	sl, r9
 800c19a:	d171      	bne.n	800c280 <_strtod_l+0x950>
 800c19c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c19e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1a2:	b352      	cbz	r2, 800c1fa <_strtod_l+0x8ca>
 800c1a4:	4a33      	ldr	r2, [pc, #204]	; (800c274 <_strtod_l+0x944>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d12a      	bne.n	800c200 <_strtod_l+0x8d0>
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	4641      	mov	r1, r8
 800c1ae:	b1fb      	cbz	r3, 800c1f0 <_strtod_l+0x8c0>
 800c1b0:	4b2e      	ldr	r3, [pc, #184]	; (800c26c <_strtod_l+0x93c>)
 800c1b2:	ea09 0303 	and.w	r3, r9, r3
 800c1b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c1be:	d81a      	bhi.n	800c1f6 <_strtod_l+0x8c6>
 800c1c0:	0d1b      	lsrs	r3, r3, #20
 800c1c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	d118      	bne.n	800c200 <_strtod_l+0x8d0>
 800c1ce:	4b2a      	ldr	r3, [pc, #168]	; (800c278 <_strtod_l+0x948>)
 800c1d0:	459a      	cmp	sl, r3
 800c1d2:	d102      	bne.n	800c1da <_strtod_l+0x8aa>
 800c1d4:	3101      	adds	r1, #1
 800c1d6:	f43f adef 	beq.w	800bdb8 <_strtod_l+0x488>
 800c1da:	4b24      	ldr	r3, [pc, #144]	; (800c26c <_strtod_l+0x93c>)
 800c1dc:	ea0a 0303 	and.w	r3, sl, r3
 800c1e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c1e4:	f04f 0800 	mov.w	r8, #0
 800c1e8:	9b04      	ldr	r3, [sp, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1a2      	bne.n	800c134 <_strtod_l+0x804>
 800c1ee:	e5ed      	b.n	800bdcc <_strtod_l+0x49c>
 800c1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f4:	e7e9      	b.n	800c1ca <_strtod_l+0x89a>
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	e7e7      	b.n	800c1ca <_strtod_l+0x89a>
 800c1fa:	ea53 0308 	orrs.w	r3, r3, r8
 800c1fe:	d08a      	beq.n	800c116 <_strtod_l+0x7e6>
 800c200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c202:	b1e3      	cbz	r3, 800c23e <_strtod_l+0x90e>
 800c204:	ea13 0f0a 	tst.w	r3, sl
 800c208:	d0ee      	beq.n	800c1e8 <_strtod_l+0x8b8>
 800c20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c20c:	9a04      	ldr	r2, [sp, #16]
 800c20e:	4640      	mov	r0, r8
 800c210:	4649      	mov	r1, r9
 800c212:	b1c3      	cbz	r3, 800c246 <_strtod_l+0x916>
 800c214:	f7ff fb6f 	bl	800b8f6 <sulp>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	ec51 0b18 	vmov	r0, r1, d8
 800c220:	f7f4 f83c 	bl	800029c <__adddf3>
 800c224:	4680      	mov	r8, r0
 800c226:	4689      	mov	r9, r1
 800c228:	e7de      	b.n	800c1e8 <_strtod_l+0x8b8>
 800c22a:	4013      	ands	r3, r2
 800c22c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c230:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c234:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c238:	f04f 38ff 	mov.w	r8, #4294967295
 800c23c:	e7d4      	b.n	800c1e8 <_strtod_l+0x8b8>
 800c23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c240:	ea13 0f08 	tst.w	r3, r8
 800c244:	e7e0      	b.n	800c208 <_strtod_l+0x8d8>
 800c246:	f7ff fb56 	bl	800b8f6 <sulp>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	ec51 0b18 	vmov	r0, r1, d8
 800c252:	f7f4 f821 	bl	8000298 <__aeabi_dsub>
 800c256:	2200      	movs	r2, #0
 800c258:	2300      	movs	r3, #0
 800c25a:	4680      	mov	r8, r0
 800c25c:	4689      	mov	r9, r1
 800c25e:	f7f4 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c262:	2800      	cmp	r0, #0
 800c264:	d0c0      	beq.n	800c1e8 <_strtod_l+0x8b8>
 800c266:	e618      	b.n	800be9a <_strtod_l+0x56a>
 800c268:	fffffc02 	.word	0xfffffc02
 800c26c:	7ff00000 	.word	0x7ff00000
 800c270:	39500000 	.word	0x39500000
 800c274:	000fffff 	.word	0x000fffff
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	0800f530 	.word	0x0800f530
 800c280:	4659      	mov	r1, fp
 800c282:	4628      	mov	r0, r5
 800c284:	f7ff fac0 	bl	800b808 <__ratio>
 800c288:	ec57 6b10 	vmov	r6, r7, d0
 800c28c:	ee10 0a10 	vmov	r0, s0
 800c290:	2200      	movs	r2, #0
 800c292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c296:	4639      	mov	r1, r7
 800c298:	f7f4 fc32 	bl	8000b00 <__aeabi_dcmple>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d071      	beq.n	800c384 <_strtod_l+0xa54>
 800c2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d17c      	bne.n	800c3a0 <_strtod_l+0xa70>
 800c2a6:	f1b8 0f00 	cmp.w	r8, #0
 800c2aa:	d15a      	bne.n	800c362 <_strtod_l+0xa32>
 800c2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d15d      	bne.n	800c370 <_strtod_l+0xa40>
 800c2b4:	4b90      	ldr	r3, [pc, #576]	; (800c4f8 <_strtod_l+0xbc8>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	f7f4 fc16 	bl	8000aec <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d15c      	bne.n	800c37e <_strtod_l+0xa4e>
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	4b8c      	ldr	r3, [pc, #560]	; (800c4fc <_strtod_l+0xbcc>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f7f4 f99c 	bl	8000608 <__aeabi_dmul>
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	460f      	mov	r7, r1
 800c2d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c2d8:	9606      	str	r6, [sp, #24]
 800c2da:	9307      	str	r3, [sp, #28]
 800c2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c2e4:	4b86      	ldr	r3, [pc, #536]	; (800c500 <_strtod_l+0xbd0>)
 800c2e6:	ea0a 0303 	and.w	r3, sl, r3
 800c2ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c2ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ee:	4b85      	ldr	r3, [pc, #532]	; (800c504 <_strtod_l+0xbd4>)
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	f040 8090 	bne.w	800c416 <_strtod_l+0xae6>
 800c2f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c2fa:	ec49 8b10 	vmov	d0, r8, r9
 800c2fe:	f7ff f9b9 	bl	800b674 <__ulp>
 800c302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c306:	ec51 0b10 	vmov	r0, r1, d0
 800c30a:	f7f4 f97d 	bl	8000608 <__aeabi_dmul>
 800c30e:	4642      	mov	r2, r8
 800c310:	464b      	mov	r3, r9
 800c312:	f7f3 ffc3 	bl	800029c <__adddf3>
 800c316:	460b      	mov	r3, r1
 800c318:	4979      	ldr	r1, [pc, #484]	; (800c500 <_strtod_l+0xbd0>)
 800c31a:	4a7b      	ldr	r2, [pc, #492]	; (800c508 <_strtod_l+0xbd8>)
 800c31c:	4019      	ands	r1, r3
 800c31e:	4291      	cmp	r1, r2
 800c320:	4680      	mov	r8, r0
 800c322:	d944      	bls.n	800c3ae <_strtod_l+0xa7e>
 800c324:	ee18 2a90 	vmov	r2, s17
 800c328:	4b78      	ldr	r3, [pc, #480]	; (800c50c <_strtod_l+0xbdc>)
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d104      	bne.n	800c338 <_strtod_l+0xa08>
 800c32e:	ee18 3a10 	vmov	r3, s16
 800c332:	3301      	adds	r3, #1
 800c334:	f43f ad40 	beq.w	800bdb8 <_strtod_l+0x488>
 800c338:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c50c <_strtod_l+0xbdc>
 800c33c:	f04f 38ff 	mov.w	r8, #4294967295
 800c340:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c342:	4620      	mov	r0, r4
 800c344:	f7fe fe6a 	bl	800b01c <_Bfree>
 800c348:	9905      	ldr	r1, [sp, #20]
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7fe fe66 	bl	800b01c <_Bfree>
 800c350:	4659      	mov	r1, fp
 800c352:	4620      	mov	r0, r4
 800c354:	f7fe fe62 	bl	800b01c <_Bfree>
 800c358:	4629      	mov	r1, r5
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7fe fe5e 	bl	800b01c <_Bfree>
 800c360:	e609      	b.n	800bf76 <_strtod_l+0x646>
 800c362:	f1b8 0f01 	cmp.w	r8, #1
 800c366:	d103      	bne.n	800c370 <_strtod_l+0xa40>
 800c368:	f1b9 0f00 	cmp.w	r9, #0
 800c36c:	f43f ad95 	beq.w	800be9a <_strtod_l+0x56a>
 800c370:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c4c8 <_strtod_l+0xb98>
 800c374:	4f60      	ldr	r7, [pc, #384]	; (800c4f8 <_strtod_l+0xbc8>)
 800c376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c37a:	2600      	movs	r6, #0
 800c37c:	e7ae      	b.n	800c2dc <_strtod_l+0x9ac>
 800c37e:	4f5f      	ldr	r7, [pc, #380]	; (800c4fc <_strtod_l+0xbcc>)
 800c380:	2600      	movs	r6, #0
 800c382:	e7a7      	b.n	800c2d4 <_strtod_l+0x9a4>
 800c384:	4b5d      	ldr	r3, [pc, #372]	; (800c4fc <_strtod_l+0xbcc>)
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	2200      	movs	r2, #0
 800c38c:	f7f4 f93c 	bl	8000608 <__aeabi_dmul>
 800c390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c392:	4606      	mov	r6, r0
 800c394:	460f      	mov	r7, r1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d09c      	beq.n	800c2d4 <_strtod_l+0x9a4>
 800c39a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c39e:	e79d      	b.n	800c2dc <_strtod_l+0x9ac>
 800c3a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c4d0 <_strtod_l+0xba0>
 800c3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3a8:	ec57 6b17 	vmov	r6, r7, d7
 800c3ac:	e796      	b.n	800c2dc <_strtod_l+0x9ac>
 800c3ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	46ca      	mov	sl, r9
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1c2      	bne.n	800c340 <_strtod_l+0xa10>
 800c3ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3c0:	0d1b      	lsrs	r3, r3, #20
 800c3c2:	051b      	lsls	r3, r3, #20
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d1bb      	bne.n	800c340 <_strtod_l+0xa10>
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f4 fc7c 	bl	8000cc8 <__aeabi_d2lz>
 800c3d0:	f7f4 f8ec 	bl	80005ac <__aeabi_l2d>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3e6:	ea43 0308 	orr.w	r3, r3, r8
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	d054      	beq.n	800c49c <_strtod_l+0xb6c>
 800c3f2:	a339      	add	r3, pc, #228	; (adr r3, 800c4d8 <_strtod_l+0xba8>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f4 fb78 	bl	8000aec <__aeabi_dcmplt>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	f47f ace5 	bne.w	800bdcc <_strtod_l+0x49c>
 800c402:	a337      	add	r3, pc, #220	; (adr r3, 800c4e0 <_strtod_l+0xbb0>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	4630      	mov	r0, r6
 800c40a:	4639      	mov	r1, r7
 800c40c:	f7f4 fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 800c410:	2800      	cmp	r0, #0
 800c412:	d095      	beq.n	800c340 <_strtod_l+0xa10>
 800c414:	e4da      	b.n	800bdcc <_strtod_l+0x49c>
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	b333      	cbz	r3, 800c468 <_strtod_l+0xb38>
 800c41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c41c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c420:	d822      	bhi.n	800c468 <_strtod_l+0xb38>
 800c422:	a331      	add	r3, pc, #196	; (adr r3, 800c4e8 <_strtod_l+0xbb8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	4630      	mov	r0, r6
 800c42a:	4639      	mov	r1, r7
 800c42c:	f7f4 fb68 	bl	8000b00 <__aeabi_dcmple>
 800c430:	b1a0      	cbz	r0, 800c45c <_strtod_l+0xb2c>
 800c432:	4639      	mov	r1, r7
 800c434:	4630      	mov	r0, r6
 800c436:	f7f4 fbbf 	bl	8000bb8 <__aeabi_d2uiz>
 800c43a:	2801      	cmp	r0, #1
 800c43c:	bf38      	it	cc
 800c43e:	2001      	movcc	r0, #1
 800c440:	f7f4 f868 	bl	8000514 <__aeabi_ui2d>
 800c444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c446:	4606      	mov	r6, r0
 800c448:	460f      	mov	r7, r1
 800c44a:	bb23      	cbnz	r3, 800c496 <_strtod_l+0xb66>
 800c44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c450:	9010      	str	r0, [sp, #64]	; 0x40
 800c452:	9311      	str	r3, [sp, #68]	; 0x44
 800c454:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c458:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c45e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c460:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	930f      	str	r3, [sp, #60]	; 0x3c
 800c468:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c46c:	eeb0 0a48 	vmov.f32	s0, s16
 800c470:	eef0 0a68 	vmov.f32	s1, s17
 800c474:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c478:	f7ff f8fc 	bl	800b674 <__ulp>
 800c47c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c480:	ec53 2b10 	vmov	r2, r3, d0
 800c484:	f7f4 f8c0 	bl	8000608 <__aeabi_dmul>
 800c488:	ec53 2b18 	vmov	r2, r3, d8
 800c48c:	f7f3 ff06 	bl	800029c <__adddf3>
 800c490:	4680      	mov	r8, r0
 800c492:	4689      	mov	r9, r1
 800c494:	e78d      	b.n	800c3b2 <_strtod_l+0xa82>
 800c496:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c49a:	e7db      	b.n	800c454 <_strtod_l+0xb24>
 800c49c:	a314      	add	r3, pc, #80	; (adr r3, 800c4f0 <_strtod_l+0xbc0>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f4 fb23 	bl	8000aec <__aeabi_dcmplt>
 800c4a6:	e7b3      	b.n	800c410 <_strtod_l+0xae0>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c4ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	f7ff ba7c 	b.w	800b9ae <_strtod_l+0x7e>
 800c4b6:	2a65      	cmp	r2, #101	; 0x65
 800c4b8:	f43f ab75 	beq.w	800bba6 <_strtod_l+0x276>
 800c4bc:	2a45      	cmp	r2, #69	; 0x45
 800c4be:	f43f ab72 	beq.w	800bba6 <_strtod_l+0x276>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	f7ff bbaa 	b.w	800bc1c <_strtod_l+0x2ec>
 800c4c8:	00000000 	.word	0x00000000
 800c4cc:	bff00000 	.word	0xbff00000
 800c4d0:	00000000 	.word	0x00000000
 800c4d4:	3ff00000 	.word	0x3ff00000
 800c4d8:	94a03595 	.word	0x94a03595
 800c4dc:	3fdfffff 	.word	0x3fdfffff
 800c4e0:	35afe535 	.word	0x35afe535
 800c4e4:	3fe00000 	.word	0x3fe00000
 800c4e8:	ffc00000 	.word	0xffc00000
 800c4ec:	41dfffff 	.word	0x41dfffff
 800c4f0:	94a03595 	.word	0x94a03595
 800c4f4:	3fcfffff 	.word	0x3fcfffff
 800c4f8:	3ff00000 	.word	0x3ff00000
 800c4fc:	3fe00000 	.word	0x3fe00000
 800c500:	7ff00000 	.word	0x7ff00000
 800c504:	7fe00000 	.word	0x7fe00000
 800c508:	7c9fffff 	.word	0x7c9fffff
 800c50c:	7fefffff 	.word	0x7fefffff

0800c510 <_strtod_r>:
 800c510:	4b01      	ldr	r3, [pc, #4]	; (800c518 <_strtod_r+0x8>)
 800c512:	f7ff ba0d 	b.w	800b930 <_strtod_l>
 800c516:	bf00      	nop
 800c518:	200000ec 	.word	0x200000ec

0800c51c <_strtol_l.constprop.0>:
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c522:	d001      	beq.n	800c528 <_strtol_l.constprop.0+0xc>
 800c524:	2b24      	cmp	r3, #36	; 0x24
 800c526:	d906      	bls.n	800c536 <_strtol_l.constprop.0+0x1a>
 800c528:	f7fd fd7a 	bl	800a020 <__errno>
 800c52c:	2316      	movs	r3, #22
 800c52e:	6003      	str	r3, [r0, #0]
 800c530:	2000      	movs	r0, #0
 800c532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c536:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c61c <_strtol_l.constprop.0+0x100>
 800c53a:	460d      	mov	r5, r1
 800c53c:	462e      	mov	r6, r5
 800c53e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c542:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c546:	f017 0708 	ands.w	r7, r7, #8
 800c54a:	d1f7      	bne.n	800c53c <_strtol_l.constprop.0+0x20>
 800c54c:	2c2d      	cmp	r4, #45	; 0x2d
 800c54e:	d132      	bne.n	800c5b6 <_strtol_l.constprop.0+0x9a>
 800c550:	782c      	ldrb	r4, [r5, #0]
 800c552:	2701      	movs	r7, #1
 800c554:	1cb5      	adds	r5, r6, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d05b      	beq.n	800c612 <_strtol_l.constprop.0+0xf6>
 800c55a:	2b10      	cmp	r3, #16
 800c55c:	d109      	bne.n	800c572 <_strtol_l.constprop.0+0x56>
 800c55e:	2c30      	cmp	r4, #48	; 0x30
 800c560:	d107      	bne.n	800c572 <_strtol_l.constprop.0+0x56>
 800c562:	782c      	ldrb	r4, [r5, #0]
 800c564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c568:	2c58      	cmp	r4, #88	; 0x58
 800c56a:	d14d      	bne.n	800c608 <_strtol_l.constprop.0+0xec>
 800c56c:	786c      	ldrb	r4, [r5, #1]
 800c56e:	2310      	movs	r3, #16
 800c570:	3502      	adds	r5, #2
 800c572:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c576:	f108 38ff 	add.w	r8, r8, #4294967295
 800c57a:	f04f 0e00 	mov.w	lr, #0
 800c57e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c582:	4676      	mov	r6, lr
 800c584:	fb03 8a19 	mls	sl, r3, r9, r8
 800c588:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c58c:	f1bc 0f09 	cmp.w	ip, #9
 800c590:	d816      	bhi.n	800c5c0 <_strtol_l.constprop.0+0xa4>
 800c592:	4664      	mov	r4, ip
 800c594:	42a3      	cmp	r3, r4
 800c596:	dd24      	ble.n	800c5e2 <_strtol_l.constprop.0+0xc6>
 800c598:	f1be 3fff 	cmp.w	lr, #4294967295
 800c59c:	d008      	beq.n	800c5b0 <_strtol_l.constprop.0+0x94>
 800c59e:	45b1      	cmp	r9, r6
 800c5a0:	d31c      	bcc.n	800c5dc <_strtol_l.constprop.0+0xc0>
 800c5a2:	d101      	bne.n	800c5a8 <_strtol_l.constprop.0+0x8c>
 800c5a4:	45a2      	cmp	sl, r4
 800c5a6:	db19      	blt.n	800c5dc <_strtol_l.constprop.0+0xc0>
 800c5a8:	fb06 4603 	mla	r6, r6, r3, r4
 800c5ac:	f04f 0e01 	mov.w	lr, #1
 800c5b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5b4:	e7e8      	b.n	800c588 <_strtol_l.constprop.0+0x6c>
 800c5b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c5b8:	bf04      	itt	eq
 800c5ba:	782c      	ldrbeq	r4, [r5, #0]
 800c5bc:	1cb5      	addeq	r5, r6, #2
 800c5be:	e7ca      	b.n	800c556 <_strtol_l.constprop.0+0x3a>
 800c5c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c5c4:	f1bc 0f19 	cmp.w	ip, #25
 800c5c8:	d801      	bhi.n	800c5ce <_strtol_l.constprop.0+0xb2>
 800c5ca:	3c37      	subs	r4, #55	; 0x37
 800c5cc:	e7e2      	b.n	800c594 <_strtol_l.constprop.0+0x78>
 800c5ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c5d2:	f1bc 0f19 	cmp.w	ip, #25
 800c5d6:	d804      	bhi.n	800c5e2 <_strtol_l.constprop.0+0xc6>
 800c5d8:	3c57      	subs	r4, #87	; 0x57
 800c5da:	e7db      	b.n	800c594 <_strtol_l.constprop.0+0x78>
 800c5dc:	f04f 3eff 	mov.w	lr, #4294967295
 800c5e0:	e7e6      	b.n	800c5b0 <_strtol_l.constprop.0+0x94>
 800c5e2:	f1be 3fff 	cmp.w	lr, #4294967295
 800c5e6:	d105      	bne.n	800c5f4 <_strtol_l.constprop.0+0xd8>
 800c5e8:	2322      	movs	r3, #34	; 0x22
 800c5ea:	6003      	str	r3, [r0, #0]
 800c5ec:	4646      	mov	r6, r8
 800c5ee:	b942      	cbnz	r2, 800c602 <_strtol_l.constprop.0+0xe6>
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	e79e      	b.n	800c532 <_strtol_l.constprop.0+0x16>
 800c5f4:	b107      	cbz	r7, 800c5f8 <_strtol_l.constprop.0+0xdc>
 800c5f6:	4276      	negs	r6, r6
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d0f9      	beq.n	800c5f0 <_strtol_l.constprop.0+0xd4>
 800c5fc:	f1be 0f00 	cmp.w	lr, #0
 800c600:	d000      	beq.n	800c604 <_strtol_l.constprop.0+0xe8>
 800c602:	1e69      	subs	r1, r5, #1
 800c604:	6011      	str	r1, [r2, #0]
 800c606:	e7f3      	b.n	800c5f0 <_strtol_l.constprop.0+0xd4>
 800c608:	2430      	movs	r4, #48	; 0x30
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1b1      	bne.n	800c572 <_strtol_l.constprop.0+0x56>
 800c60e:	2308      	movs	r3, #8
 800c610:	e7af      	b.n	800c572 <_strtol_l.constprop.0+0x56>
 800c612:	2c30      	cmp	r4, #48	; 0x30
 800c614:	d0a5      	beq.n	800c562 <_strtol_l.constprop.0+0x46>
 800c616:	230a      	movs	r3, #10
 800c618:	e7ab      	b.n	800c572 <_strtol_l.constprop.0+0x56>
 800c61a:	bf00      	nop
 800c61c:	0800f559 	.word	0x0800f559

0800c620 <_strtol_r>:
 800c620:	f7ff bf7c 	b.w	800c51c <_strtol_l.constprop.0>

0800c624 <__ssputs_r>:
 800c624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c628:	688e      	ldr	r6, [r1, #8]
 800c62a:	461f      	mov	r7, r3
 800c62c:	42be      	cmp	r6, r7
 800c62e:	680b      	ldr	r3, [r1, #0]
 800c630:	4682      	mov	sl, r0
 800c632:	460c      	mov	r4, r1
 800c634:	4690      	mov	r8, r2
 800c636:	d82c      	bhi.n	800c692 <__ssputs_r+0x6e>
 800c638:	898a      	ldrh	r2, [r1, #12]
 800c63a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c63e:	d026      	beq.n	800c68e <__ssputs_r+0x6a>
 800c640:	6965      	ldr	r5, [r4, #20]
 800c642:	6909      	ldr	r1, [r1, #16]
 800c644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c648:	eba3 0901 	sub.w	r9, r3, r1
 800c64c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c650:	1c7b      	adds	r3, r7, #1
 800c652:	444b      	add	r3, r9
 800c654:	106d      	asrs	r5, r5, #1
 800c656:	429d      	cmp	r5, r3
 800c658:	bf38      	it	cc
 800c65a:	461d      	movcc	r5, r3
 800c65c:	0553      	lsls	r3, r2, #21
 800c65e:	d527      	bpl.n	800c6b0 <__ssputs_r+0x8c>
 800c660:	4629      	mov	r1, r5
 800c662:	f7fe fc0f 	bl	800ae84 <_malloc_r>
 800c666:	4606      	mov	r6, r0
 800c668:	b360      	cbz	r0, 800c6c4 <__ssputs_r+0xa0>
 800c66a:	6921      	ldr	r1, [r4, #16]
 800c66c:	464a      	mov	r2, r9
 800c66e:	f7fd fd04 	bl	800a07a <memcpy>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67c:	81a3      	strh	r3, [r4, #12]
 800c67e:	6126      	str	r6, [r4, #16]
 800c680:	6165      	str	r5, [r4, #20]
 800c682:	444e      	add	r6, r9
 800c684:	eba5 0509 	sub.w	r5, r5, r9
 800c688:	6026      	str	r6, [r4, #0]
 800c68a:	60a5      	str	r5, [r4, #8]
 800c68c:	463e      	mov	r6, r7
 800c68e:	42be      	cmp	r6, r7
 800c690:	d900      	bls.n	800c694 <__ssputs_r+0x70>
 800c692:	463e      	mov	r6, r7
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	4632      	mov	r2, r6
 800c698:	4641      	mov	r1, r8
 800c69a:	f000 ff35 	bl	800d508 <memmove>
 800c69e:	68a3      	ldr	r3, [r4, #8]
 800c6a0:	1b9b      	subs	r3, r3, r6
 800c6a2:	60a3      	str	r3, [r4, #8]
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	4433      	add	r3, r6
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	f001 fb0a 	bl	800dcca <_realloc_r>
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1e0      	bne.n	800c67e <__ssputs_r+0x5a>
 800c6bc:	6921      	ldr	r1, [r4, #16]
 800c6be:	4650      	mov	r0, sl
 800c6c0:	f7fe fb6c 	bl	800ad9c <_free_r>
 800c6c4:	230c      	movs	r3, #12
 800c6c6:	f8ca 3000 	str.w	r3, [sl]
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d0:	81a3      	strh	r3, [r4, #12]
 800c6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d6:	e7e9      	b.n	800c6ac <__ssputs_r+0x88>

0800c6d8 <_svfiprintf_r>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	4698      	mov	r8, r3
 800c6de:	898b      	ldrh	r3, [r1, #12]
 800c6e0:	061b      	lsls	r3, r3, #24
 800c6e2:	b09d      	sub	sp, #116	; 0x74
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	d50e      	bpl.n	800c70a <_svfiprintf_r+0x32>
 800c6ec:	690b      	ldr	r3, [r1, #16]
 800c6ee:	b963      	cbnz	r3, 800c70a <_svfiprintf_r+0x32>
 800c6f0:	2140      	movs	r1, #64	; 0x40
 800c6f2:	f7fe fbc7 	bl	800ae84 <_malloc_r>
 800c6f6:	6028      	str	r0, [r5, #0]
 800c6f8:	6128      	str	r0, [r5, #16]
 800c6fa:	b920      	cbnz	r0, 800c706 <_svfiprintf_r+0x2e>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	e0d0      	b.n	800c8a8 <_svfiprintf_r+0x1d0>
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	616b      	str	r3, [r5, #20]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9309      	str	r3, [sp, #36]	; 0x24
 800c70e:	2320      	movs	r3, #32
 800c710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c714:	f8cd 800c 	str.w	r8, [sp, #12]
 800c718:	2330      	movs	r3, #48	; 0x30
 800c71a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c8c0 <_svfiprintf_r+0x1e8>
 800c71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c722:	f04f 0901 	mov.w	r9, #1
 800c726:	4623      	mov	r3, r4
 800c728:	469a      	mov	sl, r3
 800c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72e:	b10a      	cbz	r2, 800c734 <_svfiprintf_r+0x5c>
 800c730:	2a25      	cmp	r2, #37	; 0x25
 800c732:	d1f9      	bne.n	800c728 <_svfiprintf_r+0x50>
 800c734:	ebba 0b04 	subs.w	fp, sl, r4
 800c738:	d00b      	beq.n	800c752 <_svfiprintf_r+0x7a>
 800c73a:	465b      	mov	r3, fp
 800c73c:	4622      	mov	r2, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ff6f 	bl	800c624 <__ssputs_r>
 800c746:	3001      	adds	r0, #1
 800c748:	f000 80a9 	beq.w	800c89e <_svfiprintf_r+0x1c6>
 800c74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c74e:	445a      	add	r2, fp
 800c750:	9209      	str	r2, [sp, #36]	; 0x24
 800c752:	f89a 3000 	ldrb.w	r3, [sl]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80a1 	beq.w	800c89e <_svfiprintf_r+0x1c6>
 800c75c:	2300      	movs	r3, #0
 800c75e:	f04f 32ff 	mov.w	r2, #4294967295
 800c762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c766:	f10a 0a01 	add.w	sl, sl, #1
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	9307      	str	r3, [sp, #28]
 800c76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c772:	931a      	str	r3, [sp, #104]	; 0x68
 800c774:	4654      	mov	r4, sl
 800c776:	2205      	movs	r2, #5
 800c778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77c:	4850      	ldr	r0, [pc, #320]	; (800c8c0 <_svfiprintf_r+0x1e8>)
 800c77e:	f7f3 fd2f 	bl	80001e0 <memchr>
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	b9d8      	cbnz	r0, 800c7be <_svfiprintf_r+0xe6>
 800c786:	06d0      	lsls	r0, r2, #27
 800c788:	bf44      	itt	mi
 800c78a:	2320      	movmi	r3, #32
 800c78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c790:	0711      	lsls	r1, r2, #28
 800c792:	bf44      	itt	mi
 800c794:	232b      	movmi	r3, #43	; 0x2b
 800c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c79a:	f89a 3000 	ldrb.w	r3, [sl]
 800c79e:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a0:	d015      	beq.n	800c7ce <_svfiprintf_r+0xf6>
 800c7a2:	9a07      	ldr	r2, [sp, #28]
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b2:	3b30      	subs	r3, #48	; 0x30
 800c7b4:	2b09      	cmp	r3, #9
 800c7b6:	d94d      	bls.n	800c854 <_svfiprintf_r+0x17c>
 800c7b8:	b1b0      	cbz	r0, 800c7e8 <_svfiprintf_r+0x110>
 800c7ba:	9207      	str	r2, [sp, #28]
 800c7bc:	e014      	b.n	800c7e8 <_svfiprintf_r+0x110>
 800c7be:	eba0 0308 	sub.w	r3, r0, r8
 800c7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	46a2      	mov	sl, r4
 800c7cc:	e7d2      	b.n	800c774 <_svfiprintf_r+0x9c>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	1d19      	adds	r1, r3, #4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	9103      	str	r1, [sp, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfbb      	ittet	lt
 800c7da:	425b      	neglt	r3, r3
 800c7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e0:	9307      	strge	r3, [sp, #28]
 800c7e2:	9307      	strlt	r3, [sp, #28]
 800c7e4:	bfb8      	it	lt
 800c7e6:	9204      	strlt	r2, [sp, #16]
 800c7e8:	7823      	ldrb	r3, [r4, #0]
 800c7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ec:	d10c      	bne.n	800c808 <_svfiprintf_r+0x130>
 800c7ee:	7863      	ldrb	r3, [r4, #1]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d134      	bne.n	800c85e <_svfiprintf_r+0x186>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	9203      	str	r2, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bfb8      	it	lt
 800c800:	f04f 33ff 	movlt.w	r3, #4294967295
 800c804:	3402      	adds	r4, #2
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c8d0 <_svfiprintf_r+0x1f8>
 800c80c:	7821      	ldrb	r1, [r4, #0]
 800c80e:	2203      	movs	r2, #3
 800c810:	4650      	mov	r0, sl
 800c812:	f7f3 fce5 	bl	80001e0 <memchr>
 800c816:	b138      	cbz	r0, 800c828 <_svfiprintf_r+0x150>
 800c818:	9b04      	ldr	r3, [sp, #16]
 800c81a:	eba0 000a 	sub.w	r0, r0, sl
 800c81e:	2240      	movs	r2, #64	; 0x40
 800c820:	4082      	lsls	r2, r0
 800c822:	4313      	orrs	r3, r2
 800c824:	3401      	adds	r4, #1
 800c826:	9304      	str	r3, [sp, #16]
 800c828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82c:	4825      	ldr	r0, [pc, #148]	; (800c8c4 <_svfiprintf_r+0x1ec>)
 800c82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c832:	2206      	movs	r2, #6
 800c834:	f7f3 fcd4 	bl	80001e0 <memchr>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d038      	beq.n	800c8ae <_svfiprintf_r+0x1d6>
 800c83c:	4b22      	ldr	r3, [pc, #136]	; (800c8c8 <_svfiprintf_r+0x1f0>)
 800c83e:	bb1b      	cbnz	r3, 800c888 <_svfiprintf_r+0x1b0>
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	3307      	adds	r3, #7
 800c844:	f023 0307 	bic.w	r3, r3, #7
 800c848:	3308      	adds	r3, #8
 800c84a:	9303      	str	r3, [sp, #12]
 800c84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84e:	4433      	add	r3, r6
 800c850:	9309      	str	r3, [sp, #36]	; 0x24
 800c852:	e768      	b.n	800c726 <_svfiprintf_r+0x4e>
 800c854:	fb0c 3202 	mla	r2, ip, r2, r3
 800c858:	460c      	mov	r4, r1
 800c85a:	2001      	movs	r0, #1
 800c85c:	e7a6      	b.n	800c7ac <_svfiprintf_r+0xd4>
 800c85e:	2300      	movs	r3, #0
 800c860:	3401      	adds	r4, #1
 800c862:	9305      	str	r3, [sp, #20]
 800c864:	4619      	mov	r1, r3
 800c866:	f04f 0c0a 	mov.w	ip, #10
 800c86a:	4620      	mov	r0, r4
 800c86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c870:	3a30      	subs	r2, #48	; 0x30
 800c872:	2a09      	cmp	r2, #9
 800c874:	d903      	bls.n	800c87e <_svfiprintf_r+0x1a6>
 800c876:	2b00      	cmp	r3, #0
 800c878:	d0c6      	beq.n	800c808 <_svfiprintf_r+0x130>
 800c87a:	9105      	str	r1, [sp, #20]
 800c87c:	e7c4      	b.n	800c808 <_svfiprintf_r+0x130>
 800c87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c882:	4604      	mov	r4, r0
 800c884:	2301      	movs	r3, #1
 800c886:	e7f0      	b.n	800c86a <_svfiprintf_r+0x192>
 800c888:	ab03      	add	r3, sp, #12
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	462a      	mov	r2, r5
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <_svfiprintf_r+0x1f4>)
 800c890:	a904      	add	r1, sp, #16
 800c892:	4638      	mov	r0, r7
 800c894:	f7fc fbe0 	bl	8009058 <_printf_float>
 800c898:	1c42      	adds	r2, r0, #1
 800c89a:	4606      	mov	r6, r0
 800c89c:	d1d6      	bne.n	800c84c <_svfiprintf_r+0x174>
 800c89e:	89ab      	ldrh	r3, [r5, #12]
 800c8a0:	065b      	lsls	r3, r3, #25
 800c8a2:	f53f af2d 	bmi.w	800c700 <_svfiprintf_r+0x28>
 800c8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a8:	b01d      	add	sp, #116	; 0x74
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	ab03      	add	r3, sp, #12
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <_svfiprintf_r+0x1f4>)
 800c8b6:	a904      	add	r1, sp, #16
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7fc fe71 	bl	80095a0 <_printf_i>
 800c8be:	e7eb      	b.n	800c898 <_svfiprintf_r+0x1c0>
 800c8c0:	0800f659 	.word	0x0800f659
 800c8c4:	0800f663 	.word	0x0800f663
 800c8c8:	08009059 	.word	0x08009059
 800c8cc:	0800c625 	.word	0x0800c625
 800c8d0:	0800f65f 	.word	0x0800f65f

0800c8d4 <_sungetc_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	1c4b      	adds	r3, r1, #1
 800c8d8:	4614      	mov	r4, r2
 800c8da:	d103      	bne.n	800c8e4 <_sungetc_r+0x10>
 800c8dc:	f04f 35ff 	mov.w	r5, #4294967295
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	8993      	ldrh	r3, [r2, #12]
 800c8e6:	f023 0320 	bic.w	r3, r3, #32
 800c8ea:	8193      	strh	r3, [r2, #12]
 800c8ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8ee:	6852      	ldr	r2, [r2, #4]
 800c8f0:	b2cd      	uxtb	r5, r1
 800c8f2:	b18b      	cbz	r3, 800c918 <_sungetc_r+0x44>
 800c8f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	dd08      	ble.n	800c90c <_sungetc_r+0x38>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	6022      	str	r2, [r4, #0]
 800c900:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	6063      	str	r3, [r4, #4]
 800c90a:	e7e9      	b.n	800c8e0 <_sungetc_r+0xc>
 800c90c:	4621      	mov	r1, r4
 800c90e:	f000 fd2c 	bl	800d36a <__submore>
 800c912:	2800      	cmp	r0, #0
 800c914:	d0f1      	beq.n	800c8fa <_sungetc_r+0x26>
 800c916:	e7e1      	b.n	800c8dc <_sungetc_r+0x8>
 800c918:	6921      	ldr	r1, [r4, #16]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	b151      	cbz	r1, 800c934 <_sungetc_r+0x60>
 800c91e:	4299      	cmp	r1, r3
 800c920:	d208      	bcs.n	800c934 <_sungetc_r+0x60>
 800c922:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c926:	42a9      	cmp	r1, r5
 800c928:	d104      	bne.n	800c934 <_sungetc_r+0x60>
 800c92a:	3b01      	subs	r3, #1
 800c92c:	3201      	adds	r2, #1
 800c92e:	6023      	str	r3, [r4, #0]
 800c930:	6062      	str	r2, [r4, #4]
 800c932:	e7d5      	b.n	800c8e0 <_sungetc_r+0xc>
 800c934:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c93c:	6363      	str	r3, [r4, #52]	; 0x34
 800c93e:	2303      	movs	r3, #3
 800c940:	63a3      	str	r3, [r4, #56]	; 0x38
 800c942:	4623      	mov	r3, r4
 800c944:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7dc      	b.n	800c908 <_sungetc_r+0x34>

0800c94e <__ssrefill_r>:
 800c94e:	b510      	push	{r4, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c954:	b169      	cbz	r1, 800c972 <__ssrefill_r+0x24>
 800c956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c95a:	4299      	cmp	r1, r3
 800c95c:	d001      	beq.n	800c962 <__ssrefill_r+0x14>
 800c95e:	f7fe fa1d 	bl	800ad9c <_free_r>
 800c962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c964:	6063      	str	r3, [r4, #4]
 800c966:	2000      	movs	r0, #0
 800c968:	6360      	str	r0, [r4, #52]	; 0x34
 800c96a:	b113      	cbz	r3, 800c972 <__ssrefill_r+0x24>
 800c96c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	bd10      	pop	{r4, pc}
 800c972:	6923      	ldr	r3, [r4, #16]
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	2300      	movs	r3, #0
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	f04f 30ff 	mov.w	r0, #4294967295
 800c986:	e7f3      	b.n	800c970 <__ssrefill_r+0x22>

0800c988 <__ssvfiscanf_r>:
 800c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98c:	460c      	mov	r4, r1
 800c98e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c992:	2100      	movs	r1, #0
 800c994:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c998:	49a6      	ldr	r1, [pc, #664]	; (800cc34 <__ssvfiscanf_r+0x2ac>)
 800c99a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c99c:	f10d 0804 	add.w	r8, sp, #4
 800c9a0:	49a5      	ldr	r1, [pc, #660]	; (800cc38 <__ssvfiscanf_r+0x2b0>)
 800c9a2:	4fa6      	ldr	r7, [pc, #664]	; (800cc3c <__ssvfiscanf_r+0x2b4>)
 800c9a4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cc40 <__ssvfiscanf_r+0x2b8>
 800c9a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	91a1      	str	r1, [sp, #644]	; 0x284
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	7813      	ldrb	r3, [r2, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 815a 	beq.w	800cc6e <__ssvfiscanf_r+0x2e6>
 800c9ba:	5cf9      	ldrb	r1, [r7, r3]
 800c9bc:	f011 0108 	ands.w	r1, r1, #8
 800c9c0:	f102 0501 	add.w	r5, r2, #1
 800c9c4:	d019      	beq.n	800c9fa <__ssvfiscanf_r+0x72>
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dd0f      	ble.n	800c9ec <__ssvfiscanf_r+0x64>
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	5cba      	ldrb	r2, [r7, r2]
 800c9d2:	0712      	lsls	r2, r2, #28
 800c9d4:	d401      	bmi.n	800c9da <__ssvfiscanf_r+0x52>
 800c9d6:	462a      	mov	r2, r5
 800c9d8:	e7eb      	b.n	800c9b2 <__ssvfiscanf_r+0x2a>
 800c9da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c9dc:	3201      	adds	r2, #1
 800c9de:	9245      	str	r2, [sp, #276]	; 0x114
 800c9e0:	6862      	ldr	r2, [r4, #4]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	3a01      	subs	r2, #1
 800c9e6:	6062      	str	r2, [r4, #4]
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	e7ec      	b.n	800c9c6 <__ssvfiscanf_r+0x3e>
 800c9ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4798      	blx	r3
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d0e9      	beq.n	800c9cc <__ssvfiscanf_r+0x44>
 800c9f8:	e7ed      	b.n	800c9d6 <__ssvfiscanf_r+0x4e>
 800c9fa:	2b25      	cmp	r3, #37	; 0x25
 800c9fc:	d012      	beq.n	800ca24 <__ssvfiscanf_r+0x9c>
 800c9fe:	469a      	mov	sl, r3
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f340 8091 	ble.w	800cb2a <__ssvfiscanf_r+0x1a2>
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	7813      	ldrb	r3, [r2, #0]
 800ca0c:	4553      	cmp	r3, sl
 800ca0e:	f040 812e 	bne.w	800cc6e <__ssvfiscanf_r+0x2e6>
 800ca12:	6863      	ldr	r3, [r4, #4]
 800ca14:	3b01      	subs	r3, #1
 800ca16:	6063      	str	r3, [r4, #4]
 800ca18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ca1a:	3201      	adds	r2, #1
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	6022      	str	r2, [r4, #0]
 800ca20:	9345      	str	r3, [sp, #276]	; 0x114
 800ca22:	e7d8      	b.n	800c9d6 <__ssvfiscanf_r+0x4e>
 800ca24:	9141      	str	r1, [sp, #260]	; 0x104
 800ca26:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca28:	7853      	ldrb	r3, [r2, #1]
 800ca2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2c:	bf02      	ittt	eq
 800ca2e:	2310      	moveq	r3, #16
 800ca30:	1c95      	addeq	r5, r2, #2
 800ca32:	9341      	streq	r3, [sp, #260]	; 0x104
 800ca34:	220a      	movs	r2, #10
 800ca36:	46aa      	mov	sl, r5
 800ca38:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ca3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ca40:	2b09      	cmp	r3, #9
 800ca42:	d91c      	bls.n	800ca7e <__ssvfiscanf_r+0xf6>
 800ca44:	487e      	ldr	r0, [pc, #504]	; (800cc40 <__ssvfiscanf_r+0x2b8>)
 800ca46:	2203      	movs	r2, #3
 800ca48:	f7f3 fbca 	bl	80001e0 <memchr>
 800ca4c:	b138      	cbz	r0, 800ca5e <__ssvfiscanf_r+0xd6>
 800ca4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca50:	eba0 0009 	sub.w	r0, r0, r9
 800ca54:	2301      	movs	r3, #1
 800ca56:	4083      	lsls	r3, r0
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	9341      	str	r3, [sp, #260]	; 0x104
 800ca5c:	4655      	mov	r5, sl
 800ca5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca62:	2b78      	cmp	r3, #120	; 0x78
 800ca64:	d806      	bhi.n	800ca74 <__ssvfiscanf_r+0xec>
 800ca66:	2b57      	cmp	r3, #87	; 0x57
 800ca68:	d810      	bhi.n	800ca8c <__ssvfiscanf_r+0x104>
 800ca6a:	2b25      	cmp	r3, #37	; 0x25
 800ca6c:	d0c7      	beq.n	800c9fe <__ssvfiscanf_r+0x76>
 800ca6e:	d857      	bhi.n	800cb20 <__ssvfiscanf_r+0x198>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d065      	beq.n	800cb40 <__ssvfiscanf_r+0x1b8>
 800ca74:	2303      	movs	r3, #3
 800ca76:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca78:	230a      	movs	r3, #10
 800ca7a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca7c:	e076      	b.n	800cb6c <__ssvfiscanf_r+0x1e4>
 800ca7e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca80:	fb02 1103 	mla	r1, r2, r3, r1
 800ca84:	3930      	subs	r1, #48	; 0x30
 800ca86:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca88:	4655      	mov	r5, sl
 800ca8a:	e7d4      	b.n	800ca36 <__ssvfiscanf_r+0xae>
 800ca8c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ca90:	2a20      	cmp	r2, #32
 800ca92:	d8ef      	bhi.n	800ca74 <__ssvfiscanf_r+0xec>
 800ca94:	a101      	add	r1, pc, #4	; (adr r1, 800ca9c <__ssvfiscanf_r+0x114>)
 800ca96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca9a:	bf00      	nop
 800ca9c:	0800cb4f 	.word	0x0800cb4f
 800caa0:	0800ca75 	.word	0x0800ca75
 800caa4:	0800ca75 	.word	0x0800ca75
 800caa8:	0800cbad 	.word	0x0800cbad
 800caac:	0800ca75 	.word	0x0800ca75
 800cab0:	0800ca75 	.word	0x0800ca75
 800cab4:	0800ca75 	.word	0x0800ca75
 800cab8:	0800ca75 	.word	0x0800ca75
 800cabc:	0800ca75 	.word	0x0800ca75
 800cac0:	0800ca75 	.word	0x0800ca75
 800cac4:	0800ca75 	.word	0x0800ca75
 800cac8:	0800cbc3 	.word	0x0800cbc3
 800cacc:	0800cba9 	.word	0x0800cba9
 800cad0:	0800cb27 	.word	0x0800cb27
 800cad4:	0800cb27 	.word	0x0800cb27
 800cad8:	0800cb27 	.word	0x0800cb27
 800cadc:	0800ca75 	.word	0x0800ca75
 800cae0:	0800cb65 	.word	0x0800cb65
 800cae4:	0800ca75 	.word	0x0800ca75
 800cae8:	0800ca75 	.word	0x0800ca75
 800caec:	0800ca75 	.word	0x0800ca75
 800caf0:	0800ca75 	.word	0x0800ca75
 800caf4:	0800cbd3 	.word	0x0800cbd3
 800caf8:	0800cba1 	.word	0x0800cba1
 800cafc:	0800cb47 	.word	0x0800cb47
 800cb00:	0800ca75 	.word	0x0800ca75
 800cb04:	0800ca75 	.word	0x0800ca75
 800cb08:	0800cbcf 	.word	0x0800cbcf
 800cb0c:	0800ca75 	.word	0x0800ca75
 800cb10:	0800cba9 	.word	0x0800cba9
 800cb14:	0800ca75 	.word	0x0800ca75
 800cb18:	0800ca75 	.word	0x0800ca75
 800cb1c:	0800cb4f 	.word	0x0800cb4f
 800cb20:	3b45      	subs	r3, #69	; 0x45
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d8a6      	bhi.n	800ca74 <__ssvfiscanf_r+0xec>
 800cb26:	2305      	movs	r3, #5
 800cb28:	e01f      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cb2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4630      	mov	r0, r6
 800cb30:	4798      	blx	r3
 800cb32:	2800      	cmp	r0, #0
 800cb34:	f43f af68 	beq.w	800ca08 <__ssvfiscanf_r+0x80>
 800cb38:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	f040 808d 	bne.w	800cc5a <__ssvfiscanf_r+0x2d2>
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e08f      	b.n	800cc66 <__ssvfiscanf_r+0x2de>
 800cb46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb48:	f042 0220 	orr.w	r2, r2, #32
 800cb4c:	9241      	str	r2, [sp, #260]	; 0x104
 800cb4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cb50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb54:	9241      	str	r2, [sp, #260]	; 0x104
 800cb56:	2210      	movs	r2, #16
 800cb58:	2b6f      	cmp	r3, #111	; 0x6f
 800cb5a:	9242      	str	r2, [sp, #264]	; 0x108
 800cb5c:	bf34      	ite	cc
 800cb5e:	2303      	movcc	r3, #3
 800cb60:	2304      	movcs	r3, #4
 800cb62:	e002      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cb64:	2300      	movs	r3, #0
 800cb66:	9342      	str	r3, [sp, #264]	; 0x108
 800cb68:	2303      	movs	r3, #3
 800cb6a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	dd3d      	ble.n	800cbee <__ssvfiscanf_r+0x266>
 800cb72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb74:	0659      	lsls	r1, r3, #25
 800cb76:	d404      	bmi.n	800cb82 <__ssvfiscanf_r+0x1fa>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	781a      	ldrb	r2, [r3, #0]
 800cb7c:	5cba      	ldrb	r2, [r7, r2]
 800cb7e:	0712      	lsls	r2, r2, #28
 800cb80:	d43c      	bmi.n	800cbfc <__ssvfiscanf_r+0x274>
 800cb82:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	dc4b      	bgt.n	800cc20 <__ssvfiscanf_r+0x298>
 800cb88:	466b      	mov	r3, sp
 800cb8a:	4622      	mov	r2, r4
 800cb8c:	a941      	add	r1, sp, #260	; 0x104
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f000 f9b6 	bl	800cf00 <_scanf_chars>
 800cb94:	2801      	cmp	r0, #1
 800cb96:	d06a      	beq.n	800cc6e <__ssvfiscanf_r+0x2e6>
 800cb98:	2802      	cmp	r0, #2
 800cb9a:	f47f af1c 	bne.w	800c9d6 <__ssvfiscanf_r+0x4e>
 800cb9e:	e7cb      	b.n	800cb38 <__ssvfiscanf_r+0x1b0>
 800cba0:	2308      	movs	r3, #8
 800cba2:	9342      	str	r3, [sp, #264]	; 0x108
 800cba4:	2304      	movs	r3, #4
 800cba6:	e7e0      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cba8:	220a      	movs	r2, #10
 800cbaa:	e7d5      	b.n	800cb58 <__ssvfiscanf_r+0x1d0>
 800cbac:	4629      	mov	r1, r5
 800cbae:	4640      	mov	r0, r8
 800cbb0:	f000 fba2 	bl	800d2f8 <__sccl>
 800cbb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbba:	9341      	str	r3, [sp, #260]	; 0x104
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e7d3      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cbc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc8:	9341      	str	r3, [sp, #260]	; 0x104
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e7cd      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	e7cb      	b.n	800cb6a <__ssvfiscanf_r+0x1e2>
 800cbd2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cbd4:	06c3      	lsls	r3, r0, #27
 800cbd6:	f53f aefe 	bmi.w	800c9d6 <__ssvfiscanf_r+0x4e>
 800cbda:	9b00      	ldr	r3, [sp, #0]
 800cbdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbde:	1d19      	adds	r1, r3, #4
 800cbe0:	9100      	str	r1, [sp, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	07c0      	lsls	r0, r0, #31
 800cbe6:	bf4c      	ite	mi
 800cbe8:	801a      	strhmi	r2, [r3, #0]
 800cbea:	601a      	strpl	r2, [r3, #0]
 800cbec:	e6f3      	b.n	800c9d6 <__ssvfiscanf_r+0x4e>
 800cbee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4798      	blx	r3
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d0bb      	beq.n	800cb72 <__ssvfiscanf_r+0x1ea>
 800cbfa:	e79d      	b.n	800cb38 <__ssvfiscanf_r+0x1b0>
 800cbfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbfe:	3201      	adds	r2, #1
 800cc00:	9245      	str	r2, [sp, #276]	; 0x114
 800cc02:	6862      	ldr	r2, [r4, #4]
 800cc04:	3a01      	subs	r2, #1
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	6062      	str	r2, [r4, #4]
 800cc0a:	dd02      	ble.n	800cc12 <__ssvfiscanf_r+0x28a>
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	e7b2      	b.n	800cb78 <__ssvfiscanf_r+0x1f0>
 800cc12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc14:	4621      	mov	r1, r4
 800cc16:	4630      	mov	r0, r6
 800cc18:	4798      	blx	r3
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d0ac      	beq.n	800cb78 <__ssvfiscanf_r+0x1f0>
 800cc1e:	e78b      	b.n	800cb38 <__ssvfiscanf_r+0x1b0>
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	dc0f      	bgt.n	800cc44 <__ssvfiscanf_r+0x2bc>
 800cc24:	466b      	mov	r3, sp
 800cc26:	4622      	mov	r2, r4
 800cc28:	a941      	add	r1, sp, #260	; 0x104
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f000 f9c2 	bl	800cfb4 <_scanf_i>
 800cc30:	e7b0      	b.n	800cb94 <__ssvfiscanf_r+0x20c>
 800cc32:	bf00      	nop
 800cc34:	0800c8d5 	.word	0x0800c8d5
 800cc38:	0800c94f 	.word	0x0800c94f
 800cc3c:	0800f559 	.word	0x0800f559
 800cc40:	0800f65f 	.word	0x0800f65f
 800cc44:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <__ssvfiscanf_r+0x2ec>)
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f43f aec5 	beq.w	800c9d6 <__ssvfiscanf_r+0x4e>
 800cc4c:	466b      	mov	r3, sp
 800cc4e:	4622      	mov	r2, r4
 800cc50:	a941      	add	r1, sp, #260	; 0x104
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7fc fdc6 	bl	80097e4 <_scanf_float>
 800cc58:	e79c      	b.n	800cb94 <__ssvfiscanf_r+0x20c>
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cc60:	bf18      	it	ne
 800cc62:	f04f 30ff 	movne.w	r0, #4294967295
 800cc66:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc70:	e7f9      	b.n	800cc66 <__ssvfiscanf_r+0x2de>
 800cc72:	bf00      	nop
 800cc74:	080097e5 	.word	0x080097e5

0800cc78 <__sfputc_r>:
 800cc78:	6893      	ldr	r3, [r2, #8]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	b410      	push	{r4}
 800cc80:	6093      	str	r3, [r2, #8]
 800cc82:	da08      	bge.n	800cc96 <__sfputc_r+0x1e>
 800cc84:	6994      	ldr	r4, [r2, #24]
 800cc86:	42a3      	cmp	r3, r4
 800cc88:	db01      	blt.n	800cc8e <__sfputc_r+0x16>
 800cc8a:	290a      	cmp	r1, #10
 800cc8c:	d103      	bne.n	800cc96 <__sfputc_r+0x1e>
 800cc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc92:	f000 bba4 	b.w	800d3de <__swbuf_r>
 800cc96:	6813      	ldr	r3, [r2, #0]
 800cc98:	1c58      	adds	r0, r3, #1
 800cc9a:	6010      	str	r0, [r2, #0]
 800cc9c:	7019      	strb	r1, [r3, #0]
 800cc9e:	4608      	mov	r0, r1
 800cca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <__sfputs_r>:
 800cca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca8:	4606      	mov	r6, r0
 800ccaa:	460f      	mov	r7, r1
 800ccac:	4614      	mov	r4, r2
 800ccae:	18d5      	adds	r5, r2, r3
 800ccb0:	42ac      	cmp	r4, r5
 800ccb2:	d101      	bne.n	800ccb8 <__sfputs_r+0x12>
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e007      	b.n	800ccc8 <__sfputs_r+0x22>
 800ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbc:	463a      	mov	r2, r7
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7ff ffda 	bl	800cc78 <__sfputc_r>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d1f3      	bne.n	800ccb0 <__sfputs_r+0xa>
 800ccc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cccc <_vfiprintf_r>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	b09d      	sub	sp, #116	; 0x74
 800ccd4:	4614      	mov	r4, r2
 800ccd6:	4698      	mov	r8, r3
 800ccd8:	4606      	mov	r6, r0
 800ccda:	b118      	cbz	r0, 800cce4 <_vfiprintf_r+0x18>
 800ccdc:	6a03      	ldr	r3, [r0, #32]
 800ccde:	b90b      	cbnz	r3, 800cce4 <_vfiprintf_r+0x18>
 800cce0:	f7fd f81c 	bl	8009d1c <__sinit>
 800cce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cce6:	07d9      	lsls	r1, r3, #31
 800cce8:	d405      	bmi.n	800ccf6 <_vfiprintf_r+0x2a>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	059a      	lsls	r2, r3, #22
 800ccee:	d402      	bmi.n	800ccf6 <_vfiprintf_r+0x2a>
 800ccf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf2:	f7fd f9c0 	bl	800a076 <__retarget_lock_acquire_recursive>
 800ccf6:	89ab      	ldrh	r3, [r5, #12]
 800ccf8:	071b      	lsls	r3, r3, #28
 800ccfa:	d501      	bpl.n	800cd00 <_vfiprintf_r+0x34>
 800ccfc:	692b      	ldr	r3, [r5, #16]
 800ccfe:	b99b      	cbnz	r3, 800cd28 <_vfiprintf_r+0x5c>
 800cd00:	4629      	mov	r1, r5
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 fba8 	bl	800d458 <__swsetup_r>
 800cd08:	b170      	cbz	r0, 800cd28 <_vfiprintf_r+0x5c>
 800cd0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd0c:	07dc      	lsls	r4, r3, #31
 800cd0e:	d504      	bpl.n	800cd1a <_vfiprintf_r+0x4e>
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	b01d      	add	sp, #116	; 0x74
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	89ab      	ldrh	r3, [r5, #12]
 800cd1c:	0598      	lsls	r0, r3, #22
 800cd1e:	d4f7      	bmi.n	800cd10 <_vfiprintf_r+0x44>
 800cd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd22:	f7fd f9a9 	bl	800a078 <__retarget_lock_release_recursive>
 800cd26:	e7f3      	b.n	800cd10 <_vfiprintf_r+0x44>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd36:	2330      	movs	r3, #48	; 0x30
 800cd38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ceec <_vfiprintf_r+0x220>
 800cd3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd40:	f04f 0901 	mov.w	r9, #1
 800cd44:	4623      	mov	r3, r4
 800cd46:	469a      	mov	sl, r3
 800cd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd4c:	b10a      	cbz	r2, 800cd52 <_vfiprintf_r+0x86>
 800cd4e:	2a25      	cmp	r2, #37	; 0x25
 800cd50:	d1f9      	bne.n	800cd46 <_vfiprintf_r+0x7a>
 800cd52:	ebba 0b04 	subs.w	fp, sl, r4
 800cd56:	d00b      	beq.n	800cd70 <_vfiprintf_r+0xa4>
 800cd58:	465b      	mov	r3, fp
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7ff ffa1 	bl	800cca6 <__sfputs_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	f000 80a9 	beq.w	800cebc <_vfiprintf_r+0x1f0>
 800cd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6c:	445a      	add	r2, fp
 800cd6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd70:	f89a 3000 	ldrb.w	r3, [sl]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 80a1 	beq.w	800cebc <_vfiprintf_r+0x1f0>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd84:	f10a 0a01 	add.w	sl, sl, #1
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd90:	931a      	str	r3, [sp, #104]	; 0x68
 800cd92:	4654      	mov	r4, sl
 800cd94:	2205      	movs	r2, #5
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	4854      	ldr	r0, [pc, #336]	; (800ceec <_vfiprintf_r+0x220>)
 800cd9c:	f7f3 fa20 	bl	80001e0 <memchr>
 800cda0:	9a04      	ldr	r2, [sp, #16]
 800cda2:	b9d8      	cbnz	r0, 800cddc <_vfiprintf_r+0x110>
 800cda4:	06d1      	lsls	r1, r2, #27
 800cda6:	bf44      	itt	mi
 800cda8:	2320      	movmi	r3, #32
 800cdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdae:	0713      	lsls	r3, r2, #28
 800cdb0:	bf44      	itt	mi
 800cdb2:	232b      	movmi	r3, #43	; 0x2b
 800cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdbc:	2b2a      	cmp	r3, #42	; 0x2a
 800cdbe:	d015      	beq.n	800cdec <_vfiprintf_r+0x120>
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	4654      	mov	r4, sl
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	f04f 0c0a 	mov.w	ip, #10
 800cdca:	4621      	mov	r1, r4
 800cdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd0:	3b30      	subs	r3, #48	; 0x30
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	d94d      	bls.n	800ce72 <_vfiprintf_r+0x1a6>
 800cdd6:	b1b0      	cbz	r0, 800ce06 <_vfiprintf_r+0x13a>
 800cdd8:	9207      	str	r2, [sp, #28]
 800cdda:	e014      	b.n	800ce06 <_vfiprintf_r+0x13a>
 800cddc:	eba0 0308 	sub.w	r3, r0, r8
 800cde0:	fa09 f303 	lsl.w	r3, r9, r3
 800cde4:	4313      	orrs	r3, r2
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	46a2      	mov	sl, r4
 800cdea:	e7d2      	b.n	800cd92 <_vfiprintf_r+0xc6>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	1d19      	adds	r1, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	9103      	str	r1, [sp, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfbb      	ittet	lt
 800cdf8:	425b      	neglt	r3, r3
 800cdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdfe:	9307      	strge	r3, [sp, #28]
 800ce00:	9307      	strlt	r3, [sp, #28]
 800ce02:	bfb8      	it	lt
 800ce04:	9204      	strlt	r2, [sp, #16]
 800ce06:	7823      	ldrb	r3, [r4, #0]
 800ce08:	2b2e      	cmp	r3, #46	; 0x2e
 800ce0a:	d10c      	bne.n	800ce26 <_vfiprintf_r+0x15a>
 800ce0c:	7863      	ldrb	r3, [r4, #1]
 800ce0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce10:	d134      	bne.n	800ce7c <_vfiprintf_r+0x1b0>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	1d1a      	adds	r2, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9203      	str	r2, [sp, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfb8      	it	lt
 800ce1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce22:	3402      	adds	r4, #2
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cefc <_vfiprintf_r+0x230>
 800ce2a:	7821      	ldrb	r1, [r4, #0]
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	4650      	mov	r0, sl
 800ce30:	f7f3 f9d6 	bl	80001e0 <memchr>
 800ce34:	b138      	cbz	r0, 800ce46 <_vfiprintf_r+0x17a>
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	eba0 000a 	sub.w	r0, r0, sl
 800ce3c:	2240      	movs	r2, #64	; 0x40
 800ce3e:	4082      	lsls	r2, r0
 800ce40:	4313      	orrs	r3, r2
 800ce42:	3401      	adds	r4, #1
 800ce44:	9304      	str	r3, [sp, #16]
 800ce46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4a:	4829      	ldr	r0, [pc, #164]	; (800cef0 <_vfiprintf_r+0x224>)
 800ce4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce50:	2206      	movs	r2, #6
 800ce52:	f7f3 f9c5 	bl	80001e0 <memchr>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d03f      	beq.n	800ceda <_vfiprintf_r+0x20e>
 800ce5a:	4b26      	ldr	r3, [pc, #152]	; (800cef4 <_vfiprintf_r+0x228>)
 800ce5c:	bb1b      	cbnz	r3, 800cea6 <_vfiprintf_r+0x1da>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	3307      	adds	r3, #7
 800ce62:	f023 0307 	bic.w	r3, r3, #7
 800ce66:	3308      	adds	r3, #8
 800ce68:	9303      	str	r3, [sp, #12]
 800ce6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6c:	443b      	add	r3, r7
 800ce6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce70:	e768      	b.n	800cd44 <_vfiprintf_r+0x78>
 800ce72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce76:	460c      	mov	r4, r1
 800ce78:	2001      	movs	r0, #1
 800ce7a:	e7a6      	b.n	800cdca <_vfiprintf_r+0xfe>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	3401      	adds	r4, #1
 800ce80:	9305      	str	r3, [sp, #20]
 800ce82:	4619      	mov	r1, r3
 800ce84:	f04f 0c0a 	mov.w	ip, #10
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce8e:	3a30      	subs	r2, #48	; 0x30
 800ce90:	2a09      	cmp	r2, #9
 800ce92:	d903      	bls.n	800ce9c <_vfiprintf_r+0x1d0>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0c6      	beq.n	800ce26 <_vfiprintf_r+0x15a>
 800ce98:	9105      	str	r1, [sp, #20]
 800ce9a:	e7c4      	b.n	800ce26 <_vfiprintf_r+0x15a>
 800ce9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea0:	4604      	mov	r4, r0
 800cea2:	2301      	movs	r3, #1
 800cea4:	e7f0      	b.n	800ce88 <_vfiprintf_r+0x1bc>
 800cea6:	ab03      	add	r3, sp, #12
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	462a      	mov	r2, r5
 800ceac:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <_vfiprintf_r+0x22c>)
 800ceae:	a904      	add	r1, sp, #16
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7fc f8d1 	bl	8009058 <_printf_float>
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	1c78      	adds	r0, r7, #1
 800ceba:	d1d6      	bne.n	800ce6a <_vfiprintf_r+0x19e>
 800cebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cebe:	07d9      	lsls	r1, r3, #31
 800cec0:	d405      	bmi.n	800cece <_vfiprintf_r+0x202>
 800cec2:	89ab      	ldrh	r3, [r5, #12]
 800cec4:	059a      	lsls	r2, r3, #22
 800cec6:	d402      	bmi.n	800cece <_vfiprintf_r+0x202>
 800cec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceca:	f7fd f8d5 	bl	800a078 <__retarget_lock_release_recursive>
 800cece:	89ab      	ldrh	r3, [r5, #12]
 800ced0:	065b      	lsls	r3, r3, #25
 800ced2:	f53f af1d 	bmi.w	800cd10 <_vfiprintf_r+0x44>
 800ced6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ced8:	e71c      	b.n	800cd14 <_vfiprintf_r+0x48>
 800ceda:	ab03      	add	r3, sp, #12
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	462a      	mov	r2, r5
 800cee0:	4b05      	ldr	r3, [pc, #20]	; (800cef8 <_vfiprintf_r+0x22c>)
 800cee2:	a904      	add	r1, sp, #16
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7fc fb5b 	bl	80095a0 <_printf_i>
 800ceea:	e7e4      	b.n	800ceb6 <_vfiprintf_r+0x1ea>
 800ceec:	0800f659 	.word	0x0800f659
 800cef0:	0800f663 	.word	0x0800f663
 800cef4:	08009059 	.word	0x08009059
 800cef8:	0800cca7 	.word	0x0800cca7
 800cefc:	0800f65f 	.word	0x0800f65f

0800cf00 <_scanf_chars>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	4615      	mov	r5, r2
 800cf06:	688a      	ldr	r2, [r1, #8]
 800cf08:	4680      	mov	r8, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	b932      	cbnz	r2, 800cf1c <_scanf_chars+0x1c>
 800cf0e:	698a      	ldr	r2, [r1, #24]
 800cf10:	2a00      	cmp	r2, #0
 800cf12:	bf0c      	ite	eq
 800cf14:	2201      	moveq	r2, #1
 800cf16:	f04f 32ff 	movne.w	r2, #4294967295
 800cf1a:	608a      	str	r2, [r1, #8]
 800cf1c:	6822      	ldr	r2, [r4, #0]
 800cf1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cfb0 <_scanf_chars+0xb0>
 800cf22:	06d1      	lsls	r1, r2, #27
 800cf24:	bf5f      	itttt	pl
 800cf26:	681a      	ldrpl	r2, [r3, #0]
 800cf28:	1d11      	addpl	r1, r2, #4
 800cf2a:	6019      	strpl	r1, [r3, #0]
 800cf2c:	6816      	ldrpl	r6, [r2, #0]
 800cf2e:	2700      	movs	r7, #0
 800cf30:	69a0      	ldr	r0, [r4, #24]
 800cf32:	b188      	cbz	r0, 800cf58 <_scanf_chars+0x58>
 800cf34:	2801      	cmp	r0, #1
 800cf36:	d107      	bne.n	800cf48 <_scanf_chars+0x48>
 800cf38:	682a      	ldr	r2, [r5, #0]
 800cf3a:	7811      	ldrb	r1, [r2, #0]
 800cf3c:	6962      	ldr	r2, [r4, #20]
 800cf3e:	5c52      	ldrb	r2, [r2, r1]
 800cf40:	b952      	cbnz	r2, 800cf58 <_scanf_chars+0x58>
 800cf42:	2f00      	cmp	r7, #0
 800cf44:	d031      	beq.n	800cfaa <_scanf_chars+0xaa>
 800cf46:	e022      	b.n	800cf8e <_scanf_chars+0x8e>
 800cf48:	2802      	cmp	r0, #2
 800cf4a:	d120      	bne.n	800cf8e <_scanf_chars+0x8e>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cf54:	071b      	lsls	r3, r3, #28
 800cf56:	d41a      	bmi.n	800cf8e <_scanf_chars+0x8e>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	06da      	lsls	r2, r3, #27
 800cf5c:	bf5e      	ittt	pl
 800cf5e:	682b      	ldrpl	r3, [r5, #0]
 800cf60:	781b      	ldrbpl	r3, [r3, #0]
 800cf62:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf66:	682a      	ldr	r2, [r5, #0]
 800cf68:	686b      	ldr	r3, [r5, #4]
 800cf6a:	3201      	adds	r2, #1
 800cf6c:	602a      	str	r2, [r5, #0]
 800cf6e:	68a2      	ldr	r2, [r4, #8]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	3a01      	subs	r2, #1
 800cf74:	606b      	str	r3, [r5, #4]
 800cf76:	3701      	adds	r7, #1
 800cf78:	60a2      	str	r2, [r4, #8]
 800cf7a:	b142      	cbz	r2, 800cf8e <_scanf_chars+0x8e>
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dcd7      	bgt.n	800cf30 <_scanf_chars+0x30>
 800cf80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf84:	4629      	mov	r1, r5
 800cf86:	4640      	mov	r0, r8
 800cf88:	4798      	blx	r3
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d0d0      	beq.n	800cf30 <_scanf_chars+0x30>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	f013 0310 	ands.w	r3, r3, #16
 800cf94:	d105      	bne.n	800cfa2 <_scanf_chars+0xa2>
 800cf96:	68e2      	ldr	r2, [r4, #12]
 800cf98:	3201      	adds	r2, #1
 800cf9a:	60e2      	str	r2, [r4, #12]
 800cf9c:	69a2      	ldr	r2, [r4, #24]
 800cf9e:	b102      	cbz	r2, 800cfa2 <_scanf_chars+0xa2>
 800cfa0:	7033      	strb	r3, [r6, #0]
 800cfa2:	6923      	ldr	r3, [r4, #16]
 800cfa4:	443b      	add	r3, r7
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	bf00      	nop
 800cfb0:	0800f559 	.word	0x0800f559

0800cfb4 <_scanf_i>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4698      	mov	r8, r3
 800cfba:	4b74      	ldr	r3, [pc, #464]	; (800d18c <_scanf_i+0x1d8>)
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	4682      	mov	sl, r0
 800cfc0:	4616      	mov	r6, r2
 800cfc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	ab03      	add	r3, sp, #12
 800cfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cfce:	4b70      	ldr	r3, [pc, #448]	; (800d190 <_scanf_i+0x1dc>)
 800cfd0:	69a1      	ldr	r1, [r4, #24]
 800cfd2:	4a70      	ldr	r2, [pc, #448]	; (800d194 <_scanf_i+0x1e0>)
 800cfd4:	2903      	cmp	r1, #3
 800cfd6:	bf18      	it	ne
 800cfd8:	461a      	movne	r2, r3
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	9201      	str	r2, [sp, #4]
 800cfde:	1e5a      	subs	r2, r3, #1
 800cfe0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfe4:	bf88      	it	hi
 800cfe6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfea:	4627      	mov	r7, r4
 800cfec:	bf82      	ittt	hi
 800cfee:	eb03 0905 	addhi.w	r9, r3, r5
 800cff2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cff6:	60a3      	strhi	r3, [r4, #8]
 800cff8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cffc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d000:	bf98      	it	ls
 800d002:	f04f 0900 	movls.w	r9, #0
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	463d      	mov	r5, r7
 800d00a:	f04f 0b00 	mov.w	fp, #0
 800d00e:	6831      	ldr	r1, [r6, #0]
 800d010:	ab03      	add	r3, sp, #12
 800d012:	7809      	ldrb	r1, [r1, #0]
 800d014:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d018:	2202      	movs	r2, #2
 800d01a:	f7f3 f8e1 	bl	80001e0 <memchr>
 800d01e:	b328      	cbz	r0, 800d06c <_scanf_i+0xb8>
 800d020:	f1bb 0f01 	cmp.w	fp, #1
 800d024:	d159      	bne.n	800d0da <_scanf_i+0x126>
 800d026:	6862      	ldr	r2, [r4, #4]
 800d028:	b92a      	cbnz	r2, 800d036 <_scanf_i+0x82>
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	2308      	movs	r3, #8
 800d02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d032:	6063      	str	r3, [r4, #4]
 800d034:	6022      	str	r2, [r4, #0]
 800d036:	6822      	ldr	r2, [r4, #0]
 800d038:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	68a2      	ldr	r2, [r4, #8]
 800d040:	1e51      	subs	r1, r2, #1
 800d042:	60a1      	str	r1, [r4, #8]
 800d044:	b192      	cbz	r2, 800d06c <_scanf_i+0xb8>
 800d046:	6832      	ldr	r2, [r6, #0]
 800d048:	1c51      	adds	r1, r2, #1
 800d04a:	6031      	str	r1, [r6, #0]
 800d04c:	7812      	ldrb	r2, [r2, #0]
 800d04e:	f805 2b01 	strb.w	r2, [r5], #1
 800d052:	6872      	ldr	r2, [r6, #4]
 800d054:	3a01      	subs	r2, #1
 800d056:	2a00      	cmp	r2, #0
 800d058:	6072      	str	r2, [r6, #4]
 800d05a:	dc07      	bgt.n	800d06c <_scanf_i+0xb8>
 800d05c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d060:	4631      	mov	r1, r6
 800d062:	4650      	mov	r0, sl
 800d064:	4790      	blx	r2
 800d066:	2800      	cmp	r0, #0
 800d068:	f040 8085 	bne.w	800d176 <_scanf_i+0x1c2>
 800d06c:	f10b 0b01 	add.w	fp, fp, #1
 800d070:	f1bb 0f03 	cmp.w	fp, #3
 800d074:	d1cb      	bne.n	800d00e <_scanf_i+0x5a>
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	b90b      	cbnz	r3, 800d07e <_scanf_i+0xca>
 800d07a:	230a      	movs	r3, #10
 800d07c:	6063      	str	r3, [r4, #4]
 800d07e:	6863      	ldr	r3, [r4, #4]
 800d080:	4945      	ldr	r1, [pc, #276]	; (800d198 <_scanf_i+0x1e4>)
 800d082:	6960      	ldr	r0, [r4, #20]
 800d084:	1ac9      	subs	r1, r1, r3
 800d086:	f000 f937 	bl	800d2f8 <__sccl>
 800d08a:	f04f 0b00 	mov.w	fp, #0
 800d08e:	68a3      	ldr	r3, [r4, #8]
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d03d      	beq.n	800d112 <_scanf_i+0x15e>
 800d096:	6831      	ldr	r1, [r6, #0]
 800d098:	6960      	ldr	r0, [r4, #20]
 800d09a:	f891 c000 	ldrb.w	ip, [r1]
 800d09e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d035      	beq.n	800d112 <_scanf_i+0x15e>
 800d0a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d0aa:	d124      	bne.n	800d0f6 <_scanf_i+0x142>
 800d0ac:	0510      	lsls	r0, r2, #20
 800d0ae:	d522      	bpl.n	800d0f6 <_scanf_i+0x142>
 800d0b0:	f10b 0b01 	add.w	fp, fp, #1
 800d0b4:	f1b9 0f00 	cmp.w	r9, #0
 800d0b8:	d003      	beq.n	800d0c2 <_scanf_i+0x10e>
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d0c0:	60a3      	str	r3, [r4, #8]
 800d0c2:	6873      	ldr	r3, [r6, #4]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	6073      	str	r3, [r6, #4]
 800d0ca:	dd1b      	ble.n	800d104 <_scanf_i+0x150>
 800d0cc:	6833      	ldr	r3, [r6, #0]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	6033      	str	r3, [r6, #0]
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	60a3      	str	r3, [r4, #8]
 800d0d8:	e7d9      	b.n	800d08e <_scanf_i+0xda>
 800d0da:	f1bb 0f02 	cmp.w	fp, #2
 800d0de:	d1ae      	bne.n	800d03e <_scanf_i+0x8a>
 800d0e0:	6822      	ldr	r2, [r4, #0]
 800d0e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d0e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d0ea:	d1bf      	bne.n	800d06c <_scanf_i+0xb8>
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	6063      	str	r3, [r4, #4]
 800d0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0f4:	e7a2      	b.n	800d03c <_scanf_i+0x88>
 800d0f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d0fa:	6022      	str	r2, [r4, #0]
 800d0fc:	780b      	ldrb	r3, [r1, #0]
 800d0fe:	f805 3b01 	strb.w	r3, [r5], #1
 800d102:	e7de      	b.n	800d0c2 <_scanf_i+0x10e>
 800d104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d108:	4631      	mov	r1, r6
 800d10a:	4650      	mov	r0, sl
 800d10c:	4798      	blx	r3
 800d10e:	2800      	cmp	r0, #0
 800d110:	d0df      	beq.n	800d0d2 <_scanf_i+0x11e>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	05d9      	lsls	r1, r3, #23
 800d116:	d50d      	bpl.n	800d134 <_scanf_i+0x180>
 800d118:	42bd      	cmp	r5, r7
 800d11a:	d909      	bls.n	800d130 <_scanf_i+0x17c>
 800d11c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d124:	4632      	mov	r2, r6
 800d126:	4650      	mov	r0, sl
 800d128:	4798      	blx	r3
 800d12a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d12e:	464d      	mov	r5, r9
 800d130:	42bd      	cmp	r5, r7
 800d132:	d028      	beq.n	800d186 <_scanf_i+0x1d2>
 800d134:	6822      	ldr	r2, [r4, #0]
 800d136:	f012 0210 	ands.w	r2, r2, #16
 800d13a:	d113      	bne.n	800d164 <_scanf_i+0x1b0>
 800d13c:	702a      	strb	r2, [r5, #0]
 800d13e:	6863      	ldr	r3, [r4, #4]
 800d140:	9e01      	ldr	r6, [sp, #4]
 800d142:	4639      	mov	r1, r7
 800d144:	4650      	mov	r0, sl
 800d146:	47b0      	blx	r6
 800d148:	f8d8 3000 	ldr.w	r3, [r8]
 800d14c:	6821      	ldr	r1, [r4, #0]
 800d14e:	1d1a      	adds	r2, r3, #4
 800d150:	f8c8 2000 	str.w	r2, [r8]
 800d154:	f011 0f20 	tst.w	r1, #32
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	d00f      	beq.n	800d17c <_scanf_i+0x1c8>
 800d15c:	6018      	str	r0, [r3, #0]
 800d15e:	68e3      	ldr	r3, [r4, #12]
 800d160:	3301      	adds	r3, #1
 800d162:	60e3      	str	r3, [r4, #12]
 800d164:	6923      	ldr	r3, [r4, #16]
 800d166:	1bed      	subs	r5, r5, r7
 800d168:	445d      	add	r5, fp
 800d16a:	442b      	add	r3, r5
 800d16c:	6123      	str	r3, [r4, #16]
 800d16e:	2000      	movs	r0, #0
 800d170:	b007      	add	sp, #28
 800d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d176:	f04f 0b00 	mov.w	fp, #0
 800d17a:	e7ca      	b.n	800d112 <_scanf_i+0x15e>
 800d17c:	07ca      	lsls	r2, r1, #31
 800d17e:	bf4c      	ite	mi
 800d180:	8018      	strhmi	r0, [r3, #0]
 800d182:	6018      	strpl	r0, [r3, #0]
 800d184:	e7eb      	b.n	800d15e <_scanf_i+0x1aa>
 800d186:	2001      	movs	r0, #1
 800d188:	e7f2      	b.n	800d170 <_scanf_i+0x1bc>
 800d18a:	bf00      	nop
 800d18c:	0800f27c 	.word	0x0800f27c
 800d190:	0800de0d 	.word	0x0800de0d
 800d194:	0800c621 	.word	0x0800c621
 800d198:	0800f67a 	.word	0x0800f67a

0800d19c <__sflush_r>:
 800d19c:	898a      	ldrh	r2, [r1, #12]
 800d19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	0710      	lsls	r0, r2, #28
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	d458      	bmi.n	800d25c <__sflush_r+0xc0>
 800d1aa:	684b      	ldr	r3, [r1, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dc05      	bgt.n	800d1bc <__sflush_r+0x20>
 800d1b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	dc02      	bgt.n	800d1bc <__sflush_r+0x20>
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1be:	2e00      	cmp	r6, #0
 800d1c0:	d0f9      	beq.n	800d1b6 <__sflush_r+0x1a>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1c8:	682f      	ldr	r7, [r5, #0]
 800d1ca:	6a21      	ldr	r1, [r4, #32]
 800d1cc:	602b      	str	r3, [r5, #0]
 800d1ce:	d032      	beq.n	800d236 <__sflush_r+0x9a>
 800d1d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	075a      	lsls	r2, r3, #29
 800d1d6:	d505      	bpl.n	800d1e4 <__sflush_r+0x48>
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	1ac0      	subs	r0, r0, r3
 800d1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1de:	b10b      	cbz	r3, 800d1e4 <__sflush_r+0x48>
 800d1e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1e2:	1ac0      	subs	r0, r0, r3
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ea:	6a21      	ldr	r1, [r4, #32]
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b0      	blx	r6
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	d106      	bne.n	800d204 <__sflush_r+0x68>
 800d1f6:	6829      	ldr	r1, [r5, #0]
 800d1f8:	291d      	cmp	r1, #29
 800d1fa:	d82b      	bhi.n	800d254 <__sflush_r+0xb8>
 800d1fc:	4a29      	ldr	r2, [pc, #164]	; (800d2a4 <__sflush_r+0x108>)
 800d1fe:	410a      	asrs	r2, r1
 800d200:	07d6      	lsls	r6, r2, #31
 800d202:	d427      	bmi.n	800d254 <__sflush_r+0xb8>
 800d204:	2200      	movs	r2, #0
 800d206:	6062      	str	r2, [r4, #4]
 800d208:	04d9      	lsls	r1, r3, #19
 800d20a:	6922      	ldr	r2, [r4, #16]
 800d20c:	6022      	str	r2, [r4, #0]
 800d20e:	d504      	bpl.n	800d21a <__sflush_r+0x7e>
 800d210:	1c42      	adds	r2, r0, #1
 800d212:	d101      	bne.n	800d218 <__sflush_r+0x7c>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b903      	cbnz	r3, 800d21a <__sflush_r+0x7e>
 800d218:	6560      	str	r0, [r4, #84]	; 0x54
 800d21a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d21c:	602f      	str	r7, [r5, #0]
 800d21e:	2900      	cmp	r1, #0
 800d220:	d0c9      	beq.n	800d1b6 <__sflush_r+0x1a>
 800d222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d226:	4299      	cmp	r1, r3
 800d228:	d002      	beq.n	800d230 <__sflush_r+0x94>
 800d22a:	4628      	mov	r0, r5
 800d22c:	f7fd fdb6 	bl	800ad9c <_free_r>
 800d230:	2000      	movs	r0, #0
 800d232:	6360      	str	r0, [r4, #52]	; 0x34
 800d234:	e7c0      	b.n	800d1b8 <__sflush_r+0x1c>
 800d236:	2301      	movs	r3, #1
 800d238:	4628      	mov	r0, r5
 800d23a:	47b0      	blx	r6
 800d23c:	1c41      	adds	r1, r0, #1
 800d23e:	d1c8      	bne.n	800d1d2 <__sflush_r+0x36>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0c5      	beq.n	800d1d2 <__sflush_r+0x36>
 800d246:	2b1d      	cmp	r3, #29
 800d248:	d001      	beq.n	800d24e <__sflush_r+0xb2>
 800d24a:	2b16      	cmp	r3, #22
 800d24c:	d101      	bne.n	800d252 <__sflush_r+0xb6>
 800d24e:	602f      	str	r7, [r5, #0]
 800d250:	e7b1      	b.n	800d1b6 <__sflush_r+0x1a>
 800d252:	89a3      	ldrh	r3, [r4, #12]
 800d254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d258:	81a3      	strh	r3, [r4, #12]
 800d25a:	e7ad      	b.n	800d1b8 <__sflush_r+0x1c>
 800d25c:	690f      	ldr	r7, [r1, #16]
 800d25e:	2f00      	cmp	r7, #0
 800d260:	d0a9      	beq.n	800d1b6 <__sflush_r+0x1a>
 800d262:	0793      	lsls	r3, r2, #30
 800d264:	680e      	ldr	r6, [r1, #0]
 800d266:	bf08      	it	eq
 800d268:	694b      	ldreq	r3, [r1, #20]
 800d26a:	600f      	str	r7, [r1, #0]
 800d26c:	bf18      	it	ne
 800d26e:	2300      	movne	r3, #0
 800d270:	eba6 0807 	sub.w	r8, r6, r7
 800d274:	608b      	str	r3, [r1, #8]
 800d276:	f1b8 0f00 	cmp.w	r8, #0
 800d27a:	dd9c      	ble.n	800d1b6 <__sflush_r+0x1a>
 800d27c:	6a21      	ldr	r1, [r4, #32]
 800d27e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d280:	4643      	mov	r3, r8
 800d282:	463a      	mov	r2, r7
 800d284:	4628      	mov	r0, r5
 800d286:	47b0      	blx	r6
 800d288:	2800      	cmp	r0, #0
 800d28a:	dc06      	bgt.n	800d29a <__sflush_r+0xfe>
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	f04f 30ff 	mov.w	r0, #4294967295
 800d298:	e78e      	b.n	800d1b8 <__sflush_r+0x1c>
 800d29a:	4407      	add	r7, r0
 800d29c:	eba8 0800 	sub.w	r8, r8, r0
 800d2a0:	e7e9      	b.n	800d276 <__sflush_r+0xda>
 800d2a2:	bf00      	nop
 800d2a4:	dfbffffe 	.word	0xdfbffffe

0800d2a8 <_fflush_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	690b      	ldr	r3, [r1, #16]
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	b913      	cbnz	r3, 800d2b8 <_fflush_r+0x10>
 800d2b2:	2500      	movs	r5, #0
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}
 800d2b8:	b118      	cbz	r0, 800d2c2 <_fflush_r+0x1a>
 800d2ba:	6a03      	ldr	r3, [r0, #32]
 800d2bc:	b90b      	cbnz	r3, 800d2c2 <_fflush_r+0x1a>
 800d2be:	f7fc fd2d 	bl	8009d1c <__sinit>
 800d2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0f3      	beq.n	800d2b2 <_fflush_r+0xa>
 800d2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2cc:	07d0      	lsls	r0, r2, #31
 800d2ce:	d404      	bmi.n	800d2da <_fflush_r+0x32>
 800d2d0:	0599      	lsls	r1, r3, #22
 800d2d2:	d402      	bmi.n	800d2da <_fflush_r+0x32>
 800d2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2d6:	f7fc fece 	bl	800a076 <__retarget_lock_acquire_recursive>
 800d2da:	4628      	mov	r0, r5
 800d2dc:	4621      	mov	r1, r4
 800d2de:	f7ff ff5d 	bl	800d19c <__sflush_r>
 800d2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2e4:	07da      	lsls	r2, r3, #31
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	d4e4      	bmi.n	800d2b4 <_fflush_r+0xc>
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	059b      	lsls	r3, r3, #22
 800d2ee:	d4e1      	bmi.n	800d2b4 <_fflush_r+0xc>
 800d2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2f2:	f7fc fec1 	bl	800a078 <__retarget_lock_release_recursive>
 800d2f6:	e7dd      	b.n	800d2b4 <_fflush_r+0xc>

0800d2f8 <__sccl>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	780b      	ldrb	r3, [r1, #0]
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	2b5e      	cmp	r3, #94	; 0x5e
 800d300:	bf0b      	itete	eq
 800d302:	784b      	ldrbeq	r3, [r1, #1]
 800d304:	1c4a      	addne	r2, r1, #1
 800d306:	1c8a      	addeq	r2, r1, #2
 800d308:	2100      	movne	r1, #0
 800d30a:	bf08      	it	eq
 800d30c:	2101      	moveq	r1, #1
 800d30e:	3801      	subs	r0, #1
 800d310:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d314:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d318:	42a8      	cmp	r0, r5
 800d31a:	d1fb      	bne.n	800d314 <__sccl+0x1c>
 800d31c:	b90b      	cbnz	r3, 800d322 <__sccl+0x2a>
 800d31e:	1e50      	subs	r0, r2, #1
 800d320:	bd70      	pop	{r4, r5, r6, pc}
 800d322:	f081 0101 	eor.w	r1, r1, #1
 800d326:	54e1      	strb	r1, [r4, r3]
 800d328:	4610      	mov	r0, r2
 800d32a:	4602      	mov	r2, r0
 800d32c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d330:	2d2d      	cmp	r5, #45	; 0x2d
 800d332:	d005      	beq.n	800d340 <__sccl+0x48>
 800d334:	2d5d      	cmp	r5, #93	; 0x5d
 800d336:	d016      	beq.n	800d366 <__sccl+0x6e>
 800d338:	2d00      	cmp	r5, #0
 800d33a:	d0f1      	beq.n	800d320 <__sccl+0x28>
 800d33c:	462b      	mov	r3, r5
 800d33e:	e7f2      	b.n	800d326 <__sccl+0x2e>
 800d340:	7846      	ldrb	r6, [r0, #1]
 800d342:	2e5d      	cmp	r6, #93	; 0x5d
 800d344:	d0fa      	beq.n	800d33c <__sccl+0x44>
 800d346:	42b3      	cmp	r3, r6
 800d348:	dcf8      	bgt.n	800d33c <__sccl+0x44>
 800d34a:	3002      	adds	r0, #2
 800d34c:	461a      	mov	r2, r3
 800d34e:	3201      	adds	r2, #1
 800d350:	4296      	cmp	r6, r2
 800d352:	54a1      	strb	r1, [r4, r2]
 800d354:	dcfb      	bgt.n	800d34e <__sccl+0x56>
 800d356:	1af2      	subs	r2, r6, r3
 800d358:	3a01      	subs	r2, #1
 800d35a:	1c5d      	adds	r5, r3, #1
 800d35c:	42b3      	cmp	r3, r6
 800d35e:	bfa8      	it	ge
 800d360:	2200      	movge	r2, #0
 800d362:	18ab      	adds	r3, r5, r2
 800d364:	e7e1      	b.n	800d32a <__sccl+0x32>
 800d366:	4610      	mov	r0, r2
 800d368:	e7da      	b.n	800d320 <__sccl+0x28>

0800d36a <__submore>:
 800d36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d376:	4299      	cmp	r1, r3
 800d378:	d11d      	bne.n	800d3b6 <__submore+0x4c>
 800d37a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d37e:	f7fd fd81 	bl	800ae84 <_malloc_r>
 800d382:	b918      	cbnz	r0, 800d38c <__submore+0x22>
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d38c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d390:	63a3      	str	r3, [r4, #56]	; 0x38
 800d392:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d396:	6360      	str	r0, [r4, #52]	; 0x34
 800d398:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d39c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d3a0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d3a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d3a8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d3ac:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d3b0:	6020      	str	r0, [r4, #0]
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	e7e8      	b.n	800d388 <__submore+0x1e>
 800d3b6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d3b8:	0077      	lsls	r7, r6, #1
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	f000 fc85 	bl	800dcca <_realloc_r>
 800d3c0:	4605      	mov	r5, r0
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0de      	beq.n	800d384 <__submore+0x1a>
 800d3c6:	eb00 0806 	add.w	r8, r0, r6
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7fc fe53 	bl	800a07a <memcpy>
 800d3d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d3d8:	f8c4 8000 	str.w	r8, [r4]
 800d3dc:	e7e9      	b.n	800d3b2 <__submore+0x48>

0800d3de <__swbuf_r>:
 800d3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e0:	460e      	mov	r6, r1
 800d3e2:	4614      	mov	r4, r2
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <__swbuf_r+0x12>
 800d3e8:	6a03      	ldr	r3, [r0, #32]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <__swbuf_r+0x12>
 800d3ec:	f7fc fc96 	bl	8009d1c <__sinit>
 800d3f0:	69a3      	ldr	r3, [r4, #24]
 800d3f2:	60a3      	str	r3, [r4, #8]
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	071a      	lsls	r2, r3, #28
 800d3f8:	d525      	bpl.n	800d446 <__swbuf_r+0x68>
 800d3fa:	6923      	ldr	r3, [r4, #16]
 800d3fc:	b31b      	cbz	r3, 800d446 <__swbuf_r+0x68>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	6922      	ldr	r2, [r4, #16]
 800d402:	1a98      	subs	r0, r3, r2
 800d404:	6963      	ldr	r3, [r4, #20]
 800d406:	b2f6      	uxtb	r6, r6
 800d408:	4283      	cmp	r3, r0
 800d40a:	4637      	mov	r7, r6
 800d40c:	dc04      	bgt.n	800d418 <__swbuf_r+0x3a>
 800d40e:	4621      	mov	r1, r4
 800d410:	4628      	mov	r0, r5
 800d412:	f7ff ff49 	bl	800d2a8 <_fflush_r>
 800d416:	b9e0      	cbnz	r0, 800d452 <__swbuf_r+0x74>
 800d418:	68a3      	ldr	r3, [r4, #8]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	60a3      	str	r3, [r4, #8]
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	6022      	str	r2, [r4, #0]
 800d424:	701e      	strb	r6, [r3, #0]
 800d426:	6962      	ldr	r2, [r4, #20]
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d004      	beq.n	800d438 <__swbuf_r+0x5a>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	07db      	lsls	r3, r3, #31
 800d432:	d506      	bpl.n	800d442 <__swbuf_r+0x64>
 800d434:	2e0a      	cmp	r6, #10
 800d436:	d104      	bne.n	800d442 <__swbuf_r+0x64>
 800d438:	4621      	mov	r1, r4
 800d43a:	4628      	mov	r0, r5
 800d43c:	f7ff ff34 	bl	800d2a8 <_fflush_r>
 800d440:	b938      	cbnz	r0, 800d452 <__swbuf_r+0x74>
 800d442:	4638      	mov	r0, r7
 800d444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d446:	4621      	mov	r1, r4
 800d448:	4628      	mov	r0, r5
 800d44a:	f000 f805 	bl	800d458 <__swsetup_r>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d0d5      	beq.n	800d3fe <__swbuf_r+0x20>
 800d452:	f04f 37ff 	mov.w	r7, #4294967295
 800d456:	e7f4      	b.n	800d442 <__swbuf_r+0x64>

0800d458 <__swsetup_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4b2a      	ldr	r3, [pc, #168]	; (800d504 <__swsetup_r+0xac>)
 800d45c:	4605      	mov	r5, r0
 800d45e:	6818      	ldr	r0, [r3, #0]
 800d460:	460c      	mov	r4, r1
 800d462:	b118      	cbz	r0, 800d46c <__swsetup_r+0x14>
 800d464:	6a03      	ldr	r3, [r0, #32]
 800d466:	b90b      	cbnz	r3, 800d46c <__swsetup_r+0x14>
 800d468:	f7fc fc58 	bl	8009d1c <__sinit>
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d472:	0718      	lsls	r0, r3, #28
 800d474:	d422      	bmi.n	800d4bc <__swsetup_r+0x64>
 800d476:	06d9      	lsls	r1, r3, #27
 800d478:	d407      	bmi.n	800d48a <__swsetup_r+0x32>
 800d47a:	2309      	movs	r3, #9
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	f04f 30ff 	mov.w	r0, #4294967295
 800d488:	e034      	b.n	800d4f4 <__swsetup_r+0x9c>
 800d48a:	0758      	lsls	r0, r3, #29
 800d48c:	d512      	bpl.n	800d4b4 <__swsetup_r+0x5c>
 800d48e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d490:	b141      	cbz	r1, 800d4a4 <__swsetup_r+0x4c>
 800d492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d496:	4299      	cmp	r1, r3
 800d498:	d002      	beq.n	800d4a0 <__swsetup_r+0x48>
 800d49a:	4628      	mov	r0, r5
 800d49c:	f7fd fc7e 	bl	800ad9c <_free_r>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	6363      	str	r3, [r4, #52]	; 0x34
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	6063      	str	r3, [r4, #4]
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	6023      	str	r3, [r4, #0]
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f043 0308 	orr.w	r3, r3, #8
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	b94b      	cbnz	r3, 800d4d4 <__swsetup_r+0x7c>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ca:	d003      	beq.n	800d4d4 <__swsetup_r+0x7c>
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f000 fce4 	bl	800de9c <__smakebuf_r>
 800d4d4:	89a0      	ldrh	r0, [r4, #12]
 800d4d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4da:	f010 0301 	ands.w	r3, r0, #1
 800d4de:	d00a      	beq.n	800d4f6 <__swsetup_r+0x9e>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	60a3      	str	r3, [r4, #8]
 800d4e4:	6963      	ldr	r3, [r4, #20]
 800d4e6:	425b      	negs	r3, r3
 800d4e8:	61a3      	str	r3, [r4, #24]
 800d4ea:	6923      	ldr	r3, [r4, #16]
 800d4ec:	b943      	cbnz	r3, 800d500 <__swsetup_r+0xa8>
 800d4ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4f2:	d1c4      	bne.n	800d47e <__swsetup_r+0x26>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	0781      	lsls	r1, r0, #30
 800d4f8:	bf58      	it	pl
 800d4fa:	6963      	ldrpl	r3, [r4, #20]
 800d4fc:	60a3      	str	r3, [r4, #8]
 800d4fe:	e7f4      	b.n	800d4ea <__swsetup_r+0x92>
 800d500:	2000      	movs	r0, #0
 800d502:	e7f7      	b.n	800d4f4 <__swsetup_r+0x9c>
 800d504:	200000e8 	.word	0x200000e8

0800d508 <memmove>:
 800d508:	4288      	cmp	r0, r1
 800d50a:	b510      	push	{r4, lr}
 800d50c:	eb01 0402 	add.w	r4, r1, r2
 800d510:	d902      	bls.n	800d518 <memmove+0x10>
 800d512:	4284      	cmp	r4, r0
 800d514:	4623      	mov	r3, r4
 800d516:	d807      	bhi.n	800d528 <memmove+0x20>
 800d518:	1e43      	subs	r3, r0, #1
 800d51a:	42a1      	cmp	r1, r4
 800d51c:	d008      	beq.n	800d530 <memmove+0x28>
 800d51e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d522:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d526:	e7f8      	b.n	800d51a <memmove+0x12>
 800d528:	4402      	add	r2, r0
 800d52a:	4601      	mov	r1, r0
 800d52c:	428a      	cmp	r2, r1
 800d52e:	d100      	bne.n	800d532 <memmove+0x2a>
 800d530:	bd10      	pop	{r4, pc}
 800d532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d53a:	e7f7      	b.n	800d52c <memmove+0x24>

0800d53c <strncmp>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	b16a      	cbz	r2, 800d55c <strncmp+0x20>
 800d540:	3901      	subs	r1, #1
 800d542:	1884      	adds	r4, r0, r2
 800d544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d548:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d103      	bne.n	800d558 <strncmp+0x1c>
 800d550:	42a0      	cmp	r0, r4
 800d552:	d001      	beq.n	800d558 <strncmp+0x1c>
 800d554:	2a00      	cmp	r2, #0
 800d556:	d1f5      	bne.n	800d544 <strncmp+0x8>
 800d558:	1ad0      	subs	r0, r2, r3
 800d55a:	bd10      	pop	{r4, pc}
 800d55c:	4610      	mov	r0, r2
 800d55e:	e7fc      	b.n	800d55a <strncmp+0x1e>

0800d560 <_sbrk_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_sbrk_r+0x1c>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7f4 fe16 	bl	800219c <_sbrk>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_sbrk_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_sbrk_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	20005924 	.word	0x20005924

0800d580 <nan>:
 800d580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d588 <nan+0x8>
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	00000000 	.word	0x00000000
 800d58c:	7ff80000 	.word	0x7ff80000

0800d590 <__assert_func>:
 800d590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d592:	4614      	mov	r4, r2
 800d594:	461a      	mov	r2, r3
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <__assert_func+0x2c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4605      	mov	r5, r0
 800d59c:	68d8      	ldr	r0, [r3, #12]
 800d59e:	b14c      	cbz	r4, 800d5b4 <__assert_func+0x24>
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <__assert_func+0x30>)
 800d5a2:	9100      	str	r1, [sp, #0]
 800d5a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5a8:	4906      	ldr	r1, [pc, #24]	; (800d5c4 <__assert_func+0x34>)
 800d5aa:	462b      	mov	r3, r5
 800d5ac:	f000 fc3e 	bl	800de2c <fiprintf>
 800d5b0:	f000 fcd2 	bl	800df58 <abort>
 800d5b4:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <__assert_func+0x38>)
 800d5b6:	461c      	mov	r4, r3
 800d5b8:	e7f3      	b.n	800d5a2 <__assert_func+0x12>
 800d5ba:	bf00      	nop
 800d5bc:	200000e8 	.word	0x200000e8
 800d5c0:	0800f68d 	.word	0x0800f68d
 800d5c4:	0800f69a 	.word	0x0800f69a
 800d5c8:	0800f6c8 	.word	0x0800f6c8

0800d5cc <_calloc_r>:
 800d5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ce:	fba1 2402 	umull	r2, r4, r1, r2
 800d5d2:	b94c      	cbnz	r4, 800d5e8 <_calloc_r+0x1c>
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	9201      	str	r2, [sp, #4]
 800d5d8:	f7fd fc54 	bl	800ae84 <_malloc_r>
 800d5dc:	9a01      	ldr	r2, [sp, #4]
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b930      	cbnz	r0, 800d5f0 <_calloc_r+0x24>
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	b003      	add	sp, #12
 800d5e6:	bd30      	pop	{r4, r5, pc}
 800d5e8:	220c      	movs	r2, #12
 800d5ea:	6002      	str	r2, [r0, #0]
 800d5ec:	2500      	movs	r5, #0
 800d5ee:	e7f8      	b.n	800d5e2 <_calloc_r+0x16>
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	f7fc fc6c 	bl	8009ece <memset>
 800d5f6:	e7f4      	b.n	800d5e2 <_calloc_r+0x16>

0800d5f8 <rshift>:
 800d5f8:	6903      	ldr	r3, [r0, #16]
 800d5fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d602:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d606:	f100 0414 	add.w	r4, r0, #20
 800d60a:	dd45      	ble.n	800d698 <rshift+0xa0>
 800d60c:	f011 011f 	ands.w	r1, r1, #31
 800d610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d618:	d10c      	bne.n	800d634 <rshift+0x3c>
 800d61a:	f100 0710 	add.w	r7, r0, #16
 800d61e:	4629      	mov	r1, r5
 800d620:	42b1      	cmp	r1, r6
 800d622:	d334      	bcc.n	800d68e <rshift+0x96>
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	1eea      	subs	r2, r5, #3
 800d62a:	4296      	cmp	r6, r2
 800d62c:	bf38      	it	cc
 800d62e:	2300      	movcc	r3, #0
 800d630:	4423      	add	r3, r4
 800d632:	e015      	b.n	800d660 <rshift+0x68>
 800d634:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d638:	f1c1 0820 	rsb	r8, r1, #32
 800d63c:	40cf      	lsrs	r7, r1
 800d63e:	f105 0e04 	add.w	lr, r5, #4
 800d642:	46a1      	mov	r9, r4
 800d644:	4576      	cmp	r6, lr
 800d646:	46f4      	mov	ip, lr
 800d648:	d815      	bhi.n	800d676 <rshift+0x7e>
 800d64a:	1a9a      	subs	r2, r3, r2
 800d64c:	0092      	lsls	r2, r2, #2
 800d64e:	3a04      	subs	r2, #4
 800d650:	3501      	adds	r5, #1
 800d652:	42ae      	cmp	r6, r5
 800d654:	bf38      	it	cc
 800d656:	2200      	movcc	r2, #0
 800d658:	18a3      	adds	r3, r4, r2
 800d65a:	50a7      	str	r7, [r4, r2]
 800d65c:	b107      	cbz	r7, 800d660 <rshift+0x68>
 800d65e:	3304      	adds	r3, #4
 800d660:	1b1a      	subs	r2, r3, r4
 800d662:	42a3      	cmp	r3, r4
 800d664:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d668:	bf08      	it	eq
 800d66a:	2300      	moveq	r3, #0
 800d66c:	6102      	str	r2, [r0, #16]
 800d66e:	bf08      	it	eq
 800d670:	6143      	streq	r3, [r0, #20]
 800d672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d676:	f8dc c000 	ldr.w	ip, [ip]
 800d67a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d67e:	ea4c 0707 	orr.w	r7, ip, r7
 800d682:	f849 7b04 	str.w	r7, [r9], #4
 800d686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d68a:	40cf      	lsrs	r7, r1
 800d68c:	e7da      	b.n	800d644 <rshift+0x4c>
 800d68e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d692:	f847 cf04 	str.w	ip, [r7, #4]!
 800d696:	e7c3      	b.n	800d620 <rshift+0x28>
 800d698:	4623      	mov	r3, r4
 800d69a:	e7e1      	b.n	800d660 <rshift+0x68>

0800d69c <__hexdig_fun>:
 800d69c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d6a0:	2b09      	cmp	r3, #9
 800d6a2:	d802      	bhi.n	800d6aa <__hexdig_fun+0xe>
 800d6a4:	3820      	subs	r0, #32
 800d6a6:	b2c0      	uxtb	r0, r0
 800d6a8:	4770      	bx	lr
 800d6aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d6ae:	2b05      	cmp	r3, #5
 800d6b0:	d801      	bhi.n	800d6b6 <__hexdig_fun+0x1a>
 800d6b2:	3847      	subs	r0, #71	; 0x47
 800d6b4:	e7f7      	b.n	800d6a6 <__hexdig_fun+0xa>
 800d6b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	d801      	bhi.n	800d6c2 <__hexdig_fun+0x26>
 800d6be:	3827      	subs	r0, #39	; 0x27
 800d6c0:	e7f1      	b.n	800d6a6 <__hexdig_fun+0xa>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <__gethex>:
 800d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	4617      	mov	r7, r2
 800d6ce:	680a      	ldr	r2, [r1, #0]
 800d6d0:	b085      	sub	sp, #20
 800d6d2:	f102 0b02 	add.w	fp, r2, #2
 800d6d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6de:	4681      	mov	r9, r0
 800d6e0:	468a      	mov	sl, r1
 800d6e2:	9302      	str	r3, [sp, #8]
 800d6e4:	32fe      	adds	r2, #254	; 0xfe
 800d6e6:	eb02 030b 	add.w	r3, r2, fp
 800d6ea:	46d8      	mov	r8, fp
 800d6ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d6f0:	9301      	str	r3, [sp, #4]
 800d6f2:	2830      	cmp	r0, #48	; 0x30
 800d6f4:	d0f7      	beq.n	800d6e6 <__gethex+0x1e>
 800d6f6:	f7ff ffd1 	bl	800d69c <__hexdig_fun>
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d138      	bne.n	800d772 <__gethex+0xaa>
 800d700:	49a7      	ldr	r1, [pc, #668]	; (800d9a0 <__gethex+0x2d8>)
 800d702:	2201      	movs	r2, #1
 800d704:	4640      	mov	r0, r8
 800d706:	f7ff ff19 	bl	800d53c <strncmp>
 800d70a:	4606      	mov	r6, r0
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d169      	bne.n	800d7e4 <__gethex+0x11c>
 800d710:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d714:	465d      	mov	r5, fp
 800d716:	f7ff ffc1 	bl	800d69c <__hexdig_fun>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d064      	beq.n	800d7e8 <__gethex+0x120>
 800d71e:	465a      	mov	r2, fp
 800d720:	7810      	ldrb	r0, [r2, #0]
 800d722:	2830      	cmp	r0, #48	; 0x30
 800d724:	4690      	mov	r8, r2
 800d726:	f102 0201 	add.w	r2, r2, #1
 800d72a:	d0f9      	beq.n	800d720 <__gethex+0x58>
 800d72c:	f7ff ffb6 	bl	800d69c <__hexdig_fun>
 800d730:	2301      	movs	r3, #1
 800d732:	fab0 f480 	clz	r4, r0
 800d736:	0964      	lsrs	r4, r4, #5
 800d738:	465e      	mov	r6, fp
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	4642      	mov	r2, r8
 800d73e:	4615      	mov	r5, r2
 800d740:	3201      	adds	r2, #1
 800d742:	7828      	ldrb	r0, [r5, #0]
 800d744:	f7ff ffaa 	bl	800d69c <__hexdig_fun>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d1f8      	bne.n	800d73e <__gethex+0x76>
 800d74c:	4994      	ldr	r1, [pc, #592]	; (800d9a0 <__gethex+0x2d8>)
 800d74e:	2201      	movs	r2, #1
 800d750:	4628      	mov	r0, r5
 800d752:	f7ff fef3 	bl	800d53c <strncmp>
 800d756:	b978      	cbnz	r0, 800d778 <__gethex+0xb0>
 800d758:	b946      	cbnz	r6, 800d76c <__gethex+0xa4>
 800d75a:	1c6e      	adds	r6, r5, #1
 800d75c:	4632      	mov	r2, r6
 800d75e:	4615      	mov	r5, r2
 800d760:	3201      	adds	r2, #1
 800d762:	7828      	ldrb	r0, [r5, #0]
 800d764:	f7ff ff9a 	bl	800d69c <__hexdig_fun>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d1f8      	bne.n	800d75e <__gethex+0x96>
 800d76c:	1b73      	subs	r3, r6, r5
 800d76e:	009e      	lsls	r6, r3, #2
 800d770:	e004      	b.n	800d77c <__gethex+0xb4>
 800d772:	2400      	movs	r4, #0
 800d774:	4626      	mov	r6, r4
 800d776:	e7e1      	b.n	800d73c <__gethex+0x74>
 800d778:	2e00      	cmp	r6, #0
 800d77a:	d1f7      	bne.n	800d76c <__gethex+0xa4>
 800d77c:	782b      	ldrb	r3, [r5, #0]
 800d77e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d782:	2b50      	cmp	r3, #80	; 0x50
 800d784:	d13d      	bne.n	800d802 <__gethex+0x13a>
 800d786:	786b      	ldrb	r3, [r5, #1]
 800d788:	2b2b      	cmp	r3, #43	; 0x2b
 800d78a:	d02f      	beq.n	800d7ec <__gethex+0x124>
 800d78c:	2b2d      	cmp	r3, #45	; 0x2d
 800d78e:	d031      	beq.n	800d7f4 <__gethex+0x12c>
 800d790:	1c69      	adds	r1, r5, #1
 800d792:	f04f 0b00 	mov.w	fp, #0
 800d796:	7808      	ldrb	r0, [r1, #0]
 800d798:	f7ff ff80 	bl	800d69c <__hexdig_fun>
 800d79c:	1e42      	subs	r2, r0, #1
 800d79e:	b2d2      	uxtb	r2, r2
 800d7a0:	2a18      	cmp	r2, #24
 800d7a2:	d82e      	bhi.n	800d802 <__gethex+0x13a>
 800d7a4:	f1a0 0210 	sub.w	r2, r0, #16
 800d7a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7ac:	f7ff ff76 	bl	800d69c <__hexdig_fun>
 800d7b0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d7b4:	fa5f fc8c 	uxtb.w	ip, ip
 800d7b8:	f1bc 0f18 	cmp.w	ip, #24
 800d7bc:	d91d      	bls.n	800d7fa <__gethex+0x132>
 800d7be:	f1bb 0f00 	cmp.w	fp, #0
 800d7c2:	d000      	beq.n	800d7c6 <__gethex+0xfe>
 800d7c4:	4252      	negs	r2, r2
 800d7c6:	4416      	add	r6, r2
 800d7c8:	f8ca 1000 	str.w	r1, [sl]
 800d7cc:	b1dc      	cbz	r4, 800d806 <__gethex+0x13e>
 800d7ce:	9b01      	ldr	r3, [sp, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bf14      	ite	ne
 800d7d4:	f04f 0800 	movne.w	r8, #0
 800d7d8:	f04f 0806 	moveq.w	r8, #6
 800d7dc:	4640      	mov	r0, r8
 800d7de:	b005      	add	sp, #20
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e4:	4645      	mov	r5, r8
 800d7e6:	4626      	mov	r6, r4
 800d7e8:	2401      	movs	r4, #1
 800d7ea:	e7c7      	b.n	800d77c <__gethex+0xb4>
 800d7ec:	f04f 0b00 	mov.w	fp, #0
 800d7f0:	1ca9      	adds	r1, r5, #2
 800d7f2:	e7d0      	b.n	800d796 <__gethex+0xce>
 800d7f4:	f04f 0b01 	mov.w	fp, #1
 800d7f8:	e7fa      	b.n	800d7f0 <__gethex+0x128>
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	fb03 0002 	mla	r0, r3, r2, r0
 800d800:	e7d0      	b.n	800d7a4 <__gethex+0xdc>
 800d802:	4629      	mov	r1, r5
 800d804:	e7e0      	b.n	800d7c8 <__gethex+0x100>
 800d806:	eba5 0308 	sub.w	r3, r5, r8
 800d80a:	3b01      	subs	r3, #1
 800d80c:	4621      	mov	r1, r4
 800d80e:	2b07      	cmp	r3, #7
 800d810:	dc0a      	bgt.n	800d828 <__gethex+0x160>
 800d812:	4648      	mov	r0, r9
 800d814:	f7fd fbc2 	bl	800af9c <_Balloc>
 800d818:	4604      	mov	r4, r0
 800d81a:	b940      	cbnz	r0, 800d82e <__gethex+0x166>
 800d81c:	4b61      	ldr	r3, [pc, #388]	; (800d9a4 <__gethex+0x2dc>)
 800d81e:	4602      	mov	r2, r0
 800d820:	21e4      	movs	r1, #228	; 0xe4
 800d822:	4861      	ldr	r0, [pc, #388]	; (800d9a8 <__gethex+0x2e0>)
 800d824:	f7ff feb4 	bl	800d590 <__assert_func>
 800d828:	3101      	adds	r1, #1
 800d82a:	105b      	asrs	r3, r3, #1
 800d82c:	e7ef      	b.n	800d80e <__gethex+0x146>
 800d82e:	f100 0a14 	add.w	sl, r0, #20
 800d832:	2300      	movs	r3, #0
 800d834:	495a      	ldr	r1, [pc, #360]	; (800d9a0 <__gethex+0x2d8>)
 800d836:	f8cd a004 	str.w	sl, [sp, #4]
 800d83a:	469b      	mov	fp, r3
 800d83c:	45a8      	cmp	r8, r5
 800d83e:	d342      	bcc.n	800d8c6 <__gethex+0x1fe>
 800d840:	9801      	ldr	r0, [sp, #4]
 800d842:	f840 bb04 	str.w	fp, [r0], #4
 800d846:	eba0 000a 	sub.w	r0, r0, sl
 800d84a:	1080      	asrs	r0, r0, #2
 800d84c:	6120      	str	r0, [r4, #16]
 800d84e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d852:	4658      	mov	r0, fp
 800d854:	f7fd fc94 	bl	800b180 <__hi0bits>
 800d858:	683d      	ldr	r5, [r7, #0]
 800d85a:	eba8 0000 	sub.w	r0, r8, r0
 800d85e:	42a8      	cmp	r0, r5
 800d860:	dd59      	ble.n	800d916 <__gethex+0x24e>
 800d862:	eba0 0805 	sub.w	r8, r0, r5
 800d866:	4641      	mov	r1, r8
 800d868:	4620      	mov	r0, r4
 800d86a:	f7fe f823 	bl	800b8b4 <__any_on>
 800d86e:	4683      	mov	fp, r0
 800d870:	b1b8      	cbz	r0, 800d8a2 <__gethex+0x1da>
 800d872:	f108 33ff 	add.w	r3, r8, #4294967295
 800d876:	1159      	asrs	r1, r3, #5
 800d878:	f003 021f 	and.w	r2, r3, #31
 800d87c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d880:	f04f 0b01 	mov.w	fp, #1
 800d884:	fa0b f202 	lsl.w	r2, fp, r2
 800d888:	420a      	tst	r2, r1
 800d88a:	d00a      	beq.n	800d8a2 <__gethex+0x1da>
 800d88c:	455b      	cmp	r3, fp
 800d88e:	dd06      	ble.n	800d89e <__gethex+0x1d6>
 800d890:	f1a8 0102 	sub.w	r1, r8, #2
 800d894:	4620      	mov	r0, r4
 800d896:	f7fe f80d 	bl	800b8b4 <__any_on>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d138      	bne.n	800d910 <__gethex+0x248>
 800d89e:	f04f 0b02 	mov.w	fp, #2
 800d8a2:	4641      	mov	r1, r8
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff fea7 	bl	800d5f8 <rshift>
 800d8aa:	4446      	add	r6, r8
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	42b3      	cmp	r3, r6
 800d8b0:	da41      	bge.n	800d936 <__gethex+0x26e>
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4648      	mov	r0, r9
 800d8b6:	f7fd fbb1 	bl	800b01c <_Bfree>
 800d8ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8bc:	2300      	movs	r3, #0
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d8c4:	e78a      	b.n	800d7dc <__gethex+0x114>
 800d8c6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d8ca:	2a2e      	cmp	r2, #46	; 0x2e
 800d8cc:	d014      	beq.n	800d8f8 <__gethex+0x230>
 800d8ce:	2b20      	cmp	r3, #32
 800d8d0:	d106      	bne.n	800d8e0 <__gethex+0x218>
 800d8d2:	9b01      	ldr	r3, [sp, #4]
 800d8d4:	f843 bb04 	str.w	fp, [r3], #4
 800d8d8:	f04f 0b00 	mov.w	fp, #0
 800d8dc:	9301      	str	r3, [sp, #4]
 800d8de:	465b      	mov	r3, fp
 800d8e0:	7828      	ldrb	r0, [r5, #0]
 800d8e2:	9303      	str	r3, [sp, #12]
 800d8e4:	f7ff feda 	bl	800d69c <__hexdig_fun>
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	f000 000f 	and.w	r0, r0, #15
 800d8ee:	4098      	lsls	r0, r3
 800d8f0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	e7a1      	b.n	800d83c <__gethex+0x174>
 800d8f8:	45a8      	cmp	r8, r5
 800d8fa:	d8e8      	bhi.n	800d8ce <__gethex+0x206>
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	4628      	mov	r0, r5
 800d900:	9303      	str	r3, [sp, #12]
 800d902:	f7ff fe1b 	bl	800d53c <strncmp>
 800d906:	4926      	ldr	r1, [pc, #152]	; (800d9a0 <__gethex+0x2d8>)
 800d908:	9b03      	ldr	r3, [sp, #12]
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d1df      	bne.n	800d8ce <__gethex+0x206>
 800d90e:	e795      	b.n	800d83c <__gethex+0x174>
 800d910:	f04f 0b03 	mov.w	fp, #3
 800d914:	e7c5      	b.n	800d8a2 <__gethex+0x1da>
 800d916:	da0b      	bge.n	800d930 <__gethex+0x268>
 800d918:	eba5 0800 	sub.w	r8, r5, r0
 800d91c:	4621      	mov	r1, r4
 800d91e:	4642      	mov	r2, r8
 800d920:	4648      	mov	r0, r9
 800d922:	f7fd fd95 	bl	800b450 <__lshift>
 800d926:	eba6 0608 	sub.w	r6, r6, r8
 800d92a:	4604      	mov	r4, r0
 800d92c:	f100 0a14 	add.w	sl, r0, #20
 800d930:	f04f 0b00 	mov.w	fp, #0
 800d934:	e7ba      	b.n	800d8ac <__gethex+0x1e4>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	42b3      	cmp	r3, r6
 800d93a:	dd73      	ble.n	800da24 <__gethex+0x35c>
 800d93c:	1b9e      	subs	r6, r3, r6
 800d93e:	42b5      	cmp	r5, r6
 800d940:	dc34      	bgt.n	800d9ac <__gethex+0x2e4>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d023      	beq.n	800d990 <__gethex+0x2c8>
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d025      	beq.n	800d998 <__gethex+0x2d0>
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d115      	bne.n	800d97c <__gethex+0x2b4>
 800d950:	42b5      	cmp	r5, r6
 800d952:	d113      	bne.n	800d97c <__gethex+0x2b4>
 800d954:	2d01      	cmp	r5, #1
 800d956:	d10b      	bne.n	800d970 <__gethex+0x2a8>
 800d958:	9a02      	ldr	r2, [sp, #8]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	2301      	movs	r3, #1
 800d960:	6123      	str	r3, [r4, #16]
 800d962:	f8ca 3000 	str.w	r3, [sl]
 800d966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d968:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d96c:	601c      	str	r4, [r3, #0]
 800d96e:	e735      	b.n	800d7dc <__gethex+0x114>
 800d970:	1e69      	subs	r1, r5, #1
 800d972:	4620      	mov	r0, r4
 800d974:	f7fd ff9e 	bl	800b8b4 <__any_on>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d1ed      	bne.n	800d958 <__gethex+0x290>
 800d97c:	4621      	mov	r1, r4
 800d97e:	4648      	mov	r0, r9
 800d980:	f7fd fb4c 	bl	800b01c <_Bfree>
 800d984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d986:	2300      	movs	r3, #0
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d98e:	e725      	b.n	800d7dc <__gethex+0x114>
 800d990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1f2      	bne.n	800d97c <__gethex+0x2b4>
 800d996:	e7df      	b.n	800d958 <__gethex+0x290>
 800d998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1dc      	bne.n	800d958 <__gethex+0x290>
 800d99e:	e7ed      	b.n	800d97c <__gethex+0x2b4>
 800d9a0:	0800f504 	.word	0x0800f504
 800d9a4:	0800f397 	.word	0x0800f397
 800d9a8:	0800f6c9 	.word	0x0800f6c9
 800d9ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800d9b0:	f1bb 0f00 	cmp.w	fp, #0
 800d9b4:	d133      	bne.n	800da1e <__gethex+0x356>
 800d9b6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ba:	d004      	beq.n	800d9c6 <__gethex+0x2fe>
 800d9bc:	4641      	mov	r1, r8
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7fd ff78 	bl	800b8b4 <__any_on>
 800d9c4:	4683      	mov	fp, r0
 800d9c6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d9d0:	f008 081f 	and.w	r8, r8, #31
 800d9d4:	fa03 f308 	lsl.w	r3, r3, r8
 800d9d8:	4213      	tst	r3, r2
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4620      	mov	r0, r4
 800d9de:	bf18      	it	ne
 800d9e0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d9e4:	1bad      	subs	r5, r5, r6
 800d9e6:	f7ff fe07 	bl	800d5f8 <rshift>
 800d9ea:	687e      	ldr	r6, [r7, #4]
 800d9ec:	f04f 0802 	mov.w	r8, #2
 800d9f0:	f1bb 0f00 	cmp.w	fp, #0
 800d9f4:	d04a      	beq.n	800da8c <__gethex+0x3c4>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d016      	beq.n	800da2a <__gethex+0x362>
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d018      	beq.n	800da32 <__gethex+0x36a>
 800da00:	2b01      	cmp	r3, #1
 800da02:	d109      	bne.n	800da18 <__gethex+0x350>
 800da04:	f01b 0f02 	tst.w	fp, #2
 800da08:	d006      	beq.n	800da18 <__gethex+0x350>
 800da0a:	f8da 3000 	ldr.w	r3, [sl]
 800da0e:	ea4b 0b03 	orr.w	fp, fp, r3
 800da12:	f01b 0f01 	tst.w	fp, #1
 800da16:	d10f      	bne.n	800da38 <__gethex+0x370>
 800da18:	f048 0810 	orr.w	r8, r8, #16
 800da1c:	e036      	b.n	800da8c <__gethex+0x3c4>
 800da1e:	f04f 0b01 	mov.w	fp, #1
 800da22:	e7d0      	b.n	800d9c6 <__gethex+0x2fe>
 800da24:	f04f 0801 	mov.w	r8, #1
 800da28:	e7e2      	b.n	800d9f0 <__gethex+0x328>
 800da2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da2c:	f1c3 0301 	rsb	r3, r3, #1
 800da30:	930f      	str	r3, [sp, #60]	; 0x3c
 800da32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da34:	2b00      	cmp	r3, #0
 800da36:	d0ef      	beq.n	800da18 <__gethex+0x350>
 800da38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da3c:	f104 0214 	add.w	r2, r4, #20
 800da40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800da4a:	2300      	movs	r3, #0
 800da4c:	4694      	mov	ip, r2
 800da4e:	f852 1b04 	ldr.w	r1, [r2], #4
 800da52:	f1b1 3fff 	cmp.w	r1, #4294967295
 800da56:	d01e      	beq.n	800da96 <__gethex+0x3ce>
 800da58:	3101      	adds	r1, #1
 800da5a:	f8cc 1000 	str.w	r1, [ip]
 800da5e:	f1b8 0f02 	cmp.w	r8, #2
 800da62:	f104 0214 	add.w	r2, r4, #20
 800da66:	d13d      	bne.n	800dae4 <__gethex+0x41c>
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	3b01      	subs	r3, #1
 800da6c:	42ab      	cmp	r3, r5
 800da6e:	d10b      	bne.n	800da88 <__gethex+0x3c0>
 800da70:	1169      	asrs	r1, r5, #5
 800da72:	2301      	movs	r3, #1
 800da74:	f005 051f 	and.w	r5, r5, #31
 800da78:	fa03 f505 	lsl.w	r5, r3, r5
 800da7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da80:	421d      	tst	r5, r3
 800da82:	bf18      	it	ne
 800da84:	f04f 0801 	movne.w	r8, #1
 800da88:	f048 0820 	orr.w	r8, r8, #32
 800da8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da8e:	601c      	str	r4, [r3, #0]
 800da90:	9b02      	ldr	r3, [sp, #8]
 800da92:	601e      	str	r6, [r3, #0]
 800da94:	e6a2      	b.n	800d7dc <__gethex+0x114>
 800da96:	4290      	cmp	r0, r2
 800da98:	f842 3c04 	str.w	r3, [r2, #-4]
 800da9c:	d8d6      	bhi.n	800da4c <__gethex+0x384>
 800da9e:	68a2      	ldr	r2, [r4, #8]
 800daa0:	4593      	cmp	fp, r2
 800daa2:	db17      	blt.n	800dad4 <__gethex+0x40c>
 800daa4:	6861      	ldr	r1, [r4, #4]
 800daa6:	4648      	mov	r0, r9
 800daa8:	3101      	adds	r1, #1
 800daaa:	f7fd fa77 	bl	800af9c <_Balloc>
 800daae:	4682      	mov	sl, r0
 800dab0:	b918      	cbnz	r0, 800daba <__gethex+0x3f2>
 800dab2:	4b1b      	ldr	r3, [pc, #108]	; (800db20 <__gethex+0x458>)
 800dab4:	4602      	mov	r2, r0
 800dab6:	2184      	movs	r1, #132	; 0x84
 800dab8:	e6b3      	b.n	800d822 <__gethex+0x15a>
 800daba:	6922      	ldr	r2, [r4, #16]
 800dabc:	3202      	adds	r2, #2
 800dabe:	f104 010c 	add.w	r1, r4, #12
 800dac2:	0092      	lsls	r2, r2, #2
 800dac4:	300c      	adds	r0, #12
 800dac6:	f7fc fad8 	bl	800a07a <memcpy>
 800daca:	4621      	mov	r1, r4
 800dacc:	4648      	mov	r0, r9
 800dace:	f7fd faa5 	bl	800b01c <_Bfree>
 800dad2:	4654      	mov	r4, sl
 800dad4:	6922      	ldr	r2, [r4, #16]
 800dad6:	1c51      	adds	r1, r2, #1
 800dad8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dadc:	6121      	str	r1, [r4, #16]
 800dade:	2101      	movs	r1, #1
 800dae0:	6151      	str	r1, [r2, #20]
 800dae2:	e7bc      	b.n	800da5e <__gethex+0x396>
 800dae4:	6921      	ldr	r1, [r4, #16]
 800dae6:	4559      	cmp	r1, fp
 800dae8:	dd0b      	ble.n	800db02 <__gethex+0x43a>
 800daea:	2101      	movs	r1, #1
 800daec:	4620      	mov	r0, r4
 800daee:	f7ff fd83 	bl	800d5f8 <rshift>
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	3601      	adds	r6, #1
 800daf6:	42b3      	cmp	r3, r6
 800daf8:	f6ff aedb 	blt.w	800d8b2 <__gethex+0x1ea>
 800dafc:	f04f 0801 	mov.w	r8, #1
 800db00:	e7c2      	b.n	800da88 <__gethex+0x3c0>
 800db02:	f015 051f 	ands.w	r5, r5, #31
 800db06:	d0f9      	beq.n	800dafc <__gethex+0x434>
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	441a      	add	r2, r3
 800db0c:	f1c5 0520 	rsb	r5, r5, #32
 800db10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800db14:	f7fd fb34 	bl	800b180 <__hi0bits>
 800db18:	42a8      	cmp	r0, r5
 800db1a:	dbe6      	blt.n	800daea <__gethex+0x422>
 800db1c:	e7ee      	b.n	800dafc <__gethex+0x434>
 800db1e:	bf00      	nop
 800db20:	0800f397 	.word	0x0800f397

0800db24 <L_shift>:
 800db24:	f1c2 0208 	rsb	r2, r2, #8
 800db28:	0092      	lsls	r2, r2, #2
 800db2a:	b570      	push	{r4, r5, r6, lr}
 800db2c:	f1c2 0620 	rsb	r6, r2, #32
 800db30:	6843      	ldr	r3, [r0, #4]
 800db32:	6804      	ldr	r4, [r0, #0]
 800db34:	fa03 f506 	lsl.w	r5, r3, r6
 800db38:	432c      	orrs	r4, r5
 800db3a:	40d3      	lsrs	r3, r2
 800db3c:	6004      	str	r4, [r0, #0]
 800db3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800db42:	4288      	cmp	r0, r1
 800db44:	d3f4      	bcc.n	800db30 <L_shift+0xc>
 800db46:	bd70      	pop	{r4, r5, r6, pc}

0800db48 <__match>:
 800db48:	b530      	push	{r4, r5, lr}
 800db4a:	6803      	ldr	r3, [r0, #0]
 800db4c:	3301      	adds	r3, #1
 800db4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db52:	b914      	cbnz	r4, 800db5a <__match+0x12>
 800db54:	6003      	str	r3, [r0, #0]
 800db56:	2001      	movs	r0, #1
 800db58:	bd30      	pop	{r4, r5, pc}
 800db5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db62:	2d19      	cmp	r5, #25
 800db64:	bf98      	it	ls
 800db66:	3220      	addls	r2, #32
 800db68:	42a2      	cmp	r2, r4
 800db6a:	d0f0      	beq.n	800db4e <__match+0x6>
 800db6c:	2000      	movs	r0, #0
 800db6e:	e7f3      	b.n	800db58 <__match+0x10>

0800db70 <__hexnan>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	680b      	ldr	r3, [r1, #0]
 800db76:	6801      	ldr	r1, [r0, #0]
 800db78:	115e      	asrs	r6, r3, #5
 800db7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db7e:	f013 031f 	ands.w	r3, r3, #31
 800db82:	b087      	sub	sp, #28
 800db84:	bf18      	it	ne
 800db86:	3604      	addne	r6, #4
 800db88:	2500      	movs	r5, #0
 800db8a:	1f37      	subs	r7, r6, #4
 800db8c:	4682      	mov	sl, r0
 800db8e:	4690      	mov	r8, r2
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	f846 5c04 	str.w	r5, [r6, #-4]
 800db96:	46b9      	mov	r9, r7
 800db98:	463c      	mov	r4, r7
 800db9a:	9502      	str	r5, [sp, #8]
 800db9c:	46ab      	mov	fp, r5
 800db9e:	784a      	ldrb	r2, [r1, #1]
 800dba0:	1c4b      	adds	r3, r1, #1
 800dba2:	9303      	str	r3, [sp, #12]
 800dba4:	b342      	cbz	r2, 800dbf8 <__hexnan+0x88>
 800dba6:	4610      	mov	r0, r2
 800dba8:	9105      	str	r1, [sp, #20]
 800dbaa:	9204      	str	r2, [sp, #16]
 800dbac:	f7ff fd76 	bl	800d69c <__hexdig_fun>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d14f      	bne.n	800dc54 <__hexnan+0xe4>
 800dbb4:	9a04      	ldr	r2, [sp, #16]
 800dbb6:	9905      	ldr	r1, [sp, #20]
 800dbb8:	2a20      	cmp	r2, #32
 800dbba:	d818      	bhi.n	800dbee <__hexnan+0x7e>
 800dbbc:	9b02      	ldr	r3, [sp, #8]
 800dbbe:	459b      	cmp	fp, r3
 800dbc0:	dd13      	ble.n	800dbea <__hexnan+0x7a>
 800dbc2:	454c      	cmp	r4, r9
 800dbc4:	d206      	bcs.n	800dbd4 <__hexnan+0x64>
 800dbc6:	2d07      	cmp	r5, #7
 800dbc8:	dc04      	bgt.n	800dbd4 <__hexnan+0x64>
 800dbca:	462a      	mov	r2, r5
 800dbcc:	4649      	mov	r1, r9
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f7ff ffa8 	bl	800db24 <L_shift>
 800dbd4:	4544      	cmp	r4, r8
 800dbd6:	d950      	bls.n	800dc7a <__hexnan+0x10a>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f1a4 0904 	sub.w	r9, r4, #4
 800dbde:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbe2:	f8cd b008 	str.w	fp, [sp, #8]
 800dbe6:	464c      	mov	r4, r9
 800dbe8:	461d      	mov	r5, r3
 800dbea:	9903      	ldr	r1, [sp, #12]
 800dbec:	e7d7      	b.n	800db9e <__hexnan+0x2e>
 800dbee:	2a29      	cmp	r2, #41	; 0x29
 800dbf0:	d155      	bne.n	800dc9e <__hexnan+0x12e>
 800dbf2:	3102      	adds	r1, #2
 800dbf4:	f8ca 1000 	str.w	r1, [sl]
 800dbf8:	f1bb 0f00 	cmp.w	fp, #0
 800dbfc:	d04f      	beq.n	800dc9e <__hexnan+0x12e>
 800dbfe:	454c      	cmp	r4, r9
 800dc00:	d206      	bcs.n	800dc10 <__hexnan+0xa0>
 800dc02:	2d07      	cmp	r5, #7
 800dc04:	dc04      	bgt.n	800dc10 <__hexnan+0xa0>
 800dc06:	462a      	mov	r2, r5
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7ff ff8a 	bl	800db24 <L_shift>
 800dc10:	4544      	cmp	r4, r8
 800dc12:	d934      	bls.n	800dc7e <__hexnan+0x10e>
 800dc14:	f1a8 0204 	sub.w	r2, r8, #4
 800dc18:	4623      	mov	r3, r4
 800dc1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc22:	429f      	cmp	r7, r3
 800dc24:	d2f9      	bcs.n	800dc1a <__hexnan+0xaa>
 800dc26:	1b3b      	subs	r3, r7, r4
 800dc28:	f023 0303 	bic.w	r3, r3, #3
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	3e03      	subs	r6, #3
 800dc30:	3401      	adds	r4, #1
 800dc32:	42a6      	cmp	r6, r4
 800dc34:	bf38      	it	cc
 800dc36:	2304      	movcc	r3, #4
 800dc38:	4443      	add	r3, r8
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f843 2b04 	str.w	r2, [r3], #4
 800dc40:	429f      	cmp	r7, r3
 800dc42:	d2fb      	bcs.n	800dc3c <__hexnan+0xcc>
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	b91b      	cbnz	r3, 800dc50 <__hexnan+0xe0>
 800dc48:	4547      	cmp	r7, r8
 800dc4a:	d126      	bne.n	800dc9a <__hexnan+0x12a>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	2005      	movs	r0, #5
 800dc52:	e025      	b.n	800dca0 <__hexnan+0x130>
 800dc54:	3501      	adds	r5, #1
 800dc56:	2d08      	cmp	r5, #8
 800dc58:	f10b 0b01 	add.w	fp, fp, #1
 800dc5c:	dd06      	ble.n	800dc6c <__hexnan+0xfc>
 800dc5e:	4544      	cmp	r4, r8
 800dc60:	d9c3      	bls.n	800dbea <__hexnan+0x7a>
 800dc62:	2300      	movs	r3, #0
 800dc64:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc68:	2501      	movs	r5, #1
 800dc6a:	3c04      	subs	r4, #4
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	f000 000f 	and.w	r0, r0, #15
 800dc72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc76:	6020      	str	r0, [r4, #0]
 800dc78:	e7b7      	b.n	800dbea <__hexnan+0x7a>
 800dc7a:	2508      	movs	r5, #8
 800dc7c:	e7b5      	b.n	800dbea <__hexnan+0x7a>
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d0df      	beq.n	800dc44 <__hexnan+0xd4>
 800dc84:	f1c3 0320 	rsb	r3, r3, #32
 800dc88:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8c:	40da      	lsrs	r2, r3
 800dc8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc92:	4013      	ands	r3, r2
 800dc94:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc98:	e7d4      	b.n	800dc44 <__hexnan+0xd4>
 800dc9a:	3f04      	subs	r7, #4
 800dc9c:	e7d2      	b.n	800dc44 <__hexnan+0xd4>
 800dc9e:	2004      	movs	r0, #4
 800dca0:	b007      	add	sp, #28
 800dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dca6 <__ascii_mbtowc>:
 800dca6:	b082      	sub	sp, #8
 800dca8:	b901      	cbnz	r1, 800dcac <__ascii_mbtowc+0x6>
 800dcaa:	a901      	add	r1, sp, #4
 800dcac:	b142      	cbz	r2, 800dcc0 <__ascii_mbtowc+0x1a>
 800dcae:	b14b      	cbz	r3, 800dcc4 <__ascii_mbtowc+0x1e>
 800dcb0:	7813      	ldrb	r3, [r2, #0]
 800dcb2:	600b      	str	r3, [r1, #0]
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	1e10      	subs	r0, r2, #0
 800dcb8:	bf18      	it	ne
 800dcba:	2001      	movne	r0, #1
 800dcbc:	b002      	add	sp, #8
 800dcbe:	4770      	bx	lr
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	e7fb      	b.n	800dcbc <__ascii_mbtowc+0x16>
 800dcc4:	f06f 0001 	mvn.w	r0, #1
 800dcc8:	e7f8      	b.n	800dcbc <__ascii_mbtowc+0x16>

0800dcca <_realloc_r>:
 800dcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcce:	4680      	mov	r8, r0
 800dcd0:	4614      	mov	r4, r2
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	b921      	cbnz	r1, 800dce0 <_realloc_r+0x16>
 800dcd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcda:	4611      	mov	r1, r2
 800dcdc:	f7fd b8d2 	b.w	800ae84 <_malloc_r>
 800dce0:	b92a      	cbnz	r2, 800dcee <_realloc_r+0x24>
 800dce2:	f7fd f85b 	bl	800ad9c <_free_r>
 800dce6:	4625      	mov	r5, r4
 800dce8:	4628      	mov	r0, r5
 800dcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcee:	f000 f93a 	bl	800df66 <_malloc_usable_size_r>
 800dcf2:	4284      	cmp	r4, r0
 800dcf4:	4607      	mov	r7, r0
 800dcf6:	d802      	bhi.n	800dcfe <_realloc_r+0x34>
 800dcf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcfc:	d812      	bhi.n	800dd24 <_realloc_r+0x5a>
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4640      	mov	r0, r8
 800dd02:	f7fd f8bf 	bl	800ae84 <_malloc_r>
 800dd06:	4605      	mov	r5, r0
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0ed      	beq.n	800dce8 <_realloc_r+0x1e>
 800dd0c:	42bc      	cmp	r4, r7
 800dd0e:	4622      	mov	r2, r4
 800dd10:	4631      	mov	r1, r6
 800dd12:	bf28      	it	cs
 800dd14:	463a      	movcs	r2, r7
 800dd16:	f7fc f9b0 	bl	800a07a <memcpy>
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	f7fd f83d 	bl	800ad9c <_free_r>
 800dd22:	e7e1      	b.n	800dce8 <_realloc_r+0x1e>
 800dd24:	4635      	mov	r5, r6
 800dd26:	e7df      	b.n	800dce8 <_realloc_r+0x1e>

0800dd28 <_strtoul_l.constprop.0>:
 800dd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd2c:	4f36      	ldr	r7, [pc, #216]	; (800de08 <_strtoul_l.constprop.0+0xe0>)
 800dd2e:	4686      	mov	lr, r0
 800dd30:	460d      	mov	r5, r1
 800dd32:	4628      	mov	r0, r5
 800dd34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd38:	5d3e      	ldrb	r6, [r7, r4]
 800dd3a:	f016 0608 	ands.w	r6, r6, #8
 800dd3e:	d1f8      	bne.n	800dd32 <_strtoul_l.constprop.0+0xa>
 800dd40:	2c2d      	cmp	r4, #45	; 0x2d
 800dd42:	d130      	bne.n	800dda6 <_strtoul_l.constprop.0+0x7e>
 800dd44:	782c      	ldrb	r4, [r5, #0]
 800dd46:	2601      	movs	r6, #1
 800dd48:	1c85      	adds	r5, r0, #2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d057      	beq.n	800ddfe <_strtoul_l.constprop.0+0xd6>
 800dd4e:	2b10      	cmp	r3, #16
 800dd50:	d109      	bne.n	800dd66 <_strtoul_l.constprop.0+0x3e>
 800dd52:	2c30      	cmp	r4, #48	; 0x30
 800dd54:	d107      	bne.n	800dd66 <_strtoul_l.constprop.0+0x3e>
 800dd56:	7828      	ldrb	r0, [r5, #0]
 800dd58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dd5c:	2858      	cmp	r0, #88	; 0x58
 800dd5e:	d149      	bne.n	800ddf4 <_strtoul_l.constprop.0+0xcc>
 800dd60:	786c      	ldrb	r4, [r5, #1]
 800dd62:	2310      	movs	r3, #16
 800dd64:	3502      	adds	r5, #2
 800dd66:	f04f 38ff 	mov.w	r8, #4294967295
 800dd6a:	2700      	movs	r7, #0
 800dd6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800dd70:	fb03 f908 	mul.w	r9, r3, r8
 800dd74:	ea6f 0909 	mvn.w	r9, r9
 800dd78:	4638      	mov	r0, r7
 800dd7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd7e:	f1bc 0f09 	cmp.w	ip, #9
 800dd82:	d815      	bhi.n	800ddb0 <_strtoul_l.constprop.0+0x88>
 800dd84:	4664      	mov	r4, ip
 800dd86:	42a3      	cmp	r3, r4
 800dd88:	dd23      	ble.n	800ddd2 <_strtoul_l.constprop.0+0xaa>
 800dd8a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800dd8e:	d007      	beq.n	800dda0 <_strtoul_l.constprop.0+0x78>
 800dd90:	4580      	cmp	r8, r0
 800dd92:	d31b      	bcc.n	800ddcc <_strtoul_l.constprop.0+0xa4>
 800dd94:	d101      	bne.n	800dd9a <_strtoul_l.constprop.0+0x72>
 800dd96:	45a1      	cmp	r9, r4
 800dd98:	db18      	blt.n	800ddcc <_strtoul_l.constprop.0+0xa4>
 800dd9a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd9e:	2701      	movs	r7, #1
 800dda0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dda4:	e7e9      	b.n	800dd7a <_strtoul_l.constprop.0+0x52>
 800dda6:	2c2b      	cmp	r4, #43	; 0x2b
 800dda8:	bf04      	itt	eq
 800ddaa:	782c      	ldrbeq	r4, [r5, #0]
 800ddac:	1c85      	addeq	r5, r0, #2
 800ddae:	e7cc      	b.n	800dd4a <_strtoul_l.constprop.0+0x22>
 800ddb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ddb4:	f1bc 0f19 	cmp.w	ip, #25
 800ddb8:	d801      	bhi.n	800ddbe <_strtoul_l.constprop.0+0x96>
 800ddba:	3c37      	subs	r4, #55	; 0x37
 800ddbc:	e7e3      	b.n	800dd86 <_strtoul_l.constprop.0+0x5e>
 800ddbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ddc2:	f1bc 0f19 	cmp.w	ip, #25
 800ddc6:	d804      	bhi.n	800ddd2 <_strtoul_l.constprop.0+0xaa>
 800ddc8:	3c57      	subs	r4, #87	; 0x57
 800ddca:	e7dc      	b.n	800dd86 <_strtoul_l.constprop.0+0x5e>
 800ddcc:	f04f 37ff 	mov.w	r7, #4294967295
 800ddd0:	e7e6      	b.n	800dda0 <_strtoul_l.constprop.0+0x78>
 800ddd2:	1c7b      	adds	r3, r7, #1
 800ddd4:	d106      	bne.n	800dde4 <_strtoul_l.constprop.0+0xbc>
 800ddd6:	2322      	movs	r3, #34	; 0x22
 800ddd8:	f8ce 3000 	str.w	r3, [lr]
 800dddc:	4638      	mov	r0, r7
 800ddde:	b932      	cbnz	r2, 800ddee <_strtoul_l.constprop.0+0xc6>
 800dde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde4:	b106      	cbz	r6, 800dde8 <_strtoul_l.constprop.0+0xc0>
 800dde6:	4240      	negs	r0, r0
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	d0f9      	beq.n	800dde0 <_strtoul_l.constprop.0+0xb8>
 800ddec:	b107      	cbz	r7, 800ddf0 <_strtoul_l.constprop.0+0xc8>
 800ddee:	1e69      	subs	r1, r5, #1
 800ddf0:	6011      	str	r1, [r2, #0]
 800ddf2:	e7f5      	b.n	800dde0 <_strtoul_l.constprop.0+0xb8>
 800ddf4:	2430      	movs	r4, #48	; 0x30
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1b5      	bne.n	800dd66 <_strtoul_l.constprop.0+0x3e>
 800ddfa:	2308      	movs	r3, #8
 800ddfc:	e7b3      	b.n	800dd66 <_strtoul_l.constprop.0+0x3e>
 800ddfe:	2c30      	cmp	r4, #48	; 0x30
 800de00:	d0a9      	beq.n	800dd56 <_strtoul_l.constprop.0+0x2e>
 800de02:	230a      	movs	r3, #10
 800de04:	e7af      	b.n	800dd66 <_strtoul_l.constprop.0+0x3e>
 800de06:	bf00      	nop
 800de08:	0800f559 	.word	0x0800f559

0800de0c <_strtoul_r>:
 800de0c:	f7ff bf8c 	b.w	800dd28 <_strtoul_l.constprop.0>

0800de10 <__ascii_wctomb>:
 800de10:	b149      	cbz	r1, 800de26 <__ascii_wctomb+0x16>
 800de12:	2aff      	cmp	r2, #255	; 0xff
 800de14:	bf85      	ittet	hi
 800de16:	238a      	movhi	r3, #138	; 0x8a
 800de18:	6003      	strhi	r3, [r0, #0]
 800de1a:	700a      	strbls	r2, [r1, #0]
 800de1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800de20:	bf98      	it	ls
 800de22:	2001      	movls	r0, #1
 800de24:	4770      	bx	lr
 800de26:	4608      	mov	r0, r1
 800de28:	4770      	bx	lr
	...

0800de2c <fiprintf>:
 800de2c:	b40e      	push	{r1, r2, r3}
 800de2e:	b503      	push	{r0, r1, lr}
 800de30:	4601      	mov	r1, r0
 800de32:	ab03      	add	r3, sp, #12
 800de34:	4805      	ldr	r0, [pc, #20]	; (800de4c <fiprintf+0x20>)
 800de36:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	f7fe ff45 	bl	800cccc <_vfiprintf_r>
 800de42:	b002      	add	sp, #8
 800de44:	f85d eb04 	ldr.w	lr, [sp], #4
 800de48:	b003      	add	sp, #12
 800de4a:	4770      	bx	lr
 800de4c:	200000e8 	.word	0x200000e8

0800de50 <__swhatbuf_r>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	460c      	mov	r4, r1
 800de54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de58:	2900      	cmp	r1, #0
 800de5a:	b096      	sub	sp, #88	; 0x58
 800de5c:	4615      	mov	r5, r2
 800de5e:	461e      	mov	r6, r3
 800de60:	da0d      	bge.n	800de7e <__swhatbuf_r+0x2e>
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de68:	f04f 0100 	mov.w	r1, #0
 800de6c:	bf0c      	ite	eq
 800de6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de72:	2340      	movne	r3, #64	; 0x40
 800de74:	2000      	movs	r0, #0
 800de76:	6031      	str	r1, [r6, #0]
 800de78:	602b      	str	r3, [r5, #0]
 800de7a:	b016      	add	sp, #88	; 0x58
 800de7c:	bd70      	pop	{r4, r5, r6, pc}
 800de7e:	466a      	mov	r2, sp
 800de80:	f000 f848 	bl	800df14 <_fstat_r>
 800de84:	2800      	cmp	r0, #0
 800de86:	dbec      	blt.n	800de62 <__swhatbuf_r+0x12>
 800de88:	9901      	ldr	r1, [sp, #4]
 800de8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de92:	4259      	negs	r1, r3
 800de94:	4159      	adcs	r1, r3
 800de96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de9a:	e7eb      	b.n	800de74 <__swhatbuf_r+0x24>

0800de9c <__smakebuf_r>:
 800de9c:	898b      	ldrh	r3, [r1, #12]
 800de9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dea0:	079d      	lsls	r5, r3, #30
 800dea2:	4606      	mov	r6, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	d507      	bpl.n	800deb8 <__smakebuf_r+0x1c>
 800dea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	6123      	str	r3, [r4, #16]
 800deb0:	2301      	movs	r3, #1
 800deb2:	6163      	str	r3, [r4, #20]
 800deb4:	b002      	add	sp, #8
 800deb6:	bd70      	pop	{r4, r5, r6, pc}
 800deb8:	ab01      	add	r3, sp, #4
 800deba:	466a      	mov	r2, sp
 800debc:	f7ff ffc8 	bl	800de50 <__swhatbuf_r>
 800dec0:	9900      	ldr	r1, [sp, #0]
 800dec2:	4605      	mov	r5, r0
 800dec4:	4630      	mov	r0, r6
 800dec6:	f7fc ffdd 	bl	800ae84 <_malloc_r>
 800deca:	b948      	cbnz	r0, 800dee0 <__smakebuf_r+0x44>
 800decc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded0:	059a      	lsls	r2, r3, #22
 800ded2:	d4ef      	bmi.n	800deb4 <__smakebuf_r+0x18>
 800ded4:	f023 0303 	bic.w	r3, r3, #3
 800ded8:	f043 0302 	orr.w	r3, r3, #2
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	e7e3      	b.n	800dea8 <__smakebuf_r+0xc>
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	6020      	str	r0, [r4, #0]
 800dee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	6163      	str	r3, [r4, #20]
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	6120      	str	r0, [r4, #16]
 800def2:	b15b      	cbz	r3, 800df0c <__smakebuf_r+0x70>
 800def4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f81d 	bl	800df38 <_isatty_r>
 800defe:	b128      	cbz	r0, 800df0c <__smakebuf_r+0x70>
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f023 0303 	bic.w	r3, r3, #3
 800df06:	f043 0301 	orr.w	r3, r3, #1
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	431d      	orrs	r5, r3
 800df10:	81a5      	strh	r5, [r4, #12]
 800df12:	e7cf      	b.n	800deb4 <__smakebuf_r+0x18>

0800df14 <_fstat_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d07      	ldr	r5, [pc, #28]	; (800df34 <_fstat_r+0x20>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	4611      	mov	r1, r2
 800df20:	602b      	str	r3, [r5, #0]
 800df22:	f7f4 f912 	bl	800214a <_fstat>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	d102      	bne.n	800df30 <_fstat_r+0x1c>
 800df2a:	682b      	ldr	r3, [r5, #0]
 800df2c:	b103      	cbz	r3, 800df30 <_fstat_r+0x1c>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd38      	pop	{r3, r4, r5, pc}
 800df32:	bf00      	nop
 800df34:	20005924 	.word	0x20005924

0800df38 <_isatty_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d06      	ldr	r5, [pc, #24]	; (800df54 <_isatty_r+0x1c>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	602b      	str	r3, [r5, #0]
 800df44:	f7f4 f911 	bl	800216a <_isatty>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_isatty_r+0x1a>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_isatty_r+0x1a>
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	20005924 	.word	0x20005924

0800df58 <abort>:
 800df58:	b508      	push	{r3, lr}
 800df5a:	2006      	movs	r0, #6
 800df5c:	f000 f834 	bl	800dfc8 <raise>
 800df60:	2001      	movs	r0, #1
 800df62:	f7f4 f8a3 	bl	80020ac <_exit>

0800df66 <_malloc_usable_size_r>:
 800df66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df6a:	1f18      	subs	r0, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bfbc      	itt	lt
 800df70:	580b      	ldrlt	r3, [r1, r0]
 800df72:	18c0      	addlt	r0, r0, r3
 800df74:	4770      	bx	lr

0800df76 <_raise_r>:
 800df76:	291f      	cmp	r1, #31
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	d904      	bls.n	800df8a <_raise_r+0x14>
 800df80:	2316      	movs	r3, #22
 800df82:	6003      	str	r3, [r0, #0]
 800df84:	f04f 30ff 	mov.w	r0, #4294967295
 800df88:	bd38      	pop	{r3, r4, r5, pc}
 800df8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df8c:	b112      	cbz	r2, 800df94 <_raise_r+0x1e>
 800df8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df92:	b94b      	cbnz	r3, 800dfa8 <_raise_r+0x32>
 800df94:	4620      	mov	r0, r4
 800df96:	f000 f831 	bl	800dffc <_getpid_r>
 800df9a:	462a      	mov	r2, r5
 800df9c:	4601      	mov	r1, r0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfa4:	f000 b818 	b.w	800dfd8 <_kill_r>
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d00a      	beq.n	800dfc2 <_raise_r+0x4c>
 800dfac:	1c59      	adds	r1, r3, #1
 800dfae:	d103      	bne.n	800dfb8 <_raise_r+0x42>
 800dfb0:	2316      	movs	r3, #22
 800dfb2:	6003      	str	r3, [r0, #0]
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	e7e7      	b.n	800df88 <_raise_r+0x12>
 800dfb8:	2400      	movs	r4, #0
 800dfba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	4798      	blx	r3
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e7e0      	b.n	800df88 <_raise_r+0x12>
	...

0800dfc8 <raise>:
 800dfc8:	4b02      	ldr	r3, [pc, #8]	; (800dfd4 <raise+0xc>)
 800dfca:	4601      	mov	r1, r0
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	f7ff bfd2 	b.w	800df76 <_raise_r>
 800dfd2:	bf00      	nop
 800dfd4:	200000e8 	.word	0x200000e8

0800dfd8 <_kill_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4d07      	ldr	r5, [pc, #28]	; (800dff8 <_kill_r+0x20>)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	602b      	str	r3, [r5, #0]
 800dfe6:	f7f4 f851 	bl	800208c <_kill>
 800dfea:	1c43      	adds	r3, r0, #1
 800dfec:	d102      	bne.n	800dff4 <_kill_r+0x1c>
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	b103      	cbz	r3, 800dff4 <_kill_r+0x1c>
 800dff2:	6023      	str	r3, [r4, #0]
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
 800dff6:	bf00      	nop
 800dff8:	20005924 	.word	0x20005924

0800dffc <_getpid_r>:
 800dffc:	f7f4 b83e 	b.w	800207c <_getpid>

0800e000 <cos>:
 800e000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e002:	ec53 2b10 	vmov	r2, r3, d0
 800e006:	4826      	ldr	r0, [pc, #152]	; (800e0a0 <cos+0xa0>)
 800e008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e00c:	4281      	cmp	r1, r0
 800e00e:	dc06      	bgt.n	800e01e <cos+0x1e>
 800e010:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e098 <cos+0x98>
 800e014:	b005      	add	sp, #20
 800e016:	f85d eb04 	ldr.w	lr, [sp], #4
 800e01a:	f000 b8f1 	b.w	800e200 <__kernel_cos>
 800e01e:	4821      	ldr	r0, [pc, #132]	; (800e0a4 <cos+0xa4>)
 800e020:	4281      	cmp	r1, r0
 800e022:	dd09      	ble.n	800e038 <cos+0x38>
 800e024:	ee10 0a10 	vmov	r0, s0
 800e028:	4619      	mov	r1, r3
 800e02a:	f7f2 f935 	bl	8000298 <__aeabi_dsub>
 800e02e:	ec41 0b10 	vmov	d0, r0, r1
 800e032:	b005      	add	sp, #20
 800e034:	f85d fb04 	ldr.w	pc, [sp], #4
 800e038:	4668      	mov	r0, sp
 800e03a:	f000 fa69 	bl	800e510 <__ieee754_rem_pio2>
 800e03e:	f000 0003 	and.w	r0, r0, #3
 800e042:	2801      	cmp	r0, #1
 800e044:	d00b      	beq.n	800e05e <cos+0x5e>
 800e046:	2802      	cmp	r0, #2
 800e048:	d016      	beq.n	800e078 <cos+0x78>
 800e04a:	b9e0      	cbnz	r0, 800e086 <cos+0x86>
 800e04c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e050:	ed9d 0b00 	vldr	d0, [sp]
 800e054:	f000 f8d4 	bl	800e200 <__kernel_cos>
 800e058:	ec51 0b10 	vmov	r0, r1, d0
 800e05c:	e7e7      	b.n	800e02e <cos+0x2e>
 800e05e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e062:	ed9d 0b00 	vldr	d0, [sp]
 800e066:	f000 f993 	bl	800e390 <__kernel_sin>
 800e06a:	ec53 2b10 	vmov	r2, r3, d0
 800e06e:	ee10 0a10 	vmov	r0, s0
 800e072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e076:	e7da      	b.n	800e02e <cos+0x2e>
 800e078:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e07c:	ed9d 0b00 	vldr	d0, [sp]
 800e080:	f000 f8be 	bl	800e200 <__kernel_cos>
 800e084:	e7f1      	b.n	800e06a <cos+0x6a>
 800e086:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e08a:	ed9d 0b00 	vldr	d0, [sp]
 800e08e:	2001      	movs	r0, #1
 800e090:	f000 f97e 	bl	800e390 <__kernel_sin>
 800e094:	e7e0      	b.n	800e058 <cos+0x58>
 800e096:	bf00      	nop
	...
 800e0a0:	3fe921fb 	.word	0x3fe921fb
 800e0a4:	7fefffff 	.word	0x7fefffff

0800e0a8 <sin>:
 800e0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0aa:	ec53 2b10 	vmov	r2, r3, d0
 800e0ae:	4828      	ldr	r0, [pc, #160]	; (800e150 <sin+0xa8>)
 800e0b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0b4:	4281      	cmp	r1, r0
 800e0b6:	dc07      	bgt.n	800e0c8 <sin+0x20>
 800e0b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e148 <sin+0xa0>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	b005      	add	sp, #20
 800e0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c4:	f000 b964 	b.w	800e390 <__kernel_sin>
 800e0c8:	4822      	ldr	r0, [pc, #136]	; (800e154 <sin+0xac>)
 800e0ca:	4281      	cmp	r1, r0
 800e0cc:	dd09      	ble.n	800e0e2 <sin+0x3a>
 800e0ce:	ee10 0a10 	vmov	r0, s0
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f7f2 f8e0 	bl	8000298 <__aeabi_dsub>
 800e0d8:	ec41 0b10 	vmov	d0, r0, r1
 800e0dc:	b005      	add	sp, #20
 800e0de:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0e2:	4668      	mov	r0, sp
 800e0e4:	f000 fa14 	bl	800e510 <__ieee754_rem_pio2>
 800e0e8:	f000 0003 	and.w	r0, r0, #3
 800e0ec:	2801      	cmp	r0, #1
 800e0ee:	d00c      	beq.n	800e10a <sin+0x62>
 800e0f0:	2802      	cmp	r0, #2
 800e0f2:	d011      	beq.n	800e118 <sin+0x70>
 800e0f4:	b9f0      	cbnz	r0, 800e134 <sin+0x8c>
 800e0f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0fa:	ed9d 0b00 	vldr	d0, [sp]
 800e0fe:	2001      	movs	r0, #1
 800e100:	f000 f946 	bl	800e390 <__kernel_sin>
 800e104:	ec51 0b10 	vmov	r0, r1, d0
 800e108:	e7e6      	b.n	800e0d8 <sin+0x30>
 800e10a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e10e:	ed9d 0b00 	vldr	d0, [sp]
 800e112:	f000 f875 	bl	800e200 <__kernel_cos>
 800e116:	e7f5      	b.n	800e104 <sin+0x5c>
 800e118:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e11c:	ed9d 0b00 	vldr	d0, [sp]
 800e120:	2001      	movs	r0, #1
 800e122:	f000 f935 	bl	800e390 <__kernel_sin>
 800e126:	ec53 2b10 	vmov	r2, r3, d0
 800e12a:	ee10 0a10 	vmov	r0, s0
 800e12e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e132:	e7d1      	b.n	800e0d8 <sin+0x30>
 800e134:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e138:	ed9d 0b00 	vldr	d0, [sp]
 800e13c:	f000 f860 	bl	800e200 <__kernel_cos>
 800e140:	e7f1      	b.n	800e126 <sin+0x7e>
 800e142:	bf00      	nop
 800e144:	f3af 8000 	nop.w
	...
 800e150:	3fe921fb 	.word	0x3fe921fb
 800e154:	7fefffff 	.word	0x7fefffff

0800e158 <fmaxf>:
 800e158:	b508      	push	{r3, lr}
 800e15a:	ed2d 8b02 	vpush	{d8}
 800e15e:	eeb0 8a40 	vmov.f32	s16, s0
 800e162:	eef0 8a60 	vmov.f32	s17, s1
 800e166:	f000 f82d 	bl	800e1c4 <__fpclassifyf>
 800e16a:	b148      	cbz	r0, 800e180 <fmaxf+0x28>
 800e16c:	eeb0 0a68 	vmov.f32	s0, s17
 800e170:	f000 f828 	bl	800e1c4 <__fpclassifyf>
 800e174:	b130      	cbz	r0, 800e184 <fmaxf+0x2c>
 800e176:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17e:	dc01      	bgt.n	800e184 <fmaxf+0x2c>
 800e180:	eeb0 8a68 	vmov.f32	s16, s17
 800e184:	eeb0 0a48 	vmov.f32	s0, s16
 800e188:	ecbd 8b02 	vpop	{d8}
 800e18c:	bd08      	pop	{r3, pc}

0800e18e <fminf>:
 800e18e:	b508      	push	{r3, lr}
 800e190:	ed2d 8b02 	vpush	{d8}
 800e194:	eeb0 8a40 	vmov.f32	s16, s0
 800e198:	eef0 8a60 	vmov.f32	s17, s1
 800e19c:	f000 f812 	bl	800e1c4 <__fpclassifyf>
 800e1a0:	b148      	cbz	r0, 800e1b6 <fminf+0x28>
 800e1a2:	eeb0 0a68 	vmov.f32	s0, s17
 800e1a6:	f000 f80d 	bl	800e1c4 <__fpclassifyf>
 800e1aa:	b130      	cbz	r0, 800e1ba <fminf+0x2c>
 800e1ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b4:	d401      	bmi.n	800e1ba <fminf+0x2c>
 800e1b6:	eeb0 8a68 	vmov.f32	s16, s17
 800e1ba:	eeb0 0a48 	vmov.f32	s0, s16
 800e1be:	ecbd 8b02 	vpop	{d8}
 800e1c2:	bd08      	pop	{r3, pc}

0800e1c4 <__fpclassifyf>:
 800e1c4:	ee10 3a10 	vmov	r3, s0
 800e1c8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800e1cc:	d00d      	beq.n	800e1ea <__fpclassifyf+0x26>
 800e1ce:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800e1d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e1d6:	d30a      	bcc.n	800e1ee <__fpclassifyf+0x2a>
 800e1d8:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <__fpclassifyf+0x34>)
 800e1da:	1e42      	subs	r2, r0, #1
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d908      	bls.n	800e1f2 <__fpclassifyf+0x2e>
 800e1e0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800e1e4:	4258      	negs	r0, r3
 800e1e6:	4158      	adcs	r0, r3
 800e1e8:	4770      	bx	lr
 800e1ea:	2002      	movs	r0, #2
 800e1ec:	4770      	bx	lr
 800e1ee:	2004      	movs	r0, #4
 800e1f0:	4770      	bx	lr
 800e1f2:	2003      	movs	r0, #3
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	007ffffe 	.word	0x007ffffe
 800e1fc:	00000000 	.word	0x00000000

0800e200 <__kernel_cos>:
 800e200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	ec57 6b10 	vmov	r6, r7, d0
 800e208:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e20c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e210:	ed8d 1b00 	vstr	d1, [sp]
 800e214:	da07      	bge.n	800e226 <__kernel_cos+0x26>
 800e216:	ee10 0a10 	vmov	r0, s0
 800e21a:	4639      	mov	r1, r7
 800e21c:	f7f2 fca4 	bl	8000b68 <__aeabi_d2iz>
 800e220:	2800      	cmp	r0, #0
 800e222:	f000 8088 	beq.w	800e336 <__kernel_cos+0x136>
 800e226:	4632      	mov	r2, r6
 800e228:	463b      	mov	r3, r7
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f2 f9eb 	bl	8000608 <__aeabi_dmul>
 800e232:	4b51      	ldr	r3, [pc, #324]	; (800e378 <__kernel_cos+0x178>)
 800e234:	2200      	movs	r2, #0
 800e236:	4604      	mov	r4, r0
 800e238:	460d      	mov	r5, r1
 800e23a:	f7f2 f9e5 	bl	8000608 <__aeabi_dmul>
 800e23e:	a340      	add	r3, pc, #256	; (adr r3, 800e340 <__kernel_cos+0x140>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	4682      	mov	sl, r0
 800e246:	468b      	mov	fp, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f9dc 	bl	8000608 <__aeabi_dmul>
 800e250:	a33d      	add	r3, pc, #244	; (adr r3, 800e348 <__kernel_cos+0x148>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f821 	bl	800029c <__adddf3>
 800e25a:	4622      	mov	r2, r4
 800e25c:	462b      	mov	r3, r5
 800e25e:	f7f2 f9d3 	bl	8000608 <__aeabi_dmul>
 800e262:	a33b      	add	r3, pc, #236	; (adr r3, 800e350 <__kernel_cos+0x150>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f816 	bl	8000298 <__aeabi_dsub>
 800e26c:	4622      	mov	r2, r4
 800e26e:	462b      	mov	r3, r5
 800e270:	f7f2 f9ca 	bl	8000608 <__aeabi_dmul>
 800e274:	a338      	add	r3, pc, #224	; (adr r3, 800e358 <__kernel_cos+0x158>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f2 f80f 	bl	800029c <__adddf3>
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	f7f2 f9c1 	bl	8000608 <__aeabi_dmul>
 800e286:	a336      	add	r3, pc, #216	; (adr r3, 800e360 <__kernel_cos+0x160>)
 800e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28c:	f7f2 f804 	bl	8000298 <__aeabi_dsub>
 800e290:	4622      	mov	r2, r4
 800e292:	462b      	mov	r3, r5
 800e294:	f7f2 f9b8 	bl	8000608 <__aeabi_dmul>
 800e298:	a333      	add	r3, pc, #204	; (adr r3, 800e368 <__kernel_cos+0x168>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f1 fffd 	bl	800029c <__adddf3>
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	462b      	mov	r3, r5
 800e2a6:	f7f2 f9af 	bl	8000608 <__aeabi_dmul>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f9ab 	bl	8000608 <__aeabi_dmul>
 800e2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	460d      	mov	r5, r1
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 f9a3 	bl	8000608 <__aeabi_dmul>
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7f1 ffe5 	bl	8000298 <__aeabi_dsub>
 800e2ce:	4b2b      	ldr	r3, [pc, #172]	; (800e37c <__kernel_cos+0x17c>)
 800e2d0:	4598      	cmp	r8, r3
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460f      	mov	r7, r1
 800e2d6:	dc10      	bgt.n	800e2fa <__kernel_cos+0xfa>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4650      	mov	r0, sl
 800e2de:	4659      	mov	r1, fp
 800e2e0:	f7f1 ffda 	bl	8000298 <__aeabi_dsub>
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	4926      	ldr	r1, [pc, #152]	; (800e380 <__kernel_cos+0x180>)
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	f7f1 ffd4 	bl	8000298 <__aeabi_dsub>
 800e2f0:	ec41 0b10 	vmov	d0, r0, r1
 800e2f4:	b003      	add	sp, #12
 800e2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fa:	4b22      	ldr	r3, [pc, #136]	; (800e384 <__kernel_cos+0x184>)
 800e2fc:	4920      	ldr	r1, [pc, #128]	; (800e380 <__kernel_cos+0x180>)
 800e2fe:	4598      	cmp	r8, r3
 800e300:	bfcc      	ite	gt
 800e302:	4d21      	ldrgt	r5, [pc, #132]	; (800e388 <__kernel_cos+0x188>)
 800e304:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e308:	2400      	movs	r4, #0
 800e30a:	4622      	mov	r2, r4
 800e30c:	462b      	mov	r3, r5
 800e30e:	2000      	movs	r0, #0
 800e310:	f7f1 ffc2 	bl	8000298 <__aeabi_dsub>
 800e314:	4622      	mov	r2, r4
 800e316:	4680      	mov	r8, r0
 800e318:	4689      	mov	r9, r1
 800e31a:	462b      	mov	r3, r5
 800e31c:	4650      	mov	r0, sl
 800e31e:	4659      	mov	r1, fp
 800e320:	f7f1 ffba 	bl	8000298 <__aeabi_dsub>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	f7f1 ffb6 	bl	8000298 <__aeabi_dsub>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4640      	mov	r0, r8
 800e332:	4649      	mov	r1, r9
 800e334:	e7da      	b.n	800e2ec <__kernel_cos+0xec>
 800e336:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e370 <__kernel_cos+0x170>
 800e33a:	e7db      	b.n	800e2f4 <__kernel_cos+0xf4>
 800e33c:	f3af 8000 	nop.w
 800e340:	be8838d4 	.word	0xbe8838d4
 800e344:	bda8fae9 	.word	0xbda8fae9
 800e348:	bdb4b1c4 	.word	0xbdb4b1c4
 800e34c:	3e21ee9e 	.word	0x3e21ee9e
 800e350:	809c52ad 	.word	0x809c52ad
 800e354:	3e927e4f 	.word	0x3e927e4f
 800e358:	19cb1590 	.word	0x19cb1590
 800e35c:	3efa01a0 	.word	0x3efa01a0
 800e360:	16c15177 	.word	0x16c15177
 800e364:	3f56c16c 	.word	0x3f56c16c
 800e368:	5555554c 	.word	0x5555554c
 800e36c:	3fa55555 	.word	0x3fa55555
 800e370:	00000000 	.word	0x00000000
 800e374:	3ff00000 	.word	0x3ff00000
 800e378:	3fe00000 	.word	0x3fe00000
 800e37c:	3fd33332 	.word	0x3fd33332
 800e380:	3ff00000 	.word	0x3ff00000
 800e384:	3fe90000 	.word	0x3fe90000
 800e388:	3fd20000 	.word	0x3fd20000
 800e38c:	00000000 	.word	0x00000000

0800e390 <__kernel_sin>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	ed2d 8b04 	vpush	{d8-d9}
 800e398:	eeb0 8a41 	vmov.f32	s16, s2
 800e39c:	eef0 8a61 	vmov.f32	s17, s3
 800e3a0:	ec55 4b10 	vmov	r4, r5, d0
 800e3a4:	b083      	sub	sp, #12
 800e3a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e3aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e3ae:	9001      	str	r0, [sp, #4]
 800e3b0:	da06      	bge.n	800e3c0 <__kernel_sin+0x30>
 800e3b2:	ee10 0a10 	vmov	r0, s0
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	f7f2 fbd6 	bl	8000b68 <__aeabi_d2iz>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d051      	beq.n	800e464 <__kernel_sin+0xd4>
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	462b      	mov	r3, r5
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f2 f91e 	bl	8000608 <__aeabi_dmul>
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	468b      	mov	fp, r1
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	f7f2 f916 	bl	8000608 <__aeabi_dmul>
 800e3dc:	a341      	add	r3, pc, #260	; (adr r3, 800e4e4 <__kernel_sin+0x154>)
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	4680      	mov	r8, r0
 800e3e4:	4689      	mov	r9, r1
 800e3e6:	4650      	mov	r0, sl
 800e3e8:	4659      	mov	r1, fp
 800e3ea:	f7f2 f90d 	bl	8000608 <__aeabi_dmul>
 800e3ee:	a33f      	add	r3, pc, #252	; (adr r3, 800e4ec <__kernel_sin+0x15c>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	f7f1 ff50 	bl	8000298 <__aeabi_dsub>
 800e3f8:	4652      	mov	r2, sl
 800e3fa:	465b      	mov	r3, fp
 800e3fc:	f7f2 f904 	bl	8000608 <__aeabi_dmul>
 800e400:	a33c      	add	r3, pc, #240	; (adr r3, 800e4f4 <__kernel_sin+0x164>)
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	f7f1 ff49 	bl	800029c <__adddf3>
 800e40a:	4652      	mov	r2, sl
 800e40c:	465b      	mov	r3, fp
 800e40e:	f7f2 f8fb 	bl	8000608 <__aeabi_dmul>
 800e412:	a33a      	add	r3, pc, #232	; (adr r3, 800e4fc <__kernel_sin+0x16c>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f7f1 ff3e 	bl	8000298 <__aeabi_dsub>
 800e41c:	4652      	mov	r2, sl
 800e41e:	465b      	mov	r3, fp
 800e420:	f7f2 f8f2 	bl	8000608 <__aeabi_dmul>
 800e424:	a337      	add	r3, pc, #220	; (adr r3, 800e504 <__kernel_sin+0x174>)
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	f7f1 ff37 	bl	800029c <__adddf3>
 800e42e:	9b01      	ldr	r3, [sp, #4]
 800e430:	4606      	mov	r6, r0
 800e432:	460f      	mov	r7, r1
 800e434:	b9eb      	cbnz	r3, 800e472 <__kernel_sin+0xe2>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4650      	mov	r0, sl
 800e43c:	4659      	mov	r1, fp
 800e43e:	f7f2 f8e3 	bl	8000608 <__aeabi_dmul>
 800e442:	a325      	add	r3, pc, #148	; (adr r3, 800e4d8 <__kernel_sin+0x148>)
 800e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e448:	f7f1 ff26 	bl	8000298 <__aeabi_dsub>
 800e44c:	4642      	mov	r2, r8
 800e44e:	464b      	mov	r3, r9
 800e450:	f7f2 f8da 	bl	8000608 <__aeabi_dmul>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4620      	mov	r0, r4
 800e45a:	4629      	mov	r1, r5
 800e45c:	f7f1 ff1e 	bl	800029c <__adddf3>
 800e460:	4604      	mov	r4, r0
 800e462:	460d      	mov	r5, r1
 800e464:	ec45 4b10 	vmov	d0, r4, r5
 800e468:	b003      	add	sp, #12
 800e46a:	ecbd 8b04 	vpop	{d8-d9}
 800e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e472:	4b1b      	ldr	r3, [pc, #108]	; (800e4e0 <__kernel_sin+0x150>)
 800e474:	ec51 0b18 	vmov	r0, r1, d8
 800e478:	2200      	movs	r2, #0
 800e47a:	f7f2 f8c5 	bl	8000608 <__aeabi_dmul>
 800e47e:	4632      	mov	r2, r6
 800e480:	ec41 0b19 	vmov	d9, r0, r1
 800e484:	463b      	mov	r3, r7
 800e486:	4640      	mov	r0, r8
 800e488:	4649      	mov	r1, r9
 800e48a:	f7f2 f8bd 	bl	8000608 <__aeabi_dmul>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	ec51 0b19 	vmov	r0, r1, d9
 800e496:	f7f1 feff 	bl	8000298 <__aeabi_dsub>
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	f7f2 f8b3 	bl	8000608 <__aeabi_dmul>
 800e4a2:	ec53 2b18 	vmov	r2, r3, d8
 800e4a6:	f7f1 fef7 	bl	8000298 <__aeabi_dsub>
 800e4aa:	a30b      	add	r3, pc, #44	; (adr r3, 800e4d8 <__kernel_sin+0x148>)
 800e4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	460f      	mov	r7, r1
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	4649      	mov	r1, r9
 800e4b8:	f7f2 f8a6 	bl	8000608 <__aeabi_dmul>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	4639      	mov	r1, r7
 800e4c4:	f7f1 feea 	bl	800029c <__adddf3>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7f1 fee2 	bl	8000298 <__aeabi_dsub>
 800e4d4:	e7c4      	b.n	800e460 <__kernel_sin+0xd0>
 800e4d6:	bf00      	nop
 800e4d8:	55555549 	.word	0x55555549
 800e4dc:	3fc55555 	.word	0x3fc55555
 800e4e0:	3fe00000 	.word	0x3fe00000
 800e4e4:	5acfd57c 	.word	0x5acfd57c
 800e4e8:	3de5d93a 	.word	0x3de5d93a
 800e4ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800e4f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e4f4:	57b1fe7d 	.word	0x57b1fe7d
 800e4f8:	3ec71de3 	.word	0x3ec71de3
 800e4fc:	19c161d5 	.word	0x19c161d5
 800e500:	3f2a01a0 	.word	0x3f2a01a0
 800e504:	1110f8a6 	.word	0x1110f8a6
 800e508:	3f811111 	.word	0x3f811111
 800e50c:	00000000 	.word	0x00000000

0800e510 <__ieee754_rem_pio2>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	ed2d 8b02 	vpush	{d8}
 800e518:	ec55 4b10 	vmov	r4, r5, d0
 800e51c:	4bca      	ldr	r3, [pc, #808]	; (800e848 <__ieee754_rem_pio2+0x338>)
 800e51e:	b08b      	sub	sp, #44	; 0x2c
 800e520:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e524:	4598      	cmp	r8, r3
 800e526:	4682      	mov	sl, r0
 800e528:	9502      	str	r5, [sp, #8]
 800e52a:	dc08      	bgt.n	800e53e <__ieee754_rem_pio2+0x2e>
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	ed80 0b00 	vstr	d0, [r0]
 800e534:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e538:	f04f 0b00 	mov.w	fp, #0
 800e53c:	e028      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e53e:	4bc3      	ldr	r3, [pc, #780]	; (800e84c <__ieee754_rem_pio2+0x33c>)
 800e540:	4598      	cmp	r8, r3
 800e542:	dc78      	bgt.n	800e636 <__ieee754_rem_pio2+0x126>
 800e544:	9b02      	ldr	r3, [sp, #8]
 800e546:	4ec2      	ldr	r6, [pc, #776]	; (800e850 <__ieee754_rem_pio2+0x340>)
 800e548:	2b00      	cmp	r3, #0
 800e54a:	ee10 0a10 	vmov	r0, s0
 800e54e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e810 <__ieee754_rem_pio2+0x300>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	4629      	mov	r1, r5
 800e556:	dd39      	ble.n	800e5cc <__ieee754_rem_pio2+0xbc>
 800e558:	f7f1 fe9e 	bl	8000298 <__aeabi_dsub>
 800e55c:	45b0      	cmp	r8, r6
 800e55e:	4604      	mov	r4, r0
 800e560:	460d      	mov	r5, r1
 800e562:	d01b      	beq.n	800e59c <__ieee754_rem_pio2+0x8c>
 800e564:	a3ac      	add	r3, pc, #688	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f7f1 fe95 	bl	8000298 <__aeabi_dsub>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	e9ca 2300 	strd	r2, r3, [sl]
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f1 fe8d 	bl	8000298 <__aeabi_dsub>
 800e57e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f7f1 fe88 	bl	8000298 <__aeabi_dsub>
 800e588:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e58c:	f04f 0b01 	mov.w	fp, #1
 800e590:	4658      	mov	r0, fp
 800e592:	b00b      	add	sp, #44	; 0x2c
 800e594:	ecbd 8b02 	vpop	{d8}
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	f7f1 fe79 	bl	8000298 <__aeabi_dsub>
 800e5a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	f7f1 fe72 	bl	8000298 <__aeabi_dsub>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	e9ca 2300 	strd	r2, r3, [sl]
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f1 fe6a 	bl	8000298 <__aeabi_dsub>
 800e5c4:	a398      	add	r3, pc, #608	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	e7db      	b.n	800e584 <__ieee754_rem_pio2+0x74>
 800e5cc:	f7f1 fe66 	bl	800029c <__adddf3>
 800e5d0:	45b0      	cmp	r8, r6
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	d016      	beq.n	800e606 <__ieee754_rem_pio2+0xf6>
 800e5d8:	a38f      	add	r3, pc, #572	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	f7f1 fe5d 	bl	800029c <__adddf3>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	e9ca 2300 	strd	r2, r3, [sl]
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f1 fe53 	bl	8000298 <__aeabi_dsub>
 800e5f2:	a389      	add	r3, pc, #548	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f1 fe50 	bl	800029c <__adddf3>
 800e5fc:	f04f 3bff 	mov.w	fp, #4294967295
 800e600:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e604:	e7c4      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e606:	a386      	add	r3, pc, #536	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f1 fe46 	bl	800029c <__adddf3>
 800e610:	a385      	add	r3, pc, #532	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	4604      	mov	r4, r0
 800e618:	460d      	mov	r5, r1
 800e61a:	f7f1 fe3f 	bl	800029c <__adddf3>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	e9ca 2300 	strd	r2, r3, [sl]
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f1 fe35 	bl	8000298 <__aeabi_dsub>
 800e62e:	a37e      	add	r3, pc, #504	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	e7e0      	b.n	800e5f8 <__ieee754_rem_pio2+0xe8>
 800e636:	4b87      	ldr	r3, [pc, #540]	; (800e854 <__ieee754_rem_pio2+0x344>)
 800e638:	4598      	cmp	r8, r3
 800e63a:	f300 80d8 	bgt.w	800e7ee <__ieee754_rem_pio2+0x2de>
 800e63e:	f000 f96d 	bl	800e91c <fabs>
 800e642:	ec55 4b10 	vmov	r4, r5, d0
 800e646:	ee10 0a10 	vmov	r0, s0
 800e64a:	a379      	add	r3, pc, #484	; (adr r3, 800e830 <__ieee754_rem_pio2+0x320>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	4629      	mov	r1, r5
 800e652:	f7f1 ffd9 	bl	8000608 <__aeabi_dmul>
 800e656:	4b80      	ldr	r3, [pc, #512]	; (800e858 <__ieee754_rem_pio2+0x348>)
 800e658:	2200      	movs	r2, #0
 800e65a:	f7f1 fe1f 	bl	800029c <__adddf3>
 800e65e:	f7f2 fa83 	bl	8000b68 <__aeabi_d2iz>
 800e662:	4683      	mov	fp, r0
 800e664:	f7f1 ff66 	bl	8000534 <__aeabi_i2d>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	ec43 2b18 	vmov	d8, r2, r3
 800e670:	a367      	add	r3, pc, #412	; (adr r3, 800e810 <__ieee754_rem_pio2+0x300>)
 800e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e676:	f7f1 ffc7 	bl	8000608 <__aeabi_dmul>
 800e67a:	4602      	mov	r2, r0
 800e67c:	460b      	mov	r3, r1
 800e67e:	4620      	mov	r0, r4
 800e680:	4629      	mov	r1, r5
 800e682:	f7f1 fe09 	bl	8000298 <__aeabi_dsub>
 800e686:	a364      	add	r3, pc, #400	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	ec51 0b18 	vmov	r0, r1, d8
 800e694:	f7f1 ffb8 	bl	8000608 <__aeabi_dmul>
 800e698:	f1bb 0f1f 	cmp.w	fp, #31
 800e69c:	4604      	mov	r4, r0
 800e69e:	460d      	mov	r5, r1
 800e6a0:	dc0d      	bgt.n	800e6be <__ieee754_rem_pio2+0x1ae>
 800e6a2:	4b6e      	ldr	r3, [pc, #440]	; (800e85c <__ieee754_rem_pio2+0x34c>)
 800e6a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ac:	4543      	cmp	r3, r8
 800e6ae:	d006      	beq.n	800e6be <__ieee754_rem_pio2+0x1ae>
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	4639      	mov	r1, r7
 800e6b8:	f7f1 fdee 	bl	8000298 <__aeabi_dsub>
 800e6bc:	e00e      	b.n	800e6dc <__ieee754_rem_pio2+0x1cc>
 800e6be:	462b      	mov	r3, r5
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f1 fde7 	bl	8000298 <__aeabi_dsub>
 800e6ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e6ce:	9303      	str	r3, [sp, #12]
 800e6d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e6d8:	2b10      	cmp	r3, #16
 800e6da:	dc02      	bgt.n	800e6e2 <__ieee754_rem_pio2+0x1d2>
 800e6dc:	e9ca 0100 	strd	r0, r1, [sl]
 800e6e0:	e039      	b.n	800e756 <__ieee754_rem_pio2+0x246>
 800e6e2:	a34f      	add	r3, pc, #316	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	ec51 0b18 	vmov	r0, r1, d8
 800e6ec:	f7f1 ff8c 	bl	8000608 <__aeabi_dmul>
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f1 fdcc 	bl	8000298 <__aeabi_dsub>
 800e700:	4602      	mov	r2, r0
 800e702:	460b      	mov	r3, r1
 800e704:	4680      	mov	r8, r0
 800e706:	4689      	mov	r9, r1
 800e708:	4630      	mov	r0, r6
 800e70a:	4639      	mov	r1, r7
 800e70c:	f7f1 fdc4 	bl	8000298 <__aeabi_dsub>
 800e710:	4622      	mov	r2, r4
 800e712:	462b      	mov	r3, r5
 800e714:	f7f1 fdc0 	bl	8000298 <__aeabi_dsub>
 800e718:	a343      	add	r3, pc, #268	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71e:	4604      	mov	r4, r0
 800e720:	460d      	mov	r5, r1
 800e722:	ec51 0b18 	vmov	r0, r1, d8
 800e726:	f7f1 ff6f 	bl	8000608 <__aeabi_dmul>
 800e72a:	4622      	mov	r2, r4
 800e72c:	462b      	mov	r3, r5
 800e72e:	f7f1 fdb3 	bl	8000298 <__aeabi_dsub>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4604      	mov	r4, r0
 800e738:	460d      	mov	r5, r1
 800e73a:	4640      	mov	r0, r8
 800e73c:	4649      	mov	r1, r9
 800e73e:	f7f1 fdab 	bl	8000298 <__aeabi_dsub>
 800e742:	9a03      	ldr	r2, [sp, #12]
 800e744:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	2b31      	cmp	r3, #49	; 0x31
 800e74c:	dc24      	bgt.n	800e798 <__ieee754_rem_pio2+0x288>
 800e74e:	e9ca 0100 	strd	r0, r1, [sl]
 800e752:	4646      	mov	r6, r8
 800e754:	464f      	mov	r7, r9
 800e756:	e9da 8900 	ldrd	r8, r9, [sl]
 800e75a:	4630      	mov	r0, r6
 800e75c:	4642      	mov	r2, r8
 800e75e:	464b      	mov	r3, r9
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fd99 	bl	8000298 <__aeabi_dsub>
 800e766:	462b      	mov	r3, r5
 800e768:	4622      	mov	r2, r4
 800e76a:	f7f1 fd95 	bl	8000298 <__aeabi_dsub>
 800e76e:	9b02      	ldr	r3, [sp, #8]
 800e770:	2b00      	cmp	r3, #0
 800e772:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e776:	f6bf af0b 	bge.w	800e590 <__ieee754_rem_pio2+0x80>
 800e77a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e77e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e786:	f8ca 8000 	str.w	r8, [sl]
 800e78a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e78e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e792:	f1cb 0b00 	rsb	fp, fp, #0
 800e796:	e6fb      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e798:	a327      	add	r3, pc, #156	; (adr r3, 800e838 <__ieee754_rem_pio2+0x328>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	ec51 0b18 	vmov	r0, r1, d8
 800e7a2:	f7f1 ff31 	bl	8000608 <__aeabi_dmul>
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	f7f1 fd71 	bl	8000298 <__aeabi_dsub>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460f      	mov	r7, r1
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f1 fd69 	bl	8000298 <__aeabi_dsub>
 800e7c6:	4622      	mov	r2, r4
 800e7c8:	462b      	mov	r3, r5
 800e7ca:	f7f1 fd65 	bl	8000298 <__aeabi_dsub>
 800e7ce:	a31c      	add	r3, pc, #112	; (adr r3, 800e840 <__ieee754_rem_pio2+0x330>)
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	ec51 0b18 	vmov	r0, r1, d8
 800e7dc:	f7f1 ff14 	bl	8000608 <__aeabi_dmul>
 800e7e0:	4622      	mov	r2, r4
 800e7e2:	462b      	mov	r3, r5
 800e7e4:	f7f1 fd58 	bl	8000298 <__aeabi_dsub>
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	e760      	b.n	800e6b0 <__ieee754_rem_pio2+0x1a0>
 800e7ee:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <__ieee754_rem_pio2+0x350>)
 800e7f0:	4598      	cmp	r8, r3
 800e7f2:	dd37      	ble.n	800e864 <__ieee754_rem_pio2+0x354>
 800e7f4:	ee10 2a10 	vmov	r2, s0
 800e7f8:	462b      	mov	r3, r5
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 fd4b 	bl	8000298 <__aeabi_dsub>
 800e802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e806:	e9ca 0100 	strd	r0, r1, [sl]
 800e80a:	e695      	b.n	800e538 <__ieee754_rem_pio2+0x28>
 800e80c:	f3af 8000 	nop.w
 800e810:	54400000 	.word	0x54400000
 800e814:	3ff921fb 	.word	0x3ff921fb
 800e818:	1a626331 	.word	0x1a626331
 800e81c:	3dd0b461 	.word	0x3dd0b461
 800e820:	1a600000 	.word	0x1a600000
 800e824:	3dd0b461 	.word	0x3dd0b461
 800e828:	2e037073 	.word	0x2e037073
 800e82c:	3ba3198a 	.word	0x3ba3198a
 800e830:	6dc9c883 	.word	0x6dc9c883
 800e834:	3fe45f30 	.word	0x3fe45f30
 800e838:	2e000000 	.word	0x2e000000
 800e83c:	3ba3198a 	.word	0x3ba3198a
 800e840:	252049c1 	.word	0x252049c1
 800e844:	397b839a 	.word	0x397b839a
 800e848:	3fe921fb 	.word	0x3fe921fb
 800e84c:	4002d97b 	.word	0x4002d97b
 800e850:	3ff921fb 	.word	0x3ff921fb
 800e854:	413921fb 	.word	0x413921fb
 800e858:	3fe00000 	.word	0x3fe00000
 800e85c:	0800f72c 	.word	0x0800f72c
 800e860:	7fefffff 	.word	0x7fefffff
 800e864:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e868:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e86c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e870:	4620      	mov	r0, r4
 800e872:	460d      	mov	r5, r1
 800e874:	f7f2 f978 	bl	8000b68 <__aeabi_d2iz>
 800e878:	f7f1 fe5c 	bl	8000534 <__aeabi_i2d>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4620      	mov	r0, r4
 800e882:	4629      	mov	r1, r5
 800e884:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e888:	f7f1 fd06 	bl	8000298 <__aeabi_dsub>
 800e88c:	4b21      	ldr	r3, [pc, #132]	; (800e914 <__ieee754_rem_pio2+0x404>)
 800e88e:	2200      	movs	r2, #0
 800e890:	f7f1 feba 	bl	8000608 <__aeabi_dmul>
 800e894:	460d      	mov	r5, r1
 800e896:	4604      	mov	r4, r0
 800e898:	f7f2 f966 	bl	8000b68 <__aeabi_d2iz>
 800e89c:	f7f1 fe4a 	bl	8000534 <__aeabi_i2d>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e8ac:	f7f1 fcf4 	bl	8000298 <__aeabi_dsub>
 800e8b0:	4b18      	ldr	r3, [pc, #96]	; (800e914 <__ieee754_rem_pio2+0x404>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f7f1 fea8 	bl	8000608 <__aeabi_dmul>
 800e8b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e8c0:	2703      	movs	r7, #3
 800e8c2:	2400      	movs	r4, #0
 800e8c4:	2500      	movs	r5, #0
 800e8c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	46b9      	mov	r9, r7
 800e8d0:	3f01      	subs	r7, #1
 800e8d2:	f7f2 f901 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d1f5      	bne.n	800e8c6 <__ieee754_rem_pio2+0x3b6>
 800e8da:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <__ieee754_rem_pio2+0x408>)
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	2302      	movs	r3, #2
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	464b      	mov	r3, r9
 800e8e6:	4651      	mov	r1, sl
 800e8e8:	a804      	add	r0, sp, #16
 800e8ea:	f000 f821 	bl	800e930 <__kernel_rem_pio2>
 800e8ee:	9b02      	ldr	r3, [sp, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	4683      	mov	fp, r0
 800e8f4:	f6bf ae4c 	bge.w	800e590 <__ieee754_rem_pio2+0x80>
 800e8f8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e8fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e900:	e9ca 2300 	strd	r2, r3, [sl]
 800e904:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e90c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e910:	e73f      	b.n	800e792 <__ieee754_rem_pio2+0x282>
 800e912:	bf00      	nop
 800e914:	41700000 	.word	0x41700000
 800e918:	0800f7ac 	.word	0x0800f7ac

0800e91c <fabs>:
 800e91c:	ec51 0b10 	vmov	r0, r1, d0
 800e920:	ee10 2a10 	vmov	r2, s0
 800e924:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e928:	ec43 2b10 	vmov	d0, r2, r3
 800e92c:	4770      	bx	lr
	...

0800e930 <__kernel_rem_pio2>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	ed2d 8b02 	vpush	{d8}
 800e938:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e93c:	f112 0f14 	cmn.w	r2, #20
 800e940:	9306      	str	r3, [sp, #24]
 800e942:	9104      	str	r1, [sp, #16]
 800e944:	4bc2      	ldr	r3, [pc, #776]	; (800ec50 <__kernel_rem_pio2+0x320>)
 800e946:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e948:	9009      	str	r0, [sp, #36]	; 0x24
 800e94a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	9b06      	ldr	r3, [sp, #24]
 800e952:	f103 33ff 	add.w	r3, r3, #4294967295
 800e956:	bfa8      	it	ge
 800e958:	1ed4      	subge	r4, r2, #3
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	bfb2      	itee	lt
 800e95e:	2400      	movlt	r4, #0
 800e960:	2318      	movge	r3, #24
 800e962:	fb94 f4f3 	sdivge	r4, r4, r3
 800e966:	f06f 0317 	mvn.w	r3, #23
 800e96a:	fb04 3303 	mla	r3, r4, r3, r3
 800e96e:	eb03 0a02 	add.w	sl, r3, r2
 800e972:	9b00      	ldr	r3, [sp, #0]
 800e974:	9a05      	ldr	r2, [sp, #20]
 800e976:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ec40 <__kernel_rem_pio2+0x310>
 800e97a:	eb03 0802 	add.w	r8, r3, r2
 800e97e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e980:	1aa7      	subs	r7, r4, r2
 800e982:	ae20      	add	r6, sp, #128	; 0x80
 800e984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e988:	2500      	movs	r5, #0
 800e98a:	4545      	cmp	r5, r8
 800e98c:	dd13      	ble.n	800e9b6 <__kernel_rem_pio2+0x86>
 800e98e:	9b06      	ldr	r3, [sp, #24]
 800e990:	aa20      	add	r2, sp, #128	; 0x80
 800e992:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e996:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e99a:	f04f 0800 	mov.w	r8, #0
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	4598      	cmp	r8, r3
 800e9a2:	dc31      	bgt.n	800ea08 <__kernel_rem_pio2+0xd8>
 800e9a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ec40 <__kernel_rem_pio2+0x310>
 800e9a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9b0:	462f      	mov	r7, r5
 800e9b2:	2600      	movs	r6, #0
 800e9b4:	e01b      	b.n	800e9ee <__kernel_rem_pio2+0xbe>
 800e9b6:	42ef      	cmn	r7, r5
 800e9b8:	d407      	bmi.n	800e9ca <__kernel_rem_pio2+0x9a>
 800e9ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e9be:	f7f1 fdb9 	bl	8000534 <__aeabi_i2d>
 800e9c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e9c6:	3501      	adds	r5, #1
 800e9c8:	e7df      	b.n	800e98a <__kernel_rem_pio2+0x5a>
 800e9ca:	ec51 0b18 	vmov	r0, r1, d8
 800e9ce:	e7f8      	b.n	800e9c2 <__kernel_rem_pio2+0x92>
 800e9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e9d8:	f7f1 fe16 	bl	8000608 <__aeabi_dmul>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e4:	f7f1 fc5a 	bl	800029c <__adddf3>
 800e9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	9b05      	ldr	r3, [sp, #20]
 800e9f0:	429e      	cmp	r6, r3
 800e9f2:	f1a7 0708 	sub.w	r7, r7, #8
 800e9f6:	ddeb      	ble.n	800e9d0 <__kernel_rem_pio2+0xa0>
 800e9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9fc:	f108 0801 	add.w	r8, r8, #1
 800ea00:	ecab 7b02 	vstmia	fp!, {d7}
 800ea04:	3508      	adds	r5, #8
 800ea06:	e7ca      	b.n	800e99e <__kernel_rem_pio2+0x6e>
 800ea08:	9b00      	ldr	r3, [sp, #0]
 800ea0a:	aa0c      	add	r2, sp, #48	; 0x30
 800ea0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea12:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ea14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea18:	9c00      	ldr	r4, [sp, #0]
 800ea1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea1c:	00e3      	lsls	r3, r4, #3
 800ea1e:	9308      	str	r3, [sp, #32]
 800ea20:	ab98      	add	r3, sp, #608	; 0x260
 800ea22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ea2a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ea2e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ea34:	46c3      	mov	fp, r8
 800ea36:	46a1      	mov	r9, r4
 800ea38:	f1b9 0f00 	cmp.w	r9, #0
 800ea3c:	f1a5 0508 	sub.w	r5, r5, #8
 800ea40:	dc77      	bgt.n	800eb32 <__kernel_rem_pio2+0x202>
 800ea42:	ec47 6b10 	vmov	d0, r6, r7
 800ea46:	4650      	mov	r0, sl
 800ea48:	f000 fac2 	bl	800efd0 <scalbn>
 800ea4c:	ec57 6b10 	vmov	r6, r7, d0
 800ea50:	2200      	movs	r2, #0
 800ea52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea56:	ee10 0a10 	vmov	r0, s0
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	f7f1 fdd4 	bl	8000608 <__aeabi_dmul>
 800ea60:	ec41 0b10 	vmov	d0, r0, r1
 800ea64:	f000 fb34 	bl	800f0d0 <floor>
 800ea68:	4b7a      	ldr	r3, [pc, #488]	; (800ec54 <__kernel_rem_pio2+0x324>)
 800ea6a:	ec51 0b10 	vmov	r0, r1, d0
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f7f1 fdca 	bl	8000608 <__aeabi_dmul>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f1 fc0c 	bl	8000298 <__aeabi_dsub>
 800ea80:	460f      	mov	r7, r1
 800ea82:	4606      	mov	r6, r0
 800ea84:	f7f2 f870 	bl	8000b68 <__aeabi_d2iz>
 800ea88:	9002      	str	r0, [sp, #8]
 800ea8a:	f7f1 fd53 	bl	8000534 <__aeabi_i2d>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	460b      	mov	r3, r1
 800ea92:	4630      	mov	r0, r6
 800ea94:	4639      	mov	r1, r7
 800ea96:	f7f1 fbff 	bl	8000298 <__aeabi_dsub>
 800ea9a:	f1ba 0f00 	cmp.w	sl, #0
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	460f      	mov	r7, r1
 800eaa2:	dd6d      	ble.n	800eb80 <__kernel_rem_pio2+0x250>
 800eaa4:	1e61      	subs	r1, r4, #1
 800eaa6:	ab0c      	add	r3, sp, #48	; 0x30
 800eaa8:	9d02      	ldr	r5, [sp, #8]
 800eaaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eaae:	f1ca 0018 	rsb	r0, sl, #24
 800eab2:	fa43 f200 	asr.w	r2, r3, r0
 800eab6:	4415      	add	r5, r2
 800eab8:	4082      	lsls	r2, r0
 800eaba:	1a9b      	subs	r3, r3, r2
 800eabc:	aa0c      	add	r2, sp, #48	; 0x30
 800eabe:	9502      	str	r5, [sp, #8]
 800eac0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800eac4:	f1ca 0217 	rsb	r2, sl, #23
 800eac8:	fa43 fb02 	asr.w	fp, r3, r2
 800eacc:	f1bb 0f00 	cmp.w	fp, #0
 800ead0:	dd65      	ble.n	800eb9e <__kernel_rem_pio2+0x26e>
 800ead2:	9b02      	ldr	r3, [sp, #8]
 800ead4:	2200      	movs	r2, #0
 800ead6:	3301      	adds	r3, #1
 800ead8:	9302      	str	r3, [sp, #8]
 800eada:	4615      	mov	r5, r2
 800eadc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eae0:	4294      	cmp	r4, r2
 800eae2:	f300 809f 	bgt.w	800ec24 <__kernel_rem_pio2+0x2f4>
 800eae6:	f1ba 0f00 	cmp.w	sl, #0
 800eaea:	dd07      	ble.n	800eafc <__kernel_rem_pio2+0x1cc>
 800eaec:	f1ba 0f01 	cmp.w	sl, #1
 800eaf0:	f000 80c1 	beq.w	800ec76 <__kernel_rem_pio2+0x346>
 800eaf4:	f1ba 0f02 	cmp.w	sl, #2
 800eaf8:	f000 80c7 	beq.w	800ec8a <__kernel_rem_pio2+0x35a>
 800eafc:	f1bb 0f02 	cmp.w	fp, #2
 800eb00:	d14d      	bne.n	800eb9e <__kernel_rem_pio2+0x26e>
 800eb02:	4632      	mov	r2, r6
 800eb04:	463b      	mov	r3, r7
 800eb06:	4954      	ldr	r1, [pc, #336]	; (800ec58 <__kernel_rem_pio2+0x328>)
 800eb08:	2000      	movs	r0, #0
 800eb0a:	f7f1 fbc5 	bl	8000298 <__aeabi_dsub>
 800eb0e:	4606      	mov	r6, r0
 800eb10:	460f      	mov	r7, r1
 800eb12:	2d00      	cmp	r5, #0
 800eb14:	d043      	beq.n	800eb9e <__kernel_rem_pio2+0x26e>
 800eb16:	4650      	mov	r0, sl
 800eb18:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ec48 <__kernel_rem_pio2+0x318>
 800eb1c:	f000 fa58 	bl	800efd0 <scalbn>
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	ec53 2b10 	vmov	r2, r3, d0
 800eb28:	f7f1 fbb6 	bl	8000298 <__aeabi_dsub>
 800eb2c:	4606      	mov	r6, r0
 800eb2e:	460f      	mov	r7, r1
 800eb30:	e035      	b.n	800eb9e <__kernel_rem_pio2+0x26e>
 800eb32:	4b4a      	ldr	r3, [pc, #296]	; (800ec5c <__kernel_rem_pio2+0x32c>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	4630      	mov	r0, r6
 800eb38:	4639      	mov	r1, r7
 800eb3a:	f7f1 fd65 	bl	8000608 <__aeabi_dmul>
 800eb3e:	f7f2 f813 	bl	8000b68 <__aeabi_d2iz>
 800eb42:	f7f1 fcf7 	bl	8000534 <__aeabi_i2d>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	ec43 2b18 	vmov	d8, r2, r3
 800eb4e:	4b44      	ldr	r3, [pc, #272]	; (800ec60 <__kernel_rem_pio2+0x330>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	f7f1 fd59 	bl	8000608 <__aeabi_dmul>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	f7f1 fb9b 	bl	8000298 <__aeabi_dsub>
 800eb62:	f7f2 f801 	bl	8000b68 <__aeabi_d2iz>
 800eb66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb6a:	f84b 0b04 	str.w	r0, [fp], #4
 800eb6e:	ec51 0b18 	vmov	r0, r1, d8
 800eb72:	f7f1 fb93 	bl	800029c <__adddf3>
 800eb76:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb7a:	4606      	mov	r6, r0
 800eb7c:	460f      	mov	r7, r1
 800eb7e:	e75b      	b.n	800ea38 <__kernel_rem_pio2+0x108>
 800eb80:	d106      	bne.n	800eb90 <__kernel_rem_pio2+0x260>
 800eb82:	1e63      	subs	r3, r4, #1
 800eb84:	aa0c      	add	r2, sp, #48	; 0x30
 800eb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb8a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eb8e:	e79d      	b.n	800eacc <__kernel_rem_pio2+0x19c>
 800eb90:	4b34      	ldr	r3, [pc, #208]	; (800ec64 <__kernel_rem_pio2+0x334>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	f7f1 ffbe 	bl	8000b14 <__aeabi_dcmpge>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d140      	bne.n	800ec1e <__kernel_rem_pio2+0x2ee>
 800eb9c:	4683      	mov	fp, r0
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2300      	movs	r3, #0
 800eba2:	4630      	mov	r0, r6
 800eba4:	4639      	mov	r1, r7
 800eba6:	f7f1 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	f000 80c1 	beq.w	800ed32 <__kernel_rem_pio2+0x402>
 800ebb0:	1e65      	subs	r5, r4, #1
 800ebb2:	462b      	mov	r3, r5
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	9900      	ldr	r1, [sp, #0]
 800ebb8:	428b      	cmp	r3, r1
 800ebba:	da6d      	bge.n	800ec98 <__kernel_rem_pio2+0x368>
 800ebbc:	2a00      	cmp	r2, #0
 800ebbe:	f000 808a 	beq.w	800ecd6 <__kernel_rem_pio2+0x3a6>
 800ebc2:	ab0c      	add	r3, sp, #48	; 0x30
 800ebc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800ebc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80ae 	beq.w	800ed2e <__kernel_rem_pio2+0x3fe>
 800ebd2:	4650      	mov	r0, sl
 800ebd4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ec48 <__kernel_rem_pio2+0x318>
 800ebd8:	f000 f9fa 	bl	800efd0 <scalbn>
 800ebdc:	1c6b      	adds	r3, r5, #1
 800ebde:	00da      	lsls	r2, r3, #3
 800ebe0:	9205      	str	r2, [sp, #20]
 800ebe2:	ec57 6b10 	vmov	r6, r7, d0
 800ebe6:	aa70      	add	r2, sp, #448	; 0x1c0
 800ebe8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ec5c <__kernel_rem_pio2+0x32c>
 800ebec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ebf0:	462c      	mov	r4, r5
 800ebf2:	f04f 0800 	mov.w	r8, #0
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	f280 80d4 	bge.w	800eda4 <__kernel_rem_pio2+0x474>
 800ebfc:	462c      	mov	r4, r5
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	f2c0 8102 	blt.w	800ee08 <__kernel_rem_pio2+0x4d8>
 800ec04:	4b18      	ldr	r3, [pc, #96]	; (800ec68 <__kernel_rem_pio2+0x338>)
 800ec06:	461e      	mov	r6, r3
 800ec08:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec0a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ec0e:	1b2b      	subs	r3, r5, r4
 800ec10:	f04f 0900 	mov.w	r9, #0
 800ec14:	f04f 0a00 	mov.w	sl, #0
 800ec18:	2700      	movs	r7, #0
 800ec1a:	9306      	str	r3, [sp, #24]
 800ec1c:	e0e6      	b.n	800edec <__kernel_rem_pio2+0x4bc>
 800ec1e:	f04f 0b02 	mov.w	fp, #2
 800ec22:	e756      	b.n	800ead2 <__kernel_rem_pio2+0x1a2>
 800ec24:	f8d8 3000 	ldr.w	r3, [r8]
 800ec28:	bb05      	cbnz	r5, 800ec6c <__kernel_rem_pio2+0x33c>
 800ec2a:	b123      	cbz	r3, 800ec36 <__kernel_rem_pio2+0x306>
 800ec2c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ec30:	f8c8 3000 	str.w	r3, [r8]
 800ec34:	2301      	movs	r3, #1
 800ec36:	3201      	adds	r2, #1
 800ec38:	f108 0804 	add.w	r8, r8, #4
 800ec3c:	461d      	mov	r5, r3
 800ec3e:	e74f      	b.n	800eae0 <__kernel_rem_pio2+0x1b0>
	...
 800ec4c:	3ff00000 	.word	0x3ff00000
 800ec50:	0800f8f8 	.word	0x0800f8f8
 800ec54:	40200000 	.word	0x40200000
 800ec58:	3ff00000 	.word	0x3ff00000
 800ec5c:	3e700000 	.word	0x3e700000
 800ec60:	41700000 	.word	0x41700000
 800ec64:	3fe00000 	.word	0x3fe00000
 800ec68:	0800f8b8 	.word	0x0800f8b8
 800ec6c:	1acb      	subs	r3, r1, r3
 800ec6e:	f8c8 3000 	str.w	r3, [r8]
 800ec72:	462b      	mov	r3, r5
 800ec74:	e7df      	b.n	800ec36 <__kernel_rem_pio2+0x306>
 800ec76:	1e62      	subs	r2, r4, #1
 800ec78:	ab0c      	add	r3, sp, #48	; 0x30
 800ec7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec82:	a90c      	add	r1, sp, #48	; 0x30
 800ec84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec88:	e738      	b.n	800eafc <__kernel_rem_pio2+0x1cc>
 800ec8a:	1e62      	subs	r2, r4, #1
 800ec8c:	ab0c      	add	r3, sp, #48	; 0x30
 800ec8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec96:	e7f4      	b.n	800ec82 <__kernel_rem_pio2+0x352>
 800ec98:	a90c      	add	r1, sp, #48	; 0x30
 800ec9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	430a      	orrs	r2, r1
 800eca2:	e788      	b.n	800ebb6 <__kernel_rem_pio2+0x286>
 800eca4:	3301      	adds	r3, #1
 800eca6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ecaa:	2900      	cmp	r1, #0
 800ecac:	d0fa      	beq.n	800eca4 <__kernel_rem_pio2+0x374>
 800ecae:	9a08      	ldr	r2, [sp, #32]
 800ecb0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ecb4:	446a      	add	r2, sp
 800ecb6:	3a98      	subs	r2, #152	; 0x98
 800ecb8:	9208      	str	r2, [sp, #32]
 800ecba:	9a06      	ldr	r2, [sp, #24]
 800ecbc:	a920      	add	r1, sp, #128	; 0x80
 800ecbe:	18a2      	adds	r2, r4, r2
 800ecc0:	18e3      	adds	r3, r4, r3
 800ecc2:	f104 0801 	add.w	r8, r4, #1
 800ecc6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ecca:	9302      	str	r3, [sp, #8]
 800eccc:	9b02      	ldr	r3, [sp, #8]
 800ecce:	4543      	cmp	r3, r8
 800ecd0:	da04      	bge.n	800ecdc <__kernel_rem_pio2+0x3ac>
 800ecd2:	461c      	mov	r4, r3
 800ecd4:	e6a2      	b.n	800ea1c <__kernel_rem_pio2+0xec>
 800ecd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e7e4      	b.n	800eca6 <__kernel_rem_pio2+0x376>
 800ecdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecde:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ece2:	f7f1 fc27 	bl	8000534 <__aeabi_i2d>
 800ece6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ecea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecec:	46ab      	mov	fp, r5
 800ecee:	461c      	mov	r4, r3
 800ecf0:	f04f 0900 	mov.w	r9, #0
 800ecf4:	2600      	movs	r6, #0
 800ecf6:	2700      	movs	r7, #0
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	4599      	cmp	r9, r3
 800ecfc:	dd06      	ble.n	800ed0c <__kernel_rem_pio2+0x3dc>
 800ecfe:	9b08      	ldr	r3, [sp, #32]
 800ed00:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ed04:	f108 0801 	add.w	r8, r8, #1
 800ed08:	9308      	str	r3, [sp, #32]
 800ed0a:	e7df      	b.n	800eccc <__kernel_rem_pio2+0x39c>
 800ed0c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ed10:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ed14:	f7f1 fc78 	bl	8000608 <__aeabi_dmul>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	4639      	mov	r1, r7
 800ed20:	f7f1 fabc 	bl	800029c <__adddf3>
 800ed24:	f109 0901 	add.w	r9, r9, #1
 800ed28:	4606      	mov	r6, r0
 800ed2a:	460f      	mov	r7, r1
 800ed2c:	e7e4      	b.n	800ecf8 <__kernel_rem_pio2+0x3c8>
 800ed2e:	3d01      	subs	r5, #1
 800ed30:	e747      	b.n	800ebc2 <__kernel_rem_pio2+0x292>
 800ed32:	ec47 6b10 	vmov	d0, r6, r7
 800ed36:	f1ca 0000 	rsb	r0, sl, #0
 800ed3a:	f000 f949 	bl	800efd0 <scalbn>
 800ed3e:	ec57 6b10 	vmov	r6, r7, d0
 800ed42:	4ba0      	ldr	r3, [pc, #640]	; (800efc4 <__kernel_rem_pio2+0x694>)
 800ed44:	ee10 0a10 	vmov	r0, s0
 800ed48:	2200      	movs	r2, #0
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	f7f1 fee2 	bl	8000b14 <__aeabi_dcmpge>
 800ed50:	b1f8      	cbz	r0, 800ed92 <__kernel_rem_pio2+0x462>
 800ed52:	4b9d      	ldr	r3, [pc, #628]	; (800efc8 <__kernel_rem_pio2+0x698>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	4630      	mov	r0, r6
 800ed58:	4639      	mov	r1, r7
 800ed5a:	f7f1 fc55 	bl	8000608 <__aeabi_dmul>
 800ed5e:	f7f1 ff03 	bl	8000b68 <__aeabi_d2iz>
 800ed62:	4680      	mov	r8, r0
 800ed64:	f7f1 fbe6 	bl	8000534 <__aeabi_i2d>
 800ed68:	4b96      	ldr	r3, [pc, #600]	; (800efc4 <__kernel_rem_pio2+0x694>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f7f1 fc4c 	bl	8000608 <__aeabi_dmul>
 800ed70:	460b      	mov	r3, r1
 800ed72:	4602      	mov	r2, r0
 800ed74:	4639      	mov	r1, r7
 800ed76:	4630      	mov	r0, r6
 800ed78:	f7f1 fa8e 	bl	8000298 <__aeabi_dsub>
 800ed7c:	f7f1 fef4 	bl	8000b68 <__aeabi_d2iz>
 800ed80:	1c65      	adds	r5, r4, #1
 800ed82:	ab0c      	add	r3, sp, #48	; 0x30
 800ed84:	f10a 0a18 	add.w	sl, sl, #24
 800ed88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed8c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ed90:	e71f      	b.n	800ebd2 <__kernel_rem_pio2+0x2a2>
 800ed92:	4630      	mov	r0, r6
 800ed94:	4639      	mov	r1, r7
 800ed96:	f7f1 fee7 	bl	8000b68 <__aeabi_d2iz>
 800ed9a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed9c:	4625      	mov	r5, r4
 800ed9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eda2:	e716      	b.n	800ebd2 <__kernel_rem_pio2+0x2a2>
 800eda4:	ab0c      	add	r3, sp, #48	; 0x30
 800eda6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800edaa:	f7f1 fbc3 	bl	8000534 <__aeabi_i2d>
 800edae:	4632      	mov	r2, r6
 800edb0:	463b      	mov	r3, r7
 800edb2:	f7f1 fc29 	bl	8000608 <__aeabi_dmul>
 800edb6:	4642      	mov	r2, r8
 800edb8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800edbc:	464b      	mov	r3, r9
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7f1 fc21 	bl	8000608 <__aeabi_dmul>
 800edc6:	3c01      	subs	r4, #1
 800edc8:	4606      	mov	r6, r0
 800edca:	460f      	mov	r7, r1
 800edcc:	e713      	b.n	800ebf6 <__kernel_rem_pio2+0x2c6>
 800edce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800edd2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800edd6:	f7f1 fc17 	bl	8000608 <__aeabi_dmul>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4648      	mov	r0, r9
 800ede0:	4651      	mov	r1, sl
 800ede2:	f7f1 fa5b 	bl	800029c <__adddf3>
 800ede6:	3701      	adds	r7, #1
 800ede8:	4681      	mov	r9, r0
 800edea:	468a      	mov	sl, r1
 800edec:	9b00      	ldr	r3, [sp, #0]
 800edee:	429f      	cmp	r7, r3
 800edf0:	dc02      	bgt.n	800edf8 <__kernel_rem_pio2+0x4c8>
 800edf2:	9b06      	ldr	r3, [sp, #24]
 800edf4:	429f      	cmp	r7, r3
 800edf6:	ddea      	ble.n	800edce <__kernel_rem_pio2+0x49e>
 800edf8:	9a06      	ldr	r2, [sp, #24]
 800edfa:	ab48      	add	r3, sp, #288	; 0x120
 800edfc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ee00:	e9c6 9a00 	strd	r9, sl, [r6]
 800ee04:	3c01      	subs	r4, #1
 800ee06:	e6fa      	b.n	800ebfe <__kernel_rem_pio2+0x2ce>
 800ee08:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	dc0b      	bgt.n	800ee26 <__kernel_rem_pio2+0x4f6>
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	dc39      	bgt.n	800ee86 <__kernel_rem_pio2+0x556>
 800ee12:	d05d      	beq.n	800eed0 <__kernel_rem_pio2+0x5a0>
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	f003 0007 	and.w	r0, r3, #7
 800ee1a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ee1e:	ecbd 8b02 	vpop	{d8}
 800ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee28:	2b03      	cmp	r3, #3
 800ee2a:	d1f3      	bne.n	800ee14 <__kernel_rem_pio2+0x4e4>
 800ee2c:	9b05      	ldr	r3, [sp, #20]
 800ee2e:	9500      	str	r5, [sp, #0]
 800ee30:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ee34:	eb0d 0403 	add.w	r4, sp, r3
 800ee38:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ee3c:	46a2      	mov	sl, r4
 800ee3e:	9b00      	ldr	r3, [sp, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee46:	dc69      	bgt.n	800ef1c <__kernel_rem_pio2+0x5ec>
 800ee48:	46aa      	mov	sl, r5
 800ee4a:	f1ba 0f01 	cmp.w	sl, #1
 800ee4e:	f1a4 0408 	sub.w	r4, r4, #8
 800ee52:	f300 8083 	bgt.w	800ef5c <__kernel_rem_pio2+0x62c>
 800ee56:	9c05      	ldr	r4, [sp, #20]
 800ee58:	ab48      	add	r3, sp, #288	; 0x120
 800ee5a:	441c      	add	r4, r3
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	2100      	movs	r1, #0
 800ee60:	2d01      	cmp	r5, #1
 800ee62:	f300 809a 	bgt.w	800ef9a <__kernel_rem_pio2+0x66a>
 800ee66:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ee6a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ee6e:	f1bb 0f00 	cmp.w	fp, #0
 800ee72:	f040 8098 	bne.w	800efa6 <__kernel_rem_pio2+0x676>
 800ee76:	9b04      	ldr	r3, [sp, #16]
 800ee78:	e9c3 7800 	strd	r7, r8, [r3]
 800ee7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ee80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee84:	e7c6      	b.n	800ee14 <__kernel_rem_pio2+0x4e4>
 800ee86:	9e05      	ldr	r6, [sp, #20]
 800ee88:	ab48      	add	r3, sp, #288	; 0x120
 800ee8a:	441e      	add	r6, r3
 800ee8c:	462c      	mov	r4, r5
 800ee8e:	2000      	movs	r0, #0
 800ee90:	2100      	movs	r1, #0
 800ee92:	2c00      	cmp	r4, #0
 800ee94:	da33      	bge.n	800eefe <__kernel_rem_pio2+0x5ce>
 800ee96:	f1bb 0f00 	cmp.w	fp, #0
 800ee9a:	d036      	beq.n	800ef0a <__kernel_rem_pio2+0x5da>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eea2:	9c04      	ldr	r4, [sp, #16]
 800eea4:	e9c4 2300 	strd	r2, r3, [r4]
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800eeb0:	f7f1 f9f2 	bl	8000298 <__aeabi_dsub>
 800eeb4:	ae4a      	add	r6, sp, #296	; 0x128
 800eeb6:	2401      	movs	r4, #1
 800eeb8:	42a5      	cmp	r5, r4
 800eeba:	da29      	bge.n	800ef10 <__kernel_rem_pio2+0x5e0>
 800eebc:	f1bb 0f00 	cmp.w	fp, #0
 800eec0:	d002      	beq.n	800eec8 <__kernel_rem_pio2+0x598>
 800eec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eec6:	4619      	mov	r1, r3
 800eec8:	9b04      	ldr	r3, [sp, #16]
 800eeca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eece:	e7a1      	b.n	800ee14 <__kernel_rem_pio2+0x4e4>
 800eed0:	9c05      	ldr	r4, [sp, #20]
 800eed2:	ab48      	add	r3, sp, #288	; 0x120
 800eed4:	441c      	add	r4, r3
 800eed6:	2000      	movs	r0, #0
 800eed8:	2100      	movs	r1, #0
 800eeda:	2d00      	cmp	r5, #0
 800eedc:	da09      	bge.n	800eef2 <__kernel_rem_pio2+0x5c2>
 800eede:	f1bb 0f00 	cmp.w	fp, #0
 800eee2:	d002      	beq.n	800eeea <__kernel_rem_pio2+0x5ba>
 800eee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eee8:	4619      	mov	r1, r3
 800eeea:	9b04      	ldr	r3, [sp, #16]
 800eeec:	e9c3 0100 	strd	r0, r1, [r3]
 800eef0:	e790      	b.n	800ee14 <__kernel_rem_pio2+0x4e4>
 800eef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eef6:	f7f1 f9d1 	bl	800029c <__adddf3>
 800eefa:	3d01      	subs	r5, #1
 800eefc:	e7ed      	b.n	800eeda <__kernel_rem_pio2+0x5aa>
 800eefe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ef02:	f7f1 f9cb 	bl	800029c <__adddf3>
 800ef06:	3c01      	subs	r4, #1
 800ef08:	e7c3      	b.n	800ee92 <__kernel_rem_pio2+0x562>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	e7c8      	b.n	800eea2 <__kernel_rem_pio2+0x572>
 800ef10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ef14:	f7f1 f9c2 	bl	800029c <__adddf3>
 800ef18:	3401      	adds	r4, #1
 800ef1a:	e7cd      	b.n	800eeb8 <__kernel_rem_pio2+0x588>
 800ef1c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ef24:	9b00      	ldr	r3, [sp, #0]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4632      	mov	r2, r6
 800ef2c:	463b      	mov	r3, r7
 800ef2e:	4640      	mov	r0, r8
 800ef30:	4649      	mov	r1, r9
 800ef32:	f7f1 f9b3 	bl	800029c <__adddf3>
 800ef36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 f9a9 	bl	8000298 <__aeabi_dsub>
 800ef46:	4632      	mov	r2, r6
 800ef48:	463b      	mov	r3, r7
 800ef4a:	f7f1 f9a7 	bl	800029c <__adddf3>
 800ef4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ef52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef56:	ed8a 7b00 	vstr	d7, [sl]
 800ef5a:	e770      	b.n	800ee3e <__kernel_rem_pio2+0x50e>
 800ef5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ef64:	4640      	mov	r0, r8
 800ef66:	4632      	mov	r2, r6
 800ef68:	463b      	mov	r3, r7
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f7f1 f996 	bl	800029c <__adddf3>
 800ef70:	e9cd 0100 	strd	r0, r1, [sp]
 800ef74:	4602      	mov	r2, r0
 800ef76:	460b      	mov	r3, r1
 800ef78:	4640      	mov	r0, r8
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	f7f1 f98c 	bl	8000298 <__aeabi_dsub>
 800ef80:	4632      	mov	r2, r6
 800ef82:	463b      	mov	r3, r7
 800ef84:	f7f1 f98a 	bl	800029c <__adddf3>
 800ef88:	ed9d 7b00 	vldr	d7, [sp]
 800ef8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef90:	ed84 7b00 	vstr	d7, [r4]
 800ef94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef98:	e757      	b.n	800ee4a <__kernel_rem_pio2+0x51a>
 800ef9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef9e:	f7f1 f97d 	bl	800029c <__adddf3>
 800efa2:	3d01      	subs	r5, #1
 800efa4:	e75c      	b.n	800ee60 <__kernel_rem_pio2+0x530>
 800efa6:	9b04      	ldr	r3, [sp, #16]
 800efa8:	9a04      	ldr	r2, [sp, #16]
 800efaa:	601f      	str	r7, [r3, #0]
 800efac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800efb0:	605c      	str	r4, [r3, #4]
 800efb2:	609d      	str	r5, [r3, #8]
 800efb4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800efb8:	60d3      	str	r3, [r2, #12]
 800efba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efbe:	6110      	str	r0, [r2, #16]
 800efc0:	6153      	str	r3, [r2, #20]
 800efc2:	e727      	b.n	800ee14 <__kernel_rem_pio2+0x4e4>
 800efc4:	41700000 	.word	0x41700000
 800efc8:	3e700000 	.word	0x3e700000
 800efcc:	00000000 	.word	0x00000000

0800efd0 <scalbn>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	ec55 4b10 	vmov	r4, r5, d0
 800efd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800efda:	4606      	mov	r6, r0
 800efdc:	462b      	mov	r3, r5
 800efde:	b999      	cbnz	r1, 800f008 <scalbn+0x38>
 800efe0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800efe4:	4323      	orrs	r3, r4
 800efe6:	d03f      	beq.n	800f068 <scalbn+0x98>
 800efe8:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <scalbn+0xf0>)
 800efea:	4629      	mov	r1, r5
 800efec:	ee10 0a10 	vmov	r0, s0
 800eff0:	2200      	movs	r2, #0
 800eff2:	f7f1 fb09 	bl	8000608 <__aeabi_dmul>
 800eff6:	4b33      	ldr	r3, [pc, #204]	; (800f0c4 <scalbn+0xf4>)
 800eff8:	429e      	cmp	r6, r3
 800effa:	4604      	mov	r4, r0
 800effc:	460d      	mov	r5, r1
 800effe:	da10      	bge.n	800f022 <scalbn+0x52>
 800f000:	a327      	add	r3, pc, #156	; (adr r3, 800f0a0 <scalbn+0xd0>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	e01f      	b.n	800f048 <scalbn+0x78>
 800f008:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f00c:	4291      	cmp	r1, r2
 800f00e:	d10c      	bne.n	800f02a <scalbn+0x5a>
 800f010:	ee10 2a10 	vmov	r2, s0
 800f014:	4620      	mov	r0, r4
 800f016:	4629      	mov	r1, r5
 800f018:	f7f1 f940 	bl	800029c <__adddf3>
 800f01c:	4604      	mov	r4, r0
 800f01e:	460d      	mov	r5, r1
 800f020:	e022      	b.n	800f068 <scalbn+0x98>
 800f022:	460b      	mov	r3, r1
 800f024:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f028:	3936      	subs	r1, #54	; 0x36
 800f02a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f02e:	4296      	cmp	r6, r2
 800f030:	dd0d      	ble.n	800f04e <scalbn+0x7e>
 800f032:	2d00      	cmp	r5, #0
 800f034:	a11c      	add	r1, pc, #112	; (adr r1, 800f0a8 <scalbn+0xd8>)
 800f036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f03a:	da02      	bge.n	800f042 <scalbn+0x72>
 800f03c:	a11c      	add	r1, pc, #112	; (adr r1, 800f0b0 <scalbn+0xe0>)
 800f03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f042:	a319      	add	r3, pc, #100	; (adr r3, 800f0a8 <scalbn+0xd8>)
 800f044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f048:	f7f1 fade 	bl	8000608 <__aeabi_dmul>
 800f04c:	e7e6      	b.n	800f01c <scalbn+0x4c>
 800f04e:	1872      	adds	r2, r6, r1
 800f050:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f054:	428a      	cmp	r2, r1
 800f056:	dcec      	bgt.n	800f032 <scalbn+0x62>
 800f058:	2a00      	cmp	r2, #0
 800f05a:	dd08      	ble.n	800f06e <scalbn+0x9e>
 800f05c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f068:	ec45 4b10 	vmov	d0, r4, r5
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f072:	da08      	bge.n	800f086 <scalbn+0xb6>
 800f074:	2d00      	cmp	r5, #0
 800f076:	a10a      	add	r1, pc, #40	; (adr r1, 800f0a0 <scalbn+0xd0>)
 800f078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f07c:	dac0      	bge.n	800f000 <scalbn+0x30>
 800f07e:	a10e      	add	r1, pc, #56	; (adr r1, 800f0b8 <scalbn+0xe8>)
 800f080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f084:	e7bc      	b.n	800f000 <scalbn+0x30>
 800f086:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f08a:	3236      	adds	r2, #54	; 0x36
 800f08c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f090:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f094:	4620      	mov	r0, r4
 800f096:	4b0c      	ldr	r3, [pc, #48]	; (800f0c8 <scalbn+0xf8>)
 800f098:	2200      	movs	r2, #0
 800f09a:	e7d5      	b.n	800f048 <scalbn+0x78>
 800f09c:	f3af 8000 	nop.w
 800f0a0:	c2f8f359 	.word	0xc2f8f359
 800f0a4:	01a56e1f 	.word	0x01a56e1f
 800f0a8:	8800759c 	.word	0x8800759c
 800f0ac:	7e37e43c 	.word	0x7e37e43c
 800f0b0:	8800759c 	.word	0x8800759c
 800f0b4:	fe37e43c 	.word	0xfe37e43c
 800f0b8:	c2f8f359 	.word	0xc2f8f359
 800f0bc:	81a56e1f 	.word	0x81a56e1f
 800f0c0:	43500000 	.word	0x43500000
 800f0c4:	ffff3cb0 	.word	0xffff3cb0
 800f0c8:	3c900000 	.word	0x3c900000
 800f0cc:	00000000 	.word	0x00000000

0800f0d0 <floor>:
 800f0d0:	ec51 0b10 	vmov	r0, r1, d0
 800f0d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f0e0:	2e13      	cmp	r6, #19
 800f0e2:	ee10 5a10 	vmov	r5, s0
 800f0e6:	ee10 8a10 	vmov	r8, s0
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	dc31      	bgt.n	800f152 <floor+0x82>
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	da14      	bge.n	800f11c <floor+0x4c>
 800f0f2:	a333      	add	r3, pc, #204	; (adr r3, 800f1c0 <floor+0xf0>)
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8d0 	bl	800029c <__adddf3>
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2300      	movs	r3, #0
 800f100:	f7f1 fd12 	bl	8000b28 <__aeabi_dcmpgt>
 800f104:	b138      	cbz	r0, 800f116 <floor+0x46>
 800f106:	2c00      	cmp	r4, #0
 800f108:	da53      	bge.n	800f1b2 <floor+0xe2>
 800f10a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f10e:	4325      	orrs	r5, r4
 800f110:	d052      	beq.n	800f1b8 <floor+0xe8>
 800f112:	4c2d      	ldr	r4, [pc, #180]	; (800f1c8 <floor+0xf8>)
 800f114:	2500      	movs	r5, #0
 800f116:	4621      	mov	r1, r4
 800f118:	4628      	mov	r0, r5
 800f11a:	e024      	b.n	800f166 <floor+0x96>
 800f11c:	4f2b      	ldr	r7, [pc, #172]	; (800f1cc <floor+0xfc>)
 800f11e:	4137      	asrs	r7, r6
 800f120:	ea01 0307 	and.w	r3, r1, r7
 800f124:	4303      	orrs	r3, r0
 800f126:	d01e      	beq.n	800f166 <floor+0x96>
 800f128:	a325      	add	r3, pc, #148	; (adr r3, 800f1c0 <floor+0xf0>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 f8b5 	bl	800029c <__adddf3>
 800f132:	2200      	movs	r2, #0
 800f134:	2300      	movs	r3, #0
 800f136:	f7f1 fcf7 	bl	8000b28 <__aeabi_dcmpgt>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d0eb      	beq.n	800f116 <floor+0x46>
 800f13e:	2c00      	cmp	r4, #0
 800f140:	bfbe      	ittt	lt
 800f142:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f146:	4133      	asrlt	r3, r6
 800f148:	18e4      	addlt	r4, r4, r3
 800f14a:	ea24 0407 	bic.w	r4, r4, r7
 800f14e:	2500      	movs	r5, #0
 800f150:	e7e1      	b.n	800f116 <floor+0x46>
 800f152:	2e33      	cmp	r6, #51	; 0x33
 800f154:	dd0b      	ble.n	800f16e <floor+0x9e>
 800f156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f15a:	d104      	bne.n	800f166 <floor+0x96>
 800f15c:	ee10 2a10 	vmov	r2, s0
 800f160:	460b      	mov	r3, r1
 800f162:	f7f1 f89b 	bl	800029c <__adddf3>
 800f166:	ec41 0b10 	vmov	d0, r0, r1
 800f16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f172:	f04f 37ff 	mov.w	r7, #4294967295
 800f176:	40df      	lsrs	r7, r3
 800f178:	4238      	tst	r0, r7
 800f17a:	d0f4      	beq.n	800f166 <floor+0x96>
 800f17c:	a310      	add	r3, pc, #64	; (adr r3, 800f1c0 <floor+0xf0>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	f7f1 f88b 	bl	800029c <__adddf3>
 800f186:	2200      	movs	r2, #0
 800f188:	2300      	movs	r3, #0
 800f18a:	f7f1 fccd 	bl	8000b28 <__aeabi_dcmpgt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d0c1      	beq.n	800f116 <floor+0x46>
 800f192:	2c00      	cmp	r4, #0
 800f194:	da0a      	bge.n	800f1ac <floor+0xdc>
 800f196:	2e14      	cmp	r6, #20
 800f198:	d101      	bne.n	800f19e <floor+0xce>
 800f19a:	3401      	adds	r4, #1
 800f19c:	e006      	b.n	800f1ac <floor+0xdc>
 800f19e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	40b3      	lsls	r3, r6
 800f1a6:	441d      	add	r5, r3
 800f1a8:	45a8      	cmp	r8, r5
 800f1aa:	d8f6      	bhi.n	800f19a <floor+0xca>
 800f1ac:	ea25 0507 	bic.w	r5, r5, r7
 800f1b0:	e7b1      	b.n	800f116 <floor+0x46>
 800f1b2:	2500      	movs	r5, #0
 800f1b4:	462c      	mov	r4, r5
 800f1b6:	e7ae      	b.n	800f116 <floor+0x46>
 800f1b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f1bc:	e7ab      	b.n	800f116 <floor+0x46>
 800f1be:	bf00      	nop
 800f1c0:	8800759c 	.word	0x8800759c
 800f1c4:	7e37e43c 	.word	0x7e37e43c
 800f1c8:	bff00000 	.word	0xbff00000
 800f1cc:	000fffff 	.word	0x000fffff

0800f1d0 <_init>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	bf00      	nop
 800f1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d6:	bc08      	pop	{r3}
 800f1d8:	469e      	mov	lr, r3
 800f1da:	4770      	bx	lr

0800f1dc <_fini>:
 800f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1de:	bf00      	nop
 800f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e2:	bc08      	pop	{r3}
 800f1e4:	469e      	mov	lr, r3
 800f1e6:	4770      	bx	lr
